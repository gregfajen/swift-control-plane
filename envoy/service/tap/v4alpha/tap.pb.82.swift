// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/service/tap/v4alpha/tap.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#not-implemented-hide:] Stream message for the Tap API. Envoy will open a stream to the server
/// and stream taps without ever expecting a response.
public struct Envoy_Service_Tap_V4alpha_StreamTapsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier data effectively is a structured metadata. As a performance optimization this will
  /// only be sent in the first message on the stream.
  public var identifier: Envoy_Service_Tap_V4alpha_StreamTapsRequest.Identifier {
    get {return _identifier ?? Envoy_Service_Tap_V4alpha_StreamTapsRequest.Identifier()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  public var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  public mutating func clearIdentifier() {self._identifier = nil}

  /// The trace id. this can be used to merge together a streaming trace. Note that the trace_id
  /// is not guaranteed to be spatially or temporally unique.
  public var traceID: UInt64 = 0

  /// The trace data.
  public var trace: Envoy_Data_Tap_V3_TraceWrapper {
    get {return _trace ?? Envoy_Data_Tap_V3_TraceWrapper()}
    set {_trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  public var hasTrace: Bool {return self._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  public mutating func clearTrace() {self._trace = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Identifier {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The node sending taps over the stream.
    public var node: Envoy_Config_Core_V4alpha_Node {
      get {return _node ?? Envoy_Config_Core_V4alpha_Node()}
      set {_node = newValue}
    }
    /// Returns true if `node` has been explicitly set.
    public var hasNode: Bool {return self._node != nil}
    /// Clears the value of `node`. Subsequent reads from it will return its default value.
    public mutating func clearNode() {self._node = nil}

    /// The opaque identifier that was set in the :ref:`output config
    /// <envoy_api_field_config.tap.v4alpha.StreamingGrpcSink.tap_id>`.
    public var tapID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _node: Envoy_Config_Core_V4alpha_Node? = nil
  }

  public init() {}

  fileprivate var _identifier: Envoy_Service_Tap_V4alpha_StreamTapsRequest.Identifier? = nil
  fileprivate var _trace: Envoy_Data_Tap_V3_TraceWrapper? = nil
}

/// [#not-implemented-hide:]
public struct Envoy_Service_Tap_V4alpha_StreamTapsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.service.tap.v4alpha"

extension Envoy_Service_Tap_V4alpha_StreamTapsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamTapsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "trace_id"),
    3: .same(proto: "trace"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._identifier)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.traceID)
      case 3: try decoder.decodeSingularMessageField(value: &self._trace)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.traceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.traceID, fieldNumber: 2)
    }
    if let v = self._trace {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Tap_V4alpha_StreamTapsRequest, rhs: Envoy_Service_Tap_V4alpha_StreamTapsRequest) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs.traceID != rhs.traceID {return false}
    if lhs._trace != rhs._trace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Service_Tap_V4alpha_StreamTapsRequest.Identifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Service_Tap_V4alpha_StreamTapsRequest.protoMessageName + ".Identifier"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .standard(proto: "tap_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._node)
      case 2: try decoder.decodeSingularStringField(value: &self.tapID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tapID.isEmpty {
      try visitor.visitSingularStringField(value: self.tapID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Tap_V4alpha_StreamTapsRequest.Identifier, rhs: Envoy_Service_Tap_V4alpha_StreamTapsRequest.Identifier) -> Bool {
    if lhs._node != rhs._node {return false}
    if lhs.tapID != rhs.tapID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Service_Tap_V4alpha_StreamTapsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamTapsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Tap_V4alpha_StreamTapsResponse, rhs: Envoy_Service_Tap_V4alpha_StreamTapsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
