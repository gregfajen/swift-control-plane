// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/data/cluster/v2alpha/outlier_detection_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Type of ejection that took place
public enum Envoy_Data_Cluster_V2alpha_OutlierEjectionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// In case upstream host returns certain number of consecutive 5xx.
  /// If
  /// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
  /// is *false*, all type of errors are treated as HTTP 5xx errors.
  /// See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
  /// details.
  case consecutive5Xx // = 0

  /// In case upstream host returns certain number of consecutive gateway errors
  case consecutiveGatewayFailure // = 1

  /// Runs over aggregated success rate statistics from every host in cluster
  /// and selects hosts for which ratio of successful replies deviates from other hosts
  /// in the cluster.
  /// If
  /// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
  /// is *false*, all errors (externally and locally generated) are used to calculate success rate
  /// statistics. See :ref:`Cluster outlier detection <arch_overview_outlier_detection>`
  /// documentation for details.
  case successRate // = 2

  /// Consecutive local origin failures: Connection failures, resets, timeouts, etc
  /// This type of ejection happens only when
  /// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
  /// is set to *true*.
  /// See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
  case consecutiveLocalOriginFailure // = 3

  /// Runs over aggregated success rate statistics for local origin failures
  /// for all hosts in the cluster and selects hosts for which success rate deviates from other
  /// hosts in the cluster. This type of ejection happens only when
  /// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
  /// is set to *true*.
  /// See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
  case successRateLocalOrigin // = 4

  /// Runs over aggregated success rate statistics from every host in cluster and selects hosts for
  /// which ratio of failed replies is above configured value.
  case failurePercentage // = 5

  /// Runs over aggregated success rate statistics for local origin failures from every host in
  /// cluster and selects hosts for which ratio of failed replies is above configured value.
  case failurePercentageLocalOrigin // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .consecutive5Xx
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .consecutive5Xx
    case 1: self = .consecutiveGatewayFailure
    case 2: self = .successRate
    case 3: self = .consecutiveLocalOriginFailure
    case 4: self = .successRateLocalOrigin
    case 5: self = .failurePercentage
    case 6: self = .failurePercentageLocalOrigin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .consecutive5Xx: return 0
    case .consecutiveGatewayFailure: return 1
    case .successRate: return 2
    case .consecutiveLocalOriginFailure: return 3
    case .successRateLocalOrigin: return 4
    case .failurePercentage: return 5
    case .failurePercentageLocalOrigin: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Envoy_Data_Cluster_V2alpha_OutlierEjectionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Data_Cluster_V2alpha_OutlierEjectionType] = [
    .consecutive5Xx,
    .consecutiveGatewayFailure,
    .successRate,
    .consecutiveLocalOriginFailure,
    .successRateLocalOrigin,
    .failurePercentage,
    .failurePercentageLocalOrigin,
  ]
}

#endif  // swift(>=4.2)

/// Represents possible action applied to upstream host
public enum Envoy_Data_Cluster_V2alpha_Action: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// In case host was excluded from service
  case eject // = 0

  /// In case host was brought back into service
  case uneject // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .eject
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .eject
    case 1: self = .uneject
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .eject: return 0
    case .uneject: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Envoy_Data_Cluster_V2alpha_Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Data_Cluster_V2alpha_Action] = [
    .eject,
    .uneject,
  ]
}

#endif  // swift(>=4.2)

/// [#next-free-field: 12]
public struct Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// In case of eject represents type of ejection that took place.
  public var type: Envoy_Data_Cluster_V2alpha_OutlierEjectionType = .consecutive5Xx

  /// Timestamp for event.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// The time in seconds since the last action (either an ejection or unejection) took place.
  public var secsSinceLastAction: SwiftProtobuf.Google_Protobuf_UInt64Value {
    get {return _secsSinceLastAction ?? SwiftProtobuf.Google_Protobuf_UInt64Value()}
    set {_secsSinceLastAction = newValue}
  }
  /// Returns true if `secsSinceLastAction` has been explicitly set.
  public var hasSecsSinceLastAction: Bool {return self._secsSinceLastAction != nil}
  /// Clears the value of `secsSinceLastAction`. Subsequent reads from it will return its default value.
  public mutating func clearSecsSinceLastAction() {self._secsSinceLastAction = nil}

  /// The :ref:`cluster <envoy_api_msg_Cluster>` that owns the ejected host.
  public var clusterName: String = String()

  /// The URL of the ejected host. E.g., ``tcp://1.2.3.4:80``.
  public var upstreamURL: String = String()

  /// The action that took place.
  public var action: Envoy_Data_Cluster_V2alpha_Action = .eject

  /// If ``action`` is ``eject``, specifies the number of times the host has been ejected (local to
  /// that Envoy and gets reset if the host gets removed from the upstream cluster for any reason and
  /// then re-added).
  public var numEjections: UInt32 = 0

  /// If ``action`` is ``eject``, specifies if the ejection was enforced. ``true`` means the host was
  /// ejected. ``false`` means the event was logged but the host was not actually ejected.
  public var enforced: Bool = false

  public var event: Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent.OneOf_Event? = nil

  public var ejectSuccessRateEvent: Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate {
    get {
      if case .ejectSuccessRateEvent(let v)? = event {return v}
      return Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate()
    }
    set {event = .ejectSuccessRateEvent(newValue)}
  }

  public var ejectConsecutiveEvent: Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive {
    get {
      if case .ejectConsecutiveEvent(let v)? = event {return v}
      return Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive()
    }
    set {event = .ejectConsecutiveEvent(newValue)}
  }

  public var ejectFailurePercentageEvent: Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage {
    get {
      if case .ejectFailurePercentageEvent(let v)? = event {return v}
      return Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage()
    }
    set {event = .ejectFailurePercentageEvent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Event: Equatable {
    case ejectSuccessRateEvent(Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate)
    case ejectConsecutiveEvent(Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive)
    case ejectFailurePercentageEvent(Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent.OneOf_Event, rhs: Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent.OneOf_Event) -> Bool {
      switch (lhs, rhs) {
      case (.ejectSuccessRateEvent(let l), .ejectSuccessRateEvent(let r)): return l == r
      case (.ejectConsecutiveEvent(let l), .ejectConsecutiveEvent(let r)): return l == r
      case (.ejectFailurePercentageEvent(let l), .ejectFailurePercentageEvent(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _secsSinceLastAction: SwiftProtobuf.Google_Protobuf_UInt64Value? = nil
}

public struct Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Host’s success rate at the time of the ejection event on a 0-100 range.
  public var hostSuccessRate: UInt32 = 0

  /// Average success rate of the hosts in the cluster at the time of the ejection event on a 0-100
  /// range.
  public var clusterAverageSuccessRate: UInt32 = 0

  /// Success rate ejection threshold at the time of the ejection event.
  public var clusterSuccessRateEjectionThreshold: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Host's success rate at the time of the ejection event on a 0-100 range.
  public var hostSuccessRate: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.data.cluster.v2alpha"

extension Envoy_Data_Cluster_V2alpha_OutlierEjectionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONSECUTIVE_5XX"),
    1: .same(proto: "CONSECUTIVE_GATEWAY_FAILURE"),
    2: .same(proto: "SUCCESS_RATE"),
    3: .same(proto: "CONSECUTIVE_LOCAL_ORIGIN_FAILURE"),
    4: .same(proto: "SUCCESS_RATE_LOCAL_ORIGIN"),
    5: .same(proto: "FAILURE_PERCENTAGE"),
    6: .same(proto: "FAILURE_PERCENTAGE_LOCAL_ORIGIN"),
  ]
}

extension Envoy_Data_Cluster_V2alpha_Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EJECT"),
    1: .same(proto: "UNEJECT"),
  ]
}

extension Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutlierDetectionEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "secs_since_last_action"),
    4: .standard(proto: "cluster_name"),
    5: .standard(proto: "upstream_url"),
    6: .same(proto: "action"),
    7: .standard(proto: "num_ejections"),
    8: .same(proto: "enforced"),
    9: .standard(proto: "eject_success_rate_event"),
    10: .standard(proto: "eject_consecutive_event"),
    11: .standard(proto: "eject_failure_percentage_event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularMessageField(value: &self._timestamp)
      case 3: try decoder.decodeSingularMessageField(value: &self._secsSinceLastAction)
      case 4: try decoder.decodeSingularStringField(value: &self.clusterName)
      case 5: try decoder.decodeSingularStringField(value: &self.upstreamURL)
      case 6: try decoder.decodeSingularEnumField(value: &self.action)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.numEjections)
      case 8: try decoder.decodeSingularBoolField(value: &self.enforced)
      case 9:
        var v: Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate?
        if let current = self.event {
          try decoder.handleConflictingOneOf()
          if case .ejectSuccessRateEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.event = .ejectSuccessRateEvent(v)}
      case 10:
        var v: Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive?
        if let current = self.event {
          try decoder.handleConflictingOneOf()
          if case .ejectConsecutiveEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.event = .ejectConsecutiveEvent(v)}
      case 11:
        var v: Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage?
        if let current = self.event {
          try decoder.handleConflictingOneOf()
          if case .ejectFailurePercentageEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.event = .ejectFailurePercentageEvent(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .consecutive5Xx {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._secsSinceLastAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.clusterName.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterName, fieldNumber: 4)
    }
    if !self.upstreamURL.isEmpty {
      try visitor.visitSingularStringField(value: self.upstreamURL, fieldNumber: 5)
    }
    if self.action != .eject {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 6)
    }
    if self.numEjections != 0 {
      try visitor.visitSingularUInt32Field(value: self.numEjections, fieldNumber: 7)
    }
    if self.enforced != false {
      try visitor.visitSingularBoolField(value: self.enforced, fieldNumber: 8)
    }
    switch self.event {
    case .ejectSuccessRateEvent(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    case .ejectConsecutiveEvent(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .ejectFailurePercentageEvent(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent, rhs: Envoy_Data_Cluster_V2alpha_OutlierDetectionEvent) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._secsSinceLastAction != rhs._secsSinceLastAction {return false}
    if lhs.clusterName != rhs.clusterName {return false}
    if lhs.upstreamURL != rhs.upstreamURL {return false}
    if lhs.action != rhs.action {return false}
    if lhs.numEjections != rhs.numEjections {return false}
    if lhs.enforced != rhs.enforced {return false}
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutlierEjectSuccessRate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_success_rate"),
    2: .standard(proto: "cluster_average_success_rate"),
    3: .standard(proto: "cluster_success_rate_ejection_threshold"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.hostSuccessRate)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.clusterAverageSuccessRate)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.clusterSuccessRateEjectionThreshold)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hostSuccessRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.hostSuccessRate, fieldNumber: 1)
    }
    if self.clusterAverageSuccessRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.clusterAverageSuccessRate, fieldNumber: 2)
    }
    if self.clusterSuccessRateEjectionThreshold != 0 {
      try visitor.visitSingularUInt32Field(value: self.clusterSuccessRateEjectionThreshold, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate, rhs: Envoy_Data_Cluster_V2alpha_OutlierEjectSuccessRate) -> Bool {
    if lhs.hostSuccessRate != rhs.hostSuccessRate {return false}
    if lhs.clusterAverageSuccessRate != rhs.clusterAverageSuccessRate {return false}
    if lhs.clusterSuccessRateEjectionThreshold != rhs.clusterSuccessRateEjectionThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutlierEjectConsecutive"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive, rhs: Envoy_Data_Cluster_V2alpha_OutlierEjectConsecutive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutlierEjectFailurePercentage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_success_rate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.hostSuccessRate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hostSuccessRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.hostSuccessRate, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage, rhs: Envoy_Data_Cluster_V2alpha_OutlierEjectFailurePercentage) -> Bool {
    if lhs.hostSuccessRate != rhs.hostSuccessRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
