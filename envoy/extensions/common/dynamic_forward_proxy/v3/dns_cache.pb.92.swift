// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
/// <arch_overview_http_dynamic_forward_proxy>` for more information.
/// [#next-free-field: 7]
public struct Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the cache. Multiple named caches allow independent dynamic forward proxy
  /// configurations to operate within a single Envoy process using different configurations. All
  /// configurations with the same name *must* otherwise have the same settings when referenced
  /// from different configuration components. Configuration will fail to load if this is not
  /// the case.
  public var name: String = String()

  /// The DNS lookup family to use during resolution.
  ///
  /// [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
  /// way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
  /// then configures a host to have a primary and fall back address. With this, we could very
  /// likely build a "happy eyeballs" connection pool which would race the primary / fall back
  /// address and return the one that wins. This same method could potentially also be used for
  /// QUIC to TCP fall back.]
  public var dnsLookupFamily: Envoy_Config_Cluster_V3_Cluster.DnsLookupFamily = .auto

  /// The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
  ///
  /// .. note:
  ///
  ///  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
  ///  added in a future change.
  ///
  /// .. note:
  ///
  /// The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
  public var dnsRefreshRate: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _dnsRefreshRate ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_dnsRefreshRate = newValue}
  }
  /// Returns true if `dnsRefreshRate` has been explicitly set.
  public var hasDnsRefreshRate: Bool {return self._dnsRefreshRate != nil}
  /// Clears the value of `dnsRefreshRate`. Subsequent reads from it will return its default value.
  public mutating func clearDnsRefreshRate() {self._dnsRefreshRate = nil}

  /// The TTL for hosts that are unused. Hosts that have not been used in the configured time
  /// interval will be purged. If not specified defaults to 5m.
  ///
  /// .. note:
  ///
  ///   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
  ///   means that if the configured TTL is shorter than the refresh rate the host may not be removed
  ///   immediately.
  ///
  ///  .. note:
  ///
  ///   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
  public var hostTtl: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _hostTtl ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_hostTtl = newValue}
  }
  /// Returns true if `hostTtl` has been explicitly set.
  public var hasHostTtl: Bool {return self._hostTtl != nil}
  /// Clears the value of `hostTtl`. Subsequent reads from it will return its default value.
  public mutating func clearHostTtl() {self._hostTtl = nil}

  /// The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
  ///
  /// .. note:
  ///
  ///   The implementation is approximate and enforced independently on each worker thread, thus
  ///   it is possible for the maximum hosts in the cache to go slightly above the configured
  ///   value depending on timing. This is similar to how other circuit breakers work.
  public var maxHosts: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _maxHosts ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_maxHosts = newValue}
  }
  /// Returns true if `maxHosts` has been explicitly set.
  public var hasMaxHosts: Bool {return self._maxHosts != nil}
  /// Clears the value of `maxHosts`. Subsequent reads from it will return its default value.
  public mutating func clearMaxHosts() {self._maxHosts = nil}

  /// If the DNS failure refresh rate is specified,
  /// this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
  /// not specified, the failure refresh rate defaults to the dns_refresh_rate.
  public var dnsFailureRefreshRate: Envoy_Config_Cluster_V3_Cluster.RefreshRate {
    get {return _dnsFailureRefreshRate ?? Envoy_Config_Cluster_V3_Cluster.RefreshRate()}
    set {_dnsFailureRefreshRate = newValue}
  }
  /// Returns true if `dnsFailureRefreshRate` has been explicitly set.
  public var hasDnsFailureRefreshRate: Bool {return self._dnsFailureRefreshRate != nil}
  /// Clears the value of `dnsFailureRefreshRate`. Subsequent reads from it will return its default value.
  public mutating func clearDnsFailureRefreshRate() {self._dnsFailureRefreshRate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dnsRefreshRate: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _hostTtl: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _maxHosts: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _dnsFailureRefreshRate: Envoy_Config_Cluster_V3_Cluster.RefreshRate? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.common.dynamic_forward_proxy.v3"

extension Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsCacheConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "dns_lookup_family"),
    3: .standard(proto: "dns_refresh_rate"),
    4: .standard(proto: "host_ttl"),
    5: .standard(proto: "max_hosts"),
    6: .standard(proto: "dns_failure_refresh_rate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularEnumField(value: &self.dnsLookupFamily)
      case 3: try decoder.decodeSingularMessageField(value: &self._dnsRefreshRate)
      case 4: try decoder.decodeSingularMessageField(value: &self._hostTtl)
      case 5: try decoder.decodeSingularMessageField(value: &self._maxHosts)
      case 6: try decoder.decodeSingularMessageField(value: &self._dnsFailureRefreshRate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.dnsLookupFamily != .auto {
      try visitor.visitSingularEnumField(value: self.dnsLookupFamily, fieldNumber: 2)
    }
    if let v = self._dnsRefreshRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._hostTtl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._maxHosts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._dnsFailureRefreshRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig, rhs: Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.dnsLookupFamily != rhs.dnsLookupFamily {return false}
    if lhs._dnsRefreshRate != rhs._dnsRefreshRate {return false}
    if lhs._hostTtl != rhs._hostTtl {return false}
    if lhs._maxHosts != rhs._maxHosts {return false}
    if lhs._dnsFailureRefreshRate != rhs._dnsFailureRefreshRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
