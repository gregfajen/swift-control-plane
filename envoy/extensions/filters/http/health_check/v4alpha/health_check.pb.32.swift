// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/health_check/v4alpha/health_check.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 6]
public struct Envoy_Extensions_Filters_Http_HealthCheck_V4alpha_HealthCheck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies whether the filter operates in pass through mode or not.
  public var passThroughMode: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _passThroughMode ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_passThroughMode = newValue}
  }
  /// Returns true if `passThroughMode` has been explicitly set.
  public var hasPassThroughMode: Bool {return self._passThroughMode != nil}
  /// Clears the value of `passThroughMode`. Subsequent reads from it will return its default value.
  public mutating func clearPassThroughMode() {self._passThroughMode = nil}

  /// If operating in pass through mode, the amount of time in milliseconds
  /// that the filter should cache the upstream response.
  public var cacheTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _cacheTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_cacheTime = newValue}
  }
  /// Returns true if `cacheTime` has been explicitly set.
  public var hasCacheTime: Bool {return self._cacheTime != nil}
  /// Clears the value of `cacheTime`. Subsequent reads from it will return its default value.
  public mutating func clearCacheTime() {self._cacheTime = nil}

  /// If operating in non-pass-through mode, specifies a set of upstream cluster
  /// names and the minimum percentage of servers in each of those clusters that
  /// must be healthy or degraded in order for the filter to return a 200.
  public var clusterMinHealthyPercentages: Dictionary<String,Envoy_Type_V3_Percent> = [:]

  /// Specifies a set of health check request headers to match on. The health check filter will
  /// check a requestâ€™s headers against all the specified headers. To specify the health check
  /// endpoint, set the ``:path`` header to match on.
  public var headers: [Envoy_Config_Route_V4alpha_HeaderMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _passThroughMode: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _cacheTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.health_check.v4alpha"

extension Envoy_Extensions_Filters_Http_HealthCheck_V4alpha_HealthCheck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HealthCheck"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pass_through_mode"),
    3: .standard(proto: "cache_time"),
    4: .standard(proto: "cluster_min_healthy_percentages"),
    5: .same(proto: "headers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._passThroughMode)
      case 3: try decoder.decodeSingularMessageField(value: &self._cacheTime)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Envoy_Type_V3_Percent>.self, value: &self.clusterMinHealthyPercentages)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.headers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._passThroughMode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cacheTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.clusterMinHealthyPercentages.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Envoy_Type_V3_Percent>.self, value: self.clusterMinHealthyPercentages, fieldNumber: 4)
    }
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_HealthCheck_V4alpha_HealthCheck, rhs: Envoy_Extensions_Filters_Http_HealthCheck_V4alpha_HealthCheck) -> Bool {
    if lhs._passThroughMode != rhs._passThroughMode {return false}
    if lhs._cacheTime != rhs._cacheTime {return false}
    if lhs.clusterMinHealthyPercentages != rhs.clusterMinHealthyPercentages {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
