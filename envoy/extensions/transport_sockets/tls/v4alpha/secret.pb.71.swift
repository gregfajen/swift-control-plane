// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/transport_sockets/tls/v4alpha/secret.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Secret of generic type and is available to filters.
  public var secret: Envoy_Config_Core_V4alpha_DataSource {
    get {return _secret ?? Envoy_Config_Core_V4alpha_DataSource()}
    set {_secret = newValue}
  }
  /// Returns true if `secret` has been explicitly set.
  public var hasSecret: Bool {return self._secret != nil}
  /// Clears the value of `secret`. Subsequent reads from it will return its default value.
  public mutating func clearSecret() {self._secret = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _secret: Envoy_Config_Core_V4alpha_DataSource? = nil
}

public struct Envoy_Extensions_TransportSockets_Tls_V4alpha_SdsSecretConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
  /// When both name and config are specified, then secret can be fetched and/or reloaded via
  /// SDS. When only name is specified, then secret will be loaded from static resources.
  public var name: String = String()

  public var sdsConfig: Envoy_Config_Core_V4alpha_ConfigSource {
    get {return _sdsConfig ?? Envoy_Config_Core_V4alpha_ConfigSource()}
    set {_sdsConfig = newValue}
  }
  /// Returns true if `sdsConfig` has been explicitly set.
  public var hasSdsConfig: Bool {return self._sdsConfig != nil}
  /// Clears the value of `sdsConfig`. Subsequent reads from it will return its default value.
  public mutating func clearSdsConfig() {self._sdsConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sdsConfig: Envoy_Config_Core_V4alpha_ConfigSource? = nil
}

/// [#next-free-field: 6]
public struct Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
  public var name: String = String()

  public var type: Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret.OneOf_Type? = nil

  public var tlsCertificate: Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsCertificate {
    get {
      if case .tlsCertificate(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsCertificate()
    }
    set {type = .tlsCertificate(newValue)}
  }

  public var sessionTicketKeys: Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsSessionTicketKeys {
    get {
      if case .sessionTicketKeys(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsSessionTicketKeys()
    }
    set {type = .sessionTicketKeys(newValue)}
  }

  public var validationContext: Envoy_Extensions_TransportSockets_Tls_V4alpha_CertificateValidationContext {
    get {
      if case .validationContext(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V4alpha_CertificateValidationContext()
    }
    set {type = .validationContext(newValue)}
  }

  public var genericSecret: Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret {
    get {
      if case .genericSecret(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret()
    }
    set {type = .genericSecret(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case tlsCertificate(Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsCertificate)
    case sessionTicketKeys(Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsSessionTicketKeys)
    case validationContext(Envoy_Extensions_TransportSockets_Tls_V4alpha_CertificateValidationContext)
    case genericSecret(Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret.OneOf_Type, rhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.tlsCertificate(let l), .tlsCertificate(let r)): return l == r
      case (.sessionTicketKeys(let l), .sessionTicketKeys(let r)): return l == r
      case (.validationContext(let l), .validationContext(let r)): return l == r
      case (.genericSecret(let l), .genericSecret(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.transport_sockets.tls.v4alpha"

extension Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenericSecret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._secret)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._secret {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret, rhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret) -> Bool {
    if lhs._secret != rhs._secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_TransportSockets_Tls_V4alpha_SdsSecretConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SdsSecretConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "sds_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._sdsConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._sdsConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_SdsSecretConfig, rhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_SdsSecretConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._sdsConfig != rhs._sdsConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Secret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "tls_certificate"),
    3: .standard(proto: "session_ticket_keys"),
    4: .standard(proto: "validation_context"),
    5: .standard(proto: "generic_secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2:
        var v: Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsCertificate?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .tlsCertificate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .tlsCertificate(v)}
      case 3:
        var v: Envoy_Extensions_TransportSockets_Tls_V4alpha_TlsSessionTicketKeys?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .sessionTicketKeys(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .sessionTicketKeys(v)}
      case 4:
        var v: Envoy_Extensions_TransportSockets_Tls_V4alpha_CertificateValidationContext?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .validationContext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .validationContext(v)}
      case 5:
        var v: Envoy_Extensions_TransportSockets_Tls_V4alpha_GenericSecret?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .genericSecret(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .genericSecret(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    switch self.type {
    case .tlsCertificate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .sessionTicketKeys(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .validationContext(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .genericSecret(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret, rhs: Envoy_Extensions_TransportSockets_Tls_V4alpha_Secret) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
