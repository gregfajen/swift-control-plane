// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/admin/v4alpha/config_dump.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The :ref:`/config_dump <operations_admin_interface_config_dump>` admin endpoint uses this wrapper
/// message to maintain and serve arbitrary configuration information from any component in Envoy.
public struct Envoy_Admin_V4alpha_ConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This list is serialized and dumped in its entirety at the
  /// :ref:`/config_dump <operations_admin_interface_config_dump>` endpoint.
  ///
  /// The following configurations are currently supported and will be dumped in the order given
  /// below:
  ///
  /// * *bootstrap*: :ref:`BootstrapConfigDump <envoy_api_msg_admin.v4alpha.BootstrapConfigDump>`
  /// * *clusters*: :ref:`ClustersConfigDump <envoy_api_msg_admin.v4alpha.ClustersConfigDump>`
  /// * *listeners*: :ref:`ListenersConfigDump <envoy_api_msg_admin.v4alpha.ListenersConfigDump>`
  /// * *routes*:  :ref:`RoutesConfigDump <envoy_api_msg_admin.v4alpha.RoutesConfigDump>`
  ///
  /// You can filter output with the resource and mask query parameters.
  /// See :ref:`/config_dump?resource={} <operations_admin_interface_config_dump_by_resource>`,
  /// :ref:`/config_dump?mask={} <operations_admin_interface_config_dump_by_mask>`,
  /// or :ref:`/config_dump?resource={},mask={}
  /// <operations_admin_interface_config_dump_by_resource_and_mask>` for more information.
  public var configs: [SwiftProtobuf.Google_Protobuf_Any] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Envoy_Admin_V4alpha_UpdateFailureState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// What the component configuration would have been if the update had succeeded.
  public var failedConfiguration: SwiftProtobuf.Google_Protobuf_Any {
    get {return _failedConfiguration ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_failedConfiguration = newValue}
  }
  /// Returns true if `failedConfiguration` has been explicitly set.
  public var hasFailedConfiguration: Bool {return self._failedConfiguration != nil}
  /// Clears the value of `failedConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearFailedConfiguration() {self._failedConfiguration = nil}

  /// Time of the latest failed update attempt.
  public var lastUpdateAttempt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdateAttempt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdateAttempt = newValue}
  }
  /// Returns true if `lastUpdateAttempt` has been explicitly set.
  public var hasLastUpdateAttempt: Bool {return self._lastUpdateAttempt != nil}
  /// Clears the value of `lastUpdateAttempt`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdateAttempt() {self._lastUpdateAttempt = nil}

  /// Details about the last failed update attempt.
  public var details: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _failedConfiguration: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _lastUpdateAttempt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// This message describes the bootstrap configuration that Envoy was started with. This includes
/// any CLI overrides that were merged. Bootstrap configuration information can be used to recreate
/// the static portions of an Envoy configuration by reusing the output as the bootstrap
/// configuration for another Envoy.
public struct Envoy_Admin_V4alpha_BootstrapConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bootstrap: Envoy_Config_Bootstrap_V4alpha_Bootstrap {
    get {return _bootstrap ?? Envoy_Config_Bootstrap_V4alpha_Bootstrap()}
    set {_bootstrap = newValue}
  }
  /// Returns true if `bootstrap` has been explicitly set.
  public var hasBootstrap: Bool {return self._bootstrap != nil}
  /// Clears the value of `bootstrap`. Subsequent reads from it will return its default value.
  public mutating func clearBootstrap() {self._bootstrap = nil}

  /// The timestamp when the BootstrapConfig was last updated.
  public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdated = newValue}
  }
  /// Returns true if `lastUpdated` has been explicitly set.
  public var hasLastUpdated: Bool {return self._lastUpdated != nil}
  /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdated() {self._lastUpdated = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bootstrap: Envoy_Config_Bootstrap_V4alpha_Bootstrap? = nil
  fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Envoy's listener manager fills this message with all currently known listeners. Listener
/// configuration information can be used to recreate an Envoy configuration by populating all
/// listeners as static listeners or by returning them in a LDS response.
public struct Envoy_Admin_V4alpha_ListenersConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is the :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` in the
  /// last processed LDS discovery response. If there are only static bootstrap listeners, this field
  /// will be "".
  public var versionInfo: String = String()

  /// The statically loaded listener configs.
  public var staticListeners: [Envoy_Admin_V4alpha_ListenersConfigDump.StaticListener] = []

  /// State for any warming, active, or draining listeners.
  public var dynamicListeners: [Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListener] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Describes a statically loaded listener.
  public struct StaticListener {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The listener config.
    public var listener: SwiftProtobuf.Google_Protobuf_Any {
      get {return _listener ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_listener = newValue}
    }
    /// Returns true if `listener` has been explicitly set.
    public var hasListener: Bool {return self._listener != nil}
    /// Clears the value of `listener`. Subsequent reads from it will return its default value.
    public mutating func clearListener() {self._listener = nil}

    /// The timestamp when the Listener was last successfully updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _listener: SwiftProtobuf.Google_Protobuf_Any? = nil
    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public struct DynamicListenerState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// This is the per-resource version information. This version is currently taken from the
    /// :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` field at the time
    /// that the listener was loaded. In the future, discrete per-listener versions may be supported
    /// by the API.
    public var versionInfo: String = String()

    /// The listener config.
    public var listener: SwiftProtobuf.Google_Protobuf_Any {
      get {return _listener ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_listener = newValue}
    }
    /// Returns true if `listener` has been explicitly set.
    public var hasListener: Bool {return self._listener != nil}
    /// Clears the value of `listener`. Subsequent reads from it will return its default value.
    public mutating func clearListener() {self._listener = nil}

    /// The timestamp when the Listener was last successfully updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _listener: SwiftProtobuf.Google_Protobuf_Any? = nil
    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  /// Describes a dynamically loaded listener via the LDS API.
  /// [#next-free-field: 6]
  public struct DynamicListener {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name or unique id of this listener, pulled from the DynamicListenerState config.
    public var name: String = String()

    /// The listener state for any active listener by this name.
    /// These are listeners that are available to service data plane traffic.
    public var activeState: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState {
      get {return _activeState ?? Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState()}
      set {_activeState = newValue}
    }
    /// Returns true if `activeState` has been explicitly set.
    public var hasActiveState: Bool {return self._activeState != nil}
    /// Clears the value of `activeState`. Subsequent reads from it will return its default value.
    public mutating func clearActiveState() {self._activeState = nil}

    /// The listener state for any warming listener by this name.
    /// These are listeners that are currently undergoing warming in preparation to service data
    /// plane traffic. Note that if attempting to recreate an Envoy configuration from a
    /// configuration dump, the warming listeners should generally be discarded.
    public var warmingState: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState {
      get {return _warmingState ?? Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState()}
      set {_warmingState = newValue}
    }
    /// Returns true if `warmingState` has been explicitly set.
    public var hasWarmingState: Bool {return self._warmingState != nil}
    /// Clears the value of `warmingState`. Subsequent reads from it will return its default value.
    public mutating func clearWarmingState() {self._warmingState = nil}

    /// The listener state for any draining listener by this name.
    /// These are listeners that are currently undergoing draining in preparation to stop servicing
    /// data plane traffic. Note that if attempting to recreate an Envoy configuration from a
    /// configuration dump, the draining listeners should generally be discarded.
    public var drainingState: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState {
      get {return _drainingState ?? Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState()}
      set {_drainingState = newValue}
    }
    /// Returns true if `drainingState` has been explicitly set.
    public var hasDrainingState: Bool {return self._drainingState != nil}
    /// Clears the value of `drainingState`. Subsequent reads from it will return its default value.
    public mutating func clearDrainingState() {self._drainingState = nil}

    /// Set if the last update failed, cleared after the next successful update.
    public var errorState: Envoy_Admin_V4alpha_UpdateFailureState {
      get {return _errorState ?? Envoy_Admin_V4alpha_UpdateFailureState()}
      set {_errorState = newValue}
    }
    /// Returns true if `errorState` has been explicitly set.
    public var hasErrorState: Bool {return self._errorState != nil}
    /// Clears the value of `errorState`. Subsequent reads from it will return its default value.
    public mutating func clearErrorState() {self._errorState = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _activeState: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState? = nil
    fileprivate var _warmingState: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState? = nil
    fileprivate var _drainingState: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState? = nil
    fileprivate var _errorState: Envoy_Admin_V4alpha_UpdateFailureState? = nil
  }

  public init() {}
}

/// Envoy's cluster manager fills this message with all currently known clusters. Cluster
/// configuration information can be used to recreate an Envoy configuration by populating all
/// clusters as static clusters or by returning them in a CDS response.
public struct Envoy_Admin_V4alpha_ClustersConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is the :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` in the
  /// last processed CDS discovery response. If there are only static bootstrap clusters, this field
  /// will be "".
  public var versionInfo: String = String()

  /// The statically loaded cluster configs.
  public var staticClusters: [Envoy_Admin_V4alpha_ClustersConfigDump.StaticCluster] = []

  /// The dynamically loaded active clusters. These are clusters that are available to service
  /// data plane traffic.
  public var dynamicActiveClusters: [Envoy_Admin_V4alpha_ClustersConfigDump.DynamicCluster] = []

  /// The dynamically loaded warming clusters. These are clusters that are currently undergoing
  /// warming in preparation to service data plane traffic. Note that if attempting to recreate an
  /// Envoy configuration from a configuration dump, the warming clusters should generally be
  /// discarded.
  public var dynamicWarmingClusters: [Envoy_Admin_V4alpha_ClustersConfigDump.DynamicCluster] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Describes a statically loaded cluster.
  public struct StaticCluster {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The cluster config.
    public var cluster: SwiftProtobuf.Google_Protobuf_Any {
      get {return _cluster ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_cluster = newValue}
    }
    /// Returns true if `cluster` has been explicitly set.
    public var hasCluster: Bool {return self._cluster != nil}
    /// Clears the value of `cluster`. Subsequent reads from it will return its default value.
    public mutating func clearCluster() {self._cluster = nil}

    /// The timestamp when the Cluster was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _cluster: SwiftProtobuf.Google_Protobuf_Any? = nil
    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  /// Describes a dynamically loaded cluster via the CDS API.
  public struct DynamicCluster {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// This is the per-resource version information. This version is currently taken from the
    /// :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` field at the time
    /// that the cluster was loaded. In the future, discrete per-cluster versions may be supported by
    /// the API.
    public var versionInfo: String = String()

    /// The cluster config.
    public var cluster: SwiftProtobuf.Google_Protobuf_Any {
      get {return _cluster ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_cluster = newValue}
    }
    /// Returns true if `cluster` has been explicitly set.
    public var hasCluster: Bool {return self._cluster != nil}
    /// Clears the value of `cluster`. Subsequent reads from it will return its default value.
    public mutating func clearCluster() {self._cluster = nil}

    /// The timestamp when the Cluster was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _cluster: SwiftProtobuf.Google_Protobuf_Any? = nil
    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

/// Envoy's RDS implementation fills this message with all currently loaded routes, as described by
/// their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration
/// or defined inline while configuring listeners are separated from those configured dynamically via RDS.
/// Route configuration information can be used to recreate an Envoy configuration by populating all routes
/// as static routes or by returning them in RDS responses.
public struct Envoy_Admin_V4alpha_RoutesConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The statically loaded route configs.
  public var staticRouteConfigs: [Envoy_Admin_V4alpha_RoutesConfigDump.StaticRouteConfig] = []

  /// The dynamically loaded route configs.
  public var dynamicRouteConfigs: [Envoy_Admin_V4alpha_RoutesConfigDump.DynamicRouteConfig] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct StaticRouteConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The route config.
    public var routeConfig: SwiftProtobuf.Google_Protobuf_Any {
      get {return _routeConfig ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_routeConfig = newValue}
    }
    /// Returns true if `routeConfig` has been explicitly set.
    public var hasRouteConfig: Bool {return self._routeConfig != nil}
    /// Clears the value of `routeConfig`. Subsequent reads from it will return its default value.
    public mutating func clearRouteConfig() {self._routeConfig = nil}

    /// The timestamp when the Route was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _routeConfig: SwiftProtobuf.Google_Protobuf_Any? = nil
    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public struct DynamicRouteConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// This is the per-resource version information. This version is currently taken from the
    /// :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` field at the time that
    /// the route configuration was loaded.
    public var versionInfo: String = String()

    /// The route config.
    public var routeConfig: SwiftProtobuf.Google_Protobuf_Any {
      get {return _routeConfig ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_routeConfig = newValue}
    }
    /// Returns true if `routeConfig` has been explicitly set.
    public var hasRouteConfig: Bool {return self._routeConfig != nil}
    /// Clears the value of `routeConfig`. Subsequent reads from it will return its default value.
    public mutating func clearRouteConfig() {self._routeConfig = nil}

    /// The timestamp when the Route was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _routeConfig: SwiftProtobuf.Google_Protobuf_Any? = nil
    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

/// Envoy's scoped RDS implementation fills this message with all currently loaded route
/// configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both
/// the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the
/// dynamically obtained scopes via the SRDS API.
public struct Envoy_Admin_V4alpha_ScopedRoutesConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The statically loaded scoped route configs.
  public var inlineScopedRouteConfigs: [Envoy_Admin_V4alpha_ScopedRoutesConfigDump.InlineScopedRouteConfigs] = []

  /// The dynamically loaded scoped route configs.
  public var dynamicScopedRouteConfigs: [Envoy_Admin_V4alpha_ScopedRoutesConfigDump.DynamicScopedRouteConfigs] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct InlineScopedRouteConfigs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name assigned to the scoped route configurations.
    public var name: String = String()

    /// The scoped route configurations.
    public var scopedRouteConfigs: [SwiftProtobuf.Google_Protobuf_Any] = []

    /// The timestamp when the scoped route config set was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public struct DynamicScopedRouteConfigs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name assigned to the scoped route configurations.
    public var name: String = String()

    /// This is the per-resource version information. This version is currently taken from the
    /// :ref:`version_info <envoy_api_field_service.discovery.v3.DiscoveryResponse.version_info>` field at the time that
    /// the scoped routes configuration was loaded.
    public var versionInfo: String = String()

    /// The scoped route configurations.
    public var scopedRouteConfigs: [SwiftProtobuf.Google_Protobuf_Any] = []

    /// The timestamp when the scoped route config set was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

/// Envoys SDS implementation fills this message with all secrets fetched dynamically via SDS.
public struct Envoy_Admin_V4alpha_SecretsConfigDump {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The statically loaded secrets.
  public var staticSecrets: [Envoy_Admin_V4alpha_SecretsConfigDump.StaticSecret] = []

  /// The dynamically loaded active secrets. These are secrets that are available to service
  /// clusters or listeners.
  public var dynamicActiveSecrets: [Envoy_Admin_V4alpha_SecretsConfigDump.DynamicSecret] = []

  /// The dynamically loaded warming secrets. These are secrets that are currently undergoing
  /// warming in preparation to service clusters or listeners.
  public var dynamicWarmingSecrets: [Envoy_Admin_V4alpha_SecretsConfigDump.DynamicSecret] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// DynamicSecret contains secret information fetched via SDS.
  public struct DynamicSecret {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name assigned to the secret.
    public var name: String = String()

    /// This is the per-resource version information.
    public var versionInfo: String = String()

    /// The timestamp when the secret was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    /// The actual secret information.
    /// Security sensitive information is redacted (replaced with "[redacted]") for
    /// private keys and passwords in TLS certificates.
    public var secret: SwiftProtobuf.Google_Protobuf_Any {
      get {return _secret ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_secret = newValue}
    }
    /// Returns true if `secret` has been explicitly set.
    public var hasSecret: Bool {return self._secret != nil}
    /// Clears the value of `secret`. Subsequent reads from it will return its default value.
    public mutating func clearSecret() {self._secret = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _secret: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// StaticSecret specifies statically loaded secret in bootstrap.
  public struct StaticSecret {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name assigned to the secret.
    public var name: String = String()

    /// The timestamp when the secret was last updated.
    public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lastUpdated = newValue}
    }
    /// Returns true if `lastUpdated` has been explicitly set.
    public var hasLastUpdated: Bool {return self._lastUpdated != nil}
    /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
    public mutating func clearLastUpdated() {self._lastUpdated = nil}

    /// The actual secret information.
    /// Security sensitive information is redacted (replaced with "[redacted]") for
    /// private keys and passwords in TLS certificates.
    public var secret: SwiftProtobuf.Google_Protobuf_Any {
      get {return _secret ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_secret = newValue}
    }
    /// Returns true if `secret` has been explicitly set.
    public var hasSecret: Bool {return self._secret != nil}
    /// Clears the value of `secret`. Subsequent reads from it will return its default value.
    public mutating func clearSecret() {self._secret = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _secret: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.admin.v4alpha"

extension Envoy_Admin_V4alpha_ConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "configs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.configs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.configs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ConfigDump, rhs: Envoy_Admin_V4alpha_ConfigDump) -> Bool {
    if lhs.configs != rhs.configs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_UpdateFailureState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateFailureState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "failed_configuration"),
    2: .standard(proto: "last_update_attempt"),
    3: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._failedConfiguration)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastUpdateAttempt)
      case 3: try decoder.decodeSingularStringField(value: &self.details)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._failedConfiguration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lastUpdateAttempt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_UpdateFailureState, rhs: Envoy_Admin_V4alpha_UpdateFailureState) -> Bool {
    if lhs._failedConfiguration != rhs._failedConfiguration {return false}
    if lhs._lastUpdateAttempt != rhs._lastUpdateAttempt {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_BootstrapConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BootstrapConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bootstrap"),
    2: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bootstrap)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bootstrap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_BootstrapConfigDump, rhs: Envoy_Admin_V4alpha_BootstrapConfigDump) -> Bool {
    if lhs._bootstrap != rhs._bootstrap {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ListenersConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListenersConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_info"),
    2: .standard(proto: "static_listeners"),
    3: .standard(proto: "dynamic_listeners"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.staticListeners)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dynamicListeners)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 1)
    }
    if !self.staticListeners.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.staticListeners, fieldNumber: 2)
    }
    if !self.dynamicListeners.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicListeners, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ListenersConfigDump, rhs: Envoy_Admin_V4alpha_ListenersConfigDump) -> Bool {
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs.staticListeners != rhs.staticListeners {return false}
    if lhs.dynamicListeners != rhs.dynamicListeners {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ListenersConfigDump.StaticListener: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ListenersConfigDump.protoMessageName + ".StaticListener"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "listener"),
    2: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._listener)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._listener {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ListenersConfigDump.StaticListener, rhs: Envoy_Admin_V4alpha_ListenersConfigDump.StaticListener) -> Bool {
    if lhs._listener != rhs._listener {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ListenersConfigDump.protoMessageName + ".DynamicListenerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_info"),
    2: .same(proto: "listener"),
    3: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 2: try decoder.decodeSingularMessageField(value: &self._listener)
      case 3: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 1)
    }
    if let v = self._listener {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState, rhs: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListenerState) -> Bool {
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs._listener != rhs._listener {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListener: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ListenersConfigDump.protoMessageName + ".DynamicListener"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "active_state"),
    3: .standard(proto: "warming_state"),
    4: .standard(proto: "draining_state"),
    5: .standard(proto: "error_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._activeState)
      case 3: try decoder.decodeSingularMessageField(value: &self._warmingState)
      case 4: try decoder.decodeSingularMessageField(value: &self._drainingState)
      case 5: try decoder.decodeSingularMessageField(value: &self._errorState)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._activeState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._warmingState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._drainingState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._errorState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListener, rhs: Envoy_Admin_V4alpha_ListenersConfigDump.DynamicListener) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._activeState != rhs._activeState {return false}
    if lhs._warmingState != rhs._warmingState {return false}
    if lhs._drainingState != rhs._drainingState {return false}
    if lhs._errorState != rhs._errorState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ClustersConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClustersConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_info"),
    2: .standard(proto: "static_clusters"),
    3: .standard(proto: "dynamic_active_clusters"),
    4: .standard(proto: "dynamic_warming_clusters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.staticClusters)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dynamicActiveClusters)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.dynamicWarmingClusters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 1)
    }
    if !self.staticClusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.staticClusters, fieldNumber: 2)
    }
    if !self.dynamicActiveClusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicActiveClusters, fieldNumber: 3)
    }
    if !self.dynamicWarmingClusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicWarmingClusters, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ClustersConfigDump, rhs: Envoy_Admin_V4alpha_ClustersConfigDump) -> Bool {
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs.staticClusters != rhs.staticClusters {return false}
    if lhs.dynamicActiveClusters != rhs.dynamicActiveClusters {return false}
    if lhs.dynamicWarmingClusters != rhs.dynamicWarmingClusters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ClustersConfigDump.StaticCluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ClustersConfigDump.protoMessageName + ".StaticCluster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cluster"),
    2: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._cluster)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._cluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ClustersConfigDump.StaticCluster, rhs: Envoy_Admin_V4alpha_ClustersConfigDump.StaticCluster) -> Bool {
    if lhs._cluster != rhs._cluster {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ClustersConfigDump.DynamicCluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ClustersConfigDump.protoMessageName + ".DynamicCluster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_info"),
    2: .same(proto: "cluster"),
    3: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 2: try decoder.decodeSingularMessageField(value: &self._cluster)
      case 3: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 1)
    }
    if let v = self._cluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ClustersConfigDump.DynamicCluster, rhs: Envoy_Admin_V4alpha_ClustersConfigDump.DynamicCluster) -> Bool {
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs._cluster != rhs._cluster {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_RoutesConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RoutesConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "static_route_configs"),
    3: .standard(proto: "dynamic_route_configs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.staticRouteConfigs)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dynamicRouteConfigs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staticRouteConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.staticRouteConfigs, fieldNumber: 2)
    }
    if !self.dynamicRouteConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicRouteConfigs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_RoutesConfigDump, rhs: Envoy_Admin_V4alpha_RoutesConfigDump) -> Bool {
    if lhs.staticRouteConfigs != rhs.staticRouteConfigs {return false}
    if lhs.dynamicRouteConfigs != rhs.dynamicRouteConfigs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_RoutesConfigDump.StaticRouteConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_RoutesConfigDump.protoMessageName + ".StaticRouteConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "route_config"),
    2: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._routeConfig)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._routeConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_RoutesConfigDump.StaticRouteConfig, rhs: Envoy_Admin_V4alpha_RoutesConfigDump.StaticRouteConfig) -> Bool {
    if lhs._routeConfig != rhs._routeConfig {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_RoutesConfigDump.DynamicRouteConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_RoutesConfigDump.protoMessageName + ".DynamicRouteConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_info"),
    2: .standard(proto: "route_config"),
    3: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 2: try decoder.decodeSingularMessageField(value: &self._routeConfig)
      case 3: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 1)
    }
    if let v = self._routeConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_RoutesConfigDump.DynamicRouteConfig, rhs: Envoy_Admin_V4alpha_RoutesConfigDump.DynamicRouteConfig) -> Bool {
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs._routeConfig != rhs._routeConfig {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ScopedRoutesConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScopedRoutesConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inline_scoped_route_configs"),
    2: .standard(proto: "dynamic_scoped_route_configs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.inlineScopedRouteConfigs)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.dynamicScopedRouteConfigs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inlineScopedRouteConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inlineScopedRouteConfigs, fieldNumber: 1)
    }
    if !self.dynamicScopedRouteConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicScopedRouteConfigs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ScopedRoutesConfigDump, rhs: Envoy_Admin_V4alpha_ScopedRoutesConfigDump) -> Bool {
    if lhs.inlineScopedRouteConfigs != rhs.inlineScopedRouteConfigs {return false}
    if lhs.dynamicScopedRouteConfigs != rhs.dynamicScopedRouteConfigs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ScopedRoutesConfigDump.InlineScopedRouteConfigs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ScopedRoutesConfigDump.protoMessageName + ".InlineScopedRouteConfigs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "scoped_route_configs"),
    3: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.scopedRouteConfigs)
      case 3: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.scopedRouteConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.scopedRouteConfigs, fieldNumber: 2)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ScopedRoutesConfigDump.InlineScopedRouteConfigs, rhs: Envoy_Admin_V4alpha_ScopedRoutesConfigDump.InlineScopedRouteConfigs) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.scopedRouteConfigs != rhs.scopedRouteConfigs {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_ScopedRoutesConfigDump.DynamicScopedRouteConfigs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_ScopedRoutesConfigDump.protoMessageName + ".DynamicScopedRouteConfigs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "version_info"),
    3: .standard(proto: "scoped_route_configs"),
    4: .standard(proto: "last_updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.scopedRouteConfigs)
      case 4: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 2)
    }
    if !self.scopedRouteConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.scopedRouteConfigs, fieldNumber: 3)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_ScopedRoutesConfigDump.DynamicScopedRouteConfigs, rhs: Envoy_Admin_V4alpha_ScopedRoutesConfigDump.DynamicScopedRouteConfigs) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs.scopedRouteConfigs != rhs.scopedRouteConfigs {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_SecretsConfigDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecretsConfigDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "static_secrets"),
    2: .standard(proto: "dynamic_active_secrets"),
    3: .standard(proto: "dynamic_warming_secrets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.staticSecrets)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.dynamicActiveSecrets)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dynamicWarmingSecrets)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staticSecrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.staticSecrets, fieldNumber: 1)
    }
    if !self.dynamicActiveSecrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicActiveSecrets, fieldNumber: 2)
    }
    if !self.dynamicWarmingSecrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dynamicWarmingSecrets, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_SecretsConfigDump, rhs: Envoy_Admin_V4alpha_SecretsConfigDump) -> Bool {
    if lhs.staticSecrets != rhs.staticSecrets {return false}
    if lhs.dynamicActiveSecrets != rhs.dynamicActiveSecrets {return false}
    if lhs.dynamicWarmingSecrets != rhs.dynamicWarmingSecrets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_SecretsConfigDump.DynamicSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_SecretsConfigDump.protoMessageName + ".DynamicSecret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "version_info"),
    3: .standard(proto: "last_updated"),
    4: .same(proto: "secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.versionInfo)
      case 3: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      case 4: try decoder.decodeSingularMessageField(value: &self._secret)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 2)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._secret {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_SecretsConfigDump.DynamicSecret, rhs: Envoy_Admin_V4alpha_SecretsConfigDump.DynamicSecret) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs._secret != rhs._secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_SecretsConfigDump.StaticSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_SecretsConfigDump.protoMessageName + ".StaticSecret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "last_updated"),
    3: .same(proto: "secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._lastUpdated)
      case 3: try decoder.decodeSingularMessageField(value: &self._secret)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._secret {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_SecretsConfigDump.StaticSecret, rhs: Envoy_Admin_V4alpha_SecretsConfigDump.StaticSecret) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs._secret != rhs._secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
