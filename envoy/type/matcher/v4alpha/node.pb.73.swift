// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/type/matcher/v4alpha/node.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies the way to match a Node.
/// The match follows AND semantics.
public struct Envoy_Type_Matcher_V4alpha_NodeMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies match criteria on the node id.
  public var nodeID: Envoy_Type_Matcher_V4alpha_StringMatcher {
    get {return _nodeID ?? Envoy_Type_Matcher_V4alpha_StringMatcher()}
    set {_nodeID = newValue}
  }
  /// Returns true if `nodeID` has been explicitly set.
  public var hasNodeID: Bool {return self._nodeID != nil}
  /// Clears the value of `nodeID`. Subsequent reads from it will return its default value.
  public mutating func clearNodeID() {self._nodeID = nil}

  /// Specifies match criteria on the node metadata.
  public var nodeMetadatas: [Envoy_Type_Matcher_V4alpha_StructMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _nodeID: Envoy_Type_Matcher_V4alpha_StringMatcher? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.type.matcher.v4alpha"

extension Envoy_Type_Matcher_V4alpha_NodeMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NodeMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .standard(proto: "node_metadatas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._nodeID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.nodeMetadatas)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._nodeID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.nodeMetadatas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeMetadatas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_V4alpha_NodeMatcher, rhs: Envoy_Type_Matcher_V4alpha_NodeMatcher) -> Bool {
    if lhs._nodeID != rhs._nodeID {return false}
    if lhs.nodeMetadatas != rhs.nodeMetadatas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
