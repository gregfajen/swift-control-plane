// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/aws_request_signing/v3/aws_request_signing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Top level configuration for the AWS request signing filter.
public struct Envoy_Extensions_Filters_Http_AwsRequestSigning_V3_AwsRequestSigning {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The `service namespace
  /// <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
  /// of the HTTP endpoint.
  ///
  /// Example: s3
  public var serviceName: String = String()

  /// The `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ hosting the HTTP
  /// endpoint.
  ///
  /// Example: us-west-2
  public var region: String = String()

  /// Indicates that before signing headers, the host header will be swapped with
  /// this value. If not set or empty, the original host header value
  /// will be used and no rewrite will happen.
  ///
  /// Note: this rewrite affects both signing and host header forwarding. However, this
  /// option shouldn't be used with
  /// :ref:`HCM host rewrite <envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
  /// value set here would be used for signing whereas the value set in the HCM would be used
  /// for host header forwarding which is not the desired outcome.
  public var hostRewrite: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.aws_request_signing.v3"

extension Envoy_Extensions_Filters_Http_AwsRequestSigning_V3_AwsRequestSigning: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AwsRequestSigning"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "region"),
    3: .standard(proto: "host_rewrite"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.region)
      case 3: try decoder.decodeSingularStringField(value: &self.hostRewrite)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 2)
    }
    if !self.hostRewrite.isEmpty {
      try visitor.visitSingularStringField(value: self.hostRewrite, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_AwsRequestSigning_V3_AwsRequestSigning, rhs: Envoy_Extensions_Filters_Http_AwsRequestSigning_V3_AwsRequestSigning) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.region != rhs.region {return false}
    if lhs.hostRewrite != rhs.hostRewrite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
