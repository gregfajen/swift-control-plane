// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/type/matcher/string.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies the way to match a string.
/// [#next-free-field: 7]
public struct Envoy_Type_Matcher_StringMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var matchPattern: Envoy_Type_Matcher_StringMatcher.OneOf_MatchPattern? = nil

  /// The input string must match exactly the string specified here.
  ///
  /// Examples:
  ///
  /// * *abc* only matches the value *abc*.
  public var exact: String {
    get {
      if case .exact(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .exact(newValue)}
  }

  /// The input string must have the prefix specified here.
  /// Note: empty prefix is not allowed, please use regex instead.
  ///
  /// Examples:
  ///
  /// * *abc* matches the value *abc.xyz*
  public var prefix: String {
    get {
      if case .prefix(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .prefix(newValue)}
  }

  /// The input string must have the suffix specified here.
  /// Note: empty prefix is not allowed, please use regex instead.
  ///
  /// Examples:
  ///
  /// * *abc* matches the value *xyz.abc*
  public var suffix: String {
    get {
      if case .suffix(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .suffix(newValue)}
  }

  /// The input string must match the regular expression specified here.
  /// The regex grammar is defined `here
  /// <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.
  ///
  /// Examples:
  ///
  /// * The regex ``\d{3}`` matches the value *123*
  /// * The regex ``\d{3}`` does not match the value *1234*
  /// * The regex ``\d{3}`` does not match the value *123.456*
  ///
  /// .. attention::
  ///   This field has been deprecated in favor of `safe_regex` as it is not safe for use with
  ///   untrusted input in all cases.
  public var regex: String {
    get {
      if case .regex(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .regex(newValue)}
  }

  /// The input string must match the regular expression specified here.
  public var safeRegex: Envoy_Type_Matcher_RegexMatcher {
    get {
      if case .safeRegex(let v)? = matchPattern {return v}
      return Envoy_Type_Matcher_RegexMatcher()
    }
    set {matchPattern = .safeRegex(newValue)}
  }

  /// If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
  /// effect for the safe_regex match.
  /// For example, the matcher *data* will match both input string *Data* and *data* if set to true.
  public var ignoreCase: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MatchPattern: Equatable {
    /// The input string must match exactly the string specified here.
    ///
    /// Examples:
    ///
    /// * *abc* only matches the value *abc*.
    case exact(String)
    /// The input string must have the prefix specified here.
    /// Note: empty prefix is not allowed, please use regex instead.
    ///
    /// Examples:
    ///
    /// * *abc* matches the value *abc.xyz*
    case prefix(String)
    /// The input string must have the suffix specified here.
    /// Note: empty prefix is not allowed, please use regex instead.
    ///
    /// Examples:
    ///
    /// * *abc* matches the value *xyz.abc*
    case suffix(String)
    /// The input string must match the regular expression specified here.
    /// The regex grammar is defined `here
    /// <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.
    ///
    /// Examples:
    ///
    /// * The regex ``\d{3}`` matches the value *123*
    /// * The regex ``\d{3}`` does not match the value *1234*
    /// * The regex ``\d{3}`` does not match the value *123.456*
    ///
    /// .. attention::
    ///   This field has been deprecated in favor of `safe_regex` as it is not safe for use with
    ///   untrusted input in all cases.
    case regex(String)
    /// The input string must match the regular expression specified here.
    case safeRegex(Envoy_Type_Matcher_RegexMatcher)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Type_Matcher_StringMatcher.OneOf_MatchPattern, rhs: Envoy_Type_Matcher_StringMatcher.OneOf_MatchPattern) -> Bool {
      switch (lhs, rhs) {
      case (.exact(let l), .exact(let r)): return l == r
      case (.prefix(let l), .prefix(let r)): return l == r
      case (.suffix(let l), .suffix(let r)): return l == r
      case (.regex(let l), .regex(let r)): return l == r
      case (.safeRegex(let l), .safeRegex(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Specifies a list of ways to match a string.
public struct Envoy_Type_Matcher_ListStringMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var patterns: [Envoy_Type_Matcher_StringMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.type.matcher"

extension Envoy_Type_Matcher_StringMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StringMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exact"),
    2: .same(proto: "prefix"),
    3: .same(proto: "suffix"),
    4: .same(proto: "regex"),
    5: .standard(proto: "safe_regex"),
    6: .standard(proto: "ignore_case"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .exact(v)}
      case 2:
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .prefix(v)}
      case 3:
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .suffix(v)}
      case 4:
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .regex(v)}
      case 5:
        var v: Envoy_Type_Matcher_RegexMatcher?
        if let current = self.matchPattern {
          try decoder.handleConflictingOneOf()
          if case .safeRegex(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.matchPattern = .safeRegex(v)}
      case 6: try decoder.decodeSingularBoolField(value: &self.ignoreCase)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.matchPattern {
    case .exact(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    case .prefix(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case .suffix(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case .regex(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    case .safeRegex(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case nil: break
    }
    if self.ignoreCase != false {
      try visitor.visitSingularBoolField(value: self.ignoreCase, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_StringMatcher, rhs: Envoy_Type_Matcher_StringMatcher) -> Bool {
    if lhs.matchPattern != rhs.matchPattern {return false}
    if lhs.ignoreCase != rhs.ignoreCase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Type_Matcher_ListStringMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListStringMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "patterns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.patterns)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.patterns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.patterns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_ListStringMatcher, rhs: Envoy_Type_Matcher_ListStringMatcher) -> Bool {
    if lhs.patterns != rhs.patterns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
