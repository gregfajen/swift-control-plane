// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/servicecontrol/v1/service_controller.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for the Check method.
public struct Google_Api_Servicecontrol_V1_CheckRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The service name as specified in its service configuration. For example,
  /// `"pubsub.googleapis.com"`.
  ///
  /// See
  /// [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
  /// for the definition of a service name.
  public var serviceName: String = String()

  /// The operation to be checked.
  public var operation: Google_Api_Servicecontrol_V1_Operation {
    get {return _operation ?? Google_Api_Servicecontrol_V1_Operation()}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  public var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  public mutating func clearOperation() {self._operation = nil}

  /// Specifies which version of service configuration should be used to process
  /// the request.
  ///
  /// If unspecified or no matching version can be found, the
  /// latest one will be used.
  public var serviceConfigID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _operation: Google_Api_Servicecontrol_V1_Operation? = nil
}

/// Response message for the Check method.
public struct Google_Api_Servicecontrol_V1_CheckResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The same operation_id value used in the
  /// [CheckRequest][google.api.servicecontrol.v1.CheckRequest]. Used for logging
  /// and diagnostics purposes.
  public var operationID: String = String()

  /// The current service rollout id used to process the request.
  public var serviceRolloutID: String = String()

  /// Indicate the decision of the check.
  ///
  /// If no check errors are present, the service should process the operation.
  /// Otherwise the service should use the list of errors to determine the
  /// appropriate action.
  public var checkErrors: [Google_Api_Servicecontrol_V1_CheckError] = []

  /// The actual config id used to process the request.
  public var serviceConfigID: String = String()

  /// Feedback data returned from the server during processing a Check request.
  public var checkInfo: Google_Api_Servicecontrol_V1_CheckResponse.CheckInfo {
    get {return _checkInfo ?? Google_Api_Servicecontrol_V1_CheckResponse.CheckInfo()}
    set {_checkInfo = newValue}
  }
  /// Returns true if `checkInfo` has been explicitly set.
  public var hasCheckInfo: Bool {return self._checkInfo != nil}
  /// Clears the value of `checkInfo`. Subsequent reads from it will return its default value.
  public mutating func clearCheckInfo() {self._checkInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct CheckInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Consumer info of this check.
    public var consumerInfo: Google_Api_Servicecontrol_V1_CheckResponse.ConsumerInfo {
      get {return _consumerInfo ?? Google_Api_Servicecontrol_V1_CheckResponse.ConsumerInfo()}
      set {_consumerInfo = newValue}
    }
    /// Returns true if `consumerInfo` has been explicitly set.
    public var hasConsumerInfo: Bool {return self._consumerInfo != nil}
    /// Clears the value of `consumerInfo`. Subsequent reads from it will return its default value.
    public mutating func clearConsumerInfo() {self._consumerInfo = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _consumerInfo: Google_Api_Servicecontrol_V1_CheckResponse.ConsumerInfo? = nil
  }

  /// `ConsumerInfo` provides information about the consumer project.
  public struct ConsumerInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The Google cloud project number, e.g. 1234567890. A value of 0 indicates
    /// no project number is found.
    public var projectNumber: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _checkInfo: Google_Api_Servicecontrol_V1_CheckResponse.CheckInfo? = nil
}

/// Request message for the Report method.
public struct Google_Api_Servicecontrol_V1_ReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The service name as specified in its service configuration. For example,
  /// `"pubsub.googleapis.com"`.
  ///
  /// See
  /// [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
  /// for the definition of a service name.
  public var serviceName: String = String()

  /// Operations to be reported.
  ///
  /// Typically the service should report one operation per request.
  /// Putting multiple operations into a single request is allowed, but should
  /// be used only when multiple operations are natually available at the time
  /// of the report.
  ///
  /// If multiple operations are in a single request, the total request size
  /// should be no larger than 1MB. See
  /// [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors]
  /// for partial failure behavior.
  public var operations: [Google_Api_Servicecontrol_V1_Operation] = []

  /// Specifies which version of service config should be used to process the
  /// request.
  ///
  /// If unspecified or no matching version can be found, the
  /// latest one will be used.
  public var serviceConfigID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for the Report method.
public struct Google_Api_Servicecontrol_V1_ReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Partial failures, one for each `Operation` in the request that failed
  /// processing. There are three possible combinations of the RPC status:
  ///
  /// 1. The combination of a successful RPC status and an empty `report_errors`
  ///    list indicates a complete success where all `Operations` in the
  ///    request are processed successfully.
  /// 2. The combination of a successful RPC status and a non-empty
  ///    `report_errors` list indicates a partial success where some
  ///    `Operations` in the request succeeded. Each
  ///    `Operation` that failed processing has a corresponding item
  ///    in this list.
  /// 3. A failed RPC status indicates a general non-deterministic failure.
  ///    When this happens, it's impossible to know which of the
  ///    'Operations' in the request succeeded or failed.
  public var reportErrors: [Google_Api_Servicecontrol_V1_ReportResponse.ReportError] = []

  /// The actual config id used to process the request.
  public var serviceConfigID: String = String()

  /// The current service rollout id used to process the request.
  public var serviceRolloutID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents the processing error of one
  /// [Operation][google.api.servicecontrol.v1.Operation] in the request.
  public struct ReportError {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The
    /// [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id]
    /// value from the request.
    public var operationID: String = String()

    /// Details of the error when processing the
    /// [Operation][google.api.servicecontrol.v1.Operation].
    public var status: Google_Rpc_Status {
      get {return _status ?? Google_Rpc_Status()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _status: Google_Rpc_Status? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.servicecontrol.v1"

extension Google_Api_Servicecontrol_V1_CheckRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "operation"),
    4: .standard(proto: "service_config_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularMessageField(value: &self._operation)
      case 4: try decoder.decodeSingularStringField(value: &self.serviceConfigID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if let v = self._operation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.serviceConfigID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceConfigID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_CheckRequest, rhs: Google_Api_Servicecontrol_V1_CheckRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs._operation != rhs._operation {return false}
    if lhs.serviceConfigID != rhs.serviceConfigID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_CheckResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operation_id"),
    11: .standard(proto: "service_rollout_id"),
    2: .standard(proto: "check_errors"),
    5: .standard(proto: "service_config_id"),
    6: .standard(proto: "check_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.operationID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.checkErrors)
      case 5: try decoder.decodeSingularStringField(value: &self.serviceConfigID)
      case 6: try decoder.decodeSingularMessageField(value: &self._checkInfo)
      case 11: try decoder.decodeSingularStringField(value: &self.serviceRolloutID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operationID.isEmpty {
      try visitor.visitSingularStringField(value: self.operationID, fieldNumber: 1)
    }
    if !self.checkErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.checkErrors, fieldNumber: 2)
    }
    if !self.serviceConfigID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceConfigID, fieldNumber: 5)
    }
    if let v = self._checkInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.serviceRolloutID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceRolloutID, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_CheckResponse, rhs: Google_Api_Servicecontrol_V1_CheckResponse) -> Bool {
    if lhs.operationID != rhs.operationID {return false}
    if lhs.serviceRolloutID != rhs.serviceRolloutID {return false}
    if lhs.checkErrors != rhs.checkErrors {return false}
    if lhs.serviceConfigID != rhs.serviceConfigID {return false}
    if lhs._checkInfo != rhs._checkInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_CheckResponse.CheckInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Servicecontrol_V1_CheckResponse.protoMessageName + ".CheckInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "consumer_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._consumerInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._consumerInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_CheckResponse.CheckInfo, rhs: Google_Api_Servicecontrol_V1_CheckResponse.CheckInfo) -> Bool {
    if lhs._consumerInfo != rhs._consumerInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_CheckResponse.ConsumerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Servicecontrol_V1_CheckResponse.protoMessageName + ".ConsumerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.projectNumber)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.projectNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.projectNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_CheckResponse.ConsumerInfo, rhs: Google_Api_Servicecontrol_V1_CheckResponse.ConsumerInfo) -> Bool {
    if lhs.projectNumber != rhs.projectNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_ReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "operations"),
    3: .standard(proto: "service_config_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.operations)
      case 3: try decoder.decodeSingularStringField(value: &self.serviceConfigID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.operations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.operations, fieldNumber: 2)
    }
    if !self.serviceConfigID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceConfigID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_ReportRequest, rhs: Google_Api_Servicecontrol_V1_ReportRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.operations != rhs.operations {return false}
    if lhs.serviceConfigID != rhs.serviceConfigID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_ReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "report_errors"),
    2: .standard(proto: "service_config_id"),
    4: .standard(proto: "service_rollout_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.reportErrors)
      case 2: try decoder.decodeSingularStringField(value: &self.serviceConfigID)
      case 4: try decoder.decodeSingularStringField(value: &self.serviceRolloutID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reportErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reportErrors, fieldNumber: 1)
    }
    if !self.serviceConfigID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceConfigID, fieldNumber: 2)
    }
    if !self.serviceRolloutID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceRolloutID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_ReportResponse, rhs: Google_Api_Servicecontrol_V1_ReportResponse) -> Bool {
    if lhs.reportErrors != rhs.reportErrors {return false}
    if lhs.serviceConfigID != rhs.serviceConfigID {return false}
    if lhs.serviceRolloutID != rhs.serviceRolloutID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_ReportResponse.ReportError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Servicecontrol_V1_ReportResponse.protoMessageName + ".ReportError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operation_id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.operationID)
      case 2: try decoder.decodeSingularMessageField(value: &self._status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operationID.isEmpty {
      try visitor.visitSingularStringField(value: self.operationID, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_ReportResponse.ReportError, rhs: Google_Api_Servicecontrol_V1_ReportResponse.ReportError) -> Bool {
    if lhs.operationID != rhs.operationID {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
