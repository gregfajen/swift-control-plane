// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/expr/v1beta1/source.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Source information collected at parse time.
public struct Google_Api_Expr_V1beta1_SourceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The location name. All position information attached to an expression is
  /// relative to this location.
  ///
  /// The location could be a file, UI element, or similar. For example,
  /// `acme/app/AnvilPolicy.cel`.
  public var location: String = String()

  /// Monotonically increasing list of character offsets where newlines appear.
  ///
  /// The line number of a given position is the index `i` where for a given
  /// `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
  /// column may be derivd from `id_positions[id] - line_offsets[i]`.
  public var lineOffsets: [Int32] = []

  /// A map from the parse node id (e.g. `Expr.id`) to the character offset
  /// within source.
  public var positions: Dictionary<Int32,Int32> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A specific position in source.
public struct Google_Api_Expr_V1beta1_SourcePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The soucre location name (e.g. file name).
  public var location: String = String()

  /// The character offset.
  public var offset: Int32 = 0

  /// The 1-based index of the starting line in the source text
  /// where the issue occurs, or 0 if unknown.
  public var line: Int32 = 0

  /// The 0-based index of the starting position within the line of source text
  /// where the issue occurs.  Only meaningful if line is nonzer..
  public var column: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.expr.v1beta1"

extension Google_Api_Expr_V1beta1_SourceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "location"),
    3: .standard(proto: "line_offsets"),
    4: .same(proto: "positions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      case 3: try decoder.decodeRepeatedInt32Field(value: &self.lineOffsets)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &self.positions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    if !self.lineOffsets.isEmpty {
      try visitor.visitPackedInt32Field(value: self.lineOffsets, fieldNumber: 3)
    }
    if !self.positions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: self.positions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_SourceInfo, rhs: Google_Api_Expr_V1beta1_SourceInfo) -> Bool {
    if lhs.location != rhs.location {return false}
    if lhs.lineOffsets != rhs.lineOffsets {return false}
    if lhs.positions != rhs.positions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_SourcePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourcePosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "offset"),
    3: .same(proto: "line"),
    4: .same(proto: "column"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.location)
      case 2: try decoder.decodeSingularInt32Field(value: &self.offset)
      case 3: try decoder.decodeSingularInt32Field(value: &self.line)
      case 4: try decoder.decodeSingularInt32Field(value: &self.column)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 1)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt32Field(value: self.offset, fieldNumber: 2)
    }
    if self.line != 0 {
      try visitor.visitSingularInt32Field(value: self.line, fieldNumber: 3)
    }
    if self.column != 0 {
      try visitor.visitSingularInt32Field(value: self.column, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_SourcePosition, rhs: Google_Api_Expr_V1beta1_SourcePosition) -> Bool {
    if lhs.location != rhs.location {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.line != rhs.line {return false}
    if lhs.column != rhs.column {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
