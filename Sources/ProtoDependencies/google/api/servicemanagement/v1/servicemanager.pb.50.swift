// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/servicemanagement/v1/servicemanager.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for `ListServices` method.
public struct Google_Api_Servicemanagement_V1_ListServicesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Include services produced by the specified project.
  public var producerProjectID: String = String()

  /// The max number of items to include in the response list. Page size is 50
  /// if not specified. Maximum value is 100.
  public var pageSize: Int32 = 0

  /// Token identifying which result to start with; returned by a previous list
  /// call.
  public var pageToken: String = String()

  /// Include services consumed by the specified consumer.
  ///
  /// The Google Service Management implementation accepts the following
  /// forms:
  /// - project:<project_id>
  public var consumerID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for `ListServices` method.
public struct Google_Api_Servicemanagement_V1_ListServicesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The returned services will only have the name field set.
  public var services: [Google_Api_Servicemanagement_V1_ManagedService] = []

  /// Token that can be passed to `ListServices` to resume a paginated query.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for `GetService` method.
public struct Google_Api_Servicemanagement_V1_GetServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the `ServiceManager` overview for naming
  /// requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for CreateService method.
public struct Google_Api_Servicemanagement_V1_CreateServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Initial values for the service resource.
  public var service: Google_Api_Servicemanagement_V1_ManagedService {
    get {return _service ?? Google_Api_Servicemanagement_V1_ManagedService()}
    set {_service = newValue}
  }
  /// Returns true if `service` has been explicitly set.
  public var hasService: Bool {return self._service != nil}
  /// Clears the value of `service`. Subsequent reads from it will return its default value.
  public mutating func clearService() {self._service = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _service: Google_Api_Servicemanagement_V1_ManagedService? = nil
}

/// Request message for DeleteService method.
public struct Google_Api_Servicemanagement_V1_DeleteServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for UndeleteService method.
public struct Google_Api_Servicemanagement_V1_UndeleteServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service. See the [overview](/service-management/overview)
  /// for naming requirements. For example: `example.googleapis.com`.
  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for UndeleteService method.
public struct Google_Api_Servicemanagement_V1_UndeleteServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Revived service resource.
  public var service: Google_Api_Servicemanagement_V1_ManagedService {
    get {return _service ?? Google_Api_Servicemanagement_V1_ManagedService()}
    set {_service = newValue}
  }
  /// Returns true if `service` has been explicitly set.
  public var hasService: Bool {return self._service != nil}
  /// Clears the value of `service`. Subsequent reads from it will return its default value.
  public mutating func clearService() {self._service = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _service: Google_Api_Servicemanagement_V1_ManagedService? = nil
}

/// Request message for GetServiceConfig method.
public struct Google_Api_Servicemanagement_V1_GetServiceConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// Required. The id of the service configuration resource.
  ///
  /// This field must be specified for the server to return all fields, including
  /// `SourceInfo`.
  public var configID: String = String()

  /// Specifies which parts of the Service Config should be returned in the
  /// response.
  public var view: Google_Api_Servicemanagement_V1_GetServiceConfigRequest.ConfigView = .basic

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ConfigView: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Server response includes all fields except SourceInfo.
    case basic // = 0

    /// Server response includes all fields including SourceInfo.
    /// SourceFiles are of type 'google.api.servicemanagement.v1.ConfigFile'
    /// and are only available for configs created using the
    /// SubmitConfigSource method.
    case full // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .basic
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .basic
      case 1: self = .full
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .basic: return 0
      case .full: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Api_Servicemanagement_V1_GetServiceConfigRequest.ConfigView: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_Servicemanagement_V1_GetServiceConfigRequest.ConfigView] = [
    .basic,
    .full,
  ]
}

#endif  // swift(>=4.2)

/// Request message for ListServiceConfigs method.
public struct Google_Api_Servicemanagement_V1_ListServiceConfigsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// The token of the page to retrieve.
  public var pageToken: String = String()

  /// The max number of items to include in the response list. Page size is 50
  /// if not specified. Maximum value is 100.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for ListServiceConfigs method.
public struct Google_Api_Servicemanagement_V1_ListServiceConfigsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of service configuration resources.
  public var serviceConfigs: [Google_Api_Service] = []

  /// The token of the next page of results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for CreateServiceConfig method.
public struct Google_Api_Servicemanagement_V1_CreateServiceConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// Required. The service configuration resource.
  public var serviceConfig: Google_Api_Service {
    get {return _serviceConfig ?? Google_Api_Service()}
    set {_serviceConfig = newValue}
  }
  /// Returns true if `serviceConfig` has been explicitly set.
  public var hasServiceConfig: Bool {return self._serviceConfig != nil}
  /// Clears the value of `serviceConfig`. Subsequent reads from it will return its default value.
  public mutating func clearServiceConfig() {self._serviceConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _serviceConfig: Google_Api_Service? = nil
}

/// Request message for SubmitConfigSource method.
public struct Google_Api_Servicemanagement_V1_SubmitConfigSourceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// Required. The source configuration for the service.
  public var configSource: Google_Api_Servicemanagement_V1_ConfigSource {
    get {return _configSource ?? Google_Api_Servicemanagement_V1_ConfigSource()}
    set {_configSource = newValue}
  }
  /// Returns true if `configSource` has been explicitly set.
  public var hasConfigSource: Bool {return self._configSource != nil}
  /// Clears the value of `configSource`. Subsequent reads from it will return its default value.
  public mutating func clearConfigSource() {self._configSource = nil}

  /// Optional. If set, this will result in the generation of a
  /// `google.api.Service` configuration based on the `ConfigSource` provided,
  /// but the generated config and the sources will NOT be persisted.
  public var validateOnly: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _configSource: Google_Api_Servicemanagement_V1_ConfigSource? = nil
}

/// Response message for SubmitConfigSource method.
public struct Google_Api_Servicemanagement_V1_SubmitConfigSourceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The generated service configuration.
  public var serviceConfig: Google_Api_Service {
    get {return _serviceConfig ?? Google_Api_Service()}
    set {_serviceConfig = newValue}
  }
  /// Returns true if `serviceConfig` has been explicitly set.
  public var hasServiceConfig: Bool {return self._serviceConfig != nil}
  /// Clears the value of `serviceConfig`. Subsequent reads from it will return its default value.
  public mutating func clearServiceConfig() {self._serviceConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _serviceConfig: Google_Api_Service? = nil
}

/// Request message for 'CreateServiceRollout'
public struct Google_Api_Servicemanagement_V1_CreateServiceRolloutRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// Required. The rollout resource. The `service_name` field is output only.
  public var rollout: Google_Api_Servicemanagement_V1_Rollout {
    get {return _rollout ?? Google_Api_Servicemanagement_V1_Rollout()}
    set {_rollout = newValue}
  }
  /// Returns true if `rollout` has been explicitly set.
  public var hasRollout: Bool {return self._rollout != nil}
  /// Clears the value of `rollout`. Subsequent reads from it will return its default value.
  public mutating func clearRollout() {self._rollout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rollout: Google_Api_Servicemanagement_V1_Rollout? = nil
}

/// Request message for 'ListServiceRollouts'
public struct Google_Api_Servicemanagement_V1_ListServiceRolloutsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// The token of the page to retrieve.
  public var pageToken: String = String()

  /// The max number of items to include in the response list. Page size is 50
  /// if not specified. Maximum value is 100.
  public var pageSize: Int32 = 0

  /// Required. Use `filter` to return subset of rollouts.
  /// The following filters are supported:
  ///   -- To limit the results to only those in
  ///      [status](google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
  ///      use filter='status=SUCCESS'
  ///   -- To limit the results to those in
  ///      [status](google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
  ///      or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for ListServiceRollouts method.
public struct Google_Api_Servicemanagement_V1_ListServiceRolloutsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of rollout resources.
  public var rollouts: [Google_Api_Servicemanagement_V1_Rollout] = []

  /// The token of the next page of results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for GetServiceRollout method.
public struct Google_Api_Servicemanagement_V1_GetServiceRolloutRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.  See the [overview](/service-management/overview)
  /// for naming requirements.  For example: `example.googleapis.com`.
  public var serviceName: String = String()

  /// Required. The id of the rollout resource.
  public var rolloutID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for EnableService method.
public struct Google_Api_Servicemanagement_V1_EnableServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the service to enable. Specifying an unknown service name will
  /// cause the request to fail.
  public var serviceName: String = String()

  /// Required. The identity of consumer resource which service enablement will be
  /// applied to.
  ///
  /// The Google Service Management implementation accepts the following
  /// forms:
  /// - "project:<project_id>"
  ///
  /// Note: this is made compatible with
  /// google.api.servicecontrol.v1.Operation.consumer_id.
  public var consumerID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation payload for EnableService method.
public struct Google_Api_Servicemanagement_V1_EnableServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for DisableService method.
public struct Google_Api_Servicemanagement_V1_DisableServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the service to disable. Specifying an unknown service name
  /// will cause the request to fail.
  public var serviceName: String = String()

  /// Required. The identity of consumer resource which service disablement will be
  /// applied to.
  ///
  /// The Google Service Management implementation accepts the following
  /// forms:
  /// - "project:<project_id>"
  ///
  /// Note: this is made compatible with
  /// google.api.servicecontrol.v1.Operation.consumer_id.
  public var consumerID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation payload for DisableService method.
public struct Google_Api_Servicemanagement_V1_DisableServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for GenerateConfigReport method.
public struct Google_Api_Servicemanagement_V1_GenerateConfigReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Service configuration for which we want to generate the report.
  /// For this version of API, the supported types are
  /// [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
  /// [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
  /// and [google.api.Service][google.api.Service]
  public var newConfig: SwiftProtobuf.Google_Protobuf_Any {
    get {return _newConfig ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_newConfig = newValue}
  }
  /// Returns true if `newConfig` has been explicitly set.
  public var hasNewConfig: Bool {return self._newConfig != nil}
  /// Clears the value of `newConfig`. Subsequent reads from it will return its default value.
  public mutating func clearNewConfig() {self._newConfig = nil}

  /// Optional. Service configuration against which the comparison will be done.
  /// For this version of API, the supported types are
  /// [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
  /// [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
  /// and [google.api.Service][google.api.Service]
  public var oldConfig: SwiftProtobuf.Google_Protobuf_Any {
    get {return _oldConfig ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_oldConfig = newValue}
  }
  /// Returns true if `oldConfig` has been explicitly set.
  public var hasOldConfig: Bool {return self._oldConfig != nil}
  /// Clears the value of `oldConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOldConfig() {self._oldConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _newConfig: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _oldConfig: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// Response message for GenerateConfigReport method.
public struct Google_Api_Servicemanagement_V1_GenerateConfigReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service this report belongs to.
  public var serviceName: String = String()

  /// ID of the service configuration this report belongs to.
  public var id: String = String()

  /// list of ChangeReport, each corresponding to comparison between two
  /// service configurations.
  public var changeReports: [Google_Api_Servicemanagement_V1_ChangeReport] = []

  /// Errors / Linter warnings associated with the service definition this
  /// report
  /// belongs to.
  public var diagnostics: [Google_Api_Servicemanagement_V1_Diagnostic] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.servicemanagement.v1"

extension Google_Api_Servicemanagement_V1_ListServicesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServicesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "producer_project_id"),
    5: .standard(proto: "page_size"),
    6: .standard(proto: "page_token"),
    7: .standard(proto: "consumer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.producerProjectID)
      case 5: try decoder.decodeSingularInt32Field(value: &self.pageSize)
      case 6: try decoder.decodeSingularStringField(value: &self.pageToken)
      case 7: try decoder.decodeSingularStringField(value: &self.consumerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.producerProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.producerProjectID, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 5)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 6)
    }
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ListServicesRequest, rhs: Google_Api_Servicemanagement_V1_ListServicesRequest) -> Bool {
    if lhs.producerProjectID != rhs.producerProjectID {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ListServicesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServicesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "services"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.services)
      case 2: try decoder.decodeSingularStringField(value: &self.nextPageToken)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.services.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.services, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ListServicesResponse, rhs: Google_Api_Servicemanagement_V1_ListServicesResponse) -> Bool {
    if lhs.services != rhs.services {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_GetServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_GetServiceRequest, rhs: Google_Api_Servicemanagement_V1_GetServiceRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_CreateServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._service)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._service {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_CreateServiceRequest, rhs: Google_Api_Servicemanagement_V1_CreateServiceRequest) -> Bool {
    if lhs._service != rhs._service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_DeleteServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_DeleteServiceRequest, rhs: Google_Api_Servicemanagement_V1_DeleteServiceRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_UndeleteServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UndeleteServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_UndeleteServiceRequest, rhs: Google_Api_Servicemanagement_V1_UndeleteServiceRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_UndeleteServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UndeleteServiceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._service)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._service {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_UndeleteServiceResponse, rhs: Google_Api_Servicemanagement_V1_UndeleteServiceResponse) -> Bool {
    if lhs._service != rhs._service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_GetServiceConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "config_id"),
    3: .same(proto: "view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.configID)
      case 3: try decoder.decodeSingularEnumField(value: &self.view)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.configID.isEmpty {
      try visitor.visitSingularStringField(value: self.configID, fieldNumber: 2)
    }
    if self.view != .basic {
      try visitor.visitSingularEnumField(value: self.view, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_GetServiceConfigRequest, rhs: Google_Api_Servicemanagement_V1_GetServiceConfigRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.configID != rhs.configID {return false}
    if lhs.view != rhs.view {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_GetServiceConfigRequest.ConfigView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BASIC"),
    1: .same(proto: "FULL"),
  ]
}

extension Google_Api_Servicemanagement_V1_ListServiceConfigsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServiceConfigsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "page_token"),
    3: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.pageToken)
      case 3: try decoder.decodeSingularInt32Field(value: &self.pageSize)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ListServiceConfigsRequest, rhs: Google_Api_Servicemanagement_V1_ListServiceConfigsRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ListServiceConfigsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServiceConfigsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_configs"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.serviceConfigs)
      case 2: try decoder.decodeSingularStringField(value: &self.nextPageToken)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceConfigs, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ListServiceConfigsResponse, rhs: Google_Api_Servicemanagement_V1_ListServiceConfigsResponse) -> Bool {
    if lhs.serviceConfigs != rhs.serviceConfigs {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_CreateServiceConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateServiceConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "service_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularMessageField(value: &self._serviceConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if let v = self._serviceConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_CreateServiceConfigRequest, rhs: Google_Api_Servicemanagement_V1_CreateServiceConfigRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs._serviceConfig != rhs._serviceConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_SubmitConfigSourceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitConfigSourceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "config_source"),
    3: .standard(proto: "validate_only"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularMessageField(value: &self._configSource)
      case 3: try decoder.decodeSingularBoolField(value: &self.validateOnly)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if let v = self._configSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.validateOnly != false {
      try visitor.visitSingularBoolField(value: self.validateOnly, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_SubmitConfigSourceRequest, rhs: Google_Api_Servicemanagement_V1_SubmitConfigSourceRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs._configSource != rhs._configSource {return false}
    if lhs.validateOnly != rhs.validateOnly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_SubmitConfigSourceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitConfigSourceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._serviceConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._serviceConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_SubmitConfigSourceResponse, rhs: Google_Api_Servicemanagement_V1_SubmitConfigSourceResponse) -> Bool {
    if lhs._serviceConfig != rhs._serviceConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_CreateServiceRolloutRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateServiceRolloutRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "rollout"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularMessageField(value: &self._rollout)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if let v = self._rollout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_CreateServiceRolloutRequest, rhs: Google_Api_Servicemanagement_V1_CreateServiceRolloutRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs._rollout != rhs._rollout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ListServiceRolloutsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServiceRolloutsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "page_token"),
    3: .standard(proto: "page_size"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.pageToken)
      case 3: try decoder.decodeSingularInt32Field(value: &self.pageSize)
      case 4: try decoder.decodeSingularStringField(value: &self.filter)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ListServiceRolloutsRequest, rhs: Google_Api_Servicemanagement_V1_ListServiceRolloutsRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ListServiceRolloutsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServiceRolloutsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rollouts"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rollouts)
      case 2: try decoder.decodeSingularStringField(value: &self.nextPageToken)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rollouts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollouts, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ListServiceRolloutsResponse, rhs: Google_Api_Servicemanagement_V1_ListServiceRolloutsResponse) -> Bool {
    if lhs.rollouts != rhs.rollouts {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_GetServiceRolloutRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceRolloutRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "rollout_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.rolloutID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.rolloutID.isEmpty {
      try visitor.visitSingularStringField(value: self.rolloutID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_GetServiceRolloutRequest, rhs: Google_Api_Servicemanagement_V1_GetServiceRolloutRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.rolloutID != rhs.rolloutID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_EnableServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnableServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "consumer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.consumerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_EnableServiceRequest, rhs: Google_Api_Servicemanagement_V1_EnableServiceRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_EnableServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnableServiceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_EnableServiceResponse, rhs: Google_Api_Servicemanagement_V1_EnableServiceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_DisableServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisableServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "consumer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.consumerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_DisableServiceRequest, rhs: Google_Api_Servicemanagement_V1_DisableServiceRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_DisableServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisableServiceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_DisableServiceResponse, rhs: Google_Api_Servicemanagement_V1_DisableServiceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_GenerateConfigReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateConfigReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_config"),
    2: .standard(proto: "old_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._newConfig)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._newConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_GenerateConfigReportRequest, rhs: Google_Api_Servicemanagement_V1_GenerateConfigReportRequest) -> Bool {
    if lhs._newConfig != rhs._newConfig {return false}
    if lhs._oldConfig != rhs._oldConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_GenerateConfigReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateConfigReportResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "id"),
    3: .standard(proto: "change_reports"),
    4: .same(proto: "diagnostics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.changeReports)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.diagnostics)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.changeReports.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.changeReports, fieldNumber: 3)
    }
    if !self.diagnostics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.diagnostics, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_GenerateConfigReportResponse, rhs: Google_Api_Servicemanagement_V1_GenerateConfigReportResponse) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.id != rhs.id {return false}
    if lhs.changeReports != rhs.changeReports {return false}
    if lhs.diagnostics != rhs.diagnostics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
