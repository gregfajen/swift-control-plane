//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: grafeas/v1/grafeas.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Grafeas_V1_GrafeasClient, then call methods of this protocol to make API calls.
public protocol Grafeas_V1_GrafeasClientProtocol {
  func getOccurrence(_ request: Grafeas_V1_GetOccurrenceRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_GetOccurrenceRequest, Grafeas_V1_Occurrence>
  func listOccurrences(_ request: Grafeas_V1_ListOccurrencesRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_ListOccurrencesRequest, Grafeas_V1_ListOccurrencesResponse>
  func deleteOccurrence(_ request: Grafeas_V1_DeleteOccurrenceRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_DeleteOccurrenceRequest, SwiftProtobuf.Google_Protobuf_Empty>
  func createOccurrence(_ request: Grafeas_V1_CreateOccurrenceRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_CreateOccurrenceRequest, Grafeas_V1_Occurrence>
  func batchCreateOccurrences(_ request: Grafeas_V1_BatchCreateOccurrencesRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_BatchCreateOccurrencesRequest, Grafeas_V1_BatchCreateOccurrencesResponse>
  func updateOccurrence(_ request: Grafeas_V1_UpdateOccurrenceRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_UpdateOccurrenceRequest, Grafeas_V1_Occurrence>
  func getOccurrenceNote(_ request: Grafeas_V1_GetOccurrenceNoteRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_GetOccurrenceNoteRequest, Grafeas_V1_Note>
  func getNote(_ request: Grafeas_V1_GetNoteRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_GetNoteRequest, Grafeas_V1_Note>
  func listNotes(_ request: Grafeas_V1_ListNotesRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_ListNotesRequest, Grafeas_V1_ListNotesResponse>
  func deleteNote(_ request: Grafeas_V1_DeleteNoteRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_DeleteNoteRequest, SwiftProtobuf.Google_Protobuf_Empty>
  func createNote(_ request: Grafeas_V1_CreateNoteRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_CreateNoteRequest, Grafeas_V1_Note>
  func batchCreateNotes(_ request: Grafeas_V1_BatchCreateNotesRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_BatchCreateNotesRequest, Grafeas_V1_BatchCreateNotesResponse>
  func updateNote(_ request: Grafeas_V1_UpdateNoteRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_UpdateNoteRequest, Grafeas_V1_Note>
  func listNoteOccurrences(_ request: Grafeas_V1_ListNoteOccurrencesRequest, callOptions: CallOptions?) -> UnaryCall<Grafeas_V1_ListNoteOccurrencesRequest, Grafeas_V1_ListNoteOccurrencesResponse>
}

public final class Grafeas_V1_GrafeasClient: GRPCClient, Grafeas_V1_GrafeasClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the grafeas.v1.Grafeas service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Gets the specified occurrence.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOccurrence.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOccurrence(_ request: Grafeas_V1_GetOccurrenceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_GetOccurrenceRequest, Grafeas_V1_Occurrence> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/GetOccurrence",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Lists occurrences for the specified project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListOccurrences.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listOccurrences(_ request: Grafeas_V1_ListOccurrencesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_ListOccurrencesRequest, Grafeas_V1_ListOccurrencesResponse> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/ListOccurrences",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Deletes the specified occurrence. For example, use this method to delete an
  /// occurrence when the occurrence is no longer applicable for the given
  /// resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteOccurrence.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteOccurrence(_ request: Grafeas_V1_DeleteOccurrenceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_DeleteOccurrenceRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/DeleteOccurrence",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Creates a new occurrence.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateOccurrence.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createOccurrence(_ request: Grafeas_V1_CreateOccurrenceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_CreateOccurrenceRequest, Grafeas_V1_Occurrence> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/CreateOccurrence",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Creates new occurrences in batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchCreateOccurrences.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchCreateOccurrences(_ request: Grafeas_V1_BatchCreateOccurrencesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_BatchCreateOccurrencesRequest, Grafeas_V1_BatchCreateOccurrencesResponse> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/BatchCreateOccurrences",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Updates the specified occurrence.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateOccurrence.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateOccurrence(_ request: Grafeas_V1_UpdateOccurrenceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_UpdateOccurrenceRequest, Grafeas_V1_Occurrence> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/UpdateOccurrence",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Gets the note attached to the specified occurrence. Consumer projects can
  /// use this method to get a note that belongs to a provider project.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOccurrenceNote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOccurrenceNote(_ request: Grafeas_V1_GetOccurrenceNoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_GetOccurrenceNoteRequest, Grafeas_V1_Note> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/GetOccurrenceNote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Gets the specified note.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNote(_ request: Grafeas_V1_GetNoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_GetNoteRequest, Grafeas_V1_Note> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/GetNote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Lists notes for the specified project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNotes.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listNotes(_ request: Grafeas_V1_ListNotesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_ListNotesRequest, Grafeas_V1_ListNotesResponse> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/ListNotes",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Deletes the specified note.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteNote(_ request: Grafeas_V1_DeleteNoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_DeleteNoteRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/DeleteNote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Creates a new note.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createNote(_ request: Grafeas_V1_CreateNoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_CreateNoteRequest, Grafeas_V1_Note> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/CreateNote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Creates new notes in batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchCreateNotes.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchCreateNotes(_ request: Grafeas_V1_BatchCreateNotesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_BatchCreateNotesRequest, Grafeas_V1_BatchCreateNotesResponse> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/BatchCreateNotes",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Updates the specified note.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateNote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateNote(_ request: Grafeas_V1_UpdateNoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_UpdateNoteRequest, Grafeas_V1_Note> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/UpdateNote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Lists occurrences referencing the specified note. Provider projects can use
  /// this method to get all occurrences across consumer projects referencing the
  /// specified note.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNoteOccurrences.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listNoteOccurrences(_ request: Grafeas_V1_ListNoteOccurrencesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grafeas_V1_ListNoteOccurrencesRequest, Grafeas_V1_ListNoteOccurrencesResponse> {
    return self.makeUnaryCall(path: "/grafeas.v1.Grafeas/ListNoteOccurrences",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Grafeas_V1_GrafeasProvider: CallHandlerProvider {
  /// Gets the specified occurrence.
  func getOccurrence(request: Grafeas_V1_GetOccurrenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Occurrence>
  /// Lists occurrences for the specified project.
  func listOccurrences(request: Grafeas_V1_ListOccurrencesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_ListOccurrencesResponse>
  /// Deletes the specified occurrence. For example, use this method to delete an
  /// occurrence when the occurrence is no longer applicable for the given
  /// resource.
  func deleteOccurrence(request: Grafeas_V1_DeleteOccurrenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Creates a new occurrence.
  func createOccurrence(request: Grafeas_V1_CreateOccurrenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Occurrence>
  /// Creates new occurrences in batch.
  func batchCreateOccurrences(request: Grafeas_V1_BatchCreateOccurrencesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_BatchCreateOccurrencesResponse>
  /// Updates the specified occurrence.
  func updateOccurrence(request: Grafeas_V1_UpdateOccurrenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Occurrence>
  /// Gets the note attached to the specified occurrence. Consumer projects can
  /// use this method to get a note that belongs to a provider project.
  func getOccurrenceNote(request: Grafeas_V1_GetOccurrenceNoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Note>
  /// Gets the specified note.
  func getNote(request: Grafeas_V1_GetNoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Note>
  /// Lists notes for the specified project.
  func listNotes(request: Grafeas_V1_ListNotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_ListNotesResponse>
  /// Deletes the specified note.
  func deleteNote(request: Grafeas_V1_DeleteNoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Creates a new note.
  func createNote(request: Grafeas_V1_CreateNoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Note>
  /// Creates new notes in batch.
  func batchCreateNotes(request: Grafeas_V1_BatchCreateNotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_BatchCreateNotesResponse>
  /// Updates the specified note.
  func updateNote(request: Grafeas_V1_UpdateNoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_Note>
  /// Lists occurrences referencing the specified note. Provider projects can use
  /// this method to get all occurrences across consumer projects referencing the
  /// specified note.
  func listNoteOccurrences(request: Grafeas_V1_ListNoteOccurrencesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grafeas_V1_ListNoteOccurrencesResponse>
}

extension Grafeas_V1_GrafeasProvider {
  public var serviceName: String { return "grafeas.v1.Grafeas" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetOccurrence":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getOccurrence(request: request, context: context)
        }
      }

    case "ListOccurrences":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listOccurrences(request: request, context: context)
        }
      }

    case "DeleteOccurrence":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteOccurrence(request: request, context: context)
        }
      }

    case "CreateOccurrence":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createOccurrence(request: request, context: context)
        }
      }

    case "BatchCreateOccurrences":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchCreateOccurrences(request: request, context: context)
        }
      }

    case "UpdateOccurrence":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateOccurrence(request: request, context: context)
        }
      }

    case "GetOccurrenceNote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getOccurrenceNote(request: request, context: context)
        }
      }

    case "GetNote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNote(request: request, context: context)
        }
      }

    case "ListNotes":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listNotes(request: request, context: context)
        }
      }

    case "DeleteNote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteNote(request: request, context: context)
        }
      }

    case "CreateNote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createNote(request: request, context: context)
        }
      }

    case "BatchCreateNotes":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchCreateNotes(request: request, context: context)
        }
      }

    case "UpdateNote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateNote(request: request, context: context)
        }
      }

    case "ListNoteOccurrences":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listNoteOccurrences(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Grafeas_V1_GetOccurrenceRequest: GRPCProtobufPayload {}
extension Grafeas_V1_Occurrence: GRPCProtobufPayload {}
extension Grafeas_V1_ListOccurrencesRequest: GRPCProtobufPayload {}
extension Grafeas_V1_ListOccurrencesResponse: GRPCProtobufPayload {}
extension Grafeas_V1_DeleteOccurrenceRequest: GRPCProtobufPayload {}
extension Grafeas_V1_CreateOccurrenceRequest: GRPCProtobufPayload {}
extension Grafeas_V1_BatchCreateOccurrencesRequest: GRPCProtobufPayload {}
extension Grafeas_V1_BatchCreateOccurrencesResponse: GRPCProtobufPayload {}
extension Grafeas_V1_UpdateOccurrenceRequest: GRPCProtobufPayload {}
extension Grafeas_V1_GetOccurrenceNoteRequest: GRPCProtobufPayload {}
extension Grafeas_V1_Note: GRPCProtobufPayload {}
extension Grafeas_V1_GetNoteRequest: GRPCProtobufPayload {}
extension Grafeas_V1_ListNotesRequest: GRPCProtobufPayload {}
extension Grafeas_V1_ListNotesResponse: GRPCProtobufPayload {}
extension Grafeas_V1_DeleteNoteRequest: GRPCProtobufPayload {}
extension Grafeas_V1_CreateNoteRequest: GRPCProtobufPayload {}
extension Grafeas_V1_BatchCreateNotesRequest: GRPCProtobufPayload {}
extension Grafeas_V1_BatchCreateNotesResponse: GRPCProtobufPayload {}
extension Grafeas_V1_UpdateNoteRequest: GRPCProtobufPayload {}
extension Grafeas_V1_ListNoteOccurrencesRequest: GRPCProtobufPayload {}
extension Grafeas_V1_ListNoteOccurrencesResponse: GRPCProtobufPayload {}

