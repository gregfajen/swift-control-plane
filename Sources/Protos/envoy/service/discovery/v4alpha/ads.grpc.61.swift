//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: envoy/service/discovery/v4alpha/ads.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceClient, then call methods of this protocol to make API calls.
public protocol Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceClientProtocol: GRPCClient {
  func streamAggregatedResources(
    callOptions: CallOptions?,
    handler: @escaping (Envoy_Service_Discovery_V4alpha_DiscoveryResponse) -> Void
  ) -> BidirectionalStreamingCall<Envoy_Service_Discovery_V4alpha_DiscoveryRequest, Envoy_Service_Discovery_V4alpha_DiscoveryResponse>

  func deltaAggregatedResources(
    callOptions: CallOptions?,
    handler: @escaping (Envoy_Service_Discovery_V4alpha_DeltaDiscoveryResponse) -> Void
  ) -> BidirectionalStreamingCall<Envoy_Service_Discovery_V4alpha_DeltaDiscoveryRequest, Envoy_Service_Discovery_V4alpha_DeltaDiscoveryResponse>

}

extension Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceClientProtocol {

  /// This is a gRPC-only API.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamAggregatedResources(
    callOptions: CallOptions? = nil,
    handler: @escaping (Envoy_Service_Discovery_V4alpha_DiscoveryResponse) -> Void
  ) -> BidirectionalStreamingCall<Envoy_Service_Discovery_V4alpha_DiscoveryRequest, Envoy_Service_Discovery_V4alpha_DiscoveryResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/envoy.service.discovery.v4alpha.AggregatedDiscoveryService/StreamAggregatedResources",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Bidirectional streaming call to DeltaAggregatedResources
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func deltaAggregatedResources(
    callOptions: CallOptions? = nil,
    handler: @escaping (Envoy_Service_Discovery_V4alpha_DeltaDiscoveryResponse) -> Void
  ) -> BidirectionalStreamingCall<Envoy_Service_Discovery_V4alpha_DeltaDiscoveryRequest, Envoy_Service_Discovery_V4alpha_DeltaDiscoveryResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/envoy.service.discovery.v4alpha.AggregatedDiscoveryService/DeltaAggregatedResources",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

public final class Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceClient: Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the envoy.service.discovery.v4alpha.AggregatedDiscoveryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceProvider: CallHandlerProvider {
  /// This is a gRPC-only API.
  func streamAggregatedResources(context: StreamingResponseCallContext<Envoy_Service_Discovery_V4alpha_DiscoveryResponse>) -> EventLoopFuture<(StreamEvent<Envoy_Service_Discovery_V4alpha_DiscoveryRequest>) -> Void>
  func deltaAggregatedResources(context: StreamingResponseCallContext<Envoy_Service_Discovery_V4alpha_DeltaDiscoveryResponse>) -> EventLoopFuture<(StreamEvent<Envoy_Service_Discovery_V4alpha_DeltaDiscoveryRequest>) -> Void>
}

extension Envoy_Service_Discovery_V4alpha_AggregatedDiscoveryServiceProvider {
  public var serviceName: Substring { return "envoy.service.discovery.v4alpha.AggregatedDiscoveryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "StreamAggregatedResources":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.streamAggregatedResources(context: context)
      }

    case "DeltaAggregatedResources":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.deltaAggregatedResources(context: context)
      }

    default: return nil
    }
  }
}

