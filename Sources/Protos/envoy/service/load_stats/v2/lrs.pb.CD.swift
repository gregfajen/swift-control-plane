// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/service/load_stats/v2/lrs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A load report Envoy sends to the management server.
/// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
public struct Envoy_Service_LoadStats_V2_LoadStatsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Node identifier for Envoy instance.
  public var node: Envoy_Api_V2_Core_Node {
    get {return _node ?? Envoy_Api_V2_Core_Node()}
    set {_node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  public var hasNode: Bool {return self._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  public mutating func clearNode() {self._node = nil}

  /// A list of load stats to report.
  public var clusterStats: [Envoy_Api_V2_Endpoint_ClusterStats] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _node: Envoy_Api_V2_Core_Node? = nil
}

/// The management server sends envoy a LoadStatsResponse with all clusters it
/// is interested in learning load stats about.
/// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
public struct Envoy_Service_LoadStats_V2_LoadStatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Clusters to report stats for.
  /// Not populated if *send_all_clusters* is true.
  public var clusters: [String] = []

  /// If true, the client should send all clusters it knows about.
  /// Only clients that advertise the "envoy.lrs.supports_send_all_clusters" capability in their
  /// :ref:`client_features<envoy_api_field_core.Node.client_features>` field will honor this field.
  public var sendAllClusters: Bool = false

  /// The minimum interval of time to collect stats over. This is only a minimum for two reasons:
  /// 1. There may be some delay from when the timer fires until stats sampling occurs.
  /// 2. For clusters that were already feature in the previous *LoadStatsResponse*, any traffic
  ///    that is observed in between the corresponding previous *LoadStatsRequest* and this
  ///    *LoadStatsResponse* will also be accumulated and billed to the cluster. This avoids a period
  ///    of inobservability that might otherwise exists between the messages. New clusters are not
  ///    subject to this consideration.
  public var loadReportingInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _loadReportingInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_loadReportingInterval = newValue}
  }
  /// Returns true if `loadReportingInterval` has been explicitly set.
  public var hasLoadReportingInterval: Bool {return self._loadReportingInterval != nil}
  /// Clears the value of `loadReportingInterval`. Subsequent reads from it will return its default value.
  public mutating func clearLoadReportingInterval() {self._loadReportingInterval = nil}

  /// Set to *true* if the management server supports endpoint granularity
  /// report.
  public var reportEndpointGranularity: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _loadReportingInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.service.load_stats.v2"

extension Envoy_Service_LoadStats_V2_LoadStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadStatsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .standard(proto: "cluster_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._node) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.clusterStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.clusterStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clusterStats, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_LoadStats_V2_LoadStatsRequest, rhs: Envoy_Service_LoadStats_V2_LoadStatsRequest) -> Bool {
    if lhs._node != rhs._node {return false}
    if lhs.clusterStats != rhs.clusterStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Service_LoadStats_V2_LoadStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadStatsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clusters"),
    4: .standard(proto: "send_all_clusters"),
    2: .standard(proto: "load_reporting_interval"),
    3: .standard(proto: "report_endpoint_granularity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.clusters) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._loadReportingInterval) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.reportEndpointGranularity) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.sendAllClusters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.clusters, fieldNumber: 1)
    }
    if let v = self._loadReportingInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.reportEndpointGranularity != false {
      try visitor.visitSingularBoolField(value: self.reportEndpointGranularity, fieldNumber: 3)
    }
    if self.sendAllClusters != false {
      try visitor.visitSingularBoolField(value: self.sendAllClusters, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_LoadStats_V2_LoadStatsResponse, rhs: Envoy_Service_LoadStats_V2_LoadStatsResponse) -> Bool {
    if lhs.clusters != rhs.clusters {return false}
    if lhs.sendAllClusters != rhs.sendAllClusters {return false}
    if lhs._loadReportingInterval != rhs._loadReportingInterval {return false}
    if lhs.reportEndpointGranularity != rhs.reportEndpointGranularity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
