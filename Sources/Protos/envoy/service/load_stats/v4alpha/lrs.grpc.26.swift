//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: envoy/service/load_stats/v4alpha/lrs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Envoy_Service_LoadStats_V4alpha_LoadReportingServiceClient, then call methods of this protocol to make API calls.
public protocol Envoy_Service_LoadStats_V4alpha_LoadReportingServiceClientProtocol: GRPCClient {
  func streamLoadStats(
    callOptions: CallOptions?,
    handler: @escaping (Envoy_Service_LoadStats_V4alpha_LoadStatsResponse) -> Void
  ) -> BidirectionalStreamingCall<Envoy_Service_LoadStats_V4alpha_LoadStatsRequest, Envoy_Service_LoadStats_V4alpha_LoadStatsResponse>

}

extension Envoy_Service_LoadStats_V4alpha_LoadReportingServiceClientProtocol {

  /// Advanced API to allow for multi-dimensional load balancing by remote
  /// server. For receiving LB assignments, the steps are:
  /// 1, The management server is configured with per cluster/zone/load metric
  ///    capacity configuration. The capacity configuration definition is
  ///    outside of the scope of this document.
  /// 2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
  ///    to balance.
  ///
  /// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
  /// management server:
  /// 1. Once a connection establishes, the management server publishes a
  ///    LoadStatsResponse for all clusters it is interested in learning load
  ///    stats about.
  /// 2. For each cluster, Envoy load balances incoming traffic to upstream hosts
  ///    based on per-zone weights and/or per-instance weights (if specified)
  ///    based on intra-zone LbPolicy. This information comes from the above
  ///    {Stream,Fetch}Endpoints.
  /// 3. When upstream hosts reply, they optionally add header <define header
  ///    name> with ASCII representation of EndpointLoadMetricStats.
  /// 4. Envoy aggregates load reports over the period of time given to it in
  ///    LoadStatsResponse.load_reporting_interval. This includes aggregation
  ///    stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
  ///    well as load metrics from upstream hosts.
  /// 5. When the timer of load_reporting_interval expires, Envoy sends new
  ///    LoadStatsRequest filled with load reports for each cluster.
  /// 6. The management server uses the load reports from all reported Envoys
  ///    from around the world, computes global assignment and prepares traffic
  ///    assignment destined for each zone Envoys are located in. Goto 2.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamLoadStats(
    callOptions: CallOptions? = nil,
    handler: @escaping (Envoy_Service_LoadStats_V4alpha_LoadStatsResponse) -> Void
  ) -> BidirectionalStreamingCall<Envoy_Service_LoadStats_V4alpha_LoadStatsRequest, Envoy_Service_LoadStats_V4alpha_LoadStatsResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/envoy.service.load_stats.v4alpha.LoadReportingService/StreamLoadStats",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

public final class Envoy_Service_LoadStats_V4alpha_LoadReportingServiceClient: Envoy_Service_LoadStats_V4alpha_LoadReportingServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the envoy.service.load_stats.v4alpha.LoadReportingService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Envoy_Service_LoadStats_V4alpha_LoadReportingServiceProvider: CallHandlerProvider {
  /// Advanced API to allow for multi-dimensional load balancing by remote
  /// server. For receiving LB assignments, the steps are:
  /// 1, The management server is configured with per cluster/zone/load metric
  ///    capacity configuration. The capacity configuration definition is
  ///    outside of the scope of this document.
  /// 2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
  ///    to balance.
  ///
  /// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
  /// management server:
  /// 1. Once a connection establishes, the management server publishes a
  ///    LoadStatsResponse for all clusters it is interested in learning load
  ///    stats about.
  /// 2. For each cluster, Envoy load balances incoming traffic to upstream hosts
  ///    based on per-zone weights and/or per-instance weights (if specified)
  ///    based on intra-zone LbPolicy. This information comes from the above
  ///    {Stream,Fetch}Endpoints.
  /// 3. When upstream hosts reply, they optionally add header <define header
  ///    name> with ASCII representation of EndpointLoadMetricStats.
  /// 4. Envoy aggregates load reports over the period of time given to it in
  ///    LoadStatsResponse.load_reporting_interval. This includes aggregation
  ///    stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
  ///    well as load metrics from upstream hosts.
  /// 5. When the timer of load_reporting_interval expires, Envoy sends new
  ///    LoadStatsRequest filled with load reports for each cluster.
  /// 6. The management server uses the load reports from all reported Envoys
  ///    from around the world, computes global assignment and prepares traffic
  ///    assignment destined for each zone Envoys are located in. Goto 2.
  func streamLoadStats(context: StreamingResponseCallContext<Envoy_Service_LoadStats_V4alpha_LoadStatsResponse>) -> EventLoopFuture<(StreamEvent<Envoy_Service_LoadStats_V4alpha_LoadStatsRequest>) -> Void>
}

extension Envoy_Service_LoadStats_V4alpha_LoadReportingServiceProvider {
  public var serviceName: Substring { return "envoy.service.load_stats.v4alpha.LoadReportingService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "StreamLoadStats":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.streamLoadStats(context: context)
      }

    default: return nil
    }
  }
}

