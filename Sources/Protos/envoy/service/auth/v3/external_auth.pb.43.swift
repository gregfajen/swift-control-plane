// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/service/auth/v3/external_auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Service_Auth_V3_CheckRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request attributes.
  public var attributes: Envoy_Service_Auth_V3_AttributeContext {
    get {return _attributes ?? Envoy_Service_Auth_V3_AttributeContext()}
    set {_attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  public var hasAttributes: Bool {return self._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  public mutating func clearAttributes() {self._attributes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _attributes: Envoy_Service_Auth_V3_AttributeContext? = nil
}

/// HTTP attributes for a denied response.
public struct Envoy_Service_Auth_V3_DeniedHttpResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field allows the authorization service to send a HTTP response status
  /// code to the downstream client other than 403 (Forbidden).
  public var status: Envoy_Type_V3_HttpStatus {
    get {return _status ?? Envoy_Type_V3_HttpStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// This field allows the authorization service to send HTTP response headers
  /// to the downstream client.
  public var headers: [Envoy_Config_Core_V3_HeaderValueOption] = []

  /// This field allows the authorization service to send a response body data
  /// to the downstream client.
  public var body: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Envoy_Type_V3_HttpStatus? = nil
}

/// HTTP attributes for an ok response.
public struct Envoy_Service_Auth_V3_OkHttpResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// HTTP entity headers in addition to the original request headers. This allows the authorization
  /// service to append, to add or to override headers from the original request before
  /// dispatching it to the upstream. By setting `append` field to `true` in the `HeaderValueOption`,
  /// the filter will append the correspondent header value to the matched request header. Note that
  /// by Leaving `append` as false, the filter will either add a new header, or override an existing
  /// one if there is a match.
  public var headers: [Envoy_Config_Core_V3_HeaderValueOption] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Intended for gRPC and Network Authorization servers `only`.
public struct Envoy_Service_Auth_V3_CheckResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status `OK` allows the request. Any other status indicates the request should be denied.
  public var status: Google_Rpc_Status {
    get {return _status ?? Google_Rpc_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// An message that contains HTTP response attributes. This message is
  /// used when the authorization service needs to send custom responses to the
  /// downstream client or, to modify/add request headers being dispatched to the upstream.
  public var httpResponse: Envoy_Service_Auth_V3_CheckResponse.OneOf_HTTPResponse? = nil

  /// Supplies http attributes for a denied response.
  public var deniedResponse: Envoy_Service_Auth_V3_DeniedHttpResponse {
    get {
      if case .deniedResponse(let v)? = httpResponse {return v}
      return Envoy_Service_Auth_V3_DeniedHttpResponse()
    }
    set {httpResponse = .deniedResponse(newValue)}
  }

  /// Supplies http attributes for an ok response.
  public var okResponse: Envoy_Service_Auth_V3_OkHttpResponse {
    get {
      if case .okResponse(let v)? = httpResponse {return v}
      return Envoy_Service_Auth_V3_OkHttpResponse()
    }
    set {httpResponse = .okResponse(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An message that contains HTTP response attributes. This message is
  /// used when the authorization service needs to send custom responses to the
  /// downstream client or, to modify/add request headers being dispatched to the upstream.
  public enum OneOf_HTTPResponse: Equatable {
    /// Supplies http attributes for a denied response.
    case deniedResponse(Envoy_Service_Auth_V3_DeniedHttpResponse)
    /// Supplies http attributes for an ok response.
    case okResponse(Envoy_Service_Auth_V3_OkHttpResponse)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Service_Auth_V3_CheckResponse.OneOf_HTTPResponse, rhs: Envoy_Service_Auth_V3_CheckResponse.OneOf_HTTPResponse) -> Bool {
      switch (lhs, rhs) {
      case (.deniedResponse(let l), .deniedResponse(let r)): return l == r
      case (.okResponse(let l), .okResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _status: Google_Rpc_Status? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.service.auth.v3"

extension Envoy_Service_Auth_V3_CheckRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._attributes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Auth_V3_CheckRequest, rhs: Envoy_Service_Auth_V3_CheckRequest) -> Bool {
    if lhs._attributes != rhs._attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Service_Auth_V3_DeniedHttpResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeniedHttpResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "headers"),
    3: .same(proto: "body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.headers)
      case 3: try decoder.decodeSingularStringField(value: &self.body)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 2)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Auth_V3_DeniedHttpResponse, rhs: Envoy_Service_Auth_V3_DeniedHttpResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Service_Auth_V3_OkHttpResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OkHttpResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "headers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.headers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Auth_V3_OkHttpResponse, rhs: Envoy_Service_Auth_V3_OkHttpResponse) -> Bool {
    if lhs.headers != rhs.headers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Service_Auth_V3_CheckResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "denied_response"),
    3: .standard(proto: "ok_response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2:
        var v: Envoy_Service_Auth_V3_DeniedHttpResponse?
        if let current = self.httpResponse {
          try decoder.handleConflictingOneOf()
          if case .deniedResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.httpResponse = .deniedResponse(v)}
      case 3:
        var v: Envoy_Service_Auth_V3_OkHttpResponse?
        if let current = self.httpResponse {
          try decoder.handleConflictingOneOf()
          if case .okResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.httpResponse = .okResponse(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    switch self.httpResponse {
    case .deniedResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .okResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Service_Auth_V3_CheckResponse, rhs: Envoy_Service_Auth_V3_CheckResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.httpResponse != rhs.httpResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
