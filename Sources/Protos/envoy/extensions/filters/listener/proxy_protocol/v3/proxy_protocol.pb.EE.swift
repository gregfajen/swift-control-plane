// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of rules to apply to requests.
  public var rules: [Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.Rule] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct KeyValuePair {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The namespace â€” if this is empty, the filter's namespace will be used.
    public var metadataNamespace: String = String()

    /// The key to use within the namespace.
    public var key: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// A Rule defines what metadata to apply when a header is present or missing.
  public struct Rule {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The type that triggers the rule - required
    /// TLV type is defined as uint8_t in proxy protocol. See `the spec
    /// <https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt>`_ for details.
    public var tlvType: UInt32 = 0

    /// If the TLV type is present, apply this metadata KeyValuePair.
    public var onTlvPresent: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.KeyValuePair {
      get {return _onTlvPresent ?? Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.KeyValuePair()}
      set {_onTlvPresent = newValue}
    }
    /// Returns true if `onTlvPresent` has been explicitly set.
    public var hasOnTlvPresent: Bool {return self._onTlvPresent != nil}
    /// Clears the value of `onTlvPresent`. Subsequent reads from it will return its default value.
    public mutating func clearOnTlvPresent() {self._onTlvPresent = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _onTlvPresent: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.KeyValuePair? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.listener.proxy_protocol.v3"

extension Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProxyProtocol"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rules"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rules) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rules, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol, rhs: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol) -> Bool {
    if lhs.rules != rhs.rules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.KeyValuePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.protoMessageName + ".KeyValuePair"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metadata_namespace"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.metadataNamespace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metadataNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataNamespace, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.KeyValuePair, rhs: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.KeyValuePair) -> Bool {
    if lhs.metadataNamespace != rhs.metadataNamespace {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.Rule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.protoMessageName + ".Rule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tlv_type"),
    2: .standard(proto: "on_tlv_present"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.tlvType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._onTlvPresent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tlvType != 0 {
      try visitor.visitSingularUInt32Field(value: self.tlvType, fieldNumber: 1)
    }
    if let v = self._onTlvPresent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.Rule, rhs: Envoy_Extensions_Filters_Listener_ProxyProtocol_V3_ProxyProtocol.Rule) -> Bool {
    if lhs.tlvType != rhs.tlvType {return false}
    if lhs._onTlvPresent != rhs._onTlvPresent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
