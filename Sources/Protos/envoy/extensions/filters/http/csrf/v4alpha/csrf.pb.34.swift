// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/csrf/v4alpha/csrf.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// CSRF filter config.
public struct Envoy_Extensions_Filters_Http_Csrf_V4alpha_CsrfPolicy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the % of requests for which the CSRF filter is enabled.
  ///
  /// If :ref:`runtime_key <envoy_api_field_config.core.v4alpha.RuntimeFractionalPercent.runtime_key>` is specified,
  /// Envoy will lookup the runtime key to get the percentage of requests to filter.
  ///
  /// .. note::
  ///
  ///   This field defaults to 100/:ref:`HUNDRED
  ///   <envoy_api_enum_type.v3.FractionalPercent.DenominatorType>`.
  public var filterEnabled: Envoy_Config_Core_V4alpha_RuntimeFractionalPercent {
    get {return _filterEnabled ?? Envoy_Config_Core_V4alpha_RuntimeFractionalPercent()}
    set {_filterEnabled = newValue}
  }
  /// Returns true if `filterEnabled` has been explicitly set.
  public var hasFilterEnabled: Bool {return self._filterEnabled != nil}
  /// Clears the value of `filterEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearFilterEnabled() {self._filterEnabled = nil}

  /// Specifies that CSRF policies will be evaluated and tracked, but not enforced.
  ///
  /// This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
  ///
  /// If :ref:`runtime_key <envoy_api_field_config.core.v4alpha.RuntimeFractionalPercent.runtime_key>` is specified,
  /// Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
  /// and track the request's *Origin* and *Destination* to determine if it's valid, but will not
  /// enforce any policies.
  public var shadowEnabled: Envoy_Config_Core_V4alpha_RuntimeFractionalPercent {
    get {return _shadowEnabled ?? Envoy_Config_Core_V4alpha_RuntimeFractionalPercent()}
    set {_shadowEnabled = newValue}
  }
  /// Returns true if `shadowEnabled` has been explicitly set.
  public var hasShadowEnabled: Bool {return self._shadowEnabled != nil}
  /// Clears the value of `shadowEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearShadowEnabled() {self._shadowEnabled = nil}

  /// Specifies additional source origins that will be allowed in addition to
  /// the destination origin.
  ///
  /// More information on how this can be configured via runtime can be found
  /// :ref:`here <csrf-configuration>`.
  public var additionalOrigins: [Envoy_Type_Matcher_V4alpha_StringMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _filterEnabled: Envoy_Config_Core_V4alpha_RuntimeFractionalPercent? = nil
  fileprivate var _shadowEnabled: Envoy_Config_Core_V4alpha_RuntimeFractionalPercent? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.csrf.v4alpha"

extension Envoy_Extensions_Filters_Http_Csrf_V4alpha_CsrfPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CsrfPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "filter_enabled"),
    2: .standard(proto: "shadow_enabled"),
    3: .standard(proto: "additional_origins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._filterEnabled)
      case 2: try decoder.decodeSingularMessageField(value: &self._shadowEnabled)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.additionalOrigins)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._filterEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._shadowEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.additionalOrigins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalOrigins, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Csrf_V4alpha_CsrfPolicy, rhs: Envoy_Extensions_Filters_Http_Csrf_V4alpha_CsrfPolicy) -> Bool {
    if lhs._filterEnabled != rhs._filterEnabled {return false}
    if lhs._shadowEnabled != rhs._shadowEnabled {return false}
    if lhs.additionalOrigins != rhs.additionalOrigins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
