// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/rbac/v4alpha/rbac.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// RBAC filter config.
public struct Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specify the RBAC rules to be applied globally.
  /// If absent, no enforcing RBAC policy will be applied.
  public var rules: Envoy_Config_Rbac_V4alpha_RBAC {
    get {return _rules ?? Envoy_Config_Rbac_V4alpha_RBAC()}
    set {_rules = newValue}
  }
  /// Returns true if `rules` has been explicitly set.
  public var hasRules: Bool {return self._rules != nil}
  /// Clears the value of `rules`. Subsequent reads from it will return its default value.
  public mutating func clearRules() {self._rules = nil}

  /// Shadow rules are not enforced by the filter (i.e., returning a 403)
  /// but will emit stats and logs and can be used for rule testing.
  /// If absent, no shadow RBAC policy will be applied.
  public var shadowRules: Envoy_Config_Rbac_V4alpha_RBAC {
    get {return _shadowRules ?? Envoy_Config_Rbac_V4alpha_RBAC()}
    set {_shadowRules = newValue}
  }
  /// Returns true if `shadowRules` has been explicitly set.
  public var hasShadowRules: Bool {return self._shadowRules != nil}
  /// Clears the value of `shadowRules`. Subsequent reads from it will return its default value.
  public mutating func clearShadowRules() {self._shadowRules = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rules: Envoy_Config_Rbac_V4alpha_RBAC? = nil
  fileprivate var _shadowRules: Envoy_Config_Rbac_V4alpha_RBAC? = nil
}

public struct Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBACPerRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Override the global configuration of the filter with this new config.
  /// If absent, the global RBAC policy will be disabled for this route.
  public var rbac: Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC {
    get {return _rbac ?? Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC()}
    set {_rbac = newValue}
  }
  /// Returns true if `rbac` has been explicitly set.
  public var hasRbac: Bool {return self._rbac != nil}
  /// Clears the value of `rbac`. Subsequent reads from it will return its default value.
  public mutating func clearRbac() {self._rbac = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rbac: Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.rbac.v4alpha"

extension Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RBAC"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rules"),
    2: .standard(proto: "shadow_rules"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rules) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shadowRules) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rules {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._shadowRules {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC, rhs: Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBAC) -> Bool {
    if lhs._rules != rhs._rules {return false}
    if lhs._shadowRules != rhs._shadowRules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBACPerRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RBACPerRoute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "rbac"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rbac) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rbac {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBACPerRoute, rhs: Envoy_Extensions_Filters_Http_Rbac_V4alpha_RBACPerRoute) -> Bool {
    if lhs._rbac != rhs._rbac {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
