// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/admission_control/v3alpha/admission_control.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 6]
public struct Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If set to false, the admission control filter will operate as a pass-through filter. If the
  /// message is unspecified, the filter will be enabled.
  public var enabled: Envoy_Config_Core_V3_RuntimeFeatureFlag {
    get {return _enabled ?? Envoy_Config_Core_V3_RuntimeFeatureFlag()}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  public var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  public mutating func clearEnabled() {self._enabled = nil}

  /// Defines how a request is considered a success/failure.
  public var evaluationCriteria: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.OneOf_EvaluationCriteria? = nil

  public var successCriteria: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria {
    get {
      if case .successCriteria(let v)? = evaluationCriteria {return v}
      return Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria()
    }
    set {evaluationCriteria = .successCriteria(newValue)}
  }

  /// The sliding time window over which the success rate is calculated. The window is rounded to the
  /// nearest second. Defaults to 30s.
  public var samplingWindow: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _samplingWindow ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_samplingWindow = newValue}
  }
  /// Returns true if `samplingWindow` has been explicitly set.
  public var hasSamplingWindow: Bool {return self._samplingWindow != nil}
  /// Clears the value of `samplingWindow`. Subsequent reads from it will return its default value.
  public mutating func clearSamplingWindow() {self._samplingWindow = nil}

  /// Rejection probability is defined by the formula::
  ///
  ///     max(0, (rq_count -  rq_success_count / sr_threshold) / (rq_count + 1)) ^ (1 / aggression)
  ///
  /// The aggression dictates how heavily the admission controller will throttle requests upon SR
  /// dropping at or below the threshold. A value of 1 will result in a linear increase in
  /// rejection probability as SR drops. Any values less than 1.0, will be set to 1.0. If the
  /// message is unspecified, the aggression is 1.0. See `the admission control documentation
  /// <https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/admission_control_filter.html>`_
  /// for a diagram illustrating this.
  public var aggression: Envoy_Config_Core_V3_RuntimeDouble {
    get {return _aggression ?? Envoy_Config_Core_V3_RuntimeDouble()}
    set {_aggression = newValue}
  }
  /// Returns true if `aggression` has been explicitly set.
  public var hasAggression: Bool {return self._aggression != nil}
  /// Clears the value of `aggression`. Subsequent reads from it will return its default value.
  public mutating func clearAggression() {self._aggression = nil}

  /// Dictates the success rate at which the rejection probability is non-zero. As success rate drops
  /// below this threshold, rejection probability will increase. Any success rate above the threshold
  /// results in a rejection probability of 0. Defaults to 95%.
  public var srThreshold: Envoy_Config_Core_V3_RuntimePercent {
    get {return _srThreshold ?? Envoy_Config_Core_V3_RuntimePercent()}
    set {_srThreshold = newValue}
  }
  /// Returns true if `srThreshold` has been explicitly set.
  public var hasSrThreshold: Bool {return self._srThreshold != nil}
  /// Clears the value of `srThreshold`. Subsequent reads from it will return its default value.
  public mutating func clearSrThreshold() {self._srThreshold = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Defines how a request is considered a success/failure.
  public enum OneOf_EvaluationCriteria: Equatable {
    case successCriteria(Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.OneOf_EvaluationCriteria, rhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.OneOf_EvaluationCriteria) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.successCriteria, .successCriteria): return {
        guard case .successCriteria(let l) = lhs, case .successCriteria(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Default method of specifying what constitutes a successful request. All status codes that
  /// indicate a successful request must be explicitly specified if not relying on the default
  /// values.
  public struct SuccessCriteria {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// If HTTP criteria are unspecified, all HTTP status codes below 500 are treated as successful
    /// responses.
    ///
    /// .. note::
    ///
    ///    The default HTTP codes considered successful by the admission controller are done so due
    ///    to the unlikelihood that sending fewer requests would change their behavior (for example:
    ///    redirects, unauthorized access, or bad requests won't be alleviated by sending less
    ///    traffic).
    public var httpCriteria: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.HttpCriteria {
      get {return _httpCriteria ?? Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.HttpCriteria()}
      set {_httpCriteria = newValue}
    }
    /// Returns true if `httpCriteria` has been explicitly set.
    public var hasHTTPCriteria: Bool {return self._httpCriteria != nil}
    /// Clears the value of `httpCriteria`. Subsequent reads from it will return its default value.
    public mutating func clearHTTPCriteria() {self._httpCriteria = nil}

    /// GRPC status codes to consider as request successes. If unspecified, defaults to: Ok,
    /// Cancelled, Unknown, InvalidArgument, NotFound, AlreadyExists, Unauthenticated,
    /// FailedPrecondition, OutOfRange, PermissionDenied, and Unimplemented.
    ///
    /// .. note::
    ///
    ///    The default gRPC codes that are considered successful by the admission controller are
    ///    chosen because of the unlikelihood that sending fewer requests will change the behavior.
    public var grpcCriteria: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.GrpcCriteria {
      get {return _grpcCriteria ?? Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.GrpcCriteria()}
      set {_grpcCriteria = newValue}
    }
    /// Returns true if `grpcCriteria` has been explicitly set.
    public var hasGrpcCriteria: Bool {return self._grpcCriteria != nil}
    /// Clears the value of `grpcCriteria`. Subsequent reads from it will return its default value.
    public mutating func clearGrpcCriteria() {self._grpcCriteria = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct HttpCriteria {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Status code ranges that constitute a successful request. Configurable codes are in the
      /// range [100, 600).
      public var httpSuccessStatus: [Envoy_Type_V3_Int32Range] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct GrpcCriteria {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Status codes that constitute a successful request.
      /// Mappings can be found at: https://github.com/grpc/grpc/blob/master/doc/statuscodes.md.
      public var grpcSuccessStatus: [UInt32] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _httpCriteria: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.HttpCriteria? = nil
    fileprivate var _grpcCriteria: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.GrpcCriteria? = nil
  }

  public init() {}

  fileprivate var _enabled: Envoy_Config_Core_V3_RuntimeFeatureFlag? = nil
  fileprivate var _samplingWindow: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _aggression: Envoy_Config_Core_V3_RuntimeDouble? = nil
  fileprivate var _srThreshold: Envoy_Config_Core_V3_RuntimePercent? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.admission_control.v3alpha"

extension Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdmissionControl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "success_criteria"),
    3: .standard(proto: "sampling_window"),
    4: .same(proto: "aggression"),
    5: .standard(proto: "sr_threshold"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._enabled) }()
      case 2: try {
        var v: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria?
        if let current = self.evaluationCriteria {
          try decoder.handleConflictingOneOf()
          if case .successCriteria(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.evaluationCriteria = .successCriteria(v)}
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._samplingWindow) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._aggression) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._srThreshold) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._enabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if case .successCriteria(let v)? = self.evaluationCriteria {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._samplingWindow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._aggression {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._srThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl, rhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs.evaluationCriteria != rhs.evaluationCriteria {return false}
    if lhs._samplingWindow != rhs._samplingWindow {return false}
    if lhs._aggression != rhs._aggression {return false}
    if lhs._srThreshold != rhs._srThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.protoMessageName + ".SuccessCriteria"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "http_criteria"),
    2: .standard(proto: "grpc_criteria"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._httpCriteria) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._grpcCriteria) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._httpCriteria {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._grpcCriteria {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria, rhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria) -> Bool {
    if lhs._httpCriteria != rhs._httpCriteria {return false}
    if lhs._grpcCriteria != rhs._grpcCriteria {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.HttpCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.protoMessageName + ".HttpCriteria"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "http_success_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.httpSuccessStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.httpSuccessStatus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.httpSuccessStatus, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.HttpCriteria, rhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.HttpCriteria) -> Bool {
    if lhs.httpSuccessStatus != rhs.httpSuccessStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.GrpcCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.protoMessageName + ".GrpcCriteria"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "grpc_success_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt32Field(value: &self.grpcSuccessStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.grpcSuccessStatus.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.grpcSuccessStatus, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.GrpcCriteria, rhs: Envoy_Extensions_Filters_Http_AdmissionControl_V3alpha_AdmissionControl.SuccessCriteria.GrpcCriteria) -> Bool {
    if lhs.grpcSuccessStatus != rhs.grpcSuccessStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
