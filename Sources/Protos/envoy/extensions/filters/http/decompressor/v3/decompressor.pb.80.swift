// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/decompressor/v3/decompressor.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A decompressor library to use for both request and response decompression. Currently only
  /// :ref:`envoy.compression.gzip.compressor<envoy_api_msg_extensions.compression.gzip.decompressor.v3.Gzip>`
  /// is included in Envoy.
  public var decompressorLibrary: Envoy_Config_Core_V3_TypedExtensionConfig {
    get {return _decompressorLibrary ?? Envoy_Config_Core_V3_TypedExtensionConfig()}
    set {_decompressorLibrary = newValue}
  }
  /// Returns true if `decompressorLibrary` has been explicitly set.
  public var hasDecompressorLibrary: Bool {return self._decompressorLibrary != nil}
  /// Clears the value of `decompressorLibrary`. Subsequent reads from it will return its default value.
  public mutating func clearDecompressorLibrary() {self._decompressorLibrary = nil}

  /// Configuration for request decompression. Decompression is enabled by default if left empty.
  public var requestDirectionConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.RequestDirectionConfig {
    get {return _requestDirectionConfig ?? Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.RequestDirectionConfig()}
    set {_requestDirectionConfig = newValue}
  }
  /// Returns true if `requestDirectionConfig` has been explicitly set.
  public var hasRequestDirectionConfig: Bool {return self._requestDirectionConfig != nil}
  /// Clears the value of `requestDirectionConfig`. Subsequent reads from it will return its default value.
  public mutating func clearRequestDirectionConfig() {self._requestDirectionConfig = nil}

  /// Configuration for response decompression. Decompression is enabled by default if left empty.
  public var responseDirectionConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.ResponseDirectionConfig {
    get {return _responseDirectionConfig ?? Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.ResponseDirectionConfig()}
    set {_responseDirectionConfig = newValue}
  }
  /// Returns true if `responseDirectionConfig` has been explicitly set.
  public var hasResponseDirectionConfig: Bool {return self._responseDirectionConfig != nil}
  /// Clears the value of `responseDirectionConfig`. Subsequent reads from it will return its default value.
  public mutating func clearResponseDirectionConfig() {self._responseDirectionConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Common configuration for filter behavior on both the request and response direction.
  public struct CommonDirectionConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Runtime flag that controls whether the filter is enabled for decompression or not. If set to false, the
    /// filter will operate as a pass-through filter. If the message is unspecified, the filter will be enabled.
    public var enabled: Envoy_Config_Core_V3_RuntimeFeatureFlag {
      get {return _enabled ?? Envoy_Config_Core_V3_RuntimeFeatureFlag()}
      set {_enabled = newValue}
    }
    /// Returns true if `enabled` has been explicitly set.
    public var hasEnabled: Bool {return self._enabled != nil}
    /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
    public mutating func clearEnabled() {self._enabled = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _enabled: Envoy_Config_Core_V3_RuntimeFeatureFlag? = nil
  }

  /// Configuration for filter behavior on the request direction.
  public struct RequestDirectionConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var commonConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig {
      get {return _commonConfig ?? Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig()}
      set {_commonConfig = newValue}
    }
    /// Returns true if `commonConfig` has been explicitly set.
    public var hasCommonConfig: Bool {return self._commonConfig != nil}
    /// Clears the value of `commonConfig`. Subsequent reads from it will return its default value.
    public mutating func clearCommonConfig() {self._commonConfig = nil}

    /// If set to true, and response decompression is enabled, the filter modifies the Accept-Encoding
    /// request header by appending the decompressor_library's encoding. Defaults to true.
    public var advertiseAcceptEncoding: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _advertiseAcceptEncoding ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_advertiseAcceptEncoding = newValue}
    }
    /// Returns true if `advertiseAcceptEncoding` has been explicitly set.
    public var hasAdvertiseAcceptEncoding: Bool {return self._advertiseAcceptEncoding != nil}
    /// Clears the value of `advertiseAcceptEncoding`. Subsequent reads from it will return its default value.
    public mutating func clearAdvertiseAcceptEncoding() {self._advertiseAcceptEncoding = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _commonConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig? = nil
    fileprivate var _advertiseAcceptEncoding: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  /// Configuration for filter behavior on the response direction.
  public struct ResponseDirectionConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var commonConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig {
      get {return _commonConfig ?? Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig()}
      set {_commonConfig = newValue}
    }
    /// Returns true if `commonConfig` has been explicitly set.
    public var hasCommonConfig: Bool {return self._commonConfig != nil}
    /// Clears the value of `commonConfig`. Subsequent reads from it will return its default value.
    public mutating func clearCommonConfig() {self._commonConfig = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _commonConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig? = nil
  }

  public init() {}

  fileprivate var _decompressorLibrary: Envoy_Config_Core_V3_TypedExtensionConfig? = nil
  fileprivate var _requestDirectionConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.RequestDirectionConfig? = nil
  fileprivate var _responseDirectionConfig: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.ResponseDirectionConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.decompressor.v3"

extension Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Decompressor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "decompressor_library"),
    2: .standard(proto: "request_direction_config"),
    3: .standard(proto: "response_direction_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._decompressorLibrary) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestDirectionConfig) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._responseDirectionConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._decompressorLibrary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestDirectionConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._responseDirectionConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor, rhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor) -> Bool {
    if lhs._decompressorLibrary != rhs._decompressorLibrary {return false}
    if lhs._requestDirectionConfig != rhs._requestDirectionConfig {return false}
    if lhs._responseDirectionConfig != rhs._responseDirectionConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.protoMessageName + ".CommonDirectionConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._enabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig, rhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.CommonDirectionConfig) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.RequestDirectionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.protoMessageName + ".RequestDirectionConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_config"),
    2: .standard(proto: "advertise_accept_encoding"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonConfig) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._advertiseAcceptEncoding) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._advertiseAcceptEncoding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.RequestDirectionConfig, rhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.RequestDirectionConfig) -> Bool {
    if lhs._commonConfig != rhs._commonConfig {return false}
    if lhs._advertiseAcceptEncoding != rhs._advertiseAcceptEncoding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.ResponseDirectionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.protoMessageName + ".ResponseDirectionConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.ResponseDirectionConfig, rhs: Envoy_Extensions_Filters_Http_Decompressor_V3_Decompressor.ResponseDirectionConfig) -> Bool {
    if lhs._commonConfig != rhs._commonConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
