// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/grpc_json_transcoder/v3/transcoder.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 10]
public struct Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var descriptorSet: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.OneOf_DescriptorSet? = nil

  /// Supplies the filename of
  /// :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
  /// services.
  public var protoDescriptor: String {
    get {
      if case .protoDescriptor(let v)? = descriptorSet {return v}
      return String()
    }
    set {descriptorSet = .protoDescriptor(newValue)}
  }

  /// Supplies the binary content of
  /// :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
  /// services.
  public var protoDescriptorBin: Data {
    get {
      if case .protoDescriptorBin(let v)? = descriptorSet {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {descriptorSet = .protoDescriptorBin(newValue)}
  }

  /// A list of strings that
  /// supplies the fully qualified service names (i.e. "package_name.service_name") that
  /// the transcoder will translate. If the service name doesn't exist in ``proto_descriptor``,
  /// Envoy will fail at startup. The ``proto_descriptor`` may contain more services than
  /// the service names specified here, but they won't be translated.
  public var services: [String] = []

  /// Control options for response JSON. These options are passed directly to
  /// `JsonPrintOptions <https://developers.google.com/protocol-buffers/docs/reference/cpp/
  /// google.protobuf.util.json_util#JsonPrintOptions>`_.
  public var printOptions: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.PrintOptions {
    get {return _printOptions ?? Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.PrintOptions()}
    set {_printOptions = newValue}
  }
  /// Returns true if `printOptions` has been explicitly set.
  public var hasPrintOptions: Bool {return self._printOptions != nil}
  /// Clears the value of `printOptions`. Subsequent reads from it will return its default value.
  public mutating func clearPrintOptions() {self._printOptions = nil}

  /// Whether to keep the incoming request route after the outgoing headers have been transformed to
  /// the match the upstream gRPC service. Note: This means that routes for gRPC services that are
  /// not transcoded cannot be used in combination with *match_incoming_request_route*.
  public var matchIncomingRequestRoute: Bool = false

  /// A list of query parameters to be ignored for transcoding method mapping.
  /// By default, the transcoder filter will not transcode a request if there are any
  /// unknown/invalid query parameters.
  ///
  /// Example :
  ///
  /// .. code-block:: proto
  ///
  ///     service Bookstore {
  ///       rpc GetShelf(GetShelfRequest) returns (Shelf) {
  ///         option (google.api.http) = {
  ///           get: "/shelves/{shelf}"
  ///         };
  ///       }
  ///     }
  ///
  ///     message GetShelfRequest {
  ///       int64 shelf = 1;
  ///     }
  ///
  ///     message Shelf {}
  ///
  /// The request ``/shelves/100?foo=bar`` will not be mapped to ``GetShelf``` because variable
  /// binding for ``foo`` is not defined. Adding ``foo`` to ``ignored_query_parameters`` will allow
  /// the same request to be mapped to ``GetShelf``.
  public var ignoredQueryParameters: [String] = []

  /// Whether to route methods without the ``google.api.http`` option.
  ///
  /// Example :
  ///
  /// .. code-block:: proto
  ///
  ///     package bookstore;
  ///
  ///     service Bookstore {
  ///       rpc GetShelf(GetShelfRequest) returns (Shelf) {}
  ///     }
  ///
  ///     message GetShelfRequest {
  ///       int64 shelf = 1;
  ///     }
  ///
  ///     message Shelf {}
  ///
  /// The client could ``post`` a json body ``{"shelf": 1234}`` with the path of
  /// ``/bookstore.Bookstore/GetShelfRequest`` to call ``GetShelfRequest``.
  public var autoMapping: Bool = false

  /// Whether to ignore query parameters that cannot be mapped to a corresponding
  /// protobuf field. Use this if you cannot control the query parameters and do
  /// not know them beforehand. Otherwise use ``ignored_query_parameters``.
  /// Defaults to false.
  public var ignoreUnknownQueryParameters: Bool = false

  /// Whether to convert gRPC status headers to JSON.
  /// When trailer indicates a gRPC error and there was no HTTP body, take ``google.rpc.Status``
  /// from the ``grpc-status-details-bin`` header and use it as JSON body.
  /// If there was no such header, make ``google.rpc.Status`` out of the ``grpc-status`` and
  /// ``grpc-message`` headers.
  /// The error details types must be present in the ``proto_descriptor``.
  ///
  /// For example, if an upstream server replies with headers:
  ///
  /// .. code-block:: none
  ///
  ///     grpc-status: 5
  ///     grpc-status-details-bin:
  ///         CAUaMwoqdHlwZS5nb29nbGVhcGlzLmNvbS9nb29nbGUucnBjLlJlcXVlc3RJbmZvEgUKA3ItMQ
  ///
  /// The ``grpc-status-details-bin`` header contains a base64-encoded protobuf message
  /// ``google.rpc.Status``. It will be transcoded into:
  ///
  /// .. code-block:: none
  ///
  ///     HTTP/1.1 404 Not Found
  ///     content-type: application/json
  ///
  ///     {"code":5,"details":[{"@type":"type.googleapis.com/google.rpc.RequestInfo","requestId":"r-1"}]}
  ///
  ///  In order to transcode the message, the ``google.rpc.RequestInfo`` type from
  ///  the ``google/rpc/error_details.proto`` should be included in the configured
  ///  :ref:`proto descriptor set <config_grpc_json_generate_proto_descriptor_set>`.
  public var convertGrpcStatus: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_DescriptorSet: Equatable {
    /// Supplies the filename of
    /// :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
    /// services.
    case protoDescriptor(String)
    /// Supplies the binary content of
    /// :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
    /// services.
    case protoDescriptorBin(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.OneOf_DescriptorSet, rhs: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.OneOf_DescriptorSet) -> Bool {
      switch (lhs, rhs) {
      case (.protoDescriptor(let l), .protoDescriptor(let r)): return l == r
      case (.protoDescriptorBin(let l), .protoDescriptorBin(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct PrintOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether to add spaces, line breaks and indentation to make the JSON
    /// output easy to read. Defaults to false.
    public var addWhitespace: Bool = false

    /// Whether to always print primitive fields. By default primitive
    /// fields with default values will be omitted in JSON output. For
    /// example, an int32 field set to 0 will be omitted. Setting this flag to
    /// true will override the default behavior and print primitive fields
    /// regardless of their values. Defaults to false.
    public var alwaysPrintPrimitiveFields: Bool = false

    /// Whether to always print enums as ints. By default they are rendered
    /// as strings. Defaults to false.
    public var alwaysPrintEnumsAsInts: Bool = false

    /// Whether to preserve proto field names. By default protobuf will
    /// generate JSON field names using the ``json_name`` option, or lower camel case,
    /// in that order. Setting this flag will preserve the original field names. Defaults to false.
    public var preserveProtoFieldNames: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _printOptions: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.PrintOptions? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.grpc_json_transcoder.v3"

extension Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GrpcJsonTranscoder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proto_descriptor"),
    4: .standard(proto: "proto_descriptor_bin"),
    2: .same(proto: "services"),
    3: .standard(proto: "print_options"),
    5: .standard(proto: "match_incoming_request_route"),
    6: .standard(proto: "ignored_query_parameters"),
    7: .standard(proto: "auto_mapping"),
    8: .standard(proto: "ignore_unknown_query_parameters"),
    9: .standard(proto: "convert_grpc_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.descriptorSet != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.descriptorSet = .protoDescriptor(v)}
      case 2: try decoder.decodeRepeatedStringField(value: &self.services)
      case 3: try decoder.decodeSingularMessageField(value: &self._printOptions)
      case 4:
        if self.descriptorSet != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.descriptorSet = .protoDescriptorBin(v)}
      case 5: try decoder.decodeSingularBoolField(value: &self.matchIncomingRequestRoute)
      case 6: try decoder.decodeRepeatedStringField(value: &self.ignoredQueryParameters)
      case 7: try decoder.decodeSingularBoolField(value: &self.autoMapping)
      case 8: try decoder.decodeSingularBoolField(value: &self.ignoreUnknownQueryParameters)
      case 9: try decoder.decodeSingularBoolField(value: &self.convertGrpcStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .protoDescriptor(let v)? = self.descriptorSet {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.services.isEmpty {
      try visitor.visitRepeatedStringField(value: self.services, fieldNumber: 2)
    }
    if let v = self._printOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if case .protoDescriptorBin(let v)? = self.descriptorSet {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    if self.matchIncomingRequestRoute != false {
      try visitor.visitSingularBoolField(value: self.matchIncomingRequestRoute, fieldNumber: 5)
    }
    if !self.ignoredQueryParameters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ignoredQueryParameters, fieldNumber: 6)
    }
    if self.autoMapping != false {
      try visitor.visitSingularBoolField(value: self.autoMapping, fieldNumber: 7)
    }
    if self.ignoreUnknownQueryParameters != false {
      try visitor.visitSingularBoolField(value: self.ignoreUnknownQueryParameters, fieldNumber: 8)
    }
    if self.convertGrpcStatus != false {
      try visitor.visitSingularBoolField(value: self.convertGrpcStatus, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder, rhs: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder) -> Bool {
    if lhs.descriptorSet != rhs.descriptorSet {return false}
    if lhs.services != rhs.services {return false}
    if lhs._printOptions != rhs._printOptions {return false}
    if lhs.matchIncomingRequestRoute != rhs.matchIncomingRequestRoute {return false}
    if lhs.ignoredQueryParameters != rhs.ignoredQueryParameters {return false}
    if lhs.autoMapping != rhs.autoMapping {return false}
    if lhs.ignoreUnknownQueryParameters != rhs.ignoreUnknownQueryParameters {return false}
    if lhs.convertGrpcStatus != rhs.convertGrpcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.PrintOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.protoMessageName + ".PrintOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "add_whitespace"),
    2: .standard(proto: "always_print_primitive_fields"),
    3: .standard(proto: "always_print_enums_as_ints"),
    4: .standard(proto: "preserve_proto_field_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.addWhitespace)
      case 2: try decoder.decodeSingularBoolField(value: &self.alwaysPrintPrimitiveFields)
      case 3: try decoder.decodeSingularBoolField(value: &self.alwaysPrintEnumsAsInts)
      case 4: try decoder.decodeSingularBoolField(value: &self.preserveProtoFieldNames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.addWhitespace != false {
      try visitor.visitSingularBoolField(value: self.addWhitespace, fieldNumber: 1)
    }
    if self.alwaysPrintPrimitiveFields != false {
      try visitor.visitSingularBoolField(value: self.alwaysPrintPrimitiveFields, fieldNumber: 2)
    }
    if self.alwaysPrintEnumsAsInts != false {
      try visitor.visitSingularBoolField(value: self.alwaysPrintEnumsAsInts, fieldNumber: 3)
    }
    if self.preserveProtoFieldNames != false {
      try visitor.visitSingularBoolField(value: self.preserveProtoFieldNames, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.PrintOptions, rhs: Envoy_Extensions_Filters_Http_GrpcJsonTranscoder_V3_GrpcJsonTranscoder.PrintOptions) -> Bool {
    if lhs.addWhitespace != rhs.addWhitespace {return false}
    if lhs.alwaysPrintPrimitiveFields != rhs.alwaysPrintPrimitiveFields {return false}
    if lhs.alwaysPrintEnumsAsInts != rhs.alwaysPrintEnumsAsInts {return false}
    if lhs.preserveProtoFieldNames != rhs.preserveProtoFieldNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
