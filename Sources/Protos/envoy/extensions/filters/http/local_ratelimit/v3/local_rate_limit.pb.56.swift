// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 7]
public struct Envoy_Extensions_Filters_Http_LocalRatelimit_V3_LocalRateLimit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The human readable prefix to use when emitting stats.
  public var statPrefix: String = String()

  /// This field allows for a custom HTTP response status code to the downstream client when
  /// the request has been rate limited.
  /// Defaults to 429 (TooManyRequests).
  ///
  /// .. note::
  ///   If this is set to < 400, 429 will be used instead.
  public var status: Envoy_Type_V3_HttpStatus {
    get {return _status ?? Envoy_Type_V3_HttpStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The token bucket configuration to use for rate limiting requests that are processed by this
  /// filter. Each request processed by the filter consumes a single token. If the token is available,
  /// the request will be allowed. If no tokens are available, the request will receive the configured
  /// rate limit status.
  ///
  /// .. note::
  ///   It's fine for the token bucket to be unset for the global configuration since the rate limit
  ///   can be applied at a the virtual host or route level. Thus, the token bucket must be set
  ///   for the per route configuration otherwise the config will be rejected.
  ///
  /// .. note::
  ///   When using per route configuration, the bucket becomes unique to that route.
  ///
  /// .. note::
  ///   In the current implementation the token bucket's :ref:`fill_interval
  ///   <envoy_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
  ///   refills.
  public var tokenBucket: Envoy_Type_V3_TokenBucket {
    get {return _tokenBucket ?? Envoy_Type_V3_TokenBucket()}
    set {_tokenBucket = newValue}
  }
  /// Returns true if `tokenBucket` has been explicitly set.
  public var hasTokenBucket: Bool {return self._tokenBucket != nil}
  /// Clears the value of `tokenBucket`. Subsequent reads from it will return its default value.
  public mutating func clearTokenBucket() {self._tokenBucket = nil}

  /// If set, this will enable -- but not necessarily enforce -- the rate limit for the given
  /// fraction of requests.
  /// Defaults to 0% of requests for safety.
  public var filterEnabled: Envoy_Config_Core_V3_RuntimeFractionalPercent {
    get {return _filterEnabled ?? Envoy_Config_Core_V3_RuntimeFractionalPercent()}
    set {_filterEnabled = newValue}
  }
  /// Returns true if `filterEnabled` has been explicitly set.
  public var hasFilterEnabled: Bool {return self._filterEnabled != nil}
  /// Clears the value of `filterEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearFilterEnabled() {self._filterEnabled = nil}

  /// If set, this will enforce the rate limit decisions for the given fraction of requests.
  ///
  /// Note: this only applies to the fraction of enabled requests.
  ///
  /// Defaults to 0% of requests for safety.
  public var filterEnforced: Envoy_Config_Core_V3_RuntimeFractionalPercent {
    get {return _filterEnforced ?? Envoy_Config_Core_V3_RuntimeFractionalPercent()}
    set {_filterEnforced = newValue}
  }
  /// Returns true if `filterEnforced` has been explicitly set.
  public var hasFilterEnforced: Bool {return self._filterEnforced != nil}
  /// Clears the value of `filterEnforced`. Subsequent reads from it will return its default value.
  public mutating func clearFilterEnforced() {self._filterEnforced = nil}

  /// Specifies a list of HTTP headers that should be added to each response for requests that
  /// have been rate limited.
  public var responseHeadersToAdd: [Envoy_Config_Core_V3_HeaderValueOption] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Envoy_Type_V3_HttpStatus? = nil
  fileprivate var _tokenBucket: Envoy_Type_V3_TokenBucket? = nil
  fileprivate var _filterEnabled: Envoy_Config_Core_V3_RuntimeFractionalPercent? = nil
  fileprivate var _filterEnforced: Envoy_Config_Core_V3_RuntimeFractionalPercent? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.local_ratelimit.v3"

extension Envoy_Extensions_Filters_Http_LocalRatelimit_V3_LocalRateLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocalRateLimit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stat_prefix"),
    2: .same(proto: "status"),
    3: .standard(proto: "token_bucket"),
    4: .standard(proto: "filter_enabled"),
    5: .standard(proto: "filter_enforced"),
    6: .standard(proto: "response_headers_to_add"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.statPrefix) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenBucket) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._filterEnabled) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._filterEnforced) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.responseHeadersToAdd) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.statPrefix, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tokenBucket {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._filterEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._filterEnforced {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.responseHeadersToAdd.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responseHeadersToAdd, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_LocalRatelimit_V3_LocalRateLimit, rhs: Envoy_Extensions_Filters_Http_LocalRatelimit_V3_LocalRateLimit) -> Bool {
    if lhs.statPrefix != rhs.statPrefix {return false}
    if lhs._status != rhs._status {return false}
    if lhs._tokenBucket != rhs._tokenBucket {return false}
    if lhs._filterEnabled != rhs._filterEnabled {return false}
    if lhs._filterEnforced != rhs._filterEnforced {return false}
    if lhs.responseHeadersToAdd != rhs.responseHeadersToAdd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
