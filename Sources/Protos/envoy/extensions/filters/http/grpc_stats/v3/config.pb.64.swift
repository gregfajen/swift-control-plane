// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/grpc_stats/v3/config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// gRPC statistics filter configuration
public struct Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If true, the filter maintains a filter state object with the request and response message
  /// counts.
  public var emitFilterState: Bool = false

  public var perMethodStatSpecifier: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig.OneOf_PerMethodStatSpecifier? = nil

  /// If set, specifies an allowlist of service/methods that will have individual stats
  /// emitted for them. Any call that does not match the allowlist will be counted
  /// in a stat with no method specifier: `cluster.<name>.grpc.*`.
  public var individualMethodStatsAllowlist: Envoy_Config_Core_V3_GrpcMethodList {
    get {
      if case .individualMethodStatsAllowlist(let v)? = perMethodStatSpecifier {return v}
      return Envoy_Config_Core_V3_GrpcMethodList()
    }
    set {perMethodStatSpecifier = .individualMethodStatsAllowlist(newValue)}
  }

  /// If set to true, emit stats for all service/method names.
  ///
  /// If set to false, emit stats for all service/message types to the same stats without including
  /// the service/method in the name, with prefix `cluster.<name>.grpc`. This can be useful if
  /// service/method granularity is not needed, or if each cluster only receives a single method.
  ///
  /// .. attention::
  ///   This option is only safe if all clients are trusted. If this option is enabled
  ///   with untrusted clients, the clients could cause unbounded growth in the number of stats in
  ///   Envoy, using unbounded memory and potentially slowing down stats pipelines.
  ///
  /// .. attention::
  ///   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
  ///   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
  ///   and in a future release, if neither field is set, it will default to
  ///   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
  ///   controlled with runtime override
  ///   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
  public var statsForAllMethods: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {
      if case .statsForAllMethods(let v)? = perMethodStatSpecifier {return v}
      return SwiftProtobuf.Google_Protobuf_BoolValue()
    }
    set {perMethodStatSpecifier = .statsForAllMethods(newValue)}
  }

  /// If true, the filter will gather a histogram for the request time of the upstream.
  /// It works with :ref:`stats_for_all_methods
  /// <envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods>`
  /// and :ref:`individual_method_stats_allowlist
  /// <envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist>` the same way
  /// request_message_count and response_message_count works.
  public var enableUpstreamStats: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_PerMethodStatSpecifier: Equatable {
    /// If set, specifies an allowlist of service/methods that will have individual stats
    /// emitted for them. Any call that does not match the allowlist will be counted
    /// in a stat with no method specifier: `cluster.<name>.grpc.*`.
    case individualMethodStatsAllowlist(Envoy_Config_Core_V3_GrpcMethodList)
    /// If set to true, emit stats for all service/method names.
    ///
    /// If set to false, emit stats for all service/message types to the same stats without including
    /// the service/method in the name, with prefix `cluster.<name>.grpc`. This can be useful if
    /// service/method granularity is not needed, or if each cluster only receives a single method.
    ///
    /// .. attention::
    ///   This option is only safe if all clients are trusted. If this option is enabled
    ///   with untrusted clients, the clients could cause unbounded growth in the number of stats in
    ///   Envoy, using unbounded memory and potentially slowing down stats pipelines.
    ///
    /// .. attention::
    ///   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
    ///   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
    ///   and in a future release, if neither field is set, it will default to
    ///   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
    ///   controlled with runtime override
    ///   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
    case statsForAllMethods(SwiftProtobuf.Google_Protobuf_BoolValue)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig.OneOf_PerMethodStatSpecifier, rhs: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig.OneOf_PerMethodStatSpecifier) -> Bool {
      switch (lhs, rhs) {
      case (.individualMethodStatsAllowlist(let l), .individualMethodStatsAllowlist(let r)): return l == r
      case (.statsForAllMethods(let l), .statsForAllMethods(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// gRPC statistics filter state object in protobuf form.
public struct Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Count of request messages in the request stream.
  public var requestMessageCount: UInt64 = 0

  /// Count of response messages in the response stream.
  public var responseMessageCount: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.grpc_stats.v3"

extension Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "emit_filter_state"),
    2: .standard(proto: "individual_method_stats_allowlist"),
    3: .standard(proto: "stats_for_all_methods"),
    4: .standard(proto: "enable_upstream_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.emitFilterState)
      case 2:
        var v: Envoy_Config_Core_V3_GrpcMethodList?
        if let current = self.perMethodStatSpecifier {
          try decoder.handleConflictingOneOf()
          if case .individualMethodStatsAllowlist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.perMethodStatSpecifier = .individualMethodStatsAllowlist(v)}
      case 3:
        var v: SwiftProtobuf.Google_Protobuf_BoolValue?
        if let current = self.perMethodStatSpecifier {
          try decoder.handleConflictingOneOf()
          if case .statsForAllMethods(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.perMethodStatSpecifier = .statsForAllMethods(v)}
      case 4: try decoder.decodeSingularBoolField(value: &self.enableUpstreamStats)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.emitFilterState != false {
      try visitor.visitSingularBoolField(value: self.emitFilterState, fieldNumber: 1)
    }
    switch self.perMethodStatSpecifier {
    case .individualMethodStatsAllowlist(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .statsForAllMethods(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    if self.enableUpstreamStats != false {
      try visitor.visitSingularBoolField(value: self.enableUpstreamStats, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig, rhs: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterConfig) -> Bool {
    if lhs.emitFilterState != rhs.emitFilterState {return false}
    if lhs.perMethodStatSpecifier != rhs.perMethodStatSpecifier {return false}
    if lhs.enableUpstreamStats != rhs.enableUpstreamStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_message_count"),
    2: .standard(proto: "response_message_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.requestMessageCount)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.responseMessageCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requestMessageCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.requestMessageCount, fieldNumber: 1)
    }
    if self.responseMessageCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.responseMessageCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterObject, rhs: Envoy_Extensions_Filters_Http_GrpcStats_V3_FilterObject) -> Bool {
    if lhs.requestMessageCount != rhs.requestMessageCount {return false}
    if lhs.responseMessageCount != rhs.responseMessageCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
