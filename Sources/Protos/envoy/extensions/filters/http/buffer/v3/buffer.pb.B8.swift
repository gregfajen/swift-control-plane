// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/buffer/v3/buffer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_Filters_Http_Buffer_V3_Buffer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The maximum request size that the filter will buffer before the connection
  /// manager will stop buffering and return a 413 response.
  public var maxRequestBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _maxRequestBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_maxRequestBytes = newValue}
  }
  /// Returns true if `maxRequestBytes` has been explicitly set.
  public var hasMaxRequestBytes: Bool {return self._maxRequestBytes != nil}
  /// Clears the value of `maxRequestBytes`. Subsequent reads from it will return its default value.
  public mutating func clearMaxRequestBytes() {self._maxRequestBytes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxRequestBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

public struct Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var override: Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute.OneOf_Override? = nil

  /// Disable the buffer filter for this particular vhost or route.
  public var disabled: Bool {
    get {
      if case .disabled(let v)? = override {return v}
      return false
    }
    set {override = .disabled(newValue)}
  }

  /// Override the global configuration of the filter with this new config.
  public var buffer: Envoy_Extensions_Filters_Http_Buffer_V3_Buffer {
    get {
      if case .buffer(let v)? = override {return v}
      return Envoy_Extensions_Filters_Http_Buffer_V3_Buffer()
    }
    set {override = .buffer(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Override: Equatable {
    /// Disable the buffer filter for this particular vhost or route.
    case disabled(Bool)
    /// Override the global configuration of the filter with this new config.
    case buffer(Envoy_Extensions_Filters_Http_Buffer_V3_Buffer)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute.OneOf_Override, rhs: Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute.OneOf_Override) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.disabled, .disabled): return {
        guard case .disabled(let l) = lhs, case .disabled(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buffer, .buffer): return {
        guard case .buffer(let l) = lhs, case .buffer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.buffer.v3"

extension Envoy_Extensions_Filters_Http_Buffer_V3_Buffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Buffer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_request_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._maxRequestBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maxRequestBytes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Buffer_V3_Buffer, rhs: Envoy_Extensions_Filters_Http_Buffer_V3_Buffer) -> Bool {
    if lhs._maxRequestBytes != rhs._maxRequestBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BufferPerRoute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "disabled"),
    2: .same(proto: "buffer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.override != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.override = .disabled(v)}
      }()
      case 2: try {
        var v: Envoy_Extensions_Filters_Http_Buffer_V3_Buffer?
        if let current = self.override {
          try decoder.handleConflictingOneOf()
          if case .buffer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.override = .buffer(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.override {
    case .disabled?: try {
      guard case .disabled(let v)? = self.override else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }()
    case .buffer?: try {
      guard case .buffer(let v)? = self.override else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute, rhs: Envoy_Extensions_Filters_Http_Buffer_V3_BufferPerRoute) -> Bool {
    if lhs.override != rhs.override {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
