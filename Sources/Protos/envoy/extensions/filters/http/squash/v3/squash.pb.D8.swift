// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/squash/v3/squash.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 6]
public struct Envoy_Extensions_Filters_Http_Squash_V3_Squash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the cluster that hosts the Squash server.
  public var cluster: String = String()

  /// When the filter requests the Squash server to create a DebugAttachment, it will use this
  /// structure as template for the body of the request. It can contain reference to environment
  /// variables in the form of '{{ ENV_VAR_NAME }}'. These can be used to provide the Squash server
  /// with more information to find the process to attach the debugger to. For example, in a
  /// Istio/k8s environment, this will contain information on the pod:
  ///
  /// .. code-block:: json
  ///
  ///  {
  ///    "spec": {
  ///      "attachment": {
  ///        "pod": "{{ POD_NAME }}",
  ///        "namespace": "{{ POD_NAMESPACE }}"
  ///      },
  ///      "match_request": true
  ///    }
  ///  }
  ///
  /// (where POD_NAME, POD_NAMESPACE are configured in the pod via the Downward API)
  public var attachmentTemplate: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _attachmentTemplate ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_attachmentTemplate = newValue}
  }
  /// Returns true if `attachmentTemplate` has been explicitly set.
  public var hasAttachmentTemplate: Bool {return self._attachmentTemplate != nil}
  /// Clears the value of `attachmentTemplate`. Subsequent reads from it will return its default value.
  public mutating func clearAttachmentTemplate() {self._attachmentTemplate = nil}

  /// The timeout for individual requests sent to the Squash cluster. Defaults to 1 second.
  public var requestTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _requestTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_requestTimeout = newValue}
  }
  /// Returns true if `requestTimeout` has been explicitly set.
  public var hasRequestTimeout: Bool {return self._requestTimeout != nil}
  /// Clears the value of `requestTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTimeout() {self._requestTimeout = nil}

  /// The total timeout Squash will delay a request and wait for it to be attached. Defaults to 60
  /// seconds.
  public var attachmentTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _attachmentTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_attachmentTimeout = newValue}
  }
  /// Returns true if `attachmentTimeout` has been explicitly set.
  public var hasAttachmentTimeout: Bool {return self._attachmentTimeout != nil}
  /// Clears the value of `attachmentTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearAttachmentTimeout() {self._attachmentTimeout = nil}

  /// Amount of time to poll for the status of the attachment object in the Squash server
  /// (to check if has been attached). Defaults to 1 second.
  public var attachmentPollPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _attachmentPollPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_attachmentPollPeriod = newValue}
  }
  /// Returns true if `attachmentPollPeriod` has been explicitly set.
  public var hasAttachmentPollPeriod: Bool {return self._attachmentPollPeriod != nil}
  /// Clears the value of `attachmentPollPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAttachmentPollPeriod() {self._attachmentPollPeriod = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _attachmentTemplate: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _requestTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _attachmentTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _attachmentPollPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.squash.v3"

extension Envoy_Extensions_Filters_Http_Squash_V3_Squash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Squash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cluster"),
    2: .standard(proto: "attachment_template"),
    3: .standard(proto: "request_timeout"),
    4: .standard(proto: "attachment_timeout"),
    5: .standard(proto: "attachment_poll_period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.cluster)
      case 2: try decoder.decodeSingularMessageField(value: &self._attachmentTemplate)
      case 3: try decoder.decodeSingularMessageField(value: &self._requestTimeout)
      case 4: try decoder.decodeSingularMessageField(value: &self._attachmentTimeout)
      case 5: try decoder.decodeSingularMessageField(value: &self._attachmentPollPeriod)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cluster.isEmpty {
      try visitor.visitSingularStringField(value: self.cluster, fieldNumber: 1)
    }
    if let v = self._attachmentTemplate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._requestTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._attachmentTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._attachmentPollPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_Squash_V3_Squash, rhs: Envoy_Extensions_Filters_Http_Squash_V3_Squash) -> Bool {
    if lhs.cluster != rhs.cluster {return false}
    if lhs._attachmentTemplate != rhs._attachmentTemplate {return false}
    if lhs._requestTimeout != rhs._requestTimeout {return false}
    if lhs._attachmentTimeout != rhs._attachmentTimeout {return false}
    if lhs._attachmentPollPeriod != rhs._attachmentPollPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
