// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// gRPC reverse bridge filter configuration
public struct Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The content-type to pass to the upstream when the gRPC bridge filter is applied.
  /// The filter will also validate that the upstream responds with the same content type.
  public var contentType: String = String()

  /// If true, Envoy will assume that the upstream doesn't understand gRPC frames and
  /// strip the gRPC frame from the request, and add it back in to the response. This will
  /// hide the gRPC semantics from the upstream, allowing it to receive and respond with a
  /// simple binary encoded protobuf.
  public var withholdGrpcFrames: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// gRPC reverse bridge filter configuration per virtualhost/route/weighted-cluster level.
public struct Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfigPerRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If true, disables gRPC reverse bridge filter for this particular vhost or route.
  /// If disabled is specified in multiple per-filter-configs, the most specific one will be used.
  public var disabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3"

extension Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "content_type"),
    2: .standard(proto: "withhold_grpc_frames"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contentType)
      case 2: try decoder.decodeSingularBoolField(value: &self.withholdGrpcFrames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 1)
    }
    if self.withholdGrpcFrames != false {
      try visitor.visitSingularBoolField(value: self.withholdGrpcFrames, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfig, rhs: Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfig) -> Bool {
    if lhs.contentType != rhs.contentType {return false}
    if lhs.withholdGrpcFrames != rhs.withholdGrpcFrames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfigPerRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterConfigPerRoute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "disabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.disabled)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfigPerRoute, rhs: Envoy_Extensions_Filters_Http_GrpcHttp1ReverseBridge_V3_FilterConfigPerRoute) -> Bool {
    if lhs.disabled != rhs.disabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
