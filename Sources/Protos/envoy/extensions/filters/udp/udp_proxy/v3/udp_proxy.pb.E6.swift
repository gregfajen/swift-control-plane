// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for the UDP proxy filter.
/// [#next-free-field: 6]
public struct Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The stat prefix used when emitting UDP proxy filter stats.
  public var statPrefix: String = String()

  public var routeSpecifier: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.OneOf_RouteSpecifier? = nil

  /// The upstream cluster to connect to.
  public var cluster: String {
    get {
      if case .cluster(let v)? = routeSpecifier {return v}
      return String()
    }
    set {routeSpecifier = .cluster(newValue)}
  }

  /// The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
  /// the session. The default if not specified is 1 minute.
  public var idleTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _idleTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_idleTimeout = newValue}
  }
  /// Returns true if `idleTimeout` has been explicitly set.
  public var hasIdleTimeout: Bool {return self._idleTimeout != nil}
  /// Clears the value of `idleTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearIdleTimeout() {self._idleTimeout = nil}

  /// Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.
  /// This option requires Envoy to be run with the *CAP_NET_ADMIN* capability on Linux.
  /// And the IPv6 stack must be enabled on Linux kernel.
  /// This option does not preserve the remote downstream port.
  /// If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.
  /// This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts
  /// will send the packets with the remote downstream IP address as the destination. All packets will be routed
  /// to the remote downstream directly if there are route rules on the upstream host side.
  /// There are two options to return the packets back to the remote downstream.
  /// The first one is to use DSR (Direct Server Return).
  /// The other one is to configure routing rules on the upstream hosts to forward
  /// all packets back to Envoy and configure iptables rules on the host running Envoy to
  /// forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.
  /// If the platform does not support this option, Envoy will raise a configuration error.
  public var useOriginalSrcIp: Bool = false

  /// Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
  /// load balancing algorithms will select a host randomly. Currently the number of hash policies is
  /// limited to 1.
  public var hashPolicies: [Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_RouteSpecifier: Equatable {
    /// The upstream cluster to connect to.
    case cluster(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.OneOf_RouteSpecifier, rhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.OneOf_RouteSpecifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.cluster, .cluster): return {
        guard case .cluster(let l) = lhs, case .cluster(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Specifies the UDP hash policy.
  /// The packets can be routed by hash policy.
  public struct HashPolicy {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policySpecifier: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy.OneOf_PolicySpecifier? = nil

    /// The source IP will be used to compute the hash used by hash-based load balancing algorithms.
    public var sourceIp: Bool {
      get {
        if case .sourceIp(let v)? = policySpecifier {return v}
        return false
      }
      set {policySpecifier = .sourceIp(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_PolicySpecifier: Equatable {
      /// The source IP will be used to compute the hash used by hash-based load balancing algorithms.
      case sourceIp(Bool)

    #if !swift(>=4.1)
      public static func ==(lhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy.OneOf_PolicySpecifier, rhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy.OneOf_PolicySpecifier) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.sourceIp, .sourceIp): return {
          guard case .sourceIp(let l) = lhs, case .sourceIp(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}

  fileprivate var _idleTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.udp.udp_proxy.v3"

extension Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UdpProxyConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stat_prefix"),
    2: .same(proto: "cluster"),
    3: .standard(proto: "idle_timeout"),
    4: .standard(proto: "use_original_src_ip"),
    5: .standard(proto: "hash_policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.statPrefix) }()
      case 2: try {
        if self.routeSpecifier != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.routeSpecifier = .cluster(v)}
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._idleTimeout) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.useOriginalSrcIp) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.hashPolicies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.statPrefix, fieldNumber: 1)
    }
    if case .cluster(let v)? = self.routeSpecifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._idleTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.useOriginalSrcIp != false {
      try visitor.visitSingularBoolField(value: self.useOriginalSrcIp, fieldNumber: 4)
    }
    if !self.hashPolicies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hashPolicies, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig, rhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig) -> Bool {
    if lhs.statPrefix != rhs.statPrefix {return false}
    if lhs.routeSpecifier != rhs.routeSpecifier {return false}
    if lhs._idleTimeout != rhs._idleTimeout {return false}
    if lhs.useOriginalSrcIp != rhs.useOriginalSrcIp {return false}
    if lhs.hashPolicies != rhs.hashPolicies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.protoMessageName + ".HashPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_ip"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.policySpecifier != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.policySpecifier = .sourceIp(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .sourceIp(let v)? = self.policySpecifier {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy, rhs: Envoy_Extensions_Filters_Udp_UdpProxy_V3_UdpProxyConfig.HashPolicy) -> Bool {
    if lhs.policySpecifier != rhs.policySpecifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
