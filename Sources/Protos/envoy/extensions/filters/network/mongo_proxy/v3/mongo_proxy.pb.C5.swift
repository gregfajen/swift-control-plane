// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/network/mongo_proxy/v3/mongo_proxy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 6]
public struct Envoy_Extensions_Filters_Network_MongoProxy_V3_MongoProxy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The human readable prefix to use when emitting :ref:`statistics
  /// <config_network_filters_mongo_proxy_stats>`.
  public var statPrefix: String = String()

  /// The optional path to use for writing Mongo access logs. If not access log
  /// path is specified no access logs will be written. Note that access log is
  /// also gated :ref:`runtime <config_network_filters_mongo_proxy_runtime>`.
  public var accessLog: String = String()

  /// Inject a fixed delay before proxying a Mongo operation. Delays are
  /// applied to the following MongoDB operations: Query, Insert, GetMore,
  /// and KillCursors. Once an active delay is in progress, all incoming
  /// data up until the timer event fires will be a part of the delay.
  public var delay: Envoy_Extensions_Filters_Common_Fault_V3_FaultDelay {
    get {return _delay ?? Envoy_Extensions_Filters_Common_Fault_V3_FaultDelay()}
    set {_delay = newValue}
  }
  /// Returns true if `delay` has been explicitly set.
  public var hasDelay: Bool {return self._delay != nil}
  /// Clears the value of `delay`. Subsequent reads from it will return its default value.
  public mutating func clearDelay() {self._delay = nil}

  /// Flag to specify whether :ref:`dynamic metadata
  /// <config_network_filters_mongo_proxy_dynamic_metadata>` should be emitted. Defaults to false.
  public var emitDynamicMetadata: Bool = false

  /// List of commands to emit metrics for. Defaults to "delete", "insert", and "update".
  /// Note that metrics will not be emitted for "find" commands, since those are considered
  /// queries, and metrics for those are emitted under a dedicated "query" namespace.
  public var commands: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _delay: Envoy_Extensions_Filters_Common_Fault_V3_FaultDelay? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.network.mongo_proxy.v3"

extension Envoy_Extensions_Filters_Network_MongoProxy_V3_MongoProxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MongoProxy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stat_prefix"),
    2: .standard(proto: "access_log"),
    3: .same(proto: "delay"),
    4: .standard(proto: "emit_dynamic_metadata"),
    5: .same(proto: "commands"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.statPrefix) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accessLog) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._delay) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.emitDynamicMetadata) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.commands) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.statPrefix, fieldNumber: 1)
    }
    if !self.accessLog.isEmpty {
      try visitor.visitSingularStringField(value: self.accessLog, fieldNumber: 2)
    }
    if let v = self._delay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.emitDynamicMetadata != false {
      try visitor.visitSingularBoolField(value: self.emitDynamicMetadata, fieldNumber: 4)
    }
    if !self.commands.isEmpty {
      try visitor.visitRepeatedStringField(value: self.commands, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_MongoProxy_V3_MongoProxy, rhs: Envoy_Extensions_Filters_Network_MongoProxy_V3_MongoProxy) -> Bool {
    if lhs.statPrefix != rhs.statPrefix {return false}
    if lhs.accessLog != rhs.accessLog {return false}
    if lhs._delay != rhs._delay {return false}
    if lhs.emitDynamicMetadata != rhs.emitDynamicMetadata {return false}
    if lhs.commands != rhs.commands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
