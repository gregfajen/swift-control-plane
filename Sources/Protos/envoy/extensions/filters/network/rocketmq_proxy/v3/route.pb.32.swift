// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/network/rocketmq_proxy/v3/route.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the route configuration.
  public var name: String = String()

  /// The list of routes that will be matched, in order, against incoming requests. The first route
  /// that matches will be used.
  public var routes: [Envoy_Extensions_Filters_Network_RocketmqProxy_V3_Route] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Envoy_Extensions_Filters_Network_RocketmqProxy_V3_Route {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Route matching parameters.
  public var match: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch {
    get {return _match ?? Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch()}
    set {_match = newValue}
  }
  /// Returns true if `match` has been explicitly set.
  public var hasMatch: Bool {return self._match != nil}
  /// Clears the value of `match`. Subsequent reads from it will return its default value.
  public mutating func clearMatch() {self._match = nil}

  /// Route request to some upstream cluster.
  public var route: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction {
    get {return _route ?? Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction()}
    set {_route = newValue}
  }
  /// Returns true if `route` has been explicitly set.
  public var hasRoute: Bool {return self._route != nil}
  /// Clears the value of `route`. Subsequent reads from it will return its default value.
  public mutating func clearRoute() {self._route = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _match: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch? = nil
  fileprivate var _route: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction? = nil
}

public struct Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the topic.
  public var topic: Envoy_Type_Matcher_V3_StringMatcher {
    get {return _topic ?? Envoy_Type_Matcher_V3_StringMatcher()}
    set {_topic = newValue}
  }
  /// Returns true if `topic` has been explicitly set.
  public var hasTopic: Bool {return self._topic != nil}
  /// Clears the value of `topic`. Subsequent reads from it will return its default value.
  public mutating func clearTopic() {self._topic = nil}

  /// Specifies a set of headers that the route should match on. The router will check the requestâ€™s
  /// headers against all the specified headers in the route config. A match will happen if all the
  /// headers in the route are present in the request with the same values (or based on presence if
  /// the value field is not in the config).
  public var headers: [Envoy_Config_Route_V3_HeaderMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _topic: Envoy_Type_Matcher_V3_StringMatcher? = nil
}

public struct Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates the upstream cluster to which the request should be routed.
  public var cluster: String = String()

  /// Optional endpoint metadata match criteria used by the subset load balancer.
  public var metadataMatch: Envoy_Config_Core_V3_Metadata {
    get {return _metadataMatch ?? Envoy_Config_Core_V3_Metadata()}
    set {_metadataMatch = newValue}
  }
  /// Returns true if `metadataMatch` has been explicitly set.
  public var hasMetadataMatch: Bool {return self._metadataMatch != nil}
  /// Clears the value of `metadataMatch`. Subsequent reads from it will return its default value.
  public mutating func clearMetadataMatch() {self._metadataMatch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadataMatch: Envoy_Config_Core_V3_Metadata? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.network.rocketmq_proxy.v3"

extension Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RouteConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "routes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.routes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteConfiguration, rhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteConfiguration) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Network_RocketmqProxy_V3_Route: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Route"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "match"),
    2: .same(proto: "route"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._match)
      case 2: try decoder.decodeSingularMessageField(value: &self._route)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._match {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._route {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_Route, rhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_Route) -> Bool {
    if lhs._match != rhs._match {return false}
    if lhs._route != rhs._route {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RouteMatch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topic"),
    2: .same(proto: "headers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._topic)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.headers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._topic {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch, rhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteMatch) -> Bool {
    if lhs._topic != rhs._topic {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RouteAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cluster"),
    2: .standard(proto: "metadata_match"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.cluster)
      case 2: try decoder.decodeSingularMessageField(value: &self._metadataMatch)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cluster.isEmpty {
      try visitor.visitSingularStringField(value: self.cluster, fieldNumber: 1)
    }
    if let v = self._metadataMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction, rhs: Envoy_Extensions_Filters_Network_RocketmqProxy_V3_RouteAction) -> Bool {
    if lhs.cluster != rhs.cluster {return false}
    if lhs._metadataMatch != rhs._metadataMatch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
