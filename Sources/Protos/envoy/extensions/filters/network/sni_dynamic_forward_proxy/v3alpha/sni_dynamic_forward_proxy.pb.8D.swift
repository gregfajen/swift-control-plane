// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/network/sni_dynamic_forward_proxy/v3alpha/sni_dynamic_forward_proxy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for the SNI-based dynamic forward proxy filter. See the
/// :ref:`architecture overview <arch_overview_http_dynamic_forward_proxy>` for
/// more information. Note this filter must be configured along with
/// :ref:`TLS inspector listener filter <config_listener_filters_tls_inspector>`
/// to work.
/// [#extension: envoy.filters.network.sni_dynamic_forward_proxy]
public struct Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The DNS cache configuration that the filter will attach to. Note this
  /// configuration must match that of associated :ref:`dynamic forward proxy
  /// cluster configuration
  /// <envoy_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
  public var dnsCacheConfig: Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig {
    get {return _dnsCacheConfig ?? Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig()}
    set {_dnsCacheConfig = newValue}
  }
  /// Returns true if `dnsCacheConfig` has been explicitly set.
  public var hasDnsCacheConfig: Bool {return self._dnsCacheConfig != nil}
  /// Clears the value of `dnsCacheConfig`. Subsequent reads from it will return its default value.
  public mutating func clearDnsCacheConfig() {self._dnsCacheConfig = nil}

  public var portSpecifier: Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig.OneOf_PortSpecifier? = nil

  /// The port number to connect to the upstream.
  public var portValue: UInt32 {
    get {
      if case .portValue(let v)? = portSpecifier {return v}
      return 0
    }
    set {portSpecifier = .portValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_PortSpecifier: Equatable {
    /// The port number to connect to the upstream.
    case portValue(UInt32)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig.OneOf_PortSpecifier, rhs: Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig.OneOf_PortSpecifier) -> Bool {
      switch (lhs, rhs) {
      case (.portValue(let l), .portValue(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _dnsCacheConfig: Envoy_Extensions_Common_DynamicForwardProxy_V3_DnsCacheConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3alpha"

extension Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dns_cache_config"),
    2: .standard(proto: "port_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._dnsCacheConfig)
      case 2:
        if self.portSpecifier != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.portSpecifier = .portValue(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dnsCacheConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if case .portValue(let v)? = self.portSpecifier {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig, rhs: Envoy_Extensions_Filters_Network_SniDynamicForwardProxy_V3alpha_FilterConfig) -> Bool {
    if lhs._dnsCacheConfig != rhs._dnsCacheConfig {return false}
    if lhs.portSpecifier != rhs.portSpecifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
