// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/filters/network/ext_authz/v3/ext_authz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// External Authorization filter calls out to an external service over the
/// gRPC Authorization API defined by
/// :ref:`CheckRequest <envoy_api_msg_service.auth.v3.CheckRequest>`.
/// A failed check will cause this filter to close the TCP connection.
/// [#next-free-field: 7]
public struct Envoy_Extensions_Filters_Network_ExtAuthz_V3_ExtAuthz {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prefix to use when emitting statistics.
  public var statPrefix: String {
    get {return _storage._statPrefix}
    set {_uniqueStorage()._statPrefix = newValue}
  }

  /// The external authorization gRPC service configuration.
  /// The default timeout is set to 200ms by this filter.
  public var grpcService: Envoy_Config_Core_V3_GrpcService {
    get {return _storage._grpcService ?? Envoy_Config_Core_V3_GrpcService()}
    set {_uniqueStorage()._grpcService = newValue}
  }
  /// Returns true if `grpcService` has been explicitly set.
  public var hasGrpcService: Bool {return _storage._grpcService != nil}
  /// Clears the value of `grpcService`. Subsequent reads from it will return its default value.
  public mutating func clearGrpcService() {_uniqueStorage()._grpcService = nil}

  /// The filter's behaviour in case the external authorization service does
  /// not respond back. When it is set to true, Envoy will also allow traffic in case of
  /// communication failure between authorization service and the proxy.
  /// Defaults to false.
  public var failureModeAllow: Bool {
    get {return _storage._failureModeAllow}
    set {_uniqueStorage()._failureModeAllow = newValue}
  }

  /// Specifies if the peer certificate is sent to the external service.
  ///
  /// When this field is true, Envoy will include the peer X.509 certificate, if available, in the
  /// :ref:`certificate<envoy_api_field_service.auth.v3.AttributeContext.Peer.certificate>`.
  public var includePeerCertificate: Bool {
    get {return _storage._includePeerCertificate}
    set {_uniqueStorage()._includePeerCertificate = newValue}
  }

  /// API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
  /// version of Check{Request,Response} used on the wire.
  public var transportApiVersion: Envoy_Config_Core_V3_ApiVersion {
    get {return _storage._transportApiVersion}
    set {_uniqueStorage()._transportApiVersion = newValue}
  }

  /// Specifies if the filter is enabled with metadata matcher.
  /// If this field is not specified, the filter will be enabled for all requests.
  public var filterEnabledMetadata: Envoy_Type_Matcher_V3_MetadataMatcher {
    get {return _storage._filterEnabledMetadata ?? Envoy_Type_Matcher_V3_MetadataMatcher()}
    set {_uniqueStorage()._filterEnabledMetadata = newValue}
  }
  /// Returns true if `filterEnabledMetadata` has been explicitly set.
  public var hasFilterEnabledMetadata: Bool {return _storage._filterEnabledMetadata != nil}
  /// Clears the value of `filterEnabledMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearFilterEnabledMetadata() {_uniqueStorage()._filterEnabledMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.filters.network.ext_authz.v3"

extension Envoy_Extensions_Filters_Network_ExtAuthz_V3_ExtAuthz: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExtAuthz"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stat_prefix"),
    2: .standard(proto: "grpc_service"),
    3: .standard(proto: "failure_mode_allow"),
    4: .standard(proto: "include_peer_certificate"),
    5: .standard(proto: "transport_api_version"),
    6: .standard(proto: "filter_enabled_metadata"),
  ]

  fileprivate class _StorageClass {
    var _statPrefix: String = String()
    var _grpcService: Envoy_Config_Core_V3_GrpcService? = nil
    var _failureModeAllow: Bool = false
    var _includePeerCertificate: Bool = false
    var _transportApiVersion: Envoy_Config_Core_V3_ApiVersion = .auto
    var _filterEnabledMetadata: Envoy_Type_Matcher_V3_MetadataMatcher? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _statPrefix = source._statPrefix
      _grpcService = source._grpcService
      _failureModeAllow = source._failureModeAllow
      _includePeerCertificate = source._includePeerCertificate
      _transportApiVersion = source._transportApiVersion
      _filterEnabledMetadata = source._filterEnabledMetadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._statPrefix) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._grpcService) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._failureModeAllow) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._includePeerCertificate) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._transportApiVersion) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._filterEnabledMetadata) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._statPrefix.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statPrefix, fieldNumber: 1)
      }
      if let v = _storage._grpcService {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._failureModeAllow != false {
        try visitor.visitSingularBoolField(value: _storage._failureModeAllow, fieldNumber: 3)
      }
      if _storage._includePeerCertificate != false {
        try visitor.visitSingularBoolField(value: _storage._includePeerCertificate, fieldNumber: 4)
      }
      if _storage._transportApiVersion != .auto {
        try visitor.visitSingularEnumField(value: _storage._transportApiVersion, fieldNumber: 5)
      }
      if let v = _storage._filterEnabledMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Filters_Network_ExtAuthz_V3_ExtAuthz, rhs: Envoy_Extensions_Filters_Network_ExtAuthz_V3_ExtAuthz) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._statPrefix != rhs_storage._statPrefix {return false}
        if _storage._grpcService != rhs_storage._grpcService {return false}
        if _storage._failureModeAllow != rhs_storage._failureModeAllow {return false}
        if _storage._includePeerCertificate != rhs_storage._includePeerCertificate {return false}
        if _storage._transportApiVersion != rhs_storage._transportApiVersion {return false}
        if _storage._filterEnabledMetadata != rhs_storage._filterEnabledMetadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
