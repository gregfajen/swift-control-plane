// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/transport_sockets/tls/v3/secret.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Secret of generic type and is available to filters.
  public var secret: Envoy_Config_Core_V3_DataSource {
    get {return _secret ?? Envoy_Config_Core_V3_DataSource()}
    set {_secret = newValue}
  }
  /// Returns true if `secret` has been explicitly set.
  public var hasSecret: Bool {return self._secret != nil}
  /// Clears the value of `secret`. Subsequent reads from it will return its default value.
  public mutating func clearSecret() {self._secret = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _secret: Envoy_Config_Core_V3_DataSource? = nil
}

public struct Envoy_Extensions_TransportSockets_Tls_V3_SdsSecretConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
  /// When both name and config are specified, then secret can be fetched and/or reloaded via
  /// SDS. When only name is specified, then secret will be loaded from static resources.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Resource locator for SDS. This is mutually exclusive to *name*.
  /// [#not-implemented-hide:]
  public var sdsResourceLocator: Udpa_Core_V1_ResourceLocator {
    get {return _storage._sdsResourceLocator ?? Udpa_Core_V1_ResourceLocator()}
    set {_uniqueStorage()._sdsResourceLocator = newValue}
  }
  /// Returns true if `sdsResourceLocator` has been explicitly set.
  public var hasSdsResourceLocator: Bool {return _storage._sdsResourceLocator != nil}
  /// Clears the value of `sdsResourceLocator`. Subsequent reads from it will return its default value.
  public mutating func clearSdsResourceLocator() {_uniqueStorage()._sdsResourceLocator = nil}

  public var sdsConfig: Envoy_Config_Core_V3_ConfigSource {
    get {return _storage._sdsConfig ?? Envoy_Config_Core_V3_ConfigSource()}
    set {_uniqueStorage()._sdsConfig = newValue}
  }
  /// Returns true if `sdsConfig` has been explicitly set.
  public var hasSdsConfig: Bool {return _storage._sdsConfig != nil}
  /// Clears the value of `sdsConfig`. Subsequent reads from it will return its default value.
  public mutating func clearSdsConfig() {_uniqueStorage()._sdsConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// [#next-free-field: 6]
public struct Envoy_Extensions_TransportSockets_Tls_V3_Secret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
  public var name: String = String()

  public var type: Envoy_Extensions_TransportSockets_Tls_V3_Secret.OneOf_Type? = nil

  public var tlsCertificate: Envoy_Extensions_TransportSockets_Tls_V3_TlsCertificate {
    get {
      if case .tlsCertificate(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V3_TlsCertificate()
    }
    set {type = .tlsCertificate(newValue)}
  }

  public var sessionTicketKeys: Envoy_Extensions_TransportSockets_Tls_V3_TlsSessionTicketKeys {
    get {
      if case .sessionTicketKeys(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V3_TlsSessionTicketKeys()
    }
    set {type = .sessionTicketKeys(newValue)}
  }

  public var validationContext: Envoy_Extensions_TransportSockets_Tls_V3_CertificateValidationContext {
    get {
      if case .validationContext(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V3_CertificateValidationContext()
    }
    set {type = .validationContext(newValue)}
  }

  public var genericSecret: Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret {
    get {
      if case .genericSecret(let v)? = type {return v}
      return Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret()
    }
    set {type = .genericSecret(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case tlsCertificate(Envoy_Extensions_TransportSockets_Tls_V3_TlsCertificate)
    case sessionTicketKeys(Envoy_Extensions_TransportSockets_Tls_V3_TlsSessionTicketKeys)
    case validationContext(Envoy_Extensions_TransportSockets_Tls_V3_CertificateValidationContext)
    case genericSecret(Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V3_Secret.OneOf_Type, rhs: Envoy_Extensions_TransportSockets_Tls_V3_Secret.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tlsCertificate, .tlsCertificate): return {
        guard case .tlsCertificate(let l) = lhs, case .tlsCertificate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sessionTicketKeys, .sessionTicketKeys): return {
        guard case .sessionTicketKeys(let l) = lhs, case .sessionTicketKeys(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.validationContext, .validationContext): return {
        guard case .validationContext(let l) = lhs, case .validationContext(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.genericSecret, .genericSecret): return {
        guard case .genericSecret(let l) = lhs, case .genericSecret(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.transport_sockets.tls.v3"

extension Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenericSecret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._secret) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._secret {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret, rhs: Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret) -> Bool {
    if lhs._secret != rhs._secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_TransportSockets_Tls_V3_SdsSecretConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SdsSecretConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "sds_resource_locator"),
    2: .standard(proto: "sds_config"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _sdsResourceLocator: Udpa_Core_V1_ResourceLocator? = nil
    var _sdsConfig: Envoy_Config_Core_V3_ConfigSource? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _sdsResourceLocator = source._sdsResourceLocator
      _sdsConfig = source._sdsConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._sdsConfig) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._sdsResourceLocator) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._sdsConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._sdsResourceLocator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V3_SdsSecretConfig, rhs: Envoy_Extensions_TransportSockets_Tls_V3_SdsSecretConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._sdsResourceLocator != rhs_storage._sdsResourceLocator {return false}
        if _storage._sdsConfig != rhs_storage._sdsConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_TransportSockets_Tls_V3_Secret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Secret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "tls_certificate"),
    3: .standard(proto: "session_ticket_keys"),
    4: .standard(proto: "validation_context"),
    5: .standard(proto: "generic_secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try {
        var v: Envoy_Extensions_TransportSockets_Tls_V3_TlsCertificate?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .tlsCertificate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .tlsCertificate(v)}
      }()
      case 3: try {
        var v: Envoy_Extensions_TransportSockets_Tls_V3_TlsSessionTicketKeys?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .sessionTicketKeys(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .sessionTicketKeys(v)}
      }()
      case 4: try {
        var v: Envoy_Extensions_TransportSockets_Tls_V3_CertificateValidationContext?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .validationContext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .validationContext(v)}
      }()
      case 5: try {
        var v: Envoy_Extensions_TransportSockets_Tls_V3_GenericSecret?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .genericSecret(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .genericSecret(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .tlsCertificate?: try {
      guard case .tlsCertificate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .sessionTicketKeys?: try {
      guard case .sessionTicketKeys(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .validationContext?: try {
      guard case .validationContext(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .genericSecret?: try {
      guard case .genericSecret(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_TransportSockets_Tls_V3_Secret, rhs: Envoy_Extensions_TransportSockets_Tls_V3_Secret) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
