// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/common/tap/v4alpha/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Common configuration for all tap extensions.
public struct Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var configType: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.OneOf_ConfigType? = nil

  /// If specified, the tap filter will be configured via an admin handler.
  public var adminConfig: Envoy_Extensions_Common_Tap_V4alpha_AdminConfig {
    get {
      if case .adminConfig(let v)? = configType {return v}
      return Envoy_Extensions_Common_Tap_V4alpha_AdminConfig()
    }
    set {configType = .adminConfig(newValue)}
  }

  /// If specified, the tap filter will be configured via a static configuration that cannot be
  /// changed.
  public var staticConfig: Envoy_Config_Tap_V4alpha_TapConfig {
    get {
      if case .staticConfig(let v)? = configType {return v}
      return Envoy_Config_Tap_V4alpha_TapConfig()
    }
    set {configType = .staticConfig(newValue)}
  }

  /// [#not-implemented-hide:] Configuration to use for TapDS updates for the filter.
  public var tapdsConfig: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig {
    get {
      if case .tapdsConfig(let v)? = configType {return v}
      return Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig()
    }
    set {configType = .tapdsConfig(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ConfigType: Equatable {
    /// If specified, the tap filter will be configured via an admin handler.
    case adminConfig(Envoy_Extensions_Common_Tap_V4alpha_AdminConfig)
    /// If specified, the tap filter will be configured via a static configuration that cannot be
    /// changed.
    case staticConfig(Envoy_Config_Tap_V4alpha_TapConfig)
    /// [#not-implemented-hide:] Configuration to use for TapDS updates for the filter.
    case tapdsConfig(Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.OneOf_ConfigType, rhs: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.OneOf_ConfigType) -> Bool {
      switch (lhs, rhs) {
      case (.adminConfig(let l), .adminConfig(let r)): return l == r
      case (.staticConfig(let l), .staticConfig(let r)): return l == r
      case (.tapdsConfig(let l), .tapdsConfig(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// [#not-implemented-hide:]
  public struct TapDSConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Configuration for the source of TapDS updates for this Cluster.
    public var configSource: Envoy_Config_Core_V4alpha_ConfigSource {
      get {return _configSource ?? Envoy_Config_Core_V4alpha_ConfigSource()}
      set {_configSource = newValue}
    }
    /// Returns true if `configSource` has been explicitly set.
    public var hasConfigSource: Bool {return self._configSource != nil}
    /// Clears the value of `configSource`. Subsequent reads from it will return its default value.
    public mutating func clearConfigSource() {self._configSource = nil}

    /// Tap config to request from XDS server.
    public var name: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _configSource: Envoy_Config_Core_V4alpha_ConfigSource? = nil
  }

  public init() {}
}

/// Configuration for the admin handler. See :ref:`here <config_http_filters_tap_admin_handler>` for
/// more information.
public struct Envoy_Extensions_Common_Tap_V4alpha_AdminConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Opaque configuration ID. When requests are made to the admin handler, the passed opaque ID is
  /// matched to the configured filter opaque ID to determine which filter to configure.
  public var configID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.common.tap.v4alpha"

extension Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonExtensionConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "admin_config"),
    2: .standard(proto: "static_config"),
    3: .standard(proto: "tapds_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Envoy_Extensions_Common_Tap_V4alpha_AdminConfig?
        if let current = self.configType {
          try decoder.handleConflictingOneOf()
          if case .adminConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.configType = .adminConfig(v)}
      case 2:
        var v: Envoy_Config_Tap_V4alpha_TapConfig?
        if let current = self.configType {
          try decoder.handleConflictingOneOf()
          if case .staticConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.configType = .staticConfig(v)}
      case 3:
        var v: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig?
        if let current = self.configType {
          try decoder.handleConflictingOneOf()
          if case .tapdsConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.configType = .tapdsConfig(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.configType {
    case .adminConfig(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .staticConfig(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .tapdsConfig(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig, rhs: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig) -> Bool {
    if lhs.configType != rhs.configType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.protoMessageName + ".TapDSConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_source"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._configSource)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._configSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig, rhs: Envoy_Extensions_Common_Tap_V4alpha_CommonExtensionConfig.TapDSConfig) -> Bool {
    if lhs._configSource != rhs._configSource {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Common_Tap_V4alpha_AdminConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.configID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configID.isEmpty {
      try visitor.visitSingularStringField(value: self.configID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Common_Tap_V4alpha_AdminConfig, rhs: Envoy_Extensions_Common_Tap_V4alpha_AdminConfig) -> Bool {
    if lhs.configID != rhs.configID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
