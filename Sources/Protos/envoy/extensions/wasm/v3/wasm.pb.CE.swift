// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/wasm/v3/wasm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for a Wasm VM.
/// [#next-free-field: 6]
/// [#not-implemented-hide:] pending implementation.
public struct Envoy_Extensions_Wasm_V3_VmConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An ID which will be used along with a hash of the wasm code (or the name of the registered Null
  /// VM plugin) to determine which VM will be used for the plugin. All plugins which use the same
  /// *vm_id* and code will use the same VM. May be left blank. Sharing a VM between plugins can
  /// reduce memory utilization and make sharing of data easier which may have security implications.
  /// See ref: "TODO: add ref" for details.
  public var vmID: String = String()

  /// The Wasm runtime type (either "v8" or "null" for code compiled into Envoy).
  public var runtime: String = String()

  /// The Wasm code that Envoy will execute.
  public var code: Envoy_Config_Core_V3_AsyncDataSource {
    get {return _code ?? Envoy_Config_Core_V3_AsyncDataSource()}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  public var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  public mutating func clearCode() {self._code = nil}

  /// The Wasm configuration used in initialization of a new VM
  /// (proxy_on_start). `google.protobuf.Struct` is serialized as JSON before
  /// passing it to the plugin. `google.protobuf.BytesValue` and
  /// `google.protobuf.StringValue` are passed directly without the wrapper.
  public var configuration: SwiftProtobuf.Google_Protobuf_Any {
    get {return _configuration ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_configuration = newValue}
  }
  /// Returns true if `configuration` has been explicitly set.
  public var hasConfiguration: Bool {return self._configuration != nil}
  /// Clears the value of `configuration`. Subsequent reads from it will return its default value.
  public mutating func clearConfiguration() {self._configuration = nil}

  /// Allow the wasm file to include pre-compiled code on VMs which support it.
  /// Warning: this should only be enable for trusted sources as the precompiled code is not
  /// verified.
  public var allowPrecompiled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _code: Envoy_Config_Core_V3_AsyncDataSource? = nil
  fileprivate var _configuration: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// Base Configuration for Wasm Plugins e.g. filters and services.
/// [#next-free-field: 6]
/// [#not-implemented-hide:] pending implementation.
public struct Envoy_Extensions_Wasm_V3_PluginConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A unique name for a filters/services in a VM for use in identifying the filter/service if
  /// multiple filters/services are handled by the same *vm_id* and *group_name* and for
  /// logging/debugging.
  public var name: String = String()

  /// A unique ID for a set of filters/services in a VM which will share a RootContext and Contexts
  /// if applicable (e.g. an Wasm HttpFilter and an Wasm AccessLog). If left blank, all
  /// filters/services with a blank group_name with the same *vm_id* will share Context(s).
  public var groupName: String = String()

  /// Configuration for finding or starting VM.
  public var vmConfig: Envoy_Extensions_Wasm_V3_PluginConfig.OneOf_VmConfig? = nil

  /// In the future add referential VM configurations.
  public var inlineVmConfig: Envoy_Extensions_Wasm_V3_VmConfig {
    get {
      if case .inlineVmConfig(let v)? = vmConfig {return v}
      return Envoy_Extensions_Wasm_V3_VmConfig()
    }
    set {vmConfig = .inlineVmConfig(newValue)}
  }

  /// Filter/service configuration used to configure or reconfigure a plugin
  /// (proxy_on_configuration).
  /// `google.protobuf.Struct` is serialized as JSON before
  /// passing it to the plugin. `google.protobuf.BytesValue` and
  /// `google.protobuf.StringValue` are passed directly without the wrapper.
  public var configuration: SwiftProtobuf.Google_Protobuf_Any {
    get {return _configuration ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_configuration = newValue}
  }
  /// Returns true if `configuration` has been explicitly set.
  public var hasConfiguration: Bool {return self._configuration != nil}
  /// Clears the value of `configuration`. Subsequent reads from it will return its default value.
  public mutating func clearConfiguration() {self._configuration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Configuration for finding or starting VM.
  public enum OneOf_VmConfig: Equatable {
    /// In the future add referential VM configurations.
    case inlineVmConfig(Envoy_Extensions_Wasm_V3_VmConfig)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Extensions_Wasm_V3_PluginConfig.OneOf_VmConfig, rhs: Envoy_Extensions_Wasm_V3_PluginConfig.OneOf_VmConfig) -> Bool {
      switch (lhs, rhs) {
      case (.inlineVmConfig(let l), .inlineVmConfig(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _configuration: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// WasmService is configured as a built-in *envoy.wasm_service* :ref:`ServiceConfig
/// <envoy_api_msg_extensions.wasm.v3.WasmService>`. This opaque configuration will be used to
/// create a Wasm Service.
/// [#not-implemented-hide:] pending implementation.
public struct Envoy_Extensions_Wasm_V3_WasmService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// General plugin configuration.
  public var config: Envoy_Extensions_Wasm_V3_PluginConfig {
    get {return _config ?? Envoy_Extensions_Wasm_V3_PluginConfig()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  /// If true, create a single VM rather than creating one VM per worker. Such a singleton can
  /// not be used with filters.
  public var singleton: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _config: Envoy_Extensions_Wasm_V3_PluginConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.wasm.v3"

extension Envoy_Extensions_Wasm_V3_VmConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vm_id"),
    2: .same(proto: "runtime"),
    3: .same(proto: "code"),
    4: .same(proto: "configuration"),
    5: .standard(proto: "allow_precompiled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vmID)
      case 2: try decoder.decodeSingularStringField(value: &self.runtime)
      case 3: try decoder.decodeSingularMessageField(value: &self._code)
      case 4: try decoder.decodeSingularMessageField(value: &self._configuration)
      case 5: try decoder.decodeSingularBoolField(value: &self.allowPrecompiled)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vmID.isEmpty {
      try visitor.visitSingularStringField(value: self.vmID, fieldNumber: 1)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 2)
    }
    if let v = self._code {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._configuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.allowPrecompiled != false {
      try visitor.visitSingularBoolField(value: self.allowPrecompiled, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Wasm_V3_VmConfig, rhs: Envoy_Extensions_Wasm_V3_VmConfig) -> Bool {
    if lhs.vmID != rhs.vmID {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs._code != rhs._code {return false}
    if lhs._configuration != rhs._configuration {return false}
    if lhs.allowPrecompiled != rhs.allowPrecompiled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Wasm_V3_PluginConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PluginConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "inline_vm_config"),
    5: .same(proto: "configuration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.groupName)
      case 3:
        var v: Envoy_Extensions_Wasm_V3_VmConfig?
        if let current = self.vmConfig {
          try decoder.handleConflictingOneOf()
          if case .inlineVmConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.vmConfig = .inlineVmConfig(v)}
      case 5: try decoder.decodeSingularMessageField(value: &self._configuration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if case .inlineVmConfig(let v)? = self.vmConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._configuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Wasm_V3_PluginConfig, rhs: Envoy_Extensions_Wasm_V3_PluginConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.vmConfig != rhs.vmConfig {return false}
    if lhs._configuration != rhs._configuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_Wasm_V3_WasmService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WasmService"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "singleton"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._config)
      case 2: try decoder.decodeSingularBoolField(value: &self.singleton)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.singleton != false {
      try visitor.visitSingularBoolField(value: self.singleton, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Wasm_V3_WasmService, rhs: Envoy_Extensions_Wasm_V3_WasmService) -> Bool {
    if lhs._config != rhs._config {return false}
    if lhs.singleton != rhs.singleton {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
