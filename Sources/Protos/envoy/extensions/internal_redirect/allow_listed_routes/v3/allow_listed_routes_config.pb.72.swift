// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/internal_redirect/allow_listed_routes/v3/allow_listed_routes_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An internal redirect predicate that accepts only explicitly allowed target routes.
/// [#extension: envoy.internal_redirect_predicates.allow_listed_routes]
public struct Envoy_Extensions_InternalRedirect_AllowListedRoutes_V3_AllowListedRoutesConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of routes that's allowed as redirect target by this predicate,
  /// identified by the route's :ref:`name <envoy_api_field_config.route.v3.Route.route>`.
  /// Empty route names are not allowed.
  public var allowedRouteNames: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.internal_redirect.allow_listed_routes.v3"

extension Envoy_Extensions_InternalRedirect_AllowListedRoutes_V3_AllowListedRoutesConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllowListedRoutesConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allowed_route_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.allowedRouteNames) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.allowedRouteNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedRouteNames, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_InternalRedirect_AllowListedRoutes_V3_AllowListedRoutesConfig, rhs: Envoy_Extensions_InternalRedirect_AllowListedRoutes_V3_AllowListedRoutesConfig) -> Bool {
    if lhs.allowedRouteNames != rhs.allowedRouteNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
