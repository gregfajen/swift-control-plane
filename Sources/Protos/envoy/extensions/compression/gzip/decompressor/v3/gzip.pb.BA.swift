// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/compression/gzip/decompressor/v3/gzip.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Extensions_Compression_Gzip_Decompressor_V3_Gzip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
  /// The decompression window size needs to be equal or larger than the compression window size.
  /// The default is 12 to match the default in the
  /// :ref:`gzip compressor <envoy_api_field_extensions.compression.gzip.compressor.v3.Gzip.window_bits>`.
  /// For more details about this parameter, please refer to `zlib manual <https://www.zlib.net/manual.html>`_ > inflateInit2.
  public var windowBits: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _windowBits ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_windowBits = newValue}
  }
  /// Returns true if `windowBits` has been explicitly set.
  public var hasWindowBits: Bool {return self._windowBits != nil}
  /// Clears the value of `windowBits`. Subsequent reads from it will return its default value.
  public mutating func clearWindowBits() {self._windowBits = nil}

  /// Value for zlib's decompressor output buffer. If not set, defaults to 4096.
  /// See https://www.zlib.net/manual.html for more details.
  public var chunkSize: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _chunkSize ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_chunkSize = newValue}
  }
  /// Returns true if `chunkSize` has been explicitly set.
  public var hasChunkSize: Bool {return self._chunkSize != nil}
  /// Clears the value of `chunkSize`. Subsequent reads from it will return its default value.
  public mutating func clearChunkSize() {self._chunkSize = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _windowBits: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _chunkSize: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.compression.gzip.decompressor.v3"

extension Envoy_Extensions_Compression_Gzip_Decompressor_V3_Gzip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Gzip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "window_bits"),
    2: .standard(proto: "chunk_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._windowBits) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._chunkSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._windowBits {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._chunkSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Compression_Gzip_Decompressor_V3_Gzip, rhs: Envoy_Extensions_Compression_Gzip_Decompressor_V3_Gzip) -> Bool {
    if lhs._windowBits != rhs._windowBits {return false}
    if lhs._chunkSize != rhs._chunkSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
