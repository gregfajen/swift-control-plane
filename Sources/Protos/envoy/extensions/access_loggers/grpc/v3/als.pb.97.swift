// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/access_loggers/grpc/v3/als.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for the built-in *envoy.access_loggers.http_grpc*
/// :ref:`AccessLog <envoy_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
/// populate :ref:`StreamAccessLogsMessage.http_logs
/// <envoy_api_field_service.accesslog.v3.StreamAccessLogsMessage.http_logs>`.
/// [#extension: envoy.access_loggers.http_grpc]
public struct Envoy_Extensions_AccessLoggers_Grpc_V3_HttpGrpcAccessLogConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commonConfig: Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig {
    get {return _commonConfig ?? Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig()}
    set {_commonConfig = newValue}
  }
  /// Returns true if `commonConfig` has been explicitly set.
  public var hasCommonConfig: Bool {return self._commonConfig != nil}
  /// Clears the value of `commonConfig`. Subsequent reads from it will return its default value.
  public mutating func clearCommonConfig() {self._commonConfig = nil}

  /// Additional request headers to log in :ref:`HTTPRequestProperties.request_headers
  /// <envoy_api_field_data.accesslog.v3.HTTPRequestProperties.request_headers>`.
  public var additionalRequestHeadersToLog: [String] = []

  /// Additional response headers to log in :ref:`HTTPResponseProperties.response_headers
  /// <envoy_api_field_data.accesslog.v3.HTTPResponseProperties.response_headers>`.
  public var additionalResponseHeadersToLog: [String] = []

  /// Additional response trailers to log in :ref:`HTTPResponseProperties.response_trailers
  /// <envoy_api_field_data.accesslog.v3.HTTPResponseProperties.response_trailers>`.
  public var additionalResponseTrailersToLog: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonConfig: Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig? = nil
}

/// Configuration for the built-in *envoy.access_loggers.tcp_grpc* type. This configuration will
/// populate *StreamAccessLogsMessage.tcp_logs*.
/// [#extension: envoy.access_loggers.tcp_grpc]
public struct Envoy_Extensions_AccessLoggers_Grpc_V3_TcpGrpcAccessLogConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commonConfig: Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig {
    get {return _commonConfig ?? Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig()}
    set {_commonConfig = newValue}
  }
  /// Returns true if `commonConfig` has been explicitly set.
  public var hasCommonConfig: Bool {return self._commonConfig != nil}
  /// Clears the value of `commonConfig`. Subsequent reads from it will return its default value.
  public mutating func clearCommonConfig() {self._commonConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonConfig: Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig? = nil
}

/// Common configuration for gRPC access logs.
/// [#next-free-field: 6]
public struct Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The friendly name of the access log to be returned in :ref:`StreamAccessLogsMessage.Identifier
  /// <envoy_api_msg_service.accesslog.v3.StreamAccessLogsMessage.Identifier>`. This allows the
  /// access log server to differentiate between different access logs coming from the same Envoy.
  public var logName: String = String()

  /// The gRPC service for the access log service.
  public var grpcService: Envoy_Config_Core_V3_GrpcService {
    get {return _grpcService ?? Envoy_Config_Core_V3_GrpcService()}
    set {_grpcService = newValue}
  }
  /// Returns true if `grpcService` has been explicitly set.
  public var hasGrpcService: Bool {return self._grpcService != nil}
  /// Clears the value of `grpcService`. Subsequent reads from it will return its default value.
  public mutating func clearGrpcService() {self._grpcService = nil}

  /// Interval for flushing access logs to the gRPC stream. Logger will flush requests every time
  /// this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
  /// 1 second.
  public var bufferFlushInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _bufferFlushInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_bufferFlushInterval = newValue}
  }
  /// Returns true if `bufferFlushInterval` has been explicitly set.
  public var hasBufferFlushInterval: Bool {return self._bufferFlushInterval != nil}
  /// Clears the value of `bufferFlushInterval`. Subsequent reads from it will return its default value.
  public mutating func clearBufferFlushInterval() {self._bufferFlushInterval = nil}

  /// Soft size limit in bytes for access log entries buffer. Logger will buffer requests until
  /// this limit it hit, or every time flush interval is elapsed, whichever comes first. Setting it
  /// to zero effectively disables the batching. Defaults to 16384.
  public var bufferSizeBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _bufferSizeBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_bufferSizeBytes = newValue}
  }
  /// Returns true if `bufferSizeBytes` has been explicitly set.
  public var hasBufferSizeBytes: Bool {return self._bufferSizeBytes != nil}
  /// Clears the value of `bufferSizeBytes`. Subsequent reads from it will return its default value.
  public mutating func clearBufferSizeBytes() {self._bufferSizeBytes = nil}

  /// Additional filter state objects to log in :ref:`filter_state_objects
  /// <envoy_api_field_data.accesslog.v3.AccessLogCommon.filter_state_objects>`.
  /// Logger will call `FilterState::Object::serializeAsProto` to serialize the filter state object.
  public var filterStateObjectsToLog: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _grpcService: Envoy_Config_Core_V3_GrpcService? = nil
  fileprivate var _bufferFlushInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _bufferSizeBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.access_loggers.grpc.v3"

extension Envoy_Extensions_AccessLoggers_Grpc_V3_HttpGrpcAccessLogConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HttpGrpcAccessLogConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_config"),
    2: .standard(proto: "additional_request_headers_to_log"),
    3: .standard(proto: "additional_response_headers_to_log"),
    4: .standard(proto: "additional_response_trailers_to_log"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._commonConfig)
      case 2: try decoder.decodeRepeatedStringField(value: &self.additionalRequestHeadersToLog)
      case 3: try decoder.decodeRepeatedStringField(value: &self.additionalResponseHeadersToLog)
      case 4: try decoder.decodeRepeatedStringField(value: &self.additionalResponseTrailersToLog)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.additionalRequestHeadersToLog.isEmpty {
      try visitor.visitRepeatedStringField(value: self.additionalRequestHeadersToLog, fieldNumber: 2)
    }
    if !self.additionalResponseHeadersToLog.isEmpty {
      try visitor.visitRepeatedStringField(value: self.additionalResponseHeadersToLog, fieldNumber: 3)
    }
    if !self.additionalResponseTrailersToLog.isEmpty {
      try visitor.visitRepeatedStringField(value: self.additionalResponseTrailersToLog, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_AccessLoggers_Grpc_V3_HttpGrpcAccessLogConfig, rhs: Envoy_Extensions_AccessLoggers_Grpc_V3_HttpGrpcAccessLogConfig) -> Bool {
    if lhs._commonConfig != rhs._commonConfig {return false}
    if lhs.additionalRequestHeadersToLog != rhs.additionalRequestHeadersToLog {return false}
    if lhs.additionalResponseHeadersToLog != rhs.additionalResponseHeadersToLog {return false}
    if lhs.additionalResponseTrailersToLog != rhs.additionalResponseTrailersToLog {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_AccessLoggers_Grpc_V3_TcpGrpcAccessLogConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TcpGrpcAccessLogConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._commonConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_AccessLoggers_Grpc_V3_TcpGrpcAccessLogConfig, rhs: Envoy_Extensions_AccessLoggers_Grpc_V3_TcpGrpcAccessLogConfig) -> Bool {
    if lhs._commonConfig != rhs._commonConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonGrpcAccessLogConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "log_name"),
    2: .standard(proto: "grpc_service"),
    3: .standard(proto: "buffer_flush_interval"),
    4: .standard(proto: "buffer_size_bytes"),
    5: .standard(proto: "filter_state_objects_to_log"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.logName)
      case 2: try decoder.decodeSingularMessageField(value: &self._grpcService)
      case 3: try decoder.decodeSingularMessageField(value: &self._bufferFlushInterval)
      case 4: try decoder.decodeSingularMessageField(value: &self._bufferSizeBytes)
      case 5: try decoder.decodeRepeatedStringField(value: &self.filterStateObjectsToLog)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.logName.isEmpty {
      try visitor.visitSingularStringField(value: self.logName, fieldNumber: 1)
    }
    if let v = self._grpcService {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._bufferFlushInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._bufferSizeBytes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.filterStateObjectsToLog.isEmpty {
      try visitor.visitRepeatedStringField(value: self.filterStateObjectsToLog, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig, rhs: Envoy_Extensions_AccessLoggers_Grpc_V3_CommonGrpcAccessLogConfig) -> Bool {
    if lhs.logName != rhs.logName {return false}
    if lhs._grpcService != rhs._grpcService {return false}
    if lhs._bufferFlushInterval != rhs._bufferFlushInterval {return false}
    if lhs._bufferSizeBytes != rhs._bufferSizeBytes {return false}
    if lhs.filterStateObjectsToLog != rhs.filterStateObjectsToLog {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
