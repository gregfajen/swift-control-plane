// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/extensions/clusters/redis/v3/redis_cluster.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 7]
public struct Envoy_Extensions_Clusters_Redis_V3_RedisClusterConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Interval between successive topology refresh requests. If not set, this defaults to 5s.
  public var clusterRefreshRate: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _clusterRefreshRate ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_clusterRefreshRate = newValue}
  }
  /// Returns true if `clusterRefreshRate` has been explicitly set.
  public var hasClusterRefreshRate: Bool {return self._clusterRefreshRate != nil}
  /// Clears the value of `clusterRefreshRate`. Subsequent reads from it will return its default value.
  public mutating func clearClusterRefreshRate() {self._clusterRefreshRate = nil}

  /// Timeout for topology refresh request. If not set, this defaults to 3s.
  public var clusterRefreshTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _clusterRefreshTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_clusterRefreshTimeout = newValue}
  }
  /// Returns true if `clusterRefreshTimeout` has been explicitly set.
  public var hasClusterRefreshTimeout: Bool {return self._clusterRefreshTimeout != nil}
  /// Clears the value of `clusterRefreshTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearClusterRefreshTimeout() {self._clusterRefreshTimeout = nil}

  /// The minimum interval that must pass after triggering a topology refresh request before a new
  /// request can possibly be triggered again. Any errors received during one of these
  /// time intervals are ignored. If not set, this defaults to 5s.
  public var redirectRefreshInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _redirectRefreshInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_redirectRefreshInterval = newValue}
  }
  /// Returns true if `redirectRefreshInterval` has been explicitly set.
  public var hasRedirectRefreshInterval: Bool {return self._redirectRefreshInterval != nil}
  /// Clears the value of `redirectRefreshInterval`. Subsequent reads from it will return its default value.
  public mutating func clearRedirectRefreshInterval() {self._redirectRefreshInterval = nil}

  /// The number of redirection errors that must be received before
  /// triggering a topology refresh request. If not set, this defaults to 5.
  /// If this is set to 0, topology refresh after redirect is disabled.
  public var redirectRefreshThreshold: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _redirectRefreshThreshold ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_redirectRefreshThreshold = newValue}
  }
  /// Returns true if `redirectRefreshThreshold` has been explicitly set.
  public var hasRedirectRefreshThreshold: Bool {return self._redirectRefreshThreshold != nil}
  /// Clears the value of `redirectRefreshThreshold`. Subsequent reads from it will return its default value.
  public mutating func clearRedirectRefreshThreshold() {self._redirectRefreshThreshold = nil}

  /// The number of failures that must be received before triggering a topology refresh request.
  /// If not set, this defaults to 0, which disables the topology refresh due to failure.
  public var failureRefreshThreshold: UInt32 = 0

  /// The number of hosts became degraded or unhealthy before triggering a topology refresh request.
  /// If not set, this defaults to 0, which disables the topology refresh due to degraded or
  /// unhealthy host.
  public var hostDegradedRefreshThreshold: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _clusterRefreshRate: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _clusterRefreshTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _redirectRefreshInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _redirectRefreshThreshold: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.extensions.clusters.redis.v3"

extension Envoy_Extensions_Clusters_Redis_V3_RedisClusterConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RedisClusterConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_refresh_rate"),
    2: .standard(proto: "cluster_refresh_timeout"),
    3: .standard(proto: "redirect_refresh_interval"),
    4: .standard(proto: "redirect_refresh_threshold"),
    5: .standard(proto: "failure_refresh_threshold"),
    6: .standard(proto: "host_degraded_refresh_threshold"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._clusterRefreshRate)
      case 2: try decoder.decodeSingularMessageField(value: &self._clusterRefreshTimeout)
      case 3: try decoder.decodeSingularMessageField(value: &self._redirectRefreshInterval)
      case 4: try decoder.decodeSingularMessageField(value: &self._redirectRefreshThreshold)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.failureRefreshThreshold)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.hostDegradedRefreshThreshold)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._clusterRefreshRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._clusterRefreshTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._redirectRefreshInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._redirectRefreshThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.failureRefreshThreshold != 0 {
      try visitor.visitSingularUInt32Field(value: self.failureRefreshThreshold, fieldNumber: 5)
    }
    if self.hostDegradedRefreshThreshold != 0 {
      try visitor.visitSingularUInt32Field(value: self.hostDegradedRefreshThreshold, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Extensions_Clusters_Redis_V3_RedisClusterConfig, rhs: Envoy_Extensions_Clusters_Redis_V3_RedisClusterConfig) -> Bool {
    if lhs._clusterRefreshRate != rhs._clusterRefreshRate {return false}
    if lhs._clusterRefreshTimeout != rhs._clusterRefreshTimeout {return false}
    if lhs._redirectRefreshInterval != rhs._redirectRefreshInterval {return false}
    if lhs._redirectRefreshThreshold != rhs._redirectRefreshThreshold {return false}
    if lhs.failureRefreshThreshold != rhs.failureRefreshThreshold {return false}
    if lhs.hostDegradedRefreshThreshold != rhs.hostDegradedRefreshThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
