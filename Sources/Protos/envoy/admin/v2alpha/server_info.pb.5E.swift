// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/admin/v2alpha/server_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Proto representation of the value returned by /server_info, containing
/// server version/server status information.
/// [#next-free-field: 7]
public struct Envoy_Admin_V2alpha_ServerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Server version.
  public var version: String = String()

  /// State of the server.
  public var state: Envoy_Admin_V2alpha_ServerInfo.State = .live

  /// Uptime since current epoch was started.
  public var uptimeCurrentEpoch: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _uptimeCurrentEpoch ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uptimeCurrentEpoch = newValue}
  }
  /// Returns true if `uptimeCurrentEpoch` has been explicitly set.
  public var hasUptimeCurrentEpoch: Bool {return self._uptimeCurrentEpoch != nil}
  /// Clears the value of `uptimeCurrentEpoch`. Subsequent reads from it will return its default value.
  public mutating func clearUptimeCurrentEpoch() {self._uptimeCurrentEpoch = nil}

  /// Uptime since the start of the first epoch.
  public var uptimeAllEpochs: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _uptimeAllEpochs ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uptimeAllEpochs = newValue}
  }
  /// Returns true if `uptimeAllEpochs` has been explicitly set.
  public var hasUptimeAllEpochs: Bool {return self._uptimeAllEpochs != nil}
  /// Clears the value of `uptimeAllEpochs`. Subsequent reads from it will return its default value.
  public mutating func clearUptimeAllEpochs() {self._uptimeAllEpochs = nil}

  /// Hot restart version.
  public var hotRestartVersion: String = String()

  /// Command line options the server is currently running with.
  public var commandLineOptions: Envoy_Admin_V2alpha_CommandLineOptions {
    get {return _commandLineOptions ?? Envoy_Admin_V2alpha_CommandLineOptions()}
    set {_commandLineOptions = newValue}
  }
  /// Returns true if `commandLineOptions` has been explicitly set.
  public var hasCommandLineOptions: Bool {return self._commandLineOptions != nil}
  /// Clears the value of `commandLineOptions`. Subsequent reads from it will return its default value.
  public mutating func clearCommandLineOptions() {self._commandLineOptions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Server is live and serving traffic.
    case live // = 0

    /// Server is draining listeners in response to external health checks failing.
    case draining // = 1

    /// Server has not yet completed cluster manager initialization.
    case preInitializing // = 2

    /// Server is running the cluster manager initialization callbacks (e.g., RDS).
    case initializing // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .live
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .live
      case 1: self = .draining
      case 2: self = .preInitializing
      case 3: self = .initializing
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .live: return 0
      case .draining: return 1
      case .preInitializing: return 2
      case .initializing: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _uptimeCurrentEpoch: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _uptimeAllEpochs: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _commandLineOptions: Envoy_Admin_V2alpha_CommandLineOptions? = nil
}

#if swift(>=4.2)

extension Envoy_Admin_V2alpha_ServerInfo.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Admin_V2alpha_ServerInfo.State] = [
    .live,
    .draining,
    .preInitializing,
    .initializing,
  ]
}

#endif  // swift(>=4.2)

/// [#next-free-field: 29]
public struct Envoy_Admin_V2alpha_CommandLineOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// See :option:`--base-id` for details.
  public var baseID: UInt64 {
    get {return _storage._baseID}
    set {_uniqueStorage()._baseID = newValue}
  }

  /// See :option:`--concurrency` for details.
  public var concurrency: UInt32 {
    get {return _storage._concurrency}
    set {_uniqueStorage()._concurrency = newValue}
  }

  /// See :option:`--config-path` for details.
  public var configPath: String {
    get {return _storage._configPath}
    set {_uniqueStorage()._configPath = newValue}
  }

  /// See :option:`--config-yaml` for details.
  public var configYaml: String {
    get {return _storage._configYaml}
    set {_uniqueStorage()._configYaml = newValue}
  }

  /// See :option:`--allow-unknown-static-fields` for details.
  public var allowUnknownStaticFields: Bool {
    get {return _storage._allowUnknownStaticFields}
    set {_uniqueStorage()._allowUnknownStaticFields = newValue}
  }

  /// See :option:`--reject-unknown-dynamic-fields` for details.
  public var rejectUnknownDynamicFields: Bool {
    get {return _storage._rejectUnknownDynamicFields}
    set {_uniqueStorage()._rejectUnknownDynamicFields = newValue}
  }

  /// See :option:`--admin-address-path` for details.
  public var adminAddressPath: String {
    get {return _storage._adminAddressPath}
    set {_uniqueStorage()._adminAddressPath = newValue}
  }

  /// See :option:`--local-address-ip-version` for details.
  public var localAddressIpVersion: Envoy_Admin_V2alpha_CommandLineOptions.IpVersion {
    get {return _storage._localAddressIpVersion}
    set {_uniqueStorage()._localAddressIpVersion = newValue}
  }

  /// See :option:`--log-level` for details.
  public var logLevel: String {
    get {return _storage._logLevel}
    set {_uniqueStorage()._logLevel = newValue}
  }

  /// See :option:`--component-log-level` for details.
  public var componentLogLevel: String {
    get {return _storage._componentLogLevel}
    set {_uniqueStorage()._componentLogLevel = newValue}
  }

  /// See :option:`--log-format` for details.
  public var logFormat: String {
    get {return _storage._logFormat}
    set {_uniqueStorage()._logFormat = newValue}
  }

  /// See :option:`--log-format-escaped` for details.
  public var logFormatEscaped: Bool {
    get {return _storage._logFormatEscaped}
    set {_uniqueStorage()._logFormatEscaped = newValue}
  }

  /// See :option:`--log-path` for details.
  public var logPath: String {
    get {return _storage._logPath}
    set {_uniqueStorage()._logPath = newValue}
  }

  /// See :option:`--service-cluster` for details.
  public var serviceCluster: String {
    get {return _storage._serviceCluster}
    set {_uniqueStorage()._serviceCluster = newValue}
  }

  /// See :option:`--service-node` for details.
  public var serviceNode: String {
    get {return _storage._serviceNode}
    set {_uniqueStorage()._serviceNode = newValue}
  }

  /// See :option:`--service-zone` for details.
  public var serviceZone: String {
    get {return _storage._serviceZone}
    set {_uniqueStorage()._serviceZone = newValue}
  }

  /// See :option:`--file-flush-interval-msec` for details.
  public var fileFlushInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._fileFlushInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._fileFlushInterval = newValue}
  }
  /// Returns true if `fileFlushInterval` has been explicitly set.
  public var hasFileFlushInterval: Bool {return _storage._fileFlushInterval != nil}
  /// Clears the value of `fileFlushInterval`. Subsequent reads from it will return its default value.
  public mutating func clearFileFlushInterval() {_uniqueStorage()._fileFlushInterval = nil}

  /// See :option:`--drain-time-s` for details.
  public var drainTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._drainTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._drainTime = newValue}
  }
  /// Returns true if `drainTime` has been explicitly set.
  public var hasDrainTime: Bool {return _storage._drainTime != nil}
  /// Clears the value of `drainTime`. Subsequent reads from it will return its default value.
  public mutating func clearDrainTime() {_uniqueStorage()._drainTime = nil}

  /// See :option:`--parent-shutdown-time-s` for details.
  public var parentShutdownTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._parentShutdownTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._parentShutdownTime = newValue}
  }
  /// Returns true if `parentShutdownTime` has been explicitly set.
  public var hasParentShutdownTime: Bool {return _storage._parentShutdownTime != nil}
  /// Clears the value of `parentShutdownTime`. Subsequent reads from it will return its default value.
  public mutating func clearParentShutdownTime() {_uniqueStorage()._parentShutdownTime = nil}

  /// See :option:`--mode` for details.
  public var mode: Envoy_Admin_V2alpha_CommandLineOptions.Mode {
    get {return _storage._mode}
    set {_uniqueStorage()._mode = newValue}
  }

  /// max_stats and max_obj_name_len are now unused and have no effect.
  public var maxStats: UInt64 {
    get {return _storage._maxStats}
    set {_uniqueStorage()._maxStats = newValue}
  }

  public var maxObjNameLen: UInt64 {
    get {return _storage._maxObjNameLen}
    set {_uniqueStorage()._maxObjNameLen = newValue}
  }

  /// See :option:`--disable-hot-restart` for details.
  public var disableHotRestart: Bool {
    get {return _storage._disableHotRestart}
    set {_uniqueStorage()._disableHotRestart = newValue}
  }

  /// See :option:`--enable-mutex-tracing` for details.
  public var enableMutexTracing: Bool {
    get {return _storage._enableMutexTracing}
    set {_uniqueStorage()._enableMutexTracing = newValue}
  }

  /// See :option:`--restart-epoch` for details.
  public var restartEpoch: UInt32 {
    get {return _storage._restartEpoch}
    set {_uniqueStorage()._restartEpoch = newValue}
  }

  /// See :option:`--cpuset-threads` for details.
  public var cpusetThreads: Bool {
    get {return _storage._cpusetThreads}
    set {_uniqueStorage()._cpusetThreads = newValue}
  }

  /// See :option:`--disable-extensions` for details.
  public var disabledExtensions: [String] {
    get {return _storage._disabledExtensions}
    set {_uniqueStorage()._disabledExtensions = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IpVersion: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case v4 // = 0
    case v6 // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .v4
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .v4
      case 1: self = .v6
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .v4: return 0
      case .v6: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Mode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Validate configs and then serve traffic normally.
    case serve // = 0

    /// Validate configs and exit.
    case validate // = 1

    /// Completely load and initialize the config, and then exit without running the listener loop.
    case initOnly // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .serve
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .serve
      case 1: self = .validate
      case 2: self = .initOnly
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .serve: return 0
      case .validate: return 1
      case .initOnly: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Envoy_Admin_V2alpha_CommandLineOptions.IpVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Admin_V2alpha_CommandLineOptions.IpVersion] = [
    .v4,
    .v6,
  ]
}

extension Envoy_Admin_V2alpha_CommandLineOptions.Mode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Admin_V2alpha_CommandLineOptions.Mode] = [
    .serve,
    .validate,
    .initOnly,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.admin.v2alpha"

extension Envoy_Admin_V2alpha_ServerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "state"),
    3: .standard(proto: "uptime_current_epoch"),
    4: .standard(proto: "uptime_all_epochs"),
    5: .standard(proto: "hot_restart_version"),
    6: .standard(proto: "command_line_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._uptimeCurrentEpoch) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._uptimeAllEpochs) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.hotRestartVersion) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._commandLineOptions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if self.state != .live {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if let v = self._uptimeCurrentEpoch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._uptimeAllEpochs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.hotRestartVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hotRestartVersion, fieldNumber: 5)
    }
    if let v = self._commandLineOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V2alpha_ServerInfo, rhs: Envoy_Admin_V2alpha_ServerInfo) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.state != rhs.state {return false}
    if lhs._uptimeCurrentEpoch != rhs._uptimeCurrentEpoch {return false}
    if lhs._uptimeAllEpochs != rhs._uptimeAllEpochs {return false}
    if lhs.hotRestartVersion != rhs.hotRestartVersion {return false}
    if lhs._commandLineOptions != rhs._commandLineOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V2alpha_ServerInfo.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIVE"),
    1: .same(proto: "DRAINING"),
    2: .same(proto: "PRE_INITIALIZING"),
    3: .same(proto: "INITIALIZING"),
  ]
}

extension Envoy_Admin_V2alpha_CommandLineOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommandLineOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_id"),
    2: .same(proto: "concurrency"),
    3: .standard(proto: "config_path"),
    4: .standard(proto: "config_yaml"),
    5: .standard(proto: "allow_unknown_static_fields"),
    26: .standard(proto: "reject_unknown_dynamic_fields"),
    6: .standard(proto: "admin_address_path"),
    7: .standard(proto: "local_address_ip_version"),
    8: .standard(proto: "log_level"),
    9: .standard(proto: "component_log_level"),
    10: .standard(proto: "log_format"),
    27: .standard(proto: "log_format_escaped"),
    11: .standard(proto: "log_path"),
    13: .standard(proto: "service_cluster"),
    14: .standard(proto: "service_node"),
    15: .standard(proto: "service_zone"),
    16: .standard(proto: "file_flush_interval"),
    17: .standard(proto: "drain_time"),
    18: .standard(proto: "parent_shutdown_time"),
    19: .same(proto: "mode"),
    20: .standard(proto: "max_stats"),
    21: .standard(proto: "max_obj_name_len"),
    22: .standard(proto: "disable_hot_restart"),
    23: .standard(proto: "enable_mutex_tracing"),
    24: .standard(proto: "restart_epoch"),
    25: .standard(proto: "cpuset_threads"),
    28: .standard(proto: "disabled_extensions"),
  ]

  fileprivate class _StorageClass {
    var _baseID: UInt64 = 0
    var _concurrency: UInt32 = 0
    var _configPath: String = String()
    var _configYaml: String = String()
    var _allowUnknownStaticFields: Bool = false
    var _rejectUnknownDynamicFields: Bool = false
    var _adminAddressPath: String = String()
    var _localAddressIpVersion: Envoy_Admin_V2alpha_CommandLineOptions.IpVersion = .v4
    var _logLevel: String = String()
    var _componentLogLevel: String = String()
    var _logFormat: String = String()
    var _logFormatEscaped: Bool = false
    var _logPath: String = String()
    var _serviceCluster: String = String()
    var _serviceNode: String = String()
    var _serviceZone: String = String()
    var _fileFlushInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _drainTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _parentShutdownTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _mode: Envoy_Admin_V2alpha_CommandLineOptions.Mode = .serve
    var _maxStats: UInt64 = 0
    var _maxObjNameLen: UInt64 = 0
    var _disableHotRestart: Bool = false
    var _enableMutexTracing: Bool = false
    var _restartEpoch: UInt32 = 0
    var _cpusetThreads: Bool = false
    var _disabledExtensions: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseID = source._baseID
      _concurrency = source._concurrency
      _configPath = source._configPath
      _configYaml = source._configYaml
      _allowUnknownStaticFields = source._allowUnknownStaticFields
      _rejectUnknownDynamicFields = source._rejectUnknownDynamicFields
      _adminAddressPath = source._adminAddressPath
      _localAddressIpVersion = source._localAddressIpVersion
      _logLevel = source._logLevel
      _componentLogLevel = source._componentLogLevel
      _logFormat = source._logFormat
      _logFormatEscaped = source._logFormatEscaped
      _logPath = source._logPath
      _serviceCluster = source._serviceCluster
      _serviceNode = source._serviceNode
      _serviceZone = source._serviceZone
      _fileFlushInterval = source._fileFlushInterval
      _drainTime = source._drainTime
      _parentShutdownTime = source._parentShutdownTime
      _mode = source._mode
      _maxStats = source._maxStats
      _maxObjNameLen = source._maxObjNameLen
      _disableHotRestart = source._disableHotRestart
      _enableMutexTracing = source._enableMutexTracing
      _restartEpoch = source._restartEpoch
      _cpusetThreads = source._cpusetThreads
      _disabledExtensions = source._disabledExtensions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._baseID) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._concurrency) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._configPath) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._configYaml) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._allowUnknownStaticFields) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._adminAddressPath) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._localAddressIpVersion) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._logLevel) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._componentLogLevel) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._logFormat) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._logPath) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._serviceCluster) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._serviceNode) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._serviceZone) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._fileFlushInterval) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._drainTime) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._parentShutdownTime) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._mode) }()
        case 20: try { try decoder.decodeSingularUInt64Field(value: &_storage._maxStats) }()
        case 21: try { try decoder.decodeSingularUInt64Field(value: &_storage._maxObjNameLen) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._disableHotRestart) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._enableMutexTracing) }()
        case 24: try { try decoder.decodeSingularUInt32Field(value: &_storage._restartEpoch) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._cpusetThreads) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._rejectUnknownDynamicFields) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._logFormatEscaped) }()
        case 28: try { try decoder.decodeRepeatedStringField(value: &_storage._disabledExtensions) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._baseID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._baseID, fieldNumber: 1)
      }
      if _storage._concurrency != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._concurrency, fieldNumber: 2)
      }
      if !_storage._configPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._configPath, fieldNumber: 3)
      }
      if !_storage._configYaml.isEmpty {
        try visitor.visitSingularStringField(value: _storage._configYaml, fieldNumber: 4)
      }
      if _storage._allowUnknownStaticFields != false {
        try visitor.visitSingularBoolField(value: _storage._allowUnknownStaticFields, fieldNumber: 5)
      }
      if !_storage._adminAddressPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._adminAddressPath, fieldNumber: 6)
      }
      if _storage._localAddressIpVersion != .v4 {
        try visitor.visitSingularEnumField(value: _storage._localAddressIpVersion, fieldNumber: 7)
      }
      if !_storage._logLevel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logLevel, fieldNumber: 8)
      }
      if !_storage._componentLogLevel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._componentLogLevel, fieldNumber: 9)
      }
      if !_storage._logFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logFormat, fieldNumber: 10)
      }
      if !_storage._logPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logPath, fieldNumber: 11)
      }
      if !_storage._serviceCluster.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceCluster, fieldNumber: 13)
      }
      if !_storage._serviceNode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceNode, fieldNumber: 14)
      }
      if !_storage._serviceZone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceZone, fieldNumber: 15)
      }
      if let v = _storage._fileFlushInterval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._drainTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._parentShutdownTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if _storage._mode != .serve {
        try visitor.visitSingularEnumField(value: _storage._mode, fieldNumber: 19)
      }
      if _storage._maxStats != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._maxStats, fieldNumber: 20)
      }
      if _storage._maxObjNameLen != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._maxObjNameLen, fieldNumber: 21)
      }
      if _storage._disableHotRestart != false {
        try visitor.visitSingularBoolField(value: _storage._disableHotRestart, fieldNumber: 22)
      }
      if _storage._enableMutexTracing != false {
        try visitor.visitSingularBoolField(value: _storage._enableMutexTracing, fieldNumber: 23)
      }
      if _storage._restartEpoch != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._restartEpoch, fieldNumber: 24)
      }
      if _storage._cpusetThreads != false {
        try visitor.visitSingularBoolField(value: _storage._cpusetThreads, fieldNumber: 25)
      }
      if _storage._rejectUnknownDynamicFields != false {
        try visitor.visitSingularBoolField(value: _storage._rejectUnknownDynamicFields, fieldNumber: 26)
      }
      if _storage._logFormatEscaped != false {
        try visitor.visitSingularBoolField(value: _storage._logFormatEscaped, fieldNumber: 27)
      }
      if !_storage._disabledExtensions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._disabledExtensions, fieldNumber: 28)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V2alpha_CommandLineOptions, rhs: Envoy_Admin_V2alpha_CommandLineOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseID != rhs_storage._baseID {return false}
        if _storage._concurrency != rhs_storage._concurrency {return false}
        if _storage._configPath != rhs_storage._configPath {return false}
        if _storage._configYaml != rhs_storage._configYaml {return false}
        if _storage._allowUnknownStaticFields != rhs_storage._allowUnknownStaticFields {return false}
        if _storage._rejectUnknownDynamicFields != rhs_storage._rejectUnknownDynamicFields {return false}
        if _storage._adminAddressPath != rhs_storage._adminAddressPath {return false}
        if _storage._localAddressIpVersion != rhs_storage._localAddressIpVersion {return false}
        if _storage._logLevel != rhs_storage._logLevel {return false}
        if _storage._componentLogLevel != rhs_storage._componentLogLevel {return false}
        if _storage._logFormat != rhs_storage._logFormat {return false}
        if _storage._logFormatEscaped != rhs_storage._logFormatEscaped {return false}
        if _storage._logPath != rhs_storage._logPath {return false}
        if _storage._serviceCluster != rhs_storage._serviceCluster {return false}
        if _storage._serviceNode != rhs_storage._serviceNode {return false}
        if _storage._serviceZone != rhs_storage._serviceZone {return false}
        if _storage._fileFlushInterval != rhs_storage._fileFlushInterval {return false}
        if _storage._drainTime != rhs_storage._drainTime {return false}
        if _storage._parentShutdownTime != rhs_storage._parentShutdownTime {return false}
        if _storage._mode != rhs_storage._mode {return false}
        if _storage._maxStats != rhs_storage._maxStats {return false}
        if _storage._maxObjNameLen != rhs_storage._maxObjNameLen {return false}
        if _storage._disableHotRestart != rhs_storage._disableHotRestart {return false}
        if _storage._enableMutexTracing != rhs_storage._enableMutexTracing {return false}
        if _storage._restartEpoch != rhs_storage._restartEpoch {return false}
        if _storage._cpusetThreads != rhs_storage._cpusetThreads {return false}
        if _storage._disabledExtensions != rhs_storage._disabledExtensions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V2alpha_CommandLineOptions.IpVersion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "v4"),
    1: .same(proto: "v6"),
  ]
}

extension Envoy_Admin_V2alpha_CommandLineOptions.Mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Serve"),
    1: .same(proto: "Validate"),
    2: .same(proto: "InitOnly"),
  ]
}
