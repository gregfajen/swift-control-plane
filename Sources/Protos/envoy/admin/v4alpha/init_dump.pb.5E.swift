// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/admin/v4alpha/init_dump.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Dumps of unready targets of envoy init managers. Envoy's admin fills this message with init managers,
/// which provides the information of their unready targets.
/// The :ref:`/init_dump <operations_admin_interface_init_dump>` will dump all unready targets information.
public struct Envoy_Admin_V4alpha_UnreadyTargetsDumps {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// You can choose specific component to dump unready targets with mask query parameter.
  /// See :ref:`/init_dump?mask={} <operations_admin_interface_init_dump_by_mask>` for more information.
  /// The dumps of unready targets of all init managers.
  public var unreadyTargetsDumps: [Envoy_Admin_V4alpha_UnreadyTargetsDumps.UnreadyTargetsDump] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Message of unready targets information of an init manager.
  public struct UnreadyTargetsDump {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name of the init manager. Example: "init_manager_xxx".
    public var name: String = String()

    /// Names of unready targets of the init manager. Example: "target_xxx".
    public var targetNames: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.admin.v4alpha"

extension Envoy_Admin_V4alpha_UnreadyTargetsDumps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnreadyTargetsDumps"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unready_targets_dumps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.unreadyTargetsDumps) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.unreadyTargetsDumps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unreadyTargetsDumps, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_UnreadyTargetsDumps, rhs: Envoy_Admin_V4alpha_UnreadyTargetsDumps) -> Bool {
    if lhs.unreadyTargetsDumps != rhs.unreadyTargetsDumps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V4alpha_UnreadyTargetsDumps.UnreadyTargetsDump: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Admin_V4alpha_UnreadyTargetsDumps.protoMessageName + ".UnreadyTargetsDump"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "target_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.targetNames) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.targetNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.targetNames, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V4alpha_UnreadyTargetsDumps.UnreadyTargetsDump, rhs: Envoy_Admin_V4alpha_UnreadyTargetsDumps.UnreadyTargetsDump) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.targetNames != rhs.targetNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
