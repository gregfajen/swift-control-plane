// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/admin/v3/mutex_stats.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Proto representation of the statistics collected upon absl::Mutex contention, if Envoy is run
/// under :option:`--enable-mutex-tracing`. For more information, see the `absl::Mutex`
/// [docs](https://abseil.io/about/design/mutex#extra-features).
///
/// *NB*: The wait cycles below are measured by `absl::base_internal::CycleClock`, and may not
/// correspond to core clock frequency. For more information, see the `CycleClock`
/// [docs](https://github.com/abseil/abseil-cpp/blob/master/absl/base/internal/cycleclock.h).
public struct Envoy_Admin_V3_MutexStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of individual mutex contentions which have occurred since startup.
  public var numContentions: UInt64 = 0

  /// The length of the current contention wait cycle.
  public var currentWaitCycles: UInt64 = 0

  /// The lifetime total of all contention wait cycles.
  public var lifetimeWaitCycles: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.admin.v3"

extension Envoy_Admin_V3_MutexStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MutexStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_contentions"),
    2: .standard(proto: "current_wait_cycles"),
    3: .standard(proto: "lifetime_wait_cycles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.numContentions)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.currentWaitCycles)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.lifetimeWaitCycles)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numContentions != 0 {
      try visitor.visitSingularUInt64Field(value: self.numContentions, fieldNumber: 1)
    }
    if self.currentWaitCycles != 0 {
      try visitor.visitSingularUInt64Field(value: self.currentWaitCycles, fieldNumber: 2)
    }
    if self.lifetimeWaitCycles != 0 {
      try visitor.visitSingularUInt64Field(value: self.lifetimeWaitCycles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V3_MutexStats, rhs: Envoy_Admin_V3_MutexStats) -> Bool {
    if lhs.numContentions != rhs.numContentions {return false}
    if lhs.currentWaitCycles != rhs.currentWaitCycles {return false}
    if lhs.lifetimeWaitCycles != rhs.lifetimeWaitCycles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
