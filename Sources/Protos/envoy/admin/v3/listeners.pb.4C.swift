// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/admin/v3/listeners.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Admin endpoint uses this wrapper for `/listeners` to display listener status information.
/// See :ref:`/listeners <operations_admin_interface_listeners>` for more information.
public struct Envoy_Admin_V3_Listeners {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of listener statuses.
  public var listenerStatuses: [Envoy_Admin_V3_ListenerStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details an individual listener's current status.
public struct Envoy_Admin_V3_ListenerStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the listener
  public var name: String = String()

  /// The actual local address that the listener is listening on. If a listener was configured
  /// to listen on port 0, then this address has the port that was allocated by the OS.
  public var localAddress: Envoy_Config_Core_V3_Address {
    get {return _localAddress ?? Envoy_Config_Core_V3_Address()}
    set {_localAddress = newValue}
  }
  /// Returns true if `localAddress` has been explicitly set.
  public var hasLocalAddress: Bool {return self._localAddress != nil}
  /// Clears the value of `localAddress`. Subsequent reads from it will return its default value.
  public mutating func clearLocalAddress() {self._localAddress = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _localAddress: Envoy_Config_Core_V3_Address? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.admin.v3"

extension Envoy_Admin_V3_Listeners: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Listeners"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "listener_statuses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.listenerStatuses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.listenerStatuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listenerStatuses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V3_Listeners, rhs: Envoy_Admin_V3_Listeners) -> Bool {
    if lhs.listenerStatuses != rhs.listenerStatuses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Admin_V3_ListenerStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListenerStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "local_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._localAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._localAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Admin_V3_ListenerStatus, rhs: Envoy_Admin_V3_ListenerStatus) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._localAddress != rhs._localAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
