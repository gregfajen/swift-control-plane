// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/api/v2/endpoint/load_report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// These are stats Envoy reports to GLB every so often. Report frequency is
/// defined by
/// :ref:`LoadStatsResponse.load_reporting_interval<envoy_api_field_service.load_stats.v2.LoadStatsResponse.load_reporting_interval>`.
/// Stats per upstream region/zone and optionally per subzone.
/// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
/// [#next-free-field: 9]
public struct Envoy_Api_V2_Endpoint_UpstreamLocalityStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of zone, region and optionally endpoint group these metrics were
  /// collected from. Zone and region names could be empty if unknown.
  public var locality: Envoy_Api_V2_Core_Locality {
    get {return _locality ?? Envoy_Api_V2_Core_Locality()}
    set {_locality = newValue}
  }
  /// Returns true if `locality` has been explicitly set.
  public var hasLocality: Bool {return self._locality != nil}
  /// Clears the value of `locality`. Subsequent reads from it will return its default value.
  public mutating func clearLocality() {self._locality = nil}

  /// The total number of requests successfully completed by the endpoints in the
  /// locality.
  public var totalSuccessfulRequests: UInt64 = 0

  /// The total number of unfinished requests
  public var totalRequestsInProgress: UInt64 = 0

  /// The total number of requests that failed due to errors at the endpoint,
  /// aggregated over all endpoints in the locality.
  public var totalErrorRequests: UInt64 = 0

  /// The total number of requests that were issued by this Envoy since
  /// the last report. This information is aggregated over all the
  /// upstream endpoints in the locality.
  public var totalIssuedRequests: UInt64 = 0

  /// Stats for multi-dimensional load balancing.
  public var loadMetricStats: [Envoy_Api_V2_Endpoint_EndpointLoadMetricStats] = []

  /// Endpoint granularity stats information for this locality. This information
  /// is populated if the Server requests it by setting
  /// :ref:`LoadStatsResponse.report_endpoint_granularity<envoy_api_field_service.load_stats.v2.LoadStatsResponse.report_endpoint_granularity>`.
  public var upstreamEndpointStats: [Envoy_Api_V2_Endpoint_UpstreamEndpointStats] = []

  /// [#not-implemented-hide:] The priority of the endpoint group these metrics
  /// were collected from.
  public var priority: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _locality: Envoy_Api_V2_Core_Locality? = nil
}

/// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
/// [#next-free-field: 8]
public struct Envoy_Api_V2_Endpoint_UpstreamEndpointStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Upstream host address.
  public var address: Envoy_Api_V2_Core_Address {
    get {return _address ?? Envoy_Api_V2_Core_Address()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {self._address = nil}

  /// Opaque and implementation dependent metadata of the
  /// endpoint. Envoy will pass this directly to the management server.
  public var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// The total number of requests successfully completed by the endpoints in the
  /// locality. These include non-5xx responses for HTTP, where errors
  /// originate at the client and the endpoint responded successfully. For gRPC,
  /// the grpc-status values are those not covered by total_error_requests below.
  public var totalSuccessfulRequests: UInt64 = 0

  /// The total number of unfinished requests for this endpoint.
  public var totalRequestsInProgress: UInt64 = 0

  /// The total number of requests that failed due to errors at the endpoint.
  /// For HTTP these are responses with 5xx status codes and for gRPC the
  /// grpc-status values:
  ///
  ///   - DeadlineExceeded
  ///   - Unimplemented
  ///   - Internal
  ///   - Unavailable
  ///   - Unknown
  ///   - DataLoss
  public var totalErrorRequests: UInt64 = 0

  /// The total number of requests that were issued to this endpoint
  /// since the last report. A single TCP connection, HTTP or gRPC
  /// request or stream is counted as one request.
  public var totalIssuedRequests: UInt64 = 0

  /// Stats for multi-dimensional load balancing.
  public var loadMetricStats: [Envoy_Api_V2_Endpoint_EndpointLoadMetricStats] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _address: Envoy_Api_V2_Core_Address? = nil
  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

/// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
public struct Envoy_Api_V2_Endpoint_EndpointLoadMetricStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the metric; may be empty.
  public var metricName: String = String()

  /// Number of calls that finished and included this metric.
  public var numRequestsFinishedWithMetric: UInt64 = 0

  /// Sum of metric values across all calls that finished with this metric for
  /// load_reporting_interval.
  public var totalMetricValue: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Per cluster load stats. Envoy reports these stats a management server in a
/// :ref:`LoadStatsRequest<envoy_api_msg_service.load_stats.v2.LoadStatsRequest>`
/// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
/// Next ID: 7
/// [#next-free-field: 7]
public struct Envoy_Api_V2_Endpoint_ClusterStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the cluster.
  public var clusterName: String = String()

  /// The eds_cluster_config service_name of the cluster.
  /// It's possible that two clusters send the same service_name to EDS,
  /// in that case, the management server is supposed to do aggregation on the load reports.
  public var clusterServiceName: String = String()

  /// Need at least one.
  public var upstreamLocalityStats: [Envoy_Api_V2_Endpoint_UpstreamLocalityStats] = []

  /// Cluster-level stats such as total_successful_requests may be computed by
  /// summing upstream_locality_stats. In addition, below there are additional
  /// cluster-wide stats.
  ///
  /// The total number of dropped requests. This covers requests
  /// deliberately dropped by the drop_overload policy and circuit breaking.
  public var totalDroppedRequests: UInt64 = 0

  /// Information about deliberately dropped requests for each category specified
  /// in the DropOverload policy.
  public var droppedRequests: [Envoy_Api_V2_Endpoint_ClusterStats.DroppedRequests] = []

  /// Period over which the actual load report occurred. This will be guaranteed to include every
  /// request reported. Due to system load and delays between the *LoadStatsRequest* sent from Envoy
  /// and the *LoadStatsResponse* message sent from the management server, this may be longer than
  /// the requested load reporting interval in the *LoadStatsResponse*.
  public var loadReportInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _loadReportInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_loadReportInterval = newValue}
  }
  /// Returns true if `loadReportInterval` has been explicitly set.
  public var hasLoadReportInterval: Bool {return self._loadReportInterval != nil}
  /// Clears the value of `loadReportInterval`. Subsequent reads from it will return its default value.
  public mutating func clearLoadReportInterval() {self._loadReportInterval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DroppedRequests {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Identifier for the policy specifying the drop.
    public var category: String = String()

    /// Total number of deliberately dropped requests for the category.
    public var droppedCount: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _loadReportInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.api.v2.endpoint"

extension Envoy_Api_V2_Endpoint_UpstreamLocalityStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpstreamLocalityStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locality"),
    2: .standard(proto: "total_successful_requests"),
    3: .standard(proto: "total_requests_in_progress"),
    4: .standard(proto: "total_error_requests"),
    8: .standard(proto: "total_issued_requests"),
    5: .standard(proto: "load_metric_stats"),
    7: .standard(proto: "upstream_endpoint_stats"),
    6: .same(proto: "priority"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._locality) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.totalSuccessfulRequests) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.totalRequestsInProgress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.totalErrorRequests) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.loadMetricStats) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.priority) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.upstreamEndpointStats) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.totalIssuedRequests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._locality {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.totalSuccessfulRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalSuccessfulRequests, fieldNumber: 2)
    }
    if self.totalRequestsInProgress != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalRequestsInProgress, fieldNumber: 3)
    }
    if self.totalErrorRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalErrorRequests, fieldNumber: 4)
    }
    if !self.loadMetricStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.loadMetricStats, fieldNumber: 5)
    }
    if self.priority != 0 {
      try visitor.visitSingularUInt32Field(value: self.priority, fieldNumber: 6)
    }
    if !self.upstreamEndpointStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.upstreamEndpointStats, fieldNumber: 7)
    }
    if self.totalIssuedRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalIssuedRequests, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Api_V2_Endpoint_UpstreamLocalityStats, rhs: Envoy_Api_V2_Endpoint_UpstreamLocalityStats) -> Bool {
    if lhs._locality != rhs._locality {return false}
    if lhs.totalSuccessfulRequests != rhs.totalSuccessfulRequests {return false}
    if lhs.totalRequestsInProgress != rhs.totalRequestsInProgress {return false}
    if lhs.totalErrorRequests != rhs.totalErrorRequests {return false}
    if lhs.totalIssuedRequests != rhs.totalIssuedRequests {return false}
    if lhs.loadMetricStats != rhs.loadMetricStats {return false}
    if lhs.upstreamEndpointStats != rhs.upstreamEndpointStats {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Api_V2_Endpoint_UpstreamEndpointStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpstreamEndpointStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    6: .same(proto: "metadata"),
    2: .standard(proto: "total_successful_requests"),
    3: .standard(proto: "total_requests_in_progress"),
    4: .standard(proto: "total_error_requests"),
    7: .standard(proto: "total_issued_requests"),
    5: .standard(proto: "load_metric_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._address) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.totalSuccessfulRequests) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.totalRequestsInProgress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.totalErrorRequests) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.loadMetricStats) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.totalIssuedRequests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._address {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.totalSuccessfulRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalSuccessfulRequests, fieldNumber: 2)
    }
    if self.totalRequestsInProgress != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalRequestsInProgress, fieldNumber: 3)
    }
    if self.totalErrorRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalErrorRequests, fieldNumber: 4)
    }
    if !self.loadMetricStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.loadMetricStats, fieldNumber: 5)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.totalIssuedRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalIssuedRequests, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Api_V2_Endpoint_UpstreamEndpointStats, rhs: Envoy_Api_V2_Endpoint_UpstreamEndpointStats) -> Bool {
    if lhs._address != rhs._address {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.totalSuccessfulRequests != rhs.totalSuccessfulRequests {return false}
    if lhs.totalRequestsInProgress != rhs.totalRequestsInProgress {return false}
    if lhs.totalErrorRequests != rhs.totalErrorRequests {return false}
    if lhs.totalIssuedRequests != rhs.totalIssuedRequests {return false}
    if lhs.loadMetricStats != rhs.loadMetricStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Api_V2_Endpoint_EndpointLoadMetricStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EndpointLoadMetricStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metric_name"),
    2: .standard(proto: "num_requests_finished_with_metric"),
    3: .standard(proto: "total_metric_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.metricName) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.numRequestsFinishedWithMetric) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.totalMetricValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metricName.isEmpty {
      try visitor.visitSingularStringField(value: self.metricName, fieldNumber: 1)
    }
    if self.numRequestsFinishedWithMetric != 0 {
      try visitor.visitSingularUInt64Field(value: self.numRequestsFinishedWithMetric, fieldNumber: 2)
    }
    if self.totalMetricValue != 0 {
      try visitor.visitSingularDoubleField(value: self.totalMetricValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Api_V2_Endpoint_EndpointLoadMetricStats, rhs: Envoy_Api_V2_Endpoint_EndpointLoadMetricStats) -> Bool {
    if lhs.metricName != rhs.metricName {return false}
    if lhs.numRequestsFinishedWithMetric != rhs.numRequestsFinishedWithMetric {return false}
    if lhs.totalMetricValue != rhs.totalMetricValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Api_V2_Endpoint_ClusterStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClusterStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_name"),
    6: .standard(proto: "cluster_service_name"),
    2: .standard(proto: "upstream_locality_stats"),
    3: .standard(proto: "total_dropped_requests"),
    5: .standard(proto: "dropped_requests"),
    4: .standard(proto: "load_report_interval"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clusterName) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.upstreamLocalityStats) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.totalDroppedRequests) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._loadReportInterval) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.droppedRequests) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.clusterServiceName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusterName.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterName, fieldNumber: 1)
    }
    if !self.upstreamLocalityStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.upstreamLocalityStats, fieldNumber: 2)
    }
    if self.totalDroppedRequests != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalDroppedRequests, fieldNumber: 3)
    }
    if let v = self._loadReportInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.droppedRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.droppedRequests, fieldNumber: 5)
    }
    if !self.clusterServiceName.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterServiceName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Api_V2_Endpoint_ClusterStats, rhs: Envoy_Api_V2_Endpoint_ClusterStats) -> Bool {
    if lhs.clusterName != rhs.clusterName {return false}
    if lhs.clusterServiceName != rhs.clusterServiceName {return false}
    if lhs.upstreamLocalityStats != rhs.upstreamLocalityStats {return false}
    if lhs.totalDroppedRequests != rhs.totalDroppedRequests {return false}
    if lhs.droppedRequests != rhs.droppedRequests {return false}
    if lhs._loadReportInterval != rhs._loadReportInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Api_V2_Endpoint_ClusterStats.DroppedRequests: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Api_V2_Endpoint_ClusterStats.protoMessageName + ".DroppedRequests"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    2: .standard(proto: "dropped_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.category) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.droppedCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 1)
    }
    if self.droppedCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.droppedCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Api_V2_Endpoint_ClusterStats.DroppedRequests, rhs: Envoy_Api_V2_Endpoint_ClusterStats.DroppedRequests) -> Bool {
    if lhs.category != rhs.category {return false}
    if lhs.droppedCount != rhs.droppedCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
