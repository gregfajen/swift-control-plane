// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/data/dns/v4alpha/dns_table.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// This message contains the configuration for the DNS Filter if populated
/// from the control plane
public struct Envoy_Data_Dns_V4alpha_DnsTable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Control how many times Envoy makes an attempt to forward a query to an external DNS server
  public var externalRetryCount: UInt32 = 0

  /// Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
  /// list empty, Envoy will forward all queries to external resolvers
  public var virtualDomains: [Envoy_Data_Dns_V4alpha_DnsTable.DnsVirtualDomain] = []

  /// This field serves to help Envoy determine whether it can authoritatively answer a query
  /// for a name matching a suffix in this list. If the query name does not match a suffix in
  /// this list, Envoy will forward the query to an upstream DNS server
  public var knownSuffixes: [Envoy_Type_Matcher_V4alpha_StringMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// This message contains a list of IP addresses returned for a query for a known name
  public struct AddressList {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// This field contains a well formed IP address that is returned in the answer for a
    /// name query. The address field can be an IPv4 or IPv6 address. Address family
    /// detection is done automatically when Envoy parses the string. Since this field is
    /// repeated, Envoy will return as many entries from this list in the DNS response while
    /// keeping the response under 512 bytes
    public var address: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specify the service protocol using a numeric or string value
  public struct DnsServiceProtocol {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var protocolConfig: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol.OneOf_ProtocolConfig? = nil

    /// Specify the protocol number for the service. Envoy will try to resolve the number to
    /// the protocol name. For example, 6 will resolve to "tcp". Refer to:
    /// https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
    /// for protocol names and numbers
    public var number: UInt32 {
      get {
        if case .number(let v)? = protocolConfig {return v}
        return 0
      }
      set {protocolConfig = .number(newValue)}
    }

    /// Specify the protocol name for the service.
    public var name: String {
      get {
        if case .name(let v)? = protocolConfig {return v}
        return String()
      }
      set {protocolConfig = .name(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_ProtocolConfig: Equatable {
      /// Specify the protocol number for the service. Envoy will try to resolve the number to
      /// the protocol name. For example, 6 will resolve to "tcp". Refer to:
      /// https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
      /// for protocol names and numbers
      case number(UInt32)
      /// Specify the protocol name for the service.
      case name(String)

    #if !swift(>=4.1)
      public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol.OneOf_ProtocolConfig, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol.OneOf_ProtocolConfig) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.number, .number): return {
          guard case .number(let l) = lhs, case .number(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.name, .name): return {
          guard case .name(let l) = lhs, case .name(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  /// Specify the target for a given DNS service
  /// [#next-free-field: 6]
  public struct DnsServiceTarget {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specify the name of the endpoint for the Service. The name is a hostname or a cluster
    public var endpointType: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget.OneOf_EndpointType? = nil

    /// Use a resolvable hostname as the endpoint for a service.
    public var hostName: String {
      get {
        if case .hostName(let v)? = endpointType {return v}
        return String()
      }
      set {endpointType = .hostName(newValue)}
    }

    /// Use a cluster name as the endpoint for a service.
    public var clusterName: String {
      get {
        if case .clusterName(let v)? = endpointType {return v}
        return String()
      }
      set {endpointType = .clusterName(newValue)}
    }

    /// The priority of the service record target
    public var priority: UInt32 = 0

    /// The weight of the service record target
    public var weight: UInt32 = 0

    /// The port to which the service is bound. This value is optional if the target is a
    /// cluster. Setting port to zero in this case makes the filter use the port value
    /// from the cluster host
    public var port: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specify the name of the endpoint for the Service. The name is a hostname or a cluster
    public enum OneOf_EndpointType: Equatable {
      /// Use a resolvable hostname as the endpoint for a service.
      case hostName(String)
      /// Use a cluster name as the endpoint for a service.
      case clusterName(String)

    #if !swift(>=4.1)
      public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget.OneOf_EndpointType, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget.OneOf_EndpointType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.hostName, .hostName): return {
          guard case .hostName(let l) = lhs, case .hostName(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.clusterName, .clusterName): return {
          guard case .clusterName(let l) = lhs, case .clusterName(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  /// This message defines a service selection record returned for a service query in a domain
  public struct DnsService {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name of the service without the protocol or domain name
    public var serviceName: String = String()

    /// The service protocol. This can be specified as a string or the numeric value of the protocol
    public var `protocol`: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol {
      get {return _protocol ?? Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol()}
      set {_protocol = newValue}
    }
    /// Returns true if ``protocol`` has been explicitly set.
    public var hasProtocol: Bool {return self._protocol != nil}
    /// Clears the value of ``protocol``. Subsequent reads from it will return its default value.
    public mutating func clearProtocol() {self._protocol = nil}

    /// The service entry time to live. This is independent from the DNS Answer record TTL
    public var ttl: SwiftProtobuf.Google_Protobuf_Duration {
      get {return _ttl ?? SwiftProtobuf.Google_Protobuf_Duration()}
      set {_ttl = newValue}
    }
    /// Returns true if `ttl` has been explicitly set.
    public var hasTtl: Bool {return self._ttl != nil}
    /// Clears the value of `ttl`. Subsequent reads from it will return its default value.
    public mutating func clearTtl() {self._ttl = nil}

    /// The list of targets hosting the service
    public var targets: [Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _protocol: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol? = nil
    fileprivate var _ttl: SwiftProtobuf.Google_Protobuf_Duration? = nil
  }

  /// Define a list of service records for a given service
  public struct DnsServiceList {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var services: [Envoy_Data_Dns_V4alpha_DnsTable.DnsService] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DnsEndpoint {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var endpointConfig: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint.OneOf_EndpointConfig? = nil

    /// Define a list of addresses to return for the specified endpoint
    public var addressList: Envoy_Data_Dns_V4alpha_DnsTable.AddressList {
      get {
        if case .addressList(let v)? = endpointConfig {return v}
        return Envoy_Data_Dns_V4alpha_DnsTable.AddressList()
      }
      set {endpointConfig = .addressList(newValue)}
    }

    /// Define a cluster whose addresses are returned for the specified endpoint
    public var clusterName: String {
      get {
        if case .clusterName(let v)? = endpointConfig {return v}
        return String()
      }
      set {endpointConfig = .clusterName(newValue)}
    }

    /// Define a DNS Service List for the specified endpoint
    public var serviceList: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList {
      get {
        if case .serviceList(let v)? = endpointConfig {return v}
        return Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList()
      }
      set {endpointConfig = .serviceList(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_EndpointConfig: Equatable {
      /// Define a list of addresses to return for the specified endpoint
      case addressList(Envoy_Data_Dns_V4alpha_DnsTable.AddressList)
      /// Define a cluster whose addresses are returned for the specified endpoint
      case clusterName(String)
      /// Define a DNS Service List for the specified endpoint
      case serviceList(Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList)

    #if !swift(>=4.1)
      public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint.OneOf_EndpointConfig, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint.OneOf_EndpointConfig) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.addressList, .addressList): return {
          guard case .addressList(let l) = lhs, case .addressList(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.clusterName, .clusterName): return {
          guard case .clusterName(let l) = lhs, case .clusterName(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.serviceList, .serviceList): return {
          guard case .serviceList(let l) = lhs, case .serviceList(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public struct DnsVirtualDomain {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A domain name for which Envoy will respond to query requests
    public var name: String = String()

    /// The configuration containing the method to determine the address of this endpoint
    public var endpoint: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint {
      get {return _endpoint ?? Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint()}
      set {_endpoint = newValue}
    }
    /// Returns true if `endpoint` has been explicitly set.
    public var hasEndpoint: Bool {return self._endpoint != nil}
    /// Clears the value of `endpoint`. Subsequent reads from it will return its default value.
    public mutating func clearEndpoint() {self._endpoint = nil}

    /// Sets the TTL in DNS answers from Envoy returned to the client. The default TTL is 300s
    public var answerTtl: SwiftProtobuf.Google_Protobuf_Duration {
      get {return _answerTtl ?? SwiftProtobuf.Google_Protobuf_Duration()}
      set {_answerTtl = newValue}
    }
    /// Returns true if `answerTtl` has been explicitly set.
    public var hasAnswerTtl: Bool {return self._answerTtl != nil}
    /// Clears the value of `answerTtl`. Subsequent reads from it will return its default value.
    public mutating func clearAnswerTtl() {self._answerTtl = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _endpoint: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint? = nil
    fileprivate var _answerTtl: SwiftProtobuf.Google_Protobuf_Duration? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.data.dns.v4alpha"

extension Envoy_Data_Dns_V4alpha_DnsTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsTable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_retry_count"),
    2: .standard(proto: "virtual_domains"),
    3: .standard(proto: "known_suffixes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.externalRetryCount) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.virtualDomains) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.knownSuffixes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.externalRetryCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.externalRetryCount, fieldNumber: 1)
    }
    if !self.virtualDomains.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.virtualDomains, fieldNumber: 2)
    }
    if !self.knownSuffixes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.knownSuffixes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable, rhs: Envoy_Data_Dns_V4alpha_DnsTable) -> Bool {
    if lhs.externalRetryCount != rhs.externalRetryCount {return false}
    if lhs.virtualDomains != rhs.virtualDomains {return false}
    if lhs.knownSuffixes != rhs.knownSuffixes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.AddressList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".AddressList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.address) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitRepeatedStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.AddressList, rhs: Envoy_Data_Dns_V4alpha_DnsTable.AddressList) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".DnsServiceProtocol"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.protocolConfig != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.protocolConfig = .number(v)}
      }()
      case 2: try {
        if self.protocolConfig != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.protocolConfig = .name(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.protocolConfig {
    case .number?: try {
      guard case .number(let v)? = self.protocolConfig else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }()
    case .name?: try {
      guard case .name(let v)? = self.protocolConfig else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceProtocol) -> Bool {
    if lhs.protocolConfig != rhs.protocolConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".DnsServiceTarget"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_name"),
    2: .standard(proto: "cluster_name"),
    3: .same(proto: "priority"),
    4: .same(proto: "weight"),
    5: .same(proto: "port"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.endpointType != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.endpointType = .hostName(v)}
      }()
      case 2: try {
        if self.endpointType != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.endpointType = .clusterName(v)}
      }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.priority) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.weight) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.endpointType {
    case .hostName?: try {
      guard case .hostName(let v)? = self.endpointType else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .clusterName?: try {
      guard case .clusterName(let v)? = self.endpointType else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if self.priority != 0 {
      try visitor.visitSingularUInt32Field(value: self.priority, fieldNumber: 3)
    }
    if self.weight != 0 {
      try visitor.visitSingularUInt32Field(value: self.weight, fieldNumber: 4)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceTarget) -> Bool {
    if lhs.endpointType != rhs.endpointType {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.DnsService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".DnsService"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "protocol"),
    3: .same(proto: "ttl"),
    4: .same(proto: "targets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._protocol) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ttl) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.targets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if let v = self._protocol {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ttl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.targets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targets, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsService, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsService) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs._protocol != rhs._protocol {return false}
    if lhs._ttl != rhs._ttl {return false}
    if lhs.targets != rhs.targets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".DnsServiceList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "services"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.services) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.services.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.services, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList) -> Bool {
    if lhs.services != rhs.services {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".DnsEndpoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "address_list"),
    2: .standard(proto: "cluster_name"),
    3: .standard(proto: "service_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Envoy_Data_Dns_V4alpha_DnsTable.AddressList?
        if let current = self.endpointConfig {
          try decoder.handleConflictingOneOf()
          if case .addressList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.endpointConfig = .addressList(v)}
      }()
      case 2: try {
        if self.endpointConfig != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.endpointConfig = .clusterName(v)}
      }()
      case 3: try {
        var v: Envoy_Data_Dns_V4alpha_DnsTable.DnsServiceList?
        if let current = self.endpointConfig {
          try decoder.handleConflictingOneOf()
          if case .serviceList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.endpointConfig = .serviceList(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.endpointConfig {
    case .addressList?: try {
      guard case .addressList(let v)? = self.endpointConfig else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .clusterName?: try {
      guard case .clusterName(let v)? = self.endpointConfig else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .serviceList?: try {
      guard case .serviceList(let v)? = self.endpointConfig else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsEndpoint) -> Bool {
    if lhs.endpointConfig != rhs.endpointConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Data_Dns_V4alpha_DnsTable.DnsVirtualDomain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Data_Dns_V4alpha_DnsTable.protoMessageName + ".DnsVirtualDomain"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "endpoint"),
    3: .standard(proto: "answer_ttl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endpoint) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._answerTtl) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._endpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._answerTtl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsVirtualDomain, rhs: Envoy_Data_Dns_V4alpha_DnsTable.DnsVirtualDomain) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._endpoint != rhs._endpoint {return false}
    if lhs._answerTtl != rhs._answerTtl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
