// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/accesslog/v2/file.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Custom configuration for an :ref:`AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`
/// that writes log entries directly to a file. Configures the built-in *envoy.access_loggers.file*
/// AccessLog.
public struct Envoy_Config_Accesslog_V2_FileAccessLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A path to a local file to which to write the access log entries.
  public var path: String = String()

  public var accessLogFormat: Envoy_Config_Accesslog_V2_FileAccessLog.OneOf_AccessLogFormat? = nil

  /// Access log :ref:`format string<config_access_log_format_strings>`.
  /// Envoy supports :ref:`custom access log formats <config_access_log_format>` as well as a
  /// :ref:`default format <config_access_log_default_format>`.
  public var format: String {
    get {
      if case .format(let v)? = accessLogFormat {return v}
      return String()
    }
    set {accessLogFormat = .format(newValue)}
  }

  /// Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. All values
  /// are rendered as strings.
  public var jsonFormat: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .jsonFormat(let v)? = accessLogFormat {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {accessLogFormat = .jsonFormat(newValue)}
  }

  /// Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
  /// rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
  /// be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the
  /// documentation for a specific command operator for details.
  public var typedJsonFormat: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .typedJsonFormat(let v)? = accessLogFormat {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {accessLogFormat = .typedJsonFormat(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_AccessLogFormat: Equatable {
    /// Access log :ref:`format string<config_access_log_format_strings>`.
    /// Envoy supports :ref:`custom access log formats <config_access_log_format>` as well as a
    /// :ref:`default format <config_access_log_default_format>`.
    case format(String)
    /// Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. All values
    /// are rendered as strings.
    case jsonFormat(SwiftProtobuf.Google_Protobuf_Struct)
    /// Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
    /// rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
    /// be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the
    /// documentation for a specific command operator for details.
    case typedJsonFormat(SwiftProtobuf.Google_Protobuf_Struct)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Config_Accesslog_V2_FileAccessLog.OneOf_AccessLogFormat, rhs: Envoy_Config_Accesslog_V2_FileAccessLog.OneOf_AccessLogFormat) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.format, .format): return {
        guard case .format(let l) = lhs, case .format(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.jsonFormat, .jsonFormat): return {
        guard case .jsonFormat(let l) = lhs, case .jsonFormat(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.typedJsonFormat, .typedJsonFormat): return {
        guard case .typedJsonFormat(let l) = lhs, case .typedJsonFormat(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.accesslog.v2"

extension Envoy_Config_Accesslog_V2_FileAccessLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileAccessLog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "format"),
    3: .standard(proto: "json_format"),
    4: .standard(proto: "typed_json_format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try {
        if self.accessLogFormat != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.accessLogFormat = .format(v)}
      }()
      case 3: try {
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        if let current = self.accessLogFormat {
          try decoder.handleConflictingOneOf()
          if case .jsonFormat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.accessLogFormat = .jsonFormat(v)}
      }()
      case 4: try {
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        if let current = self.accessLogFormat {
          try decoder.handleConflictingOneOf()
          if case .typedJsonFormat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.accessLogFormat = .typedJsonFormat(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.accessLogFormat {
    case .format?: try {
      guard case .format(let v)? = self.accessLogFormat else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .jsonFormat?: try {
      guard case .jsonFormat(let v)? = self.accessLogFormat else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .typedJsonFormat?: try {
      guard case .typedJsonFormat(let v)? = self.accessLogFormat else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Accesslog_V2_FileAccessLog, rhs: Envoy_Config_Accesslog_V2_FileAccessLog) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.accessLogFormat != rhs.accessLogFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
