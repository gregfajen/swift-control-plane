// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/trace/v2alpha/xray.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Config_Trace_V2alpha_XRayConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The UDP endpoint of the X-Ray Daemon where the spans will be sent.
  /// If this value is not set, the default value of 127.0.0.1:2000 will be used.
  public var daemonEndpoint: Envoy_Api_V2_Core_SocketAddress {
    get {return _daemonEndpoint ?? Envoy_Api_V2_Core_SocketAddress()}
    set {_daemonEndpoint = newValue}
  }
  /// Returns true if `daemonEndpoint` has been explicitly set.
  public var hasDaemonEndpoint: Bool {return self._daemonEndpoint != nil}
  /// Clears the value of `daemonEndpoint`. Subsequent reads from it will return its default value.
  public mutating func clearDaemonEndpoint() {self._daemonEndpoint = nil}

  /// The name of the X-Ray segment.
  public var segmentName: String = String()

  /// The location of a local custom sampling rules JSON file.
  /// For an example of the sampling rules see:
  /// `X-Ray SDK documentation
  /// <https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-configuration.html#xray-sdk-go-configuration-sampling>`_
  public var samplingRuleManifest: Envoy_Api_V2_Core_DataSource {
    get {return _samplingRuleManifest ?? Envoy_Api_V2_Core_DataSource()}
    set {_samplingRuleManifest = newValue}
  }
  /// Returns true if `samplingRuleManifest` has been explicitly set.
  public var hasSamplingRuleManifest: Bool {return self._samplingRuleManifest != nil}
  /// Clears the value of `samplingRuleManifest`. Subsequent reads from it will return its default value.
  public mutating func clearSamplingRuleManifest() {self._samplingRuleManifest = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _daemonEndpoint: Envoy_Api_V2_Core_SocketAddress? = nil
  fileprivate var _samplingRuleManifest: Envoy_Api_V2_Core_DataSource? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.trace.v2alpha"

extension Envoy_Config_Trace_V2alpha_XRayConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XRayConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "daemon_endpoint"),
    2: .standard(proto: "segment_name"),
    3: .standard(proto: "sampling_rule_manifest"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._daemonEndpoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.segmentName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._samplingRuleManifest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._daemonEndpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.segmentName.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentName, fieldNumber: 2)
    }
    if let v = self._samplingRuleManifest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Trace_V2alpha_XRayConfig, rhs: Envoy_Config_Trace_V2alpha_XRayConfig) -> Bool {
    if lhs._daemonEndpoint != rhs._daemonEndpoint {return false}
    if lhs.segmentName != rhs.segmentName {return false}
    if lhs._samplingRuleManifest != rhs._samplingRuleManifest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
