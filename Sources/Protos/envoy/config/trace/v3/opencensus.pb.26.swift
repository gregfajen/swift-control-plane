// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/trace/v3/opencensus.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for the OpenCensus tracer.
/// [#next-free-field: 15]
/// [#extension: envoy.tracers.opencensus]
public struct Envoy_Config_Trace_V3_OpenCensusConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Configures tracing, e.g. the sampler, max number of annotations, etc.
  public var traceConfig: Opencensus_Proto_Trace_V1_TraceConfig {
    get {return _traceConfig ?? Opencensus_Proto_Trace_V1_TraceConfig()}
    set {_traceConfig = newValue}
  }
  /// Returns true if `traceConfig` has been explicitly set.
  public var hasTraceConfig: Bool {return self._traceConfig != nil}
  /// Clears the value of `traceConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTraceConfig() {self._traceConfig = nil}

  /// Enables the stdout exporter if set to true. This is intended for debugging
  /// purposes.
  public var stdoutExporterEnabled: Bool = false

  /// Enables the Stackdriver exporter if set to true. The project_id must also
  /// be set.
  public var stackdriverExporterEnabled: Bool = false

  /// The Cloud project_id to use for Stackdriver tracing.
  public var stackdriverProjectID: String = String()

  /// (optional) By default, the Stackdriver exporter will connect to production
  /// Stackdriver. If stackdriver_address is non-empty, it will instead connect
  /// to this address, which is in the gRPC format:
  /// https://github.com/grpc/grpc/blob/master/doc/naming.md
  public var stackdriverAddress: String = String()

  /// (optional) The gRPC server that hosts Stackdriver tracing service. Only
  /// Google gRPC is supported. If :ref:`target_uri <envoy_v3_api_field_config.core.v3.GrpcService.GoogleGrpc.target_uri>`
  /// is not provided, the default production Stackdriver address will be used.
  public var stackdriverGrpcService: Envoy_Config_Core_V3_GrpcService {
    get {return _stackdriverGrpcService ?? Envoy_Config_Core_V3_GrpcService()}
    set {_stackdriverGrpcService = newValue}
  }
  /// Returns true if `stackdriverGrpcService` has been explicitly set.
  public var hasStackdriverGrpcService: Bool {return self._stackdriverGrpcService != nil}
  /// Clears the value of `stackdriverGrpcService`. Subsequent reads from it will return its default value.
  public mutating func clearStackdriverGrpcService() {self._stackdriverGrpcService = nil}

  /// Enables the Zipkin exporter if set to true. The url and service name must
  /// also be set.
  public var zipkinExporterEnabled: Bool = false

  /// The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans"
  public var zipkinURL: String = String()

  /// Enables the OpenCensus Agent exporter if set to true. The ocagent_address or
  /// ocagent_grpc_service must also be set.
  public var ocagentExporterEnabled: Bool = false

  /// The address of the OpenCensus Agent, if its exporter is enabled, in gRPC
  /// format: https://github.com/grpc/grpc/blob/master/doc/naming.md
  /// [#comment:TODO: deprecate this field]
  public var ocagentAddress: String = String()

  /// (optional) The gRPC server hosted by the OpenCensus Agent. Only Google gRPC is supported.
  /// This is only used if the ocagent_address is left empty.
  public var ocagentGrpcService: Envoy_Config_Core_V3_GrpcService {
    get {return _ocagentGrpcService ?? Envoy_Config_Core_V3_GrpcService()}
    set {_ocagentGrpcService = newValue}
  }
  /// Returns true if `ocagentGrpcService` has been explicitly set.
  public var hasOcagentGrpcService: Bool {return self._ocagentGrpcService != nil}
  /// Clears the value of `ocagentGrpcService`. Subsequent reads from it will return its default value.
  public mutating func clearOcagentGrpcService() {self._ocagentGrpcService = nil}

  /// List of incoming trace context headers we will accept. First one found
  /// wins.
  public var incomingTraceContext: [Envoy_Config_Trace_V3_OpenCensusConfig.TraceContext] = []

  /// List of outgoing trace context headers we will produce.
  public var outgoingTraceContext: [Envoy_Config_Trace_V3_OpenCensusConfig.TraceContext] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TraceContext: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// No-op default, no trace context is utilized.
    case none // = 0

    /// W3C Trace-Context format "traceparent:" header.
    case traceContext // = 1

    /// Binary "grpc-trace-bin:" header.
    case grpcTraceBin // = 2

    /// "X-Cloud-Trace-Context:" header.
    case cloudTraceContext // = 3

    /// X-B3-* headers.
    case b3 // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .traceContext
      case 2: self = .grpcTraceBin
      case 3: self = .cloudTraceContext
      case 4: self = .b3
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .traceContext: return 1
      case .grpcTraceBin: return 2
      case .cloudTraceContext: return 3
      case .b3: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _traceConfig: Opencensus_Proto_Trace_V1_TraceConfig? = nil
  fileprivate var _stackdriverGrpcService: Envoy_Config_Core_V3_GrpcService? = nil
  fileprivate var _ocagentGrpcService: Envoy_Config_Core_V3_GrpcService? = nil
}

#if swift(>=4.2)

extension Envoy_Config_Trace_V3_OpenCensusConfig.TraceContext: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Trace_V3_OpenCensusConfig.TraceContext] = [
    .none,
    .traceContext,
    .grpcTraceBin,
    .cloudTraceContext,
    .b3,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.trace.v3"

extension Envoy_Config_Trace_V3_OpenCensusConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenCensusConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trace_config"),
    2: .standard(proto: "stdout_exporter_enabled"),
    3: .standard(proto: "stackdriver_exporter_enabled"),
    4: .standard(proto: "stackdriver_project_id"),
    10: .standard(proto: "stackdriver_address"),
    13: .standard(proto: "stackdriver_grpc_service"),
    5: .standard(proto: "zipkin_exporter_enabled"),
    6: .standard(proto: "zipkin_url"),
    11: .standard(proto: "ocagent_exporter_enabled"),
    12: .standard(proto: "ocagent_address"),
    14: .standard(proto: "ocagent_grpc_service"),
    8: .standard(proto: "incoming_trace_context"),
    9: .standard(proto: "outgoing_trace_context"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._traceConfig)
      case 2: try decoder.decodeSingularBoolField(value: &self.stdoutExporterEnabled)
      case 3: try decoder.decodeSingularBoolField(value: &self.stackdriverExporterEnabled)
      case 4: try decoder.decodeSingularStringField(value: &self.stackdriverProjectID)
      case 5: try decoder.decodeSingularBoolField(value: &self.zipkinExporterEnabled)
      case 6: try decoder.decodeSingularStringField(value: &self.zipkinURL)
      case 8: try decoder.decodeRepeatedEnumField(value: &self.incomingTraceContext)
      case 9: try decoder.decodeRepeatedEnumField(value: &self.outgoingTraceContext)
      case 10: try decoder.decodeSingularStringField(value: &self.stackdriverAddress)
      case 11: try decoder.decodeSingularBoolField(value: &self.ocagentExporterEnabled)
      case 12: try decoder.decodeSingularStringField(value: &self.ocagentAddress)
      case 13: try decoder.decodeSingularMessageField(value: &self._stackdriverGrpcService)
      case 14: try decoder.decodeSingularMessageField(value: &self._ocagentGrpcService)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._traceConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.stdoutExporterEnabled != false {
      try visitor.visitSingularBoolField(value: self.stdoutExporterEnabled, fieldNumber: 2)
    }
    if self.stackdriverExporterEnabled != false {
      try visitor.visitSingularBoolField(value: self.stackdriverExporterEnabled, fieldNumber: 3)
    }
    if !self.stackdriverProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackdriverProjectID, fieldNumber: 4)
    }
    if self.zipkinExporterEnabled != false {
      try visitor.visitSingularBoolField(value: self.zipkinExporterEnabled, fieldNumber: 5)
    }
    if !self.zipkinURL.isEmpty {
      try visitor.visitSingularStringField(value: self.zipkinURL, fieldNumber: 6)
    }
    if !self.incomingTraceContext.isEmpty {
      try visitor.visitPackedEnumField(value: self.incomingTraceContext, fieldNumber: 8)
    }
    if !self.outgoingTraceContext.isEmpty {
      try visitor.visitPackedEnumField(value: self.outgoingTraceContext, fieldNumber: 9)
    }
    if !self.stackdriverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.stackdriverAddress, fieldNumber: 10)
    }
    if self.ocagentExporterEnabled != false {
      try visitor.visitSingularBoolField(value: self.ocagentExporterEnabled, fieldNumber: 11)
    }
    if !self.ocagentAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ocagentAddress, fieldNumber: 12)
    }
    if let v = self._stackdriverGrpcService {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._ocagentGrpcService {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Trace_V3_OpenCensusConfig, rhs: Envoy_Config_Trace_V3_OpenCensusConfig) -> Bool {
    if lhs._traceConfig != rhs._traceConfig {return false}
    if lhs.stdoutExporterEnabled != rhs.stdoutExporterEnabled {return false}
    if lhs.stackdriverExporterEnabled != rhs.stackdriverExporterEnabled {return false}
    if lhs.stackdriverProjectID != rhs.stackdriverProjectID {return false}
    if lhs.stackdriverAddress != rhs.stackdriverAddress {return false}
    if lhs._stackdriverGrpcService != rhs._stackdriverGrpcService {return false}
    if lhs.zipkinExporterEnabled != rhs.zipkinExporterEnabled {return false}
    if lhs.zipkinURL != rhs.zipkinURL {return false}
    if lhs.ocagentExporterEnabled != rhs.ocagentExporterEnabled {return false}
    if lhs.ocagentAddress != rhs.ocagentAddress {return false}
    if lhs._ocagentGrpcService != rhs._ocagentGrpcService {return false}
    if lhs.incomingTraceContext != rhs.incomingTraceContext {return false}
    if lhs.outgoingTraceContext != rhs.outgoingTraceContext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Trace_V3_OpenCensusConfig.TraceContext: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "TRACE_CONTEXT"),
    2: .same(proto: "GRPC_TRACE_BIN"),
    3: .same(proto: "CLOUD_TRACE_CONTEXT"),
    4: .same(proto: "B3"),
  ]
}
