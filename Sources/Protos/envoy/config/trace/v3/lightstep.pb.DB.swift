// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/trace/v3/lightstep.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for the LightStep tracer.
/// [#extension: envoy.tracers.lightstep]
public struct Envoy_Config_Trace_V3_LightstepConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The cluster manager cluster that hosts the LightStep collectors.
  public var collectorCluster: String = String()

  /// File containing the access token to the `LightStep
  /// <https://lightstep.com/>`_ API.
  public var accessTokenFile: String = String()

  /// Propagation modes to use by LightStep's tracer.
  public var propagationModes: [Envoy_Config_Trace_V3_LightstepConfig.PropagationMode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Available propagation modes
  public enum PropagationMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Propagate trace context in the single header x-ot-span-context.
    case envoy // = 0

    /// Propagate trace context using LightStep's native format.
    case lightstep // = 1

    /// Propagate trace context using the b3 format.
    case b3 // = 2

    /// Propagation trace context using the w3 trace-context standard.
    case traceContext // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .envoy
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .envoy
      case 1: self = .lightstep
      case 2: self = .b3
      case 3: self = .traceContext
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .envoy: return 0
      case .lightstep: return 1
      case .b3: return 2
      case .traceContext: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Envoy_Config_Trace_V3_LightstepConfig.PropagationMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Trace_V3_LightstepConfig.PropagationMode] = [
    .envoy,
    .lightstep,
    .b3,
    .traceContext,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.trace.v3"

extension Envoy_Config_Trace_V3_LightstepConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LightstepConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collector_cluster"),
    2: .standard(proto: "access_token_file"),
    3: .standard(proto: "propagation_modes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collectorCluster) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accessTokenFile) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.propagationModes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collectorCluster.isEmpty {
      try visitor.visitSingularStringField(value: self.collectorCluster, fieldNumber: 1)
    }
    if !self.accessTokenFile.isEmpty {
      try visitor.visitSingularStringField(value: self.accessTokenFile, fieldNumber: 2)
    }
    if !self.propagationModes.isEmpty {
      try visitor.visitPackedEnumField(value: self.propagationModes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Trace_V3_LightstepConfig, rhs: Envoy_Config_Trace_V3_LightstepConfig) -> Bool {
    if lhs.collectorCluster != rhs.collectorCluster {return false}
    if lhs.accessTokenFile != rhs.accessTokenFile {return false}
    if lhs.propagationModes != rhs.propagationModes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Trace_V3_LightstepConfig.PropagationMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENVOY"),
    1: .same(proto: "LIGHTSTEP"),
    2: .same(proto: "B3"),
    3: .same(proto: "TRACE_CONTEXT"),
  ]
}
