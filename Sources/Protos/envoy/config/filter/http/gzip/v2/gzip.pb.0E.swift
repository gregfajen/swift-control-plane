// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/filter/http/gzip/v2/gzip.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [#next-free-field: 11]
public struct Envoy_Config_Filter_Http_Gzip_V2_Gzip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
  /// use more memory, but are faster and produce better compression results. The default value is 5.
  public var memoryLevel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _memoryLevel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_memoryLevel = newValue}
  }
  /// Returns true if `memoryLevel` has been explicitly set.
  public var hasMemoryLevel: Bool {return self._memoryLevel != nil}
  /// Clears the value of `memoryLevel`. Subsequent reads from it will return its default value.
  public mutating func clearMemoryLevel() {self._memoryLevel = nil}

  /// Minimum response length, in bytes, which will trigger compression. The default value is 30.
  /// .. attention:
  ///
  ///    **This field is deprecated**. Set the `compressor` field instead.
  public var contentLength: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _contentLength ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_contentLength = newValue}
  }
  /// Returns true if `contentLength` has been explicitly set.
  public var hasContentLength: Bool {return self._contentLength != nil}
  /// Clears the value of `contentLength`. Subsequent reads from it will return its default value.
  public mutating func clearContentLength() {self._contentLength = nil}

  /// A value used for selecting the zlib compression level. This setting will affect speed and
  /// amount of compression applied to the content. "BEST" provides higher compression at the cost of
  /// higher latency, "SPEED" provides lower compression with minimum impact on response time.
  /// "DEFAULT" provides an optimal result between speed and compression. This field will be set to
  /// "DEFAULT" if not specified.
  public var compressionLevel: Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel.Enum = .default

  /// A value used for selecting the zlib compression strategy which is directly related to the
  /// characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
  /// there are situations which changing this parameter might produce better results. For example,
  /// run-length encoding (RLE) is typically used when the content is known for having sequences
  /// which same data occurs many consecutive times. For more information about each strategy, please
  /// refer to zlib manual.
  public var compressionStrategy: Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionStrategy = .default

  /// Set of strings that allows specifying which mime-types yield compression; e.g.,
  /// application/json, text/html, etc. When this field is not defined, compression will be applied
  /// to the following mime-types: "application/javascript", "application/json",
  /// "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
  /// .. attention:
  ///
  ///    **This field is deprecated**. Set the `compressor` field instead.
  public var contentType: [String] = []

  /// If true, disables compression when the response contains an etag header. When it is false, the
  /// filter will preserve weak etags and remove the ones that require strong validation.
  /// .. attention:
  ///
  ///    **This field is deprecated**. Set the `compressor` field instead.
  public var disableOnEtagHeader: Bool = false

  /// If true, removes accept-encoding from the request headers before dispatching it to the upstream
  /// so that responses do not get compressed before reaching the filter.
  /// .. attention:
  ///
  ///    **This field is deprecated**. Set the `compressor` field instead.
  public var removeAcceptEncodingHeader: Bool = false

  /// Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
  /// Larger window results in better compression at the expense of memory usage. The default is 12
  /// which will produce a 4096 bytes window. For more details about this parameter, please refer to
  /// zlib manual > deflateInit2.
  public var windowBits: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _windowBits ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_windowBits = newValue}
  }
  /// Returns true if `windowBits` has been explicitly set.
  public var hasWindowBits: Bool {return self._windowBits != nil}
  /// Clears the value of `windowBits`. Subsequent reads from it will return its default value.
  public mutating func clearWindowBits() {self._windowBits = nil}

  /// Set of configuration parameters common for all compression filters. If this field is set then
  /// the fields `content_length`, `content_type`, `disable_on_etag_header` and
  /// `remove_accept_encoding_header` are ignored.
  public var compressor: Envoy_Config_Filter_Http_Compressor_V2_Compressor {
    get {return _compressor ?? Envoy_Config_Filter_Http_Compressor_V2_Compressor()}
    set {_compressor = newValue}
  }
  /// Returns true if `compressor` has been explicitly set.
  public var hasCompressor: Bool {return self._compressor != nil}
  /// Clears the value of `compressor`. Subsequent reads from it will return its default value.
  public mutating func clearCompressor() {self._compressor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum CompressionStrategy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case `default` // = 0
    case filtered // = 1
    case huffman // = 2
    case rle // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .default
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .filtered
      case 2: self = .huffman
      case 3: self = .rle
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .default: return 0
      case .filtered: return 1
      case .huffman: return 2
      case .rle: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct CompressionLevel {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Enum: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case `default` // = 0
      case best // = 1
      case speed // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .default
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .default
        case 1: self = .best
        case 2: self = .speed
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .default: return 0
        case .best: return 1
        case .speed: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _memoryLevel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _contentLength: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _windowBits: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _compressor: Envoy_Config_Filter_Http_Compressor_V2_Compressor? = nil
}

#if swift(>=4.2)

extension Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionStrategy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionStrategy] = [
    .default,
    .filtered,
    .huffman,
    .rle,
  ]
}

extension Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel.Enum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel.Enum] = [
    .default,
    .best,
    .speed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.filter.http.gzip.v2"

extension Envoy_Config_Filter_Http_Gzip_V2_Gzip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Gzip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "memory_level"),
    2: .standard(proto: "content_length"),
    3: .standard(proto: "compression_level"),
    4: .standard(proto: "compression_strategy"),
    6: .standard(proto: "content_type"),
    7: .standard(proto: "disable_on_etag_header"),
    8: .standard(proto: "remove_accept_encoding_header"),
    9: .standard(proto: "window_bits"),
    10: .same(proto: "compressor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._memoryLevel) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._contentLength) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.compressionLevel) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.compressionStrategy) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.contentType) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.disableOnEtagHeader) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.removeAcceptEncodingHeader) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._windowBits) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._compressor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._memoryLevel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._contentLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.compressionLevel != .default {
      try visitor.visitSingularEnumField(value: self.compressionLevel, fieldNumber: 3)
    }
    if self.compressionStrategy != .default {
      try visitor.visitSingularEnumField(value: self.compressionStrategy, fieldNumber: 4)
    }
    if !self.contentType.isEmpty {
      try visitor.visitRepeatedStringField(value: self.contentType, fieldNumber: 6)
    }
    if self.disableOnEtagHeader != false {
      try visitor.visitSingularBoolField(value: self.disableOnEtagHeader, fieldNumber: 7)
    }
    if self.removeAcceptEncodingHeader != false {
      try visitor.visitSingularBoolField(value: self.removeAcceptEncodingHeader, fieldNumber: 8)
    }
    if let v = self._windowBits {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._compressor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Http_Gzip_V2_Gzip, rhs: Envoy_Config_Filter_Http_Gzip_V2_Gzip) -> Bool {
    if lhs._memoryLevel != rhs._memoryLevel {return false}
    if lhs._contentLength != rhs._contentLength {return false}
    if lhs.compressionLevel != rhs.compressionLevel {return false}
    if lhs.compressionStrategy != rhs.compressionStrategy {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.disableOnEtagHeader != rhs.disableOnEtagHeader {return false}
    if lhs.removeAcceptEncodingHeader != rhs.removeAcceptEncodingHeader {return false}
    if lhs._windowBits != rhs._windowBits {return false}
    if lhs._compressor != rhs._compressor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "FILTERED"),
    2: .same(proto: "HUFFMAN"),
    3: .same(proto: "RLE"),
  ]
}

extension Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Config_Filter_Http_Gzip_V2_Gzip.protoMessageName + ".CompressionLevel"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel, rhs: Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Filter_Http_Gzip_V2_Gzip.CompressionLevel.Enum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "BEST"),
    2: .same(proto: "SPEED"),
  ]
}
