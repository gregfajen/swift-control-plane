// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/filter/network/zookeeper_proxy/v1alpha1/zookeeper_proxy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Config_Filter_Network_ZookeeperProxy_V1alpha1_ZooKeeperProxy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The human readable prefix to use when emitting :ref:`statistics
  /// <config_network_filters_zookeeper_proxy_stats>`.
  public var statPrefix: String = String()

  /// [#not-implemented-hide:] The optional path to use for writing ZooKeeper access logs.
  /// If the access log field is empty, access logs will not be written.
  public var accessLog: String = String()

  /// Messages — requests, responses and events — that are bigger than this value will
  /// be ignored. If it is not set, the default value is 1Mb.
  ///
  /// The value here should match the jute.maxbuffer property in your cluster configuration:
  ///
  /// https://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html#Unsafe+Options
  ///
  /// if that is set. If it isn't, ZooKeeper's default is also 1Mb.
  public var maxPacketBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _maxPacketBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_maxPacketBytes = newValue}
  }
  /// Returns true if `maxPacketBytes` has been explicitly set.
  public var hasMaxPacketBytes: Bool {return self._maxPacketBytes != nil}
  /// Clears the value of `maxPacketBytes`. Subsequent reads from it will return its default value.
  public mutating func clearMaxPacketBytes() {self._maxPacketBytes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxPacketBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.filter.network.zookeeper_proxy.v1alpha1"

extension Envoy_Config_Filter_Network_ZookeeperProxy_V1alpha1_ZooKeeperProxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ZooKeeperProxy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stat_prefix"),
    2: .standard(proto: "access_log"),
    3: .standard(proto: "max_packet_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.statPrefix) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accessLog) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._maxPacketBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.statPrefix, fieldNumber: 1)
    }
    if !self.accessLog.isEmpty {
      try visitor.visitSingularStringField(value: self.accessLog, fieldNumber: 2)
    }
    if let v = self._maxPacketBytes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Network_ZookeeperProxy_V1alpha1_ZooKeeperProxy, rhs: Envoy_Config_Filter_Network_ZookeeperProxy_V1alpha1_ZooKeeperProxy) -> Bool {
    if lhs.statPrefix != rhs.statPrefix {return false}
    if lhs.accessLog != rhs.accessLog {return false}
    if lhs._maxPacketBytes != rhs._maxPacketBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
