// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/filter/network/client_ssl_auth/v2/client_ssl_auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Config_Filter_Network_ClientSslAuth_V2_ClientSSLAuth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The :ref:`cluster manager <arch_overview_cluster_manager>` cluster that runs
  /// the authentication service. The filter will connect to the service every 60s to fetch the list
  /// of principals. The service must support the expected :ref:`REST API
  /// <config_network_filters_client_ssl_auth_rest_api>`.
  public var authApiCluster: String = String()

  /// The prefix to use when emitting :ref:`statistics
  /// <config_network_filters_client_ssl_auth_stats>`.
  public var statPrefix: String = String()

  /// Time in milliseconds between principal refreshes from the
  /// authentication service. Default is 60000 (60s). The actual fetch time
  /// will be this value plus a random jittered value between
  /// 0-refresh_delay_ms milliseconds.
  public var refreshDelay: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _refreshDelay ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_refreshDelay = newValue}
  }
  /// Returns true if `refreshDelay` has been explicitly set.
  public var hasRefreshDelay: Bool {return self._refreshDelay != nil}
  /// Clears the value of `refreshDelay`. Subsequent reads from it will return its default value.
  public mutating func clearRefreshDelay() {self._refreshDelay = nil}

  /// An optional list of IP address and subnet masks that should be white
  /// listed for access by the filter. If no list is provided, there is no
  /// IP allowlist.
  public var ipWhiteList: [Envoy_Api_V2_Core_CidrRange] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _refreshDelay: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.filter.network.client_ssl_auth.v2"

extension Envoy_Config_Filter_Network_ClientSslAuth_V2_ClientSSLAuth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientSSLAuth"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auth_api_cluster"),
    2: .standard(proto: "stat_prefix"),
    3: .standard(proto: "refresh_delay"),
    4: .standard(proto: "ip_white_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authApiCluster) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.statPrefix) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._refreshDelay) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.ipWhiteList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authApiCluster.isEmpty {
      try visitor.visitSingularStringField(value: self.authApiCluster, fieldNumber: 1)
    }
    if !self.statPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.statPrefix, fieldNumber: 2)
    }
    if let v = self._refreshDelay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.ipWhiteList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ipWhiteList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Network_ClientSslAuth_V2_ClientSSLAuth, rhs: Envoy_Config_Filter_Network_ClientSslAuth_V2_ClientSSLAuth) -> Bool {
    if lhs.authApiCluster != rhs.authApiCluster {return false}
    if lhs.statPrefix != rhs.statPrefix {return false}
    if lhs._refreshDelay != rhs._refreshDelay {return false}
    if lhs.ipWhiteList != rhs.ipWhiteList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
