// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Thrift transport types supported by Envoy.
public enum Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_TransportType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// For downstream connections, the Thrift proxy will attempt to determine which transport to use.
  /// For upstream connections, the Thrift proxy will use same transport as the downstream
  /// connection.
  case autoTransport // = 0

  /// The Thrift proxy will use the Thrift framed transport.
  case framed // = 1

  /// The Thrift proxy will use the Thrift unframed transport.
  case unframed // = 2

  /// The Thrift proxy will assume the client is using the Thrift header transport.
  case header // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .autoTransport
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .autoTransport
    case 1: self = .framed
    case 2: self = .unframed
    case 3: self = .header
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .autoTransport: return 0
    case .framed: return 1
    case .unframed: return 2
    case .header: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_TransportType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_TransportType] = [
    .autoTransport,
    .framed,
    .unframed,
    .header,
  ]
}

#endif  // swift(>=4.2)

/// Thrift Protocol types supported by Envoy.
public enum Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ProtocolType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// For downstream connections, the Thrift proxy will attempt to determine which protocol to use.
  /// Note that the older, non-strict (or lax) binary protocol is not included in automatic protocol
  /// detection. For upstream connections, the Thrift proxy will use the same protocol as the
  /// downstream connection.
  case autoProtocol // = 0

  /// The Thrift proxy will use the Thrift binary protocol.
  case binary // = 1

  /// The Thrift proxy will use Thrift non-strict binary protocol.
  case laxBinary // = 2

  /// The Thrift proxy will use the Thrift compact protocol.
  case compact // = 3

  /// The Thrift proxy will use the Thrift "Twitter" protocol implemented by the finagle library.
  case twitter // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .autoProtocol
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .autoProtocol
    case 1: self = .binary
    case 2: self = .laxBinary
    case 3: self = .compact
    case 4: self = .twitter
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .autoProtocol: return 0
    case .binary: return 1
    case .laxBinary: return 2
    case .compact: return 3
    case .twitter: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ProtocolType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ProtocolType] = [
    .autoProtocol,
    .binary,
    .laxBinary,
    .compact,
    .twitter,
  ]
}

#endif  // swift(>=4.2)

/// [#next-free-field: 6]
public struct Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProxy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Supplies the type of transport that the Thrift proxy should use. Defaults to
  /// :ref:`AUTO_TRANSPORT<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.TransportType.AUTO_TRANSPORT>`.
  public var transport: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_TransportType = .autoTransport

  /// Supplies the type of protocol that the Thrift proxy should use. Defaults to
  /// :ref:`AUTO_PROTOCOL<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.ProtocolType.AUTO_PROTOCOL>`.
  public var `protocol`: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ProtocolType = .autoProtocol

  /// The human readable prefix to use when emitting statistics.
  public var statPrefix: String = String()

  /// The route table for the connection manager is static and is specified in this property.
  public var routeConfig: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_RouteConfiguration {
    get {return _routeConfig ?? Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_RouteConfiguration()}
    set {_routeConfig = newValue}
  }
  /// Returns true if `routeConfig` has been explicitly set.
  public var hasRouteConfig: Bool {return self._routeConfig != nil}
  /// Clears the value of `routeConfig`. Subsequent reads from it will return its default value.
  public mutating func clearRouteConfig() {self._routeConfig = nil}

  /// A list of individual Thrift filters that make up the filter chain for requests made to the
  /// Thrift proxy. Order matters as the filters are processed sequentially. For backwards
  /// compatibility, if no thrift_filters are specified, a default Thrift router filter
  /// (`envoy.filters.thrift.router`) is used.
  public var thriftFilters: [Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _routeConfig: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_RouteConfiguration? = nil
}

/// ThriftFilter configures a Thrift filter.
public struct Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the filter to instantiate. The name must match a supported
  /// filter. The built-in filters are:
  ///
  /// [#comment:TODO(zuercher): Auto generate the following list]
  /// * :ref:`envoy.filters.thrift.router <config_thrift_filters_router>`
  /// * :ref:`envoy.filters.thrift.rate_limit <config_thrift_filters_rate_limit>`
  public var name: String = String()

  /// Filter specific configuration which depends on the filter being instantiated. See the supported
  /// filters for further documentation.
  public var configType: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter.OneOf_ConfigType? = nil

  public var config: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .config(let v)? = configType {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {configType = .config(newValue)}
  }

  public var typedConfig: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .typedConfig(let v)? = configType {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {configType = .typedConfig(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Filter specific configuration which depends on the filter being instantiated. See the supported
  /// filters for further documentation.
  public enum OneOf_ConfigType: Equatable {
    case config(SwiftProtobuf.Google_Protobuf_Struct)
    case typedConfig(SwiftProtobuf.Google_Protobuf_Any)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter.OneOf_ConfigType, rhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter.OneOf_ConfigType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.config, .config): return {
        guard case .config(let l) = lhs, case .config(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.typedConfig, .typedConfig): return {
        guard case .typedConfig(let l) = lhs, case .typedConfig(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// ThriftProtocolOptions specifies Thrift upstream protocol options. This object is used in
/// in
/// :ref:`typed_extension_protocol_options<envoy_api_field_Cluster.typed_extension_protocol_options>`,
/// keyed by the name `envoy.filters.network.thrift_proxy`.
public struct Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProtocolOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Supplies the type of transport that the Thrift proxy should use for upstream connections.
  /// Selecting
  /// :ref:`AUTO_TRANSPORT<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.TransportType.AUTO_TRANSPORT>`,
  /// which is the default, causes the proxy to use the same transport as the downstream connection.
  public var transport: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_TransportType = .autoTransport

  /// Supplies the type of protocol that the Thrift proxy should use for upstream connections.
  /// Selecting
  /// :ref:`AUTO_PROTOCOL<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.ProtocolType.AUTO_PROTOCOL>`,
  /// which is the default, causes the proxy to use the same protocol as the downstream connection.
  public var `protocol`: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ProtocolType = .autoProtocol

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.filter.network.thrift_proxy.v2alpha1"

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_TransportType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTO_TRANSPORT"),
    1: .same(proto: "FRAMED"),
    2: .same(proto: "UNFRAMED"),
    3: .same(proto: "HEADER"),
  ]
}

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ProtocolType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTO_PROTOCOL"),
    1: .same(proto: "BINARY"),
    2: .same(proto: "LAX_BINARY"),
    3: .same(proto: "COMPACT"),
    4: .same(proto: "TWITTER"),
  ]
}

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThriftProxy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "transport"),
    3: .same(proto: "protocol"),
    1: .standard(proto: "stat_prefix"),
    4: .standard(proto: "route_config"),
    5: .standard(proto: "thrift_filters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.statPrefix) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.transport) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.`protocol`) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._routeConfig) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.thriftFilters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.statPrefix, fieldNumber: 1)
    }
    if self.transport != .autoTransport {
      try visitor.visitSingularEnumField(value: self.transport, fieldNumber: 2)
    }
    if self.`protocol` != .autoProtocol {
      try visitor.visitSingularEnumField(value: self.`protocol`, fieldNumber: 3)
    }
    if let v = self._routeConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.thriftFilters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.thriftFilters, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProxy, rhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProxy) -> Bool {
    if lhs.transport != rhs.transport {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.statPrefix != rhs.statPrefix {return false}
    if lhs._routeConfig != rhs._routeConfig {return false}
    if lhs.thriftFilters != rhs.thriftFilters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThriftFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "config"),
    3: .standard(proto: "typed_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try {
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        if let current = self.configType {
          try decoder.handleConflictingOneOf()
          if case .config(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.configType = .config(v)}
      }()
      case 3: try {
        var v: SwiftProtobuf.Google_Protobuf_Any?
        if let current = self.configType {
          try decoder.handleConflictingOneOf()
          if case .typedConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.configType = .typedConfig(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.configType {
    case .config?: try {
      guard case .config(let v)? = self.configType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .typedConfig?: try {
      guard case .typedConfig(let v)? = self.configType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter, rhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftFilter) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.configType != rhs.configType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProtocolOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThriftProtocolOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transport"),
    2: .same(proto: "protocol"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.transport) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.`protocol`) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transport != .autoTransport {
      try visitor.visitSingularEnumField(value: self.transport, fieldNumber: 1)
    }
    if self.`protocol` != .autoProtocol {
      try visitor.visitSingularEnumField(value: self.`protocol`, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProtocolOptions, rhs: Envoy_Config_Filter_Network_ThriftProxy_V2alpha1_ThriftProtocolOptions) -> Bool {
    if lhs.transport != rhs.transport {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
