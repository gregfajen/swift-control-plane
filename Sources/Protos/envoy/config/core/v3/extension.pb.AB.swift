// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/core/v3/extension.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Message type for extension configuration.
/// [#next-major-version: revisit all existing typed_config that doesn't use this wrapper.].
public struct Envoy_Config_Core_V3_TypedExtensionConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of an extension. This is not used to select the extension, instead
  /// it serves the role of an opaque identifier.
  public var name: String = String()

  /// The typed config for the extension. The type URL will be used to identify
  /// the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,
  /// the inner type URL of *TypedStruct* will be utilized. See the
  /// :ref:`extension configuration overview
  /// <config_overview_extension_configuration>` for further details.
  public var typedConfig: SwiftProtobuf.Google_Protobuf_Any {
    get {return _typedConfig ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_typedConfig = newValue}
  }
  /// Returns true if `typedConfig` has been explicitly set.
  public var hasTypedConfig: Bool {return self._typedConfig != nil}
  /// Clears the value of `typedConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTypedConfig() {self._typedConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _typedConfig: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// Configuration source specifier for a late-bound extension configuration. The
/// parent resource is warmed until all the initial extension configurations are
/// received, unless the flag to apply the default configuration is set.
/// Subsequent extension updates are atomic on a per-worker basis. Once an
/// extension configuration is applied to a request or a connection, it remains
/// constant for the duration of processing. If the initial delivery of the
/// extension configuration fails, due to a timeout for example, the optional
/// default configuration is applied. Without a default configuration, the
/// extension is disabled, until an extension configuration is received. The
/// behavior of a disabled extension depends on the context. For example, a
/// filter chain with a disabled extension filter rejects all incoming streams.
public struct Envoy_Config_Core_V3_ExtensionConfigSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var configSource: Envoy_Config_Core_V3_ConfigSource {
    get {return _storage._configSource ?? Envoy_Config_Core_V3_ConfigSource()}
    set {_uniqueStorage()._configSource = newValue}
  }
  /// Returns true if `configSource` has been explicitly set.
  public var hasConfigSource: Bool {return _storage._configSource != nil}
  /// Clears the value of `configSource`. Subsequent reads from it will return its default value.
  public mutating func clearConfigSource() {_uniqueStorage()._configSource = nil}

  /// Optional default configuration to use as the initial configuration if
  /// there is a failure to receive the initial extension configuration or if
  /// `apply_default_config_without_warming` flag is set.
  public var defaultConfig: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._defaultConfig ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._defaultConfig = newValue}
  }
  /// Returns true if `defaultConfig` has been explicitly set.
  public var hasDefaultConfig: Bool {return _storage._defaultConfig != nil}
  /// Clears the value of `defaultConfig`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultConfig() {_uniqueStorage()._defaultConfig = nil}

  /// Use the default config as the initial configuration without warming and
  /// waiting for the first discovery response. Requires the default configuration
  /// to be supplied.
  public var applyDefaultConfigWithoutWarming: Bool {
    get {return _storage._applyDefaultConfigWithoutWarming}
    set {_uniqueStorage()._applyDefaultConfigWithoutWarming = newValue}
  }

  /// A set of permitted extension type URLs. Extension configuration updates are rejected
  /// if they do not match any type URL in the set.
  public var typeUrls: [String] {
    get {return _storage._typeUrls}
    set {_uniqueStorage()._typeUrls = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.core.v3"

extension Envoy_Config_Core_V3_TypedExtensionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TypedExtensionConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "typed_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._typedConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._typedConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_TypedExtensionConfig, rhs: Envoy_Config_Core_V3_TypedExtensionConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._typedConfig != rhs._typedConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_ExtensionConfigSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExtensionConfigSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_source"),
    2: .standard(proto: "default_config"),
    3: .standard(proto: "apply_default_config_without_warming"),
    4: .standard(proto: "type_urls"),
  ]

  fileprivate class _StorageClass {
    var _configSource: Envoy_Config_Core_V3_ConfigSource? = nil
    var _defaultConfig: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _applyDefaultConfigWithoutWarming: Bool = false
    var _typeUrls: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _configSource = source._configSource
      _defaultConfig = source._defaultConfig
      _applyDefaultConfigWithoutWarming = source._applyDefaultConfigWithoutWarming
      _typeUrls = source._typeUrls
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._configSource) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._defaultConfig) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._applyDefaultConfigWithoutWarming) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._typeUrls) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._configSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._defaultConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._applyDefaultConfigWithoutWarming != false {
        try visitor.visitSingularBoolField(value: _storage._applyDefaultConfigWithoutWarming, fieldNumber: 3)
      }
      if !_storage._typeUrls.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._typeUrls, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_ExtensionConfigSource, rhs: Envoy_Config_Core_V3_ExtensionConfigSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._configSource != rhs_storage._configSource {return false}
        if _storage._defaultConfig != rhs_storage._defaultConfig {return false}
        if _storage._applyDefaultConfigWithoutWarming != rhs_storage._applyDefaultConfigWithoutWarming {return false}
        if _storage._typeUrls != rhs_storage._typeUrls {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
