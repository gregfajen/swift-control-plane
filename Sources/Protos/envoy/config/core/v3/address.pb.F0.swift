// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/core/v3/address.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Envoy_Config_Core_V3_Pipe {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unix Domain Socket path. On Linux, paths starting with '@' will use the
  /// abstract namespace. The starting '@' is replaced by a null byte by Envoy.
  /// Paths starting with '@' will result in an error in environments other than
  /// Linux.
  public var path: String = String()

  /// The mode for the Pipe. Not applicable for abstract sockets.
  public var mode: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// [#not-implemented-hide:] The address represents an envoy internal listener.
/// TODO(lambdai): Make this address available for listener and endpoint.
/// TODO(asraa): When address available, remove workaround from test/server/server_fuzz_test.cc:30.
public struct Envoy_Config_Core_V3_EnvoyInternalAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var addressNameSpecifier: Envoy_Config_Core_V3_EnvoyInternalAddress.OneOf_AddressNameSpecifier? = nil

  /// [#not-implemented-hide:] The :ref:`listener name <envoy_api_field_config.listener.v3.Listener.name>` of the destination internal listener.
  public var serverListenerName: String {
    get {
      if case .serverListenerName(let v)? = addressNameSpecifier {return v}
      return String()
    }
    set {addressNameSpecifier = .serverListenerName(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_AddressNameSpecifier: Equatable {
    /// [#not-implemented-hide:] The :ref:`listener name <envoy_api_field_config.listener.v3.Listener.name>` of the destination internal listener.
    case serverListenerName(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Config_Core_V3_EnvoyInternalAddress.OneOf_AddressNameSpecifier, rhs: Envoy_Config_Core_V3_EnvoyInternalAddress.OneOf_AddressNameSpecifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.serverListenerName, .serverListenerName): return {
        guard case .serverListenerName(let l) = lhs, case .serverListenerName(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// [#next-free-field: 7]
public struct Envoy_Config_Core_V3_SocketAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var `protocol`: Envoy_Config_Core_V3_SocketAddress.ProtocolEnum = .tcp

  /// The address for this socket. :ref:`Listeners <config_listeners>` will bind
  /// to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
  /// to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
  /// It is possible to distinguish a Listener address via the prefix/suffix matching
  /// in :ref:`FilterChainMatch <envoy_api_msg_config.listener.v3.FilterChainMatch>`.] When used
  /// within an upstream :ref:`BindConfig <envoy_api_msg_config.core.v3.BindConfig>`, the address
  /// controls the source address of outbound connections. For :ref:`clusters
  /// <envoy_api_msg_config.cluster.v3.Cluster>`, the cluster type determines whether the
  /// address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS
  /// (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized
  /// via :ref:`resolver_name <envoy_api_field_config.core.v3.SocketAddress.resolver_name>`.
  public var address: String = String()

  public var portSpecifier: Envoy_Config_Core_V3_SocketAddress.OneOf_PortSpecifier? = nil

  public var portValue: UInt32 {
    get {
      if case .portValue(let v)? = portSpecifier {return v}
      return 0
    }
    set {portSpecifier = .portValue(newValue)}
  }

  /// This is only valid if :ref:`resolver_name
  /// <envoy_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the
  /// named resolver is capable of named port resolution.
  public var namedPort: String {
    get {
      if case .namedPort(let v)? = portSpecifier {return v}
      return String()
    }
    set {portSpecifier = .namedPort(newValue)}
  }

  /// The name of the custom resolver. This must have been registered with Envoy. If
  /// this is empty, a context dependent default applies. If the address is a concrete
  /// IP address, no resolution will occur. If address is a hostname this
  /// should be set for resolution other than DNS. Specifying a custom resolver with
  /// *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime.
  public var resolverName: String = String()

  /// When binding to an IPv6 address above, this enables `IPv4 compatibility
  /// <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
  /// allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
  /// IPv6 space as ``::FFFF:<IPv4-address>``.
  public var ipv4Compat: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_PortSpecifier: Equatable {
    case portValue(UInt32)
    /// This is only valid if :ref:`resolver_name
    /// <envoy_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the
    /// named resolver is capable of named port resolution.
    case namedPort(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Config_Core_V3_SocketAddress.OneOf_PortSpecifier, rhs: Envoy_Config_Core_V3_SocketAddress.OneOf_PortSpecifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.portValue, .portValue): return {
        guard case .portValue(let l) = lhs, case .portValue(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.namedPort, .namedPort): return {
        guard case .namedPort(let l) = lhs, case .namedPort(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum ProtocolEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case tcp // = 0
    case udp // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .tcp
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .tcp
      case 1: self = .udp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .tcp: return 0
      case .udp: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Envoy_Config_Core_V3_SocketAddress.ProtocolEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Envoy_Config_Core_V3_SocketAddress.ProtocolEnum] = [
    .tcp,
    .udp,
  ]
}

#endif  // swift(>=4.2)

public struct Envoy_Config_Core_V3_TcpKeepalive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maximum number of keepalive probes to send without response before deciding
  /// the connection is dead. Default is to use the OS level configuration (unless
  /// overridden, Linux defaults to 9.)
  public var keepaliveProbes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _keepaliveProbes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_keepaliveProbes = newValue}
  }
  /// Returns true if `keepaliveProbes` has been explicitly set.
  public var hasKeepaliveProbes: Bool {return self._keepaliveProbes != nil}
  /// Clears the value of `keepaliveProbes`. Subsequent reads from it will return its default value.
  public mutating func clearKeepaliveProbes() {self._keepaliveProbes = nil}

  /// The number of seconds a connection needs to be idle before keep-alive probes
  /// start being sent. Default is to use the OS level configuration (unless
  /// overridden, Linux defaults to 7200s (i.e., 2 hours.)
  public var keepaliveTime: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _keepaliveTime ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_keepaliveTime = newValue}
  }
  /// Returns true if `keepaliveTime` has been explicitly set.
  public var hasKeepaliveTime: Bool {return self._keepaliveTime != nil}
  /// Clears the value of `keepaliveTime`. Subsequent reads from it will return its default value.
  public mutating func clearKeepaliveTime() {self._keepaliveTime = nil}

  /// The number of seconds between keep-alive probes. Default is to use the OS
  /// level configuration (unless overridden, Linux defaults to 75s.)
  public var keepaliveInterval: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _keepaliveInterval ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_keepaliveInterval = newValue}
  }
  /// Returns true if `keepaliveInterval` has been explicitly set.
  public var hasKeepaliveInterval: Bool {return self._keepaliveInterval != nil}
  /// Clears the value of `keepaliveInterval`. Subsequent reads from it will return its default value.
  public mutating func clearKeepaliveInterval() {self._keepaliveInterval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _keepaliveProbes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _keepaliveTime: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _keepaliveInterval: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

public struct Envoy_Config_Core_V3_BindConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The address to bind to when creating a socket.
  public var sourceAddress: Envoy_Config_Core_V3_SocketAddress {
    get {return _sourceAddress ?? Envoy_Config_Core_V3_SocketAddress()}
    set {_sourceAddress = newValue}
  }
  /// Returns true if `sourceAddress` has been explicitly set.
  public var hasSourceAddress: Bool {return self._sourceAddress != nil}
  /// Clears the value of `sourceAddress`. Subsequent reads from it will return its default value.
  public mutating func clearSourceAddress() {self._sourceAddress = nil}

  /// Whether to set the *IP_FREEBIND* option when creating the socket. When this
  /// flag is set to true, allows the :ref:`source_address
  /// <envoy_api_field_config.cluster.v3.UpstreamBindConfig.source_address>` to be an IP address
  /// that is not configured on the system running Envoy. When this flag is set
  /// to false, the option *IP_FREEBIND* is disabled on the socket. When this
  /// flag is not set (default), the socket is not modified, i.e. the option is
  /// neither enabled nor disabled.
  public var freebind: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _freebind ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_freebind = newValue}
  }
  /// Returns true if `freebind` has been explicitly set.
  public var hasFreebind: Bool {return self._freebind != nil}
  /// Clears the value of `freebind`. Subsequent reads from it will return its default value.
  public mutating func clearFreebind() {self._freebind = nil}

  /// Additional socket options that may not be present in Envoy source code or
  /// precompiled binaries.
  public var socketOptions: [Envoy_Config_Core_V3_SocketOption] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sourceAddress: Envoy_Config_Core_V3_SocketAddress? = nil
  fileprivate var _freebind: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Addresses specify either a logical or physical address and port, which are
/// used to tell Envoy where to bind/listen, connect to upstream and find
/// management servers.
public struct Envoy_Config_Core_V3_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var address: Envoy_Config_Core_V3_Address.OneOf_Address? = nil

  public var socketAddress: Envoy_Config_Core_V3_SocketAddress {
    get {
      if case .socketAddress(let v)? = address {return v}
      return Envoy_Config_Core_V3_SocketAddress()
    }
    set {address = .socketAddress(newValue)}
  }

  public var pipe: Envoy_Config_Core_V3_Pipe {
    get {
      if case .pipe(let v)? = address {return v}
      return Envoy_Config_Core_V3_Pipe()
    }
    set {address = .pipe(newValue)}
  }

  /// [#not-implemented-hide:]
  public var envoyInternalAddress: Envoy_Config_Core_V3_EnvoyInternalAddress {
    get {
      if case .envoyInternalAddress(let v)? = address {return v}
      return Envoy_Config_Core_V3_EnvoyInternalAddress()
    }
    set {address = .envoyInternalAddress(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Address: Equatable {
    case socketAddress(Envoy_Config_Core_V3_SocketAddress)
    case pipe(Envoy_Config_Core_V3_Pipe)
    /// [#not-implemented-hide:]
    case envoyInternalAddress(Envoy_Config_Core_V3_EnvoyInternalAddress)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Config_Core_V3_Address.OneOf_Address, rhs: Envoy_Config_Core_V3_Address.OneOf_Address) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.socketAddress, .socketAddress): return {
        guard case .socketAddress(let l) = lhs, case .socketAddress(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pipe, .pipe): return {
        guard case .pipe(let l) = lhs, case .pipe(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.envoyInternalAddress, .envoyInternalAddress): return {
        guard case .envoyInternalAddress(let l) = lhs, case .envoyInternalAddress(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// CidrRange specifies an IP Address and a prefix length to construct
/// the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
public struct Envoy_Config_Core_V3_CidrRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``.
  public var addressPrefix: String = String()

  /// Length of prefix, e.g. 0, 32.
  public var prefixLen: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _prefixLen ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_prefixLen = newValue}
  }
  /// Returns true if `prefixLen` has been explicitly set.
  public var hasPrefixLen: Bool {return self._prefixLen != nil}
  /// Clears the value of `prefixLen`. Subsequent reads from it will return its default value.
  public mutating func clearPrefixLen() {self._prefixLen = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _prefixLen: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.core.v3"

extension Envoy_Config_Core_V3_Pipe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pipe"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.mode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if self.mode != 0 {
      try visitor.visitSingularUInt32Field(value: self.mode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_Pipe, rhs: Envoy_Config_Core_V3_Pipe) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_EnvoyInternalAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvoyInternalAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_listener_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.addressNameSpecifier != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.addressNameSpecifier = .serverListenerName(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .serverListenerName(let v)? = self.addressNameSpecifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_EnvoyInternalAddress, rhs: Envoy_Config_Core_V3_EnvoyInternalAddress) -> Bool {
    if lhs.addressNameSpecifier != rhs.addressNameSpecifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_SocketAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SocketAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol"),
    2: .same(proto: "address"),
    3: .standard(proto: "port_value"),
    4: .standard(proto: "named_port"),
    5: .standard(proto: "resolver_name"),
    6: .standard(proto: "ipv4_compat"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.`protocol`) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try {
        if self.portSpecifier != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.portSpecifier = .portValue(v)}
      }()
      case 4: try {
        if self.portSpecifier != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.portSpecifier = .namedPort(v)}
      }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.resolverName) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.ipv4Compat) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.`protocol` != .tcp {
      try visitor.visitSingularEnumField(value: self.`protocol`, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.portSpecifier {
    case .portValue?: try {
      guard case .portValue(let v)? = self.portSpecifier else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }()
    case .namedPort?: try {
      guard case .namedPort(let v)? = self.portSpecifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if !self.resolverName.isEmpty {
      try visitor.visitSingularStringField(value: self.resolverName, fieldNumber: 5)
    }
    if self.ipv4Compat != false {
      try visitor.visitSingularBoolField(value: self.ipv4Compat, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_SocketAddress, rhs: Envoy_Config_Core_V3_SocketAddress) -> Bool {
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.address != rhs.address {return false}
    if lhs.portSpecifier != rhs.portSpecifier {return false}
    if lhs.resolverName != rhs.resolverName {return false}
    if lhs.ipv4Compat != rhs.ipv4Compat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_SocketAddress.ProtocolEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TCP"),
    1: .same(proto: "UDP"),
  ]
}

extension Envoy_Config_Core_V3_TcpKeepalive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TcpKeepalive"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "keepalive_probes"),
    2: .standard(proto: "keepalive_time"),
    3: .standard(proto: "keepalive_interval"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._keepaliveProbes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._keepaliveTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._keepaliveInterval) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._keepaliveProbes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._keepaliveTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._keepaliveInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_TcpKeepalive, rhs: Envoy_Config_Core_V3_TcpKeepalive) -> Bool {
    if lhs._keepaliveProbes != rhs._keepaliveProbes {return false}
    if lhs._keepaliveTime != rhs._keepaliveTime {return false}
    if lhs._keepaliveInterval != rhs._keepaliveInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_BindConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BindConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_address"),
    2: .same(proto: "freebind"),
    3: .standard(proto: "socket_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sourceAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._freebind) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.socketOptions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sourceAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._freebind {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.socketOptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.socketOptions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_BindConfig, rhs: Envoy_Config_Core_V3_BindConfig) -> Bool {
    if lhs._sourceAddress != rhs._sourceAddress {return false}
    if lhs._freebind != rhs._freebind {return false}
    if lhs.socketOptions != rhs.socketOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "socket_address"),
    2: .same(proto: "pipe"),
    3: .standard(proto: "envoy_internal_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Envoy_Config_Core_V3_SocketAddress?
        if let current = self.address {
          try decoder.handleConflictingOneOf()
          if case .socketAddress(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.address = .socketAddress(v)}
      }()
      case 2: try {
        var v: Envoy_Config_Core_V3_Pipe?
        if let current = self.address {
          try decoder.handleConflictingOneOf()
          if case .pipe(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.address = .pipe(v)}
      }()
      case 3: try {
        var v: Envoy_Config_Core_V3_EnvoyInternalAddress?
        if let current = self.address {
          try decoder.handleConflictingOneOf()
          if case .envoyInternalAddress(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.address = .envoyInternalAddress(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.address {
    case .socketAddress?: try {
      guard case .socketAddress(let v)? = self.address else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pipe?: try {
      guard case .pipe(let v)? = self.address else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .envoyInternalAddress?: try {
      guard case .envoyInternalAddress(let v)? = self.address else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_Address, rhs: Envoy_Config_Core_V3_Address) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Config_Core_V3_CidrRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CidrRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "address_prefix"),
    2: .standard(proto: "prefix_len"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.addressPrefix) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._prefixLen) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addressPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.addressPrefix, fieldNumber: 1)
    }
    if let v = self._prefixLen {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V3_CidrRange, rhs: Envoy_Config_Core_V3_CidrRange) -> Bool {
    if lhs.addressPrefix != rhs.addressPrefix {return false}
    if lhs._prefixLen != rhs._prefixLen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
