// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/core/v4alpha/backoff.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration defining a jittered exponential back off strategy.
public struct Envoy_Config_Core_V4alpha_BackoffStrategy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The base interval to be used for the next back off computation. It should
  /// be greater than zero and less than or equal to :ref:`max_interval
  /// <envoy_api_field_config.core.v4alpha.BackoffStrategy.max_interval>`.
  public var baseInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _baseInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_baseInterval = newValue}
  }
  /// Returns true if `baseInterval` has been explicitly set.
  public var hasBaseInterval: Bool {return self._baseInterval != nil}
  /// Clears the value of `baseInterval`. Subsequent reads from it will return its default value.
  public mutating func clearBaseInterval() {self._baseInterval = nil}

  /// Specifies the maximum interval between retries. This parameter is optional,
  /// but must be greater than or equal to the :ref:`base_interval
  /// <envoy_api_field_config.core.v4alpha.BackoffStrategy.base_interval>` if set. The default
  /// is 10 times the :ref:`base_interval
  /// <envoy_api_field_config.core.v4alpha.BackoffStrategy.base_interval>`.
  public var maxInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxInterval = newValue}
  }
  /// Returns true if `maxInterval` has been explicitly set.
  public var hasMaxInterval: Bool {return self._maxInterval != nil}
  /// Clears the value of `maxInterval`. Subsequent reads from it will return its default value.
  public mutating func clearMaxInterval() {self._maxInterval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _baseInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _maxInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.core.v4alpha"

extension Envoy_Config_Core_V4alpha_BackoffStrategy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BackoffStrategy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_interval"),
    2: .standard(proto: "max_interval"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseInterval) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxInterval) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._maxInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V4alpha_BackoffStrategy, rhs: Envoy_Config_Core_V4alpha_BackoffStrategy) -> Bool {
    if lhs._baseInterval != rhs._baseInterval {return false}
    if lhs._maxInterval != rhs._maxInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
