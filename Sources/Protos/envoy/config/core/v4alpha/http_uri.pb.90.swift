// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/core/v4alpha/http_uri.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Envoy external URI descriptor
public struct Envoy_Config_Core_V4alpha_HttpUri {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The HTTP server URI. It should be a full FQDN with protocol, host and path.
  ///
  /// Example:
  ///
  /// .. code-block:: yaml
  ///
  ///    uri: https://www.googleapis.com/oauth2/v1/certs
  public var uri: String = String()

  /// Specify how `uri` is to be fetched. Today, this requires an explicit
  /// cluster, but in the future we may support dynamic cluster creation or
  /// inline DNS resolution. See `issue
  /// <https://github.com/envoyproxy/envoy/issues/1606>`_.
  public var httpUpstreamType: Envoy_Config_Core_V4alpha_HttpUri.OneOf_HTTPUpstreamType? = nil

  /// A cluster is created in the Envoy "cluster_manager" config
  /// section. This field specifies the cluster name.
  ///
  /// Example:
  ///
  /// .. code-block:: yaml
  ///
  ///    cluster: jwks_cluster
  public var cluster: String {
    get {
      if case .cluster(let v)? = httpUpstreamType {return v}
      return String()
    }
    set {httpUpstreamType = .cluster(newValue)}
  }

  /// Sets the maximum duration in milliseconds that a response can take to arrive upon request.
  public var timeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _timeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  public var hasTimeout: Bool {return self._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  public mutating func clearTimeout() {self._timeout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specify how `uri` is to be fetched. Today, this requires an explicit
  /// cluster, but in the future we may support dynamic cluster creation or
  /// inline DNS resolution. See `issue
  /// <https://github.com/envoyproxy/envoy/issues/1606>`_.
  public enum OneOf_HTTPUpstreamType: Equatable {
    /// A cluster is created in the Envoy "cluster_manager" config
    /// section. This field specifies the cluster name.
    ///
    /// Example:
    ///
    /// .. code-block:: yaml
    ///
    ///    cluster: jwks_cluster
    case cluster(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Config_Core_V4alpha_HttpUri.OneOf_HTTPUpstreamType, rhs: Envoy_Config_Core_V4alpha_HttpUri.OneOf_HTTPUpstreamType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.cluster, .cluster): return {
        guard case .cluster(let l) = lhs, case .cluster(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _timeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.core.v4alpha"

extension Envoy_Config_Core_V4alpha_HttpUri: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HttpUri"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "cluster"),
    3: .same(proto: "timeout"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try {
        if self.httpUpstreamType != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.httpUpstreamType = .cluster(v)}
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timeout) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if case .cluster(let v)? = self.httpUpstreamType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._timeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Core_V4alpha_HttpUri, rhs: Envoy_Config_Core_V4alpha_HttpUri) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.httpUpstreamType != rhs.httpUpstreamType {return false}
    if lhs._timeout != rhs._timeout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
