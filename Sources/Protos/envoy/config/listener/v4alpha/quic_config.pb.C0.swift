// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/config/listener/v4alpha/quic_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration specific to the QUIC protocol.
/// Next id: 5
public struct Envoy_Config_Listener_V4alpha_QuicProtocolOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maximum number of streams that the client can negotiate per connection. 100
  /// if not specified.
  public var maxConcurrentStreams: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _maxConcurrentStreams ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_maxConcurrentStreams = newValue}
  }
  /// Returns true if `maxConcurrentStreams` has been explicitly set.
  public var hasMaxConcurrentStreams: Bool {return self._maxConcurrentStreams != nil}
  /// Clears the value of `maxConcurrentStreams`. Subsequent reads from it will return its default value.
  public mutating func clearMaxConcurrentStreams() {self._maxConcurrentStreams = nil}

  /// Maximum number of milliseconds that connection will be alive when there is
  /// no network activity. 300000ms if not specified.
  public var idleTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _idleTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_idleTimeout = newValue}
  }
  /// Returns true if `idleTimeout` has been explicitly set.
  public var hasIdleTimeout: Bool {return self._idleTimeout != nil}
  /// Clears the value of `idleTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearIdleTimeout() {self._idleTimeout = nil}

  /// Connection timeout in milliseconds before the crypto handshake is finished.
  /// 20000ms if not specified.
  public var cryptoHandshakeTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _cryptoHandshakeTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_cryptoHandshakeTimeout = newValue}
  }
  /// Returns true if `cryptoHandshakeTimeout` has been explicitly set.
  public var hasCryptoHandshakeTimeout: Bool {return self._cryptoHandshakeTimeout != nil}
  /// Clears the value of `cryptoHandshakeTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearCryptoHandshakeTimeout() {self._cryptoHandshakeTimeout = nil}

  /// Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
  /// to enabled.
  public var enabled: Envoy_Config_Core_V4alpha_RuntimeFeatureFlag {
    get {return _enabled ?? Envoy_Config_Core_V4alpha_RuntimeFeatureFlag()}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  public var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  public mutating func clearEnabled() {self._enabled = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxConcurrentStreams: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _idleTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _cryptoHandshakeTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _enabled: Envoy_Config_Core_V4alpha_RuntimeFeatureFlag? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.config.listener.v4alpha"

extension Envoy_Config_Listener_V4alpha_QuicProtocolOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuicProtocolOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_concurrent_streams"),
    2: .standard(proto: "idle_timeout"),
    3: .standard(proto: "crypto_handshake_timeout"),
    4: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._maxConcurrentStreams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._idleTimeout) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._cryptoHandshakeTimeout) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maxConcurrentStreams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._idleTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._cryptoHandshakeTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._enabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Config_Listener_V4alpha_QuicProtocolOptions, rhs: Envoy_Config_Listener_V4alpha_QuicProtocolOptions) -> Bool {
    if lhs._maxConcurrentStreams != rhs._maxConcurrentStreams {return false}
    if lhs._idleTimeout != rhs._idleTimeout {return false}
    if lhs._cryptoHandshakeTimeout != rhs._cryptoHandshakeTimeout {return false}
    if lhs._enabled != rhs._enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
