// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/type/matcher/v3/value.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.
/// StructValue is not supported and is always not matched.
/// [#next-free-field: 7]
public struct Envoy_Type_Matcher_V3_ValueMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies how to match a value.
  public var matchPattern: OneOf_MatchPattern? {
    get {return _storage._matchPattern}
    set {_uniqueStorage()._matchPattern = newValue}
  }

  /// If specified, a match occurs if and only if the target value is a NullValue.
  public var nullMatch: Envoy_Type_Matcher_V3_ValueMatcher.NullMatch {
    get {
      if case .nullMatch(let v)? = _storage._matchPattern {return v}
      return Envoy_Type_Matcher_V3_ValueMatcher.NullMatch()
    }
    set {_uniqueStorage()._matchPattern = .nullMatch(newValue)}
  }

  /// If specified, a match occurs if and only if the target value is a double value and is
  /// matched to this field.
  public var doubleMatch: Envoy_Type_Matcher_V3_DoubleMatcher {
    get {
      if case .doubleMatch(let v)? = _storage._matchPattern {return v}
      return Envoy_Type_Matcher_V3_DoubleMatcher()
    }
    set {_uniqueStorage()._matchPattern = .doubleMatch(newValue)}
  }

  /// If specified, a match occurs if and only if the target value is a string value and is
  /// matched to this field.
  public var stringMatch: Envoy_Type_Matcher_V3_StringMatcher {
    get {
      if case .stringMatch(let v)? = _storage._matchPattern {return v}
      return Envoy_Type_Matcher_V3_StringMatcher()
    }
    set {_uniqueStorage()._matchPattern = .stringMatch(newValue)}
  }

  /// If specified, a match occurs if and only if the target value is a bool value and is equal
  /// to this field.
  public var boolMatch: Bool {
    get {
      if case .boolMatch(let v)? = _storage._matchPattern {return v}
      return false
    }
    set {_uniqueStorage()._matchPattern = .boolMatch(newValue)}
  }

  /// If specified, value match will be performed based on whether the path is referring to a
  /// valid primitive value in the metadata. If the path is referring to a non-primitive value,
  /// the result is always not matched.
  public var presentMatch: Bool {
    get {
      if case .presentMatch(let v)? = _storage._matchPattern {return v}
      return false
    }
    set {_uniqueStorage()._matchPattern = .presentMatch(newValue)}
  }

  /// If specified, a match occurs if and only if the target value is a list value and
  /// is matched to this field.
  public var listMatch: Envoy_Type_Matcher_V3_ListMatcher {
    get {
      if case .listMatch(let v)? = _storage._matchPattern {return v}
      return Envoy_Type_Matcher_V3_ListMatcher()
    }
    set {_uniqueStorage()._matchPattern = .listMatch(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies how to match a value.
  public enum OneOf_MatchPattern: Equatable {
    /// If specified, a match occurs if and only if the target value is a NullValue.
    case nullMatch(Envoy_Type_Matcher_V3_ValueMatcher.NullMatch)
    /// If specified, a match occurs if and only if the target value is a double value and is
    /// matched to this field.
    case doubleMatch(Envoy_Type_Matcher_V3_DoubleMatcher)
    /// If specified, a match occurs if and only if the target value is a string value and is
    /// matched to this field.
    case stringMatch(Envoy_Type_Matcher_V3_StringMatcher)
    /// If specified, a match occurs if and only if the target value is a bool value and is equal
    /// to this field.
    case boolMatch(Bool)
    /// If specified, value match will be performed based on whether the path is referring to a
    /// valid primitive value in the metadata. If the path is referring to a non-primitive value,
    /// the result is always not matched.
    case presentMatch(Bool)
    /// If specified, a match occurs if and only if the target value is a list value and
    /// is matched to this field.
    case listMatch(Envoy_Type_Matcher_V3_ListMatcher)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Type_Matcher_V3_ValueMatcher.OneOf_MatchPattern, rhs: Envoy_Type_Matcher_V3_ValueMatcher.OneOf_MatchPattern) -> Bool {
      switch (lhs, rhs) {
      case (.nullMatch(let l), .nullMatch(let r)): return l == r
      case (.doubleMatch(let l), .doubleMatch(let r)): return l == r
      case (.stringMatch(let l), .stringMatch(let r)): return l == r
      case (.boolMatch(let l), .boolMatch(let r)): return l == r
      case (.presentMatch(let l), .presentMatch(let r)): return l == r
      case (.listMatch(let l), .listMatch(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// NullMatch is an empty message to specify a null value.
  public struct NullMatch {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies the way to match a list value.
public struct Envoy_Type_Matcher_V3_ListMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var matchPattern: OneOf_MatchPattern? {
    get {return _storage._matchPattern}
    set {_uniqueStorage()._matchPattern = newValue}
  }

  /// If specified, at least one of the values in the list must match the value specified.
  public var oneOf: Envoy_Type_Matcher_V3_ValueMatcher {
    get {
      if case .oneOf(let v)? = _storage._matchPattern {return v}
      return Envoy_Type_Matcher_V3_ValueMatcher()
    }
    set {_uniqueStorage()._matchPattern = .oneOf(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MatchPattern: Equatable {
    /// If specified, at least one of the values in the list must match the value specified.
    case oneOf(Envoy_Type_Matcher_V3_ValueMatcher)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Type_Matcher_V3_ListMatcher.OneOf_MatchPattern, rhs: Envoy_Type_Matcher_V3_ListMatcher.OneOf_MatchPattern) -> Bool {
      switch (lhs, rhs) {
      case (.oneOf(let l), .oneOf(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.type.matcher.v3"

extension Envoy_Type_Matcher_V3_ValueMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValueMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "null_match"),
    2: .standard(proto: "double_match"),
    3: .standard(proto: "string_match"),
    4: .standard(proto: "bool_match"),
    5: .standard(proto: "present_match"),
    6: .standard(proto: "list_match"),
  ]

  fileprivate class _StorageClass {
    var _matchPattern: Envoy_Type_Matcher_V3_ValueMatcher.OneOf_MatchPattern?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _matchPattern = source._matchPattern
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Envoy_Type_Matcher_V3_ValueMatcher.NullMatch?
          if let current = _storage._matchPattern {
            try decoder.handleConflictingOneOf()
            if case .nullMatch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._matchPattern = .nullMatch(v)}
        case 2:
          var v: Envoy_Type_Matcher_V3_DoubleMatcher?
          if let current = _storage._matchPattern {
            try decoder.handleConflictingOneOf()
            if case .doubleMatch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._matchPattern = .doubleMatch(v)}
        case 3:
          var v: Envoy_Type_Matcher_V3_StringMatcher?
          if let current = _storage._matchPattern {
            try decoder.handleConflictingOneOf()
            if case .stringMatch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._matchPattern = .stringMatch(v)}
        case 4:
          if _storage._matchPattern != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._matchPattern = .boolMatch(v)}
        case 5:
          if _storage._matchPattern != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._matchPattern = .presentMatch(v)}
        case 6:
          var v: Envoy_Type_Matcher_V3_ListMatcher?
          if let current = _storage._matchPattern {
            try decoder.handleConflictingOneOf()
            if case .listMatch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._matchPattern = .listMatch(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._matchPattern {
      case .nullMatch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .doubleMatch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .stringMatch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .boolMatch(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      case .presentMatch(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      case .listMatch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_V3_ValueMatcher, rhs: Envoy_Type_Matcher_V3_ValueMatcher) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._matchPattern != rhs_storage._matchPattern {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Type_Matcher_V3_ValueMatcher.NullMatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Envoy_Type_Matcher_V3_ValueMatcher.protoMessageName + ".NullMatch"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_V3_ValueMatcher.NullMatch, rhs: Envoy_Type_Matcher_V3_ValueMatcher.NullMatch) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Type_Matcher_V3_ListMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "one_of"),
  ]

  fileprivate class _StorageClass {
    var _matchPattern: Envoy_Type_Matcher_V3_ListMatcher.OneOf_MatchPattern?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _matchPattern = source._matchPattern
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Envoy_Type_Matcher_V3_ValueMatcher?
          if let current = _storage._matchPattern {
            try decoder.handleConflictingOneOf()
            if case .oneOf(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._matchPattern = .oneOf(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if case .oneOf(let v)? = _storage._matchPattern {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_V3_ListMatcher, rhs: Envoy_Type_Matcher_V3_ListMatcher) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._matchPattern != rhs_storage._matchPattern {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
