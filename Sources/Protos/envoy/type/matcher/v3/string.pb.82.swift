// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/type/matcher/v3/string.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies the way to match a string.
/// [#next-free-field: 8]
public struct Envoy_Type_Matcher_V3_StringMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var matchPattern: Envoy_Type_Matcher_V3_StringMatcher.OneOf_MatchPattern? = nil

  /// The input string must match exactly the string specified here.
  ///
  /// Examples:
  ///
  /// * *abc* only matches the value *abc*.
  public var exact: String {
    get {
      if case .exact(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .exact(newValue)}
  }

  /// The input string must have the prefix specified here.
  /// Note: empty prefix is not allowed, please use regex instead.
  ///
  /// Examples:
  ///
  /// * *abc* matches the value *abc.xyz*
  public var prefix: String {
    get {
      if case .prefix(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .prefix(newValue)}
  }

  /// The input string must have the suffix specified here.
  /// Note: empty prefix is not allowed, please use regex instead.
  ///
  /// Examples:
  ///
  /// * *abc* matches the value *xyz.abc*
  public var suffix: String {
    get {
      if case .suffix(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .suffix(newValue)}
  }

  /// The input string must match the regular expression specified here.
  public var safeRegex: Envoy_Type_Matcher_V3_RegexMatcher {
    get {
      if case .safeRegex(let v)? = matchPattern {return v}
      return Envoy_Type_Matcher_V3_RegexMatcher()
    }
    set {matchPattern = .safeRegex(newValue)}
  }

  /// The input string must have the substring specified here.
  /// Note: empty contains match is not allowed, please use regex instead.
  ///
  /// Examples:
  ///
  /// * *abc* matches the value *xyz.abc.def*
  public var contains: String {
    get {
      if case .contains(let v)? = matchPattern {return v}
      return String()
    }
    set {matchPattern = .contains(newValue)}
  }

  /// If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
  /// effect for the safe_regex match.
  /// For example, the matcher *data* will match both input string *Data* and *data* if set to true.
  public var ignoreCase: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MatchPattern: Equatable {
    /// The input string must match exactly the string specified here.
    ///
    /// Examples:
    ///
    /// * *abc* only matches the value *abc*.
    case exact(String)
    /// The input string must have the prefix specified here.
    /// Note: empty prefix is not allowed, please use regex instead.
    ///
    /// Examples:
    ///
    /// * *abc* matches the value *abc.xyz*
    case prefix(String)
    /// The input string must have the suffix specified here.
    /// Note: empty prefix is not allowed, please use regex instead.
    ///
    /// Examples:
    ///
    /// * *abc* matches the value *xyz.abc*
    case suffix(String)
    /// The input string must match the regular expression specified here.
    case safeRegex(Envoy_Type_Matcher_V3_RegexMatcher)
    /// The input string must have the substring specified here.
    /// Note: empty contains match is not allowed, please use regex instead.
    ///
    /// Examples:
    ///
    /// * *abc* matches the value *xyz.abc.def*
    case contains(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Envoy_Type_Matcher_V3_StringMatcher.OneOf_MatchPattern, rhs: Envoy_Type_Matcher_V3_StringMatcher.OneOf_MatchPattern) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.exact, .exact): return {
        guard case .exact(let l) = lhs, case .exact(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.prefix, .prefix): return {
        guard case .prefix(let l) = lhs, case .prefix(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.suffix, .suffix): return {
        guard case .suffix(let l) = lhs, case .suffix(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.safeRegex, .safeRegex): return {
        guard case .safeRegex(let l) = lhs, case .safeRegex(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contains, .contains): return {
        guard case .contains(let l) = lhs, case .contains(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Specifies a list of ways to match a string.
public struct Envoy_Type_Matcher_V3_ListStringMatcher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var patterns: [Envoy_Type_Matcher_V3_StringMatcher] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.type.matcher.v3"

extension Envoy_Type_Matcher_V3_StringMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StringMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exact"),
    2: .same(proto: "prefix"),
    3: .same(proto: "suffix"),
    5: .standard(proto: "safe_regex"),
    7: .same(proto: "contains"),
    6: .standard(proto: "ignore_case"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .exact(v)}
      }()
      case 2: try {
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .prefix(v)}
      }()
      case 3: try {
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .suffix(v)}
      }()
      case 5: try {
        var v: Envoy_Type_Matcher_V3_RegexMatcher?
        if let current = self.matchPattern {
          try decoder.handleConflictingOneOf()
          if case .safeRegex(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.matchPattern = .safeRegex(v)}
      }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.ignoreCase) }()
      case 7: try {
        if self.matchPattern != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.matchPattern = .contains(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.matchPattern {
    case .exact?: try {
      guard case .exact(let v)? = self.matchPattern else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .prefix?: try {
      guard case .prefix(let v)? = self.matchPattern else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .suffix?: try {
      guard case .suffix(let v)? = self.matchPattern else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .safeRegex?: try {
      guard case .safeRegex(let v)? = self.matchPattern else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    default: break
    }
    if self.ignoreCase != false {
      try visitor.visitSingularBoolField(value: self.ignoreCase, fieldNumber: 6)
    }
    if case .contains(let v)? = self.matchPattern {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_V3_StringMatcher, rhs: Envoy_Type_Matcher_V3_StringMatcher) -> Bool {
    if lhs.matchPattern != rhs.matchPattern {return false}
    if lhs.ignoreCase != rhs.ignoreCase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envoy_Type_Matcher_V3_ListStringMatcher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListStringMatcher"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "patterns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.patterns) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.patterns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.patterns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_Matcher_V3_ListStringMatcher, rhs: Envoy_Type_Matcher_V3_ListStringMatcher) -> Bool {
    if lhs.patterns != rhs.patterns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
