// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: envoy/type/v3/token_bucket.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configures a token bucket, typically used for rate limiting.
public struct Envoy_Type_V3_TokenBucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The maximum tokens that the bucket can hold. This is also the number of tokens that the bucket
  /// initially contains.
  public var maxTokens: UInt32 = 0

  /// The number of tokens added to the bucket during each fill interval. If not specified, defaults
  /// to a single token.
  public var tokensPerFill: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _tokensPerFill ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_tokensPerFill = newValue}
  }
  /// Returns true if `tokensPerFill` has been explicitly set.
  public var hasTokensPerFill: Bool {return self._tokensPerFill != nil}
  /// Clears the value of `tokensPerFill`. Subsequent reads from it will return its default value.
  public mutating func clearTokensPerFill() {self._tokensPerFill = nil}

  /// The fill interval that tokens are added to the bucket. During each fill interval
  /// `tokens_per_fill` are added to the bucket. The bucket will never contain more than
  /// `max_tokens` tokens.
  public var fillInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _fillInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_fillInterval = newValue}
  }
  /// Returns true if `fillInterval` has been explicitly set.
  public var hasFillInterval: Bool {return self._fillInterval != nil}
  /// Clears the value of `fillInterval`. Subsequent reads from it will return its default value.
  public mutating func clearFillInterval() {self._fillInterval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokensPerFill: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _fillInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "envoy.type.v3"

extension Envoy_Type_V3_TokenBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenBucket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_tokens"),
    2: .standard(proto: "tokens_per_fill"),
    3: .standard(proto: "fill_interval"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.maxTokens) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._tokensPerFill) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._fillInterval) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxTokens != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxTokens, fieldNumber: 1)
    }
    if let v = self._tokensPerFill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._fillInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envoy_Type_V3_TokenBucket, rhs: Envoy_Type_V3_TokenBucket) -> Bool {
    if lhs.maxTokens != rhs.maxTokens {return false}
    if lhs._tokensPerFill != rhs._tokensPerFill {return false}
    if lhs._fillInterval != rhs._fillInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
