//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/partner/aistreams/v1alpha1/aistreams.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Partner_Aistreams_V1alpha1_AIStreamsClient, then call methods of this protocol to make API calls.
public protocol Google_Partner_Aistreams_V1alpha1_AIStreamsClientProtocol: GRPCClient {
  func listClusters(
    _ request: Google_Partner_Aistreams_V1alpha1_ListClustersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_ListClustersRequest, Google_Partner_Aistreams_V1alpha1_ListClustersResponse>

  func getCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_GetClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_GetClusterRequest, Google_Partner_Aistreams_V1alpha1_Cluster>

  func createCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_CreateClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_CreateClusterRequest, Google_Longrunning_Operation>

  func updateCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_UpdateClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_UpdateClusterRequest, Google_Longrunning_Operation>

  func deleteCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_DeleteClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_DeleteClusterRequest, Google_Longrunning_Operation>

  func listStreams(
    _ request: Google_Partner_Aistreams_V1alpha1_ListStreamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_ListStreamsRequest, Google_Partner_Aistreams_V1alpha1_ListStreamsResponse>

  func getStream(
    _ request: Google_Partner_Aistreams_V1alpha1_GetStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_GetStreamRequest, Google_Partner_Aistreams_V1alpha1_Stream>

  func createStream(
    _ request: Google_Partner_Aistreams_V1alpha1_CreateStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_CreateStreamRequest, Google_Longrunning_Operation>

  func updateStream(
    _ request: Google_Partner_Aistreams_V1alpha1_UpdateStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_UpdateStreamRequest, Google_Longrunning_Operation>

  func deleteStream(
    _ request: Google_Partner_Aistreams_V1alpha1_DeleteStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_DeleteStreamRequest, Google_Longrunning_Operation>

}

extension Google_Partner_Aistreams_V1alpha1_AIStreamsClientProtocol {

  /// Lists Clusters in a given project and location.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListClusters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listClusters(
    _ request: Google_Partner_Aistreams_V1alpha1_ListClustersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_ListClustersRequest, Google_Partner_Aistreams_V1alpha1_ListClustersResponse> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/ListClusters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets details of a single Cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_GetClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_GetClusterRequest, Google_Partner_Aistreams_V1alpha1_Cluster> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/GetCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new Cluster in a given project and location.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_CreateClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_CreateClusterRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/CreateCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the parameters of a single Cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_UpdateClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_UpdateClusterRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/UpdateCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a single Cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCluster(
    _ request: Google_Partner_Aistreams_V1alpha1_DeleteClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_DeleteClusterRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/DeleteCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists Streams in a given project, location and cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStreams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listStreams(
    _ request: Google_Partner_Aistreams_V1alpha1_ListStreamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_ListStreamsRequest, Google_Partner_Aistreams_V1alpha1_ListStreamsResponse> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/ListStreams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets details of a single Stream.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStream(
    _ request: Google_Partner_Aistreams_V1alpha1_GetStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_GetStreamRequest, Google_Partner_Aistreams_V1alpha1_Stream> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/GetStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new Stream in a given project and location.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createStream(
    _ request: Google_Partner_Aistreams_V1alpha1_CreateStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_CreateStreamRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/CreateStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the parameters of a single Stream.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateStream(
    _ request: Google_Partner_Aistreams_V1alpha1_UpdateStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_UpdateStreamRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/UpdateStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a single Stream.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteStream(
    _ request: Google_Partner_Aistreams_V1alpha1_DeleteStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Partner_Aistreams_V1alpha1_DeleteStreamRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.partner.aistreams.v1alpha1.AIStreams/DeleteStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Partner_Aistreams_V1alpha1_AIStreamsClient: Google_Partner_Aistreams_V1alpha1_AIStreamsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.partner.aistreams.v1alpha1.AIStreams service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Partner_Aistreams_V1alpha1_AIStreamsProvider: CallHandlerProvider {
  /// Lists Clusters in a given project and location.
  func listClusters(request: Google_Partner_Aistreams_V1alpha1_ListClustersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Partner_Aistreams_V1alpha1_ListClustersResponse>
  /// Gets details of a single Cluster.
  func getCluster(request: Google_Partner_Aistreams_V1alpha1_GetClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Partner_Aistreams_V1alpha1_Cluster>
  /// Creates a new Cluster in a given project and location.
  func createCluster(request: Google_Partner_Aistreams_V1alpha1_CreateClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the parameters of a single Cluster.
  func updateCluster(request: Google_Partner_Aistreams_V1alpha1_UpdateClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a single Cluster.
  func deleteCluster(request: Google_Partner_Aistreams_V1alpha1_DeleteClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Lists Streams in a given project, location and cluster.
  func listStreams(request: Google_Partner_Aistreams_V1alpha1_ListStreamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Partner_Aistreams_V1alpha1_ListStreamsResponse>
  /// Gets details of a single Stream.
  func getStream(request: Google_Partner_Aistreams_V1alpha1_GetStreamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Partner_Aistreams_V1alpha1_Stream>
  /// Creates a new Stream in a given project and location.
  func createStream(request: Google_Partner_Aistreams_V1alpha1_CreateStreamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the parameters of a single Stream.
  func updateStream(request: Google_Partner_Aistreams_V1alpha1_UpdateStreamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a single Stream.
  func deleteStream(request: Google_Partner_Aistreams_V1alpha1_DeleteStreamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Partner_Aistreams_V1alpha1_AIStreamsProvider {
  public var serviceName: Substring { return "google.partner.aistreams.v1alpha1.AIStreams" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListClusters":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listClusters(request: request, context: context)
        }
      }

    case "GetCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCluster(request: request, context: context)
        }
      }

    case "CreateCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCluster(request: request, context: context)
        }
      }

    case "UpdateCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCluster(request: request, context: context)
        }
      }

    case "DeleteCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteCluster(request: request, context: context)
        }
      }

    case "ListStreams":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listStreams(request: request, context: context)
        }
      }

    case "GetStream":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getStream(request: request, context: context)
        }
      }

    case "CreateStream":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createStream(request: request, context: context)
        }
      }

    case "UpdateStream":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateStream(request: request, context: context)
        }
      }

    case "DeleteStream":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteStream(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

