// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/monitoring/dashboard/v1/layouts.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A basic layout divides the available space into vertical columns of equal
/// width and arranges a list of widgets using a row-first strategy.
public struct Google_Monitoring_Dashboard_V1_GridLayout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of columns into which the view's width is divided. If omitted
  /// or set to zero, a system default will be used while rendering.
  public var columns: Int64 = 0

  /// The informational elements that are arranged into the columns row-first.
  public var widgets: [Google_Monitoring_Dashboard_V1_Widget] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A simplified layout that divides the available space into rows
/// and arranges a set of widgets horizontally in each row.
public struct Google_Monitoring_Dashboard_V1_RowLayout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The rows of content to display.
  public var rows: [Google_Monitoring_Dashboard_V1_RowLayout.Row] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Defines the layout properties and content for a row.
  public struct Row {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The relative weight of this row. The row weight is used to adjust the
    /// height of rows on the screen (relative to peers). Greater the weight,
    /// greater the height of the row on the screen. If omitted, a value
    /// of 1 is used while rendering.
    public var weight: Int64 = 0

    /// The display widgets arranged horizontally in this row.
    public var widgets: [Google_Monitoring_Dashboard_V1_Widget] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// A simplified layout that divides the available space into vertical columns
/// and arranges a set of widgets vertically in each column.
public struct Google_Monitoring_Dashboard_V1_ColumnLayout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The columns of content to display.
  public var columns: [Google_Monitoring_Dashboard_V1_ColumnLayout.Column] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Defines the layout properties and content for a column.
  public struct Column {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The relative weight of this column. The column weight is used to adjust
    /// the width of columns on the screen (relative to peers).
    /// Greater the weight, greater the width of the column on the screen.
    /// If omitted, a value of 1 is used while rendering.
    public var weight: Int64 = 0

    /// The display widgets arranged vertically in this column.
    public var widgets: [Google_Monitoring_Dashboard_V1_Widget] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.monitoring.dashboard.v1"

extension Google_Monitoring_Dashboard_V1_GridLayout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GridLayout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "columns"),
    2: .same(proto: "widgets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.columns) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.widgets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.columns != 0 {
      try visitor.visitSingularInt64Field(value: self.columns, fieldNumber: 1)
    }
    if !self.widgets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.widgets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_GridLayout, rhs: Google_Monitoring_Dashboard_V1_GridLayout) -> Bool {
    if lhs.columns != rhs.columns {return false}
    if lhs.widgets != rhs.widgets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_Dashboard_V1_RowLayout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RowLayout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_RowLayout, rhs: Google_Monitoring_Dashboard_V1_RowLayout) -> Bool {
    if lhs.rows != rhs.rows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_Dashboard_V1_RowLayout.Row: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Monitoring_Dashboard_V1_RowLayout.protoMessageName + ".Row"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weight"),
    2: .same(proto: "widgets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.weight) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.widgets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.weight != 0 {
      try visitor.visitSingularInt64Field(value: self.weight, fieldNumber: 1)
    }
    if !self.widgets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.widgets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_RowLayout.Row, rhs: Google_Monitoring_Dashboard_V1_RowLayout.Row) -> Bool {
    if lhs.weight != rhs.weight {return false}
    if lhs.widgets != rhs.widgets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_Dashboard_V1_ColumnLayout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColumnLayout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "columns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.columns) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_ColumnLayout, rhs: Google_Monitoring_Dashboard_V1_ColumnLayout) -> Bool {
    if lhs.columns != rhs.columns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_Dashboard_V1_ColumnLayout.Column: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Monitoring_Dashboard_V1_ColumnLayout.protoMessageName + ".Column"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weight"),
    2: .same(proto: "widgets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.weight) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.widgets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.weight != 0 {
      try visitor.visitSingularInt64Field(value: self.weight, fieldNumber: 1)
    }
    if !self.widgets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.widgets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_ColumnLayout.Column, rhs: Google_Monitoring_Dashboard_V1_ColumnLayout.Column) -> Bool {
    if lhs.weight != rhs.weight {return false}
    if lhs.widgets != rhs.widgets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
