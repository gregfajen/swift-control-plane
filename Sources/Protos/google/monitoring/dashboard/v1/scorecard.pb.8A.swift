// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/monitoring/dashboard/v1/scorecard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A widget showing the latest value of a metric, and how this value relates to
/// one or more thresholds.
public struct Google_Monitoring_Dashboard_V1_Scorecard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Fields for querying time series data from the
  /// Stackdriver metrics API.
  public var timeSeriesQuery: Google_Monitoring_Dashboard_V1_TimeSeriesQuery {
    get {return _storage._timeSeriesQuery ?? Google_Monitoring_Dashboard_V1_TimeSeriesQuery()}
    set {_uniqueStorage()._timeSeriesQuery = newValue}
  }
  /// Returns true if `timeSeriesQuery` has been explicitly set.
  public var hasTimeSeriesQuery: Bool {return _storage._timeSeriesQuery != nil}
  /// Clears the value of `timeSeriesQuery`. Subsequent reads from it will return its default value.
  public mutating func clearTimeSeriesQuery() {_uniqueStorage()._timeSeriesQuery = nil}

  /// Defines the optional additional chart shown on the scorecard. If
  /// neither is included - then a default scorecard is shown.
  public var dataView: OneOf_DataView? {
    get {return _storage._dataView}
    set {_uniqueStorage()._dataView = newValue}
  }

  /// Will cause the scorecard to show a gauge chart.
  public var gaugeView: Google_Monitoring_Dashboard_V1_Scorecard.GaugeView {
    get {
      if case .gaugeView(let v)? = _storage._dataView {return v}
      return Google_Monitoring_Dashboard_V1_Scorecard.GaugeView()
    }
    set {_uniqueStorage()._dataView = .gaugeView(newValue)}
  }

  /// Will cause the scorecard to show a spark chart.
  public var sparkChartView: Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView {
    get {
      if case .sparkChartView(let v)? = _storage._dataView {return v}
      return Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView()
    }
    set {_uniqueStorage()._dataView = .sparkChartView(newValue)}
  }

  /// The thresholds used to determine the state of the scorecard given the
  /// time series' current value. For an actual value x, the scorecard is in a
  /// danger state if x is less than or equal to a danger threshold that triggers
  /// below, or greater than or equal to a danger threshold that triggers above.
  /// Similarly, if x is above/below a warning threshold that triggers
  /// above/below, then the scorecard is in a warning state - unless x also puts
  /// it in a danger state. (Danger trumps warning.)
  ///
  /// As an example, consider a scorecard with the following four thresholds:
  /// {
  ///   value: 90,
  ///   category: 'DANGER',
  ///   trigger: 'ABOVE',
  /// },
  /// {
  ///   value: 70,
  ///   category: 'WARNING',
  ///   trigger: 'ABOVE',
  /// },
  /// {
  ///   value: 10,
  ///   category: 'DANGER',
  ///   trigger: 'BELOW',
  /// },
  /// {
  ///   value: 20,
  ///   category: 'WARNING',
  ///   trigger: 'BELOW',
  /// }
  ///
  /// Then: values less than or equal to 10 would put the scorecard in a DANGER
  /// state, values greater than 10 but less than or equal to 20 a WARNING state,
  /// values strictly between 20 and 70 an OK state, values greater than or equal
  /// to 70 but less than 90 a WARNING state, and values greater than or equal to
  /// 90 a DANGER state.
  public var thresholds: [Google_Monitoring_Dashboard_V1_Threshold] {
    get {return _storage._thresholds}
    set {_uniqueStorage()._thresholds = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Defines the optional additional chart shown on the scorecard. If
  /// neither is included - then a default scorecard is shown.
  public enum OneOf_DataView: Equatable {
    /// Will cause the scorecard to show a gauge chart.
    case gaugeView(Google_Monitoring_Dashboard_V1_Scorecard.GaugeView)
    /// Will cause the scorecard to show a spark chart.
    case sparkChartView(Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Monitoring_Dashboard_V1_Scorecard.OneOf_DataView, rhs: Google_Monitoring_Dashboard_V1_Scorecard.OneOf_DataView) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gaugeView, .gaugeView): return {
        guard case .gaugeView(let l) = lhs, case .gaugeView(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sparkChartView, .sparkChartView): return {
        guard case .sparkChartView(let l) = lhs, case .sparkChartView(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// A gauge chart shows where the current value sits within a pre-defined
  /// range. The upper and lower bounds should define the possible range of
  /// values for the scorecard's query (inclusive).
  public struct GaugeView {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The lower bound for this gauge chart. The value of the chart should
    /// always be greater than or equal to this.
    public var lowerBound: Double = 0

    /// The upper bound for this gauge chart. The value of the chart should
    /// always be less than or equal to this.
    public var upperBound: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// A sparkChart is a small chart suitable for inclusion in a table-cell or
  /// inline in text. This message contains the configuration for a sparkChart
  /// to show up on a Scorecard, showing recent trends of the scorecard's
  /// timeseries.
  public struct SparkChartView {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The type of sparkchart to show in this chartView.
    public var sparkChartType: Google_Monitoring_Dashboard_V1_SparkChartType = .unspecified

    /// The lower bound on data point frequency in the chart implemented by
    /// specifying the minimum alignment period to use in a time series query.
    /// For example, if the data is published once every 10 minutes it would not
    /// make sense to fetch and align data at one minute intervals. This field is
    /// optional and exists only as a hint.
    public var minAlignmentPeriod: SwiftProtobuf.Google_Protobuf_Duration {
      get {return _minAlignmentPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
      set {_minAlignmentPeriod = newValue}
    }
    /// Returns true if `minAlignmentPeriod` has been explicitly set.
    public var hasMinAlignmentPeriod: Bool {return self._minAlignmentPeriod != nil}
    /// Clears the value of `minAlignmentPeriod`. Subsequent reads from it will return its default value.
    public mutating func clearMinAlignmentPeriod() {self._minAlignmentPeriod = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _minAlignmentPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.monitoring.dashboard.v1"

extension Google_Monitoring_Dashboard_V1_Scorecard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Scorecard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_series_query"),
    4: .standard(proto: "gauge_view"),
    5: .standard(proto: "spark_chart_view"),
    6: .same(proto: "thresholds"),
  ]

  fileprivate class _StorageClass {
    var _timeSeriesQuery: Google_Monitoring_Dashboard_V1_TimeSeriesQuery? = nil
    var _dataView: Google_Monitoring_Dashboard_V1_Scorecard.OneOf_DataView?
    var _thresholds: [Google_Monitoring_Dashboard_V1_Threshold] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timeSeriesQuery = source._timeSeriesQuery
      _dataView = source._dataView
      _thresholds = source._thresholds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._timeSeriesQuery) }()
        case 4: try {
          var v: Google_Monitoring_Dashboard_V1_Scorecard.GaugeView?
          if let current = _storage._dataView {
            try decoder.handleConflictingOneOf()
            if case .gaugeView(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._dataView = .gaugeView(v)}
        }()
        case 5: try {
          var v: Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView?
          if let current = _storage._dataView {
            try decoder.handleConflictingOneOf()
            if case .sparkChartView(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._dataView = .sparkChartView(v)}
        }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._thresholds) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._timeSeriesQuery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._dataView {
      case .gaugeView?: try {
        guard case .gaugeView(let v)? = _storage._dataView else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .sparkChartView?: try {
        guard case .sparkChartView(let v)? = _storage._dataView else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case nil: break
      }
      if !_storage._thresholds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thresholds, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_Scorecard, rhs: Google_Monitoring_Dashboard_V1_Scorecard) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timeSeriesQuery != rhs_storage._timeSeriesQuery {return false}
        if _storage._dataView != rhs_storage._dataView {return false}
        if _storage._thresholds != rhs_storage._thresholds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_Dashboard_V1_Scorecard.GaugeView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Monitoring_Dashboard_V1_Scorecard.protoMessageName + ".GaugeView"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lower_bound"),
    2: .standard(proto: "upper_bound"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.lowerBound) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.upperBound) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lowerBound != 0 {
      try visitor.visitSingularDoubleField(value: self.lowerBound, fieldNumber: 1)
    }
    if self.upperBound != 0 {
      try visitor.visitSingularDoubleField(value: self.upperBound, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_Scorecard.GaugeView, rhs: Google_Monitoring_Dashboard_V1_Scorecard.GaugeView) -> Bool {
    if lhs.lowerBound != rhs.lowerBound {return false}
    if lhs.upperBound != rhs.upperBound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Monitoring_Dashboard_V1_Scorecard.protoMessageName + ".SparkChartView"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spark_chart_type"),
    2: .standard(proto: "min_alignment_period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.sparkChartType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._minAlignmentPeriod) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sparkChartType != .unspecified {
      try visitor.visitSingularEnumField(value: self.sparkChartType, fieldNumber: 1)
    }
    if let v = self._minAlignmentPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView, rhs: Google_Monitoring_Dashboard_V1_Scorecard.SparkChartView) -> Bool {
    if lhs.sparkChartType != rhs.sparkChartType {return false}
    if lhs._minAlignmentPeriod != rhs._minAlignmentPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
