// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/monitoring/v3/metric_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The `ListMonitoredResourceDescriptors` request.
public struct Google_Monitoring_V3_ListMonitoredResourceDescriptorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]
  public var name: String = String()

  /// An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
  /// describing the descriptors to be returned.  The filter can reference the
  /// descriptor's type and labels. For example, the following filter returns
  /// only Google Compute Engine descriptors that have an `id` label:
  ///
  ///     resource.type = starts_with("gce_") AND resource.label:id
  public var filter: String = String()

  /// A positive number that is the maximum number of results to return.
  public var pageSize: Int32 = 0

  /// If this field is not empty then it must contain the `nextPageToken` value
  /// returned by a previous call to this method.  Using this field causes the
  /// method to return additional results from the previous method call.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `ListMonitoredResourceDescriptors` response.
public struct Google_Monitoring_V3_ListMonitoredResourceDescriptorsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The monitored resource descriptors that are available to this project
  /// and that match `filter`, if present.
  public var resourceDescriptors: [Google_Api_MonitoredResourceDescriptor] = []

  /// If there are more results than have been returned, then this field is set
  /// to a non-empty value.  To see the additional results,
  /// use that value as `page_token` in the next call to this method.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `GetMonitoredResourceDescriptor` request.
public struct Google_Monitoring_V3_GetMonitoredResourceDescriptorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The monitored resource descriptor to get.  The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]/monitoredResourceDescriptors/[RESOURCE_TYPE]
  ///
  /// The `[RESOURCE_TYPE]` is a predefined type, such as
  /// `cloudsql_database`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `ListMetricDescriptors` request.
public struct Google_Monitoring_V3_ListMetricDescriptorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]
  public var name: String = String()

  /// If this field is empty, all custom and
  /// system-defined metric descriptors are returned.
  /// Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
  /// specifies which metric descriptors are to be
  /// returned. For example, the following filter matches all
  /// [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
  ///
  ///     metric.type = starts_with("custom.googleapis.com/")
  public var filter: String = String()

  /// A positive number that is the maximum number of results to return.
  public var pageSize: Int32 = 0

  /// If this field is not empty then it must contain the `nextPageToken` value
  /// returned by a previous call to this method.  Using this field causes the
  /// method to return additional results from the previous method call.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `ListMetricDescriptors` response.
public struct Google_Monitoring_V3_ListMetricDescriptorsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The metric descriptors that are available to the project
  /// and that match the value of `filter`, if present.
  public var metricDescriptors: [Google_Api_MetricDescriptor] = []

  /// If there are more results than have been returned, then this field is set
  /// to a non-empty value.  To see the additional results,
  /// use that value as `page_token` in the next call to this method.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `GetMetricDescriptor` request.
public struct Google_Monitoring_V3_GetMetricDescriptorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The metric descriptor on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]
  ///
  /// An example value of `[METRIC_ID]` is
  /// `"compute.googleapis.com/instance/disk/read_bytes_count"`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `CreateMetricDescriptor` request.
public struct Google_Monitoring_V3_CreateMetricDescriptorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]
  public var name: String = String()

  /// Required. The new [custom metric](https://cloud.google.com/monitoring/custom-metrics)
  /// descriptor.
  public var metricDescriptor: Google_Api_MetricDescriptor {
    get {return _metricDescriptor ?? Google_Api_MetricDescriptor()}
    set {_metricDescriptor = newValue}
  }
  /// Returns true if `metricDescriptor` has been explicitly set.
  public var hasMetricDescriptor: Bool {return self._metricDescriptor != nil}
  /// Clears the value of `metricDescriptor`. Subsequent reads from it will return its default value.
  public mutating func clearMetricDescriptor() {self._metricDescriptor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metricDescriptor: Google_Api_MetricDescriptor? = nil
}

/// The `DeleteMetricDescriptor` request.
public struct Google_Monitoring_V3_DeleteMetricDescriptorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The metric descriptor on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]
  ///
  /// An example of `[METRIC_ID]` is:
  /// `"custom.googleapis.com/my_test_metric"`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `ListTimeSeries` request.
public struct Google_Monitoring_V3_ListTimeSeriesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]
  public var name: String = String()

  /// Required. A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
  /// that specifies which time series should be returned.  The filter must
  /// specify a single metric type, and can additionally specify metric labels
  /// and other information. For example:
  ///
  ///     metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
  ///         metric.labels.instance_name = "my-instance-name"
  public var filter: String = String()

  /// Required. The time interval for which results should be returned. Only time series
  /// that contain data points in the specified interval are included
  /// in the response.
  public var interval: Google_Monitoring_V3_TimeInterval {
    get {return _interval ?? Google_Monitoring_V3_TimeInterval()}
    set {_interval = newValue}
  }
  /// Returns true if `interval` has been explicitly set.
  public var hasInterval: Bool {return self._interval != nil}
  /// Clears the value of `interval`. Subsequent reads from it will return its default value.
  public mutating func clearInterval() {self._interval = nil}

  /// Specifies the alignment of data points in individual time series as
  /// well as how to combine the retrieved time series across specified labels.
  ///
  /// By default (if no `aggregation` is explicitly specified), the raw time
  /// series data is returned.
  public var aggregation: Google_Monitoring_V3_Aggregation {
    get {return _aggregation ?? Google_Monitoring_V3_Aggregation()}
    set {_aggregation = newValue}
  }
  /// Returns true if `aggregation` has been explicitly set.
  public var hasAggregation: Bool {return self._aggregation != nil}
  /// Clears the value of `aggregation`. Subsequent reads from it will return its default value.
  public mutating func clearAggregation() {self._aggregation = nil}

  /// Unsupported: must be left blank. The points in each time series are
  /// currently returned in reverse time order (most recent to oldest).
  public var orderBy: String = String()

  /// Required. Specifies which information is returned about the time series.
  public var view: Google_Monitoring_V3_ListTimeSeriesRequest.TimeSeriesView = .full

  /// A positive number that is the maximum number of results to return. If
  /// `page_size` is empty or more than 100,000 results, the effective
  /// `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
  /// maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
  /// the maximum number of `TimeSeries` returned.
  public var pageSize: Int32 = 0

  /// If this field is not empty then it must contain the `nextPageToken` value
  /// returned by a previous call to this method.  Using this field causes the
  /// method to return additional results from the previous method call.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Controls which fields are returned by `ListTimeSeries`.
  public enum TimeSeriesView: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Returns the identity of the metric(s), the time series,
    /// and the time series data.
    case full // = 0

    /// Returns the identity of the metric and the time series resource,
    /// but not the time series data.
    case headers // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .full
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .full
      case 1: self = .headers
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .full: return 0
      case .headers: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _interval: Google_Monitoring_V3_TimeInterval? = nil
  fileprivate var _aggregation: Google_Monitoring_V3_Aggregation? = nil
}

#if swift(>=4.2)

extension Google_Monitoring_V3_ListTimeSeriesRequest.TimeSeriesView: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Monitoring_V3_ListTimeSeriesRequest.TimeSeriesView] = [
    .full,
    .headers,
  ]
}

#endif  // swift(>=4.2)

/// The `ListTimeSeries` response.
public struct Google_Monitoring_V3_ListTimeSeriesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// One or more time series that match the filter included in the request.
  public var timeSeries: [Google_Monitoring_V3_TimeSeries] = []

  /// If there are more results than have been returned, then this field is set
  /// to a non-empty value.  To see the additional results,
  /// use that value as `page_token` in the next call to this method.
  public var nextPageToken: String = String()

  /// Query execution errors that may have caused the time series data returned
  /// to be incomplete.
  public var executionErrors: [Google_Rpc_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `CreateTimeSeries` request.
public struct Google_Monitoring_V3_CreateTimeSeriesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]
  public var name: String = String()

  /// Required. The new data to be added to a list of time series.
  /// Adds at most one data point to each of several time series.  The new data
  /// point must be more recent than any other point in its time series.  Each
  /// `TimeSeries` value must fully specify a unique time series by supplying
  /// all label values for the metric and the monitored resource.
  ///
  /// The maximum number of `TimeSeries` objects per `Create` request is 200.
  public var timeSeries: [Google_Monitoring_V3_TimeSeries] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// DEPRECATED. Used to hold per-time-series error status.
public struct Google_Monitoring_V3_CreateTimeSeriesError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DEPRECATED. Time series ID that resulted in the `status` error.
  public var timeSeries: Google_Monitoring_V3_TimeSeries {
    get {return _timeSeries ?? Google_Monitoring_V3_TimeSeries()}
    set {_timeSeries = newValue}
  }
  /// Returns true if `timeSeries` has been explicitly set.
  public var hasTimeSeries: Bool {return self._timeSeries != nil}
  /// Clears the value of `timeSeries`. Subsequent reads from it will return its default value.
  public mutating func clearTimeSeries() {self._timeSeries = nil}

  /// DEPRECATED. The status of the requested write operation for `time_series`.
  public var status: Google_Rpc_Status {
    get {return _status ?? Google_Rpc_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeSeries: Google_Monitoring_V3_TimeSeries? = nil
  fileprivate var _status: Google_Rpc_Status? = nil
}

/// Summary of the result of a failed request to write data to a time series.
public struct Google_Monitoring_V3_CreateTimeSeriesSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of points in the request.
  public var totalPointCount: Int32 = 0

  /// The number of points that were successfully written.
  public var successPointCount: Int32 = 0

  /// The number of points that failed to be written. Order is not guaranteed.
  public var errors: [Google_Monitoring_V3_CreateTimeSeriesSummary.Error] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Detailed information about an error category.
  public struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The status of the requested write operation.
    public var status: Google_Rpc_Status {
      get {return _status ?? Google_Rpc_Status()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    /// The number of points that couldn't be written because of `status`.
    public var pointCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _status: Google_Rpc_Status? = nil
  }

  public init() {}
}

/// The `QueryTimeSeries` request.
public struct Google_Monitoring_V3_QueryTimeSeriesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project on which to execute the request. The format is:
  ///
  ///     projects/[PROJECT_ID_OR_NUMBER]
  public var name: String = String()

  /// Required. The query in the monitoring query language format. The default
  /// time zone is in UTC.
  public var query: String = String()

  /// A positive number that is the maximum number of time_series_data to return.
  public var pageSize: Int32 = 0

  /// If this field is not empty then it must contain the `nextPageToken` value
  /// returned by a previous call to this method.  Using this field causes the
  /// method to return additional results from the previous method call.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The `QueryTimeSeries` response.
public struct Google_Monitoring_V3_QueryTimeSeriesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The descriptor for the time series data.
  public var timeSeriesDescriptor: Google_Monitoring_V3_TimeSeriesDescriptor {
    get {return _timeSeriesDescriptor ?? Google_Monitoring_V3_TimeSeriesDescriptor()}
    set {_timeSeriesDescriptor = newValue}
  }
  /// Returns true if `timeSeriesDescriptor` has been explicitly set.
  public var hasTimeSeriesDescriptor: Bool {return self._timeSeriesDescriptor != nil}
  /// Clears the value of `timeSeriesDescriptor`. Subsequent reads from it will return its default value.
  public mutating func clearTimeSeriesDescriptor() {self._timeSeriesDescriptor = nil}

  /// The time series data.
  public var timeSeriesData: [Google_Monitoring_V3_TimeSeriesData] = []

  /// If there are more results than have been returned, then this field is set
  /// to a non-empty value.  To see the additional results, use that value as
  /// `page_token` in the next call to this method.
  public var nextPageToken: String = String()

  /// Query execution errors that may have caused the time series data returned
  /// to be incomplete. The available data will be available in the
  /// response.
  public var partialErrors: [Google_Rpc_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeSeriesDescriptor: Google_Monitoring_V3_TimeSeriesDescriptor? = nil
}

/// This is an error detail intended to be used with INVALID_ARGUMENT errors.
public struct Google_Monitoring_V3_QueryErrorList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Errors in parsing the time series query language text. The number of errors
  /// in the response may be limited.
  public var errors: [Google_Monitoring_V3_QueryError] = []

  /// A summary of all the errors.
  public var errorSummary: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.monitoring.v3"

extension Google_Monitoring_V3_ListMonitoredResourceDescriptorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListMonitoredResourceDescriptorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "name"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_ListMonitoredResourceDescriptorsRequest, rhs: Google_Monitoring_V3_ListMonitoredResourceDescriptorsRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_ListMonitoredResourceDescriptorsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListMonitoredResourceDescriptorsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_descriptors"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.resourceDescriptors) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceDescriptors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resourceDescriptors, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_ListMonitoredResourceDescriptorsResponse, rhs: Google_Monitoring_V3_ListMonitoredResourceDescriptorsResponse) -> Bool {
    if lhs.resourceDescriptors != rhs.resourceDescriptors {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_GetMonitoredResourceDescriptorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMonitoredResourceDescriptorRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_GetMonitoredResourceDescriptorRequest, rhs: Google_Monitoring_V3_GetMonitoredResourceDescriptorRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_ListMetricDescriptorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListMetricDescriptorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "name"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_ListMetricDescriptorsRequest, rhs: Google_Monitoring_V3_ListMetricDescriptorsRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_ListMetricDescriptorsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListMetricDescriptorsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metric_descriptors"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.metricDescriptors) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metricDescriptors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metricDescriptors, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_ListMetricDescriptorsResponse, rhs: Google_Monitoring_V3_ListMetricDescriptorsResponse) -> Bool {
    if lhs.metricDescriptors != rhs.metricDescriptors {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_GetMetricDescriptorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMetricDescriptorRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_GetMetricDescriptorRequest, rhs: Google_Monitoring_V3_GetMetricDescriptorRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_CreateMetricDescriptorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateMetricDescriptorRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "name"),
    2: .standard(proto: "metric_descriptor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metricDescriptor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._metricDescriptor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_CreateMetricDescriptorRequest, rhs: Google_Monitoring_V3_CreateMetricDescriptorRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._metricDescriptor != rhs._metricDescriptor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_DeleteMetricDescriptorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteMetricDescriptorRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_DeleteMetricDescriptorRequest, rhs: Google_Monitoring_V3_DeleteMetricDescriptorRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_ListTimeSeriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTimeSeriesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "name"),
    2: .same(proto: "filter"),
    4: .same(proto: "interval"),
    5: .same(proto: "aggregation"),
    6: .standard(proto: "order_by"),
    7: .same(proto: "view"),
    8: .standard(proto: "page_size"),
    9: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._interval) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._aggregation) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.orderBy) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.view) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if let v = self._interval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._aggregation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.orderBy.isEmpty {
      try visitor.visitSingularStringField(value: self.orderBy, fieldNumber: 6)
    }
    if self.view != .full {
      try visitor.visitSingularEnumField(value: self.view, fieldNumber: 7)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 8)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 9)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_ListTimeSeriesRequest, rhs: Google_Monitoring_V3_ListTimeSeriesRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs._interval != rhs._interval {return false}
    if lhs._aggregation != rhs._aggregation {return false}
    if lhs.orderBy != rhs.orderBy {return false}
    if lhs.view != rhs.view {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_ListTimeSeriesRequest.TimeSeriesView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FULL"),
    1: .same(proto: "HEADERS"),
  ]
}

extension Google_Monitoring_V3_ListTimeSeriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTimeSeriesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_series"),
    2: .standard(proto: "next_page_token"),
    3: .standard(proto: "execution_errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.timeSeries) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.executionErrors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.timeSeries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timeSeries, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if !self.executionErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.executionErrors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_ListTimeSeriesResponse, rhs: Google_Monitoring_V3_ListTimeSeriesResponse) -> Bool {
    if lhs.timeSeries != rhs.timeSeries {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.executionErrors != rhs.executionErrors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_CreateTimeSeriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTimeSeriesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "name"),
    2: .standard(proto: "time_series"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.timeSeries) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.timeSeries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timeSeries, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_CreateTimeSeriesRequest, rhs: Google_Monitoring_V3_CreateTimeSeriesRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.timeSeries != rhs.timeSeries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_CreateTimeSeriesError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTimeSeriesError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_series"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeSeries) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeSeries {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_CreateTimeSeriesError, rhs: Google_Monitoring_V3_CreateTimeSeriesError) -> Bool {
    if lhs._timeSeries != rhs._timeSeries {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_CreateTimeSeriesSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTimeSeriesSummary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_point_count"),
    2: .standard(proto: "success_point_count"),
    3: .same(proto: "errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPointCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.successPointCount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.errors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPointCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPointCount, fieldNumber: 1)
    }
    if self.successPointCount != 0 {
      try visitor.visitSingularInt32Field(value: self.successPointCount, fieldNumber: 2)
    }
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_CreateTimeSeriesSummary, rhs: Google_Monitoring_V3_CreateTimeSeriesSummary) -> Bool {
    if lhs.totalPointCount != rhs.totalPointCount {return false}
    if lhs.successPointCount != rhs.successPointCount {return false}
    if lhs.errors != rhs.errors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_CreateTimeSeriesSummary.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Monitoring_V3_CreateTimeSeriesSummary.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "point_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pointCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.pointCount != 0 {
      try visitor.visitSingularInt32Field(value: self.pointCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_CreateTimeSeriesSummary.Error, rhs: Google_Monitoring_V3_CreateTimeSeriesSummary.Error) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.pointCount != rhs.pointCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_QueryTimeSeriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryTimeSeriesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    7: .same(proto: "query"),
    9: .standard(proto: "page_size"),
    10: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 7)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 9)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_QueryTimeSeriesRequest, rhs: Google_Monitoring_V3_QueryTimeSeriesRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.query != rhs.query {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_QueryTimeSeriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryTimeSeriesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .standard(proto: "time_series_descriptor"),
    9: .standard(proto: "time_series_data"),
    10: .standard(proto: "next_page_token"),
    11: .standard(proto: "partial_errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 8: try { try decoder.decodeSingularMessageField(value: &self._timeSeriesDescriptor) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.timeSeriesData) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.partialErrors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeSeriesDescriptor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.timeSeriesData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timeSeriesData, fieldNumber: 9)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 10)
    }
    if !self.partialErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialErrors, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_QueryTimeSeriesResponse, rhs: Google_Monitoring_V3_QueryTimeSeriesResponse) -> Bool {
    if lhs._timeSeriesDescriptor != rhs._timeSeriesDescriptor {return false}
    if lhs.timeSeriesData != rhs.timeSeriesData {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.partialErrors != rhs.partialErrors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Monitoring_V3_QueryErrorList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryErrorList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "errors"),
    2: .standard(proto: "error_summary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.errors) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorSummary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 1)
    }
    if !self.errorSummary.isEmpty {
      try visitor.visitSingularStringField(value: self.errorSummary, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Monitoring_V3_QueryErrorList, rhs: Google_Monitoring_V3_QueryErrorList) -> Bool {
    if lhs.errors != rhs.errors {return false}
    if lhs.errorSummary != rhs.errorSummary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
