//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/monitoring/v3/notification_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Monitoring_V3_NotificationChannelServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Monitoring_V3_NotificationChannelServiceClientProtocol: GRPCClient {
  func listNotificationChannelDescriptors(
    _ request: Google_Monitoring_V3_ListNotificationChannelDescriptorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_ListNotificationChannelDescriptorsRequest, Google_Monitoring_V3_ListNotificationChannelDescriptorsResponse>

  func getNotificationChannelDescriptor(
    _ request: Google_Monitoring_V3_GetNotificationChannelDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_GetNotificationChannelDescriptorRequest, Google_Monitoring_V3_NotificationChannelDescriptor>

  func listNotificationChannels(
    _ request: Google_Monitoring_V3_ListNotificationChannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_ListNotificationChannelsRequest, Google_Monitoring_V3_ListNotificationChannelsResponse>

  func getNotificationChannel(
    _ request: Google_Monitoring_V3_GetNotificationChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_GetNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel>

  func createNotificationChannel(
    _ request: Google_Monitoring_V3_CreateNotificationChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_CreateNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel>

  func updateNotificationChannel(
    _ request: Google_Monitoring_V3_UpdateNotificationChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_UpdateNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel>

  func deleteNotificationChannel(
    _ request: Google_Monitoring_V3_DeleteNotificationChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_DeleteNotificationChannelRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func sendNotificationChannelVerificationCode(
    _ request: Google_Monitoring_V3_SendNotificationChannelVerificationCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_SendNotificationChannelVerificationCodeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getNotificationChannelVerificationCode(
    _ request: Google_Monitoring_V3_GetNotificationChannelVerificationCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_GetNotificationChannelVerificationCodeRequest, Google_Monitoring_V3_GetNotificationChannelVerificationCodeResponse>

  func verifyNotificationChannel(
    _ request: Google_Monitoring_V3_VerifyNotificationChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_VerifyNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel>

}

extension Google_Monitoring_V3_NotificationChannelServiceClientProtocol {

  /// Lists the descriptors for supported channel types. The use of descriptors
  /// makes it possible for new channel types to be dynamically added.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNotificationChannelDescriptors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listNotificationChannelDescriptors(
    _ request: Google_Monitoring_V3_ListNotificationChannelDescriptorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_ListNotificationChannelDescriptorsRequest, Google_Monitoring_V3_ListNotificationChannelDescriptorsResponse> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/ListNotificationChannelDescriptors",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a single channel descriptor. The descriptor indicates which fields
  /// are expected / permitted for a notification channel of the given type.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotificationChannelDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNotificationChannelDescriptor(
    _ request: Google_Monitoring_V3_GetNotificationChannelDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_GetNotificationChannelDescriptorRequest, Google_Monitoring_V3_NotificationChannelDescriptor> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/GetNotificationChannelDescriptor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the notification channels that have been created for the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNotificationChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listNotificationChannels(
    _ request: Google_Monitoring_V3_ListNotificationChannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_ListNotificationChannelsRequest, Google_Monitoring_V3_ListNotificationChannelsResponse> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/ListNotificationChannels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a single notification channel. The channel includes the relevant
  /// configuration details with which the channel was created. However, the
  /// response may truncate or omit passwords, API keys, or other private key
  /// matter and thus the response may not be 100% identical to the information
  /// that was supplied in the call to the create method.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotificationChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNotificationChannel(
    _ request: Google_Monitoring_V3_GetNotificationChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_GetNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/GetNotificationChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new notification channel, representing a single notification
  /// endpoint such as an email address, SMS number, or PagerDuty service.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNotificationChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createNotificationChannel(
    _ request: Google_Monitoring_V3_CreateNotificationChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_CreateNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/CreateNotificationChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a notification channel. Fields not specified in the field mask
  /// remain unchanged.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateNotificationChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateNotificationChannel(
    _ request: Google_Monitoring_V3_UpdateNotificationChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_UpdateNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/UpdateNotificationChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a notification channel.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNotificationChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteNotificationChannel(
    _ request: Google_Monitoring_V3_DeleteNotificationChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_DeleteNotificationChannelRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/DeleteNotificationChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Causes a verification code to be delivered to the channel. The code
  /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendNotificationChannelVerificationCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendNotificationChannelVerificationCode(
    _ request: Google_Monitoring_V3_SendNotificationChannelVerificationCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_SendNotificationChannelVerificationCodeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/SendNotificationChannelVerificationCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Requests a verification code for an already verified channel that can then
  /// be used in a call to VerifyNotificationChannel() on a different channel
  /// with an equivalent identity in the same or in a different project. This
  /// makes it possible to copy a channel between projects without requiring
  /// manual reverification of the channel. If the channel is not in the
  /// verified state, this method will fail (in other words, this may only be
  /// used if the SendNotificationChannelVerificationCode and
  /// VerifyNotificationChannel paths have already been used to put the given
  /// channel into the verified state).
  ///
  /// There is no guarantee that the verification codes returned by this method
  /// will be of a similar structure or form as the ones that are delivered
  /// to the channel via SendNotificationChannelVerificationCode; while
  /// VerifyNotificationChannel() will recognize both the codes delivered via
  /// SendNotificationChannelVerificationCode() and returned from
  /// GetNotificationChannelVerificationCode(), it is typically the case that
  /// the verification codes delivered via
  /// SendNotificationChannelVerificationCode() will be shorter and also
  /// have a shorter expiration (e.g. codes such as "G-123456") whereas
  /// GetVerificationCode() will typically return a much longer, websafe base
  /// 64 encoded string that has a longer expiration time.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotificationChannelVerificationCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNotificationChannelVerificationCode(
    _ request: Google_Monitoring_V3_GetNotificationChannelVerificationCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_GetNotificationChannelVerificationCodeRequest, Google_Monitoring_V3_GetNotificationChannelVerificationCodeResponse> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/GetNotificationChannelVerificationCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Verifies a `NotificationChannel` by proving receipt of the code
  /// delivered to the channel as a result of calling
  /// `SendNotificationChannelVerificationCode`.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyNotificationChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func verifyNotificationChannel(
    _ request: Google_Monitoring_V3_VerifyNotificationChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_VerifyNotificationChannelRequest, Google_Monitoring_V3_NotificationChannel> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.NotificationChannelService/VerifyNotificationChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Monitoring_V3_NotificationChannelServiceClient: Google_Monitoring_V3_NotificationChannelServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.monitoring.v3.NotificationChannelService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Monitoring_V3_NotificationChannelServiceProvider: CallHandlerProvider {
  /// Lists the descriptors for supported channel types. The use of descriptors
  /// makes it possible for new channel types to be dynamically added.
  func listNotificationChannelDescriptors(request: Google_Monitoring_V3_ListNotificationChannelDescriptorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_ListNotificationChannelDescriptorsResponse>
  /// Gets a single channel descriptor. The descriptor indicates which fields
  /// are expected / permitted for a notification channel of the given type.
  func getNotificationChannelDescriptor(request: Google_Monitoring_V3_GetNotificationChannelDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_NotificationChannelDescriptor>
  /// Lists the notification channels that have been created for the project.
  func listNotificationChannels(request: Google_Monitoring_V3_ListNotificationChannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_ListNotificationChannelsResponse>
  /// Gets a single notification channel. The channel includes the relevant
  /// configuration details with which the channel was created. However, the
  /// response may truncate or omit passwords, API keys, or other private key
  /// matter and thus the response may not be 100% identical to the information
  /// that was supplied in the call to the create method.
  func getNotificationChannel(request: Google_Monitoring_V3_GetNotificationChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_NotificationChannel>
  /// Creates a new notification channel, representing a single notification
  /// endpoint such as an email address, SMS number, or PagerDuty service.
  func createNotificationChannel(request: Google_Monitoring_V3_CreateNotificationChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_NotificationChannel>
  /// Updates a notification channel. Fields not specified in the field mask
  /// remain unchanged.
  func updateNotificationChannel(request: Google_Monitoring_V3_UpdateNotificationChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_NotificationChannel>
  /// Deletes a notification channel.
  func deleteNotificationChannel(request: Google_Monitoring_V3_DeleteNotificationChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Causes a verification code to be delivered to the channel. The code
  /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
  func sendNotificationChannelVerificationCode(request: Google_Monitoring_V3_SendNotificationChannelVerificationCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Requests a verification code for an already verified channel that can then
  /// be used in a call to VerifyNotificationChannel() on a different channel
  /// with an equivalent identity in the same or in a different project. This
  /// makes it possible to copy a channel between projects without requiring
  /// manual reverification of the channel. If the channel is not in the
  /// verified state, this method will fail (in other words, this may only be
  /// used if the SendNotificationChannelVerificationCode and
  /// VerifyNotificationChannel paths have already been used to put the given
  /// channel into the verified state).
  ///
  /// There is no guarantee that the verification codes returned by this method
  /// will be of a similar structure or form as the ones that are delivered
  /// to the channel via SendNotificationChannelVerificationCode; while
  /// VerifyNotificationChannel() will recognize both the codes delivered via
  /// SendNotificationChannelVerificationCode() and returned from
  /// GetNotificationChannelVerificationCode(), it is typically the case that
  /// the verification codes delivered via
  /// SendNotificationChannelVerificationCode() will be shorter and also
  /// have a shorter expiration (e.g. codes such as "G-123456") whereas
  /// GetVerificationCode() will typically return a much longer, websafe base
  /// 64 encoded string that has a longer expiration time.
  func getNotificationChannelVerificationCode(request: Google_Monitoring_V3_GetNotificationChannelVerificationCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_GetNotificationChannelVerificationCodeResponse>
  /// Verifies a `NotificationChannel` by proving receipt of the code
  /// delivered to the channel as a result of calling
  /// `SendNotificationChannelVerificationCode`.
  func verifyNotificationChannel(request: Google_Monitoring_V3_VerifyNotificationChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_NotificationChannel>
}

extension Google_Monitoring_V3_NotificationChannelServiceProvider {
  public var serviceName: Substring { return "google.monitoring.v3.NotificationChannelService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListNotificationChannelDescriptors":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listNotificationChannelDescriptors(request: request, context: context)
        }
      }

    case "GetNotificationChannelDescriptor":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNotificationChannelDescriptor(request: request, context: context)
        }
      }

    case "ListNotificationChannels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listNotificationChannels(request: request, context: context)
        }
      }

    case "GetNotificationChannel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNotificationChannel(request: request, context: context)
        }
      }

    case "CreateNotificationChannel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createNotificationChannel(request: request, context: context)
        }
      }

    case "UpdateNotificationChannel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateNotificationChannel(request: request, context: context)
        }
      }

    case "DeleteNotificationChannel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteNotificationChannel(request: request, context: context)
        }
      }

    case "SendNotificationChannelVerificationCode":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sendNotificationChannelVerificationCode(request: request, context: context)
        }
      }

    case "GetNotificationChannelVerificationCode":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNotificationChannelVerificationCode(request: request, context: context)
        }
      }

    case "VerifyNotificationChannel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.verifyNotificationChannel(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

