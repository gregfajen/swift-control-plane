//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/monitoring/v3/group_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Monitoring_V3_GroupServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Monitoring_V3_GroupServiceClientProtocol: GRPCClient {
  func listGroups(
    _ request: Google_Monitoring_V3_ListGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_ListGroupsRequest, Google_Monitoring_V3_ListGroupsResponse>

  func getGroup(
    _ request: Google_Monitoring_V3_GetGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_GetGroupRequest, Google_Monitoring_V3_Group>

  func createGroup(
    _ request: Google_Monitoring_V3_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_CreateGroupRequest, Google_Monitoring_V3_Group>

  func updateGroup(
    _ request: Google_Monitoring_V3_UpdateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_UpdateGroupRequest, Google_Monitoring_V3_Group>

  func deleteGroup(
    _ request: Google_Monitoring_V3_DeleteGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listGroupMembers(
    _ request: Google_Monitoring_V3_ListGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_ListGroupMembersRequest, Google_Monitoring_V3_ListGroupMembersResponse>

}

extension Google_Monitoring_V3_GroupServiceClientProtocol {

  /// Lists the existing groups.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listGroups(
    _ request: Google_Monitoring_V3_ListGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_ListGroupsRequest, Google_Monitoring_V3_ListGroupsResponse> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.GroupService/ListGroups",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a single group.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getGroup(
    _ request: Google_Monitoring_V3_GetGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_GetGroupRequest, Google_Monitoring_V3_Group> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.GroupService/GetGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new group.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createGroup(
    _ request: Google_Monitoring_V3_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_CreateGroupRequest, Google_Monitoring_V3_Group> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.GroupService/CreateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing group.
  /// You can change any group attributes except `name`.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroup(
    _ request: Google_Monitoring_V3_UpdateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_UpdateGroupRequest, Google_Monitoring_V3_Group> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.GroupService/UpdateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an existing group.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteGroup(
    _ request: Google_Monitoring_V3_DeleteGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.GroupService/DeleteGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the monitored resources that are members of a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listGroupMembers(
    _ request: Google_Monitoring_V3_ListGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_ListGroupMembersRequest, Google_Monitoring_V3_ListGroupMembersResponse> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.GroupService/ListGroupMembers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Monitoring_V3_GroupServiceClient: Google_Monitoring_V3_GroupServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.monitoring.v3.GroupService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Monitoring_V3_GroupServiceProvider: CallHandlerProvider {
  /// Lists the existing groups.
  func listGroups(request: Google_Monitoring_V3_ListGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_ListGroupsResponse>
  /// Gets a single group.
  func getGroup(request: Google_Monitoring_V3_GetGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_Group>
  /// Creates a new group.
  func createGroup(request: Google_Monitoring_V3_CreateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_Group>
  /// Updates an existing group.
  /// You can change any group attributes except `name`.
  func updateGroup(request: Google_Monitoring_V3_UpdateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_Group>
  /// Deletes an existing group.
  func deleteGroup(request: Google_Monitoring_V3_DeleteGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Lists the monitored resources that are members of a group.
  func listGroupMembers(request: Google_Monitoring_V3_ListGroupMembersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_ListGroupMembersResponse>
}

extension Google_Monitoring_V3_GroupServiceProvider {
  public var serviceName: Substring { return "google.monitoring.v3.GroupService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListGroups":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listGroups(request: request, context: context)
        }
      }

    case "GetGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getGroup(request: request, context: context)
        }
      }

    case "CreateGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createGroup(request: request, context: context)
        }
      }

    case "UpdateGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateGroup(request: request, context: context)
        }
      }

    case "DeleteGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteGroup(request: request, context: context)
        }
      }

    case "ListGroupMembers":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listGroupMembers(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

