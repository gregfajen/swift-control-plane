//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/monitoring/v3/alert_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Monitoring_V3_AlertPolicyServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Monitoring_V3_AlertPolicyServiceClientProtocol: GRPCClient {
  func listAlertPolicies(
    _ request: Google_Monitoring_V3_ListAlertPoliciesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_ListAlertPoliciesRequest, Google_Monitoring_V3_ListAlertPoliciesResponse>

  func getAlertPolicy(
    _ request: Google_Monitoring_V3_GetAlertPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_GetAlertPolicyRequest, Google_Monitoring_V3_AlertPolicy>

  func createAlertPolicy(
    _ request: Google_Monitoring_V3_CreateAlertPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_CreateAlertPolicyRequest, Google_Monitoring_V3_AlertPolicy>

  func deleteAlertPolicy(
    _ request: Google_Monitoring_V3_DeleteAlertPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_DeleteAlertPolicyRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateAlertPolicy(
    _ request: Google_Monitoring_V3_UpdateAlertPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Monitoring_V3_UpdateAlertPolicyRequest, Google_Monitoring_V3_AlertPolicy>

}

extension Google_Monitoring_V3_AlertPolicyServiceClientProtocol {

  /// Lists the existing alerting policies for the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAlertPolicies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAlertPolicies(
    _ request: Google_Monitoring_V3_ListAlertPoliciesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_ListAlertPoliciesRequest, Google_Monitoring_V3_ListAlertPoliciesResponse> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.AlertPolicyService/ListAlertPolicies",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a single alerting policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAlertPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAlertPolicy(
    _ request: Google_Monitoring_V3_GetAlertPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_GetAlertPolicyRequest, Google_Monitoring_V3_AlertPolicy> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.AlertPolicyService/GetAlertPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new alerting policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAlertPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAlertPolicy(
    _ request: Google_Monitoring_V3_CreateAlertPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_CreateAlertPolicyRequest, Google_Monitoring_V3_AlertPolicy> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.AlertPolicyService/CreateAlertPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an alerting policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAlertPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAlertPolicy(
    _ request: Google_Monitoring_V3_DeleteAlertPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_DeleteAlertPolicyRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.AlertPolicyService/DeleteAlertPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an alerting policy. You can either replace the entire policy with
  /// a new one or replace only certain fields in the current alerting policy by
  /// specifying the fields to be updated via `updateMask`. Returns the
  /// updated alerting policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAlertPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAlertPolicy(
    _ request: Google_Monitoring_V3_UpdateAlertPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Monitoring_V3_UpdateAlertPolicyRequest, Google_Monitoring_V3_AlertPolicy> {
    return self.makeUnaryCall(
      path: "/google.monitoring.v3.AlertPolicyService/UpdateAlertPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Monitoring_V3_AlertPolicyServiceClient: Google_Monitoring_V3_AlertPolicyServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.monitoring.v3.AlertPolicyService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Monitoring_V3_AlertPolicyServiceProvider: CallHandlerProvider {
  /// Lists the existing alerting policies for the project.
  func listAlertPolicies(request: Google_Monitoring_V3_ListAlertPoliciesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_ListAlertPoliciesResponse>
  /// Gets a single alerting policy.
  func getAlertPolicy(request: Google_Monitoring_V3_GetAlertPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_AlertPolicy>
  /// Creates a new alerting policy.
  func createAlertPolicy(request: Google_Monitoring_V3_CreateAlertPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_AlertPolicy>
  /// Deletes an alerting policy.
  func deleteAlertPolicy(request: Google_Monitoring_V3_DeleteAlertPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Updates an alerting policy. You can either replace the entire policy with
  /// a new one or replace only certain fields in the current alerting policy by
  /// specifying the fields to be updated via `updateMask`. Returns the
  /// updated alerting policy.
  func updateAlertPolicy(request: Google_Monitoring_V3_UpdateAlertPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Monitoring_V3_AlertPolicy>
}

extension Google_Monitoring_V3_AlertPolicyServiceProvider {
  public var serviceName: Substring { return "google.monitoring.v3.AlertPolicyService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListAlertPolicies":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAlertPolicies(request: request, context: context)
        }
      }

    case "GetAlertPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAlertPolicy(request: request, context: context)
        }
      }

    case "CreateAlertPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAlertPolicy(request: request, context: context)
        }
      }

    case "DeleteAlertPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAlertPolicy(request: request, context: context)
        }
      }

    case "UpdateAlertPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAlertPolicy(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

