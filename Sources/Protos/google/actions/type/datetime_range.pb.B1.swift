// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/actions/type/datetime_range.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a date and time range. This can represent:
///
/// * A range between points in time with time zone or offset, e.g. the duration
///   of a flight which starts in the "America/New_York" time zone and ends in
///   the "Australia/Sydney" time zone
/// * A range between points in time without time zone/offset info, e.g. an
///   appointment in local time
/// * A range starting at a specific date and time, e.g. the range of time which
///   can be measured in milliseconds since the Unix epoch (period starting with
///   1970-01-01T00:00:00Z)
/// * A range ending at a specific date and time, e.g. range of time before
///   a deadline
///
/// When considering whether a DateTime falls within a DateTimeRange, the start
/// of the range is inclusive and the end is exclusive.
///
/// While [google.type.DateTime][google.type.DateTime] allows zero years, DateTimeRange does not.
/// Year must always be non-zero.
///
/// When both start and end are set, either both or neither must have a
/// time_offset. When set, time_offset can be specified by either utc_offset or
/// time_zone and must match for start and end, that is if start has utc_offset
/// set then end must also have utc_offset set. The values of utc_offset or
/// time_zone need not be the same for start and end.
///
/// When both start and end are set, start must be chronologically less than or
/// equal to end. When start and end are equal, the range is empty.
///
/// The semantics of start and end are the same as those of
/// [google.type.DateTime][google.type.DateTime].
public struct Google_Actions_Type_DateTimeRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DateTime at which the date range begins. If unset, the range has no
  /// beginning bound.
  public var start: Google_Type_DateTime {
    get {return _storage._start ?? Google_Type_DateTime()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  public var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  public mutating func clearStart() {_uniqueStorage()._start = nil}

  /// DateTime at which the date range ends. If unset, the range has no ending
  /// bound.
  public var end: Google_Type_DateTime {
    get {return _storage._end ?? Google_Type_DateTime()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  public var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  public mutating func clearEnd() {_uniqueStorage()._end = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.actions.type"

extension Google_Actions_Type_DateTimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DateTimeRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  fileprivate class _StorageClass {
    var _start: Google_Type_DateTime? = nil
    var _end: Google_Type_DateTime? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._start) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._end) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Actions_Type_DateTimeRange, rhs: Google_Actions_Type_DateTimeRange) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
