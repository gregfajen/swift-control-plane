// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/appengine/v1/instance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An Instance resource is the computing unit that App Engine uses to
/// automatically scale an application.
public struct Google_Appengine_V1_Instance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Full path to the Instance resource in the API.
  /// Example: `apps/myapp/services/default/versions/v1/instances/instance-1`.
  ///
  /// @OutputOnly
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Relative name of the instance within the version.
  /// Example: `instance-1`.
  ///
  /// @OutputOnly
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// App Engine release this instance is running on.
  ///
  /// @OutputOnly
  public var appEngineRelease: String {
    get {return _storage._appEngineRelease}
    set {_uniqueStorage()._appEngineRelease = newValue}
  }

  /// Availability of the instance.
  ///
  /// @OutputOnly
  public var availability: Google_Appengine_V1_Instance.Availability {
    get {return _storage._availability}
    set {_uniqueStorage()._availability = newValue}
  }

  /// Name of the virtual machine where this instance lives. Only applicable
  /// for instances in App Engine flexible environment.
  ///
  /// @OutputOnly
  public var vmName: String {
    get {return _storage._vmName}
    set {_uniqueStorage()._vmName = newValue}
  }

  /// Zone where the virtual machine is located. Only applicable for instances
  /// in App Engine flexible environment.
  ///
  /// @OutputOnly
  public var vmZoneName: String {
    get {return _storage._vmZoneName}
    set {_uniqueStorage()._vmZoneName = newValue}
  }

  /// Virtual machine ID of this instance. Only applicable for instances in
  /// App Engine flexible environment.
  ///
  /// @OutputOnly
  public var vmID: String {
    get {return _storage._vmID}
    set {_uniqueStorage()._vmID = newValue}
  }

  /// Time that this instance was started.
  ///
  /// @OutputOnly
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// Number of requests since this instance was started.
  ///
  /// @OutputOnly
  public var requests: Int32 {
    get {return _storage._requests}
    set {_uniqueStorage()._requests = newValue}
  }

  /// Number of errors since this instance was started.
  ///
  /// @OutputOnly
  public var errors: Int32 {
    get {return _storage._errors}
    set {_uniqueStorage()._errors = newValue}
  }

  /// Average queries per second (QPS) over the last minute.
  ///
  /// @OutputOnly
  public var qps: Float {
    get {return _storage._qps}
    set {_uniqueStorage()._qps = newValue}
  }

  /// Average latency (ms) over the last minute.
  ///
  /// @OutputOnly
  public var averageLatency: Int32 {
    get {return _storage._averageLatency}
    set {_uniqueStorage()._averageLatency = newValue}
  }

  /// Total memory in use (bytes).
  ///
  /// @OutputOnly
  public var memoryUsage: Int64 {
    get {return _storage._memoryUsage}
    set {_uniqueStorage()._memoryUsage = newValue}
  }

  /// Status of the virtual machine where this instance lives. Only applicable
  /// for instances in App Engine flexible environment.
  ///
  /// @OutputOnly
  public var vmStatus: String {
    get {return _storage._vmStatus}
    set {_uniqueStorage()._vmStatus = newValue}
  }

  /// Whether this instance is in debug mode. Only applicable for instances in
  /// App Engine flexible environment.
  ///
  /// @OutputOnly
  public var vmDebugEnabled: Bool {
    get {return _storage._vmDebugEnabled}
    set {_uniqueStorage()._vmDebugEnabled = newValue}
  }

  /// The IP address of this instance. Only applicable for instances in App
  /// Engine flexible environment.
  ///
  /// @OutputOnly
  public var vmIp: String {
    get {return _storage._vmIp}
    set {_uniqueStorage()._vmIp = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Availability of the instance.
  public enum Availability: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case resident // = 1
    case dynamic // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .resident
      case 2: self = .dynamic
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .resident: return 1
      case .dynamic: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Appengine_V1_Instance.Availability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Appengine_V1_Instance.Availability] = [
    .unspecified,
    .resident,
    .dynamic,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.appengine.v1"

extension Google_Appengine_V1_Instance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Instance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .standard(proto: "app_engine_release"),
    4: .same(proto: "availability"),
    5: .standard(proto: "vm_name"),
    6: .standard(proto: "vm_zone_name"),
    7: .standard(proto: "vm_id"),
    8: .standard(proto: "start_time"),
    9: .same(proto: "requests"),
    10: .same(proto: "errors"),
    11: .same(proto: "qps"),
    12: .standard(proto: "average_latency"),
    13: .standard(proto: "memory_usage"),
    14: .standard(proto: "vm_status"),
    15: .standard(proto: "vm_debug_enabled"),
    16: .standard(proto: "vm_ip"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _id: String = String()
    var _appEngineRelease: String = String()
    var _availability: Google_Appengine_V1_Instance.Availability = .unspecified
    var _vmName: String = String()
    var _vmZoneName: String = String()
    var _vmID: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _requests: Int32 = 0
    var _errors: Int32 = 0
    var _qps: Float = 0
    var _averageLatency: Int32 = 0
    var _memoryUsage: Int64 = 0
    var _vmStatus: String = String()
    var _vmDebugEnabled: Bool = false
    var _vmIp: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _id = source._id
      _appEngineRelease = source._appEngineRelease
      _availability = source._availability
      _vmName = source._vmName
      _vmZoneName = source._vmZoneName
      _vmID = source._vmID
      _startTime = source._startTime
      _requests = source._requests
      _errors = source._errors
      _qps = source._qps
      _averageLatency = source._averageLatency
      _memoryUsage = source._memoryUsage
      _vmStatus = source._vmStatus
      _vmDebugEnabled = source._vmDebugEnabled
      _vmIp = source._vmIp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._appEngineRelease) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._availability) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._vmName) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._vmZoneName) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._vmID) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._requests) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._errors) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._qps) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._averageLatency) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._memoryUsage) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._vmStatus) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._vmDebugEnabled) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._vmIp) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._appEngineRelease.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appEngineRelease, fieldNumber: 3)
      }
      if _storage._availability != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._availability, fieldNumber: 4)
      }
      if !_storage._vmName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vmName, fieldNumber: 5)
      }
      if !_storage._vmZoneName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vmZoneName, fieldNumber: 6)
      }
      if !_storage._vmID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vmID, fieldNumber: 7)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._requests != 0 {
        try visitor.visitSingularInt32Field(value: _storage._requests, fieldNumber: 9)
      }
      if _storage._errors != 0 {
        try visitor.visitSingularInt32Field(value: _storage._errors, fieldNumber: 10)
      }
      if _storage._qps != 0 {
        try visitor.visitSingularFloatField(value: _storage._qps, fieldNumber: 11)
      }
      if _storage._averageLatency != 0 {
        try visitor.visitSingularInt32Field(value: _storage._averageLatency, fieldNumber: 12)
      }
      if _storage._memoryUsage != 0 {
        try visitor.visitSingularInt64Field(value: _storage._memoryUsage, fieldNumber: 13)
      }
      if !_storage._vmStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vmStatus, fieldNumber: 14)
      }
      if _storage._vmDebugEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._vmDebugEnabled, fieldNumber: 15)
      }
      if !_storage._vmIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vmIp, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_Instance, rhs: Google_Appengine_V1_Instance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._appEngineRelease != rhs_storage._appEngineRelease {return false}
        if _storage._availability != rhs_storage._availability {return false}
        if _storage._vmName != rhs_storage._vmName {return false}
        if _storage._vmZoneName != rhs_storage._vmZoneName {return false}
        if _storage._vmID != rhs_storage._vmID {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._requests != rhs_storage._requests {return false}
        if _storage._errors != rhs_storage._errors {return false}
        if _storage._qps != rhs_storage._qps {return false}
        if _storage._averageLatency != rhs_storage._averageLatency {return false}
        if _storage._memoryUsage != rhs_storage._memoryUsage {return false}
        if _storage._vmStatus != rhs_storage._vmStatus {return false}
        if _storage._vmDebugEnabled != rhs_storage._vmDebugEnabled {return false}
        if _storage._vmIp != rhs_storage._vmIp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_Instance.Availability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "RESIDENT"),
    2: .same(proto: "DYNAMIC"),
  ]
}
