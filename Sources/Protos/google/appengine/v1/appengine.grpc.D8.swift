//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/appengine/v1/appengine.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Appengine_V1_ApplicationsClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_ApplicationsClientProtocol: GRPCClient {
  func getApplication(
    _ request: Google_Appengine_V1_GetApplicationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetApplicationRequest, Google_Appengine_V1_Application>

  func createApplication(
    _ request: Google_Appengine_V1_CreateApplicationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_CreateApplicationRequest, Google_Longrunning_Operation>

  func updateApplication(
    _ request: Google_Appengine_V1_UpdateApplicationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_UpdateApplicationRequest, Google_Longrunning_Operation>

  func repairApplication(
    _ request: Google_Appengine_V1_RepairApplicationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_RepairApplicationRequest, Google_Longrunning_Operation>

}

extension Google_Appengine_V1_ApplicationsClientProtocol {

  /// Gets information about an application.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetApplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getApplication(
    _ request: Google_Appengine_V1_GetApplicationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetApplicationRequest, Google_Appengine_V1_Application> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Applications/GetApplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates an App Engine application for a Google Cloud Platform project.
  /// Required fields:
  ///
  /// * `id` - The ID of the target Cloud Platform project.
  /// * *location* - The [region](https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.
  ///
  /// For more information about App Engine applications, see [Managing Projects, Applications, and Billing](https://cloud.google.com/appengine/docs/standard/python/console/).
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateApplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createApplication(
    _ request: Google_Appengine_V1_CreateApplicationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_CreateApplicationRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Applications/CreateApplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified Application resource.
  /// You can update the following fields:
  ///
  /// * `auth_domain` - Google authentication domain for controlling user access to the application.
  /// * `default_cookie_expiration` - Cookie expiration policy for the application.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateApplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateApplication(
    _ request: Google_Appengine_V1_UpdateApplicationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_UpdateApplicationRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Applications/UpdateApplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Recreates the required App Engine features for the specified App Engine
  /// application, for example a Cloud Storage bucket or App Engine service
  /// account.
  /// Use this method if you receive an error message about a missing feature,
  /// for example, *Error retrieving the App Engine service account*.
  /// If you have deleted your App Engine service account, this will
  /// not be able to recreate it. Instead, you should attempt to use the
  /// IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B"name"%3A"projects%2F-%2FserviceAccounts%2Funique_id"%2C"resource"%3A%7B%7D%7D .
  /// If the deletion was recent, the numeric ID can be found in the Cloud
  /// Console Activity Log.
  ///
  /// - Parameters:
  ///   - request: Request to send to RepairApplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func repairApplication(
    _ request: Google_Appengine_V1_RepairApplicationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_RepairApplicationRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Applications/RepairApplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_ApplicationsClient: Google_Appengine_V1_ApplicationsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.Applications service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_ServicesClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_ServicesClientProtocol: GRPCClient {
  func listServices(
    _ request: Google_Appengine_V1_ListServicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListServicesRequest, Google_Appengine_V1_ListServicesResponse>

  func getService(
    _ request: Google_Appengine_V1_GetServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetServiceRequest, Google_Appengine_V1_Service>

  func updateService(
    _ request: Google_Appengine_V1_UpdateServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_UpdateServiceRequest, Google_Longrunning_Operation>

  func deleteService(
    _ request: Google_Appengine_V1_DeleteServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DeleteServiceRequest, Google_Longrunning_Operation>

}

extension Google_Appengine_V1_ServicesClientProtocol {

  /// Lists all the services in the application.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListServices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listServices(
    _ request: Google_Appengine_V1_ListServicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListServicesRequest, Google_Appengine_V1_ListServicesResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Services/ListServices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the current configuration of the specified service.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getService(
    _ request: Google_Appengine_V1_GetServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetServiceRequest, Google_Appengine_V1_Service> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Services/GetService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the configuration of the specified service.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateService(
    _ request: Google_Appengine_V1_UpdateServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_UpdateServiceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Services/UpdateService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the specified service and all enclosed versions.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteService(
    _ request: Google_Appengine_V1_DeleteServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DeleteServiceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Services/DeleteService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_ServicesClient: Google_Appengine_V1_ServicesClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.Services service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_VersionsClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_VersionsClientProtocol: GRPCClient {
  func listVersions(
    _ request: Google_Appengine_V1_ListVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListVersionsRequest, Google_Appengine_V1_ListVersionsResponse>

  func getVersion(
    _ request: Google_Appengine_V1_GetVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetVersionRequest, Google_Appengine_V1_Version>

  func createVersion(
    _ request: Google_Appengine_V1_CreateVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_CreateVersionRequest, Google_Longrunning_Operation>

  func updateVersion(
    _ request: Google_Appengine_V1_UpdateVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_UpdateVersionRequest, Google_Longrunning_Operation>

  func deleteVersion(
    _ request: Google_Appengine_V1_DeleteVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DeleteVersionRequest, Google_Longrunning_Operation>

}

extension Google_Appengine_V1_VersionsClientProtocol {

  /// Lists the versions of a service.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listVersions(
    _ request: Google_Appengine_V1_ListVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListVersionsRequest, Google_Appengine_V1_ListVersionsResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Versions/ListVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the specified Version resource.
  /// By default, only a `BASIC_VIEW` will be returned.
  /// Specify the `FULL_VIEW` parameter to get the full resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersion(
    _ request: Google_Appengine_V1_GetVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetVersionRequest, Google_Appengine_V1_Version> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Versions/GetVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deploys code and resource files to a new version.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createVersion(
    _ request: Google_Appengine_V1_CreateVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_CreateVersionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Versions/CreateVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified Version resource.
  /// You can specify the following fields depending on the App Engine
  /// environment and type of scaling that the version resource uses:
  ///
  /// **Standard environment**
  ///
  /// * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)
  ///
  /// *automatic scaling* in the standard environment:
  ///
  /// * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automaticScaling.standard_scheduler_settings.max_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  /// * [`automaticScaling.standard_scheduler_settings.min_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  /// * [`automaticScaling.standard_scheduler_settings.target_cpu_utilization`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  /// * [`automaticScaling.standard_scheduler_settings.target_throughput_utilization`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  ///
  /// *basic scaling* or *manual scaling* in the standard environment:
  ///
  /// * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)
  /// * [`manual_scaling.instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
  ///
  /// **Flexible environment**
  ///
  /// * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)
  ///
  /// *automatic scaling* in the flexible environment:
  ///
  /// * [`automatic_scaling.min_total_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.max_total_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.cool_down_period_sec`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.cpu_utilization.target_utilization`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  ///
  /// *manual scaling* in the flexible environment:
  ///
  /// * [`manual_scaling.instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVersion(
    _ request: Google_Appengine_V1_UpdateVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_UpdateVersionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Versions/UpdateVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an existing Version resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteVersion(
    _ request: Google_Appengine_V1_DeleteVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DeleteVersionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Versions/DeleteVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_VersionsClient: Google_Appengine_V1_VersionsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.Versions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_InstancesClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_InstancesClientProtocol: GRPCClient {
  func listInstances(
    _ request: Google_Appengine_V1_ListInstancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListInstancesRequest, Google_Appengine_V1_ListInstancesResponse>

  func getInstance(
    _ request: Google_Appengine_V1_GetInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetInstanceRequest, Google_Appengine_V1_Instance>

  func deleteInstance(
    _ request: Google_Appengine_V1_DeleteInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DeleteInstanceRequest, Google_Longrunning_Operation>

  func debugInstance(
    _ request: Google_Appengine_V1_DebugInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DebugInstanceRequest, Google_Longrunning_Operation>

}

extension Google_Appengine_V1_InstancesClientProtocol {

  /// Lists the instances of a version.
  ///
  /// Tip: To aggregate details about instances over time, see the
  /// [Stackdriver Monitoring API](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInstances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInstances(
    _ request: Google_Appengine_V1_ListInstancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListInstancesRequest, Google_Appengine_V1_ListInstancesResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Instances/ListInstances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets instance information.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInstance(
    _ request: Google_Appengine_V1_GetInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetInstanceRequest, Google_Appengine_V1_Instance> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Instances/GetInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Stops a running instance.
  ///
  /// The instance might be automatically recreated based on the scaling settings
  /// of the version. For more information, see "How Instances are Managed"
  /// ([standard environment](https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) |
  /// [flexible environment](https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).
  ///
  /// To ensure that instances are not re-created and avoid getting billed, you
  /// can stop all instances within the target version by changing the serving
  /// status of the version to `STOPPED` with the
  /// [`apps.services.versions.patch`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch)
  /// method.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInstance(
    _ request: Google_Appengine_V1_DeleteInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DeleteInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Instances/DeleteInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Enables debugging on a VM instance. This allows you to use the SSH
  /// command to connect to the virtual machine where the instance lives.
  /// While in "debug mode", the instance continues to serve live traffic.
  /// You should delete the instance when you are done debugging and then
  /// allow the system to take over and determine if another instance
  /// should be started.
  ///
  /// Only applicable for instances in App Engine flexible environment.
  ///
  /// - Parameters:
  ///   - request: Request to send to DebugInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func debugInstance(
    _ request: Google_Appengine_V1_DebugInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DebugInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Instances/DebugInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_InstancesClient: Google_Appengine_V1_InstancesClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.Instances service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_FirewallClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_FirewallClientProtocol: GRPCClient {
  func listIngressRules(
    _ request: Google_Appengine_V1_ListIngressRulesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListIngressRulesRequest, Google_Appengine_V1_ListIngressRulesResponse>

  func batchUpdateIngressRules(
    _ request: Google_Appengine_V1_BatchUpdateIngressRulesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_BatchUpdateIngressRulesRequest, Google_Appengine_V1_BatchUpdateIngressRulesResponse>

  func createIngressRule(
    _ request: Google_Appengine_V1_CreateIngressRuleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_CreateIngressRuleRequest, Google_Appengine_V1_FirewallRule>

  func getIngressRule(
    _ request: Google_Appengine_V1_GetIngressRuleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetIngressRuleRequest, Google_Appengine_V1_FirewallRule>

  func updateIngressRule(
    _ request: Google_Appengine_V1_UpdateIngressRuleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_UpdateIngressRuleRequest, Google_Appengine_V1_FirewallRule>

  func deleteIngressRule(
    _ request: Google_Appengine_V1_DeleteIngressRuleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DeleteIngressRuleRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Appengine_V1_FirewallClientProtocol {

  /// Lists the firewall rules of an application.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListIngressRules.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listIngressRules(
    _ request: Google_Appengine_V1_ListIngressRulesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListIngressRulesRequest, Google_Appengine_V1_ListIngressRulesResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Firewall/ListIngressRules",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Replaces the entire firewall ruleset in one bulk operation. This overrides
  /// and replaces the rules of an existing firewall with the new rules.
  ///
  /// If the final rule does not match traffic with the '*' wildcard IP range,
  /// then an "allow all" rule is explicitly added to the end of the list.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchUpdateIngressRules.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchUpdateIngressRules(
    _ request: Google_Appengine_V1_BatchUpdateIngressRulesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_BatchUpdateIngressRulesRequest, Google_Appengine_V1_BatchUpdateIngressRulesResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Firewall/BatchUpdateIngressRules",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a firewall rule for the application.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateIngressRule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createIngressRule(
    _ request: Google_Appengine_V1_CreateIngressRuleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_CreateIngressRuleRequest, Google_Appengine_V1_FirewallRule> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Firewall/CreateIngressRule",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the specified firewall rule.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIngressRule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIngressRule(
    _ request: Google_Appengine_V1_GetIngressRuleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetIngressRuleRequest, Google_Appengine_V1_FirewallRule> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Firewall/GetIngressRule",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified firewall rule.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateIngressRule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateIngressRule(
    _ request: Google_Appengine_V1_UpdateIngressRuleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_UpdateIngressRuleRequest, Google_Appengine_V1_FirewallRule> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Firewall/UpdateIngressRule",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the specified firewall rule.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteIngressRule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteIngressRule(
    _ request: Google_Appengine_V1_DeleteIngressRuleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DeleteIngressRuleRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.Firewall/DeleteIngressRule",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_FirewallClient: Google_Appengine_V1_FirewallClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.Firewall service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_AuthorizedDomainsClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_AuthorizedDomainsClientProtocol: GRPCClient {
  func listAuthorizedDomains(
    _ request: Google_Appengine_V1_ListAuthorizedDomainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListAuthorizedDomainsRequest, Google_Appengine_V1_ListAuthorizedDomainsResponse>

}

extension Google_Appengine_V1_AuthorizedDomainsClientProtocol {

  /// Lists all domains the user is authorized to administer.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAuthorizedDomains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAuthorizedDomains(
    _ request: Google_Appengine_V1_ListAuthorizedDomainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListAuthorizedDomainsRequest, Google_Appengine_V1_ListAuthorizedDomainsResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.AuthorizedDomains/ListAuthorizedDomains",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_AuthorizedDomainsClient: Google_Appengine_V1_AuthorizedDomainsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.AuthorizedDomains service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_AuthorizedCertificatesClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_AuthorizedCertificatesClientProtocol: GRPCClient {
  func listAuthorizedCertificates(
    _ request: Google_Appengine_V1_ListAuthorizedCertificatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListAuthorizedCertificatesRequest, Google_Appengine_V1_ListAuthorizedCertificatesResponse>

  func getAuthorizedCertificate(
    _ request: Google_Appengine_V1_GetAuthorizedCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetAuthorizedCertificateRequest, Google_Appengine_V1_AuthorizedCertificate>

  func createAuthorizedCertificate(
    _ request: Google_Appengine_V1_CreateAuthorizedCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_CreateAuthorizedCertificateRequest, Google_Appengine_V1_AuthorizedCertificate>

  func updateAuthorizedCertificate(
    _ request: Google_Appengine_V1_UpdateAuthorizedCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_UpdateAuthorizedCertificateRequest, Google_Appengine_V1_AuthorizedCertificate>

  func deleteAuthorizedCertificate(
    _ request: Google_Appengine_V1_DeleteAuthorizedCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DeleteAuthorizedCertificateRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Appengine_V1_AuthorizedCertificatesClientProtocol {

  /// Lists all SSL certificates the user is authorized to administer.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAuthorizedCertificates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAuthorizedCertificates(
    _ request: Google_Appengine_V1_ListAuthorizedCertificatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListAuthorizedCertificatesRequest, Google_Appengine_V1_ListAuthorizedCertificatesResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.AuthorizedCertificates/ListAuthorizedCertificates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the specified SSL certificate.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAuthorizedCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAuthorizedCertificate(
    _ request: Google_Appengine_V1_GetAuthorizedCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetAuthorizedCertificateRequest, Google_Appengine_V1_AuthorizedCertificate> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.AuthorizedCertificates/GetAuthorizedCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Uploads the specified SSL certificate.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAuthorizedCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAuthorizedCertificate(
    _ request: Google_Appengine_V1_CreateAuthorizedCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_CreateAuthorizedCertificateRequest, Google_Appengine_V1_AuthorizedCertificate> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.AuthorizedCertificates/CreateAuthorizedCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified SSL certificate. To renew a certificate and maintain
  /// its existing domain mappings, update `certificate_data` with a new
  /// certificate. The new certificate must be applicable to the same domains as
  /// the original certificate. The certificate `display_name` may also be
  /// updated.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAuthorizedCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAuthorizedCertificate(
    _ request: Google_Appengine_V1_UpdateAuthorizedCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_UpdateAuthorizedCertificateRequest, Google_Appengine_V1_AuthorizedCertificate> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.AuthorizedCertificates/UpdateAuthorizedCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the specified SSL certificate.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAuthorizedCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAuthorizedCertificate(
    _ request: Google_Appengine_V1_DeleteAuthorizedCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DeleteAuthorizedCertificateRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.AuthorizedCertificates/DeleteAuthorizedCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_AuthorizedCertificatesClient: Google_Appengine_V1_AuthorizedCertificatesClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.AuthorizedCertificates service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Appengine_V1_DomainMappingsClient, then call methods of this protocol to make API calls.
public protocol Google_Appengine_V1_DomainMappingsClientProtocol: GRPCClient {
  func listDomainMappings(
    _ request: Google_Appengine_V1_ListDomainMappingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_ListDomainMappingsRequest, Google_Appengine_V1_ListDomainMappingsResponse>

  func getDomainMapping(
    _ request: Google_Appengine_V1_GetDomainMappingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_GetDomainMappingRequest, Google_Appengine_V1_DomainMapping>

  func createDomainMapping(
    _ request: Google_Appengine_V1_CreateDomainMappingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_CreateDomainMappingRequest, Google_Longrunning_Operation>

  func updateDomainMapping(
    _ request: Google_Appengine_V1_UpdateDomainMappingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_UpdateDomainMappingRequest, Google_Longrunning_Operation>

  func deleteDomainMapping(
    _ request: Google_Appengine_V1_DeleteDomainMappingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Appengine_V1_DeleteDomainMappingRequest, Google_Longrunning_Operation>

}

extension Google_Appengine_V1_DomainMappingsClientProtocol {

  /// Lists the domain mappings on an application.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDomainMappings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDomainMappings(
    _ request: Google_Appengine_V1_ListDomainMappingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_ListDomainMappingsRequest, Google_Appengine_V1_ListDomainMappingsResponse> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.DomainMappings/ListDomainMappings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the specified domain mapping.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDomainMapping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDomainMapping(
    _ request: Google_Appengine_V1_GetDomainMappingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_GetDomainMappingRequest, Google_Appengine_V1_DomainMapping> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.DomainMappings/GetDomainMapping",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Maps a domain to an application. A user must be authorized to administer a
  /// domain in order to map it to an application. For a list of available
  /// authorized domains, see [`AuthorizedDomains.ListAuthorizedDomains`]().
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDomainMapping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDomainMapping(
    _ request: Google_Appengine_V1_CreateDomainMappingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_CreateDomainMappingRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.DomainMappings/CreateDomainMapping",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified domain mapping. To map an SSL certificate to a
  /// domain mapping, update `certificate_id` to point to an `AuthorizedCertificate`
  /// resource. A user must be authorized to administer the associated domain
  /// in order to update a `DomainMapping` resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDomainMapping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDomainMapping(
    _ request: Google_Appengine_V1_UpdateDomainMappingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_UpdateDomainMappingRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.DomainMappings/UpdateDomainMapping",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the specified domain mapping. A user must be authorized to
  /// administer the associated domain in order to delete a `DomainMapping`
  /// resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDomainMapping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDomainMapping(
    _ request: Google_Appengine_V1_DeleteDomainMappingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Appengine_V1_DeleteDomainMappingRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.appengine.v1.DomainMappings/DeleteDomainMapping",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Appengine_V1_DomainMappingsClient: Google_Appengine_V1_DomainMappingsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.appengine.v1.DomainMappings service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_ApplicationsProvider: CallHandlerProvider {
  /// Gets information about an application.
  func getApplication(request: Google_Appengine_V1_GetApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_Application>
  /// Creates an App Engine application for a Google Cloud Platform project.
  /// Required fields:
  ///
  /// * `id` - The ID of the target Cloud Platform project.
  /// * *location* - The [region](https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.
  ///
  /// For more information about App Engine applications, see [Managing Projects, Applications, and Billing](https://cloud.google.com/appengine/docs/standard/python/console/).
  func createApplication(request: Google_Appengine_V1_CreateApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the specified Application resource.
  /// You can update the following fields:
  ///
  /// * `auth_domain` - Google authentication domain for controlling user access to the application.
  /// * `default_cookie_expiration` - Cookie expiration policy for the application.
  func updateApplication(request: Google_Appengine_V1_UpdateApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Recreates the required App Engine features for the specified App Engine
  /// application, for example a Cloud Storage bucket or App Engine service
  /// account.
  /// Use this method if you receive an error message about a missing feature,
  /// for example, *Error retrieving the App Engine service account*.
  /// If you have deleted your App Engine service account, this will
  /// not be able to recreate it. Instead, you should attempt to use the
  /// IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B"name"%3A"projects%2F-%2FserviceAccounts%2Funique_id"%2C"resource"%3A%7B%7D%7D .
  /// If the deletion was recent, the numeric ID can be found in the Cloud
  /// Console Activity Log.
  func repairApplication(request: Google_Appengine_V1_RepairApplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Appengine_V1_ApplicationsProvider {
  public var serviceName: Substring { return "google.appengine.v1.Applications" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetApplication":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getApplication(request: request, context: context)
        }
      }

    case "CreateApplication":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createApplication(request: request, context: context)
        }
      }

    case "UpdateApplication":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateApplication(request: request, context: context)
        }
      }

    case "RepairApplication":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.repairApplication(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_ServicesProvider: CallHandlerProvider {
  /// Lists all the services in the application.
  func listServices(request: Google_Appengine_V1_ListServicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListServicesResponse>
  /// Gets the current configuration of the specified service.
  func getService(request: Google_Appengine_V1_GetServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_Service>
  /// Updates the configuration of the specified service.
  func updateService(request: Google_Appengine_V1_UpdateServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes the specified service and all enclosed versions.
  func deleteService(request: Google_Appengine_V1_DeleteServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Appengine_V1_ServicesProvider {
  public var serviceName: Substring { return "google.appengine.v1.Services" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListServices":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listServices(request: request, context: context)
        }
      }

    case "GetService":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getService(request: request, context: context)
        }
      }

    case "UpdateService":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateService(request: request, context: context)
        }
      }

    case "DeleteService":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteService(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_VersionsProvider: CallHandlerProvider {
  /// Lists the versions of a service.
  func listVersions(request: Google_Appengine_V1_ListVersionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListVersionsResponse>
  /// Gets the specified Version resource.
  /// By default, only a `BASIC_VIEW` will be returned.
  /// Specify the `FULL_VIEW` parameter to get the full resource.
  func getVersion(request: Google_Appengine_V1_GetVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_Version>
  /// Deploys code and resource files to a new version.
  func createVersion(request: Google_Appengine_V1_CreateVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the specified Version resource.
  /// You can specify the following fields depending on the App Engine
  /// environment and type of scaling that the version resource uses:
  ///
  /// **Standard environment**
  ///
  /// * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)
  ///
  /// *automatic scaling* in the standard environment:
  ///
  /// * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automaticScaling.standard_scheduler_settings.max_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  /// * [`automaticScaling.standard_scheduler_settings.min_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  /// * [`automaticScaling.standard_scheduler_settings.target_cpu_utilization`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  /// * [`automaticScaling.standard_scheduler_settings.target_throughput_utilization`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
  ///
  /// *basic scaling* or *manual scaling* in the standard environment:
  ///
  /// * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)
  /// * [`manual_scaling.instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
  ///
  /// **Flexible environment**
  ///
  /// * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)
  ///
  /// *automatic scaling* in the flexible environment:
  ///
  /// * [`automatic_scaling.min_total_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.max_total_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.cool_down_period_sec`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  /// * [`automatic_scaling.cpu_utilization.target_utilization`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
  ///
  /// *manual scaling* in the flexible environment:
  ///
  /// * [`manual_scaling.instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
  func updateVersion(request: Google_Appengine_V1_UpdateVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes an existing Version resource.
  func deleteVersion(request: Google_Appengine_V1_DeleteVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Appengine_V1_VersionsProvider {
  public var serviceName: Substring { return "google.appengine.v1.Versions" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listVersions(request: request, context: context)
        }
      }

    case "GetVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getVersion(request: request, context: context)
        }
      }

    case "CreateVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createVersion(request: request, context: context)
        }
      }

    case "UpdateVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateVersion(request: request, context: context)
        }
      }

    case "DeleteVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteVersion(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_InstancesProvider: CallHandlerProvider {
  /// Lists the instances of a version.
  ///
  /// Tip: To aggregate details about instances over time, see the
  /// [Stackdriver Monitoring API](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
  func listInstances(request: Google_Appengine_V1_ListInstancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListInstancesResponse>
  /// Gets instance information.
  func getInstance(request: Google_Appengine_V1_GetInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_Instance>
  /// Stops a running instance.
  ///
  /// The instance might be automatically recreated based on the scaling settings
  /// of the version. For more information, see "How Instances are Managed"
  /// ([standard environment](https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) |
  /// [flexible environment](https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).
  ///
  /// To ensure that instances are not re-created and avoid getting billed, you
  /// can stop all instances within the target version by changing the serving
  /// status of the version to `STOPPED` with the
  /// [`apps.services.versions.patch`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch)
  /// method.
  func deleteInstance(request: Google_Appengine_V1_DeleteInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Enables debugging on a VM instance. This allows you to use the SSH
  /// command to connect to the virtual machine where the instance lives.
  /// While in "debug mode", the instance continues to serve live traffic.
  /// You should delete the instance when you are done debugging and then
  /// allow the system to take over and determine if another instance
  /// should be started.
  ///
  /// Only applicable for instances in App Engine flexible environment.
  func debugInstance(request: Google_Appengine_V1_DebugInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Appengine_V1_InstancesProvider {
  public var serviceName: Substring { return "google.appengine.v1.Instances" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListInstances":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInstances(request: request, context: context)
        }
      }

    case "GetInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInstance(request: request, context: context)
        }
      }

    case "DeleteInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInstance(request: request, context: context)
        }
      }

    case "DebugInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.debugInstance(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_FirewallProvider: CallHandlerProvider {
  /// Lists the firewall rules of an application.
  func listIngressRules(request: Google_Appengine_V1_ListIngressRulesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListIngressRulesResponse>
  /// Replaces the entire firewall ruleset in one bulk operation. This overrides
  /// and replaces the rules of an existing firewall with the new rules.
  ///
  /// If the final rule does not match traffic with the '*' wildcard IP range,
  /// then an "allow all" rule is explicitly added to the end of the list.
  func batchUpdateIngressRules(request: Google_Appengine_V1_BatchUpdateIngressRulesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_BatchUpdateIngressRulesResponse>
  /// Creates a firewall rule for the application.
  func createIngressRule(request: Google_Appengine_V1_CreateIngressRuleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_FirewallRule>
  /// Gets the specified firewall rule.
  func getIngressRule(request: Google_Appengine_V1_GetIngressRuleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_FirewallRule>
  /// Updates the specified firewall rule.
  func updateIngressRule(request: Google_Appengine_V1_UpdateIngressRuleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_FirewallRule>
  /// Deletes the specified firewall rule.
  func deleteIngressRule(request: Google_Appengine_V1_DeleteIngressRuleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Appengine_V1_FirewallProvider {
  public var serviceName: Substring { return "google.appengine.v1.Firewall" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListIngressRules":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listIngressRules(request: request, context: context)
        }
      }

    case "BatchUpdateIngressRules":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchUpdateIngressRules(request: request, context: context)
        }
      }

    case "CreateIngressRule":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createIngressRule(request: request, context: context)
        }
      }

    case "GetIngressRule":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIngressRule(request: request, context: context)
        }
      }

    case "UpdateIngressRule":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateIngressRule(request: request, context: context)
        }
      }

    case "DeleteIngressRule":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteIngressRule(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_AuthorizedDomainsProvider: CallHandlerProvider {
  /// Lists all domains the user is authorized to administer.
  func listAuthorizedDomains(request: Google_Appengine_V1_ListAuthorizedDomainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListAuthorizedDomainsResponse>
}

extension Google_Appengine_V1_AuthorizedDomainsProvider {
  public var serviceName: Substring { return "google.appengine.v1.AuthorizedDomains" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListAuthorizedDomains":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAuthorizedDomains(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_AuthorizedCertificatesProvider: CallHandlerProvider {
  /// Lists all SSL certificates the user is authorized to administer.
  func listAuthorizedCertificates(request: Google_Appengine_V1_ListAuthorizedCertificatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListAuthorizedCertificatesResponse>
  /// Gets the specified SSL certificate.
  func getAuthorizedCertificate(request: Google_Appengine_V1_GetAuthorizedCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_AuthorizedCertificate>
  /// Uploads the specified SSL certificate.
  func createAuthorizedCertificate(request: Google_Appengine_V1_CreateAuthorizedCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_AuthorizedCertificate>
  /// Updates the specified SSL certificate. To renew a certificate and maintain
  /// its existing domain mappings, update `certificate_data` with a new
  /// certificate. The new certificate must be applicable to the same domains as
  /// the original certificate. The certificate `display_name` may also be
  /// updated.
  func updateAuthorizedCertificate(request: Google_Appengine_V1_UpdateAuthorizedCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_AuthorizedCertificate>
  /// Deletes the specified SSL certificate.
  func deleteAuthorizedCertificate(request: Google_Appengine_V1_DeleteAuthorizedCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Appengine_V1_AuthorizedCertificatesProvider {
  public var serviceName: Substring { return "google.appengine.v1.AuthorizedCertificates" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListAuthorizedCertificates":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAuthorizedCertificates(request: request, context: context)
        }
      }

    case "GetAuthorizedCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAuthorizedCertificate(request: request, context: context)
        }
      }

    case "CreateAuthorizedCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAuthorizedCertificate(request: request, context: context)
        }
      }

    case "UpdateAuthorizedCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAuthorizedCertificate(request: request, context: context)
        }
      }

    case "DeleteAuthorizedCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAuthorizedCertificate(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Appengine_V1_DomainMappingsProvider: CallHandlerProvider {
  /// Lists the domain mappings on an application.
  func listDomainMappings(request: Google_Appengine_V1_ListDomainMappingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_ListDomainMappingsResponse>
  /// Gets the specified domain mapping.
  func getDomainMapping(request: Google_Appengine_V1_GetDomainMappingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Appengine_V1_DomainMapping>
  /// Maps a domain to an application. A user must be authorized to administer a
  /// domain in order to map it to an application. For a list of available
  /// authorized domains, see [`AuthorizedDomains.ListAuthorizedDomains`]().
  func createDomainMapping(request: Google_Appengine_V1_CreateDomainMappingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the specified domain mapping. To map an SSL certificate to a
  /// domain mapping, update `certificate_id` to point to an `AuthorizedCertificate`
  /// resource. A user must be authorized to administer the associated domain
  /// in order to update a `DomainMapping` resource.
  func updateDomainMapping(request: Google_Appengine_V1_UpdateDomainMappingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes the specified domain mapping. A user must be authorized to
  /// administer the associated domain in order to delete a `DomainMapping`
  /// resource.
  func deleteDomainMapping(request: Google_Appengine_V1_DeleteDomainMappingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Appengine_V1_DomainMappingsProvider {
  public var serviceName: Substring { return "google.appengine.v1.DomainMappings" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListDomainMappings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDomainMappings(request: request, context: context)
        }
      }

    case "GetDomainMapping":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getDomainMapping(request: request, context: context)
        }
      }

    case "CreateDomainMapping":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createDomainMapping(request: request, context: context)
        }
      }

    case "UpdateDomainMapping":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateDomainMapping(request: request, context: context)
        }
      }

    case "DeleteDomainMapping":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteDomainMapping(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

