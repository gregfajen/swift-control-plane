// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/appengine/v1/deploy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Code and application artifacts used to deploy a version to App Engine.
public struct Google_Appengine_V1_Deployment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Manifest of the files stored in Google Cloud Storage that are included
  /// as part of this version. All files must be readable using the
  /// credentials supplied with this call.
  public var files: Dictionary<String,Google_Appengine_V1_FileInfo> = [:]

  /// The Docker image for the container that runs the version.
  /// Only applicable for instances running in the App Engine flexible environment.
  public var container: Google_Appengine_V1_ContainerInfo {
    get {return _container ?? Google_Appengine_V1_ContainerInfo()}
    set {_container = newValue}
  }
  /// Returns true if `container` has been explicitly set.
  public var hasContainer: Bool {return self._container != nil}
  /// Clears the value of `container`. Subsequent reads from it will return its default value.
  public mutating func clearContainer() {self._container = nil}

  /// The zip file for this deployment, if this is a zip deployment.
  public var zip: Google_Appengine_V1_ZipInfo {
    get {return _zip ?? Google_Appengine_V1_ZipInfo()}
    set {_zip = newValue}
  }
  /// Returns true if `zip` has been explicitly set.
  public var hasZip: Bool {return self._zip != nil}
  /// Clears the value of `zip`. Subsequent reads from it will return its default value.
  public mutating func clearZip() {self._zip = nil}

  /// Options for any Google Cloud Build builds created as a part of this
  /// deployment.
  ///
  /// These options will only be used if a new build is created, such as when
  /// deploying to the App Engine flexible environment using files or zip.
  public var cloudBuildOptions: Google_Appengine_V1_CloudBuildOptions {
    get {return _cloudBuildOptions ?? Google_Appengine_V1_CloudBuildOptions()}
    set {_cloudBuildOptions = newValue}
  }
  /// Returns true if `cloudBuildOptions` has been explicitly set.
  public var hasCloudBuildOptions: Bool {return self._cloudBuildOptions != nil}
  /// Clears the value of `cloudBuildOptions`. Subsequent reads from it will return its default value.
  public mutating func clearCloudBuildOptions() {self._cloudBuildOptions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _container: Google_Appengine_V1_ContainerInfo? = nil
  fileprivate var _zip: Google_Appengine_V1_ZipInfo? = nil
  fileprivate var _cloudBuildOptions: Google_Appengine_V1_CloudBuildOptions? = nil
}

/// Single source file that is part of the version to be deployed. Each source
/// file that is deployed must be specified separately.
public struct Google_Appengine_V1_FileInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URL source to use to fetch this file. Must be a URL to a resource in
  /// Google Cloud Storage in the form
  /// 'http(s)://storage.googleapis.com/\<bucket\>/\<object\>'.
  public var sourceURL: String = String()

  /// The SHA1 hash of the file, in hex.
  public var sha1Sum: String = String()

  /// The MIME type of the file.
  ///
  /// Defaults to the value from Google Cloud Storage.
  public var mimeType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Docker image that is used to create a container and start a VM instance for
/// the version that you deploy. Only applicable for instances running in the App
/// Engine flexible environment.
public struct Google_Appengine_V1_ContainerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URI to the hosted container image in Google Container Registry. The URI
  /// must be fully qualified and include a tag or digest.
  /// Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
  public var image: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Options for the build operations performed as a part of the version
/// deployment. Only applicable for App Engine flexible environment when creating
/// a version using source code directly.
public struct Google_Appengine_V1_CloudBuildOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Path to the yaml file used in deployment, used to determine runtime
  /// configuration details.
  ///
  /// Required for flexible environment builds.
  ///
  /// See https://cloud.google.com/appengine/docs/standard/python/config/appref
  /// for more details.
  public var appYamlPath: String = String()

  /// The Cloud Build timeout used as part of any dependent builds performed by
  /// version creation. Defaults to 10 minutes.
  public var cloudBuildTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _cloudBuildTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_cloudBuildTimeout = newValue}
  }
  /// Returns true if `cloudBuildTimeout` has been explicitly set.
  public var hasCloudBuildTimeout: Bool {return self._cloudBuildTimeout != nil}
  /// Clears the value of `cloudBuildTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearCloudBuildTimeout() {self._cloudBuildTimeout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cloudBuildTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// The zip file information for a zip deployment.
public struct Google_Appengine_V1_ZipInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URL of the zip file to deploy from. Must be a URL to a resource in
  /// Google Cloud Storage in the form
  /// 'http(s)://storage.googleapis.com/\<bucket\>/\<object\>'.
  public var sourceURL: String = String()

  /// An estimate of the number of files in a zip for a zip deployment.
  /// If set, must be greater than or equal to the actual number of files.
  /// Used for optimizing performance; if not provided, deployment may be slow.
  public var filesCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.appengine.v1"

extension Google_Appengine_V1_Deployment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Deployment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "files"),
    2: .same(proto: "container"),
    3: .same(proto: "zip"),
    6: .standard(proto: "cloud_build_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Appengine_V1_FileInfo>.self, value: &self.files) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._container) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._zip) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._cloudBuildOptions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.files.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Appengine_V1_FileInfo>.self, value: self.files, fieldNumber: 1)
    }
    if let v = self._container {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._zip {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._cloudBuildOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_Deployment, rhs: Google_Appengine_V1_Deployment) -> Bool {
    if lhs.files != rhs.files {return false}
    if lhs._container != rhs._container {return false}
    if lhs._zip != rhs._zip {return false}
    if lhs._cloudBuildOptions != rhs._cloudBuildOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_FileInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_url"),
    2: .standard(proto: "sha1_sum"),
    3: .standard(proto: "mime_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourceURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sha1Sum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceURL, fieldNumber: 1)
    }
    if !self.sha1Sum.isEmpty {
      try visitor.visitSingularStringField(value: self.sha1Sum, fieldNumber: 2)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_FileInfo, rhs: Google_Appengine_V1_FileInfo) -> Bool {
    if lhs.sourceURL != rhs.sourceURL {return false}
    if lhs.sha1Sum != rhs.sha1Sum {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_ContainerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContainerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.image) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_ContainerInfo, rhs: Google_Appengine_V1_ContainerInfo) -> Bool {
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_CloudBuildOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudBuildOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_yaml_path"),
    2: .standard(proto: "cloud_build_timeout"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appYamlPath) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._cloudBuildTimeout) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appYamlPath.isEmpty {
      try visitor.visitSingularStringField(value: self.appYamlPath, fieldNumber: 1)
    }
    if let v = self._cloudBuildTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_CloudBuildOptions, rhs: Google_Appengine_V1_CloudBuildOptions) -> Bool {
    if lhs.appYamlPath != rhs.appYamlPath {return false}
    if lhs._cloudBuildTimeout != rhs._cloudBuildTimeout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_ZipInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ZipInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "source_url"),
    4: .standard(proto: "files_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceURL) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.filesCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceURL, fieldNumber: 3)
    }
    if self.filesCount != 0 {
      try visitor.visitSingularInt32Field(value: self.filesCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_ZipInfo, rhs: Google_Appengine_V1_ZipInfo) -> Bool {
    if lhs.sourceURL != rhs.sourceURL {return false}
    if lhs.filesCount != rhs.filesCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
