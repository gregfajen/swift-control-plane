// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/appengine/v1/firewall.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A single firewall rule that is evaluated against incoming traffic
/// and provides an action to take on matched requests.
public struct Google_Appengine_V1_FirewallRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A positive integer between [1, Int32.MaxValue-1] that defines the order of
  /// rule evaluation. Rules with the lowest priority are evaluated first.
  ///
  /// A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic
  /// when no previous rule matches. Only the action of this rule can be modified
  /// by the user.
  public var priority: Int32 = 0

  /// The action to take on matched requests.
  public var action: Google_Appengine_V1_FirewallRule.Action = .unspecifiedAction

  /// IP address or range, defined using CIDR notation, of requests that this
  /// rule applies to. You can use the wildcard character "*" to match all IPs
  /// equivalent to "0/0" and "::/0" together.
  /// Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32`
  ///           or `2001:0db8:0000:0042:0000:8a2e:0370:7334`.
  ///
  ///
  /// <p>Truncation will be silently performed on addresses which are not
  /// properly truncated. For example, `1.2.3.4/24` is accepted as the same
  /// address as `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` is accepted
  /// as the same address as `2001:db8::/32`.
  public var sourceRange: String = String()

  /// An optional string description of this rule.
  /// This field has a maximum length of 100 characters.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Available actions to take on matching requests.
  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecifiedAction // = 0

    /// Matching requests are allowed.
    case allow // = 1

    /// Matching requests are denied.
    case deny // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedAction
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedAction
      case 1: self = .allow
      case 2: self = .deny
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedAction: return 0
      case .allow: return 1
      case .deny: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Appengine_V1_FirewallRule.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Appengine_V1_FirewallRule.Action] = [
    .unspecifiedAction,
    .allow,
    .deny,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.appengine.v1"

extension Google_Appengine_V1_FirewallRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FirewallRule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "priority"),
    2: .same(proto: "action"),
    3: .standard(proto: "source_range"),
    4: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceRange) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 1)
    }
    if self.action != .unspecifiedAction {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.sourceRange.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceRange, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_FirewallRule, rhs: Google_Appengine_V1_FirewallRule) -> Bool {
    if lhs.priority != rhs.priority {return false}
    if lhs.action != rhs.action {return false}
    if lhs.sourceRange != rhs.sourceRange {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_FirewallRule.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_ACTION"),
    1: .same(proto: "ALLOW"),
    2: .same(proto: "DENY"),
  ]
}
