// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/appengine/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Service resource is a logical component of an application that can share
/// state and communicate in a secure fashion with other services.
/// For example, an application that handles customer requests might
/// include separate services to handle tasks such as backend data
/// analysis or API requests from mobile devices. Each service has a
/// collection of versions that define a specific set of code used to
/// implement the functionality of that service.
public struct Google_Appengine_V1_Service {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Full path to the Service resource in the API.
  /// Example: `apps/myapp/services/default`.
  ///
  /// @OutputOnly
  public var name: String = String()

  /// Relative name of the service within the application.
  /// Example: `default`.
  ///
  /// @OutputOnly
  public var id: String = String()

  /// Mapping that defines fractional HTTP traffic diversion to
  /// different versions within the service.
  public var split: Google_Appengine_V1_TrafficSplit {
    get {return _split ?? Google_Appengine_V1_TrafficSplit()}
    set {_split = newValue}
  }
  /// Returns true if `split` has been explicitly set.
  public var hasSplit: Bool {return self._split != nil}
  /// Clears the value of `split`. Subsequent reads from it will return its default value.
  public mutating func clearSplit() {self._split = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _split: Google_Appengine_V1_TrafficSplit? = nil
}

/// Traffic routing configuration for versions within a single service. Traffic
/// splits define how traffic directed to the service is assigned to versions.
public struct Google_Appengine_V1_TrafficSplit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Mechanism used to determine which version a request is sent to.
  /// The traffic selection algorithm will
  /// be stable for either type until allocations are changed.
  public var shardBy: Google_Appengine_V1_TrafficSplit.ShardBy = .unspecified

  /// Mapping from version IDs within the service to fractional
  /// (0.000, 1] allocations of traffic for that version. Each version can
  /// be specified only once, but some versions in the service may not
  /// have any traffic allocation. Services that have traffic allocated
  /// cannot be deleted until either the service is deleted or
  /// their traffic allocation is removed. Allocations must sum to 1.
  /// Up to two decimal place precision is supported for IP-based splits and
  /// up to three decimal places is supported for cookie-based splits.
  public var allocations: Dictionary<String,Double> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Available sharding mechanisms.
  public enum ShardBy: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Diversion method unspecified.
    case unspecified // = 0

    /// Diversion based on a specially named cookie, "GOOGAPPUID." The cookie
    /// must be set by the application itself or no diversion will occur.
    case cookie // = 1

    /// Diversion based on applying the modulus operation to a fingerprint
    /// of the IP address.
    case ip // = 2

    /// Diversion based on weighted random assignment. An incoming request is
    /// randomly routed to a version in the traffic split, with probability
    /// proportional to the version's traffic share.
    case random // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .cookie
      case 2: self = .ip
      case 3: self = .random
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .cookie: return 1
      case .ip: return 2
      case .random: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Appengine_V1_TrafficSplit.ShardBy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Appengine_V1_TrafficSplit.ShardBy] = [
    .unspecified,
    .cookie,
    .ip,
    .random,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.appengine.v1"

extension Google_Appengine_V1_Service: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Service"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .same(proto: "split"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._split) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._split {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_Service, rhs: Google_Appengine_V1_Service) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs._split != rhs._split {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_TrafficSplit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrafficSplit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shard_by"),
    2: .same(proto: "allocations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.shardBy) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &self.allocations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shardBy != .unspecified {
      try visitor.visitSingularEnumField(value: self.shardBy, fieldNumber: 1)
    }
    if !self.allocations.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: self.allocations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_TrafficSplit, rhs: Google_Appengine_V1_TrafficSplit) -> Bool {
    if lhs.shardBy != rhs.shardBy {return false}
    if lhs.allocations != rhs.allocations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_TrafficSplit.ShardBy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "COOKIE"),
    2: .same(proto: "IP"),
    3: .same(proto: "RANDOM"),
  ]
}
