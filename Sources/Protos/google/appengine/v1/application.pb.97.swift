// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/appengine/v1/application.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An Application resource contains the top-level configuration of an App
/// Engine application.
public struct Google_Appengine_V1_Application {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Full path to the Application resource in the API.
  /// Example: `apps/myapp`.
  ///
  /// @OutputOnly
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Identifier of the Application resource. This identifier is equivalent
  /// to the project ID of the Google Cloud Platform project where you want to
  /// deploy your application.
  /// Example: `myapp`.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// HTTP path dispatch rules for requests to the application that do not
  /// explicitly target a service or version. Rules are order-dependent.
  /// Up to 20 dispatch rules can be supported.
  public var dispatchRules: [Google_Appengine_V1_UrlDispatchRule] {
    get {return _storage._dispatchRules}
    set {_uniqueStorage()._dispatchRules = newValue}
  }

  /// Google Apps authentication domain that controls which users can access
  /// this application.
  ///
  /// Defaults to open access for any Google Account.
  public var authDomain: String {
    get {return _storage._authDomain}
    set {_uniqueStorage()._authDomain = newValue}
  }

  /// Location from which this application runs. Application instances
  /// run out of the data centers in the specified location, which is also where
  /// all of the application's end user content is stored.
  ///
  /// Defaults to `us-central`.
  ///
  /// View the list of
  /// [supported locations](https://cloud.google.com/appengine/docs/locations).
  public var locationID: String {
    get {return _storage._locationID}
    set {_uniqueStorage()._locationID = newValue}
  }

  /// Google Cloud Storage bucket that can be used for storing files
  /// associated with this application. This bucket is associated with the
  /// application and can be used by the gcloud deployment commands.
  ///
  /// @OutputOnly
  public var codeBucket: String {
    get {return _storage._codeBucket}
    set {_uniqueStorage()._codeBucket = newValue}
  }

  /// Cookie expiration policy for this application.
  public var defaultCookieExpiration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._defaultCookieExpiration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._defaultCookieExpiration = newValue}
  }
  /// Returns true if `defaultCookieExpiration` has been explicitly set.
  public var hasDefaultCookieExpiration: Bool {return _storage._defaultCookieExpiration != nil}
  /// Clears the value of `defaultCookieExpiration`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultCookieExpiration() {_uniqueStorage()._defaultCookieExpiration = nil}

  /// Serving status of this application.
  public var servingStatus: Google_Appengine_V1_Application.ServingStatus {
    get {return _storage._servingStatus}
    set {_uniqueStorage()._servingStatus = newValue}
  }

  /// Hostname used to reach this application, as resolved by App Engine.
  ///
  /// @OutputOnly
  public var defaultHostname: String {
    get {return _storage._defaultHostname}
    set {_uniqueStorage()._defaultHostname = newValue}
  }

  /// Google Cloud Storage bucket that can be used by this application to store
  /// content.
  ///
  /// @OutputOnly
  public var defaultBucket: String {
    get {return _storage._defaultBucket}
    set {_uniqueStorage()._defaultBucket = newValue}
  }

  public var iap: Google_Appengine_V1_Application.IdentityAwareProxy {
    get {return _storage._iap ?? Google_Appengine_V1_Application.IdentityAwareProxy()}
    set {_uniqueStorage()._iap = newValue}
  }
  /// Returns true if `iap` has been explicitly set.
  public var hasIap: Bool {return _storage._iap != nil}
  /// Clears the value of `iap`. Subsequent reads from it will return its default value.
  public mutating func clearIap() {_uniqueStorage()._iap = nil}

  /// The Google Container Registry domain used for storing managed build docker
  /// images for this application.
  public var gcrDomain: String {
    get {return _storage._gcrDomain}
    set {_uniqueStorage()._gcrDomain = newValue}
  }

  /// The type of the Cloud Firestore or Cloud Datastore database associated with
  /// this application.
  public var databaseType: Google_Appengine_V1_Application.DatabaseType {
    get {return _storage._databaseType}
    set {_uniqueStorage()._databaseType = newValue}
  }

  /// The feature specific settings to be used in the application.
  public var featureSettings: Google_Appengine_V1_Application.FeatureSettings {
    get {return _storage._featureSettings ?? Google_Appengine_V1_Application.FeatureSettings()}
    set {_uniqueStorage()._featureSettings = newValue}
  }
  /// Returns true if `featureSettings` has been explicitly set.
  public var hasFeatureSettings: Bool {return _storage._featureSettings != nil}
  /// Clears the value of `featureSettings`. Subsequent reads from it will return its default value.
  public mutating func clearFeatureSettings() {_uniqueStorage()._featureSettings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ServingStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Serving status is unspecified.
    case unspecified // = 0

    /// Application is serving.
    case serving // = 1

    /// Application has been disabled by the user.
    case userDisabled // = 2

    /// Application has been disabled by the system.
    case systemDisabled // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .serving
      case 2: self = .userDisabled
      case 3: self = .systemDisabled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .serving: return 1
      case .userDisabled: return 2
      case .systemDisabled: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum DatabaseType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Database type is unspecified.
    case unspecified // = 0

    /// Cloud Datastore
    case cloudDatastore // = 1

    /// Cloud Firestore Native
    case cloudFirestore // = 2

    /// Cloud Firestore in Datastore Mode
    case cloudDatastoreCompatibility // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .cloudDatastore
      case 2: self = .cloudFirestore
      case 3: self = .cloudDatastoreCompatibility
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .cloudDatastore: return 1
      case .cloudFirestore: return 2
      case .cloudDatastoreCompatibility: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Identity-Aware Proxy
  public struct IdentityAwareProxy {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether the serving infrastructure will authenticate and
    /// authorize all incoming requests.
    ///
    /// If true, the `oauth2_client_id` and `oauth2_client_secret`
    /// fields must be non-empty.
    public var enabled: Bool = false

    /// OAuth2 client ID to use for the authentication flow.
    public var oauth2ClientID: String = String()

    /// OAuth2 client secret to use for the authentication flow.
    ///
    /// For security reasons, this value cannot be retrieved via the API.
    /// Instead, the SHA-256 hash of the value is returned in the
    /// `oauth2_client_secret_sha256` field.
    ///
    /// @InputOnly
    public var oauth2ClientSecret: String = String()

    /// Hex-encoded SHA-256 hash of the client secret.
    ///
    /// @OutputOnly
    public var oauth2ClientSecretSha256: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// The feature specific settings to be used in the application. These define
  /// behaviors that are user configurable.
  public struct FeatureSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Boolean value indicating if split health checks should be used instead
    /// of the legacy health checks. At an app.yaml level, this means defaulting
    /// to 'readiness_check' and 'liveness_check' values instead of
    /// 'health_check' ones. Once the legacy 'health_check' behavior is
    /// deprecated, and this value is always true, this setting can
    /// be removed.
    public var splitHealthChecks: Bool = false

    /// If true, use [Container-Optimized OS](https://cloud.google.com/container-optimized-os/)
    /// base image for VMs, rather than a base Debian image.
    public var useContainerOptimizedOs: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Appengine_V1_Application.ServingStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Appengine_V1_Application.ServingStatus] = [
    .unspecified,
    .serving,
    .userDisabled,
    .systemDisabled,
  ]
}

extension Google_Appengine_V1_Application.DatabaseType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Appengine_V1_Application.DatabaseType] = [
    .unspecified,
    .cloudDatastore,
    .cloudFirestore,
    .cloudDatastoreCompatibility,
  ]
}

#endif  // swift(>=4.2)

/// Rules to match an HTTP request and dispatch that request to a service.
public struct Google_Appengine_V1_UrlDispatchRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Domain name to match against. The wildcard "`*`" is supported if
  /// specified before a period: "`*.`".
  ///
  /// Defaults to matching all domains: "`*`".
  public var domain: String = String()

  /// Pathname within the host. Must start with a "`/`". A
  /// single "`*`" can be included at the end of the path.
  ///
  /// The sum of the lengths of the domain and path may not
  /// exceed 100 characters.
  public var path: String = String()

  /// Resource ID of a service in this application that should
  /// serve the matched request. The service must already
  /// exist. Example: `default`.
  public var service: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.appengine.v1"

extension Google_Appengine_V1_Application: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Application"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .standard(proto: "dispatch_rules"),
    6: .standard(proto: "auth_domain"),
    7: .standard(proto: "location_id"),
    8: .standard(proto: "code_bucket"),
    9: .standard(proto: "default_cookie_expiration"),
    10: .standard(proto: "serving_status"),
    11: .standard(proto: "default_hostname"),
    12: .standard(proto: "default_bucket"),
    14: .same(proto: "iap"),
    16: .standard(proto: "gcr_domain"),
    17: .standard(proto: "database_type"),
    18: .standard(proto: "feature_settings"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _id: String = String()
    var _dispatchRules: [Google_Appengine_V1_UrlDispatchRule] = []
    var _authDomain: String = String()
    var _locationID: String = String()
    var _codeBucket: String = String()
    var _defaultCookieExpiration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _servingStatus: Google_Appengine_V1_Application.ServingStatus = .unspecified
    var _defaultHostname: String = String()
    var _defaultBucket: String = String()
    var _iap: Google_Appengine_V1_Application.IdentityAwareProxy? = nil
    var _gcrDomain: String = String()
    var _databaseType: Google_Appengine_V1_Application.DatabaseType = .unspecified
    var _featureSettings: Google_Appengine_V1_Application.FeatureSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _id = source._id
      _dispatchRules = source._dispatchRules
      _authDomain = source._authDomain
      _locationID = source._locationID
      _codeBucket = source._codeBucket
      _defaultCookieExpiration = source._defaultCookieExpiration
      _servingStatus = source._servingStatus
      _defaultHostname = source._defaultHostname
      _defaultBucket = source._defaultBucket
      _iap = source._iap
      _gcrDomain = source._gcrDomain
      _databaseType = source._databaseType
      _featureSettings = source._featureSettings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._dispatchRules) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._authDomain) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._locationID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._codeBucket) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._defaultCookieExpiration) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._servingStatus) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._defaultHostname) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._defaultBucket) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._iap) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._gcrDomain) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._databaseType) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._featureSettings) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._dispatchRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dispatchRules, fieldNumber: 3)
      }
      if !_storage._authDomain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._authDomain, fieldNumber: 6)
      }
      if !_storage._locationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._locationID, fieldNumber: 7)
      }
      if !_storage._codeBucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeBucket, fieldNumber: 8)
      }
      if let v = _storage._defaultCookieExpiration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._servingStatus != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._servingStatus, fieldNumber: 10)
      }
      if !_storage._defaultHostname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._defaultHostname, fieldNumber: 11)
      }
      if !_storage._defaultBucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._defaultBucket, fieldNumber: 12)
      }
      if let v = _storage._iap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._gcrDomain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gcrDomain, fieldNumber: 16)
      }
      if _storage._databaseType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._databaseType, fieldNumber: 17)
      }
      if let v = _storage._featureSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_Application, rhs: Google_Appengine_V1_Application) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._dispatchRules != rhs_storage._dispatchRules {return false}
        if _storage._authDomain != rhs_storage._authDomain {return false}
        if _storage._locationID != rhs_storage._locationID {return false}
        if _storage._codeBucket != rhs_storage._codeBucket {return false}
        if _storage._defaultCookieExpiration != rhs_storage._defaultCookieExpiration {return false}
        if _storage._servingStatus != rhs_storage._servingStatus {return false}
        if _storage._defaultHostname != rhs_storage._defaultHostname {return false}
        if _storage._defaultBucket != rhs_storage._defaultBucket {return false}
        if _storage._iap != rhs_storage._iap {return false}
        if _storage._gcrDomain != rhs_storage._gcrDomain {return false}
        if _storage._databaseType != rhs_storage._databaseType {return false}
        if _storage._featureSettings != rhs_storage._featureSettings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_Application.ServingStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "SERVING"),
    2: .same(proto: "USER_DISABLED"),
    3: .same(proto: "SYSTEM_DISABLED"),
  ]
}

extension Google_Appengine_V1_Application.DatabaseType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATABASE_TYPE_UNSPECIFIED"),
    1: .same(proto: "CLOUD_DATASTORE"),
    2: .same(proto: "CLOUD_FIRESTORE"),
    3: .same(proto: "CLOUD_DATASTORE_COMPATIBILITY"),
  ]
}

extension Google_Appengine_V1_Application.IdentityAwareProxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Appengine_V1_Application.protoMessageName + ".IdentityAwareProxy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "oauth2_client_id"),
    3: .standard(proto: "oauth2_client_secret"),
    4: .standard(proto: "oauth2_client_secret_sha256"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.oauth2ClientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.oauth2ClientSecret) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.oauth2ClientSecretSha256) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.oauth2ClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.oauth2ClientID, fieldNumber: 2)
    }
    if !self.oauth2ClientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.oauth2ClientSecret, fieldNumber: 3)
    }
    if !self.oauth2ClientSecretSha256.isEmpty {
      try visitor.visitSingularStringField(value: self.oauth2ClientSecretSha256, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_Application.IdentityAwareProxy, rhs: Google_Appengine_V1_Application.IdentityAwareProxy) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.oauth2ClientID != rhs.oauth2ClientID {return false}
    if lhs.oauth2ClientSecret != rhs.oauth2ClientSecret {return false}
    if lhs.oauth2ClientSecretSha256 != rhs.oauth2ClientSecretSha256 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_Application.FeatureSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Appengine_V1_Application.protoMessageName + ".FeatureSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "split_health_checks"),
    2: .standard(proto: "use_container_optimized_os"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.splitHealthChecks) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.useContainerOptimizedOs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.splitHealthChecks != false {
      try visitor.visitSingularBoolField(value: self.splitHealthChecks, fieldNumber: 1)
    }
    if self.useContainerOptimizedOs != false {
      try visitor.visitSingularBoolField(value: self.useContainerOptimizedOs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_Application.FeatureSettings, rhs: Google_Appengine_V1_Application.FeatureSettings) -> Bool {
    if lhs.splitHealthChecks != rhs.splitHealthChecks {return false}
    if lhs.useContainerOptimizedOs != rhs.useContainerOptimizedOs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Appengine_V1_UrlDispatchRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UrlDispatchRule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "path"),
    3: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.service) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Appengine_V1_UrlDispatchRule, rhs: Google_Appengine_V1_UrlDispatchRule) -> Bool {
    if lhs.domain != rhs.domain {return false}
    if lhs.path != rhs.path {return false}
    if lhs.service != rhs.service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
