// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/type/calendar_period.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A `CalendarPeriod` represents the abstract concept of a time period that has
/// a canonical start. Grammatically, "the start of the current
/// `CalendarPeriod`." All calendar times begin at midnight UTC.
public enum Google_Type_CalendarPeriod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Undefined period, raises an error.
  case unspecified // = 0

  /// A day.
  case day // = 1

  /// A week. Weeks begin on Monday, following
  /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_week_date).
  case week // = 2

  /// A fortnight. The first calendar fortnight of the year begins at the start
  /// of week 1 according to
  /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_week_date).
  case fortnight // = 3

  /// A month.
  case month // = 4

  /// A quarter. Quarters start on dates 1-Jan, 1-Apr, 1-Jul, and 1-Oct of each
  /// year.
  case quarter // = 5

  /// A half-year. Half-years start on dates 1-Jan and 1-Jul.
  case half // = 6

  /// A year.
  case year // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .day
    case 2: self = .week
    case 3: self = .fortnight
    case 4: self = .month
    case 5: self = .quarter
    case 6: self = .half
    case 7: self = .year
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .day: return 1
    case .week: return 2
    case .fortnight: return 3
    case .month: return 4
    case .quarter: return 5
    case .half: return 6
    case .year: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Type_CalendarPeriod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Type_CalendarPeriod] = [
    .unspecified,
    .day,
    .week,
    .fortnight,
    .month,
    .quarter,
    .half,
    .year,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Google_Type_CalendarPeriod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CALENDAR_PERIOD_UNSPECIFIED"),
    1: .same(proto: "DAY"),
    2: .same(proto: "WEEK"),
    3: .same(proto: "FORTNIGHT"),
    4: .same(proto: "MONTH"),
    5: .same(proto: "QUARTER"),
    6: .same(proto: "HALF"),
    7: .same(proto: "YEAR"),
  ]
}
