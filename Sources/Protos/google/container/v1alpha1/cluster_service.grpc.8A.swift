//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/container/v1alpha1/cluster_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Container_V1alpha1_ClusterManagerClient, then call methods of this protocol to make API calls.
public protocol Google_Container_V1alpha1_ClusterManagerClientProtocol: GRPCClient {
  func listClusters(
    _ request: Google_Container_V1alpha1_ListClustersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_ListClustersRequest, Google_Container_V1alpha1_ListClustersResponse>

  func getCluster(
    _ request: Google_Container_V1alpha1_GetClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_GetClusterRequest, Google_Container_V1alpha1_Cluster>

  func createCluster(
    _ request: Google_Container_V1alpha1_CreateClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_CreateClusterRequest, Google_Container_V1alpha1_Operation>

  func updateCluster(
    _ request: Google_Container_V1alpha1_UpdateClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_UpdateClusterRequest, Google_Container_V1alpha1_Operation>

  func updateNodePool(
    _ request: Google_Container_V1alpha1_UpdateNodePoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_UpdateNodePoolRequest, Google_Container_V1alpha1_Operation>

  func setNodePoolAutoscaling(
    _ request: Google_Container_V1alpha1_SetNodePoolAutoscalingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetNodePoolAutoscalingRequest, Google_Container_V1alpha1_Operation>

  func setLoggingService(
    _ request: Google_Container_V1alpha1_SetLoggingServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetLoggingServiceRequest, Google_Container_V1alpha1_Operation>

  func setMonitoringService(
    _ request: Google_Container_V1alpha1_SetMonitoringServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetMonitoringServiceRequest, Google_Container_V1alpha1_Operation>

  func setAddonsConfig(
    _ request: Google_Container_V1alpha1_SetAddonsConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetAddonsConfigRequest, Google_Container_V1alpha1_Operation>

  func setLocations(
    _ request: Google_Container_V1alpha1_SetLocationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetLocationsRequest, Google_Container_V1alpha1_Operation>

  func updateMaster(
    _ request: Google_Container_V1alpha1_UpdateMasterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_UpdateMasterRequest, Google_Container_V1alpha1_Operation>

  func setMasterAuth(
    _ request: Google_Container_V1alpha1_SetMasterAuthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetMasterAuthRequest, Google_Container_V1alpha1_Operation>

  func deleteCluster(
    _ request: Google_Container_V1alpha1_DeleteClusterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_DeleteClusterRequest, Google_Container_V1alpha1_Operation>

  func listOperations(
    _ request: Google_Container_V1alpha1_ListOperationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_ListOperationsRequest, Google_Container_V1alpha1_ListOperationsResponse>

  func getOperation(
    _ request: Google_Container_V1alpha1_GetOperationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_GetOperationRequest, Google_Container_V1alpha1_Operation>

  func cancelOperation(
    _ request: Google_Container_V1alpha1_CancelOperationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_CancelOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getServerConfig(
    _ request: Google_Container_V1alpha1_GetServerConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_GetServerConfigRequest, Google_Container_V1alpha1_ServerConfig>

  func listNodePools(
    _ request: Google_Container_V1alpha1_ListNodePoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_ListNodePoolsRequest, Google_Container_V1alpha1_ListNodePoolsResponse>

  func getNodePool(
    _ request: Google_Container_V1alpha1_GetNodePoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_GetNodePoolRequest, Google_Container_V1alpha1_NodePool>

  func createNodePool(
    _ request: Google_Container_V1alpha1_CreateNodePoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_CreateNodePoolRequest, Google_Container_V1alpha1_Operation>

  func deleteNodePool(
    _ request: Google_Container_V1alpha1_DeleteNodePoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_DeleteNodePoolRequest, Google_Container_V1alpha1_Operation>

  func rollbackNodePoolUpgrade(
    _ request: Google_Container_V1alpha1_RollbackNodePoolUpgradeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_RollbackNodePoolUpgradeRequest, Google_Container_V1alpha1_Operation>

  func setNodePoolManagement(
    _ request: Google_Container_V1alpha1_SetNodePoolManagementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetNodePoolManagementRequest, Google_Container_V1alpha1_Operation>

  func setLabels(
    _ request: Google_Container_V1alpha1_SetLabelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetLabelsRequest, Google_Container_V1alpha1_Operation>

  func setLegacyAbac(
    _ request: Google_Container_V1alpha1_SetLegacyAbacRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetLegacyAbacRequest, Google_Container_V1alpha1_Operation>

  func startIPRotation(
    _ request: Google_Container_V1alpha1_StartIPRotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_StartIPRotationRequest, Google_Container_V1alpha1_Operation>

  func completeIPRotation(
    _ request: Google_Container_V1alpha1_CompleteIPRotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_CompleteIPRotationRequest, Google_Container_V1alpha1_Operation>

  func setNodePoolSize(
    _ request: Google_Container_V1alpha1_SetNodePoolSizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetNodePoolSizeRequest, Google_Container_V1alpha1_Operation>

  func setNetworkPolicy(
    _ request: Google_Container_V1alpha1_SetNetworkPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetNetworkPolicyRequest, Google_Container_V1alpha1_Operation>

  func setMaintenancePolicy(
    _ request: Google_Container_V1alpha1_SetMaintenancePolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Container_V1alpha1_SetMaintenancePolicyRequest, Google_Container_V1alpha1_Operation>

}

extension Google_Container_V1alpha1_ClusterManagerClientProtocol {

  /// Lists all clusters owned by a project in either the specified zone or all
  /// zones.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListClusters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listClusters(
    _ request: Google_Container_V1alpha1_ListClustersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_ListClustersRequest, Google_Container_V1alpha1_ListClustersResponse> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/ListClusters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the details of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCluster(
    _ request: Google_Container_V1alpha1_GetClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_GetClusterRequest, Google_Container_V1alpha1_Cluster> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/GetCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a cluster, consisting of the specified number and type of Google
  /// Compute Engine instances.
  ///
  /// By default, the cluster is created in the project's
  /// [default network](/compute/docs/networks-and-firewalls#networks).
  ///
  /// One firewall is added for the cluster. After cluster creation,
  /// the cluster creates routes for each node to allow the containers
  /// on that node to communicate with all other instances in the
  /// cluster.
  ///
  /// Finally, an entry is added to the project's global metadata indicating
  /// which CIDR range is being used by the cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCluster(
    _ request: Google_Container_V1alpha1_CreateClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_CreateClusterRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/CreateCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the settings of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCluster(
    _ request: Google_Container_V1alpha1_UpdateClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_UpdateClusterRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/UpdateCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the version and/or iamge type of a specific node pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateNodePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateNodePool(
    _ request: Google_Container_V1alpha1_UpdateNodePoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_UpdateNodePoolRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/UpdateNodePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the autoscaling settings of a specific node pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNodePoolAutoscaling.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setNodePoolAutoscaling(
    _ request: Google_Container_V1alpha1_SetNodePoolAutoscalingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetNodePoolAutoscalingRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetNodePoolAutoscaling",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the logging service of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLoggingService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLoggingService(
    _ request: Google_Container_V1alpha1_SetLoggingServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetLoggingServiceRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetLoggingService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the monitoring service of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMonitoringService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMonitoringService(
    _ request: Google_Container_V1alpha1_SetMonitoringServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetMonitoringServiceRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetMonitoringService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the addons of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAddonsConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setAddonsConfig(
    _ request: Google_Container_V1alpha1_SetAddonsConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetAddonsConfigRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetAddonsConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the locations of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLocations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLocations(
    _ request: Google_Container_V1alpha1_SetLocationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetLocationsRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetLocations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the master of a specific cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateMaster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateMaster(
    _ request: Google_Container_V1alpha1_UpdateMasterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_UpdateMasterRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/UpdateMaster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Used to set master auth materials. Currently supports :-
  /// Changing the admin password of a specific cluster.
  /// This can be either via password generation or explicitly set.
  /// Modify basic_auth.csv and reset the K8S API server.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMasterAuth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMasterAuth(
    _ request: Google_Container_V1alpha1_SetMasterAuthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetMasterAuthRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetMasterAuth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the cluster, including the Kubernetes endpoint and all worker
  /// nodes.
  ///
  /// Firewalls and routes that were configured during cluster creation
  /// are also deleted.
  ///
  /// Other Google Compute Engine resources that might be in use by the cluster
  /// (e.g. load balancer resources) will not be deleted if they weren't present
  /// at the initial create time.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCluster.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCluster(
    _ request: Google_Container_V1alpha1_DeleteClusterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_DeleteClusterRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/DeleteCluster",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all operations in a project in a specific zone or all zones.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListOperations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listOperations(
    _ request: Google_Container_V1alpha1_ListOperationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_ListOperationsRequest, Google_Container_V1alpha1_ListOperationsResponse> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/ListOperations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the specified operation.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOperation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOperation(
    _ request: Google_Container_V1alpha1_GetOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_GetOperationRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/GetOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Cancels the specified operation.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOperation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelOperation(
    _ request: Google_Container_V1alpha1_CancelOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_CancelOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/CancelOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns configuration info about the Container Engine service.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServerConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getServerConfig(
    _ request: Google_Container_V1alpha1_GetServerConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_GetServerConfigRequest, Google_Container_V1alpha1_ServerConfig> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/GetServerConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the node pools for a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNodePools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listNodePools(
    _ request: Google_Container_V1alpha1_ListNodePoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_ListNodePoolsRequest, Google_Container_V1alpha1_ListNodePoolsResponse> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/ListNodePools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves the node pool requested.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNodePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNodePool(
    _ request: Google_Container_V1alpha1_GetNodePoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_GetNodePoolRequest, Google_Container_V1alpha1_NodePool> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/GetNodePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a node pool for a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNodePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createNodePool(
    _ request: Google_Container_V1alpha1_CreateNodePoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_CreateNodePoolRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/CreateNodePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a node pool from a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNodePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteNodePool(
    _ request: Google_Container_V1alpha1_DeleteNodePoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_DeleteNodePoolRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/DeleteNodePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Roll back the previously Aborted or Failed NodePool upgrade.
  /// This will be an no-op if the last upgrade successfully completed.
  ///
  /// - Parameters:
  ///   - request: Request to send to RollbackNodePoolUpgrade.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rollbackNodePoolUpgrade(
    _ request: Google_Container_V1alpha1_RollbackNodePoolUpgradeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_RollbackNodePoolUpgradeRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/RollbackNodePoolUpgrade",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the NodeManagement options for a node pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNodePoolManagement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setNodePoolManagement(
    _ request: Google_Container_V1alpha1_SetNodePoolManagementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetNodePoolManagementRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetNodePoolManagement",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets labels on a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLabels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLabels(
    _ request: Google_Container_V1alpha1_SetLabelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetLabelsRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetLabels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Enables or disables the ABAC authorization mechanism on a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLegacyAbac.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLegacyAbac(
    _ request: Google_Container_V1alpha1_SetLegacyAbacRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetLegacyAbacRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetLegacyAbac",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Start master IP rotation.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartIPRotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startIPRotation(
    _ request: Google_Container_V1alpha1_StartIPRotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_StartIPRotationRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/StartIPRotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Completes master IP rotation.
  ///
  /// - Parameters:
  ///   - request: Request to send to CompleteIPRotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func completeIPRotation(
    _ request: Google_Container_V1alpha1_CompleteIPRotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_CompleteIPRotationRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/CompleteIPRotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the size of a specific node pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNodePoolSize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setNodePoolSize(
    _ request: Google_Container_V1alpha1_SetNodePoolSizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetNodePoolSizeRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetNodePoolSize",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Enables/Disables Network Policy for a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNetworkPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setNetworkPolicy(
    _ request: Google_Container_V1alpha1_SetNetworkPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetNetworkPolicyRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetNetworkPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the maintenance policy for a cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMaintenancePolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMaintenancePolicy(
    _ request: Google_Container_V1alpha1_SetMaintenancePolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Container_V1alpha1_SetMaintenancePolicyRequest, Google_Container_V1alpha1_Operation> {
    return self.makeUnaryCall(
      path: "/google.container.v1alpha1.ClusterManager/SetMaintenancePolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Container_V1alpha1_ClusterManagerClient: Google_Container_V1alpha1_ClusterManagerClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.container.v1alpha1.ClusterManager service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Container_V1alpha1_ClusterManagerProvider: CallHandlerProvider {
  /// Lists all clusters owned by a project in either the specified zone or all
  /// zones.
  func listClusters(request: Google_Container_V1alpha1_ListClustersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_ListClustersResponse>
  /// Gets the details of a specific cluster.
  func getCluster(request: Google_Container_V1alpha1_GetClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Cluster>
  /// Creates a cluster, consisting of the specified number and type of Google
  /// Compute Engine instances.
  ///
  /// By default, the cluster is created in the project's
  /// [default network](/compute/docs/networks-and-firewalls#networks).
  ///
  /// One firewall is added for the cluster. After cluster creation,
  /// the cluster creates routes for each node to allow the containers
  /// on that node to communicate with all other instances in the
  /// cluster.
  ///
  /// Finally, an entry is added to the project's global metadata indicating
  /// which CIDR range is being used by the cluster.
  func createCluster(request: Google_Container_V1alpha1_CreateClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Updates the settings of a specific cluster.
  func updateCluster(request: Google_Container_V1alpha1_UpdateClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Updates the version and/or iamge type of a specific node pool.
  func updateNodePool(request: Google_Container_V1alpha1_UpdateNodePoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the autoscaling settings of a specific node pool.
  func setNodePoolAutoscaling(request: Google_Container_V1alpha1_SetNodePoolAutoscalingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the logging service of a specific cluster.
  func setLoggingService(request: Google_Container_V1alpha1_SetLoggingServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the monitoring service of a specific cluster.
  func setMonitoringService(request: Google_Container_V1alpha1_SetMonitoringServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the addons of a specific cluster.
  func setAddonsConfig(request: Google_Container_V1alpha1_SetAddonsConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the locations of a specific cluster.
  func setLocations(request: Google_Container_V1alpha1_SetLocationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Updates the master of a specific cluster.
  func updateMaster(request: Google_Container_V1alpha1_UpdateMasterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Used to set master auth materials. Currently supports :-
  /// Changing the admin password of a specific cluster.
  /// This can be either via password generation or explicitly set.
  /// Modify basic_auth.csv and reset the K8S API server.
  func setMasterAuth(request: Google_Container_V1alpha1_SetMasterAuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Deletes the cluster, including the Kubernetes endpoint and all worker
  /// nodes.
  ///
  /// Firewalls and routes that were configured during cluster creation
  /// are also deleted.
  ///
  /// Other Google Compute Engine resources that might be in use by the cluster
  /// (e.g. load balancer resources) will not be deleted if they weren't present
  /// at the initial create time.
  func deleteCluster(request: Google_Container_V1alpha1_DeleteClusterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Lists all operations in a project in a specific zone or all zones.
  func listOperations(request: Google_Container_V1alpha1_ListOperationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_ListOperationsResponse>
  /// Gets the specified operation.
  func getOperation(request: Google_Container_V1alpha1_GetOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Cancels the specified operation.
  func cancelOperation(request: Google_Container_V1alpha1_CancelOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Returns configuration info about the Container Engine service.
  func getServerConfig(request: Google_Container_V1alpha1_GetServerConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_ServerConfig>
  /// Lists the node pools for a cluster.
  func listNodePools(request: Google_Container_V1alpha1_ListNodePoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_ListNodePoolsResponse>
  /// Retrieves the node pool requested.
  func getNodePool(request: Google_Container_V1alpha1_GetNodePoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_NodePool>
  /// Creates a node pool for a cluster.
  func createNodePool(request: Google_Container_V1alpha1_CreateNodePoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Deletes a node pool from a cluster.
  func deleteNodePool(request: Google_Container_V1alpha1_DeleteNodePoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Roll back the previously Aborted or Failed NodePool upgrade.
  /// This will be an no-op if the last upgrade successfully completed.
  func rollbackNodePoolUpgrade(request: Google_Container_V1alpha1_RollbackNodePoolUpgradeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the NodeManagement options for a node pool.
  func setNodePoolManagement(request: Google_Container_V1alpha1_SetNodePoolManagementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets labels on a cluster.
  func setLabels(request: Google_Container_V1alpha1_SetLabelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Enables or disables the ABAC authorization mechanism on a cluster.
  func setLegacyAbac(request: Google_Container_V1alpha1_SetLegacyAbacRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Start master IP rotation.
  func startIPRotation(request: Google_Container_V1alpha1_StartIPRotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Completes master IP rotation.
  func completeIPRotation(request: Google_Container_V1alpha1_CompleteIPRotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the size of a specific node pool.
  func setNodePoolSize(request: Google_Container_V1alpha1_SetNodePoolSizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Enables/Disables Network Policy for a cluster.
  func setNetworkPolicy(request: Google_Container_V1alpha1_SetNetworkPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
  /// Sets the maintenance policy for a cluster.
  func setMaintenancePolicy(request: Google_Container_V1alpha1_SetMaintenancePolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Container_V1alpha1_Operation>
}

extension Google_Container_V1alpha1_ClusterManagerProvider {
  public var serviceName: Substring { return "google.container.v1alpha1.ClusterManager" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListClusters":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listClusters(request: request, context: context)
        }
      }

    case "GetCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCluster(request: request, context: context)
        }
      }

    case "CreateCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCluster(request: request, context: context)
        }
      }

    case "UpdateCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCluster(request: request, context: context)
        }
      }

    case "UpdateNodePool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateNodePool(request: request, context: context)
        }
      }

    case "SetNodePoolAutoscaling":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setNodePoolAutoscaling(request: request, context: context)
        }
      }

    case "SetLoggingService":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setLoggingService(request: request, context: context)
        }
      }

    case "SetMonitoringService":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setMonitoringService(request: request, context: context)
        }
      }

    case "SetAddonsConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setAddonsConfig(request: request, context: context)
        }
      }

    case "SetLocations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setLocations(request: request, context: context)
        }
      }

    case "UpdateMaster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateMaster(request: request, context: context)
        }
      }

    case "SetMasterAuth":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setMasterAuth(request: request, context: context)
        }
      }

    case "DeleteCluster":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteCluster(request: request, context: context)
        }
      }

    case "ListOperations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listOperations(request: request, context: context)
        }
      }

    case "GetOperation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getOperation(request: request, context: context)
        }
      }

    case "CancelOperation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cancelOperation(request: request, context: context)
        }
      }

    case "GetServerConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getServerConfig(request: request, context: context)
        }
      }

    case "ListNodePools":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listNodePools(request: request, context: context)
        }
      }

    case "GetNodePool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNodePool(request: request, context: context)
        }
      }

    case "CreateNodePool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createNodePool(request: request, context: context)
        }
      }

    case "DeleteNodePool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteNodePool(request: request, context: context)
        }
      }

    case "RollbackNodePoolUpgrade":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.rollbackNodePoolUpgrade(request: request, context: context)
        }
      }

    case "SetNodePoolManagement":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setNodePoolManagement(request: request, context: context)
        }
      }

    case "SetLabels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setLabels(request: request, context: context)
        }
      }

    case "SetLegacyAbac":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setLegacyAbac(request: request, context: context)
        }
      }

    case "StartIPRotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.startIPRotation(request: request, context: context)
        }
      }

    case "CompleteIPRotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.completeIPRotation(request: request, context: context)
        }
      }

    case "SetNodePoolSize":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setNodePoolSize(request: request, context: context)
        }
      }

    case "SetNetworkPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setNetworkPolicy(request: request, context: context)
        }
      }

    case "SetMaintenancePolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setMaintenancePolicy(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

