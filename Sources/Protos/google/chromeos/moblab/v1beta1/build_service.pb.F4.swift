// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/chromeos/moblab/v1beta1/build_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for listing builds.
/// NEXT_TAG: 7
public struct Google_Chromeos_Moblab_V1beta1_ListBuildsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The full resource name of the model. The model id is the same as
  /// the build target id for non-unified builds.
  /// For example,
  /// 'buildTargets/octopus/models/bobba'.
  public var parent: String = String()

  /// Optional. The number of builds to return in a page.
  public var pageSize: Int32 = 0

  /// Optional. A page token, received from a previous `ListBuilds` call. Provide this to
  /// retrieve the subsequent page.
  public var pageToken: String = String()

  /// Optional. Filter that specifies value constraints of fields. For example, the
  /// filter can be set as "filter='milestone=milestones/80'" to only select
  /// builds in milestone 80.
  public var filter: String = String()

  /// Optional. Read mask that specifies which Build fields to return. If empty, all Build
  /// fields will be returned.
  /// Valid fields: name, milestone, build_version.
  /// For example, if the read_mask is set as "read_mask='milestone'", the
  /// ListBuilds will return a list of Builds object with only the milestone
  /// field.
  public var readMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _readMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_readMask = newValue}
  }
  /// Returns true if `readMask` has been explicitly set.
  public var hasReadMask: Bool {return self._readMask != nil}
  /// Clears the value of `readMask`. Subsequent reads from it will return its default value.
  public mutating func clearReadMask() {self._readMask = nil}

  /// Optional. The operation that groups by all the Build fields specified in the read
  /// mask. The group_by field should be the same as the read_mask field in
  /// convention of SQL.
  public var groupBy: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _groupBy ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_groupBy = newValue}
  }
  /// Returns true if `groupBy` has been explicitly set.
  public var hasGroupBy: Bool {return self._groupBy != nil}
  /// Clears the value of `groupBy`. Subsequent reads from it will return its default value.
  public mutating func clearGroupBy() {self._groupBy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _groupBy: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Response message for listing builds.
/// NEXT_TAG: 4
public struct Google_Chromeos_Moblab_V1beta1_ListBuildsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of builds.
  public var builds: [Google_Chromeos_Moblab_V1beta1_Build] = []

  /// Token to retrieve the next page of builds. If this field is omitted, there
  /// are no subsequent pages.
  public var nextPageToken: String = String()

  /// Total number of builds.
  public var totalSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for checking if the build artifact is staged.
public struct Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The full resource name of the build artifact.
  /// For example,
  /// 'buildTargets/octopus/models/bobba/builds/12607.6.0/artifacts/chromeos-moblab-peng-staging'.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for checking the stage status of a build artifact.
/// NEXT_TAG: 4
public struct Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The status to represent if the build is staged or not.
  public var isBuildStaged: Bool = false

  /// The staged build artifact in the destination bucket.
  public var stagedBuildArtifact: Google_Chromeos_Moblab_V1beta1_BuildArtifact {
    get {return _stagedBuildArtifact ?? Google_Chromeos_Moblab_V1beta1_BuildArtifact()}
    set {_stagedBuildArtifact = newValue}
  }
  /// Returns true if `stagedBuildArtifact` has been explicitly set.
  public var hasStagedBuildArtifact: Bool {return self._stagedBuildArtifact != nil}
  /// Clears the value of `stagedBuildArtifact`. Subsequent reads from it will return its default value.
  public mutating func clearStagedBuildArtifact() {self._stagedBuildArtifact = nil}

  /// The source build artifact in the source bucket.
  public var sourceBuildArtifact: Google_Chromeos_Moblab_V1beta1_BuildArtifact {
    get {return _sourceBuildArtifact ?? Google_Chromeos_Moblab_V1beta1_BuildArtifact()}
    set {_sourceBuildArtifact = newValue}
  }
  /// Returns true if `sourceBuildArtifact` has been explicitly set.
  public var hasSourceBuildArtifact: Bool {return self._sourceBuildArtifact != nil}
  /// Clears the value of `sourceBuildArtifact`. Subsequent reads from it will return its default value.
  public mutating func clearSourceBuildArtifact() {self._sourceBuildArtifact = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stagedBuildArtifact: Google_Chromeos_Moblab_V1beta1_BuildArtifact? = nil
  fileprivate var _sourceBuildArtifact: Google_Chromeos_Moblab_V1beta1_BuildArtifact? = nil
}

/// Request message for staging a build artifact.
public struct Google_Chromeos_Moblab_V1beta1_StageBuildRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The full resource name of the build artifact.
  /// For example,
  /// 'buildTargets/octopus/models/bobba/builds/12607.6.0/artifacts/chromeos-moblab-peng-staging'.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for staging a build artifact.
public struct Google_Chromeos_Moblab_V1beta1_StageBuildResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The staged build in the destination bucket.
  public var stagedBuildArtifact: Google_Chromeos_Moblab_V1beta1_BuildArtifact {
    get {return _stagedBuildArtifact ?? Google_Chromeos_Moblab_V1beta1_BuildArtifact()}
    set {_stagedBuildArtifact = newValue}
  }
  /// Returns true if `stagedBuildArtifact` has been explicitly set.
  public var hasStagedBuildArtifact: Bool {return self._stagedBuildArtifact != nil}
  /// Clears the value of `stagedBuildArtifact`. Subsequent reads from it will return its default value.
  public mutating func clearStagedBuildArtifact() {self._stagedBuildArtifact = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stagedBuildArtifact: Google_Chromeos_Moblab_V1beta1_BuildArtifact? = nil
}

/// Metadata message for staging a build artifact.
/// NEXT_TAG: 4
public struct Google_Chromeos_Moblab_V1beta1_StageBuildMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Approximate percentage of progress, e.g. "50" means 50%.
  public var progressPercent: Float = 0

  /// Build stage start time.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Build stage end time.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.chromeos.moblab.v1beta1"

extension Google_Chromeos_Moblab_V1beta1_ListBuildsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListBuildsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
    5: .standard(proto: "read_mask"),
    6: .standard(proto: "group_by"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._readMask) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._groupBy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    if let v = self._readMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._groupBy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_ListBuildsRequest, rhs: Google_Chromeos_Moblab_V1beta1_ListBuildsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs._readMask != rhs._readMask {return false}
    if lhs._groupBy != rhs._groupBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Chromeos_Moblab_V1beta1_ListBuildsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListBuildsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "builds"),
    2: .standard(proto: "next_page_token"),
    3: .standard(proto: "total_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.builds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.totalSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.builds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.builds, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if self.totalSize != 0 {
      try visitor.visitSingularInt32Field(value: self.totalSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_ListBuildsResponse, rhs: Google_Chromeos_Moblab_V1beta1_ListBuildsResponse) -> Bool {
    if lhs.builds != rhs.builds {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckBuildStageStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusRequest, rhs: Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckBuildStageStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_build_staged"),
    2: .standard(proto: "staged_build_artifact"),
    3: .standard(proto: "source_build_artifact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isBuildStaged) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._stagedBuildArtifact) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sourceBuildArtifact) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isBuildStaged != false {
      try visitor.visitSingularBoolField(value: self.isBuildStaged, fieldNumber: 1)
    }
    if let v = self._stagedBuildArtifact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._sourceBuildArtifact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusResponse, rhs: Google_Chromeos_Moblab_V1beta1_CheckBuildStageStatusResponse) -> Bool {
    if lhs.isBuildStaged != rhs.isBuildStaged {return false}
    if lhs._stagedBuildArtifact != rhs._stagedBuildArtifact {return false}
    if lhs._sourceBuildArtifact != rhs._sourceBuildArtifact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Chromeos_Moblab_V1beta1_StageBuildRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StageBuildRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_StageBuildRequest, rhs: Google_Chromeos_Moblab_V1beta1_StageBuildRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Chromeos_Moblab_V1beta1_StageBuildResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StageBuildResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staged_build_artifact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stagedBuildArtifact) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._stagedBuildArtifact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_StageBuildResponse, rhs: Google_Chromeos_Moblab_V1beta1_StageBuildResponse) -> Bool {
    if lhs._stagedBuildArtifact != rhs._stagedBuildArtifact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Chromeos_Moblab_V1beta1_StageBuildMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StageBuildMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "progress_percent"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.progressPercent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.progressPercent != 0 {
      try visitor.visitSingularFloatField(value: self.progressPercent, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Chromeos_Moblab_V1beta1_StageBuildMetadata, rhs: Google_Chromeos_Moblab_V1beta1_StageBuildMetadata) -> Bool {
    if lhs.progressPercent != rhs.progressPercent {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
