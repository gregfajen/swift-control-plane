//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/bigtable/v2/bigtable.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Bigtable_V2_BigtableClient, then call methods of this protocol to make API calls.
public protocol Google_Bigtable_V2_BigtableClientProtocol: GRPCClient {
  func readRows(
    _ request: Google_Bigtable_V2_ReadRowsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Bigtable_V2_ReadRowsResponse) -> Void
  ) -> ServerStreamingCall<Google_Bigtable_V2_ReadRowsRequest, Google_Bigtable_V2_ReadRowsResponse>

  func sampleRowKeys(
    _ request: Google_Bigtable_V2_SampleRowKeysRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Bigtable_V2_SampleRowKeysResponse) -> Void
  ) -> ServerStreamingCall<Google_Bigtable_V2_SampleRowKeysRequest, Google_Bigtable_V2_SampleRowKeysResponse>

  func mutateRow(
    _ request: Google_Bigtable_V2_MutateRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_V2_MutateRowRequest, Google_Bigtable_V2_MutateRowResponse>

  func mutateRows(
    _ request: Google_Bigtable_V2_MutateRowsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Bigtable_V2_MutateRowsResponse) -> Void
  ) -> ServerStreamingCall<Google_Bigtable_V2_MutateRowsRequest, Google_Bigtable_V2_MutateRowsResponse>

  func checkAndMutateRow(
    _ request: Google_Bigtable_V2_CheckAndMutateRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_V2_CheckAndMutateRowRequest, Google_Bigtable_V2_CheckAndMutateRowResponse>

  func readModifyWriteRow(
    _ request: Google_Bigtable_V2_ReadModifyWriteRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_V2_ReadModifyWriteRowRequest, Google_Bigtable_V2_ReadModifyWriteRowResponse>

}

extension Google_Bigtable_V2_BigtableClientProtocol {

  /// Streams back the contents of all requested rows in key order, optionally
  /// applying the same Reader filter to each. Depending on their size,
  /// rows and cells may be broken up across multiple responses, but
  /// atomicity of each row will still be preserved. See the
  /// ReadRowsResponse documentation for details.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadRows.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func readRows(
    _ request: Google_Bigtable_V2_ReadRowsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Bigtable_V2_ReadRowsResponse) -> Void
  ) -> ServerStreamingCall<Google_Bigtable_V2_ReadRowsRequest, Google_Bigtable_V2_ReadRowsResponse> {
    return self.makeServerStreamingCall(
      path: "/google.bigtable.v2.Bigtable/ReadRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Returns a sample of row keys in the table. The returned row keys will
  /// delimit contiguous sections of the table of approximately equal size,
  /// which can be used to break up the data for distributed tasks like
  /// mapreduces.
  ///
  /// - Parameters:
  ///   - request: Request to send to SampleRowKeys.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func sampleRowKeys(
    _ request: Google_Bigtable_V2_SampleRowKeysRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Bigtable_V2_SampleRowKeysResponse) -> Void
  ) -> ServerStreamingCall<Google_Bigtable_V2_SampleRowKeysRequest, Google_Bigtable_V2_SampleRowKeysResponse> {
    return self.makeServerStreamingCall(
      path: "/google.bigtable.v2.Bigtable/SampleRowKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Mutates a row atomically. Cells already present in the row are left
  /// unchanged unless explicitly changed by `mutation`.
  ///
  /// - Parameters:
  ///   - request: Request to send to MutateRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mutateRow(
    _ request: Google_Bigtable_V2_MutateRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_V2_MutateRowRequest, Google_Bigtable_V2_MutateRowResponse> {
    return self.makeUnaryCall(
      path: "/google.bigtable.v2.Bigtable/MutateRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Mutates multiple rows in a batch. Each individual row is mutated
  /// atomically as in MutateRow, but the entire batch is not executed
  /// atomically.
  ///
  /// - Parameters:
  ///   - request: Request to send to MutateRows.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func mutateRows(
    _ request: Google_Bigtable_V2_MutateRowsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Bigtable_V2_MutateRowsResponse) -> Void
  ) -> ServerStreamingCall<Google_Bigtable_V2_MutateRowsRequest, Google_Bigtable_V2_MutateRowsResponse> {
    return self.makeServerStreamingCall(
      path: "/google.bigtable.v2.Bigtable/MutateRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Mutates a row atomically based on the output of a predicate Reader filter.
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckAndMutateRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func checkAndMutateRow(
    _ request: Google_Bigtable_V2_CheckAndMutateRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_V2_CheckAndMutateRowRequest, Google_Bigtable_V2_CheckAndMutateRowResponse> {
    return self.makeUnaryCall(
      path: "/google.bigtable.v2.Bigtable/CheckAndMutateRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Modifies a row atomically on the server. The method reads the latest
  /// existing timestamp and value from the specified columns and writes a new
  /// entry based on pre-defined read/modify/write rules. The new value for the
  /// timestamp is the greater of the existing timestamp or the current server
  /// time. The method returns the new contents of all modified cells.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadModifyWriteRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func readModifyWriteRow(
    _ request: Google_Bigtable_V2_ReadModifyWriteRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_V2_ReadModifyWriteRowRequest, Google_Bigtable_V2_ReadModifyWriteRowResponse> {
    return self.makeUnaryCall(
      path: "/google.bigtable.v2.Bigtable/ReadModifyWriteRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Bigtable_V2_BigtableClient: Google_Bigtable_V2_BigtableClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.bigtable.v2.Bigtable service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Bigtable_V2_BigtableProvider: CallHandlerProvider {
  /// Streams back the contents of all requested rows in key order, optionally
  /// applying the same Reader filter to each. Depending on their size,
  /// rows and cells may be broken up across multiple responses, but
  /// atomicity of each row will still be preserved. See the
  /// ReadRowsResponse documentation for details.
  func readRows(request: Google_Bigtable_V2_ReadRowsRequest, context: StreamingResponseCallContext<Google_Bigtable_V2_ReadRowsResponse>) -> EventLoopFuture<GRPCStatus>
  /// Returns a sample of row keys in the table. The returned row keys will
  /// delimit contiguous sections of the table of approximately equal size,
  /// which can be used to break up the data for distributed tasks like
  /// mapreduces.
  func sampleRowKeys(request: Google_Bigtable_V2_SampleRowKeysRequest, context: StreamingResponseCallContext<Google_Bigtable_V2_SampleRowKeysResponse>) -> EventLoopFuture<GRPCStatus>
  /// Mutates a row atomically. Cells already present in the row are left
  /// unchanged unless explicitly changed by `mutation`.
  func mutateRow(request: Google_Bigtable_V2_MutateRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_V2_MutateRowResponse>
  /// Mutates multiple rows in a batch. Each individual row is mutated
  /// atomically as in MutateRow, but the entire batch is not executed
  /// atomically.
  func mutateRows(request: Google_Bigtable_V2_MutateRowsRequest, context: StreamingResponseCallContext<Google_Bigtable_V2_MutateRowsResponse>) -> EventLoopFuture<GRPCStatus>
  /// Mutates a row atomically based on the output of a predicate Reader filter.
  func checkAndMutateRow(request: Google_Bigtable_V2_CheckAndMutateRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_V2_CheckAndMutateRowResponse>
  /// Modifies a row atomically on the server. The method reads the latest
  /// existing timestamp and value from the specified columns and writes a new
  /// entry based on pre-defined read/modify/write rules. The new value for the
  /// timestamp is the greater of the existing timestamp or the current server
  /// time. The method returns the new contents of all modified cells.
  func readModifyWriteRow(request: Google_Bigtable_V2_ReadModifyWriteRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_V2_ReadModifyWriteRowResponse>
}

extension Google_Bigtable_V2_BigtableProvider {
  public var serviceName: Substring { return "google.bigtable.v2.Bigtable" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ReadRows":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.readRows(request: request, context: context)
        }
      }

    case "SampleRowKeys":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sampleRowKeys(request: request, context: context)
        }
      }

    case "MutateRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mutateRow(request: request, context: context)
        }
      }

    case "MutateRows":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mutateRows(request: request, context: context)
        }
      }

    case "CheckAndMutateRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.checkAndMutateRow(request: request, context: context)
        }
      }

    case "ReadModifyWriteRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.readModifyWriteRow(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

