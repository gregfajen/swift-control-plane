//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/bigtable/admin/table/v1/bigtable_table_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Bigtable_Admin_Table_V1_BigtableTableServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Bigtable_Admin_Table_V1_BigtableTableServiceClientProtocol: GRPCClient {
  func createTable(
    _ request: Google_Bigtable_Admin_Table_V1_CreateTableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_CreateTableRequest, Google_Bigtable_Admin_Table_V1_Table>

  func listTables(
    _ request: Google_Bigtable_Admin_Table_V1_ListTablesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_ListTablesRequest, Google_Bigtable_Admin_Table_V1_ListTablesResponse>

  func getTable(
    _ request: Google_Bigtable_Admin_Table_V1_GetTableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_GetTableRequest, Google_Bigtable_Admin_Table_V1_Table>

  func deleteTable(
    _ request: Google_Bigtable_Admin_Table_V1_DeleteTableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_DeleteTableRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func renameTable(
    _ request: Google_Bigtable_Admin_Table_V1_RenameTableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_RenameTableRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createColumnFamily(
    _ request: Google_Bigtable_Admin_Table_V1_CreateColumnFamilyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_CreateColumnFamilyRequest, Google_Bigtable_Admin_Table_V1_ColumnFamily>

  func updateColumnFamily(
    _ request: Google_Bigtable_Admin_Table_V1_ColumnFamily,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_ColumnFamily, Google_Bigtable_Admin_Table_V1_ColumnFamily>

  func deleteColumnFamily(
    _ request: Google_Bigtable_Admin_Table_V1_DeleteColumnFamilyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_DeleteColumnFamilyRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func bulkDeleteRows(
    _ request: Google_Bigtable_Admin_Table_V1_BulkDeleteRowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_BulkDeleteRowsRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Bigtable_Admin_Table_V1_BigtableTableServiceClientProtocol {

  /// Creates a new table, to be served from a specified cluster.
  /// The table can be created with a full set of initial column families,
  /// specified in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTable(
    _ request: Google_Bigtable_Admin_Table_V1_CreateTableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_CreateTableRequest, Google_Bigtable_Admin_Table_V1_Table> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/CreateTable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the names of all tables served from a specified cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTables.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTables(
    _ request: Google_Bigtable_Admin_Table_V1_ListTablesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_ListTablesRequest, Google_Bigtable_Admin_Table_V1_ListTablesResponse> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/ListTables",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the schema of the specified table, including its column families.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTable(
    _ request: Google_Bigtable_Admin_Table_V1_GetTableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_GetTableRequest, Google_Bigtable_Admin_Table_V1_Table> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/GetTable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes a specified table and all of its data.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteTable(
    _ request: Google_Bigtable_Admin_Table_V1_DeleteTableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_DeleteTableRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/DeleteTable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Changes the name of a specified table.
  /// Cannot be used to move tables between clusters, zones, or projects.
  ///
  /// - Parameters:
  ///   - request: Request to send to RenameTable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func renameTable(
    _ request: Google_Bigtable_Admin_Table_V1_RenameTableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_RenameTableRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/RenameTable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new column family within a specified table.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateColumnFamily.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createColumnFamily(
    _ request: Google_Bigtable_Admin_Table_V1_CreateColumnFamilyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_CreateColumnFamilyRequest, Google_Bigtable_Admin_Table_V1_ColumnFamily> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/CreateColumnFamily",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Changes the configuration of a specified column family.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateColumnFamily.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateColumnFamily(
    _ request: Google_Bigtable_Admin_Table_V1_ColumnFamily,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_ColumnFamily, Google_Bigtable_Admin_Table_V1_ColumnFamily> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/UpdateColumnFamily",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes a specified column family and all of its data.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteColumnFamily.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteColumnFamily(
    _ request: Google_Bigtable_Admin_Table_V1_DeleteColumnFamilyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_DeleteColumnFamilyRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/DeleteColumnFamily",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete all rows in a table corresponding to a particular prefix
  ///
  /// - Parameters:
  ///   - request: Request to send to BulkDeleteRows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func bulkDeleteRows(
    _ request: Google_Bigtable_Admin_Table_V1_BulkDeleteRowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bigtable_Admin_Table_V1_BulkDeleteRowsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.bigtable.admin.table.v1.BigtableTableService/BulkDeleteRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Bigtable_Admin_Table_V1_BigtableTableServiceClient: Google_Bigtable_Admin_Table_V1_BigtableTableServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.bigtable.admin.table.v1.BigtableTableService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Bigtable_Admin_Table_V1_BigtableTableServiceProvider: CallHandlerProvider {
  /// Creates a new table, to be served from a specified cluster.
  /// The table can be created with a full set of initial column families,
  /// specified in the request.
  func createTable(request: Google_Bigtable_Admin_Table_V1_CreateTableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_Admin_Table_V1_Table>
  /// Lists the names of all tables served from a specified cluster.
  func listTables(request: Google_Bigtable_Admin_Table_V1_ListTablesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_Admin_Table_V1_ListTablesResponse>
  /// Gets the schema of the specified table, including its column families.
  func getTable(request: Google_Bigtable_Admin_Table_V1_GetTableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_Admin_Table_V1_Table>
  /// Permanently deletes a specified table and all of its data.
  func deleteTable(request: Google_Bigtable_Admin_Table_V1_DeleteTableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Changes the name of a specified table.
  /// Cannot be used to move tables between clusters, zones, or projects.
  func renameTable(request: Google_Bigtable_Admin_Table_V1_RenameTableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Creates a new column family within a specified table.
  func createColumnFamily(request: Google_Bigtable_Admin_Table_V1_CreateColumnFamilyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_Admin_Table_V1_ColumnFamily>
  /// Changes the configuration of a specified column family.
  func updateColumnFamily(request: Google_Bigtable_Admin_Table_V1_ColumnFamily, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bigtable_Admin_Table_V1_ColumnFamily>
  /// Permanently deletes a specified column family and all of its data.
  func deleteColumnFamily(request: Google_Bigtable_Admin_Table_V1_DeleteColumnFamilyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Delete all rows in a table corresponding to a particular prefix
  func bulkDeleteRows(request: Google_Bigtable_Admin_Table_V1_BulkDeleteRowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Bigtable_Admin_Table_V1_BigtableTableServiceProvider {
  public var serviceName: Substring { return "google.bigtable.admin.table.v1.BigtableTableService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateTable":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createTable(request: request, context: context)
        }
      }

    case "ListTables":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTables(request: request, context: context)
        }
      }

    case "GetTable":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTable(request: request, context: context)
        }
      }

    case "DeleteTable":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteTable(request: request, context: context)
        }
      }

    case "RenameTable":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.renameTable(request: request, context: context)
        }
      }

    case "CreateColumnFamily":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createColumnFamily(request: request, context: context)
        }
      }

    case "UpdateColumnFamily":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateColumnFamily(request: request, context: context)
        }
      }

    case "DeleteColumnFamily":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteColumnFamily(request: request, context: context)
        }
      }

    case "BulkDeleteRows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.bulkDeleteRows(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

