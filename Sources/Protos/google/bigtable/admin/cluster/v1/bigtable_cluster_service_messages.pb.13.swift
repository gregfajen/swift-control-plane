// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/bigtable/admin/cluster/v1/bigtable_cluster_service_messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for BigtableClusterService.ListZones.
public struct Google_Bigtable_Admin_Cluster_V1_ListZonesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name of the project for which a list of supported zones is
  /// requested.
  /// Values are of the form projects/<project>
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for BigtableClusterService.ListZones.
public struct Google_Bigtable_Admin_Cluster_V1_ListZonesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of requested zones.
  public var zones: [Google_Bigtable_Admin_Cluster_V1_Zone] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableClusterService.GetCluster.
public struct Google_Bigtable_Admin_Cluster_V1_GetClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name of the requested cluster.
  /// Values are of the form projects/<project>/zones/<zone>/clusters/<cluster>
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableClusterService.ListClusters.
public struct Google_Bigtable_Admin_Cluster_V1_ListClustersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name of the project for which a list of clusters is requested.
  /// Values are of the form projects/<project>
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for BigtableClusterService.ListClusters.
public struct Google_Bigtable_Admin_Cluster_V1_ListClustersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of requested Clusters.
  public var clusters: [Google_Bigtable_Admin_Cluster_V1_Cluster] = []

  /// The zones for which clusters could not be retrieved.
  public var failedZones: [Google_Bigtable_Admin_Cluster_V1_Zone] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableClusterService.CreateCluster.
public struct Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name of the zone in which to create the cluster.
  /// Values are of the form projects/<project>/zones/<zone>
  public var name: String = String()

  /// The id to be used when referring to the new cluster within its zone,
  /// e.g. just the "test-cluster" section of the full name
  /// "projects/<project>/zones/<zone>/clusters/test-cluster".
  public var clusterID: String = String()

  /// The cluster to create.
  /// The "name", "delete_time", and "current_operation" fields must be left
  /// blank.
  public var cluster: Google_Bigtable_Admin_Cluster_V1_Cluster {
    get {return _cluster ?? Google_Bigtable_Admin_Cluster_V1_Cluster()}
    set {_cluster = newValue}
  }
  /// Returns true if `cluster` has been explicitly set.
  public var hasCluster: Bool {return self._cluster != nil}
  /// Clears the value of `cluster`. Subsequent reads from it will return its default value.
  public mutating func clearCluster() {self._cluster = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cluster: Google_Bigtable_Admin_Cluster_V1_Cluster? = nil
}

/// Metadata type for the operation returned by
/// BigtableClusterService.CreateCluster.
public struct Google_Bigtable_Admin_Cluster_V1_CreateClusterMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request which prompted the creation of this operation.
  public var originalRequest: Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest {
    get {return _originalRequest ?? Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest()}
    set {_originalRequest = newValue}
  }
  /// Returns true if `originalRequest` has been explicitly set.
  public var hasOriginalRequest: Bool {return self._originalRequest != nil}
  /// Clears the value of `originalRequest`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalRequest() {self._originalRequest = nil}

  /// The time at which original_request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which this operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _originalRequest: Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest? = nil
  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Metadata type for the operation returned by
/// BigtableClusterService.UpdateCluster.
public struct Google_Bigtable_Admin_Cluster_V1_UpdateClusterMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request which prompted the creation of this operation.
  public var originalRequest: Google_Bigtable_Admin_Cluster_V1_Cluster {
    get {return _originalRequest ?? Google_Bigtable_Admin_Cluster_V1_Cluster()}
    set {_originalRequest = newValue}
  }
  /// Returns true if `originalRequest` has been explicitly set.
  public var hasOriginalRequest: Bool {return self._originalRequest != nil}
  /// Clears the value of `originalRequest`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalRequest() {self._originalRequest = nil}

  /// The time at which original_request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which this operation was cancelled. If set, this operation is
  /// in the process of undoing itself (which is guaranteed to succeed) and
  /// cannot be cancelled again.
  public var cancelTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _cancelTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_cancelTime = newValue}
  }
  /// Returns true if `cancelTime` has been explicitly set.
  public var hasCancelTime: Bool {return self._cancelTime != nil}
  /// Clears the value of `cancelTime`. Subsequent reads from it will return its default value.
  public mutating func clearCancelTime() {self._cancelTime = nil}

  /// The time at which this operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _originalRequest: Google_Bigtable_Admin_Cluster_V1_Cluster? = nil
  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _cancelTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request message for BigtableClusterService.DeleteCluster.
public struct Google_Bigtable_Admin_Cluster_V1_DeleteClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name of the cluster to be deleted.
  /// Values are of the form projects/<project>/zones/<zone>/clusters/<cluster>
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableClusterService.UndeleteCluster.
public struct Google_Bigtable_Admin_Cluster_V1_UndeleteClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name of the cluster to be un-deleted.
  /// Values are of the form projects/<project>/zones/<zone>/clusters/<cluster>
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Metadata type for the operation returned by
/// BigtableClusterService.UndeleteCluster.
public struct Google_Bigtable_Admin_Cluster_V1_UndeleteClusterMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The time at which the original request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which this operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Metadata type for operations initiated by the V2 BigtableAdmin service.
/// More complete information for such operations is available via the V2 API.
public struct Google_Bigtable_Admin_Cluster_V1_V2OperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.bigtable.admin.cluster.v1"

extension Google_Bigtable_Admin_Cluster_V1_ListZonesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListZonesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_ListZonesRequest, rhs: Google_Bigtable_Admin_Cluster_V1_ListZonesRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_ListZonesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListZonesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zones"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.zones) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.zones.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.zones, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_ListZonesResponse, rhs: Google_Bigtable_Admin_Cluster_V1_ListZonesResponse) -> Bool {
    if lhs.zones != rhs.zones {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_GetClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_GetClusterRequest, rhs: Google_Bigtable_Admin_Cluster_V1_GetClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_ListClustersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListClustersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_ListClustersRequest, rhs: Google_Bigtable_Admin_Cluster_V1_ListClustersRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_ListClustersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListClustersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clusters"),
    2: .standard(proto: "failed_zones"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.clusters) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.failedZones) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clusters, fieldNumber: 1)
    }
    if !self.failedZones.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.failedZones, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_ListClustersResponse, rhs: Google_Bigtable_Admin_Cluster_V1_ListClustersResponse) -> Bool {
    if lhs.clusters != rhs.clusters {return false}
    if lhs.failedZones != rhs.failedZones {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "cluster_id"),
    3: .same(proto: "cluster"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clusterID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._cluster) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.clusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterID, fieldNumber: 2)
    }
    if let v = self._cluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest, rhs: Google_Bigtable_Admin_Cluster_V1_CreateClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.clusterID != rhs.clusterID {return false}
    if lhs._cluster != rhs._cluster {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_CreateClusterMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateClusterMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_request"),
    2: .standard(proto: "request_time"),
    3: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._originalRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_CreateClusterMetadata, rhs: Google_Bigtable_Admin_Cluster_V1_CreateClusterMetadata) -> Bool {
    if lhs._originalRequest != rhs._originalRequest {return false}
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_UpdateClusterMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateClusterMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_request"),
    2: .standard(proto: "request_time"),
    3: .standard(proto: "cancel_time"),
    4: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._cancelTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._originalRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._cancelTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_UpdateClusterMetadata, rhs: Google_Bigtable_Admin_Cluster_V1_UpdateClusterMetadata) -> Bool {
    if lhs._originalRequest != rhs._originalRequest {return false}
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._cancelTime != rhs._cancelTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_DeleteClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_DeleteClusterRequest, rhs: Google_Bigtable_Admin_Cluster_V1_DeleteClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_UndeleteClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UndeleteClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_UndeleteClusterRequest, rhs: Google_Bigtable_Admin_Cluster_V1_UndeleteClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_UndeleteClusterMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UndeleteClusterMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_time"),
    2: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_UndeleteClusterMetadata, rhs: Google_Bigtable_Admin_Cluster_V1_UndeleteClusterMetadata) -> Bool {
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_V2OperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".V2OperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_V2OperationMetadata, rhs: Google_Bigtable_Admin_Cluster_V1_V2OperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
