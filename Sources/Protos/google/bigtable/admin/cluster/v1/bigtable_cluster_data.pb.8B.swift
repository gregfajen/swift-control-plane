// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/bigtable/admin/cluster/v1/bigtable_cluster_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Google_Bigtable_Admin_Cluster_V1_StorageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The storage type used is unspecified.
  case storageUnspecified // = 0

  /// Data will be stored in SSD, providing low and consistent latencies.
  case storageSsd // = 1

  /// Data will be stored in HDD, providing high and less predictable
  /// latencies.
  case storageHdd // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .storageUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .storageUnspecified
    case 1: self = .storageSsd
    case 2: self = .storageHdd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .storageUnspecified: return 0
    case .storageSsd: return 1
    case .storageHdd: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Bigtable_Admin_Cluster_V1_StorageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Bigtable_Admin_Cluster_V1_StorageType] = [
    .storageUnspecified,
    .storageSsd,
    .storageHdd,
  ]
}

#endif  // swift(>=4.2)

/// A physical location in which a particular project can allocate Cloud BigTable
/// resources.
public struct Google_Bigtable_Admin_Cluster_V1_Zone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A permanent unique identifier for the zone.
  /// Values are of the form projects/<project>/zones/[a-z][-a-z0-9]*
  public var name: String = String()

  /// The name of this zone as it appears in UIs.
  public var displayName: String = String()

  /// The current state of this zone.
  public var status: Google_Bigtable_Admin_Cluster_V1_Zone.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible states of a zone.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The state of the zone is unknown or unspecified.
    case unknown // = 0

    /// The zone is in a good state.
    case ok // = 1

    /// The zone is down for planned maintenance.
    case plannedMaintenance // = 2

    /// The zone is down for emergency or unplanned maintenance.
    case emergencyMainenance // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .plannedMaintenance
      case 3: self = .emergencyMainenance
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .plannedMaintenance: return 2
      case .emergencyMainenance: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Bigtable_Admin_Cluster_V1_Zone.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Bigtable_Admin_Cluster_V1_Zone.Status] = [
    .unknown,
    .ok,
    .plannedMaintenance,
    .emergencyMainenance,
  ]
}

#endif  // swift(>=4.2)

/// An isolated set of Cloud BigTable resources on which tables can be hosted.
public struct Google_Bigtable_Admin_Cluster_V1_Cluster {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A permanent unique identifier for the cluster. For technical reasons, the
  /// zone in which the cluster resides is included here.
  /// Values are of the form
  /// projects/<project>/zones/<zone>/clusters/[a-z][-a-z0-9]*
  public var name: String = String()

  /// The operation currently running on the cluster, if any.
  /// This cannot be set directly, only through CreateCluster, UpdateCluster,
  /// or UndeleteCluster. Calls to these methods will be rejected if
  /// "current_operation" is already set.
  public var currentOperation: Google_Longrunning_Operation {
    get {return _currentOperation ?? Google_Longrunning_Operation()}
    set {_currentOperation = newValue}
  }
  /// Returns true if `currentOperation` has been explicitly set.
  public var hasCurrentOperation: Bool {return self._currentOperation != nil}
  /// Clears the value of `currentOperation`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentOperation() {self._currentOperation = nil}

  /// The descriptive name for this cluster as it appears in UIs.
  /// Must be unique per zone.
  public var displayName: String = String()

  /// The number of serve nodes allocated to this cluster.
  public var serveNodes: Int32 = 0

  /// What storage type to use for tables in this cluster. Only configurable at
  /// cluster creation time. If unspecified, STORAGE_SSD will be used.
  public var defaultStorageType: Google_Bigtable_Admin_Cluster_V1_StorageType = .storageUnspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _currentOperation: Google_Longrunning_Operation? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.bigtable.admin.cluster.v1"

extension Google_Bigtable_Admin_Cluster_V1_StorageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STORAGE_UNSPECIFIED"),
    1: .same(proto: "STORAGE_SSD"),
    2: .same(proto: "STORAGE_HDD"),
  ]
}

extension Google_Bigtable_Admin_Cluster_V1_Zone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Zone"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_Zone, rhs: Google_Bigtable_Admin_Cluster_V1_Zone) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_Cluster_V1_Zone.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "OK"),
    2: .same(proto: "PLANNED_MAINTENANCE"),
    3: .same(proto: "EMERGENCY_MAINENANCE"),
  ]
}

extension Google_Bigtable_Admin_Cluster_V1_Cluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Cluster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "current_operation"),
    4: .standard(proto: "display_name"),
    5: .standard(proto: "serve_nodes"),
    8: .standard(proto: "default_storage_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._currentOperation) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.serveNodes) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.defaultStorageType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._currentOperation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 4)
    }
    if self.serveNodes != 0 {
      try visitor.visitSingularInt32Field(value: self.serveNodes, fieldNumber: 5)
    }
    if self.defaultStorageType != .storageUnspecified {
      try visitor.visitSingularEnumField(value: self.defaultStorageType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_Cluster_V1_Cluster, rhs: Google_Bigtable_Admin_Cluster_V1_Cluster) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._currentOperation != rhs._currentOperation {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.serveNodes != rhs.serveNodes {return false}
    if lhs.defaultStorageType != rhs.defaultStorageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
