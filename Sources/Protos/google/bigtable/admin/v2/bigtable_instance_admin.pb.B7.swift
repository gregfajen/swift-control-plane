// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/bigtable/admin/v2/bigtable_instance_admin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for BigtableInstanceAdmin.CreateInstance.
public struct Google_Bigtable_Admin_V2_CreateInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the project in which to create the new instance.
  /// Values are of the form `projects/{project}`.
  public var parent: String = String()

  /// Required. The ID to be used when referring to the new instance within its project,
  /// e.g., just `myinstance` rather than
  /// `projects/myproject/instances/myinstance`.
  public var instanceID: String = String()

  /// Required. The instance to create.
  /// Fields marked `OutputOnly` must be left blank.
  public var instance: Google_Bigtable_Admin_V2_Instance {
    get {return _instance ?? Google_Bigtable_Admin_V2_Instance()}
    set {_instance = newValue}
  }
  /// Returns true if `instance` has been explicitly set.
  public var hasInstance: Bool {return self._instance != nil}
  /// Clears the value of `instance`. Subsequent reads from it will return its default value.
  public mutating func clearInstance() {self._instance = nil}

  /// Required. The clusters to be created within the instance, mapped by desired
  /// cluster ID, e.g., just `mycluster` rather than
  /// `projects/myproject/instances/myinstance/clusters/mycluster`.
  /// Fields marked `OutputOnly` must be left blank.
  /// Currently, at most four clusters can be specified.
  public var clusters: Dictionary<String,Google_Bigtable_Admin_V2_Cluster> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instance: Google_Bigtable_Admin_V2_Instance? = nil
}

/// Request message for BigtableInstanceAdmin.GetInstance.
public struct Google_Bigtable_Admin_V2_GetInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the requested instance. Values are of the form
  /// `projects/{project}/instances/{instance}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.ListInstances.
public struct Google_Bigtable_Admin_V2_ListInstancesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the project for which a list of instances is requested.
  /// Values are of the form `projects/{project}`.
  public var parent: String = String()

  /// DEPRECATED: This field is unused and ignored.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for BigtableInstanceAdmin.ListInstances.
public struct Google_Bigtable_Admin_V2_ListInstancesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of requested instances.
  public var instances: [Google_Bigtable_Admin_V2_Instance] = []

  /// Locations from which Instance information could not be retrieved,
  /// due to an outage or some other transient condition.
  /// Instances whose Clusters are all in one of the failed locations
  /// may be missing from `instances`, and Instances with at least one
  /// Cluster in a failed location may only have partial information returned.
  /// Values are of the form `projects/<project>/locations/<zone_id>`
  public var failedLocations: [String] = []

  /// DEPRECATED: This field is unused and ignored.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.PartialUpdateInstance.
public struct Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Instance which will (partially) replace the current value.
  public var instance: Google_Bigtable_Admin_V2_Instance {
    get {return _instance ?? Google_Bigtable_Admin_V2_Instance()}
    set {_instance = newValue}
  }
  /// Returns true if `instance` has been explicitly set.
  public var hasInstance: Bool {return self._instance != nil}
  /// Clears the value of `instance`. Subsequent reads from it will return its default value.
  public mutating func clearInstance() {self._instance = nil}

  /// Required. The subset of Instance fields which should be replaced.
  /// Must be explicitly set.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instance: Google_Bigtable_Admin_V2_Instance? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request message for BigtableInstanceAdmin.DeleteInstance.
public struct Google_Bigtable_Admin_V2_DeleteInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the instance to be deleted.
  /// Values are of the form `projects/{project}/instances/{instance}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.CreateCluster.
public struct Google_Bigtable_Admin_V2_CreateClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the instance in which to create the new cluster.
  /// Values are of the form
  /// `projects/{project}/instances/{instance}`.
  public var parent: String = String()

  /// Required. The ID to be used when referring to the new cluster within its instance,
  /// e.g., just `mycluster` rather than
  /// `projects/myproject/instances/myinstance/clusters/mycluster`.
  public var clusterID: String = String()

  /// Required. The cluster to be created.
  /// Fields marked `OutputOnly` must be left blank.
  public var cluster: Google_Bigtable_Admin_V2_Cluster {
    get {return _cluster ?? Google_Bigtable_Admin_V2_Cluster()}
    set {_cluster = newValue}
  }
  /// Returns true if `cluster` has been explicitly set.
  public var hasCluster: Bool {return self._cluster != nil}
  /// Clears the value of `cluster`. Subsequent reads from it will return its default value.
  public mutating func clearCluster() {self._cluster = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cluster: Google_Bigtable_Admin_V2_Cluster? = nil
}

/// Request message for BigtableInstanceAdmin.GetCluster.
public struct Google_Bigtable_Admin_V2_GetClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the requested cluster. Values are of the form
  /// `projects/{project}/instances/{instance}/clusters/{cluster}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.ListClusters.
public struct Google_Bigtable_Admin_V2_ListClustersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the instance for which a list of clusters is requested.
  /// Values are of the form `projects/{project}/instances/{instance}`.
  /// Use `{instance} = '-'` to list Clusters for all Instances in a project,
  /// e.g., `projects/myproject/instances/-`.
  public var parent: String = String()

  /// DEPRECATED: This field is unused and ignored.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for BigtableInstanceAdmin.ListClusters.
public struct Google_Bigtable_Admin_V2_ListClustersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of requested clusters.
  public var clusters: [Google_Bigtable_Admin_V2_Cluster] = []

  /// Locations from which Cluster information could not be retrieved,
  /// due to an outage or some other transient condition.
  /// Clusters from these locations may be missing from `clusters`,
  /// or may only have partial information returned.
  /// Values are of the form `projects/<project>/locations/<zone_id>`
  public var failedLocations: [String] = []

  /// DEPRECATED: This field is unused and ignored.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.DeleteCluster.
public struct Google_Bigtable_Admin_V2_DeleteClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the cluster to be deleted. Values are of the form
  /// `projects/{project}/instances/{instance}/clusters/{cluster}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The metadata for the Operation returned by CreateInstance.
public struct Google_Bigtable_Admin_V2_CreateInstanceMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request that prompted the initiation of this CreateInstance operation.
  public var originalRequest: Google_Bigtable_Admin_V2_CreateInstanceRequest {
    get {return _originalRequest ?? Google_Bigtable_Admin_V2_CreateInstanceRequest()}
    set {_originalRequest = newValue}
  }
  /// Returns true if `originalRequest` has been explicitly set.
  public var hasOriginalRequest: Bool {return self._originalRequest != nil}
  /// Clears the value of `originalRequest`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalRequest() {self._originalRequest = nil}

  /// The time at which the original request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which the operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _originalRequest: Google_Bigtable_Admin_V2_CreateInstanceRequest? = nil
  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// The metadata for the Operation returned by UpdateInstance.
public struct Google_Bigtable_Admin_V2_UpdateInstanceMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request that prompted the initiation of this UpdateInstance operation.
  public var originalRequest: Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest {
    get {return _originalRequest ?? Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest()}
    set {_originalRequest = newValue}
  }
  /// Returns true if `originalRequest` has been explicitly set.
  public var hasOriginalRequest: Bool {return self._originalRequest != nil}
  /// Clears the value of `originalRequest`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalRequest() {self._originalRequest = nil}

  /// The time at which the original request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which the operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _originalRequest: Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest? = nil
  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// The metadata for the Operation returned by CreateCluster.
public struct Google_Bigtable_Admin_V2_CreateClusterMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request that prompted the initiation of this CreateCluster operation.
  public var originalRequest: Google_Bigtable_Admin_V2_CreateClusterRequest {
    get {return _originalRequest ?? Google_Bigtable_Admin_V2_CreateClusterRequest()}
    set {_originalRequest = newValue}
  }
  /// Returns true if `originalRequest` has been explicitly set.
  public var hasOriginalRequest: Bool {return self._originalRequest != nil}
  /// Clears the value of `originalRequest`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalRequest() {self._originalRequest = nil}

  /// The time at which the original request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which the operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _originalRequest: Google_Bigtable_Admin_V2_CreateClusterRequest? = nil
  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// The metadata for the Operation returned by UpdateCluster.
public struct Google_Bigtable_Admin_V2_UpdateClusterMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request that prompted the initiation of this UpdateCluster operation.
  public var originalRequest: Google_Bigtable_Admin_V2_Cluster {
    get {return _originalRequest ?? Google_Bigtable_Admin_V2_Cluster()}
    set {_originalRequest = newValue}
  }
  /// Returns true if `originalRequest` has been explicitly set.
  public var hasOriginalRequest: Bool {return self._originalRequest != nil}
  /// Clears the value of `originalRequest`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalRequest() {self._originalRequest = nil}

  /// The time at which the original request was received.
  public var requestTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTime = newValue}
  }
  /// Returns true if `requestTime` has been explicitly set.
  public var hasRequestTime: Bool {return self._requestTime != nil}
  /// Clears the value of `requestTime`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTime() {self._requestTime = nil}

  /// The time at which the operation failed or was completed successfully.
  public var finishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishTime = newValue}
  }
  /// Returns true if `finishTime` has been explicitly set.
  public var hasFinishTime: Bool {return self._finishTime != nil}
  /// Clears the value of `finishTime`. Subsequent reads from it will return its default value.
  public mutating func clearFinishTime() {self._finishTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _originalRequest: Google_Bigtable_Admin_V2_Cluster? = nil
  fileprivate var _requestTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request message for BigtableInstanceAdmin.CreateAppProfile.
public struct Google_Bigtable_Admin_V2_CreateAppProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the instance in which to create the new app profile.
  /// Values are of the form
  /// `projects/{project}/instances/{instance}`.
  public var parent: String = String()

  /// Required. The ID to be used when referring to the new app profile within its
  /// instance, e.g., just `myprofile` rather than
  /// `projects/myproject/instances/myinstance/appProfiles/myprofile`.
  public var appProfileID: String = String()

  /// Required. The app profile to be created.
  /// Fields marked `OutputOnly` will be ignored.
  public var appProfile: Google_Bigtable_Admin_V2_AppProfile {
    get {return _appProfile ?? Google_Bigtable_Admin_V2_AppProfile()}
    set {_appProfile = newValue}
  }
  /// Returns true if `appProfile` has been explicitly set.
  public var hasAppProfile: Bool {return self._appProfile != nil}
  /// Clears the value of `appProfile`. Subsequent reads from it will return its default value.
  public mutating func clearAppProfile() {self._appProfile = nil}

  /// If true, ignore safety checks when creating the app profile.
  public var ignoreWarnings: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appProfile: Google_Bigtable_Admin_V2_AppProfile? = nil
}

/// Request message for BigtableInstanceAdmin.GetAppProfile.
public struct Google_Bigtable_Admin_V2_GetAppProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the requested app profile. Values are of the form
  /// `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.ListAppProfiles.
public struct Google_Bigtable_Admin_V2_ListAppProfilesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the instance for which a list of app profiles is
  /// requested. Values are of the form
  /// `projects/{project}/instances/{instance}`.
  /// Use `{instance} = '-'` to list AppProfiles for all Instances in a project,
  /// e.g., `projects/myproject/instances/-`.
  public var parent: String = String()

  /// Maximum number of results per page.
  ///
  /// A page_size of zero lets the server choose the number of items to return.
  /// A page_size which is strictly positive will return at most that many items.
  /// A negative page_size will cause an error.
  ///
  /// Following the first request, subsequent paginated calls are not required
  /// to pass a page_size. If a page_size is set in subsequent calls, it must
  /// match the page_size given in the first request.
  public var pageSize: Int32 = 0

  /// The value of `next_page_token` returned by a previous call.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for BigtableInstanceAdmin.ListAppProfiles.
public struct Google_Bigtable_Admin_V2_ListAppProfilesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of requested app profiles.
  public var appProfiles: [Google_Bigtable_Admin_V2_AppProfile] = []

  /// Set if not all app profiles could be returned in a single response.
  /// Pass this value to `page_token` in another request to get the next
  /// page of results.
  public var nextPageToken: String = String()

  /// Locations from which AppProfile information could not be retrieved,
  /// due to an outage or some other transient condition.
  /// AppProfiles from these locations may be missing from `app_profiles`.
  /// Values are of the form `projects/<project>/locations/<zone_id>`
  public var failedLocations: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BigtableInstanceAdmin.UpdateAppProfile.
public struct Google_Bigtable_Admin_V2_UpdateAppProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The app profile which will (partially) replace the current value.
  public var appProfile: Google_Bigtable_Admin_V2_AppProfile {
    get {return _appProfile ?? Google_Bigtable_Admin_V2_AppProfile()}
    set {_appProfile = newValue}
  }
  /// Returns true if `appProfile` has been explicitly set.
  public var hasAppProfile: Bool {return self._appProfile != nil}
  /// Clears the value of `appProfile`. Subsequent reads from it will return its default value.
  public mutating func clearAppProfile() {self._appProfile = nil}

  /// Required. The subset of app profile fields which should be replaced.
  /// If unset, all fields will be replaced.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// If true, ignore safety checks when updating the app profile.
  public var ignoreWarnings: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appProfile: Google_Bigtable_Admin_V2_AppProfile? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request message for BigtableInstanceAdmin.DeleteAppProfile.
public struct Google_Bigtable_Admin_V2_DeleteAppProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The unique name of the app profile to be deleted. Values are of the form
  /// `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
  public var name: String = String()

  /// Required. If true, ignore safety checks when deleting the app profile.
  public var ignoreWarnings: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The metadata for the Operation returned by UpdateAppProfile.
public struct Google_Bigtable_Admin_V2_UpdateAppProfileMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.bigtable.admin.v2"

extension Google_Bigtable_Admin_V2_CreateInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "instance_id"),
    3: .same(proto: "instance"),
    4: .same(proto: "clusters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.instanceID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._instance) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Bigtable_Admin_V2_Cluster>.self, value: &self.clusters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.instanceID.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceID, fieldNumber: 2)
    }
    if let v = self._instance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.clusters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Bigtable_Admin_V2_Cluster>.self, value: self.clusters, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_CreateInstanceRequest, rhs: Google_Bigtable_Admin_V2_CreateInstanceRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.instanceID != rhs.instanceID {return false}
    if lhs._instance != rhs._instance {return false}
    if lhs.clusters != rhs.clusters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_GetInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_GetInstanceRequest, rhs: Google_Bigtable_Admin_V2_GetInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_ListInstancesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListInstancesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_ListInstancesRequest, rhs: Google_Bigtable_Admin_V2_ListInstancesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_ListInstancesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListInstancesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instances"),
    2: .standard(proto: "failed_locations"),
    3: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instances) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.failedLocations) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instances, fieldNumber: 1)
    }
    if !self.failedLocations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.failedLocations, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_ListInstancesResponse, rhs: Google_Bigtable_Admin_V2_ListInstancesResponse) -> Bool {
    if lhs.instances != rhs.instances {return false}
    if lhs.failedLocations != rhs.failedLocations {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PartialUpdateInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instance"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._instance) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._instance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest, rhs: Google_Bigtable_Admin_V2_PartialUpdateInstanceRequest) -> Bool {
    if lhs._instance != rhs._instance {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_DeleteInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_DeleteInstanceRequest, rhs: Google_Bigtable_Admin_V2_DeleteInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_CreateClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "cluster_id"),
    3: .same(proto: "cluster"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clusterID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._cluster) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.clusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterID, fieldNumber: 2)
    }
    if let v = self._cluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_CreateClusterRequest, rhs: Google_Bigtable_Admin_V2_CreateClusterRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.clusterID != rhs.clusterID {return false}
    if lhs._cluster != rhs._cluster {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_GetClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_GetClusterRequest, rhs: Google_Bigtable_Admin_V2_GetClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_ListClustersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListClustersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_ListClustersRequest, rhs: Google_Bigtable_Admin_V2_ListClustersRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_ListClustersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListClustersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clusters"),
    2: .standard(proto: "failed_locations"),
    3: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.clusters) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.failedLocations) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clusters, fieldNumber: 1)
    }
    if !self.failedLocations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.failedLocations, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_ListClustersResponse, rhs: Google_Bigtable_Admin_V2_ListClustersResponse) -> Bool {
    if lhs.clusters != rhs.clusters {return false}
    if lhs.failedLocations != rhs.failedLocations {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_DeleteClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_DeleteClusterRequest, rhs: Google_Bigtable_Admin_V2_DeleteClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_CreateInstanceMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateInstanceMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_request"),
    2: .standard(proto: "request_time"),
    3: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._originalRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_CreateInstanceMetadata, rhs: Google_Bigtable_Admin_V2_CreateInstanceMetadata) -> Bool {
    if lhs._originalRequest != rhs._originalRequest {return false}
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_UpdateInstanceMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateInstanceMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_request"),
    2: .standard(proto: "request_time"),
    3: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._originalRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_UpdateInstanceMetadata, rhs: Google_Bigtable_Admin_V2_UpdateInstanceMetadata) -> Bool {
    if lhs._originalRequest != rhs._originalRequest {return false}
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_CreateClusterMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateClusterMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_request"),
    2: .standard(proto: "request_time"),
    3: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._originalRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_CreateClusterMetadata, rhs: Google_Bigtable_Admin_V2_CreateClusterMetadata) -> Bool {
    if lhs._originalRequest != rhs._originalRequest {return false}
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_UpdateClusterMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateClusterMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_request"),
    2: .standard(proto: "request_time"),
    3: .standard(proto: "finish_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._finishTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._originalRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._finishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_UpdateClusterMetadata, rhs: Google_Bigtable_Admin_V2_UpdateClusterMetadata) -> Bool {
    if lhs._originalRequest != rhs._originalRequest {return false}
    if lhs._requestTime != rhs._requestTime {return false}
    if lhs._finishTime != rhs._finishTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_CreateAppProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAppProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "app_profile_id"),
    3: .standard(proto: "app_profile"),
    4: .standard(proto: "ignore_warnings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appProfileID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._appProfile) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.ignoreWarnings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.appProfileID.isEmpty {
      try visitor.visitSingularStringField(value: self.appProfileID, fieldNumber: 2)
    }
    if let v = self._appProfile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.ignoreWarnings != false {
      try visitor.visitSingularBoolField(value: self.ignoreWarnings, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_CreateAppProfileRequest, rhs: Google_Bigtable_Admin_V2_CreateAppProfileRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.appProfileID != rhs.appProfileID {return false}
    if lhs._appProfile != rhs._appProfile {return false}
    if lhs.ignoreWarnings != rhs.ignoreWarnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_GetAppProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAppProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_GetAppProfileRequest, rhs: Google_Bigtable_Admin_V2_GetAppProfileRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_ListAppProfilesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAppProfilesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    3: .standard(proto: "page_size"),
    2: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_ListAppProfilesRequest, rhs: Google_Bigtable_Admin_V2_ListAppProfilesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_ListAppProfilesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAppProfilesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_profiles"),
    2: .standard(proto: "next_page_token"),
    3: .standard(proto: "failed_locations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.appProfiles) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.failedLocations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appProfiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appProfiles, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if !self.failedLocations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.failedLocations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_ListAppProfilesResponse, rhs: Google_Bigtable_Admin_V2_ListAppProfilesResponse) -> Bool {
    if lhs.appProfiles != rhs.appProfiles {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.failedLocations != rhs.failedLocations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_UpdateAppProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateAppProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_profile"),
    2: .standard(proto: "update_mask"),
    3: .standard(proto: "ignore_warnings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._appProfile) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.ignoreWarnings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._appProfile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.ignoreWarnings != false {
      try visitor.visitSingularBoolField(value: self.ignoreWarnings, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_UpdateAppProfileRequest, rhs: Google_Bigtable_Admin_V2_UpdateAppProfileRequest) -> Bool {
    if lhs._appProfile != rhs._appProfile {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.ignoreWarnings != rhs.ignoreWarnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_DeleteAppProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAppProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "ignore_warnings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.ignoreWarnings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.ignoreWarnings != false {
      try visitor.visitSingularBoolField(value: self.ignoreWarnings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_DeleteAppProfileRequest, rhs: Google_Bigtable_Admin_V2_DeleteAppProfileRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.ignoreWarnings != rhs.ignoreWarnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Bigtable_Admin_V2_UpdateAppProfileMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateAppProfileMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Bigtable_Admin_V2_UpdateAppProfileMetadata, rhs: Google_Bigtable_Admin_V2_UpdateAppProfileMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
