//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/firebase/fcm/connection/v1alpha1/connection_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiClient, then call methods of this protocol to make API calls.
public protocol Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiClientProtocol: GRPCClient {
  func connect(
    callOptions: CallOptions?,
    handler: @escaping (Google_Firebase_Fcm_Connection_V1alpha1_DownstreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firebase_Fcm_Connection_V1alpha1_UpstreamRequest, Google_Firebase_Fcm_Connection_V1alpha1_DownstreamResponse>

}

extension Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiClientProtocol {

  /// Creates a streaming connection with FCM to send messages and their
  /// respective ACKs.
  ///
  /// The client credentials need to be passed in the [gRPC
  /// Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
  /// of the header is:
  ///   Key: "authorization"
  ///   Value: "Checkin [client_id:secret]"
  ///
  ///
  /// The project's API key also needs to be sent to authorize the project.
  /// That can be set in the X-Goog-Api-Key Metadata header.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func connect(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firebase_Fcm_Connection_V1alpha1_DownstreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firebase_Fcm_Connection_V1alpha1_UpstreamRequest, Google_Firebase_Fcm_Connection_V1alpha1_DownstreamResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/google.firebase.fcm.connection.v1alpha1.ConnectionApi/Connect",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

public final class Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiClient: Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.firebase.fcm.connection.v1alpha1.ConnectionApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiProvider: CallHandlerProvider {
  /// Creates a streaming connection with FCM to send messages and their
  /// respective ACKs.
  ///
  /// The client credentials need to be passed in the [gRPC
  /// Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
  /// of the header is:
  ///   Key: "authorization"
  ///   Value: "Checkin [client_id:secret]"
  ///
  ///
  /// The project's API key also needs to be sent to authorize the project.
  /// That can be set in the X-Goog-Api-Key Metadata header.
  func connect(context: StreamingResponseCallContext<Google_Firebase_Fcm_Connection_V1alpha1_DownstreamResponse>) -> EventLoopFuture<(StreamEvent<Google_Firebase_Fcm_Connection_V1alpha1_UpstreamRequest>) -> Void>
}

extension Google_Firebase_Fcm_Connection_V1alpha1_ConnectionApiProvider {
  public var serviceName: Substring { return "google.firebase.fcm.connection.v1alpha1.ConnectionApi" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Connect":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.connect(context: context)
      }

    default: return nil
    }
  }
}

