//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/pubsub/v1beta2/pubsub.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Pubsub_V1beta2_SubscriberClient, then call methods of this protocol to make API calls.
public protocol Google_Pubsub_V1beta2_SubscriberClientProtocol: GRPCClient {
  func createSubscription(
    _ request: Google_Pubsub_V1beta2_Subscription,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_Subscription, Google_Pubsub_V1beta2_Subscription>

  func getSubscription(
    _ request: Google_Pubsub_V1beta2_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_GetSubscriptionRequest, Google_Pubsub_V1beta2_Subscription>

  func listSubscriptions(
    _ request: Google_Pubsub_V1beta2_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_ListSubscriptionsRequest, Google_Pubsub_V1beta2_ListSubscriptionsResponse>

  func deleteSubscription(
    _ request: Google_Pubsub_V1beta2_DeleteSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func modifyAckDeadline(
    _ request: Google_Pubsub_V1beta2_ModifyAckDeadlineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func acknowledge(
    _ request: Google_Pubsub_V1beta2_AcknowledgeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func pull(
    _ request: Google_Pubsub_V1beta2_PullRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_PullRequest, Google_Pubsub_V1beta2_PullResponse>

  func modifyPushConfig(
    _ request: Google_Pubsub_V1beta2_ModifyPushConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Pubsub_V1beta2_SubscriberClientProtocol {

  /// Creates a subscription to a given topic for a given subscriber.
  /// If the subscription already exists, returns ALREADY_EXISTS.
  /// If the corresponding topic doesn't exist, returns NOT_FOUND.
  ///
  /// If the name is not provided in the request, the server will assign a random
  /// name for this subscription on the same project as the topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSubscription(
    _ request: Google_Pubsub_V1beta2_Subscription,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_Subscription, Google_Pubsub_V1beta2_Subscription> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/CreateSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the configuration details of a subscription.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSubscription(
    _ request: Google_Pubsub_V1beta2_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_GetSubscriptionRequest, Google_Pubsub_V1beta2_Subscription> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/GetSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists matching subscriptions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSubscriptions(
    _ request: Google_Pubsub_V1beta2_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_ListSubscriptionsRequest, Google_Pubsub_V1beta2_ListSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/ListSubscriptions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an existing subscription. All pending messages in the subscription
  /// are immediately dropped. Calls to Pull after deletion will return
  /// NOT_FOUND. After a subscription is deleted, a new one may be created with
  /// the same name, but the new one has no association with the old
  /// subscription, or its topic unless the same topic is specified.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSubscription(
    _ request: Google_Pubsub_V1beta2_DeleteSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/DeleteSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Modifies the ack deadline for a specific message. This method is useful to
  /// indicate that more time is needed to process a message by the subscriber,
  /// or to make the message available for redelivery if the processing was
  /// interrupted.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModifyAckDeadline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func modifyAckDeadline(
    _ request: Google_Pubsub_V1beta2_ModifyAckDeadlineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/ModifyAckDeadline",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Acknowledges the messages associated with the ack tokens in the
  /// AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
  /// from the subscription.
  ///
  /// Acknowledging a message whose ack deadline has expired may succeed,
  /// but such a message may be redelivered later. Acknowledging a message more
  /// than once will not result in an error.
  ///
  /// - Parameters:
  ///   - request: Request to send to Acknowledge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func acknowledge(
    _ request: Google_Pubsub_V1beta2_AcknowledgeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/Acknowledge",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Pulls messages from the server. Returns an empty list if there are no
  /// messages available in the backlog. The server may return UNAVAILABLE if
  /// there are too many concurrent pull requests pending for the given
  /// subscription.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pull.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pull(
    _ request: Google_Pubsub_V1beta2_PullRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_PullRequest, Google_Pubsub_V1beta2_PullResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/Pull",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Modifies the PushConfig for a specified subscription.
  ///
  /// This may be used to change a push subscription to a pull one (signified
  /// by an empty PushConfig) or vice versa, or change the endpoint URL and other
  /// attributes of a push subscription. Messages will accumulate for
  /// delivery continuously through the call regardless of changes to the
  /// PushConfig.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModifyPushConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func modifyPushConfig(
    _ request: Google_Pubsub_V1beta2_ModifyPushConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Subscriber/ModifyPushConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Pubsub_V1beta2_SubscriberClient: Google_Pubsub_V1beta2_SubscriberClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.pubsub.v1beta2.Subscriber service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Pubsub_V1beta2_PublisherClient, then call methods of this protocol to make API calls.
public protocol Google_Pubsub_V1beta2_PublisherClientProtocol: GRPCClient {
  func createTopic(
    _ request: Google_Pubsub_V1beta2_Topic,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_Topic, Google_Pubsub_V1beta2_Topic>

  func publish(
    _ request: Google_Pubsub_V1beta2_PublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_PublishRequest, Google_Pubsub_V1beta2_PublishResponse>

  func getTopic(
    _ request: Google_Pubsub_V1beta2_GetTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_GetTopicRequest, Google_Pubsub_V1beta2_Topic>

  func listTopics(
    _ request: Google_Pubsub_V1beta2_ListTopicsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_ListTopicsRequest, Google_Pubsub_V1beta2_ListTopicsResponse>

  func listTopicSubscriptions(
    _ request: Google_Pubsub_V1beta2_ListTopicSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_ListTopicSubscriptionsRequest, Google_Pubsub_V1beta2_ListTopicSubscriptionsResponse>

  func deleteTopic(
    _ request: Google_Pubsub_V1beta2_DeleteTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1beta2_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Pubsub_V1beta2_PublisherClientProtocol {

  /// Creates the given topic with the given name.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTopic(
    _ request: Google_Pubsub_V1beta2_Topic,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_Topic, Google_Pubsub_V1beta2_Topic> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Publisher/CreateTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
  /// not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func publish(
    _ request: Google_Pubsub_V1beta2_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_PublishRequest, Google_Pubsub_V1beta2_PublishResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Publisher/Publish",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the configuration of a topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTopic(
    _ request: Google_Pubsub_V1beta2_GetTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_GetTopicRequest, Google_Pubsub_V1beta2_Topic> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Publisher/GetTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists matching topics.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTopics(
    _ request: Google_Pubsub_V1beta2_ListTopicsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_ListTopicsRequest, Google_Pubsub_V1beta2_ListTopicsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Publisher/ListTopics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the name of the subscriptions for this topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopicSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTopicSubscriptions(
    _ request: Google_Pubsub_V1beta2_ListTopicSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_ListTopicSubscriptionsRequest, Google_Pubsub_V1beta2_ListTopicSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Publisher/ListTopicSubscriptions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the topic with the given name. Returns NOT_FOUND if the topic does
  /// not exist. After a topic is deleted, a new topic may be created with the
  /// same name; this is an entirely new topic with none of the old
  /// configuration or subscriptions. Existing subscriptions to this topic are
  /// not deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteTopic(
    _ request: Google_Pubsub_V1beta2_DeleteTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1beta2_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1beta2.Publisher/DeleteTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Pubsub_V1beta2_PublisherClient: Google_Pubsub_V1beta2_PublisherClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.pubsub.v1beta2.Publisher service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Pubsub_V1beta2_SubscriberProvider: CallHandlerProvider {
  /// Creates a subscription to a given topic for a given subscriber.
  /// If the subscription already exists, returns ALREADY_EXISTS.
  /// If the corresponding topic doesn't exist, returns NOT_FOUND.
  ///
  /// If the name is not provided in the request, the server will assign a random
  /// name for this subscription on the same project as the topic.
  func createSubscription(request: Google_Pubsub_V1beta2_Subscription, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_Subscription>
  /// Gets the configuration details of a subscription.
  func getSubscription(request: Google_Pubsub_V1beta2_GetSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_Subscription>
  /// Lists matching subscriptions.
  func listSubscriptions(request: Google_Pubsub_V1beta2_ListSubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_ListSubscriptionsResponse>
  /// Deletes an existing subscription. All pending messages in the subscription
  /// are immediately dropped. Calls to Pull after deletion will return
  /// NOT_FOUND. After a subscription is deleted, a new one may be created with
  /// the same name, but the new one has no association with the old
  /// subscription, or its topic unless the same topic is specified.
  func deleteSubscription(request: Google_Pubsub_V1beta2_DeleteSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Modifies the ack deadline for a specific message. This method is useful to
  /// indicate that more time is needed to process a message by the subscriber,
  /// or to make the message available for redelivery if the processing was
  /// interrupted.
  func modifyAckDeadline(request: Google_Pubsub_V1beta2_ModifyAckDeadlineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Acknowledges the messages associated with the ack tokens in the
  /// AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
  /// from the subscription.
  ///
  /// Acknowledging a message whose ack deadline has expired may succeed,
  /// but such a message may be redelivered later. Acknowledging a message more
  /// than once will not result in an error.
  func acknowledge(request: Google_Pubsub_V1beta2_AcknowledgeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Pulls messages from the server. Returns an empty list if there are no
  /// messages available in the backlog. The server may return UNAVAILABLE if
  /// there are too many concurrent pull requests pending for the given
  /// subscription.
  func pull(request: Google_Pubsub_V1beta2_PullRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_PullResponse>
  /// Modifies the PushConfig for a specified subscription.
  ///
  /// This may be used to change a push subscription to a pull one (signified
  /// by an empty PushConfig) or vice versa, or change the endpoint URL and other
  /// attributes of a push subscription. Messages will accumulate for
  /// delivery continuously through the call regardless of changes to the
  /// PushConfig.
  func modifyPushConfig(request: Google_Pubsub_V1beta2_ModifyPushConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Pubsub_V1beta2_SubscriberProvider {
  public var serviceName: Substring { return "google.pubsub.v1beta2.Subscriber" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createSubscription(request: request, context: context)
        }
      }

    case "GetSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSubscription(request: request, context: context)
        }
      }

    case "ListSubscriptions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSubscriptions(request: request, context: context)
        }
      }

    case "DeleteSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSubscription(request: request, context: context)
        }
      }

    case "ModifyAckDeadline":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.modifyAckDeadline(request: request, context: context)
        }
      }

    case "Acknowledge":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.acknowledge(request: request, context: context)
        }
      }

    case "Pull":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pull(request: request, context: context)
        }
      }

    case "ModifyPushConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.modifyPushConfig(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Pubsub_V1beta2_PublisherProvider: CallHandlerProvider {
  /// Creates the given topic with the given name.
  func createTopic(request: Google_Pubsub_V1beta2_Topic, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_Topic>
  /// Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
  /// not exist.
  func publish(request: Google_Pubsub_V1beta2_PublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_PublishResponse>
  /// Gets the configuration of a topic.
  func getTopic(request: Google_Pubsub_V1beta2_GetTopicRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_Topic>
  /// Lists matching topics.
  func listTopics(request: Google_Pubsub_V1beta2_ListTopicsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_ListTopicsResponse>
  /// Lists the name of the subscriptions for this topic.
  func listTopicSubscriptions(request: Google_Pubsub_V1beta2_ListTopicSubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1beta2_ListTopicSubscriptionsResponse>
  /// Deletes the topic with the given name. Returns NOT_FOUND if the topic does
  /// not exist. After a topic is deleted, a new topic may be created with the
  /// same name; this is an entirely new topic with none of the old
  /// configuration or subscriptions. Existing subscriptions to this topic are
  /// not deleted.
  func deleteTopic(request: Google_Pubsub_V1beta2_DeleteTopicRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Pubsub_V1beta2_PublisherProvider {
  public var serviceName: Substring { return "google.pubsub.v1beta2.Publisher" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createTopic(request: request, context: context)
        }
      }

    case "Publish":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.publish(request: request, context: context)
        }
      }

    case "GetTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTopic(request: request, context: context)
        }
      }

    case "ListTopics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTopics(request: request, context: context)
        }
      }

    case "ListTopicSubscriptions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTopicSubscriptions(request: request, context: context)
        }
      }

    case "DeleteTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteTopic(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

