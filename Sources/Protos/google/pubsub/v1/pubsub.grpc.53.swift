//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/pubsub/v1/pubsub.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Pubsub_V1_PublisherClient, then call methods of this protocol to make API calls.
public protocol Google_Pubsub_V1_PublisherClientProtocol: GRPCClient {
  func createTopic(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic>

  func updateTopic(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic>

  func publish(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse>

  func getTopic(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic>

  func listTopics(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse>

  func listTopicSubscriptions(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse>

  func listTopicSnapshots(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse>

  func deleteTopic(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func detachSubscription(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse>

}

extension Google_Pubsub_V1_PublisherClientProtocol {

  /// Creates the given topic with the given name. See the [resource name rules](
  /// https://cloud.google.com/pubsub/docs/admin#resource_names).
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTopic(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/CreateTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing topic. Note that certain properties of a
  /// topic are not modifiable.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTopic(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/UpdateTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
  /// does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func publish(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/Publish",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the configuration of a topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTopic(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/GetTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists matching topics.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTopics(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/ListTopics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the names of the attached subscriptions on this topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopicSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTopicSubscriptions(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/ListTopicSubscriptions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the names of the snapshots on this topic. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopicSnapshots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTopicSnapshots(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/ListTopicSnapshots",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
  /// does not exist. After a topic is deleted, a new topic may be created with
  /// the same name; this is an entirely new topic with none of the old
  /// configuration or subscriptions. Existing subscriptions to this topic are
  /// not deleted, but their `topic` field is set to `_deleted-topic_`.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteTopic(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/DeleteTopic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Detaches a subscription from this topic. All messages retained in the
  /// subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
  /// will return FAILED_PRECONDITION. If the subscription is a push
  /// subscription, pushes to the endpoint will stop.
  ///
  /// - Parameters:
  ///   - request: Request to send to DetachSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func detachSubscription(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Publisher/DetachSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Pubsub_V1_PublisherClient: Google_Pubsub_V1_PublisherClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.pubsub.v1.Publisher service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Pubsub_V1_SubscriberClient, then call methods of this protocol to make API calls.
public protocol Google_Pubsub_V1_SubscriberClientProtocol: GRPCClient {
  func createSubscription(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription>

  func getSubscription(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription>

  func updateSubscription(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription>

  func listSubscriptions(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse>

  func deleteSubscription(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func modifyAckDeadline(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func acknowledge(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func pull(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse>

  func streamingPull(
    callOptions: CallOptions?,
    handler: @escaping (Google_Pubsub_V1_StreamingPullResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse>

  func modifyPushConfig(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getSnapshot(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func listSnapshots(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse>

  func createSnapshot(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func updateSnapshot(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func deleteSnapshot(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func seek(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse>

}

extension Google_Pubsub_V1_SubscriberClientProtocol {

  /// Creates a subscription to a given topic. See the [resource name rules]
  /// (https://cloud.google.com/pubsub/docs/admin#resource_names).
  /// If the subscription already exists, returns `ALREADY_EXISTS`.
  /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
  ///
  /// If the name is not provided in the request, the server will assign a random
  /// name for this subscription on the same project as the topic, conforming
  /// to the [resource name format]
  /// (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
  /// name is populated in the returned Subscription object. Note that for REST
  /// API requests, you must specify a name in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSubscription(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/CreateSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the configuration details of a subscription.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSubscription(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/GetSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing subscription. Note that certain properties of a
  /// subscription, such as its topic, are not modifiable.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateSubscription(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/UpdateSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists matching subscriptions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSubscriptions(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/ListSubscriptions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an existing subscription. All messages retained in the subscription
  /// are immediately dropped. Calls to `Pull` after deletion will return
  /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
  /// the same name, but the new one has no association with the old
  /// subscription or its topic unless the same topic is specified.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSubscription(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/DeleteSubscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Modifies the ack deadline for a specific message. This method is useful
  /// to indicate that more time is needed to process a message by the
  /// subscriber, or to make the message available for redelivery if the
  /// processing was interrupted. Note that this does not modify the
  /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModifyAckDeadline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func modifyAckDeadline(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/ModifyAckDeadline",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Acknowledges the messages associated with the `ack_ids` in the
  /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
  /// from the subscription.
  ///
  /// Acknowledging a message whose ack deadline has expired may succeed,
  /// but such a message may be redelivered later. Acknowledging a message more
  /// than once will not result in an error.
  ///
  /// - Parameters:
  ///   - request: Request to send to Acknowledge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func acknowledge(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/Acknowledge",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Pulls messages from the server. The server may return `UNAVAILABLE` if
  /// there are too many concurrent pull requests pending for the given
  /// subscription.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pull.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pull(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/Pull",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Establishes a stream with the server, which sends messages down to the
  /// client. The client streams acknowledgements and ack deadline modifications
  /// back to the server. The server will close the stream and return the status
  /// on any error. The server may close the stream with status `UNAVAILABLE` to
  /// reassign server-side resources, in which case, the client should
  /// re-establish the stream. Flow control can be achieved by configuring the
  /// underlying RPC channel.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamingPull(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Pubsub_V1_StreamingPullResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/google.pubsub.v1.Subscriber/StreamingPull",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Modifies the `PushConfig` for a specified subscription.
  ///
  /// This may be used to change a push subscription to a pull one (signified by
  /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
  /// attributes of a push subscription. Messages will accumulate for delivery
  /// continuously through the call regardless of changes to the `PushConfig`.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModifyPushConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func modifyPushConfig(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/ModifyPushConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the configuration details of a snapshot. Snapshots are used in
  /// <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
  /// operations, which allow you to manage message acknowledgments in bulk. That
  /// is, you can set the acknowledgment state of messages in an existing
  /// subscription to the state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSnapshot(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/GetSnapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the existing snapshots. Snapshots are used in [Seek](
  /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSnapshots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSnapshots(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/ListSnapshots",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a snapshot from the requested subscription. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  /// If the snapshot already exists, returns `ALREADY_EXISTS`.
  /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
  /// If the backlog in the subscription is too old -- and the resulting snapshot
  /// would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
  /// See also the `Snapshot.expire_time` field. If the name is not provided in
  /// the request, the server will assign a random
  /// name for this snapshot on the same project as the subscription, conforming
  /// to the [resource name format]
  /// (https://cloud.google.com/pubsub/docs/admin#resource_names). The
  /// generated name is populated in the returned Snapshot object. Note that for
  /// REST API requests, you must specify a name in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSnapshot(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/CreateSnapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing snapshot. Snapshots are used in
  /// <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
  /// operations, which allow
  /// you to manage message acknowledgments in bulk. That is, you can set the
  /// acknowledgment state of messages in an existing subscription to the state
  /// captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateSnapshot(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/UpdateSnapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Removes an existing snapshot. Snapshots are used in [Seek]
  /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  /// When the snapshot is deleted, all messages retained in the snapshot
  /// are immediately dropped. After a snapshot is deleted, a new one may be
  /// created with the same name, but the new one has no association with the old
  /// snapshot or its subscription, unless the same subscription is specified.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSnapshot(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/DeleteSnapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Seeks an existing subscription to a point in time or to a given snapshot,
  /// whichever is provided in the request. Snapshots are used in [Seek](
  /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot. Note that both the subscription and the
  /// snapshot must be on the same topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to Seek.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func seek(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse> {
    return self.makeUnaryCall(
      path: "/google.pubsub.v1.Subscriber/Seek",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Pubsub_V1_SubscriberClient: Google_Pubsub_V1_SubscriberClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.pubsub.v1.Subscriber service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Pubsub_V1_PublisherProvider: CallHandlerProvider {
  /// Creates the given topic with the given name. See the [resource name rules](
  /// https://cloud.google.com/pubsub/docs/admin#resource_names).
  func createTopic(request: Google_Pubsub_V1_Topic, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Topic>
  /// Updates an existing topic. Note that certain properties of a
  /// topic are not modifiable.
  func updateTopic(request: Google_Pubsub_V1_UpdateTopicRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Topic>
  /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
  /// does not exist.
  func publish(request: Google_Pubsub_V1_PublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_PublishResponse>
  /// Gets the configuration of a topic.
  func getTopic(request: Google_Pubsub_V1_GetTopicRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Topic>
  /// Lists matching topics.
  func listTopics(request: Google_Pubsub_V1_ListTopicsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_ListTopicsResponse>
  /// Lists the names of the attached subscriptions on this topic.
  func listTopicSubscriptions(request: Google_Pubsub_V1_ListTopicSubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_ListTopicSubscriptionsResponse>
  /// Lists the names of the snapshots on this topic. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  func listTopicSnapshots(request: Google_Pubsub_V1_ListTopicSnapshotsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_ListTopicSnapshotsResponse>
  /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
  /// does not exist. After a topic is deleted, a new topic may be created with
  /// the same name; this is an entirely new topic with none of the old
  /// configuration or subscriptions. Existing subscriptions to this topic are
  /// not deleted, but their `topic` field is set to `_deleted-topic_`.
  func deleteTopic(request: Google_Pubsub_V1_DeleteTopicRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Detaches a subscription from this topic. All messages retained in the
  /// subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
  /// will return FAILED_PRECONDITION. If the subscription is a push
  /// subscription, pushes to the endpoint will stop.
  func detachSubscription(request: Google_Pubsub_V1_DetachSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_DetachSubscriptionResponse>
}

extension Google_Pubsub_V1_PublisherProvider {
  public var serviceName: Substring { return "google.pubsub.v1.Publisher" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createTopic(request: request, context: context)
        }
      }

    case "UpdateTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateTopic(request: request, context: context)
        }
      }

    case "Publish":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.publish(request: request, context: context)
        }
      }

    case "GetTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTopic(request: request, context: context)
        }
      }

    case "ListTopics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTopics(request: request, context: context)
        }
      }

    case "ListTopicSubscriptions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTopicSubscriptions(request: request, context: context)
        }
      }

    case "ListTopicSnapshots":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTopicSnapshots(request: request, context: context)
        }
      }

    case "DeleteTopic":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteTopic(request: request, context: context)
        }
      }

    case "DetachSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.detachSubscription(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Pubsub_V1_SubscriberProvider: CallHandlerProvider {
  /// Creates a subscription to a given topic. See the [resource name rules]
  /// (https://cloud.google.com/pubsub/docs/admin#resource_names).
  /// If the subscription already exists, returns `ALREADY_EXISTS`.
  /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
  ///
  /// If the name is not provided in the request, the server will assign a random
  /// name for this subscription on the same project as the topic, conforming
  /// to the [resource name format]
  /// (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
  /// name is populated in the returned Subscription object. Note that for REST
  /// API requests, you must specify a name in the request.
  func createSubscription(request: Google_Pubsub_V1_Subscription, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Subscription>
  /// Gets the configuration details of a subscription.
  func getSubscription(request: Google_Pubsub_V1_GetSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Subscription>
  /// Updates an existing subscription. Note that certain properties of a
  /// subscription, such as its topic, are not modifiable.
  func updateSubscription(request: Google_Pubsub_V1_UpdateSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Subscription>
  /// Lists matching subscriptions.
  func listSubscriptions(request: Google_Pubsub_V1_ListSubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_ListSubscriptionsResponse>
  /// Deletes an existing subscription. All messages retained in the subscription
  /// are immediately dropped. Calls to `Pull` after deletion will return
  /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
  /// the same name, but the new one has no association with the old
  /// subscription or its topic unless the same topic is specified.
  func deleteSubscription(request: Google_Pubsub_V1_DeleteSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Modifies the ack deadline for a specific message. This method is useful
  /// to indicate that more time is needed to process a message by the
  /// subscriber, or to make the message available for redelivery if the
  /// processing was interrupted. Note that this does not modify the
  /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
  func modifyAckDeadline(request: Google_Pubsub_V1_ModifyAckDeadlineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Acknowledges the messages associated with the `ack_ids` in the
  /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
  /// from the subscription.
  ///
  /// Acknowledging a message whose ack deadline has expired may succeed,
  /// but such a message may be redelivered later. Acknowledging a message more
  /// than once will not result in an error.
  func acknowledge(request: Google_Pubsub_V1_AcknowledgeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Pulls messages from the server. The server may return `UNAVAILABLE` if
  /// there are too many concurrent pull requests pending for the given
  /// subscription.
  func pull(request: Google_Pubsub_V1_PullRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_PullResponse>
  /// Establishes a stream with the server, which sends messages down to the
  /// client. The client streams acknowledgements and ack deadline modifications
  /// back to the server. The server will close the stream and return the status
  /// on any error. The server may close the stream with status `UNAVAILABLE` to
  /// reassign server-side resources, in which case, the client should
  /// re-establish the stream. Flow control can be achieved by configuring the
  /// underlying RPC channel.
  func streamingPull(context: StreamingResponseCallContext<Google_Pubsub_V1_StreamingPullResponse>) -> EventLoopFuture<(StreamEvent<Google_Pubsub_V1_StreamingPullRequest>) -> Void>
  /// Modifies the `PushConfig` for a specified subscription.
  ///
  /// This may be used to change a push subscription to a pull one (signified by
  /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
  /// attributes of a push subscription. Messages will accumulate for delivery
  /// continuously through the call regardless of changes to the `PushConfig`.
  func modifyPushConfig(request: Google_Pubsub_V1_ModifyPushConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets the configuration details of a snapshot. Snapshots are used in
  /// <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
  /// operations, which allow you to manage message acknowledgments in bulk. That
  /// is, you can set the acknowledgment state of messages in an existing
  /// subscription to the state captured by a snapshot.
  func getSnapshot(request: Google_Pubsub_V1_GetSnapshotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Snapshot>
  /// Lists the existing snapshots. Snapshots are used in [Seek](
  /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  func listSnapshots(request: Google_Pubsub_V1_ListSnapshotsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_ListSnapshotsResponse>
  /// Creates a snapshot from the requested subscription. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  /// If the snapshot already exists, returns `ALREADY_EXISTS`.
  /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
  /// If the backlog in the subscription is too old -- and the resulting snapshot
  /// would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
  /// See also the `Snapshot.expire_time` field. If the name is not provided in
  /// the request, the server will assign a random
  /// name for this snapshot on the same project as the subscription, conforming
  /// to the [resource name format]
  /// (https://cloud.google.com/pubsub/docs/admin#resource_names). The
  /// generated name is populated in the returned Snapshot object. Note that for
  /// REST API requests, you must specify a name in the request.
  func createSnapshot(request: Google_Pubsub_V1_CreateSnapshotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Snapshot>
  /// Updates an existing snapshot. Snapshots are used in
  /// <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
  /// operations, which allow
  /// you to manage message acknowledgments in bulk. That is, you can set the
  /// acknowledgment state of messages in an existing subscription to the state
  /// captured by a snapshot.
  func updateSnapshot(request: Google_Pubsub_V1_UpdateSnapshotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_Snapshot>
  /// Removes an existing snapshot. Snapshots are used in [Seek]
  /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  /// When the snapshot is deleted, all messages retained in the snapshot
  /// are immediately dropped. After a snapshot is deleted, a new one may be
  /// created with the same name, but the new one has no association with the old
  /// snapshot or its subscription, unless the same subscription is specified.
  func deleteSnapshot(request: Google_Pubsub_V1_DeleteSnapshotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Seeks an existing subscription to a point in time or to a given snapshot,
  /// whichever is provided in the request. Snapshots are used in [Seek](
  /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot. Note that both the subscription and the
  /// snapshot must be on the same topic.
  func seek(request: Google_Pubsub_V1_SeekRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Pubsub_V1_SeekResponse>
}

extension Google_Pubsub_V1_SubscriberProvider {
  public var serviceName: Substring { return "google.pubsub.v1.Subscriber" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createSubscription(request: request, context: context)
        }
      }

    case "GetSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSubscription(request: request, context: context)
        }
      }

    case "UpdateSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateSubscription(request: request, context: context)
        }
      }

    case "ListSubscriptions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSubscriptions(request: request, context: context)
        }
      }

    case "DeleteSubscription":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSubscription(request: request, context: context)
        }
      }

    case "ModifyAckDeadline":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.modifyAckDeadline(request: request, context: context)
        }
      }

    case "Acknowledge":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.acknowledge(request: request, context: context)
        }
      }

    case "Pull":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pull(request: request, context: context)
        }
      }

    case "StreamingPull":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.streamingPull(context: context)
      }

    case "ModifyPushConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.modifyPushConfig(request: request, context: context)
        }
      }

    case "GetSnapshot":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSnapshot(request: request, context: context)
        }
      }

    case "ListSnapshots":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSnapshots(request: request, context: context)
        }
      }

    case "CreateSnapshot":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createSnapshot(request: request, context: context)
        }
      }

    case "UpdateSnapshot":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateSnapshot(request: request, context: context)
        }
      }

    case "DeleteSnapshot":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSnapshot(request: request, context: context)
        }
      }

    case "Seek":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.seek(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

