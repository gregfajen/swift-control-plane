//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/iam/v1beta/workload_identity_pool.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Iam_V1beta_WorkloadIdentityPoolsClient, then call methods of this protocol to make API calls.
public protocol Google_Iam_V1beta_WorkloadIdentityPoolsClientProtocol: GRPCClient {
  func listWorkloadIdentityPools(
    _ request: Google_Iam_V1beta_ListWorkloadIdentityPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_ListWorkloadIdentityPoolsRequest, Google_Iam_V1beta_ListWorkloadIdentityPoolsResponse>

  func getWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_GetWorkloadIdentityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_GetWorkloadIdentityPoolRequest, Google_Iam_V1beta_WorkloadIdentityPool>

  func createWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_CreateWorkloadIdentityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_CreateWorkloadIdentityPoolRequest, Google_Longrunning_Operation>

  func updateWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_UpdateWorkloadIdentityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_UpdateWorkloadIdentityPoolRequest, Google_Longrunning_Operation>

  func deleteWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_DeleteWorkloadIdentityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_DeleteWorkloadIdentityPoolRequest, Google_Longrunning_Operation>

  func undeleteWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_UndeleteWorkloadIdentityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_UndeleteWorkloadIdentityPoolRequest, Google_Longrunning_Operation>

  func listWorkloadIdentityPoolProviders(
    _ request: Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersRequest, Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersResponse>

  func getWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_GetWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_GetWorkloadIdentityPoolProviderRequest, Google_Iam_V1beta_WorkloadIdentityPoolProvider>

  func createWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_CreateWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_CreateWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation>

  func updateWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_UpdateWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_UpdateWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation>

  func deleteWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_DeleteWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_DeleteWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation>

  func undeleteWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_UndeleteWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1beta_UndeleteWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation>

}

extension Google_Iam_V1beta_WorkloadIdentityPoolsClientProtocol {

  /// Lists all non-deleted
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
  /// project. If `show_deleted` is set to `true`, then deleted pools are also
  /// listed.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWorkloadIdentityPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listWorkloadIdentityPools(
    _ request: Google_Iam_V1beta_ListWorkloadIdentityPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_ListWorkloadIdentityPoolsRequest, Google_Iam_V1beta_ListWorkloadIdentityPoolsResponse> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets an individual
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWorkloadIdentityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_GetWorkloadIdentityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_GetWorkloadIdentityPoolRequest, Google_Iam_V1beta_WorkloadIdentityPool> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// You cannot reuse the name of a deleted pool until 30 days after deletion.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWorkloadIdentityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_CreateWorkloadIdentityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_CreateWorkloadIdentityPoolRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWorkloadIdentityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_UpdateWorkloadIdentityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_UpdateWorkloadIdentityPoolRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// You cannot use a deleted pool to exchange external
  /// credentials for Google Cloud credentials. However, deletion does
  /// not revoke credentials that have already been issued.
  /// Credentials issued for a deleted pool do not grant access to resources.
  /// If the pool is undeleted, and the credentials are not expired, they
  /// grant access again.
  /// You can undelete a pool for 30 days. After 30 days, deletion is
  /// permanent.
  /// You cannot update deleted pools. However, you can view and list them.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWorkloadIdentityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_DeleteWorkloadIdentityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_DeleteWorkloadIdentityPoolRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
  /// as long as it was deleted fewer than 30 days ago.
  ///
  /// - Parameters:
  ///   - request: Request to send to UndeleteWorkloadIdentityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func undeleteWorkloadIdentityPool(
    _ request: Google_Iam_V1beta_UndeleteWorkloadIdentityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_UndeleteWorkloadIdentityPoolRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all non-deleted
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
  /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  /// If `show_deleted` is set to `true`, then deleted providers are also listed.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWorkloadIdentityPoolProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listWorkloadIdentityPoolProviders(
    _ request: Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersRequest, Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersResponse> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPoolProviders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets an individual
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWorkloadIdentityPoolProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_GetWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_GetWorkloadIdentityPoolProviderRequest, Google_Iam_V1beta_WorkloadIdentityPoolProvider> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPoolProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
  /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// You cannot reuse the name of a deleted provider until 30 days after
  /// deletion.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWorkloadIdentityPoolProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_CreateWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_CreateWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPoolProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWorkloadIdentityPoolProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_UpdateWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_UpdateWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPoolProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
  /// Deleting a provider does not revoke credentials that have already been
  /// issued; they continue to grant access.
  /// You can undelete a provider for 30 days. After 30 days, deletion is
  /// permanent.
  /// You cannot update deleted providers. However, you can view and list them.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWorkloadIdentityPoolProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_DeleteWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_DeleteWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPoolProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Undeletes a
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
  /// as long as it was deleted fewer than 30 days ago.
  ///
  /// - Parameters:
  ///   - request: Request to send to UndeleteWorkloadIdentityPoolProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func undeleteWorkloadIdentityPoolProvider(
    _ request: Google_Iam_V1beta_UndeleteWorkloadIdentityPoolProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1beta_UndeleteWorkloadIdentityPoolProviderRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPoolProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Iam_V1beta_WorkloadIdentityPoolsClient: Google_Iam_V1beta_WorkloadIdentityPoolsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.iam.v1beta.WorkloadIdentityPools service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Iam_V1beta_WorkloadIdentityPoolsProvider: CallHandlerProvider {
  /// Lists all non-deleted
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
  /// project. If `show_deleted` is set to `true`, then deleted pools are also
  /// listed.
  func listWorkloadIdentityPools(request: Google_Iam_V1beta_ListWorkloadIdentityPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1beta_ListWorkloadIdentityPoolsResponse>
  /// Gets an individual
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  func getWorkloadIdentityPool(request: Google_Iam_V1beta_GetWorkloadIdentityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1beta_WorkloadIdentityPool>
  /// Creates a new
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// You cannot reuse the name of a deleted pool until 30 days after deletion.
  func createWorkloadIdentityPool(request: Google_Iam_V1beta_CreateWorkloadIdentityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates an existing
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  func updateWorkloadIdentityPool(request: Google_Iam_V1beta_UpdateWorkloadIdentityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a
  /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// You cannot use a deleted pool to exchange external
  /// credentials for Google Cloud credentials. However, deletion does
  /// not revoke credentials that have already been issued.
  /// Credentials issued for a deleted pool do not grant access to resources.
  /// If the pool is undeleted, and the credentials are not expired, they
  /// grant access again.
  /// You can undelete a pool for 30 days. After 30 days, deletion is
  /// permanent.
  /// You cannot update deleted pools. However, you can view and list them.
  func deleteWorkloadIdentityPool(request: Google_Iam_V1beta_DeleteWorkloadIdentityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
  /// as long as it was deleted fewer than 30 days ago.
  func undeleteWorkloadIdentityPool(request: Google_Iam_V1beta_UndeleteWorkloadIdentityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Lists all non-deleted
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
  /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  /// If `show_deleted` is set to `true`, then deleted providers are also listed.
  func listWorkloadIdentityPoolProviders(request: Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1beta_ListWorkloadIdentityPoolProvidersResponse>
  /// Gets an individual
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
  func getWorkloadIdentityPoolProvider(request: Google_Iam_V1beta_GetWorkloadIdentityPoolProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1beta_WorkloadIdentityPoolProvider>
  /// Creates a new
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
  /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
  ///
  /// You cannot reuse the name of a deleted provider until 30 days after
  /// deletion.
  func createWorkloadIdentityPoolProvider(request: Google_Iam_V1beta_CreateWorkloadIdentityPoolProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates an existing
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
  func updateWorkloadIdentityPoolProvider(request: Google_Iam_V1beta_UpdateWorkloadIdentityPoolProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
  /// Deleting a provider does not revoke credentials that have already been
  /// issued; they continue to grant access.
  /// You can undelete a provider for 30 days. After 30 days, deletion is
  /// permanent.
  /// You cannot update deleted providers. However, you can view and list them.
  func deleteWorkloadIdentityPoolProvider(request: Google_Iam_V1beta_DeleteWorkloadIdentityPoolProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Undeletes a
  /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
  /// as long as it was deleted fewer than 30 days ago.
  func undeleteWorkloadIdentityPoolProvider(request: Google_Iam_V1beta_UndeleteWorkloadIdentityPoolProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Iam_V1beta_WorkloadIdentityPoolsProvider {
  public var serviceName: Substring { return "google.iam.v1beta.WorkloadIdentityPools" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListWorkloadIdentityPools":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listWorkloadIdentityPools(request: request, context: context)
        }
      }

    case "GetWorkloadIdentityPool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getWorkloadIdentityPool(request: request, context: context)
        }
      }

    case "CreateWorkloadIdentityPool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createWorkloadIdentityPool(request: request, context: context)
        }
      }

    case "UpdateWorkloadIdentityPool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateWorkloadIdentityPool(request: request, context: context)
        }
      }

    case "DeleteWorkloadIdentityPool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteWorkloadIdentityPool(request: request, context: context)
        }
      }

    case "UndeleteWorkloadIdentityPool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.undeleteWorkloadIdentityPool(request: request, context: context)
        }
      }

    case "ListWorkloadIdentityPoolProviders":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listWorkloadIdentityPoolProviders(request: request, context: context)
        }
      }

    case "GetWorkloadIdentityPoolProvider":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getWorkloadIdentityPoolProvider(request: request, context: context)
        }
      }

    case "CreateWorkloadIdentityPoolProvider":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createWorkloadIdentityPoolProvider(request: request, context: context)
        }
      }

    case "UpdateWorkloadIdentityPoolProvider":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateWorkloadIdentityPoolProvider(request: request, context: context)
        }
      }

    case "DeleteWorkloadIdentityPoolProvider":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteWorkloadIdentityPoolProvider(request: request, context: context)
        }
      }

    case "UndeleteWorkloadIdentityPoolProvider":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.undeleteWorkloadIdentityPoolProvider(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

