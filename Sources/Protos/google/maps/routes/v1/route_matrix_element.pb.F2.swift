// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/maps/routes/v1/route_matrix_element.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The condition of the route being returned.
public enum Google_Maps_Routes_V1_RouteMatrixElementCondition: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Not used.
  case unspecified // = 0

  /// A route was found, and the corresponding information was filled out for the
  /// element.
  case routeExists // = 1

  /// No route could be found. Fields containing route information, such as
  /// distance_meters or duration, will not be filled out in the element.
  case routeNotFound // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .routeExists
    case 2: self = .routeNotFound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .routeExists: return 1
    case .routeNotFound: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Maps_Routes_V1_RouteMatrixElementCondition: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Maps_Routes_V1_RouteMatrixElementCondition] = [
    .unspecified,
    .routeExists,
    .routeNotFound,
  ]
}

#endif  // swift(>=4.2)

/// Encapsulates route information computed for an origin/destination pair in the
/// ComputeRouteMatrix API. This proto can be streamed to the client.
public struct Google_Maps_Routes_V1_RouteMatrixElement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Zero-based index of the origin in the request.
  public var originIndex: Int32 = 0

  /// Zero-based index of the destination in the request.
  public var destinationIndex: Int32 = 0

  /// Error status code for this element.
  public var status: Google_Rpc_Status {
    get {return _status ?? Google_Rpc_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// Indicates whether the route was found or not. Independent of status.
  public var condition: Google_Maps_Routes_V1_RouteMatrixElementCondition = .unspecified

  /// The travel distance of the route, in meters.
  public var distanceMeters: Int32 = 0

  /// The length of time needed to navigate the route. If you set the
  /// `route_preference` to `TRAFFIC_UNAWARE`, then this value is the same as
  /// `static_duration`. If you set the `route_preference` to either
  /// `TRAFFIC_AWARE` or `TRAFFIC_AWARE_OPTIMAL`, then this value is calculated
  /// taking traffic conditions into account.
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  /// The duration of traveling through the route without taking traffic
  /// conditions into consideration.
  public var staticDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _staticDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_staticDuration = newValue}
  }
  /// Returns true if `staticDuration` has been explicitly set.
  public var hasStaticDuration: Bool {return self._staticDuration != nil}
  /// Clears the value of `staticDuration`. Subsequent reads from it will return its default value.
  public mutating func clearStaticDuration() {self._staticDuration = nil}

  /// Additional information about the route. For example: restriction
  /// information and toll information
  public var travelAdvisory: Google_Maps_Routes_V1_RouteTravelAdvisory {
    get {return _travelAdvisory ?? Google_Maps_Routes_V1_RouteTravelAdvisory()}
    set {_travelAdvisory = newValue}
  }
  /// Returns true if `travelAdvisory` has been explicitly set.
  public var hasTravelAdvisory: Bool {return self._travelAdvisory != nil}
  /// Clears the value of `travelAdvisory`. Subsequent reads from it will return its default value.
  public mutating func clearTravelAdvisory() {self._travelAdvisory = nil}

  /// In some cases when the server is not able to compute the route with the
  /// given preferences for this particular origin/destination pair, it may
  /// fall back to using a different mode of computation. When fallback mode is
  /// used, this field contains detailed information about the fallback response.
  /// Otherwise this field is unset.
  public var fallbackInfo: Google_Maps_Routes_V1_FallbackInfo {
    get {return _fallbackInfo ?? Google_Maps_Routes_V1_FallbackInfo()}
    set {_fallbackInfo = newValue}
  }
  /// Returns true if `fallbackInfo` has been explicitly set.
  public var hasFallbackInfo: Bool {return self._fallbackInfo != nil}
  /// Clears the value of `fallbackInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFallbackInfo() {self._fallbackInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Google_Rpc_Status? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _staticDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _travelAdvisory: Google_Maps_Routes_V1_RouteTravelAdvisory? = nil
  fileprivate var _fallbackInfo: Google_Maps_Routes_V1_FallbackInfo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.maps.routes.v1"

extension Google_Maps_Routes_V1_RouteMatrixElementCondition: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED"),
    1: .same(proto: "ROUTE_EXISTS"),
    2: .same(proto: "ROUTE_NOT_FOUND"),
  ]
}

extension Google_Maps_Routes_V1_RouteMatrixElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RouteMatrixElement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "origin_index"),
    2: .standard(proto: "destination_index"),
    3: .same(proto: "status"),
    9: .same(proto: "condition"),
    4: .standard(proto: "distance_meters"),
    5: .same(proto: "duration"),
    6: .standard(proto: "static_duration"),
    7: .standard(proto: "travel_advisory"),
    8: .standard(proto: "fallback_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.originIndex) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.destinationIndex) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.distanceMeters) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._staticDuration) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._travelAdvisory) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._fallbackInfo) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.condition) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.originIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.originIndex, fieldNumber: 1)
    }
    if self.destinationIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.destinationIndex, fieldNumber: 2)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.distanceMeters != 0 {
      try visitor.visitSingularInt32Field(value: self.distanceMeters, fieldNumber: 4)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._staticDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._travelAdvisory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._fallbackInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if self.condition != .unspecified {
      try visitor.visitSingularEnumField(value: self.condition, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Routes_V1_RouteMatrixElement, rhs: Google_Maps_Routes_V1_RouteMatrixElement) -> Bool {
    if lhs.originIndex != rhs.originIndex {return false}
    if lhs.destinationIndex != rhs.destinationIndex {return false}
    if lhs._status != rhs._status {return false}
    if lhs.condition != rhs.condition {return false}
    if lhs.distanceMeters != rhs.distanceMeters {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._staticDuration != rhs._staticDuration {return false}
    if lhs._travelAdvisory != rhs._travelAdvisory {return false}
    if lhs._fallbackInfo != rhs._fallbackInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
