// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/maps/routes/v1/compute_route_matrix_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ComputeRouteMatrix request message
public struct Google_Maps_Routes_V1_ComputeRouteMatrixRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Array of origins, which determines the rows of the response matrix.
  public var origins: [Google_Maps_Routes_V1_RouteMatrixOrigin] = []

  /// Required. Array of destinations, which determines the columns of the response matrix.
  public var destinations: [Google_Maps_Routes_V1_RouteMatrixDestination] = []

  /// Optional. Specifies the mode of transportation.
  public var travelMode: Google_Maps_Routes_V1_RouteTravelMode = .travelModeUnspecified

  /// Optional. Specifies how to compute the route. The server attempts to use the selected
  /// routing preference to compute the route. If the routing preference results
  /// in an error or an extra long latency, an error is returned. In the future,
  /// we might implement a fallback mechanism to use a different option when the
  /// preferred option does not give a valid result. You can specify this option
  /// only when the `travel_mode` is `DRIVE` or `TWO_WHEELER`, otherwise the
  /// request fails.
  public var routingPreference: Google_Maps_Routes_V1_RoutingPreference = .unspecified

  /// Optional. The departure time. If you don't set this value, this defaults to the time
  /// that you made the request. If you set this value to a time that has already
  /// occurred, the request fails.
  public var departureTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _departureTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_departureTime = newValue}
  }
  /// Returns true if `departureTime` has been explicitly set.
  public var hasDepartureTime: Bool {return self._departureTime != nil}
  /// Clears the value of `departureTime`. Subsequent reads from it will return its default value.
  public mutating func clearDepartureTime() {self._departureTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _departureTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A single origin for ComputeRouteMatrixRequest
public struct Google_Maps_Routes_V1_RouteMatrixOrigin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Origin waypoint
  public var waypoint: Google_Maps_Routes_V1_Waypoint {
    get {return _waypoint ?? Google_Maps_Routes_V1_Waypoint()}
    set {_waypoint = newValue}
  }
  /// Returns true if `waypoint` has been explicitly set.
  public var hasWaypoint: Bool {return self._waypoint != nil}
  /// Clears the value of `waypoint`. Subsequent reads from it will return its default value.
  public mutating func clearWaypoint() {self._waypoint = nil}

  /// Optional. Modifiers for every route that takes this as the origin
  public var routeModifiers: Google_Maps_Routes_V1_RouteModifiers {
    get {return _routeModifiers ?? Google_Maps_Routes_V1_RouteModifiers()}
    set {_routeModifiers = newValue}
  }
  /// Returns true if `routeModifiers` has been explicitly set.
  public var hasRouteModifiers: Bool {return self._routeModifiers != nil}
  /// Clears the value of `routeModifiers`. Subsequent reads from it will return its default value.
  public mutating func clearRouteModifiers() {self._routeModifiers = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _waypoint: Google_Maps_Routes_V1_Waypoint? = nil
  fileprivate var _routeModifiers: Google_Maps_Routes_V1_RouteModifiers? = nil
}

/// A single destination for ComputeRouteMatrixRequest
public struct Google_Maps_Routes_V1_RouteMatrixDestination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Destination waypoint
  public var waypoint: Google_Maps_Routes_V1_Waypoint {
    get {return _waypoint ?? Google_Maps_Routes_V1_Waypoint()}
    set {_waypoint = newValue}
  }
  /// Returns true if `waypoint` has been explicitly set.
  public var hasWaypoint: Bool {return self._waypoint != nil}
  /// Clears the value of `waypoint`. Subsequent reads from it will return its default value.
  public mutating func clearWaypoint() {self._waypoint = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _waypoint: Google_Maps_Routes_V1_Waypoint? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.maps.routes.v1"

extension Google_Maps_Routes_V1_ComputeRouteMatrixRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputeRouteMatrixRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origins"),
    2: .same(proto: "destinations"),
    3: .standard(proto: "travel_mode"),
    4: .standard(proto: "routing_preference"),
    5: .standard(proto: "departure_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.origins) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.destinations) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.travelMode) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.routingPreference) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._departureTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.origins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.origins, fieldNumber: 1)
    }
    if !self.destinations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.destinations, fieldNumber: 2)
    }
    if self.travelMode != .travelModeUnspecified {
      try visitor.visitSingularEnumField(value: self.travelMode, fieldNumber: 3)
    }
    if self.routingPreference != .unspecified {
      try visitor.visitSingularEnumField(value: self.routingPreference, fieldNumber: 4)
    }
    if let v = self._departureTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Routes_V1_ComputeRouteMatrixRequest, rhs: Google_Maps_Routes_V1_ComputeRouteMatrixRequest) -> Bool {
    if lhs.origins != rhs.origins {return false}
    if lhs.destinations != rhs.destinations {return false}
    if lhs.travelMode != rhs.travelMode {return false}
    if lhs.routingPreference != rhs.routingPreference {return false}
    if lhs._departureTime != rhs._departureTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Routes_V1_RouteMatrixOrigin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RouteMatrixOrigin"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "waypoint"),
    2: .standard(proto: "route_modifiers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._waypoint) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._routeModifiers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._waypoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._routeModifiers {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Routes_V1_RouteMatrixOrigin, rhs: Google_Maps_Routes_V1_RouteMatrixOrigin) -> Bool {
    if lhs._waypoint != rhs._waypoint {return false}
    if lhs._routeModifiers != rhs._routeModifiers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Routes_V1_RouteMatrixDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RouteMatrixDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "waypoint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._waypoint) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._waypoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Routes_V1_RouteMatrixDestination, rhs: Google_Maps_Routes_V1_RouteMatrixDestination) -> Bool {
    if lhs._waypoint != rhs._waypoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
