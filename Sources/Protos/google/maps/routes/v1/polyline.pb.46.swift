// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/maps/routes/v1/polyline.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A set of values that specify the quality of the polyline.
public enum Google_Maps_Routes_V1_PolylineQuality: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No polyline quality preference specified. Defaults to `OVERVIEW`.
  case unspecified // = 0

  /// Specifies a high-quality polyline - which is composed using more points
  /// than `OVERVIEW`, at the cost of increased response size. Use this value
  /// when you need more precision.
  case highQuality // = 1

  /// Specifies an overview polyline - which is composed using a small number of
  /// points. Use this value when displaying an overview of the route. Using this
  /// option has a lower request latency compared to using the
  /// `HIGH_QUALITY` option.
  case overview // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .highQuality
    case 2: self = .overview
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .highQuality: return 1
    case .overview: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Maps_Routes_V1_PolylineQuality: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Maps_Routes_V1_PolylineQuality] = [
    .unspecified,
    .highQuality,
    .overview,
  ]
}

#endif  // swift(>=4.2)

/// Encapsulates an encoded polyline.
public struct Google_Maps_Routes_V1_Polyline {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encapsulates the type of polyline. Defaults to encoded_polyline.
  public var polylineType: Google_Maps_Routes_V1_Polyline.OneOf_PolylineType? = nil

  /// The string encoding of the polyline using the [polyline encoding
  /// algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
  public var encodedPolyline: String {
    get {
      if case .encodedPolyline(let v)? = polylineType {return v}
      return String()
    }
    set {polylineType = .encodedPolyline(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Encapsulates the type of polyline. Defaults to encoded_polyline.
  public enum OneOf_PolylineType: Equatable {
    /// The string encoding of the polyline using the [polyline encoding
    /// algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
    case encodedPolyline(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Maps_Routes_V1_Polyline.OneOf_PolylineType, rhs: Google_Maps_Routes_V1_Polyline.OneOf_PolylineType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.encodedPolyline, .encodedPolyline): return {
        guard case .encodedPolyline(let l) = lhs, case .encodedPolyline(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.maps.routes.v1"

extension Google_Maps_Routes_V1_PolylineQuality: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POLYLINE_QUALITY_UNSPECIFIED"),
    1: .same(proto: "HIGH_QUALITY"),
    2: .same(proto: "OVERVIEW"),
  ]
}

extension Google_Maps_Routes_V1_Polyline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Polyline"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encoded_polyline"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.polylineType != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.polylineType = .encodedPolyline(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .encodedPolyline(let v)? = self.polylineType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Routes_V1_Polyline, rhs: Google_Maps_Routes_V1_Polyline) -> Bool {
    if lhs.polylineType != rhs.polylineType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
