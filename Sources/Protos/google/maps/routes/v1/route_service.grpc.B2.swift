//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/maps/routes/v1/route_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Maps_Routes_V1_RoutesPreferredClient, then call methods of this protocol to make API calls.
public protocol Google_Maps_Routes_V1_RoutesPreferredClientProtocol: GRPCClient {
  func computeRoutes(
    _ request: Google_Maps_Routes_V1_ComputeRoutesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Maps_Routes_V1_ComputeRoutesRequest, Google_Maps_Routes_V1_ComputeRoutesResponse>

}

extension Google_Maps_Routes_V1_RoutesPreferredClientProtocol {

  /// Returns the primary route along with optional alternate routes, given a set
  /// of terminal and intermediate waypoints.
  ///
  /// **NOTE:** This method requires that you specify a response field mask in
  /// the input. You can provide the response field mask by using URL parameter
  /// `$fields` or `fields`, or by using an HTTP/gRPC header `X-Goog-FieldMask`
  /// (see the [available URL parameters and
  /// headers](https://cloud.google.com/apis/docs/system-parameters). The value
  /// is a comma separated list of field paths. See detailed documentation about
  /// [how to construct the field
  /// paths](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto).
  ///
  /// For example, in this method:
  ///
  /// * Field mask of all available fields (for manual inspection):
  ///   `X-Goog-FieldMask: *`
  /// * Field mask of Route-level duration, distance, and polyline (an example
  /// production setup):
  ///   `X-Goog-FieldMask:
  ///   routes.duration,routes.distanceMeters,routes.polyline.encodedPolyline`
  ///
  /// Google discourage the use of the wildcard (`*`) response field mask, or
  /// specifying the field mask at the top level (`routes`), because:
  ///
  /// * Selecting only the fields that you need helps our server save computation
  /// cycles, allowing us to return the result to you with a lower latency.
  /// * Selecting only the fields that you need
  /// in your production job ensures stable latency performance. We might add
  /// more response fields in the future, and those new fields might require
  /// extra computation time. If you select all fields, or if you select all
  /// fields at the top level, then you might experience performance degradation
  /// because any new field we add will be automatically included in the
  /// response.
  /// * Selecting only the fields that you need results in a smaller response
  /// size, and thus higher network throughput.
  ///
  /// - Parameters:
  ///   - request: Request to send to ComputeRoutes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func computeRoutes(
    _ request: Google_Maps_Routes_V1_ComputeRoutesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Maps_Routes_V1_ComputeRoutesRequest, Google_Maps_Routes_V1_ComputeRoutesResponse> {
    return self.makeUnaryCall(
      path: "/google.maps.routes.v1.RoutesPreferred/ComputeRoutes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Maps_Routes_V1_RoutesPreferredClient: Google_Maps_Routes_V1_RoutesPreferredClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.maps.routes.v1.RoutesPreferred service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Maps_Routes_V1_RoutesPreferredProvider: CallHandlerProvider {
  /// Returns the primary route along with optional alternate routes, given a set
  /// of terminal and intermediate waypoints.
  ///
  /// **NOTE:** This method requires that you specify a response field mask in
  /// the input. You can provide the response field mask by using URL parameter
  /// `$fields` or `fields`, or by using an HTTP/gRPC header `X-Goog-FieldMask`
  /// (see the [available URL parameters and
  /// headers](https://cloud.google.com/apis/docs/system-parameters). The value
  /// is a comma separated list of field paths. See detailed documentation about
  /// [how to construct the field
  /// paths](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto).
  ///
  /// For example, in this method:
  ///
  /// * Field mask of all available fields (for manual inspection):
  ///   `X-Goog-FieldMask: *`
  /// * Field mask of Route-level duration, distance, and polyline (an example
  /// production setup):
  ///   `X-Goog-FieldMask:
  ///   routes.duration,routes.distanceMeters,routes.polyline.encodedPolyline`
  ///
  /// Google discourage the use of the wildcard (`*`) response field mask, or
  /// specifying the field mask at the top level (`routes`), because:
  ///
  /// * Selecting only the fields that you need helps our server save computation
  /// cycles, allowing us to return the result to you with a lower latency.
  /// * Selecting only the fields that you need
  /// in your production job ensures stable latency performance. We might add
  /// more response fields in the future, and those new fields might require
  /// extra computation time. If you select all fields, or if you select all
  /// fields at the top level, then you might experience performance degradation
  /// because any new field we add will be automatically included in the
  /// response.
  /// * Selecting only the fields that you need results in a smaller response
  /// size, and thus higher network throughput.
  func computeRoutes(request: Google_Maps_Routes_V1_ComputeRoutesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Maps_Routes_V1_ComputeRoutesResponse>
}

extension Google_Maps_Routes_V1_RoutesPreferredProvider {
  public var serviceName: Substring { return "google.maps.routes.v1.RoutesPreferred" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ComputeRoutes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.computeRoutes(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

