// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/maps/routes/v1/fallback_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Reasons for using fallback response.
public enum Google_Maps_Routes_V1_FallbackReason: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No fallback reason specified.
  case unspecified // = 0

  /// A server error happened while calculating routes with your preferred
  /// routing mode, but we were able to return a result calculated by an
  /// alternative mode.
  case serverError // = 1

  /// We were not able to finish the calculation with your preferred routing mode
  /// on time, but we were able to return a result calculated by an alternative
  /// mode.
  case latencyExceeded // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .serverError
    case 2: self = .latencyExceeded
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .serverError: return 1
    case .latencyExceeded: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Maps_Routes_V1_FallbackReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Maps_Routes_V1_FallbackReason] = [
    .unspecified,
    .serverError,
    .latencyExceeded,
  ]
}

#endif  // swift(>=4.2)

/// Actual routing mode used for returned fallback response.
public enum Google_Maps_Routes_V1_FallbackRoutingMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Not used.
  case unspecified // = 0

  /// Indicates the "TRAFFIC_UNAWARE" routing mode was used to compute the
  /// response.
  case fallbackTrafficUnaware // = 1

  /// Indicates the "TRAFFIC_AWARE" routing mode was used to compute the
  /// response.
  case fallbackTrafficAware // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .fallbackTrafficUnaware
    case 2: self = .fallbackTrafficAware
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .fallbackTrafficUnaware: return 1
    case .fallbackTrafficAware: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Maps_Routes_V1_FallbackRoutingMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Maps_Routes_V1_FallbackRoutingMode] = [
    .unspecified,
    .fallbackTrafficUnaware,
    .fallbackTrafficAware,
  ]
}

#endif  // swift(>=4.2)

/// Information related to how and why a fallback result was used. If this field
/// is set, then it means the server used a different routing mode from your
/// preferred mode as fallback.
public struct Google_Maps_Routes_V1_FallbackInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Routing mode used for the response. If fallback was triggered, the mode
  /// may be different from routing preference set in the original client
  /// request.
  public var routingMode: Google_Maps_Routes_V1_FallbackRoutingMode = .unspecified

  /// The reason why fallback response was used instead of the original response.
  /// This field is only populated when the fallback mode is triggered and the
  /// fallback response is returned.
  public var reason: Google_Maps_Routes_V1_FallbackReason = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.maps.routes.v1"

extension Google_Maps_Routes_V1_FallbackReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FALLBACK_REASON_UNSPECIFIED"),
    1: .same(proto: "SERVER_ERROR"),
    2: .same(proto: "LATENCY_EXCEEDED"),
  ]
}

extension Google_Maps_Routes_V1_FallbackRoutingMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FALLBACK_ROUTING_MODE_UNSPECIFIED"),
    1: .same(proto: "FALLBACK_TRAFFIC_UNAWARE"),
    2: .same(proto: "FALLBACK_TRAFFIC_AWARE"),
  ]
}

extension Google_Maps_Routes_V1_FallbackInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FallbackInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "routing_mode"),
    2: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.routingMode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.routingMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.routingMode, fieldNumber: 1)
    }
    if self.reason != .unspecified {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Routes_V1_FallbackInfo, rhs: Google_Maps_Routes_V1_FallbackInfo) -> Bool {
    if lhs.routingMode != rhs.routingMode {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
