// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/maps/unity/clientinfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Client information.
public struct Google_Maps_Unity_ClientInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Application ID, such as the package name on Android and the bundle
  /// identifier on iOS platforms.
  public var applicationID: String = String()

  /// Application version number, such as "1.2.3". The exact format is
  /// application-dependent.
  public var applicationVersion: String = String()

  /// Platform where the application is running.
  public var platform: Google_Maps_Unity_ClientInfo.Platform = .unspecified

  /// Operating system name and version as reported by the OS. For example,
  /// "Mac OS X 10.10.4". The exact format is platform-dependent.
  public var operatingSystem: String = String()

  /// API client name and version. For example, the SDK calling the API. The
  /// exact format is up to the client.
  public var apiClient: String = String()

  /// Device model as reported by the device. The exact format is
  /// platform-dependent.
  public var deviceModel: String = String()

  /// Language code (in BCP-47 format) indicating the UI language of the client.
  /// Examples are "en", "en-US" or "ja-Latn". For more information, see
  /// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
  public var languageCode: String = String()

  /// Build number/version of the operating system. e.g., the contents of
  /// android.os.Build.ID in Android, or the contents of sysctl "kern.osversion"
  /// in iOS.
  public var operatingSystemBuild: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Platform enum.
  public enum Platform: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified or unknown OS.
    case unspecified // = 0

    /// Development environment.
    case editor // = 1

    /// macOS.
    case macOs // = 2

    /// Windows.
    case windows // = 3

    /// Linux
    case linux // = 4

    /// Android
    case android // = 5

    /// iOS
    case ios // = 6

    /// WebGL.
    case webGl // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .editor
      case 2: self = .macOs
      case 3: self = .windows
      case 4: self = .linux
      case 5: self = .android
      case 6: self = .ios
      case 7: self = .webGl
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .editor: return 1
      case .macOs: return 2
      case .windows: return 3
      case .linux: return 4
      case .android: return 5
      case .ios: return 6
      case .webGl: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Maps_Unity_ClientInfo.Platform: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Maps_Unity_ClientInfo.Platform] = [
    .unspecified,
    .editor,
    .macOs,
    .windows,
    .linux,
    .android,
    .ios,
    .webGl,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.maps.unity"

extension Google_Maps_Unity_ClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "application_id"),
    2: .standard(proto: "application_version"),
    3: .same(proto: "platform"),
    4: .standard(proto: "operating_system"),
    5: .standard(proto: "api_client"),
    6: .standard(proto: "device_model"),
    7: .standard(proto: "language_code"),
    8: .standard(proto: "operating_system_build"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.applicationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.applicationVersion) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.operatingSystem) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.apiClient) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.deviceModel) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.operatingSystemBuild) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.applicationID.isEmpty {
      try visitor.visitSingularStringField(value: self.applicationID, fieldNumber: 1)
    }
    if !self.applicationVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.applicationVersion, fieldNumber: 2)
    }
    if self.platform != .unspecified {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 3)
    }
    if !self.operatingSystem.isEmpty {
      try visitor.visitSingularStringField(value: self.operatingSystem, fieldNumber: 4)
    }
    if !self.apiClient.isEmpty {
      try visitor.visitSingularStringField(value: self.apiClient, fieldNumber: 5)
    }
    if !self.deviceModel.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModel, fieldNumber: 6)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 7)
    }
    if !self.operatingSystemBuild.isEmpty {
      try visitor.visitSingularStringField(value: self.operatingSystemBuild, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Unity_ClientInfo, rhs: Google_Maps_Unity_ClientInfo) -> Bool {
    if lhs.applicationID != rhs.applicationID {return false}
    if lhs.applicationVersion != rhs.applicationVersion {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.operatingSystem != rhs.operatingSystem {return false}
    if lhs.apiClient != rhs.apiClient {return false}
    if lhs.deviceModel != rhs.deviceModel {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.operatingSystemBuild != rhs.operatingSystemBuild {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Unity_ClientInfo.Platform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLATFORM_UNSPECIFIED"),
    1: .same(proto: "EDITOR"),
    2: .same(proto: "MAC_OS"),
    3: .same(proto: "WINDOWS"),
    4: .same(proto: "LINUX"),
    5: .same(proto: "ANDROID"),
    6: .same(proto: "IOS"),
    7: .same(proto: "WEB_GL"),
  ]
}
