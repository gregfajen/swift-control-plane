//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/maps/playablelocations/v3/playablelocations.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Maps_Playablelocations_V3_PlayableLocationsClient, then call methods of this protocol to make API calls.
public protocol Google_Maps_Playablelocations_V3_PlayableLocationsClientProtocol: GRPCClient {
  func samplePlayableLocations(
    _ request: Google_Maps_Playablelocations_V3_SamplePlayableLocationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Maps_Playablelocations_V3_SamplePlayableLocationsRequest, Google_Maps_Playablelocations_V3_SamplePlayableLocationsResponse>

  func logPlayerReports(
    _ request: Google_Maps_Playablelocations_V3_LogPlayerReportsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Maps_Playablelocations_V3_LogPlayerReportsRequest, Google_Maps_Playablelocations_V3_LogPlayerReportsResponse>

  func logImpressions(
    _ request: Google_Maps_Playablelocations_V3_LogImpressionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Maps_Playablelocations_V3_LogImpressionsRequest, Google_Maps_Playablelocations_V3_LogImpressionsResponse>

}

extension Google_Maps_Playablelocations_V3_PlayableLocationsClientProtocol {

  /// Returns a set of playable locations that lie within a specified area,
  /// that satisfy optional filter criteria.
  ///
  /// Note: Identical `SamplePlayableLocations` requests can return different
  /// results as the state of the world changes over time.
  ///
  /// - Parameters:
  ///   - request: Request to send to SamplePlayableLocations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func samplePlayableLocations(
    _ request: Google_Maps_Playablelocations_V3_SamplePlayableLocationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Maps_Playablelocations_V3_SamplePlayableLocationsRequest, Google_Maps_Playablelocations_V3_SamplePlayableLocationsResponse> {
    return self.makeUnaryCall(
      path: "/google.maps.playablelocations.v3.PlayableLocations/SamplePlayableLocations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Logs bad playable location reports submitted by players.
  ///
  /// Reports are not partially saved; either all reports are saved and this
  /// request succeeds, or no reports are saved, and this request fails.
  ///
  /// - Parameters:
  ///   - request: Request to send to LogPlayerReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logPlayerReports(
    _ request: Google_Maps_Playablelocations_V3_LogPlayerReportsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Maps_Playablelocations_V3_LogPlayerReportsRequest, Google_Maps_Playablelocations_V3_LogPlayerReportsResponse> {
    return self.makeUnaryCall(
      path: "/google.maps.playablelocations.v3.PlayableLocations/LogPlayerReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Logs new events when playable locations are displayed, and when they are
  /// interacted with.
  ///
  /// Impressions are not partially saved; either all impressions are saved and
  /// this request succeeds, or no impressions are saved, and this request fails.
  ///
  /// - Parameters:
  ///   - request: Request to send to LogImpressions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logImpressions(
    _ request: Google_Maps_Playablelocations_V3_LogImpressionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Maps_Playablelocations_V3_LogImpressionsRequest, Google_Maps_Playablelocations_V3_LogImpressionsResponse> {
    return self.makeUnaryCall(
      path: "/google.maps.playablelocations.v3.PlayableLocations/LogImpressions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Maps_Playablelocations_V3_PlayableLocationsClient: Google_Maps_Playablelocations_V3_PlayableLocationsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.maps.playablelocations.v3.PlayableLocations service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Maps_Playablelocations_V3_PlayableLocationsProvider: CallHandlerProvider {
  /// Returns a set of playable locations that lie within a specified area,
  /// that satisfy optional filter criteria.
  ///
  /// Note: Identical `SamplePlayableLocations` requests can return different
  /// results as the state of the world changes over time.
  func samplePlayableLocations(request: Google_Maps_Playablelocations_V3_SamplePlayableLocationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Maps_Playablelocations_V3_SamplePlayableLocationsResponse>
  /// Logs bad playable location reports submitted by players.
  ///
  /// Reports are not partially saved; either all reports are saved and this
  /// request succeeds, or no reports are saved, and this request fails.
  func logPlayerReports(request: Google_Maps_Playablelocations_V3_LogPlayerReportsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Maps_Playablelocations_V3_LogPlayerReportsResponse>
  /// Logs new events when playable locations are displayed, and when they are
  /// interacted with.
  ///
  /// Impressions are not partially saved; either all impressions are saved and
  /// this request succeeds, or no impressions are saved, and this request fails.
  func logImpressions(request: Google_Maps_Playablelocations_V3_LogImpressionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Maps_Playablelocations_V3_LogImpressionsResponse>
}

extension Google_Maps_Playablelocations_V3_PlayableLocationsProvider {
  public var serviceName: Substring { return "google.maps.playablelocations.v3.PlayableLocations" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SamplePlayableLocations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.samplePlayableLocations(request: request, context: context)
        }
      }

    case "LogPlayerReports":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.logPlayerReports(request: request, context: context)
        }
      }

    case "LogImpressions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.logImpressions(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

