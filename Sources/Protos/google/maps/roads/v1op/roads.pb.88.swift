// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/maps/roads/v1op/roads.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An enum representing the mode of travel used for snapping.
public enum Google_Maps_Roads_V1op_TravelMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case driving // = 1
  case cycling // = 2
  case walking // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .driving
    case 2: self = .cycling
    case 3: self = .walking
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .driving: return 1
    case .cycling: return 2
    case .walking: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Maps_Roads_V1op_TravelMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Maps_Roads_V1op_TravelMode] = [
    .unspecified,
    .driving,
    .cycling,
    .walking,
  ]
}

#endif  // swift(>=4.2)

/// A request to the SnapToRoads method, requesting that a sequence of points be
/// snapped to road segments.
public struct Google_Maps_Roads_V1op_SnapToRoadsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path to be snapped as a series of lat, lng points. Specified as
  /// a string of the format: lat,lng|lat,lng|...
  public var path: String = String()

  /// Whether to interpolate the points to return full road geometry.
  public var interpolate: Bool = false

  /// The asset ID of the asset to which this path relates. This is used for
  /// abuse detection purposes for clients with asset-based SKUs.
  public var assetID: String = String()

  /// The type of travel being tracked. This will constrain the paths we snap to.
  public var travelMode: Google_Maps_Roads_V1op_TravelMode = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A snapped point object, representing the result of snapping.
public struct Google_Maps_Roads_V1op_SnappedPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The lat,lng of the snapped location.
  public var location: Google_Type_LatLng {
    get {return _location ?? Google_Type_LatLng()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  /// The index into the original path of the equivalent pre-snapped point.
  /// This allows for identification of points which have been interpolated if
  /// this index is missing.
  public var originalIndex: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _originalIndex ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_originalIndex = newValue}
  }
  /// Returns true if `originalIndex` has been explicitly set.
  public var hasOriginalIndex: Bool {return self._originalIndex != nil}
  /// Clears the value of `originalIndex`. Subsequent reads from it will return its default value.
  public mutating func clearOriginalIndex() {self._originalIndex = nil}

  /// The place ID for this snapped location (road segment). These are the same
  /// as are currently used by the Places API.
  public var placeID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _location: Google_Type_LatLng? = nil
  fileprivate var _originalIndex: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

/// The response from the SnapToRoads method, returning a sequence of snapped
/// points.
public struct Google_Maps_Roads_V1op_SnapToRoadsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of snapped points.
  public var snappedPoints: [Google_Maps_Roads_V1op_SnappedPoint] = []

  /// User-visible warning message, if any, which can be shown alongside a valid
  /// result.
  public var warningMessage: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to the ListNearestRoads method, requesting that a sequence of
/// points be snapped individually to the road segment that each is closest to.
public struct Google_Maps_Roads_V1op_ListNearestRoadsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The points to be snapped as a series of lat, lng points. Specified as
  /// a string of the format: lat,lng|lat,lng|...
  public var points: String = String()

  /// The type of travel being tracked. This will constrain the roads we snap to.
  public var travelMode: Google_Maps_Roads_V1op_TravelMode = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response from the ListNearestRoads method, returning a list of snapped
/// points.
public struct Google_Maps_Roads_V1op_ListNearestRoadsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of snapped points.
  public var snappedPoints: [Google_Maps_Roads_V1op_SnappedPoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.maps.roads.v1op"

extension Google_Maps_Roads_V1op_TravelMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRAVEL_MODE_UNSPECIFIED"),
    1: .same(proto: "DRIVING"),
    2: .same(proto: "CYCLING"),
    3: .same(proto: "WALKING"),
  ]
}

extension Google_Maps_Roads_V1op_SnapToRoadsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapToRoadsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "interpolate"),
    3: .standard(proto: "asset_id"),
    4: .standard(proto: "travel_mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.interpolate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.assetID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.travelMode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if self.interpolate != false {
      try visitor.visitSingularBoolField(value: self.interpolate, fieldNumber: 2)
    }
    if !self.assetID.isEmpty {
      try visitor.visitSingularStringField(value: self.assetID, fieldNumber: 3)
    }
    if self.travelMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.travelMode, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Roads_V1op_SnapToRoadsRequest, rhs: Google_Maps_Roads_V1op_SnapToRoadsRequest) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.interpolate != rhs.interpolate {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.travelMode != rhs.travelMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Roads_V1op_SnappedPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnappedPoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .standard(proto: "original_index"),
    3: .standard(proto: "place_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._originalIndex) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.placeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._originalIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.placeID.isEmpty {
      try visitor.visitSingularStringField(value: self.placeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Roads_V1op_SnappedPoint, rhs: Google_Maps_Roads_V1op_SnappedPoint) -> Bool {
    if lhs._location != rhs._location {return false}
    if lhs._originalIndex != rhs._originalIndex {return false}
    if lhs.placeID != rhs.placeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Roads_V1op_SnapToRoadsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapToRoadsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "snapped_points"),
    2: .standard(proto: "warning_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.snappedPoints) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.warningMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.snappedPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.snappedPoints, fieldNumber: 1)
    }
    if !self.warningMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.warningMessage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Roads_V1op_SnapToRoadsResponse, rhs: Google_Maps_Roads_V1op_SnapToRoadsResponse) -> Bool {
    if lhs.snappedPoints != rhs.snappedPoints {return false}
    if lhs.warningMessage != rhs.warningMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Roads_V1op_ListNearestRoadsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListNearestRoadsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
    2: .standard(proto: "travel_mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.points) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.travelMode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.points.isEmpty {
      try visitor.visitSingularStringField(value: self.points, fieldNumber: 1)
    }
    if self.travelMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.travelMode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Roads_V1op_ListNearestRoadsRequest, rhs: Google_Maps_Roads_V1op_ListNearestRoadsRequest) -> Bool {
    if lhs.points != rhs.points {return false}
    if lhs.travelMode != rhs.travelMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Maps_Roads_V1op_ListNearestRoadsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListNearestRoadsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "snapped_points"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.snappedPoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.snappedPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.snappedPoints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Maps_Roads_V1op_ListNearestRoadsResponse, rhs: Google_Maps_Roads_V1op_ListNearestRoadsResponse) -> Bool {
    if lhs.snappedPoints != rhs.snappedPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
