// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/analytics/admin/v1alpha/resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Maximum access settings that Firebase user receive on the linked Analytics
/// property.
public enum Google_Analytics_Admin_V1alpha_MaximumUserAccess: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified maximum user access.
  case unspecified // = 0

  /// Firebase users have no access to the Analytics property.
  case noAccess // = 1

  /// Firebase users have Read & Analyze access to the Analytics property.
  case readAndAnalyze // = 2

  /// Firebase users have edit access to the Analytics property, but may not
  /// manage the Firebase link.
  case editorWithoutLinkManagement // = 3

  /// Firebase users have edit access to the Analytics property and may manage
  /// the Firebase link.
  case editorIncludingLinkManagement // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .noAccess
    case 2: self = .readAndAnalyze
    case 3: self = .editorWithoutLinkManagement
    case 4: self = .editorIncludingLinkManagement
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .noAccess: return 1
    case .readAndAnalyze: return 2
    case .editorWithoutLinkManagement: return 3
    case .editorIncludingLinkManagement: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Analytics_Admin_V1alpha_MaximumUserAccess: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Analytics_Admin_V1alpha_MaximumUserAccess] = [
    .unspecified,
    .noAccess,
    .readAndAnalyze,
    .editorWithoutLinkManagement,
    .editorIncludingLinkManagement,
  ]
}

#endif  // swift(>=4.2)

/// The category selected for this property, used for industry benchmarking.
public enum Google_Analytics_Admin_V1alpha_IndustryCategory: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Industry category unspecified
  case unspecified // = 0

  /// Automotive
  case automotive // = 1

  /// Business and industrial markets
  case businessAndIndustrialMarkets // = 2

  /// Finance
  case finance // = 3

  /// Healthcare
  case healthcare // = 4

  /// Technology
  case technology // = 5

  /// Travel
  case travel // = 6

  /// Other
  case other // = 7

  /// Arts and entertainment
  case artsAndEntertainment // = 8

  /// Beauty and fitness
  case beautyAndFitness // = 9

  /// Books and literature
  case booksAndLiterature // = 10

  /// Food and drink
  case foodAndDrink // = 11

  /// Games
  case games // = 12

  /// Hobbies and leisure
  case hobbiesAndLeisure // = 13

  /// Home and garden
  case homeAndGarden // = 14

  /// Internet and telecom
  case internetAndTelecom // = 15

  /// Law and government
  case lawAndGovernment // = 16

  /// News
  case news // = 17

  /// Online communities
  case onlineCommunities // = 18

  /// People and society
  case peopleAndSociety // = 19

  /// Pets and animals
  case petsAndAnimals // = 20

  /// Real estate
  case realEstate // = 21

  /// Reference
  case reference // = 22

  /// Science
  case science // = 23

  /// Sports
  case sports // = 24

  /// Jobs and education
  case jobsAndEducation // = 25

  /// Shopping
  case shopping // = 26
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .automotive
    case 2: self = .businessAndIndustrialMarkets
    case 3: self = .finance
    case 4: self = .healthcare
    case 5: self = .technology
    case 6: self = .travel
    case 7: self = .other
    case 8: self = .artsAndEntertainment
    case 9: self = .beautyAndFitness
    case 10: self = .booksAndLiterature
    case 11: self = .foodAndDrink
    case 12: self = .games
    case 13: self = .hobbiesAndLeisure
    case 14: self = .homeAndGarden
    case 15: self = .internetAndTelecom
    case 16: self = .lawAndGovernment
    case 17: self = .news
    case 18: self = .onlineCommunities
    case 19: self = .peopleAndSociety
    case 20: self = .petsAndAnimals
    case 21: self = .realEstate
    case 22: self = .reference
    case 23: self = .science
    case 24: self = .sports
    case 25: self = .jobsAndEducation
    case 26: self = .shopping
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .automotive: return 1
    case .businessAndIndustrialMarkets: return 2
    case .finance: return 3
    case .healthcare: return 4
    case .technology: return 5
    case .travel: return 6
    case .other: return 7
    case .artsAndEntertainment: return 8
    case .beautyAndFitness: return 9
    case .booksAndLiterature: return 10
    case .foodAndDrink: return 11
    case .games: return 12
    case .hobbiesAndLeisure: return 13
    case .homeAndGarden: return 14
    case .internetAndTelecom: return 15
    case .lawAndGovernment: return 16
    case .news: return 17
    case .onlineCommunities: return 18
    case .peopleAndSociety: return 19
    case .petsAndAnimals: return 20
    case .realEstate: return 21
    case .reference: return 22
    case .science: return 23
    case .sports: return 24
    case .jobsAndEducation: return 25
    case .shopping: return 26
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Analytics_Admin_V1alpha_IndustryCategory: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Analytics_Admin_V1alpha_IndustryCategory] = [
    .unspecified,
    .automotive,
    .businessAndIndustrialMarkets,
    .finance,
    .healthcare,
    .technology,
    .travel,
    .other,
    .artsAndEntertainment,
    .beautyAndFitness,
    .booksAndLiterature,
    .foodAndDrink,
    .games,
    .hobbiesAndLeisure,
    .homeAndGarden,
    .internetAndTelecom,
    .lawAndGovernment,
    .news,
    .onlineCommunities,
    .peopleAndSociety,
    .petsAndAnimals,
    .realEstate,
    .reference,
    .science,
    .sports,
    .jobsAndEducation,
    .shopping,
  ]
}

#endif  // swift(>=4.2)

/// A resource message representing a Google Analytics account.
public struct Google_Analytics_Admin_V1alpha_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of this account.
  /// Format: accounts/{account}
  /// Example: "accounts/100"
  public var name: String = String()

  /// Output only. Time when this account was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when account payload fields were last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Required. Human-readable display name for this account.
  public var displayName: String = String()

  /// Country of business. Must be a non-deprecated code for a UN M.49 region.
  ///
  /// https:
  /// //unicode.org/cldr/charts/latest/supplem
  /// // ental/territory_containment_un_m_49.html
  public var countryCode: String = String()

  /// Output only. Indicates whether this Account is soft-deleted or not. Deleted
  /// accounts are excluded from List results unless specifically requested.
  public var deleted: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource message representing a Google Analytics GA4 property.
public struct Google_Analytics_Admin_V1alpha_Property {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of this property.
  /// Format: properties/{property_id}
  /// Example: "properties/1000"
  public var name: String = String()

  /// Output only. Time when the entity was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when entity payload fields were last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Immutable. Resource name of this property's logical parent.
  ///
  /// Note: The Property-Moving UI can be used to change the parent.
  /// Format: accounts/{account}
  /// Example: "accounts/100"
  public var parent: String = String()

  /// Required. Human-readable display name for this property.
  ///
  /// The max allowed display name length is 100 UTF-16 code units.
  public var displayName: String = String()

  /// Industry associated with this property
  /// Example: AUTOMOTIVE, FOOD_AND_DRINK
  public var industryCategory: Google_Analytics_Admin_V1alpha_IndustryCategory = .unspecified

  /// Reporting Time Zone, used as the day boundary for reports, regardless of
  /// where the data originates. If the time zone honors DST, Analytics will
  /// automatically adjust for the changes.
  ///
  /// NOTE: Changing the time zone only affects data going forward, and is not
  /// applied retroactively.
  ///
  /// Format: https://www.iana.org/time-zones
  /// Example: "America/Los_Angeles"
  public var timeZone: String = String()

  /// The currency type used in reports involving monetary values.
  ///
  ///
  /// Format: https://en.wikipedia.org/wiki/ISO_4217
  /// Examples: "USD", "EUR", "JPY"
  public var currencyCode: String = String()

  /// Output only. Indicates whether this Property is soft-deleted or not. Deleted properties
  /// are excluded from List results unless specifically requested.
  public var deleted: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource message representing a Google Analytics Android app stream.
public struct Google_Analytics_Admin_V1alpha_AndroidAppDataStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of this Data Stream.
  /// Format: properties/{property_id}/androidAppDataStreams/{stream_id}
  /// Example: "properties/1000/androidAppDataStreams/2000"
  public var name: String = String()

  /// Output only. ID of the corresponding Android app in Firebase, if any.
  /// This ID can change if the Android app is deleted and recreated.
  public var firebaseAppID: String = String()

  /// Output only. Time when this stream was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when stream payload fields were last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Immutable. The package name for the app being measured.
  /// Example: "com.example.myandroidapp"
  public var packageName: String = String()

  /// Human-readable display name for the Data Stream.
  ///
  /// The max allowed display name length is 255 UTF-16 code units.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource message representing a Google Analytics IOS app stream.
public struct Google_Analytics_Admin_V1alpha_IosAppDataStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of this Data Stream.
  /// Format: properties/{property_id}/iosAppDataStreams/{stream_id}
  /// Example: "properties/1000/iosAppDataStreams/2000"
  public var name: String = String()

  /// Output only. ID of the corresponding iOS app in Firebase, if any.
  /// This ID can change if the iOS app is deleted and recreated.
  public var firebaseAppID: String = String()

  /// Output only. Time when this stream was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when stream payload fields were last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Required. Immutable. The Apple App Store Bundle ID for the app
  /// Example: "com.example.myiosapp"
  public var bundleID: String = String()

  /// Human-readable display name for the Data Stream.
  ///
  /// The max allowed display name length is 255 UTF-16 code units.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource message representing a Google Analytics web stream.
public struct Google_Analytics_Admin_V1alpha_WebDataStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of this Data Stream.
  /// Format: properties/{property_id}/webDataStreams/{stream_id}
  /// Example: "properties/1000/webDataStreams/2000"
  public var name: String = String()

  /// Output only. Analytics "Measurement ID", without the "G-" prefix.
  /// Example: "G-1A2BCD345E" would just be "1A2BCD345E"
  public var measurementID: String = String()

  /// Output only. ID of the corresponding web app in Firebase, if any.
  /// This ID can change if the web app is deleted and recreated.
  public var firebaseAppID: String = String()

  /// Output only. Time when this stream was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when stream payload fields were last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Immutable. Domain name of the web app being measured, or empty.
  /// Example: "http://www.google.com", "https://www.google.com"
  public var defaultUri: String = String()

  /// Required. Human-readable display name for the Data Stream.
  ///
  /// The max allowed display name length is 100 UTF-16 code units.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource message representing a user's permissions on an Account or
/// Property resource.
public struct Google_Analytics_Admin_V1alpha_UserLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Example format: properties/1234/userLinks/5678
  public var name: String = String()

  /// Email address of the user to link
  public var emailAddress: String = String()

  /// Roles directly assigned to this user for this account or property.
  ///
  /// Valid values:
  /// predefinedRoles/read
  /// predefinedRoles/collaborate
  /// predefinedRoles/edit
  /// predefinedRoles/manage-users
  ///
  /// Excludes roles that are inherited from a higher-level entity, group,
  /// or organization admin role.
  ///
  /// A UserLink that is updated to have an empty list of direct_roles will be
  /// deleted.
  public var directRoles: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Read-only resource used to summarize a principal's effective roles.
public struct Google_Analytics_Admin_V1alpha_AuditUserLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Example format: properties/1234/userLinks/5678
  public var name: String = String()

  /// Email address of the linked user
  public var emailAddress: String = String()

  /// Roles directly assigned to this user for this entity.
  ///
  /// Format: predefinedRoles/read
  ///
  /// Excludes roles that are inherited from an account (if this is for a
  /// property), group, or organization admin role.
  public var directRoles: [String] = []

  /// Union of all permissions a user has at this account or property (includes
  /// direct permissions, group-inherited permissions, etc.).
  ///
  /// Format: predefinedRoles/read
  public var effectiveRoles: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Singleton resource under a WebDataStream, configuring measurement of
/// additional site interactions and content.
public struct Google_Analytics_Admin_V1alpha_EnhancedMeasurementSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of this Data Stream.
  /// Format:
  ///
  /// properties/{property_id}/webDataStreams/{stream_id}/enhancedMeasurementSettings
  /// Example: "properties/1000/webDataStreams/2000/enhancedMeasurementSettings"
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Indicates whether Enhanced Measurement Settings will be used to
  /// automatically measure interactions and content on this web stream.
  ///
  /// Changing this value does not affect the settings themselves, but determines
  /// whether they are respected.
  public var streamEnabled: Bool {
    get {return _storage._streamEnabled}
    set {_uniqueStorage()._streamEnabled = newValue}
  }

  /// Output only. If enabled, capture a page view event each time a page loads or the
  /// website changes the browser history state.
  public var pageViewsEnabled: Bool {
    get {return _storage._pageViewsEnabled}
    set {_uniqueStorage()._pageViewsEnabled = newValue}
  }

  /// If enabled, capture scroll events each time a visitor gets to the bottom of
  /// a page.
  public var scrollsEnabled: Bool {
    get {return _storage._scrollsEnabled}
    set {_uniqueStorage()._scrollsEnabled = newValue}
  }

  /// If enabled, capture an outbound click event each time a visitor clicks a
  /// link that leads them away from your domain.
  public var outboundClicksEnabled: Bool {
    get {return _storage._outboundClicksEnabled}
    set {_uniqueStorage()._outboundClicksEnabled = newValue}
  }

  /// Capture events when your visitors view content on your site that has
  /// structured data (eg, articles, blog posts, product details screens, etc.).
  public var contentViewsEnabled: Bool {
    get {return _storage._contentViewsEnabled}
    set {_uniqueStorage()._contentViewsEnabled = newValue}
  }

  /// If enabled, capture a view search results event each time a visitor
  /// performs a search on your site (based on a query parameter).
  public var siteSearchEnabled: Bool {
    get {return _storage._siteSearchEnabled}
    set {_uniqueStorage()._siteSearchEnabled = newValue}
  }

  /// If enabled, capture a view search results event each time a visitor
  /// interacts with a form on your site.
  public var formInteractionsEnabled: Bool {
    get {return _storage._formInteractionsEnabled}
    set {_uniqueStorage()._formInteractionsEnabled = newValue}
  }

  /// If enabled, capture video play, progress, and complete events as visitors
  /// view embedded videos on your site.
  public var videoEngagementEnabled: Bool {
    get {return _storage._videoEngagementEnabled}
    set {_uniqueStorage()._videoEngagementEnabled = newValue}
  }

  /// If enabled, capture a file download event each time a link is clicked with
  /// a common document, compressed file, application, video, or audio extension.
  public var fileDownloadsEnabled: Bool {
    get {return _storage._fileDownloadsEnabled}
    set {_uniqueStorage()._fileDownloadsEnabled = newValue}
  }

  /// If enabled, capture a click event each time a visitor clicks a link or
  /// element that has data attributes beginning with "data-ga".
  public var dataTaggedElementClicksEnabled: Bool {
    get {return _storage._dataTaggedElementClicksEnabled}
    set {_uniqueStorage()._dataTaggedElementClicksEnabled = newValue}
  }

  /// If enabled, capture a page view event each time a page loads.
  public var pageLoadsEnabled: Bool {
    get {return _storage._pageLoadsEnabled}
    set {_uniqueStorage()._pageLoadsEnabled = newValue}
  }

  /// If enabled, capture a page view event each time the website changes the
  /// browser history state.
  public var pageChangesEnabled: Bool {
    get {return _storage._pageChangesEnabled}
    set {_uniqueStorage()._pageChangesEnabled = newValue}
  }

  /// Capture events when your visitors view content on your site that has
  /// articles or blog posts.
  public var articlesAndBlogsEnabled: Bool {
    get {return _storage._articlesAndBlogsEnabled}
    set {_uniqueStorage()._articlesAndBlogsEnabled = newValue}
  }

  /// Capture events when your visitors view content on your site that has
  /// product details screens, etc.
  public var productsAndEcommerceEnabled: Bool {
    get {return _storage._productsAndEcommerceEnabled}
    set {_uniqueStorage()._productsAndEcommerceEnabled = newValue}
  }

  /// Required. URL query parameters to interpret as site search parameters.
  /// Max length is 1024 characters. Must not be empty.
  public var searchQueryParameter: String {
    get {return _storage._searchQueryParameter}
    set {_uniqueStorage()._searchQueryParameter = newValue}
  }

  /// Additional URL query parameters.
  /// Max length is 1024 characters.
  public var urlQueryParameter: String {
    get {return _storage._urlQueryParameter}
    set {_uniqueStorage()._urlQueryParameter = newValue}
  }

  /// Domains to exclude from measurement. Max length is 1024 characters.
  public var excludedDomains: String {
    get {return _storage._excludedDomains}
    set {_uniqueStorage()._excludedDomains = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A link between an GA4 property and a Firebase project.
public struct Google_Analytics_Admin_V1alpha_FirebaseLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Example format: properties/1234/firebaseLinks/5678
  public var name: String = String()

  /// Immutable. Firebase project resource name. When creating a FirebaseLink, you may
  /// provide this resource name using either a project number or project ID.
  /// Once this resource has been created, returned FirebaseLinks will always
  /// have a project_name that contains a project number.
  ///
  /// Format: 'projects/{project number}'
  /// Example: 'projects/1234'
  public var project: String = String()

  /// Output only. Time when this FirebaseLink was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Maximum user access to the GA4 property allowed to admins of
  /// the linked Firebase project.
  public var maximumUserAccess: Google_Analytics_Admin_V1alpha_MaximumUserAccess = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Read-only resource with the tag for sending data from a website to a
/// WebDataStream.
public struct Google_Analytics_Admin_V1alpha_GlobalSiteTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Immutable. JavaScript code snippet to be pasted as the first item into the head tag of
  /// every webpage to measure.
  public var snippet: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A link between an GA4 property and a Google Ads account.
public struct Google_Analytics_Admin_V1alpha_GoogleAdsLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Format: properties/{propertyId}/googleAdsLinks/{googleAdsLinkId}
  ///
  /// Note: googleAdsLinkId is not the Google Ads customer ID.
  public var name: String = String()

  /// Immutable. Format: properties/{propertyId}
  public var parent: String = String()

  /// Immutable. Google Ads customer ID.
  public var customerID: String = String()

  /// Output only. If true, this link is for a Google Ads manager account.
  public var canManageClients: Bool = false

  /// Enable personalized advertising features with this integration.
  /// Automatically publish my Google Analytics audience lists and Google
  /// Analytics remarketing events/parameters to the linked Google Ads account.
  /// If this field is not set on create/update it will be defaulted to true.
  public var adsPersonalizationEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _adsPersonalizationEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_adsPersonalizationEnabled = newValue}
  }
  /// Returns true if `adsPersonalizationEnabled` has been explicitly set.
  public var hasAdsPersonalizationEnabled: Bool {return self._adsPersonalizationEnabled != nil}
  /// Clears the value of `adsPersonalizationEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearAdsPersonalizationEnabled() {self._adsPersonalizationEnabled = nil}

  /// Output only. Email address of the user that created the link.
  /// An empty string will be returned if the email address can't be retrieved.
  public var emailAddress: String = String()

  /// Output only. Time when this link was originally created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when this link was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _adsPersonalizationEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource message representing data sharing settings of a Google Analytics
/// account.
public struct Google_Analytics_Admin_V1alpha_DataSharingSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name.
  /// Format: accounts/{account}/dataSharingSettings
  /// Example: "accounts/1000/dataSharingSettings"
  public var name: String = String()

  /// Allows Google support to access the data in order to help troubleshoot
  /// issues.
  public var sharingWithGoogleSupportEnabled: Bool = false

  /// Allows Google sales teams that are assigned to the customer to access the
  /// data in order to suggest configuration changes to improve results.
  /// Sales team restrictions still apply when enabled.
  public var sharingWithGoogleAssignedSalesEnabled: Bool = false

  /// Allows any of Google sales to access the data in order to suggest
  /// configuration changes to improve results.
  public var sharingWithGoogleAnySalesEnabled: Bool = false

  /// Allows Google to use the data to improve other Google products or services.
  public var sharingWithGoogleProductsEnabled: Bool = false

  /// Allows Google to share the data anonymously in aggregate form with others.
  public var sharingWithOthersEnabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A virtual resource representing an overview of an account and
/// all its child GA4 properties.
public struct Google_Analytics_Admin_V1alpha_AccountSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource name for this account summary.
  /// Format: accountSummaries/{account_id}
  /// Example: "accountSummaries/1000"
  public var name: String = String()

  /// Resource name of account referred to by this account summary
  /// Format: accounts/{account_id}
  /// Example: "accounts/1000"
  public var account: String = String()

  /// Display name for the account referred to in this account summary.
  public var displayName: String = String()

  /// List of summaries for child accounts of this account.
  public var propertySummaries: [Google_Analytics_Admin_V1alpha_PropertySummary] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A virtual resource representing metadata for an GA4 property.
public struct Google_Analytics_Admin_V1alpha_PropertySummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource name of property referred to by this property summary
  /// Format: properties/{property_id}
  /// Example: "properties/1000"
  public var property: String = String()

  /// Display name for the property referred to in this account summary.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.analytics.admin.v1alpha"

extension Google_Analytics_Admin_V1alpha_MaximumUserAccess: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAXIMUM_USER_ACCESS_UNSPECIFIED"),
    1: .same(proto: "NO_ACCESS"),
    2: .same(proto: "READ_AND_ANALYZE"),
    3: .same(proto: "EDITOR_WITHOUT_LINK_MANAGEMENT"),
    4: .same(proto: "EDITOR_INCLUDING_LINK_MANAGEMENT"),
  ]
}

extension Google_Analytics_Admin_V1alpha_IndustryCategory: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INDUSTRY_CATEGORY_UNSPECIFIED"),
    1: .same(proto: "AUTOMOTIVE"),
    2: .same(proto: "BUSINESS_AND_INDUSTRIAL_MARKETS"),
    3: .same(proto: "FINANCE"),
    4: .same(proto: "HEALTHCARE"),
    5: .same(proto: "TECHNOLOGY"),
    6: .same(proto: "TRAVEL"),
    7: .same(proto: "OTHER"),
    8: .same(proto: "ARTS_AND_ENTERTAINMENT"),
    9: .same(proto: "BEAUTY_AND_FITNESS"),
    10: .same(proto: "BOOKS_AND_LITERATURE"),
    11: .same(proto: "FOOD_AND_DRINK"),
    12: .same(proto: "GAMES"),
    13: .same(proto: "HOBBIES_AND_LEISURE"),
    14: .same(proto: "HOME_AND_GARDEN"),
    15: .same(proto: "INTERNET_AND_TELECOM"),
    16: .same(proto: "LAW_AND_GOVERNMENT"),
    17: .same(proto: "NEWS"),
    18: .same(proto: "ONLINE_COMMUNITIES"),
    19: .same(proto: "PEOPLE_AND_SOCIETY"),
    20: .same(proto: "PETS_AND_ANIMALS"),
    21: .same(proto: "REAL_ESTATE"),
    22: .same(proto: "REFERENCE"),
    23: .same(proto: "SCIENCE"),
    24: .same(proto: "SPORTS"),
    25: .same(proto: "JOBS_AND_EDUCATION"),
    26: .same(proto: "SHOPPING"),
  ]
}

extension Google_Analytics_Admin_V1alpha_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "update_time"),
    4: .standard(proto: "display_name"),
    5: .standard(proto: "country_code"),
    6: .same(proto: "deleted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.countryCode) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.deleted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 4)
    }
    if !self.countryCode.isEmpty {
      try visitor.visitSingularStringField(value: self.countryCode, fieldNumber: 5)
    }
    if self.deleted != false {
      try visitor.visitSingularBoolField(value: self.deleted, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_Account, rhs: Google_Analytics_Admin_V1alpha_Account) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.countryCode != rhs.countryCode {return false}
    if lhs.deleted != rhs.deleted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_Property: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Property"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    2: .same(proto: "parent"),
    5: .standard(proto: "display_name"),
    6: .standard(proto: "industry_category"),
    7: .standard(proto: "time_zone"),
    8: .standard(proto: "currency_code"),
    9: .same(proto: "deleted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.industryCategory) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.timeZone) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.currencyCode) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.deleted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 5)
    }
    if self.industryCategory != .unspecified {
      try visitor.visitSingularEnumField(value: self.industryCategory, fieldNumber: 6)
    }
    if !self.timeZone.isEmpty {
      try visitor.visitSingularStringField(value: self.timeZone, fieldNumber: 7)
    }
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 8)
    }
    if self.deleted != false {
      try visitor.visitSingularBoolField(value: self.deleted, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_Property, rhs: Google_Analytics_Admin_V1alpha_Property) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.industryCategory != rhs.industryCategory {return false}
    if lhs.timeZone != rhs.timeZone {return false}
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.deleted != rhs.deleted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_AndroidAppDataStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AndroidAppDataStream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "firebase_app_id"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .standard(proto: "package_name"),
    6: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.firebaseAppID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.packageName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.firebaseAppID.isEmpty {
      try visitor.visitSingularStringField(value: self.firebaseAppID, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 5)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_AndroidAppDataStream, rhs: Google_Analytics_Admin_V1alpha_AndroidAppDataStream) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.firebaseAppID != rhs.firebaseAppID {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.packageName != rhs.packageName {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_IosAppDataStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IosAppDataStream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "firebase_app_id"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .standard(proto: "bundle_id"),
    6: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.firebaseAppID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bundleID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.firebaseAppID.isEmpty {
      try visitor.visitSingularStringField(value: self.firebaseAppID, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.bundleID.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleID, fieldNumber: 5)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_IosAppDataStream, rhs: Google_Analytics_Admin_V1alpha_IosAppDataStream) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.firebaseAppID != rhs.firebaseAppID {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.bundleID != rhs.bundleID {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_WebDataStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WebDataStream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "measurement_id"),
    3: .standard(proto: "firebase_app_id"),
    4: .standard(proto: "create_time"),
    5: .standard(proto: "update_time"),
    6: .standard(proto: "default_uri"),
    7: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.measurementID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.firebaseAppID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.defaultUri) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.measurementID.isEmpty {
      try visitor.visitSingularStringField(value: self.measurementID, fieldNumber: 2)
    }
    if !self.firebaseAppID.isEmpty {
      try visitor.visitSingularStringField(value: self.firebaseAppID, fieldNumber: 3)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.defaultUri.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultUri, fieldNumber: 6)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_WebDataStream, rhs: Google_Analytics_Admin_V1alpha_WebDataStream) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.measurementID != rhs.measurementID {return false}
    if lhs.firebaseAppID != rhs.firebaseAppID {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.defaultUri != rhs.defaultUri {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_UserLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "email_address"),
    3: .standard(proto: "direct_roles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.directRoles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 2)
    }
    if !self.directRoles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.directRoles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_UserLink, rhs: Google_Analytics_Admin_V1alpha_UserLink) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs.directRoles != rhs.directRoles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_AuditUserLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuditUserLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "email_address"),
    3: .standard(proto: "direct_roles"),
    4: .standard(proto: "effective_roles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.directRoles) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.effectiveRoles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 2)
    }
    if !self.directRoles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.directRoles, fieldNumber: 3)
    }
    if !self.effectiveRoles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.effectiveRoles, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_AuditUserLink, rhs: Google_Analytics_Admin_V1alpha_AuditUserLink) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs.directRoles != rhs.directRoles {return false}
    if lhs.effectiveRoles != rhs.effectiveRoles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_EnhancedMeasurementSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnhancedMeasurementSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "stream_enabled"),
    3: .standard(proto: "page_views_enabled"),
    4: .standard(proto: "scrolls_enabled"),
    5: .standard(proto: "outbound_clicks_enabled"),
    6: .standard(proto: "content_views_enabled"),
    7: .standard(proto: "site_search_enabled"),
    8: .standard(proto: "form_interactions_enabled"),
    9: .standard(proto: "video_engagement_enabled"),
    10: .standard(proto: "file_downloads_enabled"),
    11: .standard(proto: "data_tagged_element_clicks_enabled"),
    12: .standard(proto: "page_loads_enabled"),
    13: .standard(proto: "page_changes_enabled"),
    14: .standard(proto: "articles_and_blogs_enabled"),
    15: .standard(proto: "products_and_ecommerce_enabled"),
    16: .standard(proto: "search_query_parameter"),
    17: .standard(proto: "url_query_parameter"),
    18: .standard(proto: "excluded_domains"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _streamEnabled: Bool = false
    var _pageViewsEnabled: Bool = false
    var _scrollsEnabled: Bool = false
    var _outboundClicksEnabled: Bool = false
    var _contentViewsEnabled: Bool = false
    var _siteSearchEnabled: Bool = false
    var _formInteractionsEnabled: Bool = false
    var _videoEngagementEnabled: Bool = false
    var _fileDownloadsEnabled: Bool = false
    var _dataTaggedElementClicksEnabled: Bool = false
    var _pageLoadsEnabled: Bool = false
    var _pageChangesEnabled: Bool = false
    var _articlesAndBlogsEnabled: Bool = false
    var _productsAndEcommerceEnabled: Bool = false
    var _searchQueryParameter: String = String()
    var _urlQueryParameter: String = String()
    var _excludedDomains: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _streamEnabled = source._streamEnabled
      _pageViewsEnabled = source._pageViewsEnabled
      _scrollsEnabled = source._scrollsEnabled
      _outboundClicksEnabled = source._outboundClicksEnabled
      _contentViewsEnabled = source._contentViewsEnabled
      _siteSearchEnabled = source._siteSearchEnabled
      _formInteractionsEnabled = source._formInteractionsEnabled
      _videoEngagementEnabled = source._videoEngagementEnabled
      _fileDownloadsEnabled = source._fileDownloadsEnabled
      _dataTaggedElementClicksEnabled = source._dataTaggedElementClicksEnabled
      _pageLoadsEnabled = source._pageLoadsEnabled
      _pageChangesEnabled = source._pageChangesEnabled
      _articlesAndBlogsEnabled = source._articlesAndBlogsEnabled
      _productsAndEcommerceEnabled = source._productsAndEcommerceEnabled
      _searchQueryParameter = source._searchQueryParameter
      _urlQueryParameter = source._urlQueryParameter
      _excludedDomains = source._excludedDomains
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._streamEnabled) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._pageViewsEnabled) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._scrollsEnabled) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._outboundClicksEnabled) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._contentViewsEnabled) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._siteSearchEnabled) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._formInteractionsEnabled) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._videoEngagementEnabled) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._fileDownloadsEnabled) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._dataTaggedElementClicksEnabled) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._pageLoadsEnabled) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._pageChangesEnabled) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._articlesAndBlogsEnabled) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._productsAndEcommerceEnabled) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._searchQueryParameter) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._urlQueryParameter) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._excludedDomains) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if _storage._streamEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._streamEnabled, fieldNumber: 2)
      }
      if _storage._pageViewsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._pageViewsEnabled, fieldNumber: 3)
      }
      if _storage._scrollsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._scrollsEnabled, fieldNumber: 4)
      }
      if _storage._outboundClicksEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._outboundClicksEnabled, fieldNumber: 5)
      }
      if _storage._contentViewsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._contentViewsEnabled, fieldNumber: 6)
      }
      if _storage._siteSearchEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._siteSearchEnabled, fieldNumber: 7)
      }
      if _storage._formInteractionsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._formInteractionsEnabled, fieldNumber: 8)
      }
      if _storage._videoEngagementEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._videoEngagementEnabled, fieldNumber: 9)
      }
      if _storage._fileDownloadsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._fileDownloadsEnabled, fieldNumber: 10)
      }
      if _storage._dataTaggedElementClicksEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._dataTaggedElementClicksEnabled, fieldNumber: 11)
      }
      if _storage._pageLoadsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._pageLoadsEnabled, fieldNumber: 12)
      }
      if _storage._pageChangesEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._pageChangesEnabled, fieldNumber: 13)
      }
      if _storage._articlesAndBlogsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._articlesAndBlogsEnabled, fieldNumber: 14)
      }
      if _storage._productsAndEcommerceEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._productsAndEcommerceEnabled, fieldNumber: 15)
      }
      if !_storage._searchQueryParameter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._searchQueryParameter, fieldNumber: 16)
      }
      if !_storage._urlQueryParameter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlQueryParameter, fieldNumber: 17)
      }
      if !_storage._excludedDomains.isEmpty {
        try visitor.visitSingularStringField(value: _storage._excludedDomains, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_EnhancedMeasurementSettings, rhs: Google_Analytics_Admin_V1alpha_EnhancedMeasurementSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._streamEnabled != rhs_storage._streamEnabled {return false}
        if _storage._pageViewsEnabled != rhs_storage._pageViewsEnabled {return false}
        if _storage._scrollsEnabled != rhs_storage._scrollsEnabled {return false}
        if _storage._outboundClicksEnabled != rhs_storage._outboundClicksEnabled {return false}
        if _storage._contentViewsEnabled != rhs_storage._contentViewsEnabled {return false}
        if _storage._siteSearchEnabled != rhs_storage._siteSearchEnabled {return false}
        if _storage._formInteractionsEnabled != rhs_storage._formInteractionsEnabled {return false}
        if _storage._videoEngagementEnabled != rhs_storage._videoEngagementEnabled {return false}
        if _storage._fileDownloadsEnabled != rhs_storage._fileDownloadsEnabled {return false}
        if _storage._dataTaggedElementClicksEnabled != rhs_storage._dataTaggedElementClicksEnabled {return false}
        if _storage._pageLoadsEnabled != rhs_storage._pageLoadsEnabled {return false}
        if _storage._pageChangesEnabled != rhs_storage._pageChangesEnabled {return false}
        if _storage._articlesAndBlogsEnabled != rhs_storage._articlesAndBlogsEnabled {return false}
        if _storage._productsAndEcommerceEnabled != rhs_storage._productsAndEcommerceEnabled {return false}
        if _storage._searchQueryParameter != rhs_storage._searchQueryParameter {return false}
        if _storage._urlQueryParameter != rhs_storage._urlQueryParameter {return false}
        if _storage._excludedDomains != rhs_storage._excludedDomains {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_FirebaseLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FirebaseLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "project"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "maximum_user_access"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.project) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.maximumUserAccess) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.project.isEmpty {
      try visitor.visitSingularStringField(value: self.project, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.maximumUserAccess != .unspecified {
      try visitor.visitSingularEnumField(value: self.maximumUserAccess, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_FirebaseLink, rhs: Google_Analytics_Admin_V1alpha_FirebaseLink) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.project != rhs.project {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.maximumUserAccess != rhs.maximumUserAccess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_GlobalSiteTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GlobalSiteTag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "snippet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.snippet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.snippet.isEmpty {
      try visitor.visitSingularStringField(value: self.snippet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_GlobalSiteTag, rhs: Google_Analytics_Admin_V1alpha_GlobalSiteTag) -> Bool {
    if lhs.snippet != rhs.snippet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_GoogleAdsLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GoogleAdsLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "parent"),
    3: .standard(proto: "customer_id"),
    4: .standard(proto: "can_manage_clients"),
    5: .standard(proto: "ads_personalization_enabled"),
    6: .standard(proto: "email_address"),
    7: .standard(proto: "create_time"),
    8: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.customerID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.canManageClients) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._adsPersonalizationEnabled) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 2)
    }
    if !self.customerID.isEmpty {
      try visitor.visitSingularStringField(value: self.customerID, fieldNumber: 3)
    }
    if self.canManageClients != false {
      try visitor.visitSingularBoolField(value: self.canManageClients, fieldNumber: 4)
    }
    if let v = self._adsPersonalizationEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 6)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_GoogleAdsLink, rhs: Google_Analytics_Admin_V1alpha_GoogleAdsLink) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs.customerID != rhs.customerID {return false}
    if lhs.canManageClients != rhs.canManageClients {return false}
    if lhs._adsPersonalizationEnabled != rhs._adsPersonalizationEnabled {return false}
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_DataSharingSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataSharingSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "sharing_with_google_support_enabled"),
    3: .standard(proto: "sharing_with_google_assigned_sales_enabled"),
    4: .standard(proto: "sharing_with_google_any_sales_enabled"),
    5: .standard(proto: "sharing_with_google_products_enabled"),
    6: .standard(proto: "sharing_with_others_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.sharingWithGoogleSupportEnabled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.sharingWithGoogleAssignedSalesEnabled) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.sharingWithGoogleAnySalesEnabled) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.sharingWithGoogleProductsEnabled) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.sharingWithOthersEnabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.sharingWithGoogleSupportEnabled != false {
      try visitor.visitSingularBoolField(value: self.sharingWithGoogleSupportEnabled, fieldNumber: 2)
    }
    if self.sharingWithGoogleAssignedSalesEnabled != false {
      try visitor.visitSingularBoolField(value: self.sharingWithGoogleAssignedSalesEnabled, fieldNumber: 3)
    }
    if self.sharingWithGoogleAnySalesEnabled != false {
      try visitor.visitSingularBoolField(value: self.sharingWithGoogleAnySalesEnabled, fieldNumber: 4)
    }
    if self.sharingWithGoogleProductsEnabled != false {
      try visitor.visitSingularBoolField(value: self.sharingWithGoogleProductsEnabled, fieldNumber: 5)
    }
    if self.sharingWithOthersEnabled != false {
      try visitor.visitSingularBoolField(value: self.sharingWithOthersEnabled, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_DataSharingSettings, rhs: Google_Analytics_Admin_V1alpha_DataSharingSettings) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.sharingWithGoogleSupportEnabled != rhs.sharingWithGoogleSupportEnabled {return false}
    if lhs.sharingWithGoogleAssignedSalesEnabled != rhs.sharingWithGoogleAssignedSalesEnabled {return false}
    if lhs.sharingWithGoogleAnySalesEnabled != rhs.sharingWithGoogleAnySalesEnabled {return false}
    if lhs.sharingWithGoogleProductsEnabled != rhs.sharingWithGoogleProductsEnabled {return false}
    if lhs.sharingWithOthersEnabled != rhs.sharingWithOthersEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_AccountSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountSummary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "account"),
    3: .standard(proto: "display_name"),
    4: .standard(proto: "property_summaries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.propertySummaries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    if !self.propertySummaries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.propertySummaries, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_AccountSummary, rhs: Google_Analytics_Admin_V1alpha_AccountSummary) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.account != rhs.account {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.propertySummaries != rhs.propertySummaries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Admin_V1alpha_PropertySummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertySummary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "property"),
    2: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.property) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.property.isEmpty {
      try visitor.visitSingularStringField(value: self.property, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Admin_V1alpha_PropertySummary, rhs: Google_Analytics_Admin_V1alpha_PropertySummary) -> Bool {
    if lhs.property != rhs.property {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
