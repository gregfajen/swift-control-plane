// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/analytics/data/v1alpha/analytics_data_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The dimensions and metrics currently accepted in reporting methods.
public struct Google_Analytics_Data_V1alpha_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource name of this metadata.
  public var name: String = String()

  /// The dimension descriptions.
  public var dimensions: [Google_Analytics_Data_V1alpha_DimensionMetadata] = []

  /// The metric descriptions.
  public var metrics: [Google_Analytics_Data_V1alpha_MetricMetadata] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request to generate a report.
public struct Google_Analytics_Data_V1alpha_RunReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A property whose events are tracked. Within a batch request, this entity
  /// should either be unspecified or consistent with the batch-level entity.
  public var entity: Google_Analytics_Data_V1alpha_Entity {
    get {return _storage._entity ?? Google_Analytics_Data_V1alpha_Entity()}
    set {_uniqueStorage()._entity = newValue}
  }
  /// Returns true if `entity` has been explicitly set.
  public var hasEntity: Bool {return _storage._entity != nil}
  /// Clears the value of `entity`. Subsequent reads from it will return its default value.
  public mutating func clearEntity() {_uniqueStorage()._entity = nil}

  /// The dimensions requested and displayed.
  public var dimensions: [Google_Analytics_Data_V1alpha_Dimension] {
    get {return _storage._dimensions}
    set {_uniqueStorage()._dimensions = newValue}
  }

  /// The metrics requested and displayed.
  public var metrics: [Google_Analytics_Data_V1alpha_Metric] {
    get {return _storage._metrics}
    set {_uniqueStorage()._metrics = newValue}
  }

  /// Date ranges of data to read. If multiple date ranges are requested, each
  /// response row will contain a zero based date range index. If two date
  /// ranges overlap, the event data for the overlapping days is included in the
  /// response rows for both date ranges. In a cohort request, this `dateRanges`
  /// must be unspecified.
  public var dateRanges: [Google_Analytics_Data_V1alpha_DateRange] {
    get {return _storage._dateRanges}
    set {_uniqueStorage()._dateRanges = newValue}
  }

  /// The row count of the start row. The first row is counted as row 0.
  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  /// The number of rows to return. If unspecified, 10 rows are returned. If
  /// -1, all rows are returned.
  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  /// Aggregation of metrics. Aggregated metric values will be shown in rows
  /// where the dimension_values are set to "RESERVED_(MetricAggregation)".
  public var metricAggregations: [Google_Analytics_Data_V1alpha_MetricAggregation] {
    get {return _storage._metricAggregations}
    set {_uniqueStorage()._metricAggregations = newValue}
  }

  /// The filter clause of dimensions. Dimensions must be requested to be used in
  /// this filter. Metrics cannot be used in this filter.
  public var dimensionFilter: Google_Analytics_Data_V1alpha_FilterExpression {
    get {return _storage._dimensionFilter ?? Google_Analytics_Data_V1alpha_FilterExpression()}
    set {_uniqueStorage()._dimensionFilter = newValue}
  }
  /// Returns true if `dimensionFilter` has been explicitly set.
  public var hasDimensionFilter: Bool {return _storage._dimensionFilter != nil}
  /// Clears the value of `dimensionFilter`. Subsequent reads from it will return its default value.
  public mutating func clearDimensionFilter() {_uniqueStorage()._dimensionFilter = nil}

  /// The filter clause of metrics. Applied at post aggregation phase, similar to
  /// SQL having-clause. Metrics must be requested to be used in this filter.
  /// Dimensions cannot be used in this filter.
  public var metricFilter: Google_Analytics_Data_V1alpha_FilterExpression {
    get {return _storage._metricFilter ?? Google_Analytics_Data_V1alpha_FilterExpression()}
    set {_uniqueStorage()._metricFilter = newValue}
  }
  /// Returns true if `metricFilter` has been explicitly set.
  public var hasMetricFilter: Bool {return _storage._metricFilter != nil}
  /// Clears the value of `metricFilter`. Subsequent reads from it will return its default value.
  public mutating func clearMetricFilter() {_uniqueStorage()._metricFilter = nil}

  /// Specifies how rows are ordered in the response.
  public var orderBys: [Google_Analytics_Data_V1alpha_OrderBy] {
    get {return _storage._orderBys}
    set {_uniqueStorage()._orderBys = newValue}
  }

  /// A currency code in ISO4217 format, such as "AED", "USD", "JPY".
  /// If the field is empty, the report uses the entity's default currency.
  public var currencyCode: String {
    get {return _storage._currencyCode}
    set {_uniqueStorage()._currencyCode = newValue}
  }

  /// Cohort group associated with this request. If there is a cohort group
  /// in the request the 'cohort' dimension must be present.
  public var cohortSpec: Google_Analytics_Data_V1alpha_CohortSpec {
    get {return _storage._cohortSpec ?? Google_Analytics_Data_V1alpha_CohortSpec()}
    set {_uniqueStorage()._cohortSpec = newValue}
  }
  /// Returns true if `cohortSpec` has been explicitly set.
  public var hasCohortSpec: Bool {return _storage._cohortSpec != nil}
  /// Clears the value of `cohortSpec`. Subsequent reads from it will return its default value.
  public mutating func clearCohortSpec() {_uniqueStorage()._cohortSpec = nil}

  /// If false or unspecified, each row with all metrics equal to 0 will not be
  /// returned. If true, these rows will be returned if they are not separately
  /// removed by a filter.
  public var keepEmptyRows: Bool {
    get {return _storage._keepEmptyRows}
    set {_uniqueStorage()._keepEmptyRows = newValue}
  }

  /// Toggles whether to return the current state of this Analytics Property's
  /// quota. Quota is returned in [PropertyQuota](#PropertyQuota).
  public var returnPropertyQuota: Bool {
    get {return _storage._returnPropertyQuota}
    set {_uniqueStorage()._returnPropertyQuota = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The response report table corresponding to a request.
public struct Google_Analytics_Data_V1alpha_RunReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Describes dimension columns. The number of DimensionHeaders and ordering of
  /// DimensionHeaders matches the dimensions present in rows.
  public var dimensionHeaders: [Google_Analytics_Data_V1alpha_DimensionHeader] = []

  /// Describes metric columns. The number of MetricHeaders and ordering of
  /// MetricHeaders matches the metrics present in rows.
  public var metricHeaders: [Google_Analytics_Data_V1alpha_MetricHeader] = []

  /// Rows of dimension value combinations and metric values in the report.
  public var rows: [Google_Analytics_Data_V1alpha_Row] = []

  /// If requested, the totaled values of metrics.
  public var totals: [Google_Analytics_Data_V1alpha_Row] = []

  /// If requested, the maximum values of metrics.
  public var maximums: [Google_Analytics_Data_V1alpha_Row] = []

  /// If requested, the minimum values of metrics.
  public var minimums: [Google_Analytics_Data_V1alpha_Row] = []

  /// The total number of rows in the query result, regardless of the number of
  /// rows returned in the response. For example if a query returns 175 rows and
  /// includes limit = 50 in the API request, the response will contain row_count
  /// = 175 but only 50 rows.
  public var rowCount: Int32 = 0

  /// Metadata for the report.
  public var metadata: Google_Analytics_Data_V1alpha_ResponseMetaData {
    get {return _metadata ?? Google_Analytics_Data_V1alpha_ResponseMetaData()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// This Analytics Property's quota state including this request.
  public var propertyQuota: Google_Analytics_Data_V1alpha_PropertyQuota {
    get {return _propertyQuota ?? Google_Analytics_Data_V1alpha_PropertyQuota()}
    set {_propertyQuota = newValue}
  }
  /// Returns true if `propertyQuota` has been explicitly set.
  public var hasPropertyQuota: Bool {return self._propertyQuota != nil}
  /// Clears the value of `propertyQuota`. Subsequent reads from it will return its default value.
  public mutating func clearPropertyQuota() {self._propertyQuota = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Google_Analytics_Data_V1alpha_ResponseMetaData? = nil
  fileprivate var _propertyQuota: Google_Analytics_Data_V1alpha_PropertyQuota? = nil
}

/// The request to generate a pivot report.
public struct Google_Analytics_Data_V1alpha_RunPivotReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A property whose events are tracked. Within a batch request, this entity
  /// should either be unspecified or consistent with the batch-level entity.
  public var entity: Google_Analytics_Data_V1alpha_Entity {
    get {return _entity ?? Google_Analytics_Data_V1alpha_Entity()}
    set {_entity = newValue}
  }
  /// Returns true if `entity` has been explicitly set.
  public var hasEntity: Bool {return self._entity != nil}
  /// Clears the value of `entity`. Subsequent reads from it will return its default value.
  public mutating func clearEntity() {self._entity = nil}

  /// The dimensions requested. All defined dimensions must be used by one of the
  /// following: dimension_expression, dimension_filter, pivots, order_bys.
  public var dimensions: [Google_Analytics_Data_V1alpha_Dimension] = []

  /// The metrics requested, at least one metric needs to be specified. All
  /// defined metrics must be used by one of the following: metric_expression,
  /// metric_filter, order_bys.
  public var metrics: [Google_Analytics_Data_V1alpha_Metric] = []

  /// The filter clause of dimensions. Dimensions must be requested to be used in
  /// this filter. Metrics cannot be used in this filter.
  public var dimensionFilter: Google_Analytics_Data_V1alpha_FilterExpression {
    get {return _dimensionFilter ?? Google_Analytics_Data_V1alpha_FilterExpression()}
    set {_dimensionFilter = newValue}
  }
  /// Returns true if `dimensionFilter` has been explicitly set.
  public var hasDimensionFilter: Bool {return self._dimensionFilter != nil}
  /// Clears the value of `dimensionFilter`. Subsequent reads from it will return its default value.
  public mutating func clearDimensionFilter() {self._dimensionFilter = nil}

  /// The filter clause of metrics. Applied at post aggregation phase, similar to
  /// SQL having-clause. Metrics must be requested to be used in this filter.
  /// Dimensions cannot be used in this filter.
  public var metricFilter: Google_Analytics_Data_V1alpha_FilterExpression {
    get {return _metricFilter ?? Google_Analytics_Data_V1alpha_FilterExpression()}
    set {_metricFilter = newValue}
  }
  /// Returns true if `metricFilter` has been explicitly set.
  public var hasMetricFilter: Bool {return self._metricFilter != nil}
  /// Clears the value of `metricFilter`. Subsequent reads from it will return its default value.
  public mutating func clearMetricFilter() {self._metricFilter = nil}

  /// Describes the visual format of the report's dimensions in columns or rows.
  /// The union of the fieldNames (dimension names) in all pivots must be a
  /// subset of dimension names defined in Dimensions. No two pivots can share a
  /// dimension. A dimension is only visible if it appears in a pivot.
  public var pivots: [Google_Analytics_Data_V1alpha_Pivot] = []

  /// The date range to retrieve event data for the report. If multiple date
  /// ranges are specified, event data from each date range is used in the
  /// report. A special dimension with field name "dateRange" can be included in
  /// a Pivot's field names; if included, the report compares between date
  /// ranges. In a cohort request, this `dateRanges` must be unspecified.
  public var dateRanges: [Google_Analytics_Data_V1alpha_DateRange] = []

  /// A currency code in ISO4217 format, such as "AED", "USD", "JPY".
  /// If the field is empty, the report uses the entity's default currency.
  public var currencyCode: String = String()

  /// Cohort group associated with this request. If there is a cohort group
  /// in the request the 'cohort' dimension must be present.
  public var cohortSpec: Google_Analytics_Data_V1alpha_CohortSpec {
    get {return _cohortSpec ?? Google_Analytics_Data_V1alpha_CohortSpec()}
    set {_cohortSpec = newValue}
  }
  /// Returns true if `cohortSpec` has been explicitly set.
  public var hasCohortSpec: Bool {return self._cohortSpec != nil}
  /// Clears the value of `cohortSpec`. Subsequent reads from it will return its default value.
  public mutating func clearCohortSpec() {self._cohortSpec = nil}

  /// If false or unspecified, each row with all metrics equal to 0 will not be
  /// returned. If true, these rows will be returned if they are not separately
  /// removed by a filter.
  public var keepEmptyRows: Bool = false

  /// Toggles whether to return the current state of this Analytics Property's
  /// quota. Quota is returned in [PropertyQuota](#PropertyQuota).
  public var returnPropertyQuota: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entity: Google_Analytics_Data_V1alpha_Entity? = nil
  fileprivate var _dimensionFilter: Google_Analytics_Data_V1alpha_FilterExpression? = nil
  fileprivate var _metricFilter: Google_Analytics_Data_V1alpha_FilterExpression? = nil
  fileprivate var _cohortSpec: Google_Analytics_Data_V1alpha_CohortSpec? = nil
}

/// The response pivot report table corresponding to a pivot request.
public struct Google_Analytics_Data_V1alpha_RunPivotReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Summarizes the columns and rows created by a pivot. Each pivot in the
  /// request produces one header in the response. If we have a request like
  /// this:
  ///
  ///     "pivots": [{
  ///       "fieldNames": ["country",
  ///         "city"]
  ///     },
  ///     {
  ///       "fieldNames": "eventName"
  ///     }]
  ///
  /// We will have the following `pivotHeaders` in the response:
  ///
  ///     "pivotHeaders" : [{
  ///       "dimensionHeaders": [{
  ///         "dimensionValues": [
  ///            { "value": "United Kingdom" },
  ///            { "value": "London" }
  ///          ]
  ///       },
  ///       {
  ///         "dimensionValues": [
  ///         { "value": "Japan" },
  ///         { "value": "Osaka" }
  ///         ]
  ///       }]
  ///     },
  ///     {
  ///       "dimensionHeaders": [{
  ///         "dimensionValues": [{ "value": "session_start" }]
  ///       },
  ///       {
  ///         "dimensionValues": [{ "value": "scroll" }]
  ///       }]
  ///     }]
  public var pivotHeaders: [Google_Analytics_Data_V1alpha_PivotHeader] = []

  /// Describes dimension columns. The number of DimensionHeaders and ordering of
  /// DimensionHeaders matches the dimensions present in rows.
  public var dimensionHeaders: [Google_Analytics_Data_V1alpha_DimensionHeader] = []

  /// Describes metric columns. The number of MetricHeaders and ordering of
  /// MetricHeaders matches the metrics present in rows.
  public var metricHeaders: [Google_Analytics_Data_V1alpha_MetricHeader] = []

  /// Rows of dimension value combinations and metric values in the report.
  public var rows: [Google_Analytics_Data_V1alpha_Row] = []

  /// Aggregation of metric values. Can be totals, minimums, or maximums. The
  /// returned aggregations are controlled by the metric_aggregations in the
  /// pivot. The type of aggregation returned in each row is shown by the
  /// dimension_values which are set to "RESERVED_<MetricAggregation>".
  public var aggregates: [Google_Analytics_Data_V1alpha_Row] = []

  /// Metadata for the report.
  public var metadata: Google_Analytics_Data_V1alpha_ResponseMetaData {
    get {return _metadata ?? Google_Analytics_Data_V1alpha_ResponseMetaData()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// This Analytics Property's quota state including this request.
  public var propertyQuota: Google_Analytics_Data_V1alpha_PropertyQuota {
    get {return _propertyQuota ?? Google_Analytics_Data_V1alpha_PropertyQuota()}
    set {_propertyQuota = newValue}
  }
  /// Returns true if `propertyQuota` has been explicitly set.
  public var hasPropertyQuota: Bool {return self._propertyQuota != nil}
  /// Clears the value of `propertyQuota`. Subsequent reads from it will return its default value.
  public mutating func clearPropertyQuota() {self._propertyQuota = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Google_Analytics_Data_V1alpha_ResponseMetaData? = nil
  fileprivate var _propertyQuota: Google_Analytics_Data_V1alpha_PropertyQuota? = nil
}

/// The batch request containing multiple report requests.
public struct Google_Analytics_Data_V1alpha_BatchRunReportsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A property whose events are tracked. This entity must be specified for the
  /// batch. The entity within RunReportRequest may either be unspecified or
  /// consistent with this entity.
  public var entity: Google_Analytics_Data_V1alpha_Entity {
    get {return _entity ?? Google_Analytics_Data_V1alpha_Entity()}
    set {_entity = newValue}
  }
  /// Returns true if `entity` has been explicitly set.
  public var hasEntity: Bool {return self._entity != nil}
  /// Clears the value of `entity`. Subsequent reads from it will return its default value.
  public mutating func clearEntity() {self._entity = nil}

  /// Individual requests. Each request has a separate report response. Each
  /// batch request is allowed up to 5 requests.
  public var requests: [Google_Analytics_Data_V1alpha_RunReportRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entity: Google_Analytics_Data_V1alpha_Entity? = nil
}

/// The batch response containing multiple reports.
public struct Google_Analytics_Data_V1alpha_BatchRunReportsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Individual responses. Each response has a separate report request.
  public var reports: [Google_Analytics_Data_V1alpha_RunReportResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The batch request containing multiple pivot report requests.
public struct Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A property whose events are tracked. This entity must be specified for the
  /// batch. The entity within RunPivotReportRequest may either be unspecified or
  /// consistent with this entity.
  public var entity: Google_Analytics_Data_V1alpha_Entity {
    get {return _entity ?? Google_Analytics_Data_V1alpha_Entity()}
    set {_entity = newValue}
  }
  /// Returns true if `entity` has been explicitly set.
  public var hasEntity: Bool {return self._entity != nil}
  /// Clears the value of `entity`. Subsequent reads from it will return its default value.
  public mutating func clearEntity() {self._entity = nil}

  /// Individual requests. Each request has a separate pivot report response.
  /// Each batch request is allowed up to 5 requests.
  public var requests: [Google_Analytics_Data_V1alpha_RunPivotReportRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entity: Google_Analytics_Data_V1alpha_Entity? = nil
}

/// The batch response containing multiple pivot reports.
public struct Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Individual responses. Each response has a separate pivot report request.
  public var pivotReports: [Google_Analytics_Data_V1alpha_RunPivotReportResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the universal dimension and metric metadata.
public struct Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The dimensions and metrics currently accepted in reporting methods.
public struct Google_Analytics_Data_V1alpha_UniversalMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The dimensions descriptions.
  public var dimensions: [Google_Analytics_Data_V1alpha_DimensionMetadata] = []

  /// The metric descriptions.
  public var metrics: [Google_Analytics_Data_V1alpha_MetricMetadata] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for a property's dimension and metric metadata.
public struct Google_Analytics_Data_V1alpha_GetMetadataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the metadata to retrieve. This name field is
  /// specified in the URL path and not URL parameters. Property is a numeric
  /// Google Analytics 4 (GA4) Property identifier.
  ///
  /// Example: properties/1234/metadata
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request to generate a realtime report.
public struct Google_Analytics_Data_V1alpha_RunRealtimeReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A Google Analytics GA4 property identifier whose events are tracked.
  /// Specified in the URL path and not the body. To learn more, see [where to
  /// find your Property
  /// ID](https://developers.google.com/analytics/trusted-testing/analytics-data/property-id).
  ///
  /// Example: properties/1234
  public var property: String = String()

  /// The dimensions requested and displayed.
  public var dimensions: [Google_Analytics_Data_V1alpha_Dimension] = []

  /// The metrics requested and displayed.
  public var metrics: [Google_Analytics_Data_V1alpha_Metric] = []

  /// The number of rows to return. If unspecified, 10 rows are returned. If
  /// -1, all rows are returned.
  public var limit: Int64 = 0

  /// The filter clause of dimensions. Dimensions must be requested to be used in
  /// this filter. Metrics cannot be used in this filter.
  public var dimensionFilter: Google_Analytics_Data_V1alpha_FilterExpression {
    get {return _dimensionFilter ?? Google_Analytics_Data_V1alpha_FilterExpression()}
    set {_dimensionFilter = newValue}
  }
  /// Returns true if `dimensionFilter` has been explicitly set.
  public var hasDimensionFilter: Bool {return self._dimensionFilter != nil}
  /// Clears the value of `dimensionFilter`. Subsequent reads from it will return its default value.
  public mutating func clearDimensionFilter() {self._dimensionFilter = nil}

  /// The filter clause of metrics. Applied at post aggregation phase, similar to
  /// SQL having-clause. Metrics must be requested to be used in this filter.
  /// Dimensions cannot be used in this filter.
  public var metricFilter: Google_Analytics_Data_V1alpha_FilterExpression {
    get {return _metricFilter ?? Google_Analytics_Data_V1alpha_FilterExpression()}
    set {_metricFilter = newValue}
  }
  /// Returns true if `metricFilter` has been explicitly set.
  public var hasMetricFilter: Bool {return self._metricFilter != nil}
  /// Clears the value of `metricFilter`. Subsequent reads from it will return its default value.
  public mutating func clearMetricFilter() {self._metricFilter = nil}

  /// Aggregation of metrics. Aggregated metric values will be shown in rows
  /// where the dimension_values are set to "RESERVED_(MetricAggregation)".
  public var metricAggregations: [Google_Analytics_Data_V1alpha_MetricAggregation] = []

  /// Specifies how rows are ordered in the response.
  public var orderBys: [Google_Analytics_Data_V1alpha_OrderBy] = []

  /// Toggles whether to return the current state of this Analytics Property's
  /// Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
  public var returnPropertyQuota: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dimensionFilter: Google_Analytics_Data_V1alpha_FilterExpression? = nil
  fileprivate var _metricFilter: Google_Analytics_Data_V1alpha_FilterExpression? = nil
}

/// The response realtime report table corresponding to a request.
public struct Google_Analytics_Data_V1alpha_RunRealtimeReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Describes dimension columns. The number of DimensionHeaders and ordering of
  /// DimensionHeaders matches the dimensions present in rows.
  public var dimensionHeaders: [Google_Analytics_Data_V1alpha_DimensionHeader] = []

  /// Describes metric columns. The number of MetricHeaders and ordering of
  /// MetricHeaders matches the metrics present in rows.
  public var metricHeaders: [Google_Analytics_Data_V1alpha_MetricHeader] = []

  /// Rows of dimension value combinations and metric values in the report.
  public var rows: [Google_Analytics_Data_V1alpha_Row] = []

  /// If requested, the totaled values of metrics.
  public var totals: [Google_Analytics_Data_V1alpha_Row] = []

  /// If requested, the maximum values of metrics.
  public var maximums: [Google_Analytics_Data_V1alpha_Row] = []

  /// If requested, the minimum values of metrics.
  public var minimums: [Google_Analytics_Data_V1alpha_Row] = []

  /// The total number of rows in the query result, regardless of the number of
  /// rows returned in the response. For example if a query returns 175 rows and
  /// includes limit = 50 in the API request, the response will contain row_count
  /// = 175 but only 50 rows.
  public var rowCount: Int32 = 0

  /// This Analytics Property's Realtime quota state including this request.
  public var propertyQuota: Google_Analytics_Data_V1alpha_PropertyQuota {
    get {return _propertyQuota ?? Google_Analytics_Data_V1alpha_PropertyQuota()}
    set {_propertyQuota = newValue}
  }
  /// Returns true if `propertyQuota` has been explicitly set.
  public var hasPropertyQuota: Bool {return self._propertyQuota != nil}
  /// Clears the value of `propertyQuota`. Subsequent reads from it will return its default value.
  public mutating func clearPropertyQuota() {self._propertyQuota = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _propertyQuota: Google_Analytics_Data_V1alpha_PropertyQuota? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.analytics.data.v1alpha"

extension Google_Analytics_Data_V1alpha_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Metadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "name"),
    1: .same(proto: "dimensions"),
    2: .same(proto: "metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dimensions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dimensions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensions, fieldNumber: 1)
    }
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_Metadata, rhs: Google_Analytics_Data_V1alpha_Metadata) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.dimensions != rhs.dimensions {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_RunReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "dimensions"),
    3: .same(proto: "metrics"),
    4: .standard(proto: "date_ranges"),
    5: .same(proto: "offset"),
    6: .same(proto: "limit"),
    7: .standard(proto: "metric_aggregations"),
    8: .standard(proto: "dimension_filter"),
    9: .standard(proto: "metric_filter"),
    10: .standard(proto: "order_bys"),
    11: .standard(proto: "currency_code"),
    12: .standard(proto: "cohort_spec"),
    13: .standard(proto: "keep_empty_rows"),
    14: .standard(proto: "return_property_quota"),
  ]

  fileprivate class _StorageClass {
    var _entity: Google_Analytics_Data_V1alpha_Entity? = nil
    var _dimensions: [Google_Analytics_Data_V1alpha_Dimension] = []
    var _metrics: [Google_Analytics_Data_V1alpha_Metric] = []
    var _dateRanges: [Google_Analytics_Data_V1alpha_DateRange] = []
    var _offset: Int64 = 0
    var _limit: Int64 = 0
    var _metricAggregations: [Google_Analytics_Data_V1alpha_MetricAggregation] = []
    var _dimensionFilter: Google_Analytics_Data_V1alpha_FilterExpression? = nil
    var _metricFilter: Google_Analytics_Data_V1alpha_FilterExpression? = nil
    var _orderBys: [Google_Analytics_Data_V1alpha_OrderBy] = []
    var _currencyCode: String = String()
    var _cohortSpec: Google_Analytics_Data_V1alpha_CohortSpec? = nil
    var _keepEmptyRows: Bool = false
    var _returnPropertyQuota: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entity = source._entity
      _dimensions = source._dimensions
      _metrics = source._metrics
      _dateRanges = source._dateRanges
      _offset = source._offset
      _limit = source._limit
      _metricAggregations = source._metricAggregations
      _dimensionFilter = source._dimensionFilter
      _metricFilter = source._metricFilter
      _orderBys = source._orderBys
      _currencyCode = source._currencyCode
      _cohortSpec = source._cohortSpec
      _keepEmptyRows = source._keepEmptyRows
      _returnPropertyQuota = source._returnPropertyQuota
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._entity) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._dimensions) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._metrics) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._dateRanges) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._offset) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._limit) }()
        case 7: try { try decoder.decodeRepeatedEnumField(value: &_storage._metricAggregations) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._dimensionFilter) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._metricFilter) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._orderBys) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._currencyCode) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._cohortSpec) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._keepEmptyRows) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._returnPropertyQuota) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._dimensions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dimensions, fieldNumber: 2)
      }
      if !_storage._metrics.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._metrics, fieldNumber: 3)
      }
      if !_storage._dateRanges.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dateRanges, fieldNumber: 4)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._offset, fieldNumber: 5)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._limit, fieldNumber: 6)
      }
      if !_storage._metricAggregations.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._metricAggregations, fieldNumber: 7)
      }
      if let v = _storage._dimensionFilter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._metricFilter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._orderBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._orderBys, fieldNumber: 10)
      }
      if !_storage._currencyCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currencyCode, fieldNumber: 11)
      }
      if let v = _storage._cohortSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._keepEmptyRows != false {
        try visitor.visitSingularBoolField(value: _storage._keepEmptyRows, fieldNumber: 13)
      }
      if _storage._returnPropertyQuota != false {
        try visitor.visitSingularBoolField(value: _storage._returnPropertyQuota, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_RunReportRequest, rhs: Google_Analytics_Data_V1alpha_RunReportRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._dimensions != rhs_storage._dimensions {return false}
        if _storage._metrics != rhs_storage._metrics {return false}
        if _storage._dateRanges != rhs_storage._dateRanges {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._limit != rhs_storage._limit {return false}
        if _storage._metricAggregations != rhs_storage._metricAggregations {return false}
        if _storage._dimensionFilter != rhs_storage._dimensionFilter {return false}
        if _storage._metricFilter != rhs_storage._metricFilter {return false}
        if _storage._orderBys != rhs_storage._orderBys {return false}
        if _storage._currencyCode != rhs_storage._currencyCode {return false}
        if _storage._cohortSpec != rhs_storage._cohortSpec {return false}
        if _storage._keepEmptyRows != rhs_storage._keepEmptyRows {return false}
        if _storage._returnPropertyQuota != rhs_storage._returnPropertyQuota {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_RunReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunReportResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "dimension_headers"),
    1: .standard(proto: "metric_headers"),
    2: .same(proto: "rows"),
    8: .same(proto: "totals"),
    9: .same(proto: "maximums"),
    10: .same(proto: "minimums"),
    12: .standard(proto: "row_count"),
    6: .same(proto: "metadata"),
    7: .standard(proto: "property_quota"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.metricHeaders) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._propertyQuota) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.totals) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.maximums) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.minimums) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.dimensionHeaders) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.rowCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metricHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metricHeaders, fieldNumber: 1)
    }
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._propertyQuota {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.totals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totals, fieldNumber: 8)
    }
    if !self.maximums.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.maximums, fieldNumber: 9)
    }
    if !self.minimums.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minimums, fieldNumber: 10)
    }
    if !self.dimensionHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensionHeaders, fieldNumber: 11)
    }
    if self.rowCount != 0 {
      try visitor.visitSingularInt32Field(value: self.rowCount, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_RunReportResponse, rhs: Google_Analytics_Data_V1alpha_RunReportResponse) -> Bool {
    if lhs.dimensionHeaders != rhs.dimensionHeaders {return false}
    if lhs.metricHeaders != rhs.metricHeaders {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.totals != rhs.totals {return false}
    if lhs.maximums != rhs.maximums {return false}
    if lhs.minimums != rhs.minimums {return false}
    if lhs.rowCount != rhs.rowCount {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._propertyQuota != rhs._propertyQuota {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_RunPivotReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunPivotReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "dimensions"),
    3: .same(proto: "metrics"),
    4: .standard(proto: "dimension_filter"),
    5: .standard(proto: "metric_filter"),
    6: .same(proto: "pivots"),
    7: .standard(proto: "date_ranges"),
    8: .standard(proto: "currency_code"),
    9: .standard(proto: "cohort_spec"),
    10: .standard(proto: "keep_empty_rows"),
    11: .standard(proto: "return_property_quota"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._entity) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.dimensions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._dimensionFilter) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._metricFilter) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.pivots) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.dateRanges) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.currencyCode) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._cohortSpec) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.keepEmptyRows) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.returnPropertyQuota) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.dimensions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensions, fieldNumber: 2)
    }
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 3)
    }
    if let v = self._dimensionFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._metricFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.pivots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pivots, fieldNumber: 6)
    }
    if !self.dateRanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dateRanges, fieldNumber: 7)
    }
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 8)
    }
    if let v = self._cohortSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if self.keepEmptyRows != false {
      try visitor.visitSingularBoolField(value: self.keepEmptyRows, fieldNumber: 10)
    }
    if self.returnPropertyQuota != false {
      try visitor.visitSingularBoolField(value: self.returnPropertyQuota, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_RunPivotReportRequest, rhs: Google_Analytics_Data_V1alpha_RunPivotReportRequest) -> Bool {
    if lhs._entity != rhs._entity {return false}
    if lhs.dimensions != rhs.dimensions {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs._dimensionFilter != rhs._dimensionFilter {return false}
    if lhs._metricFilter != rhs._metricFilter {return false}
    if lhs.pivots != rhs.pivots {return false}
    if lhs.dateRanges != rhs.dateRanges {return false}
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs._cohortSpec != rhs._cohortSpec {return false}
    if lhs.keepEmptyRows != rhs.keepEmptyRows {return false}
    if lhs.returnPropertyQuota != rhs.returnPropertyQuota {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_RunPivotReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunPivotReportResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pivot_headers"),
    7: .standard(proto: "dimension_headers"),
    2: .standard(proto: "metric_headers"),
    3: .same(proto: "rows"),
    4: .same(proto: "aggregates"),
    5: .same(proto: "metadata"),
    6: .standard(proto: "property_quota"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pivotHeaders) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.metricHeaders) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.aggregates) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._propertyQuota) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.dimensionHeaders) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pivotHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pivotHeaders, fieldNumber: 1)
    }
    if !self.metricHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metricHeaders, fieldNumber: 2)
    }
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 3)
    }
    if !self.aggregates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.aggregates, fieldNumber: 4)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._propertyQuota {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.dimensionHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensionHeaders, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_RunPivotReportResponse, rhs: Google_Analytics_Data_V1alpha_RunPivotReportResponse) -> Bool {
    if lhs.pivotHeaders != rhs.pivotHeaders {return false}
    if lhs.dimensionHeaders != rhs.dimensionHeaders {return false}
    if lhs.metricHeaders != rhs.metricHeaders {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.aggregates != rhs.aggregates {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._propertyQuota != rhs._propertyQuota {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_BatchRunReportsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchRunReportsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._entity) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.requests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_BatchRunReportsRequest, rhs: Google_Analytics_Data_V1alpha_BatchRunReportsRequest) -> Bool {
    if lhs._entity != rhs._entity {return false}
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_BatchRunReportsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchRunReportsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reports"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.reports) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reports.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reports, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_BatchRunReportsResponse, rhs: Google_Analytics_Data_V1alpha_BatchRunReportsResponse) -> Bool {
    if lhs.reports != rhs.reports {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchRunPivotReportsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._entity) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.requests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest, rhs: Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest) -> Bool {
    if lhs._entity != rhs._entity {return false}
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchRunPivotReportsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pivot_reports"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pivotReports) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pivotReports.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pivotReports, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse, rhs: Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse) -> Bool {
    if lhs.pivotReports != rhs.pivotReports {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUniversalMetadataRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest, rhs: Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_UniversalMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UniversalMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dimensions"),
    2: .same(proto: "metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dimensions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dimensions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensions, fieldNumber: 1)
    }
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_UniversalMetadata, rhs: Google_Analytics_Data_V1alpha_UniversalMetadata) -> Bool {
    if lhs.dimensions != rhs.dimensions {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_GetMetadataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMetadataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_GetMetadataRequest, rhs: Google_Analytics_Data_V1alpha_GetMetadataRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_RunRealtimeReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunRealtimeReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "property"),
    2: .same(proto: "dimensions"),
    3: .same(proto: "metrics"),
    4: .same(proto: "limit"),
    5: .standard(proto: "dimension_filter"),
    6: .standard(proto: "metric_filter"),
    7: .standard(proto: "metric_aggregations"),
    8: .standard(proto: "order_bys"),
    9: .standard(proto: "return_property_quota"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.property) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.dimensions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.limit) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._dimensionFilter) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._metricFilter) }()
      case 7: try { try decoder.decodeRepeatedEnumField(value: &self.metricAggregations) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.orderBys) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.returnPropertyQuota) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.property.isEmpty {
      try visitor.visitSingularStringField(value: self.property, fieldNumber: 1)
    }
    if !self.dimensions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensions, fieldNumber: 2)
    }
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 3)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt64Field(value: self.limit, fieldNumber: 4)
    }
    if let v = self._dimensionFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._metricFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.metricAggregations.isEmpty {
      try visitor.visitPackedEnumField(value: self.metricAggregations, fieldNumber: 7)
    }
    if !self.orderBys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orderBys, fieldNumber: 8)
    }
    if self.returnPropertyQuota != false {
      try visitor.visitSingularBoolField(value: self.returnPropertyQuota, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_RunRealtimeReportRequest, rhs: Google_Analytics_Data_V1alpha_RunRealtimeReportRequest) -> Bool {
    if lhs.property != rhs.property {return false}
    if lhs.dimensions != rhs.dimensions {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs._dimensionFilter != rhs._dimensionFilter {return false}
    if lhs._metricFilter != rhs._metricFilter {return false}
    if lhs.metricAggregations != rhs.metricAggregations {return false}
    if lhs.orderBys != rhs.orderBys {return false}
    if lhs.returnPropertyQuota != rhs.returnPropertyQuota {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Analytics_Data_V1alpha_RunRealtimeReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunRealtimeReportResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dimension_headers"),
    2: .standard(proto: "metric_headers"),
    3: .same(proto: "rows"),
    4: .same(proto: "totals"),
    5: .same(proto: "maximums"),
    6: .same(proto: "minimums"),
    7: .standard(proto: "row_count"),
    8: .standard(proto: "property_quota"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dimensionHeaders) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.metricHeaders) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.totals) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.maximums) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.minimums) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.rowCount) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._propertyQuota) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dimensionHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimensionHeaders, fieldNumber: 1)
    }
    if !self.metricHeaders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metricHeaders, fieldNumber: 2)
    }
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 3)
    }
    if !self.totals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totals, fieldNumber: 4)
    }
    if !self.maximums.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.maximums, fieldNumber: 5)
    }
    if !self.minimums.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minimums, fieldNumber: 6)
    }
    if self.rowCount != 0 {
      try visitor.visitSingularInt32Field(value: self.rowCount, fieldNumber: 7)
    }
    if let v = self._propertyQuota {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Analytics_Data_V1alpha_RunRealtimeReportResponse, rhs: Google_Analytics_Data_V1alpha_RunRealtimeReportResponse) -> Bool {
    if lhs.dimensionHeaders != rhs.dimensionHeaders {return false}
    if lhs.metricHeaders != rhs.metricHeaders {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.totals != rhs.totals {return false}
    if lhs.maximums != rhs.maximums {return false}
    if lhs.minimums != rhs.minimums {return false}
    if lhs.rowCount != rhs.rowCount {return false}
    if lhs._propertyQuota != rhs._propertyQuota {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
