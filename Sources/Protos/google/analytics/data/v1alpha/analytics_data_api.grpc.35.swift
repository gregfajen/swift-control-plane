//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/analytics/data/v1alpha/analytics_data_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Analytics_Data_V1alpha_AlphaAnalyticsDataClient, then call methods of this protocol to make API calls.
public protocol Google_Analytics_Data_V1alpha_AlphaAnalyticsDataClientProtocol: GRPCClient {
  func runReport(
    _ request: Google_Analytics_Data_V1alpha_RunReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_RunReportRequest, Google_Analytics_Data_V1alpha_RunReportResponse>

  func runPivotReport(
    _ request: Google_Analytics_Data_V1alpha_RunPivotReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_RunPivotReportRequest, Google_Analytics_Data_V1alpha_RunPivotReportResponse>

  func batchRunReports(
    _ request: Google_Analytics_Data_V1alpha_BatchRunReportsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_BatchRunReportsRequest, Google_Analytics_Data_V1alpha_BatchRunReportsResponse>

  func batchRunPivotReports(
    _ request: Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest, Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse>

  func getUniversalMetadata(
    _ request: Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest, Google_Analytics_Data_V1alpha_UniversalMetadata>

  func getMetadata(
    _ request: Google_Analytics_Data_V1alpha_GetMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_GetMetadataRequest, Google_Analytics_Data_V1alpha_Metadata>

  func runRealtimeReport(
    _ request: Google_Analytics_Data_V1alpha_RunRealtimeReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_RunRealtimeReportRequest, Google_Analytics_Data_V1alpha_RunRealtimeReportResponse>

}

extension Google_Analytics_Data_V1alpha_AlphaAnalyticsDataClientProtocol {

  /// Returns a customized report of your Google Analytics event data. Reports
  /// contain statistics derived from data collected by the Google Analytics
  /// tracking code. The data returned from the API is as a table with columns
  /// for the requested dimensions and metrics. Metrics are individual
  /// measurements of user activity on your property, such as active users or
  /// event count. Dimensions break down metrics across some common criteria,
  /// such as country or event name.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func runReport(
    _ request: Google_Analytics_Data_V1alpha_RunReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_RunReportRequest, Google_Analytics_Data_V1alpha_RunReportResponse> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunReport",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a customized pivot report of your Google Analytics event data.
  /// Pivot reports are more advanced and expressive formats than regular
  /// reports. In a pivot report, dimensions are only visible if they are
  /// included in a pivot. Multiple pivots can be specified to further dissect
  /// your data.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunPivotReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func runPivotReport(
    _ request: Google_Analytics_Data_V1alpha_RunPivotReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_RunPivotReportRequest, Google_Analytics_Data_V1alpha_RunPivotReportResponse> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunPivotReport",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns multiple reports in a batch. All reports must be for the same
  /// Entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchRunReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchRunReports(
    _ request: Google_Analytics_Data_V1alpha_BatchRunReportsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_BatchRunReportsRequest, Google_Analytics_Data_V1alpha_BatchRunReportsResponse> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns multiple pivot reports in a batch. All reports must be for the same
  /// Entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchRunPivotReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchRunPivotReports(
    _ request: Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest, Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunPivotReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for dimensions and metrics available in reporting methods.
  /// Used to explore the dimensions and metrics. Dimensions and metrics will be
  /// mostly added over time, but renames and deletions may occur.
  ///
  /// This method returns Universal Metadata. Universal Metadata are dimensions
  /// and metrics applicable to any property such as `country` and `totalUsers`.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUniversalMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUniversalMetadata(
    _ request: Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest, Google_Analytics_Data_V1alpha_UniversalMetadata> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetUniversalMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for dimensions and metrics available in reporting methods.
  /// Used to explore the dimensions and metrics. In this method, a Google
  /// Analytics 4 (GA4) Property Identifier is specified in the request, and
  /// the metadata response includes Custom dimensions and metrics as well as
  /// Universal metadata.
  ///
  /// For example if a custom metric with parameter name `levels_unlocked` is
  /// registered to a property, the Metadata response will contain
  /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
  /// metrics applicable to any property such as `country` and `totalUsers`.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMetadata(
    _ request: Google_Analytics_Data_V1alpha_GetMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_GetMetadataRequest, Google_Analytics_Data_V1alpha_Metadata> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// The Google Analytics Realtime API returns a customized report of realtime
  /// event data for your property. These reports show events and usage from the
  /// last 30 minutes.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunRealtimeReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func runRealtimeReport(
    _ request: Google_Analytics_Data_V1alpha_RunRealtimeReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Analytics_Data_V1alpha_RunRealtimeReportRequest, Google_Analytics_Data_V1alpha_RunRealtimeReportResponse> {
    return self.makeUnaryCall(
      path: "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunRealtimeReport",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Analytics_Data_V1alpha_AlphaAnalyticsDataClient: Google_Analytics_Data_V1alpha_AlphaAnalyticsDataClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.analytics.data.v1alpha.AlphaAnalyticsData service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Analytics_Data_V1alpha_AlphaAnalyticsDataProvider: CallHandlerProvider {
  /// Returns a customized report of your Google Analytics event data. Reports
  /// contain statistics derived from data collected by the Google Analytics
  /// tracking code. The data returned from the API is as a table with columns
  /// for the requested dimensions and metrics. Metrics are individual
  /// measurements of user activity on your property, such as active users or
  /// event count. Dimensions break down metrics across some common criteria,
  /// such as country or event name.
  func runReport(request: Google_Analytics_Data_V1alpha_RunReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_RunReportResponse>
  /// Returns a customized pivot report of your Google Analytics event data.
  /// Pivot reports are more advanced and expressive formats than regular
  /// reports. In a pivot report, dimensions are only visible if they are
  /// included in a pivot. Multiple pivots can be specified to further dissect
  /// your data.
  func runPivotReport(request: Google_Analytics_Data_V1alpha_RunPivotReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_RunPivotReportResponse>
  /// Returns multiple reports in a batch. All reports must be for the same
  /// Entity.
  func batchRunReports(request: Google_Analytics_Data_V1alpha_BatchRunReportsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_BatchRunReportsResponse>
  /// Returns multiple pivot reports in a batch. All reports must be for the same
  /// Entity.
  func batchRunPivotReports(request: Google_Analytics_Data_V1alpha_BatchRunPivotReportsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_BatchRunPivotReportsResponse>
  /// Returns metadata for dimensions and metrics available in reporting methods.
  /// Used to explore the dimensions and metrics. Dimensions and metrics will be
  /// mostly added over time, but renames and deletions may occur.
  ///
  /// This method returns Universal Metadata. Universal Metadata are dimensions
  /// and metrics applicable to any property such as `country` and `totalUsers`.
  func getUniversalMetadata(request: Google_Analytics_Data_V1alpha_GetUniversalMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_UniversalMetadata>
  /// Returns metadata for dimensions and metrics available in reporting methods.
  /// Used to explore the dimensions and metrics. In this method, a Google
  /// Analytics 4 (GA4) Property Identifier is specified in the request, and
  /// the metadata response includes Custom dimensions and metrics as well as
  /// Universal metadata.
  ///
  /// For example if a custom metric with parameter name `levels_unlocked` is
  /// registered to a property, the Metadata response will contain
  /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
  /// metrics applicable to any property such as `country` and `totalUsers`.
  func getMetadata(request: Google_Analytics_Data_V1alpha_GetMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_Metadata>
  /// The Google Analytics Realtime API returns a customized report of realtime
  /// event data for your property. These reports show events and usage from the
  /// last 30 minutes.
  func runRealtimeReport(request: Google_Analytics_Data_V1alpha_RunRealtimeReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Analytics_Data_V1alpha_RunRealtimeReportResponse>
}

extension Google_Analytics_Data_V1alpha_AlphaAnalyticsDataProvider {
  public var serviceName: Substring { return "google.analytics.data.v1alpha.AlphaAnalyticsData" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "RunReport":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runReport(request: request, context: context)
        }
      }

    case "RunPivotReport":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runPivotReport(request: request, context: context)
        }
      }

    case "BatchRunReports":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchRunReports(request: request, context: context)
        }
      }

    case "BatchRunPivotReports":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchRunPivotReports(request: request, context: context)
        }
      }

    case "GetUniversalMetadata":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getUniversalMetadata(request: request, context: context)
        }
      }

    case "GetMetadata":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getMetadata(request: request, context: context)
        }
      }

    case "RunRealtimeReport":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runRealtimeReport(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

