// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/servicemanagement/v1/resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The full representation of a Service that is managed by
/// Google Service Management.
public struct Google_Api_Servicemanagement_V1_ManagedService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the service. See the [overview](/service-management/overview)
  /// for naming requirements.
  public var serviceName: String = String()

  /// ID of the project that produces and owns this service.
  public var producerProjectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The metadata associated with a long running operation resource.
public struct Google_Api_Servicemanagement_V1_OperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The full name of the resources that this operation is directly
  /// associated with.
  public var resourceNames: [String] = []

  /// Detailed status information for each step. The order is undetermined.
  public var steps: [Google_Api_Servicemanagement_V1_OperationMetadata.Step] = []

  /// Percentage of completion of this operation, ranging from 0 to 100.
  public var progressPercentage: Int32 = 0

  /// The start time of the operation.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Code describes the status of the operation (or one of its steps).
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecifed code.
    case unspecified // = 0

    /// The operation or step has completed without errors.
    case done // = 1

    /// The operation or step has not started yet.
    case notStarted // = 2

    /// The operation or step is in progress.
    case inProgress // = 3

    /// The operation or step has completed with errors. If the operation is
    /// rollbackable, the rollback completed with errors too.
    case failed // = 4

    /// The operation or step has completed with cancellation.
    case cancelled // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .done
      case 2: self = .notStarted
      case 3: self = .inProgress
      case 4: self = .failed
      case 5: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .done: return 1
      case .notStarted: return 2
      case .inProgress: return 3
      case .failed: return 4
      case .cancelled: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Represents the status of one operation step.
  public struct Step {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The short description of the step.
    public var description_p: String = String()

    /// The status code.
    public var status: Google_Api_Servicemanagement_V1_OperationMetadata.Status = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Api_Servicemanagement_V1_OperationMetadata.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_Servicemanagement_V1_OperationMetadata.Status] = [
    .unspecified,
    .done,
    .notStarted,
    .inProgress,
    .failed,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

/// Represents a diagnostic message (error or warning)
public struct Google_Api_Servicemanagement_V1_Diagnostic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// File name and line number of the error or warning.
  public var location: String = String()

  /// The kind of diagnostic information provided.
  public var kind: Google_Api_Servicemanagement_V1_Diagnostic.Kind = .warning

  /// Message describing the error or warning.
  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The kind of diagnostic information possible.
  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Warnings and errors
    case warning // = 0

    /// Only errors
    case error // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .warning
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .warning
      case 1: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .warning: return 0
      case .error: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Api_Servicemanagement_V1_Diagnostic.Kind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_Servicemanagement_V1_Diagnostic.Kind] = [
    .warning,
    .error,
  ]
}

#endif  // swift(>=4.2)

/// Represents a source file which is used to generate the service configuration
/// defined by `google.api.Service`.
public struct Google_Api_Servicemanagement_V1_ConfigSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A unique ID for a specific instance of this message, typically assigned
  /// by the client for tracking purpose. If empty, the server may choose to
  /// generate one instead.
  public var id: String = String()

  /// Set of source configuration files that are used to generate a service
  /// configuration (`google.api.Service`).
  public var files: [Google_Api_Servicemanagement_V1_ConfigFile] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generic specification of a source configuration file
public struct Google_Api_Servicemanagement_V1_ConfigFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The file name of the configuration file (full or relative path).
  public var filePath: String = String()

  /// The bytes that constitute the file.
  public var fileContents: Data = SwiftProtobuf.Internal.emptyData

  /// The type of configuration file this represents.
  public var fileType: Google_Api_Servicemanagement_V1_ConfigFile.FileType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum FileType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown file type.
    case unspecified // = 0

    /// YAML-specification of service.
    case serviceConfigYaml // = 1

    /// OpenAPI specification, serialized in JSON.
    case openApiJson // = 2

    /// OpenAPI specification, serialized in YAML.
    case openApiYaml // = 3

    /// FileDescriptorSet, generated by protoc.
    ///
    /// To generate, use protoc with imports and source info included.
    /// For an example test.proto file, the following command would put the value
    /// in a new file named out.pb.
    ///
    /// $protoc --include_imports --include_source_info test.proto -o out.pb
    case fileDescriptorSetProto // = 4

    /// Uncompiled Proto file. Used for storage and display purposes only,
    /// currently server-side compilation is not supported. Should match the
    /// inputs to 'protoc' command used to generated FILE_DESCRIPTOR_SET_PROTO. A
    /// file of this type can only be included if at least one file of type
    /// FILE_DESCRIPTOR_SET_PROTO is included.
    case protoFile // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .serviceConfigYaml
      case 2: self = .openApiJson
      case 3: self = .openApiYaml
      case 4: self = .fileDescriptorSetProto
      case 6: self = .protoFile
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .serviceConfigYaml: return 1
      case .openApiJson: return 2
      case .openApiYaml: return 3
      case .fileDescriptorSetProto: return 4
      case .protoFile: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Api_Servicemanagement_V1_ConfigFile.FileType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_Servicemanagement_V1_ConfigFile.FileType] = [
    .unspecified,
    .serviceConfigYaml,
    .openApiJson,
    .openApiYaml,
    .fileDescriptorSetProto,
    .protoFile,
  ]
}

#endif  // swift(>=4.2)

/// Represents a service configuration with its name and id.
public struct Google_Api_Servicemanagement_V1_ConfigRef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource name of a service config. It must have the following
  /// format: "services/{service name}/configs/{config id}".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Change report associated with a particular service configuration.
///
/// It contains a list of ConfigChanges based on the comparison between
/// two service configurations.
public struct Google_Api_Servicemanagement_V1_ChangeReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of changes between two service configurations.
  /// The changes will be alphabetically sorted based on the identifier
  /// of each change.
  /// A ConfigChange identifier is a dot separated path to the configuration.
  /// Example: visibility.rules[selector='LibraryService.CreateBook'].restriction
  public var configChanges: [Google_Api_ConfigChange] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A rollout resource that defines how service configuration versions are pushed
/// to control plane systems. Typically, you create a new version of the
/// service config, and then create a Rollout to push the service config.
public struct Google_Api_Servicemanagement_V1_Rollout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Unique identifier of this Rollout. Must be no longer than 63 characters
  /// and only lower case letters, digits, '.', '_' and '-' are allowed.
  ///
  /// If not specified by client, the server will generate one. The generated id
  /// will have the form of <date><revision number>, where "date" is the create
  /// date in ISO 8601 format.  "revision number" is a monotonically increasing
  /// positive number that is reset every day for each service.
  /// An example of the generated rollout_id is '2016-02-16r1'
  public var rolloutID: String = String()

  /// Creation time of the rollout. Readonly.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The user who created the Rollout. Readonly.
  public var createdBy: String = String()

  /// The status of this rollout. Readonly. In case of a failed rollout,
  /// the system will automatically rollback to the current Rollout
  /// version. Readonly.
  public var status: Google_Api_Servicemanagement_V1_Rollout.RolloutStatus = .unspecified

  /// Strategy that defines which versions of service configurations should be
  /// pushed
  /// and how they should be used at runtime.
  public var strategy: Google_Api_Servicemanagement_V1_Rollout.OneOf_Strategy? = nil

  /// Google Service Control selects service configurations based on
  /// traffic percentage.
  public var trafficPercentStrategy: Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy {
    get {
      if case .trafficPercentStrategy(let v)? = strategy {return v}
      return Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy()
    }
    set {strategy = .trafficPercentStrategy(newValue)}
  }

  /// The strategy associated with a rollout to delete a `ManagedService`.
  /// Readonly.
  public var deleteServiceStrategy: Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy {
    get {
      if case .deleteServiceStrategy(let v)? = strategy {return v}
      return Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy()
    }
    set {strategy = .deleteServiceStrategy(newValue)}
  }

  /// The name of the service associated with this Rollout.
  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Strategy that defines which versions of service configurations should be
  /// pushed
  /// and how they should be used at runtime.
  public enum OneOf_Strategy: Equatable {
    /// Google Service Control selects service configurations based on
    /// traffic percentage.
    case trafficPercentStrategy(Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy)
    /// The strategy associated with a rollout to delete a `ManagedService`.
    /// Readonly.
    case deleteServiceStrategy(Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_Servicemanagement_V1_Rollout.OneOf_Strategy, rhs: Google_Api_Servicemanagement_V1_Rollout.OneOf_Strategy) -> Bool {
      switch (lhs, rhs) {
      case (.trafficPercentStrategy(let l), .trafficPercentStrategy(let r)): return l == r
      case (.deleteServiceStrategy(let l), .deleteServiceStrategy(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Status of a Rollout.
  public enum RolloutStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// No status specified.
    case unspecified // = 0

    /// The Rollout is in progress.
    case inProgress // = 1

    /// The Rollout has completed successfully.
    case success // = 2

    /// The Rollout has been cancelled. This can happen if you have overlapping
    /// Rollout pushes, and the previous ones will be cancelled.
    case cancelled // = 3

    /// The Rollout has failed and the rollback attempt has failed too.
    case failed // = 4

    /// The Rollout has not started yet and is pending for execution.
    case pending // = 5

    /// The Rollout has failed and rolled back to the previous successful
    /// Rollout.
    case failedRolledBack // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .inProgress
      case 2: self = .success
      case 3: self = .cancelled
      case 4: self = .failed
      case 5: self = .pending
      case 6: self = .failedRolledBack
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .inProgress: return 1
      case .success: return 2
      case .cancelled: return 3
      case .failed: return 4
      case .pending: return 5
      case .failedRolledBack: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Strategy that specifies how clients of Google Service Controller want to
  /// send traffic to use different config versions. This is generally
  /// used by API proxy to split traffic based on your configured percentage for
  /// each config version.
  ///
  /// One example of how to gradually rollout a new service configuration using
  /// this
  /// strategy:
  /// Day 1
  ///
  ///     Rollout {
  ///       id: "example.googleapis.com/rollout_20160206"
  ///       traffic_percent_strategy {
  ///         percentages: {
  ///           "example.googleapis.com/20160201": 70.00
  ///           "example.googleapis.com/20160206": 30.00
  ///         }
  ///       }
  ///     }
  ///
  /// Day 2
  ///
  ///     Rollout {
  ///       id: "example.googleapis.com/rollout_20160207"
  ///       traffic_percent_strategy: {
  ///         percentages: {
  ///           "example.googleapis.com/20160206": 100.00
  ///         }
  ///       }
  ///     }
  public struct TrafficPercentStrategy {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Maps service configuration IDs to their corresponding traffic percentage.
    /// Key is the service configuration ID, Value is the traffic percentage
    /// which must be greater than 0.0 and the sum must equal to 100.0.
    public var percentages: Dictionary<String,Double> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Strategy used to delete a service. This strategy is a placeholder only
  /// used by the system generated rollout to delete a service.
  public struct DeleteServiceStrategy {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Api_Servicemanagement_V1_Rollout.RolloutStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_Servicemanagement_V1_Rollout.RolloutStatus] = [
    .unspecified,
    .inProgress,
    .success,
    .cancelled,
    .failed,
    .pending,
    .failedRolledBack,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.servicemanagement.v1"

extension Google_Api_Servicemanagement_V1_ManagedService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ManagedService"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "service_name"),
    3: .standard(proto: "producer_project_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 3: try decoder.decodeSingularStringField(value: &self.producerProjectID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 2)
    }
    if !self.producerProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.producerProjectID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ManagedService, rhs: Google_Api_Servicemanagement_V1_ManagedService) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.producerProjectID != rhs.producerProjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_OperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_names"),
    2: .same(proto: "steps"),
    3: .standard(proto: "progress_percentage"),
    4: .standard(proto: "start_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.resourceNames)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.steps)
      case 3: try decoder.decodeSingularInt32Field(value: &self.progressPercentage)
      case 4: try decoder.decodeSingularMessageField(value: &self._startTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.resourceNames, fieldNumber: 1)
    }
    if !self.steps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.steps, fieldNumber: 2)
    }
    if self.progressPercentage != 0 {
      try visitor.visitSingularInt32Field(value: self.progressPercentage, fieldNumber: 3)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_OperationMetadata, rhs: Google_Api_Servicemanagement_V1_OperationMetadata) -> Bool {
    if lhs.resourceNames != rhs.resourceNames {return false}
    if lhs.steps != rhs.steps {return false}
    if lhs.progressPercentage != rhs.progressPercentage {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_OperationMetadata.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSPECIFIED"),
    1: .same(proto: "DONE"),
    2: .same(proto: "NOT_STARTED"),
    3: .same(proto: "IN_PROGRESS"),
    4: .same(proto: "FAILED"),
    5: .same(proto: "CANCELLED"),
  ]
}

extension Google_Api_Servicemanagement_V1_OperationMetadata.Step: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Servicemanagement_V1_OperationMetadata.protoMessageName + ".Step"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "description"),
    4: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_OperationMetadata.Step, rhs: Google_Api_Servicemanagement_V1_OperationMetadata.Step) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_Diagnostic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Diagnostic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "kind"),
    3: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.location)
      case 2: try decoder.decodeSingularEnumField(value: &self.kind)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 1)
    }
    if self.kind != .warning {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_Diagnostic, rhs: Google_Api_Servicemanagement_V1_Diagnostic) -> Bool {
    if lhs.location != rhs.location {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_Diagnostic.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WARNING"),
    1: .same(proto: "ERROR"),
  ]
}

extension Google_Api_Servicemanagement_V1_ConfigSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "id"),
    2: .same(proto: "files"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.files)
      case 5: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.files.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.files, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ConfigSource, rhs: Google_Api_Servicemanagement_V1_ConfigSource) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.files != rhs.files {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ConfigFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigFile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_path"),
    3: .standard(proto: "file_contents"),
    4: .standard(proto: "file_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.filePath)
      case 3: try decoder.decodeSingularBytesField(value: &self.fileContents)
      case 4: try decoder.decodeSingularEnumField(value: &self.fileType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filePath.isEmpty {
      try visitor.visitSingularStringField(value: self.filePath, fieldNumber: 1)
    }
    if !self.fileContents.isEmpty {
      try visitor.visitSingularBytesField(value: self.fileContents, fieldNumber: 3)
    }
    if self.fileType != .unspecified {
      try visitor.visitSingularEnumField(value: self.fileType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ConfigFile, rhs: Google_Api_Servicemanagement_V1_ConfigFile) -> Bool {
    if lhs.filePath != rhs.filePath {return false}
    if lhs.fileContents != rhs.fileContents {return false}
    if lhs.fileType != rhs.fileType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ConfigFile.FileType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FILE_TYPE_UNSPECIFIED"),
    1: .same(proto: "SERVICE_CONFIG_YAML"),
    2: .same(proto: "OPEN_API_JSON"),
    3: .same(proto: "OPEN_API_YAML"),
    4: .same(proto: "FILE_DESCRIPTOR_SET_PROTO"),
    6: .same(proto: "PROTO_FILE"),
  ]
}

extension Google_Api_Servicemanagement_V1_ConfigRef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigRef"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ConfigRef, rhs: Google_Api_Servicemanagement_V1_ConfigRef) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_ChangeReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_changes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.configChanges)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.configChanges, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_ChangeReport, rhs: Google_Api_Servicemanagement_V1_ChangeReport) -> Bool {
    if lhs.configChanges != rhs.configChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_Rollout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Rollout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rollout_id"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "created_by"),
    4: .same(proto: "status"),
    5: .standard(proto: "traffic_percent_strategy"),
    200: .standard(proto: "delete_service_strategy"),
    8: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rolloutID)
      case 2: try decoder.decodeSingularMessageField(value: &self._createTime)
      case 3: try decoder.decodeSingularStringField(value: &self.createdBy)
      case 4: try decoder.decodeSingularEnumField(value: &self.status)
      case 5:
        var v: Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy?
        if let current = self.strategy {
          try decoder.handleConflictingOneOf()
          if case .trafficPercentStrategy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.strategy = .trafficPercentStrategy(v)}
      case 8: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 200:
        var v: Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy?
        if let current = self.strategy {
          try decoder.handleConflictingOneOf()
          if case .deleteServiceStrategy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.strategy = .deleteServiceStrategy(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rolloutID.isEmpty {
      try visitor.visitSingularStringField(value: self.rolloutID, fieldNumber: 1)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.createdBy.isEmpty {
      try visitor.visitSingularStringField(value: self.createdBy, fieldNumber: 3)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    if case .trafficPercentStrategy(let v)? = self.strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 8)
    }
    if case .deleteServiceStrategy(let v)? = self.strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_Rollout, rhs: Google_Api_Servicemanagement_V1_Rollout) -> Bool {
    if lhs.rolloutID != rhs.rolloutID {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.status != rhs.status {return false}
    if lhs.strategy != rhs.strategy {return false}
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_Rollout.RolloutStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLLOUT_STATUS_UNSPECIFIED"),
    1: .same(proto: "IN_PROGRESS"),
    2: .same(proto: "SUCCESS"),
    3: .same(proto: "CANCELLED"),
    4: .same(proto: "FAILED"),
    5: .same(proto: "PENDING"),
    6: .same(proto: "FAILED_ROLLED_BACK"),
  ]
}

extension Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Servicemanagement_V1_Rollout.protoMessageName + ".TrafficPercentStrategy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "percentages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &self.percentages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.percentages.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: self.percentages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy, rhs: Google_Api_Servicemanagement_V1_Rollout.TrafficPercentStrategy) -> Bool {
    if lhs.percentages != rhs.percentages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Servicemanagement_V1_Rollout.protoMessageName + ".DeleteServiceStrategy"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy, rhs: Google_Api_Servicemanagement_V1_Rollout.DeleteServiceStrategy) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
