// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/backend.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// `Backend` defines the backend configuration for a service.
public struct Google_Api_Backend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of API backend rules that apply to individual API methods.
  ///
  /// **NOTE:** All service configuration rules follow "last one wins" order.
  public var rules: [Google_Api_BackendRule] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A backend rule provides configuration for an individual API element.
public struct Google_Api_BackendRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Selects the methods to which this rule applies.
  ///
  /// Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
  public var selector: String = String()

  /// The address of the API backend.
  ///
  /// The scheme is used to determine the backend protocol and security.
  /// The following schemes are accepted:
  ///
  ///    SCHEME        PROTOCOL    SECURITY
  ///    http://       HTTP        None
  ///    https://      HTTP        TLS
  ///    grpc://       gRPC        None
  ///    grpcs://      gRPC        TLS
  ///
  /// It is recommended to explicitly include a scheme. Leaving out the scheme
  /// may cause constrasting behaviors across platforms.
  ///
  /// If the port is unspecified, the default is:
  /// - 80 for schemes without TLS
  /// - 443 for schemes with TLS
  ///
  /// For HTTP backends, use [protocol][google.api.BackendRule.protocol]
  /// to specify the protocol version.
  public var address: String = String()

  /// The number of seconds to wait for a response from a request. The default
  /// varies based on the request protocol and deployment environment.
  public var deadline: Double = 0

  /// Minimum deadline in seconds needed for this method. Calls having deadline
  /// value lower than this will be rejected.
  public var minDeadline: Double = 0

  /// The number of seconds to wait for the completion of a long running
  /// operation. The default is no deadline.
  public var operationDeadline: Double = 0

  public var pathTranslation: Google_Api_BackendRule.PathTranslation = .unspecified

  /// Authentication settings used by the backend.
  ///
  /// These are typically used to provide service management functionality to
  /// a backend served on a publicly-routable URL. The `authentication`
  /// details should match the authentication behavior used by the backend.
  ///
  /// For example, specifying `jwt_audience` implies that the backend expects
  /// authentication via a JWT.
  ///
  /// When authentication is unspecified, the resulting behavior is the same
  /// as `disable_auth` set to `true`.
  ///
  /// Refer to https://developers.google.com/identity/protocols/OpenIDConnect for
  /// JWT ID token.
  public var authentication: Google_Api_BackendRule.OneOf_Authentication? = nil

  /// The JWT audience is used when generating a JWT ID token for the backend.
  /// This ID token will be added in the HTTP "authorization" header, and sent
  /// to the backend.
  public var jwtAudience: String {
    get {
      if case .jwtAudience(let v)? = authentication {return v}
      return String()
    }
    set {authentication = .jwtAudience(newValue)}
  }

  /// When disable_auth is true, a JWT ID token won't be generated and the
  /// original "Authorization" HTTP header will be preserved. If the header is
  /// used to carry the original token and is expected by the backend, this
  /// field must be set to true to preserve the header.
  public var disableAuth: Bool {
    get {
      if case .disableAuth(let v)? = authentication {return v}
      return false
    }
    set {authentication = .disableAuth(newValue)}
  }

  /// The protocol used for sending a request to the backend.
  /// The supported values are "http/1.1" and "h2".
  ///
  /// The default value is inferred from the scheme in the
  /// [address][google.api.BackendRule.address] field:
  ///
  ///    SCHEME        PROTOCOL
  ///    http://       http/1.1
  ///    https://      http/1.1
  ///    grpc://       h2
  ///    grpcs://      h2
  ///
  /// For secure HTTP backends (https://) that support HTTP/2, set this field
  /// to "h2" for improved performance.
  ///
  /// Configuring this field to non-default values is only supported for secure
  /// HTTP backends. This field will be ignored for all other backends.
  ///
  /// See
  /// https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
  /// for more details on the supported values.
  public var `protocol`: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Authentication settings used by the backend.
  ///
  /// These are typically used to provide service management functionality to
  /// a backend served on a publicly-routable URL. The `authentication`
  /// details should match the authentication behavior used by the backend.
  ///
  /// For example, specifying `jwt_audience` implies that the backend expects
  /// authentication via a JWT.
  ///
  /// When authentication is unspecified, the resulting behavior is the same
  /// as `disable_auth` set to `true`.
  ///
  /// Refer to https://developers.google.com/identity/protocols/OpenIDConnect for
  /// JWT ID token.
  public enum OneOf_Authentication: Equatable {
    /// The JWT audience is used when generating a JWT ID token for the backend.
    /// This ID token will be added in the HTTP "authorization" header, and sent
    /// to the backend.
    case jwtAudience(String)
    /// When disable_auth is true, a JWT ID token won't be generated and the
    /// original "Authorization" HTTP header will be preserved. If the header is
    /// used to carry the original token and is expected by the backend, this
    /// field must be set to true to preserve the header.
    case disableAuth(Bool)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_BackendRule.OneOf_Authentication, rhs: Google_Api_BackendRule.OneOf_Authentication) -> Bool {
      switch (lhs, rhs) {
      case (.jwtAudience(let l), .jwtAudience(let r)): return l == r
      case (.disableAuth(let l), .disableAuth(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Path Translation specifies how to combine the backend address with the
  /// request path in order to produce the appropriate forwarding URL for the
  /// request.
  ///
  /// Path Translation is applicable only to HTTP-based backends. Backends which
  /// do not accept requests over HTTP/HTTPS should leave `path_translation`
  /// unspecified.
  public enum PathTranslation: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Use the backend address as-is, with no modification to the path. If the
    /// URL pattern contains variables, the variable names and values will be
    /// appended to the query string. If a query string parameter and a URL
    /// pattern variable have the same name, this may result in duplicate keys in
    /// the query string.
    ///
    /// # Examples
    ///
    /// Given the following operation config:
    ///
    ///     Method path:        /api/company/{cid}/user/{uid}
    ///     Backend address:    https://example.cloudfunctions.net/getUser
    ///
    /// Requests to the following request paths will call the backend at the
    /// translated path:
    ///
    ///     Request path: /api/company/widgetworks/user/johndoe
    ///     Translated:
    ///     https://example.cloudfunctions.net/getUser?cid=widgetworks&uid=johndoe
    ///
    ///     Request path: /api/company/widgetworks/user/johndoe?timezone=EST
    ///     Translated:
    ///     https://example.cloudfunctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe
    case constantAddress // = 1

    /// The request path will be appended to the backend address.
    ///
    /// # Examples
    ///
    /// Given the following operation config:
    ///
    ///     Method path:        /api/company/{cid}/user/{uid}
    ///     Backend address:    https://example.appspot.com
    ///
    /// Requests to the following request paths will call the backend at the
    /// translated path:
    ///
    ///     Request path: /api/company/widgetworks/user/johndoe
    ///     Translated:
    ///     https://example.appspot.com/api/company/widgetworks/user/johndoe
    ///
    ///     Request path: /api/company/widgetworks/user/johndoe?timezone=EST
    ///     Translated:
    ///     https://example.appspot.com/api/company/widgetworks/user/johndoe?timezone=EST
    case appendPathToAddress // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .constantAddress
      case 2: self = .appendPathToAddress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .constantAddress: return 1
      case .appendPathToAddress: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Api_BackendRule.PathTranslation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_BackendRule.PathTranslation] = [
    .unspecified,
    .constantAddress,
    .appendPathToAddress,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api"

extension Google_Api_Backend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Backend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rules"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rules)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rules, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Backend, rhs: Google_Api_Backend) -> Bool {
    if lhs.rules != rhs.rules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_BackendRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BackendRule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selector"),
    2: .same(proto: "address"),
    3: .same(proto: "deadline"),
    4: .standard(proto: "min_deadline"),
    5: .standard(proto: "operation_deadline"),
    6: .standard(proto: "path_translation"),
    7: .standard(proto: "jwt_audience"),
    8: .standard(proto: "disable_auth"),
    9: .same(proto: "protocol"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.selector)
      case 2: try decoder.decodeSingularStringField(value: &self.address)
      case 3: try decoder.decodeSingularDoubleField(value: &self.deadline)
      case 4: try decoder.decodeSingularDoubleField(value: &self.minDeadline)
      case 5: try decoder.decodeSingularDoubleField(value: &self.operationDeadline)
      case 6: try decoder.decodeSingularEnumField(value: &self.pathTranslation)
      case 7:
        if self.authentication != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.authentication = .jwtAudience(v)}
      case 8:
        if self.authentication != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.authentication = .disableAuth(v)}
      case 9: try decoder.decodeSingularStringField(value: &self.`protocol`)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selector.isEmpty {
      try visitor.visitSingularStringField(value: self.selector, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if self.deadline != 0 {
      try visitor.visitSingularDoubleField(value: self.deadline, fieldNumber: 3)
    }
    if self.minDeadline != 0 {
      try visitor.visitSingularDoubleField(value: self.minDeadline, fieldNumber: 4)
    }
    if self.operationDeadline != 0 {
      try visitor.visitSingularDoubleField(value: self.operationDeadline, fieldNumber: 5)
    }
    if self.pathTranslation != .unspecified {
      try visitor.visitSingularEnumField(value: self.pathTranslation, fieldNumber: 6)
    }
    switch self.authentication {
    case .jwtAudience(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    case .disableAuth(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    case nil: break
    }
    if !self.`protocol`.isEmpty {
      try visitor.visitSingularStringField(value: self.`protocol`, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_BackendRule, rhs: Google_Api_BackendRule) -> Bool {
    if lhs.selector != rhs.selector {return false}
    if lhs.address != rhs.address {return false}
    if lhs.deadline != rhs.deadline {return false}
    if lhs.minDeadline != rhs.minDeadline {return false}
    if lhs.operationDeadline != rhs.operationDeadline {return false}
    if lhs.pathTranslation != rhs.pathTranslation {return false}
    if lhs.authentication != rhs.authentication {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_BackendRule.PathTranslation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PATH_TRANSLATION_UNSPECIFIED"),
    1: .same(proto: "CONSTANT_ADDRESS"),
    2: .same(proto: "APPEND_PATH_TO_ADDRESS"),
  ]
}
