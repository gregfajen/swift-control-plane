// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/expr/v1beta1/decl.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A declaration.
public struct Google_Api_Expr_V1beta1_Decl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the declaration.
  public var id: Int32 = 0

  /// The name of the declaration.
  public var name: String = String()

  /// The documentation string for the declaration.
  public var doc: String = String()

  /// The kind of declaration.
  public var kind: Google_Api_Expr_V1beta1_Decl.OneOf_Kind? = nil

  /// An identifier declaration.
  public var ident: Google_Api_Expr_V1beta1_IdentDecl {
    get {
      if case .ident(let v)? = kind {return v}
      return Google_Api_Expr_V1beta1_IdentDecl()
    }
    set {kind = .ident(newValue)}
  }

  /// A function declaration.
  public var function: Google_Api_Expr_V1beta1_FunctionDecl {
    get {
      if case .function(let v)? = kind {return v}
      return Google_Api_Expr_V1beta1_FunctionDecl()
    }
    set {kind = .function(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The kind of declaration.
  public enum OneOf_Kind: Equatable {
    /// An identifier declaration.
    case ident(Google_Api_Expr_V1beta1_IdentDecl)
    /// A function declaration.
    case function(Google_Api_Expr_V1beta1_FunctionDecl)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_Expr_V1beta1_Decl.OneOf_Kind, rhs: Google_Api_Expr_V1beta1_Decl.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.ident, .ident): return {
        guard case .ident(let l) = lhs, case .ident(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.function, .function): return {
        guard case .function(let l) = lhs, case .function(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The declared type of a variable.
///
/// Extends runtime type values with extra information used for type checking
/// and dispatching.
public struct Google_Api_Expr_V1beta1_DeclType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The expression id of the declared type, if applicable.
  public var id: Int32 = 0

  /// The type name, e.g. 'int', 'my.type.Type' or 'T'
  public var type: String = String()

  /// An ordered list of type parameters, e.g. `<string, int>`.
  /// Only applies to a subset of types, e.g. `map`, `list`.
  public var typeParams: [Google_Api_Expr_V1beta1_DeclType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An identifier declaration.
public struct Google_Api_Expr_V1beta1_IdentDecl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional type of the identifier.
  public var type: Google_Api_Expr_V1beta1_DeclType {
    get {return _type ?? Google_Api_Expr_V1beta1_DeclType()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// Optional value of the identifier.
  public var value: Google_Api_Expr_V1beta1_Expr {
    get {return _value ?? Google_Api_Expr_V1beta1_Expr()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: Google_Api_Expr_V1beta1_DeclType? = nil
  fileprivate var _value: Google_Api_Expr_V1beta1_Expr? = nil
}

/// A function declaration.
public struct Google_Api_Expr_V1beta1_FunctionDecl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The function arguments.
  public var args: [Google_Api_Expr_V1beta1_IdentDecl] = []

  /// Optional declared return type.
  public var returnType: Google_Api_Expr_V1beta1_DeclType {
    get {return _returnType ?? Google_Api_Expr_V1beta1_DeclType()}
    set {_returnType = newValue}
  }
  /// Returns true if `returnType` has been explicitly set.
  public var hasReturnType: Bool {return self._returnType != nil}
  /// Clears the value of `returnType`. Subsequent reads from it will return its default value.
  public mutating func clearReturnType() {self._returnType = nil}

  /// If the first argument of the function is the receiver.
  public var receiverFunction: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _returnType: Google_Api_Expr_V1beta1_DeclType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.expr.v1beta1"

extension Google_Api_Expr_V1beta1_Decl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Decl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "doc"),
    4: .same(proto: "ident"),
    5: .same(proto: "function"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.doc) }()
      case 4: try {
        var v: Google_Api_Expr_V1beta1_IdentDecl?
        if let current = self.kind {
          try decoder.handleConflictingOneOf()
          if case .ident(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.kind = .ident(v)}
      }()
      case 5: try {
        var v: Google_Api_Expr_V1beta1_FunctionDecl?
        if let current = self.kind {
          try decoder.handleConflictingOneOf()
          if case .function(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.kind = .function(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.doc.isEmpty {
      try visitor.visitSingularStringField(value: self.doc, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.kind {
    case .ident?: try {
      guard case .ident(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .function?: try {
      guard case .function(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_Decl, rhs: Google_Api_Expr_V1beta1_Decl) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.doc != rhs.doc {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_DeclType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeclType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    4: .standard(proto: "type_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.typeParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.typeParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.typeParams, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_DeclType, rhs: Google_Api_Expr_V1beta1_DeclType) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.typeParams != rhs.typeParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_IdentDecl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IdentDecl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "type"),
    4: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_IdentDecl, rhs: Google_Api_Expr_V1beta1_IdentDecl) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_FunctionDecl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FunctionDecl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "args"),
    2: .standard(proto: "return_type"),
    3: .standard(proto: "receiver_function"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.args) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._returnType) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.receiverFunction) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.args.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.args, fieldNumber: 1)
    }
    if let v = self._returnType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.receiverFunction != false {
      try visitor.visitSingularBoolField(value: self.receiverFunction, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_FunctionDecl, rhs: Google_Api_Expr_V1beta1_FunctionDecl) -> Bool {
    if lhs.args != rhs.args {return false}
    if lhs._returnType != rhs._returnType {return false}
    if lhs.receiverFunction != rhs.receiverFunction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
