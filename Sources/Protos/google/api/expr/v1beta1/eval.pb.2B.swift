// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/expr/v1beta1/eval.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The state of an evaluation.
///
/// Can represent an initial, partial, or completed state of evaluation.
public struct Google_Api_Expr_V1beta1_EvalState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique values referenced in this message.
  public var values: [Google_Api_Expr_V1beta1_ExprValue] = []

  /// An ordered list of results.
  ///
  /// Tracks the flow of evaluation through the expression.
  /// May be sparse.
  public var results: [Google_Api_Expr_V1beta1_EvalState.Result] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A single evaluation result.
  public struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The expression this result is for.
    public var expr: Google_Api_Expr_V1beta1_IdRef {
      get {return _expr ?? Google_Api_Expr_V1beta1_IdRef()}
      set {_expr = newValue}
    }
    /// Returns true if `expr` has been explicitly set.
    public var hasExpr: Bool {return self._expr != nil}
    /// Clears the value of `expr`. Subsequent reads from it will return its default value.
    public mutating func clearExpr() {self._expr = nil}

    /// The index in `values` of the resulting value.
    public var value: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _expr: Google_Api_Expr_V1beta1_IdRef? = nil
  }

  public init() {}
}

/// The value of an evaluated expression.
public struct Google_Api_Expr_V1beta1_ExprValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An expression can resolve to a value, error or unknown.
  public var kind: Google_Api_Expr_V1beta1_ExprValue.OneOf_Kind? = nil

  /// A concrete value.
  public var value: Google_Api_Expr_V1beta1_Value {
    get {
      if case .value(let v)? = kind {return v}
      return Google_Api_Expr_V1beta1_Value()
    }
    set {kind = .value(newValue)}
  }

  /// The set of errors in the critical path of evalution.
  ///
  /// Only errors in the critical path are included. For example,
  /// `(<error1> || true) && <error2>` will only result in `<error2>`,
  /// while `<error1> || <error2>` will result in both `<error1>` and
  /// `<error2>`.
  ///
  /// Errors cause by the presence of other errors are not included in the
  /// set. For example `<error1>.foo`, `foo(<error1>)`, and `<error1> + 1` will
  /// only result in `<error1>`.
  ///
  /// Multiple errors *might* be included when evaluation could result
  /// in different errors. For example `<error1> + <error2>` and
  /// `foo(<error1>, <error2>)` may result in `<error1>`, `<error2>` or both.
  /// The exact subset of errors included for this case is unspecified and
  /// depends on the implementation details of the evaluator.
  public var error: Google_Api_Expr_V1beta1_ErrorSet {
    get {
      if case .error(let v)? = kind {return v}
      return Google_Api_Expr_V1beta1_ErrorSet()
    }
    set {kind = .error(newValue)}
  }

  /// The set of unknowns in the critical path of evaluation.
  ///
  /// Unknown behaves identically to Error with regards to propagation.
  /// Specifically, only unknowns in the critical path are included, unknowns
  /// caused by the presence of other unknowns are not included, and multiple
  /// unknowns *might* be included included when evaluation could result in
  /// different unknowns. For example:
  ///
  ///     (<unknown[1]> || true) && <unknown[2]> -> <unknown[2]>
  ///     <unknown[1]> || <unknown[2]> -> <unknown[1,2]>
  ///     <unknown[1]>.foo -> <unknown[1]>
  ///     foo(<unknown[1]>) -> <unknown[1]>
  ///     <unknown[1]> + <unknown[2]> -> <unknown[1]> or <unknown[2[>
  ///
  /// Unknown takes precidence over Error in cases where a `Value` can short
  /// circuit the result:
  ///
  ///     <error> || <unknown> -> <unknown>
  ///     <error> && <unknown> -> <unknown>
  ///
  /// Errors take precidence in all other cases:
  ///
  ///     <unknown> + <error> -> <error>
  ///     foo(<unknown>, <error>) -> <error>
  public var unknown: Google_Api_Expr_V1beta1_UnknownSet {
    get {
      if case .unknown(let v)? = kind {return v}
      return Google_Api_Expr_V1beta1_UnknownSet()
    }
    set {kind = .unknown(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An expression can resolve to a value, error or unknown.
  public enum OneOf_Kind: Equatable {
    /// A concrete value.
    case value(Google_Api_Expr_V1beta1_Value)
    /// The set of errors in the critical path of evalution.
    ///
    /// Only errors in the critical path are included. For example,
    /// `(<error1> || true) && <error2>` will only result in `<error2>`,
    /// while `<error1> || <error2>` will result in both `<error1>` and
    /// `<error2>`.
    ///
    /// Errors cause by the presence of other errors are not included in the
    /// set. For example `<error1>.foo`, `foo(<error1>)`, and `<error1> + 1` will
    /// only result in `<error1>`.
    ///
    /// Multiple errors *might* be included when evaluation could result
    /// in different errors. For example `<error1> + <error2>` and
    /// `foo(<error1>, <error2>)` may result in `<error1>`, `<error2>` or both.
    /// The exact subset of errors included for this case is unspecified and
    /// depends on the implementation details of the evaluator.
    case error(Google_Api_Expr_V1beta1_ErrorSet)
    /// The set of unknowns in the critical path of evaluation.
    ///
    /// Unknown behaves identically to Error with regards to propagation.
    /// Specifically, only unknowns in the critical path are included, unknowns
    /// caused by the presence of other unknowns are not included, and multiple
    /// unknowns *might* be included included when evaluation could result in
    /// different unknowns. For example:
    ///
    ///     (<unknown[1]> || true) && <unknown[2]> -> <unknown[2]>
    ///     <unknown[1]> || <unknown[2]> -> <unknown[1,2]>
    ///     <unknown[1]>.foo -> <unknown[1]>
    ///     foo(<unknown[1]>) -> <unknown[1]>
    ///     <unknown[1]> + <unknown[2]> -> <unknown[1]> or <unknown[2[>
    ///
    /// Unknown takes precidence over Error in cases where a `Value` can short
    /// circuit the result:
    ///
    ///     <error> || <unknown> -> <unknown>
    ///     <error> && <unknown> -> <unknown>
    ///
    /// Errors take precidence in all other cases:
    ///
    ///     <unknown> + <error> -> <error>
    ///     foo(<unknown>, <error>) -> <error>
    case unknown(Google_Api_Expr_V1beta1_UnknownSet)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_Expr_V1beta1_ExprValue.OneOf_Kind, rhs: Google_Api_Expr_V1beta1_ExprValue.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.value, .value): return {
        guard case .value(let l) = lhs, case .value(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unknown, .unknown): return {
        guard case .unknown(let l) = lhs, case .unknown(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// A set of errors.
///
/// The errors included depend on the context. See `ExprValue.error`.
public struct Google_Api_Expr_V1beta1_ErrorSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The errors in the set.
  public var errors: [Google_Rpc_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A set of expressions for which the value is unknown.
///
/// The unknowns included depend on the context. See `ExprValue.unknown`.
public struct Google_Api_Expr_V1beta1_UnknownSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ids of the expressions with unknown values.
  public var exprs: [Google_Api_Expr_V1beta1_IdRef] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A reference to an expression id.
public struct Google_Api_Expr_V1beta1_IdRef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The expression id.
  public var id: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.expr.v1beta1"

extension Google_Api_Expr_V1beta1_EvalState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EvalState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
    3: .same(proto: "results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_EvalState, rhs: Google_Api_Expr_V1beta1_EvalState) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.results != rhs.results {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_EvalState.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Expr_V1beta1_EvalState.protoMessageName + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "expr"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._expr) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._expr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_EvalState.Result, rhs: Google_Api_Expr_V1beta1_EvalState.Result) -> Bool {
    if lhs._expr != rhs._expr {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_ExprValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExprValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "error"),
    3: .same(proto: "unknown"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Api_Expr_V1beta1_Value?
        if let current = self.kind {
          try decoder.handleConflictingOneOf()
          if case .value(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.kind = .value(v)}
      }()
      case 2: try {
        var v: Google_Api_Expr_V1beta1_ErrorSet?
        if let current = self.kind {
          try decoder.handleConflictingOneOf()
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.kind = .error(v)}
      }()
      case 3: try {
        var v: Google_Api_Expr_V1beta1_UnknownSet?
        if let current = self.kind {
          try decoder.handleConflictingOneOf()
          if case .unknown(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.kind = .unknown(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.kind {
    case .value?: try {
      guard case .value(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .unknown?: try {
      guard case .unknown(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_ExprValue, rhs: Google_Api_Expr_V1beta1_ExprValue) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_ErrorSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.errors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_ErrorSet, rhs: Google_Api_Expr_V1beta1_ErrorSet) -> Bool {
    if lhs.errors != rhs.errors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_UnknownSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnknownSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exprs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.exprs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.exprs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exprs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_UnknownSet, rhs: Google_Api_Expr_V1beta1_UnknownSet) -> Bool {
    if lhs.exprs != rhs.exprs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1beta1_IdRef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IdRef"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1beta1_IdRef, rhs: Google_Api_Expr_V1beta1_IdRef) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
