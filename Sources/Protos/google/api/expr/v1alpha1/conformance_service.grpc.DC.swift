//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/api/expr/v1alpha1/conformance_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Google_Api_Expr_V1alpha1_ConformanceServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Api_Expr_V1alpha1_ConformanceServiceClientProtocol {
  func parse(_ request: Google_Api_Expr_V1alpha1_ParseRequest, callOptions: CallOptions?) -> UnaryCall<Google_Api_Expr_V1alpha1_ParseRequest, Google_Api_Expr_V1alpha1_ParseResponse>
  func check(_ request: Google_Api_Expr_V1alpha1_CheckRequest, callOptions: CallOptions?) -> UnaryCall<Google_Api_Expr_V1alpha1_CheckRequest, Google_Api_Expr_V1alpha1_CheckResponse>
  func eval(_ request: Google_Api_Expr_V1alpha1_EvalRequest, callOptions: CallOptions?) -> UnaryCall<Google_Api_Expr_V1alpha1_EvalRequest, Google_Api_Expr_V1alpha1_EvalResponse>
}

public final class Google_Api_Expr_V1alpha1_ConformanceServiceClient: GRPCClient, Google_Api_Expr_V1alpha1_ConformanceServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.api.expr.v1alpha1.ConformanceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Transforms CEL source text into a parsed representation.
  ///
  /// - Parameters:
  ///   - request: Request to send to Parse.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func parse(_ request: Google_Api_Expr_V1alpha1_ParseRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Api_Expr_V1alpha1_ParseRequest, Google_Api_Expr_V1alpha1_ParseResponse> {
    return self.makeUnaryCall(path: "/google.api.expr.v1alpha1.ConformanceService/Parse",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Runs static checks on a parsed CEL representation and return
  /// an annotated representation, or a set of issues.
  ///
  /// - Parameters:
  ///   - request: Request to send to Check.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func check(_ request: Google_Api_Expr_V1alpha1_CheckRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Api_Expr_V1alpha1_CheckRequest, Google_Api_Expr_V1alpha1_CheckResponse> {
    return self.makeUnaryCall(path: "/google.api.expr.v1alpha1.ConformanceService/Check",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Evaluates a parsed or annotation CEL representation given
  /// values of external bindings.
  ///
  /// - Parameters:
  ///   - request: Request to send to Eval.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func eval(_ request: Google_Api_Expr_V1alpha1_EvalRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Api_Expr_V1alpha1_EvalRequest, Google_Api_Expr_V1alpha1_EvalResponse> {
    return self.makeUnaryCall(path: "/google.api.expr.v1alpha1.ConformanceService/Eval",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Api_Expr_V1alpha1_ConformanceServiceProvider: CallHandlerProvider {
  /// Transforms CEL source text into a parsed representation.
  func parse(request: Google_Api_Expr_V1alpha1_ParseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Api_Expr_V1alpha1_ParseResponse>
  /// Runs static checks on a parsed CEL representation and return
  /// an annotated representation, or a set of issues.
  func check(request: Google_Api_Expr_V1alpha1_CheckRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Api_Expr_V1alpha1_CheckResponse>
  /// Evaluates a parsed or annotation CEL representation given
  /// values of external bindings.
  func eval(request: Google_Api_Expr_V1alpha1_EvalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Api_Expr_V1alpha1_EvalResponse>
}

extension Google_Api_Expr_V1alpha1_ConformanceServiceProvider {
  public var serviceName: String { return "google.api.expr.v1alpha1.ConformanceService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Parse":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.parse(request: request, context: context)
        }
      }

    case "Check":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.check(request: request, context: context)
        }
      }

    case "Eval":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.eval(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Google_Api_Expr_V1alpha1_ParseRequest: GRPCProtobufPayload {}
extension Google_Api_Expr_V1alpha1_ParseResponse: GRPCProtobufPayload {}
extension Google_Api_Expr_V1alpha1_CheckRequest: GRPCProtobufPayload {}
extension Google_Api_Expr_V1alpha1_CheckResponse: GRPCProtobufPayload {}
extension Google_Api_Expr_V1alpha1_EvalRequest: GRPCProtobufPayload {}
extension Google_Api_Expr_V1alpha1_EvalResponse: GRPCProtobufPayload {}

