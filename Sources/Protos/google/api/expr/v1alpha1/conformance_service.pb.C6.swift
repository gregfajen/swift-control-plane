// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/expr/v1alpha1/conformance_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for the Parse method.
public struct Google_Api_Expr_V1alpha1_ParseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Source text in CEL syntax.
  public var celSource: String = String()

  /// Tag for version of CEL syntax, for future use.
  public var syntaxVersion: String = String()

  /// File or resource for source text, used in [SourceInfo][google.api.expr.v1alpha1.SourceInfo].
  public var sourceLocation: String = String()

  /// Prevent macro expansion.  See "Macros" in Language Defiinition.
  public var disableMacros: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for the Parse method.
public struct Google_Api_Expr_V1alpha1_ParseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The parsed representation, or unset if parsing failed.
  public var parsedExpr: Google_Api_Expr_V1alpha1_ParsedExpr {
    get {return _parsedExpr ?? Google_Api_Expr_V1alpha1_ParsedExpr()}
    set {_parsedExpr = newValue}
  }
  /// Returns true if `parsedExpr` has been explicitly set.
  public var hasParsedExpr: Bool {return self._parsedExpr != nil}
  /// Clears the value of `parsedExpr`. Subsequent reads from it will return its default value.
  public mutating func clearParsedExpr() {self._parsedExpr = nil}

  /// Any number of issues with [StatusDetails][] as the details.
  public var issues: [Google_Rpc_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parsedExpr: Google_Api_Expr_V1alpha1_ParsedExpr? = nil
}

/// Request message for the Check method.
public struct Google_Api_Expr_V1alpha1_CheckRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parsed representation of the CEL program.
  public var parsedExpr: Google_Api_Expr_V1alpha1_ParsedExpr {
    get {return _parsedExpr ?? Google_Api_Expr_V1alpha1_ParsedExpr()}
    set {_parsedExpr = newValue}
  }
  /// Returns true if `parsedExpr` has been explicitly set.
  public var hasParsedExpr: Bool {return self._parsedExpr != nil}
  /// Clears the value of `parsedExpr`. Subsequent reads from it will return its default value.
  public mutating func clearParsedExpr() {self._parsedExpr = nil}

  /// Declarations of types for external variables and functions.
  /// Required if program uses external variables or functions
  /// not in the default environment.
  public var typeEnv: [Google_Api_Expr_V1alpha1_Decl] = []

  /// The protocol buffer context.  See "Name Resolution" in the
  /// Language Definition.
  public var container: String = String()

  /// If true, use only the declarations in [type_env][google.api.expr.v1alpha1.CheckRequest.type_env].  If false (default),
  /// add declarations for the standard definitions to the type environment.  See
  /// "Standard Definitions" in the Language Definition.
  public var noStdEnv: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parsedExpr: Google_Api_Expr_V1alpha1_ParsedExpr? = nil
}

/// Response message for the Check method.
public struct Google_Api_Expr_V1alpha1_CheckResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The annotated representation, or unset if checking failed.
  public var checkedExpr: Google_Api_Expr_V1alpha1_CheckedExpr {
    get {return _checkedExpr ?? Google_Api_Expr_V1alpha1_CheckedExpr()}
    set {_checkedExpr = newValue}
  }
  /// Returns true if `checkedExpr` has been explicitly set.
  public var hasCheckedExpr: Bool {return self._checkedExpr != nil}
  /// Clears the value of `checkedExpr`. Subsequent reads from it will return its default value.
  public mutating func clearCheckedExpr() {self._checkedExpr = nil}

  /// Any number of issues with [StatusDetails][] as the details.
  public var issues: [Google_Rpc_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _checkedExpr: Google_Api_Expr_V1alpha1_CheckedExpr? = nil
}

/// Request message for the Eval method.
public struct Google_Api_Expr_V1alpha1_EvalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Either the parsed or annotated representation of the CEL program.
  public var exprKind: Google_Api_Expr_V1alpha1_EvalRequest.OneOf_ExprKind? = nil

  /// Evaluate based on the parsed representation.
  public var parsedExpr: Google_Api_Expr_V1alpha1_ParsedExpr {
    get {
      if case .parsedExpr(let v)? = exprKind {return v}
      return Google_Api_Expr_V1alpha1_ParsedExpr()
    }
    set {exprKind = .parsedExpr(newValue)}
  }

  /// Evaluate based on the checked representation.
  public var checkedExpr: Google_Api_Expr_V1alpha1_CheckedExpr {
    get {
      if case .checkedExpr(let v)? = exprKind {return v}
      return Google_Api_Expr_V1alpha1_CheckedExpr()
    }
    set {exprKind = .checkedExpr(newValue)}
  }

  /// Bindings for the external variables.  The types SHOULD be compatible
  /// with the type environment in [CheckRequest][google.api.expr.v1alpha1.CheckRequest], if checked.
  public var bindings: Dictionary<String,Google_Api_Expr_V1alpha1_ExprValue> = [:]

  /// SHOULD be the same container as used in [CheckRequest][google.api.expr.v1alpha1.CheckRequest], if checked.
  public var container: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Either the parsed or annotated representation of the CEL program.
  public enum OneOf_ExprKind: Equatable {
    /// Evaluate based on the parsed representation.
    case parsedExpr(Google_Api_Expr_V1alpha1_ParsedExpr)
    /// Evaluate based on the checked representation.
    case checkedExpr(Google_Api_Expr_V1alpha1_CheckedExpr)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_Expr_V1alpha1_EvalRequest.OneOf_ExprKind, rhs: Google_Api_Expr_V1alpha1_EvalRequest.OneOf_ExprKind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.parsedExpr, .parsedExpr): return {
        guard case .parsedExpr(let l) = lhs, case .parsedExpr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.checkedExpr, .checkedExpr): return {
        guard case .checkedExpr(let l) = lhs, case .checkedExpr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Response message for the Eval method.
public struct Google_Api_Expr_V1alpha1_EvalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The execution result, or unset if execution couldn't start.
  public var result: Google_Api_Expr_V1alpha1_ExprValue {
    get {return _result ?? Google_Api_Expr_V1alpha1_ExprValue()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  /// Any number of issues with [StatusDetails][] as the details.
  /// Note that CEL execution errors are reified into [ExprValue][google.api.expr.v1alpha1.ExprValue].
  /// Nevertheless, we'll allow out-of-band issues to be raised,
  /// which also makes the replies more regular.
  public var issues: [Google_Rpc_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Google_Api_Expr_V1alpha1_ExprValue? = nil
}

/// Warnings or errors in service execution are represented by
/// [google.rpc.Status][google.rpc.Status] messages, with the following message
/// in the details field.
public struct Google_Api_Expr_V1alpha1_IssueDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The severity of the issue.
  public var severity: Google_Api_Expr_V1alpha1_IssueDetails.Severity = .unspecified

  /// Position in the source, if known.
  public var position: Google_Api_Expr_V1alpha1_SourcePosition {
    get {return _position ?? Google_Api_Expr_V1alpha1_SourcePosition()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  /// Expression ID from [Expr][google.api.expr.v1alpha1.Expr], 0 if unknown.
  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Severities of issues.
  public enum Severity: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An unspecified severity.
    case unspecified // = 0

    /// Deprecation issue for statements and method that may no longer be
    /// supported or maintained.
    case deprecation // = 1

    /// Warnings such as: unused variables.
    case warning // = 2

    /// Errors such as: unmatched curly braces or variable redefinition.
    case error // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .deprecation
      case 2: self = .warning
      case 3: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .deprecation: return 1
      case .warning: return 2
      case .error: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _position: Google_Api_Expr_V1alpha1_SourcePosition? = nil
}

#if swift(>=4.2)

extension Google_Api_Expr_V1alpha1_IssueDetails.Severity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_Expr_V1alpha1_IssueDetails.Severity] = [
    .unspecified,
    .deprecation,
    .warning,
    .error,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.expr.v1alpha1"

extension Google_Api_Expr_V1alpha1_ParseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ParseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cel_source"),
    2: .standard(proto: "syntax_version"),
    3: .standard(proto: "source_location"),
    4: .standard(proto: "disable_macros"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.celSource) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.syntaxVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceLocation) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.disableMacros) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.celSource.isEmpty {
      try visitor.visitSingularStringField(value: self.celSource, fieldNumber: 1)
    }
    if !self.syntaxVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.syntaxVersion, fieldNumber: 2)
    }
    if !self.sourceLocation.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceLocation, fieldNumber: 3)
    }
    if self.disableMacros != false {
      try visitor.visitSingularBoolField(value: self.disableMacros, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_ParseRequest, rhs: Google_Api_Expr_V1alpha1_ParseRequest) -> Bool {
    if lhs.celSource != rhs.celSource {return false}
    if lhs.syntaxVersion != rhs.syntaxVersion {return false}
    if lhs.sourceLocation != rhs.sourceLocation {return false}
    if lhs.disableMacros != rhs.disableMacros {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_ParseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ParseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "parsed_expr"),
    2: .same(proto: "issues"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._parsedExpr) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.issues) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._parsedExpr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.issues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.issues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_ParseResponse, rhs: Google_Api_Expr_V1alpha1_ParseResponse) -> Bool {
    if lhs._parsedExpr != rhs._parsedExpr {return false}
    if lhs.issues != rhs.issues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_CheckRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "parsed_expr"),
    2: .standard(proto: "type_env"),
    3: .same(proto: "container"),
    4: .standard(proto: "no_std_env"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._parsedExpr) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.typeEnv) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.container) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.noStdEnv) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._parsedExpr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.typeEnv.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.typeEnv, fieldNumber: 2)
    }
    if !self.container.isEmpty {
      try visitor.visitSingularStringField(value: self.container, fieldNumber: 3)
    }
    if self.noStdEnv != false {
      try visitor.visitSingularBoolField(value: self.noStdEnv, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_CheckRequest, rhs: Google_Api_Expr_V1alpha1_CheckRequest) -> Bool {
    if lhs._parsedExpr != rhs._parsedExpr {return false}
    if lhs.typeEnv != rhs.typeEnv {return false}
    if lhs.container != rhs.container {return false}
    if lhs.noStdEnv != rhs.noStdEnv {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_CheckResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "checked_expr"),
    2: .same(proto: "issues"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkedExpr) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.issues) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._checkedExpr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.issues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.issues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_CheckResponse, rhs: Google_Api_Expr_V1alpha1_CheckResponse) -> Bool {
    if lhs._checkedExpr != rhs._checkedExpr {return false}
    if lhs.issues != rhs.issues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_EvalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EvalRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "parsed_expr"),
    2: .standard(proto: "checked_expr"),
    3: .same(proto: "bindings"),
    4: .same(proto: "container"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Api_Expr_V1alpha1_ParsedExpr?
        if let current = self.exprKind {
          try decoder.handleConflictingOneOf()
          if case .parsedExpr(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.exprKind = .parsedExpr(v)}
      }()
      case 2: try {
        var v: Google_Api_Expr_V1alpha1_CheckedExpr?
        if let current = self.exprKind {
          try decoder.handleConflictingOneOf()
          if case .checkedExpr(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.exprKind = .checkedExpr(v)}
      }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Api_Expr_V1alpha1_ExprValue>.self, value: &self.bindings) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.container) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.exprKind {
    case .parsedExpr?: try {
      guard case .parsedExpr(let v)? = self.exprKind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .checkedExpr?: try {
      guard case .checkedExpr(let v)? = self.exprKind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.bindings.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Api_Expr_V1alpha1_ExprValue>.self, value: self.bindings, fieldNumber: 3)
    }
    if !self.container.isEmpty {
      try visitor.visitSingularStringField(value: self.container, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_EvalRequest, rhs: Google_Api_Expr_V1alpha1_EvalRequest) -> Bool {
    if lhs.exprKind != rhs.exprKind {return false}
    if lhs.bindings != rhs.bindings {return false}
    if lhs.container != rhs.container {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_EvalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EvalResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "issues"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.issues) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.issues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.issues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_EvalResponse, rhs: Google_Api_Expr_V1alpha1_EvalResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.issues != rhs.issues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_IssueDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IssueDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "severity"),
    2: .same(proto: "position"),
    3: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.severity) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.severity != .unspecified {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Expr_V1alpha1_IssueDetails, rhs: Google_Api_Expr_V1alpha1_IssueDetails) -> Bool {
    if lhs.severity != rhs.severity {return false}
    if lhs._position != rhs._position {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Expr_V1alpha1_IssueDetails.Severity: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEVERITY_UNSPECIFIED"),
    1: .same(proto: "DEPRECATION"),
    2: .same(proto: "WARNING"),
    3: .same(proto: "ERROR"),
  ]
}
