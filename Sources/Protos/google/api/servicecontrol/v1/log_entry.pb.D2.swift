// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/servicecontrol/v1/log_entry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An individual log entry.
public struct Google_Api_Servicecontrol_V1_LogEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The log to which this log entry belongs. Examples: `"syslog"`,
  /// `"book_log"`.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// The time the event described by the log entry occurred. If
  /// omitted, defaults to operation start time.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  /// The severity of the log entry. The default value is
  /// `LogSeverity.DEFAULT`.
  public var severity: Google_Logging_Type_LogSeverity {
    get {return _storage._severity}
    set {_uniqueStorage()._severity = newValue}
  }

  /// Optional. Information about the HTTP request associated with this
  /// log entry, if applicable.
  public var httpRequest: Google_Api_Servicecontrol_V1_HttpRequest {
    get {return _storage._httpRequest ?? Google_Api_Servicecontrol_V1_HttpRequest()}
    set {_uniqueStorage()._httpRequest = newValue}
  }
  /// Returns true if `httpRequest` has been explicitly set.
  public var hasHTTPRequest: Bool {return _storage._httpRequest != nil}
  /// Clears the value of `httpRequest`. Subsequent reads from it will return its default value.
  public mutating func clearHTTPRequest() {_uniqueStorage()._httpRequest = nil}

  /// Optional. Resource name of the trace associated with the log entry, if any.
  /// If this field contains a relative resource name, you can assume the name is
  /// relative to `//tracing.googleapis.com`. Example:
  /// `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
  public var trace: String {
    get {return _storage._trace}
    set {_uniqueStorage()._trace = newValue}
  }

  /// A unique ID for the log entry used for deduplication. If omitted,
  /// the implementation will generate one based on operation_id.
  public var insertID: String {
    get {return _storage._insertID}
    set {_uniqueStorage()._insertID = newValue}
  }

  /// A set of user-defined (key, value) data that provides additional
  /// information about the log entry.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// The log entry payload, which can be one of multiple types.
  public var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  /// The log entry payload, represented as a protocol buffer that is
  /// expressed as a JSON object. The only accepted type currently is
  /// [AuditLog][google.cloud.audit.AuditLog].
  public var protoPayload: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .protoPayload(let v)? = _storage._payload {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {_uniqueStorage()._payload = .protoPayload(newValue)}
  }

  /// The log entry payload, represented as a Unicode string (UTF-8).
  public var textPayload: String {
    get {
      if case .textPayload(let v)? = _storage._payload {return v}
      return String()
    }
    set {_uniqueStorage()._payload = .textPayload(newValue)}
  }

  /// The log entry payload, represented as a structure that
  /// is expressed as a JSON object.
  public var structPayload: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .structPayload(let v)? = _storage._payload {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {_uniqueStorage()._payload = .structPayload(newValue)}
  }

  /// Optional. Information about an operation associated with the log entry, if
  /// applicable.
  public var operation: Google_Api_Servicecontrol_V1_LogEntryOperation {
    get {return _storage._operation ?? Google_Api_Servicecontrol_V1_LogEntryOperation()}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  public var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  public mutating func clearOperation() {_uniqueStorage()._operation = nil}

  /// Optional. Source code location information associated with the log entry,
  /// if any.
  public var sourceLocation: Google_Api_Servicecontrol_V1_LogEntrySourceLocation {
    get {return _storage._sourceLocation ?? Google_Api_Servicecontrol_V1_LogEntrySourceLocation()}
    set {_uniqueStorage()._sourceLocation = newValue}
  }
  /// Returns true if `sourceLocation` has been explicitly set.
  public var hasSourceLocation: Bool {return _storage._sourceLocation != nil}
  /// Clears the value of `sourceLocation`. Subsequent reads from it will return its default value.
  public mutating func clearSourceLocation() {_uniqueStorage()._sourceLocation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The log entry payload, which can be one of multiple types.
  public enum OneOf_Payload: Equatable {
    /// The log entry payload, represented as a protocol buffer that is
    /// expressed as a JSON object. The only accepted type currently is
    /// [AuditLog][google.cloud.audit.AuditLog].
    case protoPayload(SwiftProtobuf.Google_Protobuf_Any)
    /// The log entry payload, represented as a Unicode string (UTF-8).
    case textPayload(String)
    /// The log entry payload, represented as a structure that
    /// is expressed as a JSON object.
    case structPayload(SwiftProtobuf.Google_Protobuf_Struct)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_Servicecontrol_V1_LogEntry.OneOf_Payload, rhs: Google_Api_Servicecontrol_V1_LogEntry.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.protoPayload, .protoPayload): return {
        guard case .protoPayload(let l) = lhs, case .protoPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textPayload, .textPayload): return {
        guard case .textPayload(let l) = lhs, case .textPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.structPayload, .structPayload): return {
        guard case .structPayload(let l) = lhs, case .structPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Additional information about a potentially long-running operation with which
/// a log entry is associated.
public struct Google_Api_Servicecontrol_V1_LogEntryOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. An arbitrary operation identifier. Log entries with the
  /// same identifier are assumed to be part of the same operation.
  public var id: String = String()

  /// Optional. An arbitrary producer identifier. The combination of
  /// `id` and `producer` must be globally unique.  Examples for `producer`:
  /// `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
  public var producer: String = String()

  /// Optional. Set this to True if this is the first log entry in the operation.
  public var first: Bool = false

  /// Optional. Set this to True if this is the last log entry in the operation.
  public var last: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Additional information about the source code location that produced the log
/// entry.
public struct Google_Api_Servicecontrol_V1_LogEntrySourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Source file name. Depending on the runtime environment, this
  /// might be a simple name or a fully-qualified name.
  public var file: String = String()

  /// Optional. Line within the source file. 1-based; 0 indicates no line number
  /// available.
  public var line: Int64 = 0

  /// Optional. Human-readable name of the function or method being invoked, with
  /// optional context such as the class or package name. This information may be
  /// used in contexts such as the logs viewer, where a file and line number are
  /// less meaningful. The format can vary by language. For example:
  /// `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
  /// (Python).
  public var function: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.servicecontrol.v1"

extension Google_Api_Servicecontrol_V1_LogEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "name"),
    11: .same(proto: "timestamp"),
    12: .same(proto: "severity"),
    14: .standard(proto: "http_request"),
    15: .same(proto: "trace"),
    4: .standard(proto: "insert_id"),
    13: .same(proto: "labels"),
    2: .standard(proto: "proto_payload"),
    3: .standard(proto: "text_payload"),
    6: .standard(proto: "struct_payload"),
    16: .same(proto: "operation"),
    17: .standard(proto: "source_location"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _severity: Google_Logging_Type_LogSeverity = .default
    var _httpRequest: Google_Api_Servicecontrol_V1_HttpRequest? = nil
    var _trace: String = String()
    var _insertID: String = String()
    var _labels: Dictionary<String,String> = [:]
    var _payload: Google_Api_Servicecontrol_V1_LogEntry.OneOf_Payload?
    var _operation: Google_Api_Servicecontrol_V1_LogEntryOperation? = nil
    var _sourceLocation: Google_Api_Servicecontrol_V1_LogEntrySourceLocation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _timestamp = source._timestamp
      _severity = source._severity
      _httpRequest = source._httpRequest
      _trace = source._trace
      _insertID = source._insertID
      _labels = source._labels
      _payload = source._payload
      _operation = source._operation
      _sourceLocation = source._sourceLocation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try {
          var v: SwiftProtobuf.Google_Protobuf_Any?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .protoPayload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .protoPayload(v)}
        }()
        case 3: try {
          if _storage._payload != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._payload = .textPayload(v)}
        }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._insertID) }()
        case 6: try {
          var v: SwiftProtobuf.Google_Protobuf_Struct?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .structPayload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .structPayload(v)}
        }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._timestamp) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._severity) }()
        case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._httpRequest) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._trace) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._operation) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._sourceLocation) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._payload {
      case .protoPayload?: try {
        guard case .protoPayload(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .textPayload?: try {
        guard case .textPayload(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }()
      default: break
      }
      if !_storage._insertID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insertID, fieldNumber: 4)
      }
      if case .structPayload(let v)? = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 10)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._severity != .default {
        try visitor.visitSingularEnumField(value: _storage._severity, fieldNumber: 12)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 13)
      }
      if let v = _storage._httpRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._trace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._trace, fieldNumber: 15)
      }
      if let v = _storage._operation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._sourceLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_LogEntry, rhs: Google_Api_Servicecontrol_V1_LogEntry) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._severity != rhs_storage._severity {return false}
        if _storage._httpRequest != rhs_storage._httpRequest {return false}
        if _storage._trace != rhs_storage._trace {return false}
        if _storage._insertID != rhs_storage._insertID {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._sourceLocation != rhs_storage._sourceLocation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_LogEntryOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntryOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "producer"),
    3: .same(proto: "first"),
    4: .same(proto: "last"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.producer) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.first) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.last) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.producer.isEmpty {
      try visitor.visitSingularStringField(value: self.producer, fieldNumber: 2)
    }
    if self.first != false {
      try visitor.visitSingularBoolField(value: self.first, fieldNumber: 3)
    }
    if self.last != false {
      try visitor.visitSingularBoolField(value: self.last, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_LogEntryOperation, rhs: Google_Api_Servicecontrol_V1_LogEntryOperation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.producer != rhs.producer {return false}
    if lhs.first != rhs.first {return false}
    if lhs.last != rhs.last {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Servicecontrol_V1_LogEntrySourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntrySourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "file"),
    2: .same(proto: "line"),
    3: .same(proto: "function"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.file) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.line) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.function) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 1)
    }
    if self.line != 0 {
      try visitor.visitSingularInt64Field(value: self.line, fieldNumber: 2)
    }
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_LogEntrySourceLocation, rhs: Google_Api_Servicecontrol_V1_LogEntrySourceLocation) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.line != rhs.line {return false}
    if lhs.function != rhs.function {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
