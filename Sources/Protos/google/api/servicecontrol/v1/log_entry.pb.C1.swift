// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/servicecontrol/v1/log_entry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An individual log entry.
public struct Google_Api_Servicecontrol_V1_LogEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The log to which this log entry belongs. Examples: `"syslog"`,
  /// `"book_log"`.
  public var name: String = String()

  /// The time the event described by the log entry occurred. If
  /// omitted, defaults to operation start time.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// The severity of the log entry. The default value is
  /// `LogSeverity.DEFAULT`.
  public var severity: Google_Logging_Type_LogSeverity = .default

  /// A unique ID for the log entry used for deduplication. If omitted,
  /// the implementation will generate one based on operation_id.
  public var insertID: String = String()

  /// A set of user-defined (key, value) data that provides additional
  /// information about the log entry.
  public var labels: Dictionary<String,String> = [:]

  /// The log entry payload, which can be one of multiple types.
  public var payload: Google_Api_Servicecontrol_V1_LogEntry.OneOf_Payload? = nil

  /// The log entry payload, represented as a protocol buffer that is
  /// expressed as a JSON object. The only accepted type currently is
  /// [AuditLog][google.cloud.audit.AuditLog].
  public var protoPayload: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .protoPayload(let v)? = payload {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {payload = .protoPayload(newValue)}
  }

  /// The log entry payload, represented as a Unicode string (UTF-8).
  public var textPayload: String {
    get {
      if case .textPayload(let v)? = payload {return v}
      return String()
    }
    set {payload = .textPayload(newValue)}
  }

  /// The log entry payload, represented as a structure that
  /// is expressed as a JSON object.
  public var structPayload: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .structPayload(let v)? = payload {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {payload = .structPayload(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The log entry payload, which can be one of multiple types.
  public enum OneOf_Payload: Equatable {
    /// The log entry payload, represented as a protocol buffer that is
    /// expressed as a JSON object. The only accepted type currently is
    /// [AuditLog][google.cloud.audit.AuditLog].
    case protoPayload(SwiftProtobuf.Google_Protobuf_Any)
    /// The log entry payload, represented as a Unicode string (UTF-8).
    case textPayload(String)
    /// The log entry payload, represented as a structure that
    /// is expressed as a JSON object.
    case structPayload(SwiftProtobuf.Google_Protobuf_Struct)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Api_Servicecontrol_V1_LogEntry.OneOf_Payload, rhs: Google_Api_Servicecontrol_V1_LogEntry.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.protoPayload(let l), .protoPayload(let r)): return l == r
      case (.textPayload(let l), .textPayload(let r)): return l == r
      case (.structPayload(let l), .structPayload(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api.servicecontrol.v1"

extension Google_Api_Servicecontrol_V1_LogEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "name"),
    11: .same(proto: "timestamp"),
    12: .same(proto: "severity"),
    4: .standard(proto: "insert_id"),
    13: .same(proto: "labels"),
    2: .standard(proto: "proto_payload"),
    3: .standard(proto: "text_payload"),
    6: .standard(proto: "struct_payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2:
        var v: SwiftProtobuf.Google_Protobuf_Any?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .protoPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .protoPayload(v)}
      case 3:
        if self.payload != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.payload = .textPayload(v)}
      case 4: try decoder.decodeSingularStringField(value: &self.insertID)
      case 6:
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .structPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .structPayload(v)}
      case 10: try decoder.decodeSingularStringField(value: &self.name)
      case 11: try decoder.decodeSingularMessageField(value: &self._timestamp)
      case 12: try decoder.decodeSingularEnumField(value: &self.severity)
      case 13: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.payload {
    case .protoPayload(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .textPayload(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case nil: break
    default: break
    }
    if !self.insertID.isEmpty {
      try visitor.visitSingularStringField(value: self.insertID, fieldNumber: 4)
    }
    if case .structPayload(let v)? = self.payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 10)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if self.severity != .default {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 12)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Servicecontrol_V1_LogEntry, rhs: Google_Api_Servicecontrol_V1_LogEntry) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.insertID != rhs.insertID {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
