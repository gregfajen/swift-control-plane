//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/api/servicecontrol/v1/service_controller.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Api_Servicecontrol_V1_ServiceControllerClient, then call methods of this protocol to make API calls.
public protocol Google_Api_Servicecontrol_V1_ServiceControllerClientProtocol: GRPCClient {
  func check(
    _ request: Google_Api_Servicecontrol_V1_CheckRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Api_Servicecontrol_V1_CheckRequest, Google_Api_Servicecontrol_V1_CheckResponse>

  func report(
    _ request: Google_Api_Servicecontrol_V1_ReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Api_Servicecontrol_V1_ReportRequest, Google_Api_Servicecontrol_V1_ReportResponse>

}

extension Google_Api_Servicecontrol_V1_ServiceControllerClientProtocol {

  /// Checks whether an operation on a service should be allowed to proceed
  /// based on the configuration of the service and related policies. It must be
  /// called before the operation is executed.
  ///
  /// If feasible, the client should cache the check results and reuse them for
  /// 60 seconds. In case of any server errors, the client should rely on the
  /// cached results for much longer time to avoid outage.
  /// WARNING: There is general 60s delay for the configuration and policy
  /// propagation, therefore callers MUST NOT depend on the `Check` method having
  /// the latest policy information.
  ///
  /// NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has the size limit of 64KB.
  ///
  /// This method requires the `servicemanagement.services.check` permission
  /// on the specified service. For more information, see
  /// [Cloud IAM](https://cloud.google.com/iam).
  ///
  /// - Parameters:
  ///   - request: Request to send to Check.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func check(
    _ request: Google_Api_Servicecontrol_V1_CheckRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Api_Servicecontrol_V1_CheckRequest, Google_Api_Servicecontrol_V1_CheckResponse> {
    return self.makeUnaryCall(
      path: "/google.api.servicecontrol.v1.ServiceController/Check",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Reports operation results to Google Service Control, such as logs and
  /// metrics. It should be called after an operation is completed.
  ///
  /// If feasible, the client should aggregate reporting data for up to 5
  /// seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
  /// reduce data loss during client crashes. Clients should carefully choose
  /// the aggregation time window to avoid data loss risk more than 0.01%
  /// for business and compliance reasons.
  ///
  /// NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has the size limit (wire-format byte size) of
  /// 1MB.
  ///
  /// This method requires the `servicemanagement.services.report` permission
  /// on the specified service. For more information, see
  /// [Google Cloud IAM](https://cloud.google.com/iam).
  ///
  /// - Parameters:
  ///   - request: Request to send to Report.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func report(
    _ request: Google_Api_Servicecontrol_V1_ReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Api_Servicecontrol_V1_ReportRequest, Google_Api_Servicecontrol_V1_ReportResponse> {
    return self.makeUnaryCall(
      path: "/google.api.servicecontrol.v1.ServiceController/Report",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Api_Servicecontrol_V1_ServiceControllerClient: Google_Api_Servicecontrol_V1_ServiceControllerClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.api.servicecontrol.v1.ServiceController service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Api_Servicecontrol_V1_ServiceControllerProvider: CallHandlerProvider {
  /// Checks whether an operation on a service should be allowed to proceed
  /// based on the configuration of the service and related policies. It must be
  /// called before the operation is executed.
  ///
  /// If feasible, the client should cache the check results and reuse them for
  /// 60 seconds. In case of any server errors, the client should rely on the
  /// cached results for much longer time to avoid outage.
  /// WARNING: There is general 60s delay for the configuration and policy
  /// propagation, therefore callers MUST NOT depend on the `Check` method having
  /// the latest policy information.
  ///
  /// NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has the size limit of 64KB.
  ///
  /// This method requires the `servicemanagement.services.check` permission
  /// on the specified service. For more information, see
  /// [Cloud IAM](https://cloud.google.com/iam).
  func check(request: Google_Api_Servicecontrol_V1_CheckRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Api_Servicecontrol_V1_CheckResponse>
  /// Reports operation results to Google Service Control, such as logs and
  /// metrics. It should be called after an operation is completed.
  ///
  /// If feasible, the client should aggregate reporting data for up to 5
  /// seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
  /// reduce data loss during client crashes. Clients should carefully choose
  /// the aggregation time window to avoid data loss risk more than 0.01%
  /// for business and compliance reasons.
  ///
  /// NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has the size limit (wire-format byte size) of
  /// 1MB.
  ///
  /// This method requires the `servicemanagement.services.report` permission
  /// on the specified service. For more information, see
  /// [Google Cloud IAM](https://cloud.google.com/iam).
  func report(request: Google_Api_Servicecontrol_V1_ReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Api_Servicecontrol_V1_ReportResponse>
}

extension Google_Api_Servicecontrol_V1_ServiceControllerProvider {
  public var serviceName: Substring { return "google.api.servicecontrol.v1.ServiceController" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Check":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.check(request: request, context: context)
        }
      }

    case "Report":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.report(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

