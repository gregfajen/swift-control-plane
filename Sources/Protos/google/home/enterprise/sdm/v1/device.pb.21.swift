// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/home/enterprise/sdm/v1/device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Device resource represents an instance of enterprise managed device in the
/// property.
public struct Google_Home_Enterprise_Sdm_V1_Device {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the device. For example:
  /// "enterprises/XYZ/devices/123".
  public var name: String = String()

  /// Output only. Type of the device for general display purposes.
  /// For example: "THERMOSTAT". The device type should not be used to deduce or
  /// infer functionality of the actual device it is assigned to. Instead, use
  /// the returned traits for the device.
  public var type: String = String()

  /// Output only. Device traits.
  public var traits: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _traits ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_traits = newValue}
  }
  /// Returns true if `traits` has been explicitly set.
  public var hasTraits: Bool {return self._traits != nil}
  /// Clears the value of `traits`. Subsequent reads from it will return its default value.
  public mutating func clearTraits() {self._traits = nil}

  /// Assignee details of the device.
  public var parentRelations: [Google_Home_Enterprise_Sdm_V1_ParentRelation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _traits: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

/// Represents device relationships, for instance, structure/room to which the
/// device is assigned to. For now this is only filled in the enterprise flow.
public struct Google_Home_Enterprise_Sdm_V1_ParentRelation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The name of the relation -- e.g., structure/room where the
  /// device is assigned to. For example: "enterprises/XYZ/structures/ABC" or
  /// "enterprises/XYZ/structures/ABC/rooms/123"
  public var parent: String = String()

  /// Output only. The custom name of the relation -- e.g., structure/room where
  /// the device is assigned to.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.home.enterprise.sdm.v1"

extension Google_Home_Enterprise_Sdm_V1_Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Device"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    4: .same(proto: "traits"),
    5: .standard(proto: "parent_relations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._traits) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.parentRelations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if let v = self._traits {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.parentRelations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parentRelations, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Home_Enterprise_Sdm_V1_Device, rhs: Google_Home_Enterprise_Sdm_V1_Device) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs._traits != rhs._traits {return false}
    if lhs.parentRelations != rhs.parentRelations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Home_Enterprise_Sdm_V1_ParentRelation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ParentRelation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Home_Enterprise_Sdm_V1_ParentRelation, rhs: Google_Home_Enterprise_Sdm_V1_ParentRelation) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
