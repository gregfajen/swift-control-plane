//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/genomics/v1/annotations.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Genomics_V1_AnnotationServiceV1Client, then call methods of this protocol to make API calls.
public protocol Google_Genomics_V1_AnnotationServiceV1ClientProtocol: GRPCClient {
  func createAnnotationSet(
    _ request: Google_Genomics_V1_CreateAnnotationSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_CreateAnnotationSetRequest, Google_Genomics_V1_AnnotationSet>

  func getAnnotationSet(
    _ request: Google_Genomics_V1_GetAnnotationSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_GetAnnotationSetRequest, Google_Genomics_V1_AnnotationSet>

  func updateAnnotationSet(
    _ request: Google_Genomics_V1_UpdateAnnotationSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_UpdateAnnotationSetRequest, Google_Genomics_V1_AnnotationSet>

  func deleteAnnotationSet(
    _ request: Google_Genomics_V1_DeleteAnnotationSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_DeleteAnnotationSetRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func searchAnnotationSets(
    _ request: Google_Genomics_V1_SearchAnnotationSetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_SearchAnnotationSetsRequest, Google_Genomics_V1_SearchAnnotationSetsResponse>

  func createAnnotation(
    _ request: Google_Genomics_V1_CreateAnnotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_CreateAnnotationRequest, Google_Genomics_V1_Annotation>

  func batchCreateAnnotations(
    _ request: Google_Genomics_V1_BatchCreateAnnotationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_BatchCreateAnnotationsRequest, Google_Genomics_V1_BatchCreateAnnotationsResponse>

  func getAnnotation(
    _ request: Google_Genomics_V1_GetAnnotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_GetAnnotationRequest, Google_Genomics_V1_Annotation>

  func updateAnnotation(
    _ request: Google_Genomics_V1_UpdateAnnotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_UpdateAnnotationRequest, Google_Genomics_V1_Annotation>

  func deleteAnnotation(
    _ request: Google_Genomics_V1_DeleteAnnotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_DeleteAnnotationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func searchAnnotations(
    _ request: Google_Genomics_V1_SearchAnnotationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_SearchAnnotationsRequest, Google_Genomics_V1_SearchAnnotationsResponse>

}

extension Google_Genomics_V1_AnnotationServiceV1ClientProtocol {

  /// Creates a new annotation set. Caller must have WRITE permission for the
  /// associated dataset.
  ///
  /// The following fields are required:
  ///
  ///   * [datasetId][google.genomics.v1.AnnotationSet.dataset_id]
  ///   * [referenceSetId][google.genomics.v1.AnnotationSet.reference_set_id]
  ///
  /// All other fields may be optionally specified, unless documented as being
  /// server-generated (for example, the `id` field).
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAnnotationSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAnnotationSet(
    _ request: Google_Genomics_V1_CreateAnnotationSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_CreateAnnotationSetRequest, Google_Genomics_V1_AnnotationSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/CreateAnnotationSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets an annotation set. Caller must have READ permission for
  /// the associated dataset.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAnnotationSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAnnotationSet(
    _ request: Google_Genomics_V1_GetAnnotationSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_GetAnnotationSetRequest, Google_Genomics_V1_AnnotationSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/GetAnnotationSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an annotation set. The update must respect all mutability
  /// restrictions and other invariants described on the annotation set resource.
  /// Caller must have WRITE permission for the associated dataset.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAnnotationSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAnnotationSet(
    _ request: Google_Genomics_V1_UpdateAnnotationSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_UpdateAnnotationSetRequest, Google_Genomics_V1_AnnotationSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/UpdateAnnotationSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an annotation set. Caller must have WRITE permission
  /// for the associated annotation set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAnnotationSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAnnotationSet(
    _ request: Google_Genomics_V1_DeleteAnnotationSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_DeleteAnnotationSetRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/DeleteAnnotationSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Searches for annotation sets that match the given criteria. Annotation sets
  /// are returned in an unspecified order. This order is consistent, such that
  /// two queries for the same content (regardless of page size) yield annotation
  /// sets in the same order across their respective streams of paginated
  /// responses. Caller must have READ permission for the queried datasets.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchAnnotationSets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchAnnotationSets(
    _ request: Google_Genomics_V1_SearchAnnotationSetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_SearchAnnotationSetsRequest, Google_Genomics_V1_SearchAnnotationSetsResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/SearchAnnotationSets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new annotation. Caller must have WRITE permission
  /// for the associated annotation set.
  ///
  /// The following fields are required:
  ///
  /// * [annotationSetId][google.genomics.v1.Annotation.annotation_set_id]
  /// * [referenceName][google.genomics.v1.Annotation.reference_name] or
  ///   [referenceId][google.genomics.v1.Annotation.reference_id]
  ///
  /// ### Transcripts
  ///
  /// For annotations of type TRANSCRIPT, the following fields of
  /// [transcript][google.genomics.v1.Annotation.transcript] must be provided:
  ///
  /// * [exons.start][google.genomics.v1.Transcript.Exon.start]
  /// * [exons.end][google.genomics.v1.Transcript.Exon.end]
  ///
  /// All other fields may be optionally specified, unless documented as being
  /// server-generated (for example, the `id` field). The annotated
  /// range must be no longer than 100Mbp (mega base pairs). See the
  /// [Annotation resource][google.genomics.v1.Annotation]
  /// for additional restrictions on each field.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAnnotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAnnotation(
    _ request: Google_Genomics_V1_CreateAnnotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_CreateAnnotationRequest, Google_Genomics_V1_Annotation> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/CreateAnnotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates one or more new annotations atomically. All annotations must
  /// belong to the same annotation set. Caller must have WRITE
  /// permission for this annotation set. For optimal performance, batch
  /// positionally adjacent annotations together.
  ///
  /// If the request has a systemic issue, such as an attempt to write to
  /// an inaccessible annotation set, the entire RPC will fail accordingly. For
  /// lesser data issues, when possible an error will be isolated to the
  /// corresponding batch entry in the response; the remaining well formed
  /// annotations will be created normally.
  ///
  /// For details on the requirements for each individual annotation resource,
  /// see
  /// [CreateAnnotation][google.genomics.v1.AnnotationServiceV1.CreateAnnotation].
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchCreateAnnotations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchCreateAnnotations(
    _ request: Google_Genomics_V1_BatchCreateAnnotationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_BatchCreateAnnotationsRequest, Google_Genomics_V1_BatchCreateAnnotationsResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/BatchCreateAnnotations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets an annotation. Caller must have READ permission
  /// for the associated annotation set.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAnnotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAnnotation(
    _ request: Google_Genomics_V1_GetAnnotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_GetAnnotationRequest, Google_Genomics_V1_Annotation> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/GetAnnotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an annotation. Caller must have
  /// WRITE permission for the associated dataset.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAnnotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAnnotation(
    _ request: Google_Genomics_V1_UpdateAnnotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_UpdateAnnotationRequest, Google_Genomics_V1_Annotation> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/UpdateAnnotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an annotation. Caller must have WRITE permission for
  /// the associated annotation set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAnnotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAnnotation(
    _ request: Google_Genomics_V1_DeleteAnnotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_DeleteAnnotationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/DeleteAnnotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Searches for annotations that match the given criteria. Results are
  /// ordered by genomic coordinate (by reference sequence, then position).
  /// Annotations with equivalent genomic coordinates are returned in an
  /// unspecified order. This order is consistent, such that two queries for the
  /// same content (regardless of page size) yield annotations in the same order
  /// across their respective streams of paginated responses. Caller must have
  /// READ permission for the queried annotation sets.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchAnnotations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchAnnotations(
    _ request: Google_Genomics_V1_SearchAnnotationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_SearchAnnotationsRequest, Google_Genomics_V1_SearchAnnotationsResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.AnnotationServiceV1/SearchAnnotations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Genomics_V1_AnnotationServiceV1Client: Google_Genomics_V1_AnnotationServiceV1ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.genomics.v1.AnnotationServiceV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Genomics_V1_AnnotationServiceV1Provider: CallHandlerProvider {
  /// Creates a new annotation set. Caller must have WRITE permission for the
  /// associated dataset.
  ///
  /// The following fields are required:
  ///
  ///   * [datasetId][google.genomics.v1.AnnotationSet.dataset_id]
  ///   * [referenceSetId][google.genomics.v1.AnnotationSet.reference_set_id]
  ///
  /// All other fields may be optionally specified, unless documented as being
  /// server-generated (for example, the `id` field).
  func createAnnotationSet(request: Google_Genomics_V1_CreateAnnotationSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_AnnotationSet>
  /// Gets an annotation set. Caller must have READ permission for
  /// the associated dataset.
  func getAnnotationSet(request: Google_Genomics_V1_GetAnnotationSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_AnnotationSet>
  /// Updates an annotation set. The update must respect all mutability
  /// restrictions and other invariants described on the annotation set resource.
  /// Caller must have WRITE permission for the associated dataset.
  func updateAnnotationSet(request: Google_Genomics_V1_UpdateAnnotationSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_AnnotationSet>
  /// Deletes an annotation set. Caller must have WRITE permission
  /// for the associated annotation set.
  func deleteAnnotationSet(request: Google_Genomics_V1_DeleteAnnotationSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Searches for annotation sets that match the given criteria. Annotation sets
  /// are returned in an unspecified order. This order is consistent, such that
  /// two queries for the same content (regardless of page size) yield annotation
  /// sets in the same order across their respective streams of paginated
  /// responses. Caller must have READ permission for the queried datasets.
  func searchAnnotationSets(request: Google_Genomics_V1_SearchAnnotationSetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_SearchAnnotationSetsResponse>
  /// Creates a new annotation. Caller must have WRITE permission
  /// for the associated annotation set.
  ///
  /// The following fields are required:
  ///
  /// * [annotationSetId][google.genomics.v1.Annotation.annotation_set_id]
  /// * [referenceName][google.genomics.v1.Annotation.reference_name] or
  ///   [referenceId][google.genomics.v1.Annotation.reference_id]
  ///
  /// ### Transcripts
  ///
  /// For annotations of type TRANSCRIPT, the following fields of
  /// [transcript][google.genomics.v1.Annotation.transcript] must be provided:
  ///
  /// * [exons.start][google.genomics.v1.Transcript.Exon.start]
  /// * [exons.end][google.genomics.v1.Transcript.Exon.end]
  ///
  /// All other fields may be optionally specified, unless documented as being
  /// server-generated (for example, the `id` field). The annotated
  /// range must be no longer than 100Mbp (mega base pairs). See the
  /// [Annotation resource][google.genomics.v1.Annotation]
  /// for additional restrictions on each field.
  func createAnnotation(request: Google_Genomics_V1_CreateAnnotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_Annotation>
  /// Creates one or more new annotations atomically. All annotations must
  /// belong to the same annotation set. Caller must have WRITE
  /// permission for this annotation set. For optimal performance, batch
  /// positionally adjacent annotations together.
  ///
  /// If the request has a systemic issue, such as an attempt to write to
  /// an inaccessible annotation set, the entire RPC will fail accordingly. For
  /// lesser data issues, when possible an error will be isolated to the
  /// corresponding batch entry in the response; the remaining well formed
  /// annotations will be created normally.
  ///
  /// For details on the requirements for each individual annotation resource,
  /// see
  /// [CreateAnnotation][google.genomics.v1.AnnotationServiceV1.CreateAnnotation].
  func batchCreateAnnotations(request: Google_Genomics_V1_BatchCreateAnnotationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_BatchCreateAnnotationsResponse>
  /// Gets an annotation. Caller must have READ permission
  /// for the associated annotation set.
  func getAnnotation(request: Google_Genomics_V1_GetAnnotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_Annotation>
  /// Updates an annotation. Caller must have
  /// WRITE permission for the associated dataset.
  func updateAnnotation(request: Google_Genomics_V1_UpdateAnnotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_Annotation>
  /// Deletes an annotation. Caller must have WRITE permission for
  /// the associated annotation set.
  func deleteAnnotation(request: Google_Genomics_V1_DeleteAnnotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Searches for annotations that match the given criteria. Results are
  /// ordered by genomic coordinate (by reference sequence, then position).
  /// Annotations with equivalent genomic coordinates are returned in an
  /// unspecified order. This order is consistent, such that two queries for the
  /// same content (regardless of page size) yield annotations in the same order
  /// across their respective streams of paginated responses. Caller must have
  /// READ permission for the queried annotation sets.
  func searchAnnotations(request: Google_Genomics_V1_SearchAnnotationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_SearchAnnotationsResponse>
}

extension Google_Genomics_V1_AnnotationServiceV1Provider {
  public var serviceName: Substring { return "google.genomics.v1.AnnotationServiceV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateAnnotationSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAnnotationSet(request: request, context: context)
        }
      }

    case "GetAnnotationSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAnnotationSet(request: request, context: context)
        }
      }

    case "UpdateAnnotationSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAnnotationSet(request: request, context: context)
        }
      }

    case "DeleteAnnotationSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAnnotationSet(request: request, context: context)
        }
      }

    case "SearchAnnotationSets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchAnnotationSets(request: request, context: context)
        }
      }

    case "CreateAnnotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAnnotation(request: request, context: context)
        }
      }

    case "BatchCreateAnnotations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchCreateAnnotations(request: request, context: context)
        }
      }

    case "GetAnnotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAnnotation(request: request, context: context)
        }
      }

    case "UpdateAnnotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAnnotation(request: request, context: context)
        }
      }

    case "DeleteAnnotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAnnotation(request: request, context: context)
        }
      }

    case "SearchAnnotations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchAnnotations(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

