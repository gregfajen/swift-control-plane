//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/genomics/v1/variants.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Genomics_V1_StreamingVariantServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Genomics_V1_StreamingVariantServiceClientProtocol: GRPCClient {
  func streamVariants(
    _ request: Google_Genomics_V1_StreamVariantsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Genomics_V1_StreamVariantsResponse) -> Void
  ) -> ServerStreamingCall<Google_Genomics_V1_StreamVariantsRequest, Google_Genomics_V1_StreamVariantsResponse>

}

extension Google_Genomics_V1_StreamingVariantServiceClientProtocol {

  /// Returns a stream of all the variants matching the search request, ordered
  /// by reference name, position, and ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamVariants.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamVariants(
    _ request: Google_Genomics_V1_StreamVariantsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Genomics_V1_StreamVariantsResponse) -> Void
  ) -> ServerStreamingCall<Google_Genomics_V1_StreamVariantsRequest, Google_Genomics_V1_StreamVariantsResponse> {
    return self.makeServerStreamingCall(
      path: "/google.genomics.v1.StreamingVariantService/StreamVariants",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

public final class Google_Genomics_V1_StreamingVariantServiceClient: Google_Genomics_V1_StreamingVariantServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.genomics.v1.StreamingVariantService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Genomics_V1_VariantServiceV1Client, then call methods of this protocol to make API calls.
public protocol Google_Genomics_V1_VariantServiceV1ClientProtocol: GRPCClient {
  func importVariants(
    _ request: Google_Genomics_V1_ImportVariantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_ImportVariantsRequest, Google_Longrunning_Operation>

  func createVariantSet(
    _ request: Google_Genomics_V1_CreateVariantSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_CreateVariantSetRequest, Google_Genomics_V1_VariantSet>

  func exportVariantSet(
    _ request: Google_Genomics_V1_ExportVariantSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_ExportVariantSetRequest, Google_Longrunning_Operation>

  func getVariantSet(
    _ request: Google_Genomics_V1_GetVariantSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_GetVariantSetRequest, Google_Genomics_V1_VariantSet>

  func searchVariantSets(
    _ request: Google_Genomics_V1_SearchVariantSetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_SearchVariantSetsRequest, Google_Genomics_V1_SearchVariantSetsResponse>

  func deleteVariantSet(
    _ request: Google_Genomics_V1_DeleteVariantSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_DeleteVariantSetRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateVariantSet(
    _ request: Google_Genomics_V1_UpdateVariantSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_UpdateVariantSetRequest, Google_Genomics_V1_VariantSet>

  func searchVariants(
    _ request: Google_Genomics_V1_SearchVariantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_SearchVariantsRequest, Google_Genomics_V1_SearchVariantsResponse>

  func createVariant(
    _ request: Google_Genomics_V1_CreateVariantRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_CreateVariantRequest, Google_Genomics_V1_Variant>

  func updateVariant(
    _ request: Google_Genomics_V1_UpdateVariantRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_UpdateVariantRequest, Google_Genomics_V1_Variant>

  func deleteVariant(
    _ request: Google_Genomics_V1_DeleteVariantRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_DeleteVariantRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getVariant(
    _ request: Google_Genomics_V1_GetVariantRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_GetVariantRequest, Google_Genomics_V1_Variant>

  func mergeVariants(
    _ request: Google_Genomics_V1_MergeVariantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_MergeVariantsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func searchCallSets(
    _ request: Google_Genomics_V1_SearchCallSetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_SearchCallSetsRequest, Google_Genomics_V1_SearchCallSetsResponse>

  func createCallSet(
    _ request: Google_Genomics_V1_CreateCallSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_CreateCallSetRequest, Google_Genomics_V1_CallSet>

  func updateCallSet(
    _ request: Google_Genomics_V1_UpdateCallSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_UpdateCallSetRequest, Google_Genomics_V1_CallSet>

  func deleteCallSet(
    _ request: Google_Genomics_V1_DeleteCallSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_DeleteCallSetRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getCallSet(
    _ request: Google_Genomics_V1_GetCallSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1_GetCallSetRequest, Google_Genomics_V1_CallSet>

}

extension Google_Genomics_V1_VariantServiceV1ClientProtocol {

  /// Creates variant data by asynchronously importing the provided information.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// The variants for import will be merged with any existing variant that
  /// matches its reference sequence, start, end, reference bases, and
  /// alternative bases. If no such variant exists, a new one will be created.
  ///
  /// When variants are merged, the call information from the new variant
  /// is added to the existing variant, and Variant info fields are merged
  /// as specified in
  /// [infoMergeConfig][google.genomics.v1.ImportVariantsRequest.info_merge_config].
  /// As a special case, for single-sample VCF files, QUAL and FILTER fields will
  /// be moved to the call level; these are sometimes interpreted in a
  /// call-specific context.
  /// Imported VCF headers are appended to the metadata already in a variant set.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportVariants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func importVariants(
    _ request: Google_Genomics_V1_ImportVariantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_ImportVariantsRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/ImportVariants",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new variant set.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// The provided variant set must have a valid `datasetId` set - all other
  /// fields are optional. Note that the `id` field will be ignored, as this is
  /// assigned by the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVariantSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createVariantSet(
    _ request: Google_Genomics_V1_CreateVariantSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_CreateVariantSetRequest, Google_Genomics_V1_VariantSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/CreateVariantSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Exports variant set data to an external destination.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportVariantSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportVariantSet(
    _ request: Google_Genomics_V1_ExportVariantSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_ExportVariantSetRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/ExportVariantSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a variant set by ID.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVariantSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVariantSet(
    _ request: Google_Genomics_V1_GetVariantSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_GetVariantSetRequest, Google_Genomics_V1_VariantSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/GetVariantSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a list of all variant sets matching search criteria.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Implements
  /// [GlobalAllianceApi.searchVariantSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L49).
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchVariantSets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchVariantSets(
    _ request: Google_Genomics_V1_SearchVariantSetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_SearchVariantSetsRequest, Google_Genomics_V1_SearchVariantSetsResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/SearchVariantSets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a variant set including all variants, call sets, and calls within.
  /// This is not reversible.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVariantSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteVariantSet(
    _ request: Google_Genomics_V1_DeleteVariantSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_DeleteVariantSetRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/DeleteVariantSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a variant set using patch semantics.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVariantSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVariantSet(
    _ request: Google_Genomics_V1_UpdateVariantSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_UpdateVariantSetRequest, Google_Genomics_V1_VariantSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/UpdateVariantSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a list of variants matching the criteria.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Implements
  /// [GlobalAllianceApi.searchVariants](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L126).
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchVariants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchVariants(
    _ request: Google_Genomics_V1_SearchVariantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_SearchVariantsRequest, Google_Genomics_V1_SearchVariantsResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/SearchVariants",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new variant.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVariant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createVariant(
    _ request: Google_Genomics_V1_CreateVariantRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_CreateVariantRequest, Google_Genomics_V1_Variant> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/CreateVariant",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a variant.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// This method supports patch semantics. Returns the modified variant without
  /// its calls.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVariant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVariant(
    _ request: Google_Genomics_V1_UpdateVariantRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_UpdateVariantRequest, Google_Genomics_V1_Variant> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/UpdateVariant",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a variant.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVariant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteVariant(
    _ request: Google_Genomics_V1_DeleteVariantRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_DeleteVariantRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/DeleteVariant",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a variant by ID.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVariant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVariant(
    _ request: Google_Genomics_V1_GetVariantRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_GetVariantRequest, Google_Genomics_V1_Variant> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/GetVariant",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Merges the given variants with existing variants.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Each variant will be
  /// merged with an existing variant that matches its reference sequence,
  /// start, end, reference bases, and alternative bases. If no such variant
  /// exists, a new one will be created.
  ///
  /// When variants are merged, the call information from the new variant
  /// is added to the existing variant. Variant info fields are merged as
  /// specified in the
  /// [infoMergeConfig][google.genomics.v1.MergeVariantsRequest.info_merge_config]
  /// field of the MergeVariantsRequest.
  ///
  /// Please exercise caution when using this method!  It is easy to introduce
  /// mistakes in existing variants and difficult to back out of them.  For
  /// example,
  /// suppose you were trying to merge a new variant with an existing one and
  /// both
  /// variants contain calls that belong to callsets with the same callset ID.
  ///
  ///     // Existing variant - irrelevant fields trimmed for clarity
  ///     {
  ///         "variantSetId": "10473108253681171589",
  ///         "referenceName": "1",
  ///         "start": "10582",
  ///         "referenceBases": "G",
  ///         "alternateBases": [
  ///             "A"
  ///         ],
  ///         "calls": [
  ///             {
  ///                 "callSetId": "10473108253681171589-0",
  ///                 "callSetName": "CALLSET0",
  ///                 "genotype": [
  ///                     0,
  ///                     1
  ///                 ],
  ///             }
  ///         ]
  ///     }
  ///
  ///     // New variant with conflicting call information
  ///     {
  ///         "variantSetId": "10473108253681171589",
  ///         "referenceName": "1",
  ///         "start": "10582",
  ///         "referenceBases": "G",
  ///         "alternateBases": [
  ///             "A"
  ///         ],
  ///         "calls": [
  ///             {
  ///                 "callSetId": "10473108253681171589-0",
  ///                 "callSetName": "CALLSET0",
  ///                 "genotype": [
  ///                     1,
  ///                     1
  ///                 ],
  ///             }
  ///         ]
  ///     }
  ///
  /// The resulting merged variant would overwrite the existing calls with those
  /// from the new variant:
  ///
  ///     {
  ///         "variantSetId": "10473108253681171589",
  ///         "referenceName": "1",
  ///         "start": "10582",
  ///         "referenceBases": "G",
  ///         "alternateBases": [
  ///             "A"
  ///         ],
  ///         "calls": [
  ///             {
  ///                 "callSetId": "10473108253681171589-0",
  ///                 "callSetName": "CALLSET0",
  ///                 "genotype": [
  ///                     1,
  ///                     1
  ///                 ],
  ///             }
  ///         ]
  ///     }
  ///
  /// This may be the desired outcome, but it is up to the user to determine if
  /// if that is indeed the case.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeVariants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeVariants(
    _ request: Google_Genomics_V1_MergeVariantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_MergeVariantsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/MergeVariants",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a list of call sets matching the criteria.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Implements
  /// [GlobalAllianceApi.searchCallSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L178).
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchCallSets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchCallSets(
    _ request: Google_Genomics_V1_SearchCallSetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_SearchCallSetsRequest, Google_Genomics_V1_SearchCallSetsResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/SearchCallSets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new call set.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCallSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCallSet(
    _ request: Google_Genomics_V1_CreateCallSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_CreateCallSetRequest, Google_Genomics_V1_CallSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/CreateCallSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a call set.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// This method supports patch semantics.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCallSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCallSet(
    _ request: Google_Genomics_V1_UpdateCallSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_UpdateCallSetRequest, Google_Genomics_V1_CallSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/UpdateCallSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a call set.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCallSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCallSet(
    _ request: Google_Genomics_V1_DeleteCallSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_DeleteCallSetRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/DeleteCallSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a call set by ID.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCallSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCallSet(
    _ request: Google_Genomics_V1_GetCallSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1_GetCallSetRequest, Google_Genomics_V1_CallSet> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1.VariantServiceV1/GetCallSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Genomics_V1_VariantServiceV1Client: Google_Genomics_V1_VariantServiceV1ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.genomics.v1.VariantServiceV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Genomics_V1_StreamingVariantServiceProvider: CallHandlerProvider {
  /// Returns a stream of all the variants matching the search request, ordered
  /// by reference name, position, and ID.
  func streamVariants(request: Google_Genomics_V1_StreamVariantsRequest, context: StreamingResponseCallContext<Google_Genomics_V1_StreamVariantsResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Google_Genomics_V1_StreamingVariantServiceProvider {
  public var serviceName: Substring { return "google.genomics.v1.StreamingVariantService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "StreamVariants":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.streamVariants(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Genomics_V1_VariantServiceV1Provider: CallHandlerProvider {
  /// Creates variant data by asynchronously importing the provided information.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// The variants for import will be merged with any existing variant that
  /// matches its reference sequence, start, end, reference bases, and
  /// alternative bases. If no such variant exists, a new one will be created.
  ///
  /// When variants are merged, the call information from the new variant
  /// is added to the existing variant, and Variant info fields are merged
  /// as specified in
  /// [infoMergeConfig][google.genomics.v1.ImportVariantsRequest.info_merge_config].
  /// As a special case, for single-sample VCF files, QUAL and FILTER fields will
  /// be moved to the call level; these are sometimes interpreted in a
  /// call-specific context.
  /// Imported VCF headers are appended to the metadata already in a variant set.
  func importVariants(request: Google_Genomics_V1_ImportVariantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Creates a new variant set.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// The provided variant set must have a valid `datasetId` set - all other
  /// fields are optional. Note that the `id` field will be ignored, as this is
  /// assigned by the server.
  func createVariantSet(request: Google_Genomics_V1_CreateVariantSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_VariantSet>
  /// Exports variant set data to an external destination.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func exportVariantSet(request: Google_Genomics_V1_ExportVariantSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Gets a variant set by ID.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func getVariantSet(request: Google_Genomics_V1_GetVariantSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_VariantSet>
  /// Returns a list of all variant sets matching search criteria.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Implements
  /// [GlobalAllianceApi.searchVariantSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L49).
  func searchVariantSets(request: Google_Genomics_V1_SearchVariantSetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_SearchVariantSetsResponse>
  /// Deletes a variant set including all variants, call sets, and calls within.
  /// This is not reversible.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func deleteVariantSet(request: Google_Genomics_V1_DeleteVariantSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Updates a variant set using patch semantics.
  ///
  /// For the definitions of variant sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func updateVariantSet(request: Google_Genomics_V1_UpdateVariantSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_VariantSet>
  /// Gets a list of variants matching the criteria.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Implements
  /// [GlobalAllianceApi.searchVariants](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L126).
  func searchVariants(request: Google_Genomics_V1_SearchVariantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_SearchVariantsResponse>
  /// Creates a new variant.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func createVariant(request: Google_Genomics_V1_CreateVariantRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_Variant>
  /// Updates a variant.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// This method supports patch semantics. Returns the modified variant without
  /// its calls.
  func updateVariant(request: Google_Genomics_V1_UpdateVariantRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_Variant>
  /// Deletes a variant.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func deleteVariant(request: Google_Genomics_V1_DeleteVariantRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets a variant by ID.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func getVariant(request: Google_Genomics_V1_GetVariantRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_Variant>
  /// Merges the given variants with existing variants.
  ///
  /// For the definitions of variants and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Each variant will be
  /// merged with an existing variant that matches its reference sequence,
  /// start, end, reference bases, and alternative bases. If no such variant
  /// exists, a new one will be created.
  ///
  /// When variants are merged, the call information from the new variant
  /// is added to the existing variant. Variant info fields are merged as
  /// specified in the
  /// [infoMergeConfig][google.genomics.v1.MergeVariantsRequest.info_merge_config]
  /// field of the MergeVariantsRequest.
  ///
  /// Please exercise caution when using this method!  It is easy to introduce
  /// mistakes in existing variants and difficult to back out of them.  For
  /// example,
  /// suppose you were trying to merge a new variant with an existing one and
  /// both
  /// variants contain calls that belong to callsets with the same callset ID.
  ///
  ///     // Existing variant - irrelevant fields trimmed for clarity
  ///     {
  ///         "variantSetId": "10473108253681171589",
  ///         "referenceName": "1",
  ///         "start": "10582",
  ///         "referenceBases": "G",
  ///         "alternateBases": [
  ///             "A"
  ///         ],
  ///         "calls": [
  ///             {
  ///                 "callSetId": "10473108253681171589-0",
  ///                 "callSetName": "CALLSET0",
  ///                 "genotype": [
  ///                     0,
  ///                     1
  ///                 ],
  ///             }
  ///         ]
  ///     }
  ///
  ///     // New variant with conflicting call information
  ///     {
  ///         "variantSetId": "10473108253681171589",
  ///         "referenceName": "1",
  ///         "start": "10582",
  ///         "referenceBases": "G",
  ///         "alternateBases": [
  ///             "A"
  ///         ],
  ///         "calls": [
  ///             {
  ///                 "callSetId": "10473108253681171589-0",
  ///                 "callSetName": "CALLSET0",
  ///                 "genotype": [
  ///                     1,
  ///                     1
  ///                 ],
  ///             }
  ///         ]
  ///     }
  ///
  /// The resulting merged variant would overwrite the existing calls with those
  /// from the new variant:
  ///
  ///     {
  ///         "variantSetId": "10473108253681171589",
  ///         "referenceName": "1",
  ///         "start": "10582",
  ///         "referenceBases": "G",
  ///         "alternateBases": [
  ///             "A"
  ///         ],
  ///         "calls": [
  ///             {
  ///                 "callSetId": "10473108253681171589-0",
  ///                 "callSetName": "CALLSET0",
  ///                 "genotype": [
  ///                     1,
  ///                     1
  ///                 ],
  ///             }
  ///         ]
  ///     }
  ///
  /// This may be the desired outcome, but it is up to the user to determine if
  /// if that is indeed the case.
  func mergeVariants(request: Google_Genomics_V1_MergeVariantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets a list of call sets matching the criteria.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// Implements
  /// [GlobalAllianceApi.searchCallSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L178).
  func searchCallSets(request: Google_Genomics_V1_SearchCallSetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_SearchCallSetsResponse>
  /// Creates a new call set.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func createCallSet(request: Google_Genomics_V1_CreateCallSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_CallSet>
  /// Updates a call set.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  /// This method supports patch semantics.
  func updateCallSet(request: Google_Genomics_V1_UpdateCallSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_CallSet>
  /// Deletes a call set.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func deleteCallSet(request: Google_Genomics_V1_DeleteCallSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets a call set by ID.
  ///
  /// For the definitions of call sets and other genomics resources, see
  /// [Fundamentals of Google
  /// Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  func getCallSet(request: Google_Genomics_V1_GetCallSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1_CallSet>
}

extension Google_Genomics_V1_VariantServiceV1Provider {
  public var serviceName: Substring { return "google.genomics.v1.VariantServiceV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ImportVariants":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.importVariants(request: request, context: context)
        }
      }

    case "CreateVariantSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createVariantSet(request: request, context: context)
        }
      }

    case "ExportVariantSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.exportVariantSet(request: request, context: context)
        }
      }

    case "GetVariantSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getVariantSet(request: request, context: context)
        }
      }

    case "SearchVariantSets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchVariantSets(request: request, context: context)
        }
      }

    case "DeleteVariantSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteVariantSet(request: request, context: context)
        }
      }

    case "UpdateVariantSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateVariantSet(request: request, context: context)
        }
      }

    case "SearchVariants":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchVariants(request: request, context: context)
        }
      }

    case "CreateVariant":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createVariant(request: request, context: context)
        }
      }

    case "UpdateVariant":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateVariant(request: request, context: context)
        }
      }

    case "DeleteVariant":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteVariant(request: request, context: context)
        }
      }

    case "GetVariant":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getVariant(request: request, context: context)
        }
      }

    case "MergeVariants":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeVariants(request: request, context: context)
        }
      }

    case "SearchCallSets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchCallSets(request: request, context: context)
        }
      }

    case "CreateCallSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCallSet(request: request, context: context)
        }
      }

    case "UpdateCallSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCallSet(request: request, context: context)
        }
      }

    case "DeleteCallSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteCallSet(request: request, context: context)
        }
      }

    case "GetCallSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCallSet(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

