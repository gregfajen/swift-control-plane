//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/genomics/v1alpha2/pipelines.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Genomics_V1alpha2_PipelinesV1Alpha2Client, then call methods of this protocol to make API calls.
public protocol Google_Genomics_V1alpha2_PipelinesV1Alpha2ClientProtocol: GRPCClient {
  func createPipeline(
    _ request: Google_Genomics_V1alpha2_CreatePipelineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_CreatePipelineRequest, Google_Genomics_V1alpha2_Pipeline>

  func runPipeline(
    _ request: Google_Genomics_V1alpha2_RunPipelineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_RunPipelineRequest, Google_Longrunning_Operation>

  func getPipeline(
    _ request: Google_Genomics_V1alpha2_GetPipelineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_GetPipelineRequest, Google_Genomics_V1alpha2_Pipeline>

  func listPipelines(
    _ request: Google_Genomics_V1alpha2_ListPipelinesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_ListPipelinesRequest, Google_Genomics_V1alpha2_ListPipelinesResponse>

  func deletePipeline(
    _ request: Google_Genomics_V1alpha2_DeletePipelineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_DeletePipelineRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getControllerConfig(
    _ request: Google_Genomics_V1alpha2_GetControllerConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_GetControllerConfigRequest, Google_Genomics_V1alpha2_ControllerConfig>

  func setOperationStatus(
    _ request: Google_Genomics_V1alpha2_SetOperationStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Genomics_V1alpha2_SetOperationStatusRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Genomics_V1alpha2_PipelinesV1Alpha2ClientProtocol {

  /// Creates a pipeline that can be run later. Create takes a Pipeline that
  /// has all fields other than `pipelineId` populated, and then returns
  /// the same pipeline with `pipelineId` populated. This id can be used
  /// to run the pipeline.
  ///
  /// Caller must have WRITE permission to the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePipeline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createPipeline(
    _ request: Google_Genomics_V1alpha2_CreatePipelineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_CreatePipelineRequest, Google_Genomics_V1alpha2_Pipeline> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/CreatePipeline",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Runs a pipeline. If `pipelineId` is specified in the request, then
  /// run a saved pipeline. If `ephemeralPipeline` is specified, then run
  /// that pipeline once without saving a copy.
  ///
  /// The caller must have READ permission to the project where the pipeline
  /// is stored and WRITE permission to the project where the pipeline will be
  /// run, as VMs will be created and storage will be used.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunPipeline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func runPipeline(
    _ request: Google_Genomics_V1alpha2_RunPipelineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_RunPipelineRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/RunPipeline",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves a pipeline based on ID.
  ///
  /// Caller must have READ permission to the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPipeline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPipeline(
    _ request: Google_Genomics_V1alpha2_GetPipelineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_GetPipelineRequest, Google_Genomics_V1alpha2_Pipeline> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/GetPipeline",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists pipelines.
  ///
  /// Caller must have READ permission to the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPipelines.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPipelines(
    _ request: Google_Genomics_V1alpha2_ListPipelinesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_ListPipelinesRequest, Google_Genomics_V1alpha2_ListPipelinesResponse> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/ListPipelines",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a pipeline based on ID.
  ///
  /// Caller must have WRITE permission to the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeletePipeline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deletePipeline(
    _ request: Google_Genomics_V1alpha2_DeletePipelineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_DeletePipelineRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/DeletePipeline",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets controller configuration information. Should only be called
  /// by VMs created by the Pipelines Service and not by end users.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetControllerConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getControllerConfig(
    _ request: Google_Genomics_V1alpha2_GetControllerConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_GetControllerConfigRequest, Google_Genomics_V1alpha2_ControllerConfig> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/GetControllerConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets status of a given operation. Any new timestamps (as determined by
  /// description) are appended to TimestampEvents. Should only be called by VMs
  /// created by the Pipelines Service and not by end users.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetOperationStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setOperationStatus(
    _ request: Google_Genomics_V1alpha2_SetOperationStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Genomics_V1alpha2_SetOperationStatusRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.genomics.v1alpha2.PipelinesV1Alpha2/SetOperationStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Genomics_V1alpha2_PipelinesV1Alpha2Client: Google_Genomics_V1alpha2_PipelinesV1Alpha2ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.genomics.v1alpha2.PipelinesV1Alpha2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Genomics_V1alpha2_PipelinesV1Alpha2Provider: CallHandlerProvider {
  /// Creates a pipeline that can be run later. Create takes a Pipeline that
  /// has all fields other than `pipelineId` populated, and then returns
  /// the same pipeline with `pipelineId` populated. This id can be used
  /// to run the pipeline.
  ///
  /// Caller must have WRITE permission to the project.
  func createPipeline(request: Google_Genomics_V1alpha2_CreatePipelineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1alpha2_Pipeline>
  /// Runs a pipeline. If `pipelineId` is specified in the request, then
  /// run a saved pipeline. If `ephemeralPipeline` is specified, then run
  /// that pipeline once without saving a copy.
  ///
  /// The caller must have READ permission to the project where the pipeline
  /// is stored and WRITE permission to the project where the pipeline will be
  /// run, as VMs will be created and storage will be used.
  func runPipeline(request: Google_Genomics_V1alpha2_RunPipelineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Retrieves a pipeline based on ID.
  ///
  /// Caller must have READ permission to the project.
  func getPipeline(request: Google_Genomics_V1alpha2_GetPipelineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1alpha2_Pipeline>
  /// Lists pipelines.
  ///
  /// Caller must have READ permission to the project.
  func listPipelines(request: Google_Genomics_V1alpha2_ListPipelinesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1alpha2_ListPipelinesResponse>
  /// Deletes a pipeline based on ID.
  ///
  /// Caller must have WRITE permission to the project.
  func deletePipeline(request: Google_Genomics_V1alpha2_DeletePipelineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets controller configuration information. Should only be called
  /// by VMs created by the Pipelines Service and not by end users.
  func getControllerConfig(request: Google_Genomics_V1alpha2_GetControllerConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Genomics_V1alpha2_ControllerConfig>
  /// Sets status of a given operation. Any new timestamps (as determined by
  /// description) are appended to TimestampEvents. Should only be called by VMs
  /// created by the Pipelines Service and not by end users.
  func setOperationStatus(request: Google_Genomics_V1alpha2_SetOperationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Genomics_V1alpha2_PipelinesV1Alpha2Provider {
  public var serviceName: Substring { return "google.genomics.v1alpha2.PipelinesV1Alpha2" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreatePipeline":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createPipeline(request: request, context: context)
        }
      }

    case "RunPipeline":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runPipeline(request: request, context: context)
        }
      }

    case "GetPipeline":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getPipeline(request: request, context: context)
        }
      }

    case "ListPipelines":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listPipelines(request: request, context: context)
        }
      }

    case "DeletePipeline":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deletePipeline(request: request, context: context)
        }
      }

    case "GetControllerConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getControllerConfig(request: request, context: context)
        }
      }

    case "SetOperationStatus":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setOperationStatus(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

