// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/firestore/admin/v1beta1/index.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A field of an index.
public struct Google_Firestore_Admin_V1beta1_IndexField {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path of the field. Must match the field path specification described
  /// by [google.firestore.v1beta1.Document.fields][fields].
  /// Special field path `__name__` may be used by itself or at the end of a
  /// path. `__type__` may be used only at the end of path.
  public var fieldPath: String = String()

  /// The field's mode.
  public var mode: Google_Firestore_Admin_V1beta1_IndexField.Mode = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The mode determines how a field is indexed.
  public enum Mode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The mode is unspecified.
    case unspecified // = 0

    /// The field's values are indexed so as to support sequencing in
    /// ascending order and also query by <, >, <=, >=, and =.
    case ascending // = 2

    /// The field's values are indexed so as to support sequencing in
    /// descending order and also query by <, >, <=, >=, and =.
    case descending // = 3

    /// The field's array values are indexed so as to support membership using
    /// ARRAY_CONTAINS queries.
    case arrayContains // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 2: self = .ascending
      case 3: self = .descending
      case 4: self = .arrayContains
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .ascending: return 2
      case .descending: return 3
      case .arrayContains: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Firestore_Admin_V1beta1_IndexField.Mode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Firestore_Admin_V1beta1_IndexField.Mode] = [
    .unspecified,
    .ascending,
    .descending,
    .arrayContains,
  ]
}

#endif  // swift(>=4.2)

/// An index definition.
public struct Google_Firestore_Admin_V1beta1_Index {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the index.
  /// Output only.
  public var name: String = String()

  /// The collection ID to which this index applies. Required.
  public var collectionID: String = String()

  /// The fields to index.
  public var fields: [Google_Firestore_Admin_V1beta1_IndexField] = []

  /// The state of the index.
  /// Output only.
  public var state: Google_Firestore_Admin_V1beta1_Index.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The state of an index. During index creation, an index will be in the
  /// `CREATING` state. If the index is created successfully, it will transition
  /// to the `READY` state. If the index is not able to be created, it will
  /// transition to the `ERROR` state.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The state is unspecified.
    case unspecified // = 0

    /// The index is being created.
    /// There is an active long-running operation for the index.
    /// The index is updated when writing a document.
    /// Some index data may exist.
    case creating // = 3

    /// The index is ready to be used.
    /// The index is updated when writing a document.
    /// The index is fully populated from all stored documents it applies to.
    case ready // = 2

    /// The index was being created, but something went wrong.
    /// There is no active long-running operation for the index,
    /// and the most recently finished long-running operation failed.
    /// The index is not updated when writing a document.
    /// Some index data may exist.
    case error // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 2: self = .ready
      case 3: self = .creating
      case 5: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .ready: return 2
      case .creating: return 3
      case .error: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Firestore_Admin_V1beta1_Index.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Firestore_Admin_V1beta1_Index.State] = [
    .unspecified,
    .creating,
    .ready,
    .error,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.firestore.admin.v1beta1"

extension Google_Firestore_Admin_V1beta1_IndexField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IndexField"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_path"),
    2: .same(proto: "mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fieldPath) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fieldPath.isEmpty {
      try visitor.visitSingularStringField(value: self.fieldPath, fieldNumber: 1)
    }
    if self.mode != .unspecified {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_Admin_V1beta1_IndexField, rhs: Google_Firestore_Admin_V1beta1_IndexField) -> Bool {
    if lhs.fieldPath != rhs.fieldPath {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_Admin_V1beta1_IndexField.Mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODE_UNSPECIFIED"),
    2: .same(proto: "ASCENDING"),
    3: .same(proto: "DESCENDING"),
    4: .same(proto: "ARRAY_CONTAINS"),
  ]
}

extension Google_Firestore_Admin_V1beta1_Index: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Index"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "collection_id"),
    3: .same(proto: "fields"),
    6: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 2)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 3)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_Admin_V1beta1_Index, rhs: Google_Firestore_Admin_V1beta1_Index) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_Admin_V1beta1_Index.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    2: .same(proto: "READY"),
    3: .same(proto: "CREATING"),
    5: .same(proto: "ERROR"),
  ]
}
