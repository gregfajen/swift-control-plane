//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/firestore/v1beta1/firestore.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Firestore_V1beta1_FirestoreClient, then call methods of this protocol to make API calls.
public protocol Google_Firestore_V1beta1_FirestoreClientProtocol: GRPCClient {
  func getDocument(
    _ request: Google_Firestore_V1beta1_GetDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_GetDocumentRequest, Google_Firestore_V1beta1_Document>

  func listDocuments(
    _ request: Google_Firestore_V1beta1_ListDocumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_ListDocumentsRequest, Google_Firestore_V1beta1_ListDocumentsResponse>

  func createDocument(
    _ request: Google_Firestore_V1beta1_CreateDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_CreateDocumentRequest, Google_Firestore_V1beta1_Document>

  func updateDocument(
    _ request: Google_Firestore_V1beta1_UpdateDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_UpdateDocumentRequest, Google_Firestore_V1beta1_Document>

  func deleteDocument(
    _ request: Google_Firestore_V1beta1_DeleteDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func batchGetDocuments(
    _ request: Google_Firestore_V1beta1_BatchGetDocumentsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1beta1_BatchGetDocumentsResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1beta1_BatchGetDocumentsRequest, Google_Firestore_V1beta1_BatchGetDocumentsResponse>

  func beginTransaction(
    _ request: Google_Firestore_V1beta1_BeginTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_BeginTransactionRequest, Google_Firestore_V1beta1_BeginTransactionResponse>

  func commit(
    _ request: Google_Firestore_V1beta1_CommitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_CommitRequest, Google_Firestore_V1beta1_CommitResponse>

  func rollback(
    _ request: Google_Firestore_V1beta1_RollbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func runQuery(
    _ request: Google_Firestore_V1beta1_RunQueryRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1beta1_RunQueryResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1beta1_RunQueryRequest, Google_Firestore_V1beta1_RunQueryResponse>

  func write(
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1beta1_WriteResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1beta1_WriteRequest, Google_Firestore_V1beta1_WriteResponse>

  func listen(
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1beta1_ListenResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1beta1_ListenRequest, Google_Firestore_V1beta1_ListenResponse>

  func listCollectionIds(
    _ request: Google_Firestore_V1beta1_ListCollectionIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1beta1_ListCollectionIdsRequest, Google_Firestore_V1beta1_ListCollectionIdsResponse>

}

extension Google_Firestore_V1beta1_FirestoreClientProtocol {

  /// Gets a single document.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDocument(
    _ request: Google_Firestore_V1beta1_GetDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_GetDocumentRequest, Google_Firestore_V1beta1_Document> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/GetDocument",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDocuments(
    _ request: Google_Firestore_V1beta1_ListDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_ListDocumentsRequest, Google_Firestore_V1beta1_ListDocumentsResponse> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/ListDocuments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new document.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDocument(
    _ request: Google_Firestore_V1beta1_CreateDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_CreateDocumentRequest, Google_Firestore_V1beta1_Document> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/CreateDocument",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates or inserts a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDocument(
    _ request: Google_Firestore_V1beta1_UpdateDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_UpdateDocumentRequest, Google_Firestore_V1beta1_Document> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/UpdateDocument",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDocument(
    _ request: Google_Firestore_V1beta1_DeleteDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/DeleteDocument",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets multiple documents.
  ///
  /// Documents returned by this method are not guaranteed to be returned in the
  /// same order that they were requested.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchGetDocuments.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func batchGetDocuments(
    _ request: Google_Firestore_V1beta1_BatchGetDocumentsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1beta1_BatchGetDocumentsResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1beta1_BatchGetDocumentsRequest, Google_Firestore_V1beta1_BatchGetDocumentsResponse> {
    return self.makeServerStreamingCall(
      path: "/google.firestore.v1beta1.Firestore/BatchGetDocuments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Starts a new transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginTransaction(
    _ request: Google_Firestore_V1beta1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_BeginTransactionRequest, Google_Firestore_V1beta1_BeginTransactionResponse> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/BeginTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Commits a transaction, while optionally updating documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to Commit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func commit(
    _ request: Google_Firestore_V1beta1_CommitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_CommitRequest, Google_Firestore_V1beta1_CommitResponse> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/Commit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Rolls back a transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to Rollback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rollback(
    _ request: Google_Firestore_V1beta1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/Rollback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Runs a query.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunQuery.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func runQuery(
    _ request: Google_Firestore_V1beta1_RunQueryRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1beta1_RunQueryResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1beta1_RunQueryRequest, Google_Firestore_V1beta1_RunQueryResponse> {
    return self.makeServerStreamingCall(
      path: "/google.firestore.v1beta1.Firestore/RunQuery",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Streams batches of document updates and deletes, in order.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func write(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1beta1_WriteResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1beta1_WriteRequest, Google_Firestore_V1beta1_WriteResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/google.firestore.v1beta1.Firestore/Write",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Listens to changes.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func listen(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1beta1_ListenResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1beta1_ListenRequest, Google_Firestore_V1beta1_ListenResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/google.firestore.v1beta1.Firestore/Listen",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Lists all the collection IDs underneath a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCollectionIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCollectionIds(
    _ request: Google_Firestore_V1beta1_ListCollectionIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1beta1_ListCollectionIdsRequest, Google_Firestore_V1beta1_ListCollectionIdsResponse> {
    return self.makeUnaryCall(
      path: "/google.firestore.v1beta1.Firestore/ListCollectionIds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Firestore_V1beta1_FirestoreClient: Google_Firestore_V1beta1_FirestoreClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.firestore.v1beta1.Firestore service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Firestore_V1beta1_FirestoreProvider: CallHandlerProvider {
  /// Gets a single document.
  func getDocument(request: Google_Firestore_V1beta1_GetDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_Document>
  /// Lists documents.
  func listDocuments(request: Google_Firestore_V1beta1_ListDocumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_ListDocumentsResponse>
  /// Creates a new document.
  func createDocument(request: Google_Firestore_V1beta1_CreateDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_Document>
  /// Updates or inserts a document.
  func updateDocument(request: Google_Firestore_V1beta1_UpdateDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_Document>
  /// Deletes a document.
  func deleteDocument(request: Google_Firestore_V1beta1_DeleteDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets multiple documents.
  ///
  /// Documents returned by this method are not guaranteed to be returned in the
  /// same order that they were requested.
  func batchGetDocuments(request: Google_Firestore_V1beta1_BatchGetDocumentsRequest, context: StreamingResponseCallContext<Google_Firestore_V1beta1_BatchGetDocumentsResponse>) -> EventLoopFuture<GRPCStatus>
  /// Starts a new transaction.
  func beginTransaction(request: Google_Firestore_V1beta1_BeginTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_BeginTransactionResponse>
  /// Commits a transaction, while optionally updating documents.
  func commit(request: Google_Firestore_V1beta1_CommitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_CommitResponse>
  /// Rolls back a transaction.
  func rollback(request: Google_Firestore_V1beta1_RollbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Runs a query.
  func runQuery(request: Google_Firestore_V1beta1_RunQueryRequest, context: StreamingResponseCallContext<Google_Firestore_V1beta1_RunQueryResponse>) -> EventLoopFuture<GRPCStatus>
  /// Streams batches of document updates and deletes, in order.
  func write(context: StreamingResponseCallContext<Google_Firestore_V1beta1_WriteResponse>) -> EventLoopFuture<(StreamEvent<Google_Firestore_V1beta1_WriteRequest>) -> Void>
  /// Listens to changes.
  func listen(context: StreamingResponseCallContext<Google_Firestore_V1beta1_ListenResponse>) -> EventLoopFuture<(StreamEvent<Google_Firestore_V1beta1_ListenRequest>) -> Void>
  /// Lists all the collection IDs underneath a document.
  func listCollectionIds(request: Google_Firestore_V1beta1_ListCollectionIdsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1beta1_ListCollectionIdsResponse>
}

extension Google_Firestore_V1beta1_FirestoreProvider {
  public var serviceName: Substring { return "google.firestore.v1beta1.Firestore" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetDocument":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getDocument(request: request, context: context)
        }
      }

    case "ListDocuments":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDocuments(request: request, context: context)
        }
      }

    case "CreateDocument":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createDocument(request: request, context: context)
        }
      }

    case "UpdateDocument":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateDocument(request: request, context: context)
        }
      }

    case "DeleteDocument":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteDocument(request: request, context: context)
        }
      }

    case "BatchGetDocuments":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchGetDocuments(request: request, context: context)
        }
      }

    case "BeginTransaction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.beginTransaction(request: request, context: context)
        }
      }

    case "Commit":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.commit(request: request, context: context)
        }
      }

    case "Rollback":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.rollback(request: request, context: context)
        }
      }

    case "RunQuery":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runQuery(request: request, context: context)
        }
      }

    case "Write":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.write(context: context)
      }

    case "Listen":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.listen(context: context)
      }

    case "ListCollectionIds":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCollectionIds(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

