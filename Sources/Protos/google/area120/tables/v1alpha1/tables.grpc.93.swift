//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/area120/tables/v1alpha1/tables.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Area120_Tables_V1alpha1_TablesServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Area120_Tables_V1alpha1_TablesServiceClientProtocol: GRPCClient {
  func getTable(
    _ request: Google_Area120_Tables_V1alpha1_GetTableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_GetTableRequest, Google_Area120_Tables_V1alpha1_Table>

  func listTables(
    _ request: Google_Area120_Tables_V1alpha1_ListTablesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_ListTablesRequest, Google_Area120_Tables_V1alpha1_ListTablesResponse>

  func getRow(
    _ request: Google_Area120_Tables_V1alpha1_GetRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_GetRowRequest, Google_Area120_Tables_V1alpha1_Row>

  func listRows(
    _ request: Google_Area120_Tables_V1alpha1_ListRowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_ListRowsRequest, Google_Area120_Tables_V1alpha1_ListRowsResponse>

  func createRow(
    _ request: Google_Area120_Tables_V1alpha1_CreateRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_CreateRowRequest, Google_Area120_Tables_V1alpha1_Row>

  func batchCreateRows(
    _ request: Google_Area120_Tables_V1alpha1_BatchCreateRowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_BatchCreateRowsRequest, Google_Area120_Tables_V1alpha1_BatchCreateRowsResponse>

  func updateRow(
    _ request: Google_Area120_Tables_V1alpha1_UpdateRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_UpdateRowRequest, Google_Area120_Tables_V1alpha1_Row>

  func batchUpdateRows(
    _ request: Google_Area120_Tables_V1alpha1_BatchUpdateRowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_BatchUpdateRowsRequest, Google_Area120_Tables_V1alpha1_BatchUpdateRowsResponse>

  func deleteRow(
    _ request: Google_Area120_Tables_V1alpha1_DeleteRowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_DeleteRowRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Area120_Tables_V1alpha1_TablesServiceClientProtocol {

  /// Gets a table. Returns NOT_FOUND if the table does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTable(
    _ request: Google_Area120_Tables_V1alpha1_GetTableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_GetTableRequest, Google_Area120_Tables_V1alpha1_Table> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/GetTable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists tables for the user.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTables.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTables(
    _ request: Google_Area120_Tables_V1alpha1_ListTablesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_ListTablesRequest, Google_Area120_Tables_V1alpha1_ListTablesResponse> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/ListTables",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getRow(
    _ request: Google_Area120_Tables_V1alpha1_GetRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_GetRowRequest, Google_Area120_Tables_V1alpha1_Row> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/GetRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListRows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listRows(
    _ request: Google_Area120_Tables_V1alpha1_ListRowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_ListRowsRequest, Google_Area120_Tables_V1alpha1_ListRowsResponse> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/ListRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a row.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createRow(
    _ request: Google_Area120_Tables_V1alpha1_CreateRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_CreateRowRequest, Google_Area120_Tables_V1alpha1_Row> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/CreateRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates multiple rows.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchCreateRows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchCreateRows(
    _ request: Google_Area120_Tables_V1alpha1_BatchCreateRowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_BatchCreateRowsRequest, Google_Area120_Tables_V1alpha1_BatchCreateRowsResponse> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/BatchCreateRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a row.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateRow(
    _ request: Google_Area120_Tables_V1alpha1_UpdateRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_UpdateRowRequest, Google_Area120_Tables_V1alpha1_Row> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/UpdateRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates multiple rows.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchUpdateRows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchUpdateRows(
    _ request: Google_Area120_Tables_V1alpha1_BatchUpdateRowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_BatchUpdateRowsRequest, Google_Area120_Tables_V1alpha1_BatchUpdateRowsResponse> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/BatchUpdateRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a row.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteRow(
    _ request: Google_Area120_Tables_V1alpha1_DeleteRowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Area120_Tables_V1alpha1_DeleteRowRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.area120.tables.v1alpha1.TablesService/DeleteRow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Area120_Tables_V1alpha1_TablesServiceClient: Google_Area120_Tables_V1alpha1_TablesServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.area120.tables.v1alpha1.TablesService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Area120_Tables_V1alpha1_TablesServiceProvider: CallHandlerProvider {
  /// Gets a table. Returns NOT_FOUND if the table does not exist.
  func getTable(request: Google_Area120_Tables_V1alpha1_GetTableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_Table>
  /// Lists tables for the user.
  func listTables(request: Google_Area120_Tables_V1alpha1_ListTablesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_ListTablesResponse>
  /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
  func getRow(request: Google_Area120_Tables_V1alpha1_GetRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_Row>
  /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
  func listRows(request: Google_Area120_Tables_V1alpha1_ListRowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_ListRowsResponse>
  /// Creates a row.
  func createRow(request: Google_Area120_Tables_V1alpha1_CreateRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_Row>
  /// Creates multiple rows.
  func batchCreateRows(request: Google_Area120_Tables_V1alpha1_BatchCreateRowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_BatchCreateRowsResponse>
  /// Updates a row.
  func updateRow(request: Google_Area120_Tables_V1alpha1_UpdateRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_Row>
  /// Updates multiple rows.
  func batchUpdateRows(request: Google_Area120_Tables_V1alpha1_BatchUpdateRowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Area120_Tables_V1alpha1_BatchUpdateRowsResponse>
  /// Deletes a row.
  func deleteRow(request: Google_Area120_Tables_V1alpha1_DeleteRowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Area120_Tables_V1alpha1_TablesServiceProvider {
  public var serviceName: Substring { return "google.area120.tables.v1alpha1.TablesService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetTable":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTable(request: request, context: context)
        }
      }

    case "ListTables":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTables(request: request, context: context)
        }
      }

    case "GetRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getRow(request: request, context: context)
        }
      }

    case "ListRows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listRows(request: request, context: context)
        }
      }

    case "CreateRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createRow(request: request, context: context)
        }
      }

    case "BatchCreateRows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchCreateRows(request: request, context: context)
        }
      }

    case "UpdateRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateRow(request: request, context: context)
        }
      }

    case "BatchUpdateRows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchUpdateRows(request: request, context: context)
        }
      }

    case "DeleteRow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteRow(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

