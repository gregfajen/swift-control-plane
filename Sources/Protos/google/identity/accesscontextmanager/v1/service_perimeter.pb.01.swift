// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/identity/accesscontextmanager/v1/service_perimeter.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// `ServicePerimeter` describes a set of Google Cloud resources which can freely
/// import and export data amongst themselves, but not export outside of the
/// `ServicePerimeter`. If a request with a source within this `ServicePerimeter`
/// has a target outside of the `ServicePerimeter`, the request will be blocked.
/// Otherwise the request is allowed. There are two types of Service Perimeter -
/// Regular and Bridge. Regular Service Perimeters cannot overlap, a single
/// Google Cloud project can only belong to a single regular Service Perimeter.
/// Service Perimeter Bridges can contain only Google Cloud projects as members,
/// a single Google Cloud project may belong to multiple Service Perimeter
/// Bridges.
public struct Google_Identity_Accesscontextmanager_V1_ServicePerimeter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name for the ServicePerimeter.  The `short_name`
  /// component must begin with a letter and only include alphanumeric and '_'.
  /// Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Human readable title. Must be unique within the Policy.
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// Description of the `ServicePerimeter` and its use. Does not affect
  /// behavior.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Output only. Time the `ServicePerimeter` was created in UTC.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Time the `ServicePerimeter` was updated in UTC.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Perimeter type indicator. A single project is
  /// allowed to be a member of single regular perimeter, but multiple service
  /// perimeter bridges. A project cannot be a included in a perimeter bridge
  /// without being included in regular perimeter. For perimeter bridges,
  /// the restricted service list as well as access level lists must be
  /// empty.
  public var perimeterType: Google_Identity_Accesscontextmanager_V1_ServicePerimeter.PerimeterType {
    get {return _storage._perimeterType}
    set {_uniqueStorage()._perimeterType = newValue}
  }

  /// Current ServicePerimeter configuration. Specifies sets of resources,
  /// restricted services and access levels that determine perimeter
  /// content and boundaries.
  public var status: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig {
    get {return _storage._status ?? Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  /// Proposed (or dry run) ServicePerimeter configuration. This configuration
  /// allows to specify and test ServicePerimeter configuration without enforcing
  /// actual access restrictions. Only allowed to be set when the
  /// "use_explicit_dry_run_spec" flag is set.
  public var spec: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig {
    get {return _storage._spec ?? Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
  /// exists  for all Service Perimeters, and that spec is identical to the
  /// status for those Service Perimeters. When this flag is set, it inhibits the
  /// generation of the implicit spec, thereby allowing the user to explicitly
  /// provide a configuration ("spec") to use in a dry-run version of the Service
  /// Perimeter. This allows the user to test changes to the enforced config
  /// ("status") without actually enforcing them. This testing is done through
  /// analyzing the differences between currently enforced and suggested
  /// restrictions. use_explicit_dry_run_spec must bet set to True if any of the
  /// fields in the spec are set to non-default values.
  public var useExplicitDryRunSpec: Bool {
    get {return _storage._useExplicitDryRunSpec}
    set {_uniqueStorage()._useExplicitDryRunSpec = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies the type of the Perimeter. There are two types: regular and
  /// bridge. Regular Service Perimeter contains resources, access levels, and
  /// restricted services. Every resource can be in at most ONE
  /// regular Service Perimeter.
  ///
  /// In addition to being in a regular service perimeter, a resource can also
  /// be in zero or more perimeter bridges.  A perimeter bridge only contains
  /// resources.  Cross project operations are permitted if all effected
  /// resources share some perimeter (whether bridge or regular). Perimeter
  /// Bridge does not contain access levels or services: those are governed
  /// entirely by the regular perimeter that resource is in.
  ///
  /// Perimeter Bridges are typically useful when building more complex toplogies
  /// with many independent perimeters that need to share some data with a common
  /// perimeter, but should not be able to share data among themselves.
  public enum PerimeterType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Regular Perimeter.
    case regular // = 0

    /// Perimeter Bridge.
    case bridge // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .regular
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .regular
      case 1: self = .bridge
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .regular: return 0
      case .bridge: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Identity_Accesscontextmanager_V1_ServicePerimeter.PerimeterType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Identity_Accesscontextmanager_V1_ServicePerimeter.PerimeterType] = [
    .regular,
    .bridge,
  ]
}

#endif  // swift(>=4.2)

/// `ServicePerimeterConfig` specifies a set of Google Cloud resources that
/// describe specific Service Perimeter configuration.
public struct Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of Google Cloud resources that are inside of the service perimeter.
  /// Currently only projects are allowed. Format: `projects/{project_number}`
  public var resources: [String] = []

  /// A list of `AccessLevel` resource names that allow resources within the
  /// `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed
  /// must be in the same policy as this `ServicePerimeter`. Referencing a
  /// nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are
  /// listed, resources within the perimeter can only be accessed via Google
  /// Cloud calls with request origins within the perimeter. Example:
  /// `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`.
  /// For Service Perimeter Bridge, must be empty.
  public var accessLevels: [String] = []

  /// Google Cloud services that are subject to the Service Perimeter
  /// restrictions. For example, if `storage.googleapis.com` is specified, access
  /// to the storage buckets inside the perimeter must meet the perimeter's
  /// access restrictions.
  public var restrictedServices: [String] = []

  /// Configuration for APIs allowed within Perimeter.
  public var vpcAccessibleServices: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.VpcAccessibleServices {
    get {return _vpcAccessibleServices ?? Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.VpcAccessibleServices()}
    set {_vpcAccessibleServices = newValue}
  }
  /// Returns true if `vpcAccessibleServices` has been explicitly set.
  public var hasVpcAccessibleServices: Bool {return self._vpcAccessibleServices != nil}
  /// Clears the value of `vpcAccessibleServices`. Subsequent reads from it will return its default value.
  public mutating func clearVpcAccessibleServices() {self._vpcAccessibleServices = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies how APIs are allowed to communicate within the Service
  /// Perimeter.
  public struct VpcAccessibleServices {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether to restrict API calls within the Service Perimeter to the list of
    /// APIs specified in 'allowed_services'.
    public var enableRestriction: Bool = false

    /// The list of APIs usable within the Service Perimeter. Must be empty
    /// unless 'enable_restriction' is True.
    public var allowedServices: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _vpcAccessibleServices: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.VpcAccessibleServices? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.identity.accesscontextmanager.v1"

extension Google_Identity_Accesscontextmanager_V1_ServicePerimeter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServicePerimeter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .standard(proto: "create_time"),
    5: .standard(proto: "update_time"),
    6: .standard(proto: "perimeter_type"),
    7: .same(proto: "status"),
    8: .same(proto: "spec"),
    9: .standard(proto: "use_explicit_dry_run_spec"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _title: String = String()
    var _description_p: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _perimeterType: Google_Identity_Accesscontextmanager_V1_ServicePerimeter.PerimeterType = .regular
    var _status: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig? = nil
    var _spec: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig? = nil
    var _useExplicitDryRunSpec: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _title = source._title
      _description_p = source._description_p
      _createTime = source._createTime
      _updateTime = source._updateTime
      _perimeterType = source._perimeterType
      _status = source._status
      _spec = source._spec
      _useExplicitDryRunSpec = source._useExplicitDryRunSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._perimeterType) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._useExplicitDryRunSpec) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._perimeterType != .regular {
        try visitor.visitSingularEnumField(value: _storage._perimeterType, fieldNumber: 6)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._useExplicitDryRunSpec != false {
        try visitor.visitSingularBoolField(value: _storage._useExplicitDryRunSpec, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Identity_Accesscontextmanager_V1_ServicePerimeter, rhs: Google_Identity_Accesscontextmanager_V1_ServicePerimeter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._perimeterType != rhs_storage._perimeterType {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._useExplicitDryRunSpec != rhs_storage._useExplicitDryRunSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Identity_Accesscontextmanager_V1_ServicePerimeter.PerimeterType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIMETER_TYPE_REGULAR"),
    1: .same(proto: "PERIMETER_TYPE_BRIDGE"),
  ]
}

extension Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServicePerimeterConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resources"),
    2: .standard(proto: "access_levels"),
    4: .standard(proto: "restricted_services"),
    10: .standard(proto: "vpc_accessible_services"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.resources) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.accessLevels) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.restrictedServices) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._vpcAccessibleServices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resources.isEmpty {
      try visitor.visitRepeatedStringField(value: self.resources, fieldNumber: 1)
    }
    if !self.accessLevels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.accessLevels, fieldNumber: 2)
    }
    if !self.restrictedServices.isEmpty {
      try visitor.visitRepeatedStringField(value: self.restrictedServices, fieldNumber: 4)
    }
    if let v = self._vpcAccessibleServices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig, rhs: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig) -> Bool {
    if lhs.resources != rhs.resources {return false}
    if lhs.accessLevels != rhs.accessLevels {return false}
    if lhs.restrictedServices != rhs.restrictedServices {return false}
    if lhs._vpcAccessibleServices != rhs._vpcAccessibleServices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.VpcAccessibleServices: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.protoMessageName + ".VpcAccessibleServices"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_restriction"),
    2: .standard(proto: "allowed_services"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enableRestriction) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.allowedServices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableRestriction != false {
      try visitor.visitSingularBoolField(value: self.enableRestriction, fieldNumber: 1)
    }
    if !self.allowedServices.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedServices, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.VpcAccessibleServices, rhs: Google_Identity_Accesscontextmanager_V1_ServicePerimeterConfig.VpcAccessibleServices) -> Bool {
    if lhs.enableRestriction != rhs.enableRestriction {return false}
    if lhs.allowedServices != rhs.allowedServices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
