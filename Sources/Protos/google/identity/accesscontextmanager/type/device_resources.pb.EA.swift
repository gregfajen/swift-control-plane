// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/identity/accesscontextmanager/type/device_resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The encryption state of the device.
public enum Google_Identity_Accesscontextmanager_Type_DeviceEncryptionStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The encryption status of the device is not specified or not known.
  case encryptionUnspecified // = 0

  /// The device does not support encryption.
  case encryptionUnsupported // = 1

  /// The device supports encryption, but is currently unencrypted.
  case unencrypted // = 2

  /// The device is encrypted.
  case encrypted // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .encryptionUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .encryptionUnspecified
    case 1: self = .encryptionUnsupported
    case 2: self = .unencrypted
    case 3: self = .encrypted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .encryptionUnspecified: return 0
    case .encryptionUnsupported: return 1
    case .unencrypted: return 2
    case .encrypted: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Identity_Accesscontextmanager_Type_DeviceEncryptionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Identity_Accesscontextmanager_Type_DeviceEncryptionStatus] = [
    .encryptionUnspecified,
    .encryptionUnsupported,
    .unencrypted,
    .encrypted,
  ]
}

#endif  // swift(>=4.2)

/// The operating system type of the device.
/// Next id: 7
public enum Google_Identity_Accesscontextmanager_Type_OsType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The operating system of the device is not specified or not known.
  case osUnspecified // = 0

  /// A desktop Mac operating system.
  case desktopMac // = 1

  /// A desktop Windows operating system.
  case desktopWindows // = 2

  /// A desktop Linux operating system.
  case desktopLinux // = 3

  /// A desktop ChromeOS operating system.
  case desktopChromeOs // = 6

  /// An Android operating system.
  case android // = 4

  /// An iOS operating system.
  case ios // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .osUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .osUnspecified
    case 1: self = .desktopMac
    case 2: self = .desktopWindows
    case 3: self = .desktopLinux
    case 4: self = .android
    case 5: self = .ios
    case 6: self = .desktopChromeOs
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .osUnspecified: return 0
    case .desktopMac: return 1
    case .desktopWindows: return 2
    case .desktopLinux: return 3
    case .android: return 4
    case .ios: return 5
    case .desktopChromeOs: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Identity_Accesscontextmanager_Type_OsType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Identity_Accesscontextmanager_Type_OsType] = [
    .osUnspecified,
    .desktopMac,
    .desktopWindows,
    .desktopLinux,
    .desktopChromeOs,
    .android,
    .ios,
  ]
}

#endif  // swift(>=4.2)

/// The degree to which the device is managed by the Cloud organization.
public enum Google_Identity_Accesscontextmanager_Type_DeviceManagementLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The device's management level is not specified or not known.
  case managementUnspecified // = 0

  /// The device is not managed.
  case none // = 1

  /// Basic management is enabled, which is generally limited to monitoring and
  /// wiping the corporate account.
  case basic // = 2

  /// Complete device management. This includes more thorough monitoring and the
  /// ability to directly manage the device (such as remote wiping). This can be
  /// enabled through the Android Enterprise Platform.
  case complete // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .managementUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .managementUnspecified
    case 1: self = .none
    case 2: self = .basic
    case 3: self = .complete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .managementUnspecified: return 0
    case .none: return 1
    case .basic: return 2
    case .complete: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Identity_Accesscontextmanager_Type_DeviceManagementLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Identity_Accesscontextmanager_Type_DeviceManagementLevel] = [
    .managementUnspecified,
    .none,
    .basic,
    .complete,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Google_Identity_Accesscontextmanager_Type_DeviceEncryptionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENCRYPTION_UNSPECIFIED"),
    1: .same(proto: "ENCRYPTION_UNSUPPORTED"),
    2: .same(proto: "UNENCRYPTED"),
    3: .same(proto: "ENCRYPTED"),
  ]
}

extension Google_Identity_Accesscontextmanager_Type_OsType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OS_UNSPECIFIED"),
    1: .same(proto: "DESKTOP_MAC"),
    2: .same(proto: "DESKTOP_WINDOWS"),
    3: .same(proto: "DESKTOP_LINUX"),
    4: .same(proto: "ANDROID"),
    5: .same(proto: "IOS"),
    6: .same(proto: "DESKTOP_CHROME_OS"),
  ]
}

extension Google_Identity_Accesscontextmanager_Type_DeviceManagementLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MANAGEMENT_UNSPECIFIED"),
    1: .same(proto: "NONE"),
    2: .same(proto: "BASIC"),
    3: .same(proto: "COMPLETE"),
  ]
}
