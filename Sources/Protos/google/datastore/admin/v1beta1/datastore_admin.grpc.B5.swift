//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/datastore/admin/v1beta1/datastore_admin.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Datastore_Admin_V1beta1_DatastoreAdminClient, then call methods of this protocol to make API calls.
public protocol Google_Datastore_Admin_V1beta1_DatastoreAdminClientProtocol: GRPCClient {
  func exportEntities(
    _ request: Google_Datastore_Admin_V1beta1_ExportEntitiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_Admin_V1beta1_ExportEntitiesRequest, Google_Longrunning_Operation>

  func importEntities(
    _ request: Google_Datastore_Admin_V1beta1_ImportEntitiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_Admin_V1beta1_ImportEntitiesRequest, Google_Longrunning_Operation>

}

extension Google_Datastore_Admin_V1beta1_DatastoreAdminClientProtocol {

  /// Exports a copy of all or a subset of entities from Google Cloud Datastore
  /// to another storage system, such as Google Cloud Storage. Recent updates to
  /// entities may not be reflected in the export. The export occurs in the
  /// background and its progress can be monitored and managed via the
  /// Operation resource that is created. The output of an export may only be
  /// used once the associated operation is done. If an export operation is
  /// cancelled before completion it may leave partial data behind in Google
  /// Cloud Storage.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportEntities.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportEntities(
    _ request: Google_Datastore_Admin_V1beta1_ExportEntitiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_Admin_V1beta1_ExportEntitiesRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.datastore.admin.v1beta1.DatastoreAdmin/ExportEntities",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Imports entities into Google Cloud Datastore. Existing entities with the
  /// same key are overwritten. The import occurs in the background and its
  /// progress can be monitored and managed via the Operation resource that is
  /// created. If an ImportEntities operation is cancelled, it is possible
  /// that a subset of the data has already been imported to Cloud Datastore.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportEntities.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func importEntities(
    _ request: Google_Datastore_Admin_V1beta1_ImportEntitiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_Admin_V1beta1_ImportEntitiesRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.datastore.admin.v1beta1.DatastoreAdmin/ImportEntities",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Datastore_Admin_V1beta1_DatastoreAdminClient: Google_Datastore_Admin_V1beta1_DatastoreAdminClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.datastore.admin.v1beta1.DatastoreAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Datastore_Admin_V1beta1_DatastoreAdminProvider: CallHandlerProvider {
  /// Exports a copy of all or a subset of entities from Google Cloud Datastore
  /// to another storage system, such as Google Cloud Storage. Recent updates to
  /// entities may not be reflected in the export. The export occurs in the
  /// background and its progress can be monitored and managed via the
  /// Operation resource that is created. The output of an export may only be
  /// used once the associated operation is done. If an export operation is
  /// cancelled before completion it may leave partial data behind in Google
  /// Cloud Storage.
  func exportEntities(request: Google_Datastore_Admin_V1beta1_ExportEntitiesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Imports entities into Google Cloud Datastore. Existing entities with the
  /// same key are overwritten. The import occurs in the background and its
  /// progress can be monitored and managed via the Operation resource that is
  /// created. If an ImportEntities operation is cancelled, it is possible
  /// that a subset of the data has already been imported to Cloud Datastore.
  func importEntities(request: Google_Datastore_Admin_V1beta1_ImportEntitiesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Datastore_Admin_V1beta1_DatastoreAdminProvider {
  public var serviceName: Substring { return "google.datastore.admin.v1beta1.DatastoreAdmin" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ExportEntities":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.exportEntities(request: request, context: context)
        }
      }

    case "ImportEntities":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.importEntities(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

