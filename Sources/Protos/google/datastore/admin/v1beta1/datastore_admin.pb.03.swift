// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/datastore/admin/v1beta1/datastore_admin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Operation types.
public enum Google_Datastore_Admin_V1beta1_OperationType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified.
  case unspecified // = 0

  /// ExportEntities.
  case exportEntities // = 1

  /// ImportEntities.
  case importEntities // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .exportEntities
    case 2: self = .importEntities
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .exportEntities: return 1
    case .importEntities: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Datastore_Admin_V1beta1_OperationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Datastore_Admin_V1beta1_OperationType] = [
    .unspecified,
    .exportEntities,
    .importEntities,
  ]
}

#endif  // swift(>=4.2)

/// Metadata common to all Datastore Admin operations.
public struct Google_Datastore_Admin_V1beta1_CommonMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The time that work began on the operation.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// The time the operation ended, either successfully or otherwise.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// The type of the operation. Can be used as a filter in
  /// ListOperationsRequest.
  public var operationType: Google_Datastore_Admin_V1beta1_OperationType = .unspecified

  /// The client-assigned labels which were provided when the operation was
  /// created. May also include additional labels.
  public var labels: Dictionary<String,String> = [:]

  /// The current state of the Operation.
  public var state: Google_Datastore_Admin_V1beta1_CommonMetadata.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The various possible states for an ongoing Operation.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified.
    case unspecified // = 0

    /// Request is being prepared for processing.
    case initializing // = 1

    /// Request is actively being processed.
    case processing // = 2

    /// Request is in the process of being cancelled after user called
    /// google.longrunning.Operations.CancelOperation on the operation.
    case cancelling // = 3

    /// Request has been processed and is in its finalization stage.
    case finalizing // = 4

    /// Request has completed successfully.
    case successful // = 5

    /// Request has finished being processed, but encountered an error.
    case failed // = 6

    /// Request has finished being cancelled after user called
    /// google.longrunning.Operations.CancelOperation.
    case cancelled // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .initializing
      case 2: self = .processing
      case 3: self = .cancelling
      case 4: self = .finalizing
      case 5: self = .successful
      case 6: self = .failed
      case 7: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .initializing: return 1
      case .processing: return 2
      case .cancelling: return 3
      case .finalizing: return 4
      case .successful: return 5
      case .failed: return 6
      case .cancelled: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Datastore_Admin_V1beta1_CommonMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Datastore_Admin_V1beta1_CommonMetadata.State] = [
    .unspecified,
    .initializing,
    .processing,
    .cancelling,
    .finalizing,
    .successful,
    .failed,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

/// Measures the progress of a particular metric.
public struct Google_Datastore_Admin_V1beta1_Progress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The amount of work that has been completed. Note that this may be greater
  /// than work_estimated.
  public var workCompleted: Int64 = 0

  /// An estimate of how much work needs to be performed. May be zero if the
  /// work estimate is unavailable.
  public var workEstimated: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities].
public struct Google_Datastore_Admin_V1beta1_ExportEntitiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Project ID against which to make the request.
  public var projectID: String = String()

  /// Client-assigned labels.
  public var labels: Dictionary<String,String> = [:]

  /// Description of what data from the project is included in the export.
  public var entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter {
    get {return _entityFilter ?? Google_Datastore_Admin_V1beta1_EntityFilter()}
    set {_entityFilter = newValue}
  }
  /// Returns true if `entityFilter` has been explicitly set.
  public var hasEntityFilter: Bool {return self._entityFilter != nil}
  /// Clears the value of `entityFilter`. Subsequent reads from it will return its default value.
  public mutating func clearEntityFilter() {self._entityFilter = nil}

  /// Location for the export metadata and data files.
  ///
  /// The full resource URL of the external storage location. Currently, only
  /// Google Cloud Storage is supported. So output_url_prefix should be of the
  /// form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the
  /// name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud
  /// Storage namespace path (this is not a Cloud Datastore namespace). For more
  /// information about Cloud Storage namespace paths, see
  /// [Object name
  /// considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
  ///
  /// The resulting files will be nested deeper than the specified URL prefix.
  /// The final output URL will be provided in the
  /// [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url]
  /// field. That value should be used for subsequent ImportEntities operations.
  ///
  /// By nesting the data files deeper, the same Cloud Storage bucket can be used
  /// in multiple ExportEntities operations without conflict.
  public var outputURLPrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter? = nil
}

/// The request for
/// [google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities].
public struct Google_Datastore_Admin_V1beta1_ImportEntitiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Project ID against which to make the request.
  public var projectID: String = String()

  /// Client-assigned labels.
  public var labels: Dictionary<String,String> = [:]

  /// The full resource URL of the external storage location. Currently, only
  /// Google Cloud Storage is supported. So input_url should be of the form:
  /// `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where
  /// `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is
  /// an optional Cloud Storage namespace path (this is not a Cloud Datastore
  /// namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written
  /// by the ExportEntities operation. For more information about Cloud Storage
  /// namespace paths, see
  /// [Object name
  /// considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
  ///
  /// For more information, see
  /// [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url].
  public var inputURL: String = String()

  /// Optionally specify which kinds/namespaces are to be imported. If provided,
  /// the list must be a subset of the EntityFilter used in creating the export,
  /// otherwise a FAILED_PRECONDITION error will be returned. If no filter is
  /// specified then all entities from the export are imported.
  public var entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter {
    get {return _entityFilter ?? Google_Datastore_Admin_V1beta1_EntityFilter()}
    set {_entityFilter = newValue}
  }
  /// Returns true if `entityFilter` has been explicitly set.
  public var hasEntityFilter: Bool {return self._entityFilter != nil}
  /// Clears the value of `entityFilter`. Subsequent reads from it will return its default value.
  public mutating func clearEntityFilter() {self._entityFilter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter? = nil
}

/// The response for
/// [google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities].
public struct Google_Datastore_Admin_V1beta1_ExportEntitiesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Location of the output metadata file. This can be used to begin an import
  /// into Cloud Datastore (this project or another project). See
  /// [google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url][google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url].
  /// Only present if the operation completed successfully.
  public var outputURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Metadata for ExportEntities operations.
public struct Google_Datastore_Admin_V1beta1_ExportEntitiesMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Metadata common to all Datastore Admin operations.
  public var common: Google_Datastore_Admin_V1beta1_CommonMetadata {
    get {return _common ?? Google_Datastore_Admin_V1beta1_CommonMetadata()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  public var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  public mutating func clearCommon() {self._common = nil}

  /// An estimate of the number of entities processed.
  public var progressEntities: Google_Datastore_Admin_V1beta1_Progress {
    get {return _progressEntities ?? Google_Datastore_Admin_V1beta1_Progress()}
    set {_progressEntities = newValue}
  }
  /// Returns true if `progressEntities` has been explicitly set.
  public var hasProgressEntities: Bool {return self._progressEntities != nil}
  /// Clears the value of `progressEntities`. Subsequent reads from it will return its default value.
  public mutating func clearProgressEntities() {self._progressEntities = nil}

  /// An estimate of the number of bytes processed.
  public var progressBytes: Google_Datastore_Admin_V1beta1_Progress {
    get {return _progressBytes ?? Google_Datastore_Admin_V1beta1_Progress()}
    set {_progressBytes = newValue}
  }
  /// Returns true if `progressBytes` has been explicitly set.
  public var hasProgressBytes: Bool {return self._progressBytes != nil}
  /// Clears the value of `progressBytes`. Subsequent reads from it will return its default value.
  public mutating func clearProgressBytes() {self._progressBytes = nil}

  /// Description of which entities are being exported.
  public var entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter {
    get {return _entityFilter ?? Google_Datastore_Admin_V1beta1_EntityFilter()}
    set {_entityFilter = newValue}
  }
  /// Returns true if `entityFilter` has been explicitly set.
  public var hasEntityFilter: Bool {return self._entityFilter != nil}
  /// Clears the value of `entityFilter`. Subsequent reads from it will return its default value.
  public mutating func clearEntityFilter() {self._entityFilter = nil}

  /// Location for the export metadata and data files. This will be the same
  /// value as the
  /// [google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix][google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix]
  /// field. The final output location is provided in
  /// [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url].
  public var outputURLPrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _common: Google_Datastore_Admin_V1beta1_CommonMetadata? = nil
  fileprivate var _progressEntities: Google_Datastore_Admin_V1beta1_Progress? = nil
  fileprivate var _progressBytes: Google_Datastore_Admin_V1beta1_Progress? = nil
  fileprivate var _entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter? = nil
}

/// Metadata for ImportEntities operations.
public struct Google_Datastore_Admin_V1beta1_ImportEntitiesMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Metadata common to all Datastore Admin operations.
  public var common: Google_Datastore_Admin_V1beta1_CommonMetadata {
    get {return _common ?? Google_Datastore_Admin_V1beta1_CommonMetadata()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  public var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  public mutating func clearCommon() {self._common = nil}

  /// An estimate of the number of entities processed.
  public var progressEntities: Google_Datastore_Admin_V1beta1_Progress {
    get {return _progressEntities ?? Google_Datastore_Admin_V1beta1_Progress()}
    set {_progressEntities = newValue}
  }
  /// Returns true if `progressEntities` has been explicitly set.
  public var hasProgressEntities: Bool {return self._progressEntities != nil}
  /// Clears the value of `progressEntities`. Subsequent reads from it will return its default value.
  public mutating func clearProgressEntities() {self._progressEntities = nil}

  /// An estimate of the number of bytes processed.
  public var progressBytes: Google_Datastore_Admin_V1beta1_Progress {
    get {return _progressBytes ?? Google_Datastore_Admin_V1beta1_Progress()}
    set {_progressBytes = newValue}
  }
  /// Returns true if `progressBytes` has been explicitly set.
  public var hasProgressBytes: Bool {return self._progressBytes != nil}
  /// Clears the value of `progressBytes`. Subsequent reads from it will return its default value.
  public mutating func clearProgressBytes() {self._progressBytes = nil}

  /// Description of which entities are being imported.
  public var entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter {
    get {return _entityFilter ?? Google_Datastore_Admin_V1beta1_EntityFilter()}
    set {_entityFilter = newValue}
  }
  /// Returns true if `entityFilter` has been explicitly set.
  public var hasEntityFilter: Bool {return self._entityFilter != nil}
  /// Clears the value of `entityFilter`. Subsequent reads from it will return its default value.
  public mutating func clearEntityFilter() {self._entityFilter = nil}

  /// The location of the import metadata file. This will be the same value as
  /// the
  /// [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url]
  /// field.
  public var inputURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _common: Google_Datastore_Admin_V1beta1_CommonMetadata? = nil
  fileprivate var _progressEntities: Google_Datastore_Admin_V1beta1_Progress? = nil
  fileprivate var _progressBytes: Google_Datastore_Admin_V1beta1_Progress? = nil
  fileprivate var _entityFilter: Google_Datastore_Admin_V1beta1_EntityFilter? = nil
}

/// Identifies a subset of entities in a project. This is specified as
/// combinations of kinds and namespaces (either or both of which may be all, as
/// described in the following examples).
/// Example usage:
///
/// Entire project:
///   kinds=[], namespace_ids=[]
///
/// Kinds Foo and Bar in all namespaces:
///   kinds=['Foo', 'Bar'], namespace_ids=[]
///
/// Kinds Foo and Bar only in the default namespace:
///   kinds=['Foo', 'Bar'], namespace_ids=['']
///
/// Kinds Foo and Bar in both the default and Baz namespaces:
///   kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']
///
/// The entire Baz namespace:
///   kinds=[], namespace_ids=['Baz']
public struct Google_Datastore_Admin_V1beta1_EntityFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If empty, then this represents all kinds.
  public var kinds: [String] = []

  /// An empty list represents all namespaces. This is the preferred
  /// usage for projects that don't use namespaces.
  ///
  /// An empty string element represents the default namespace. This should be
  /// used if the project has data in non-default namespaces, but doesn't want to
  /// include them.
  /// Each namespace in this list must be unique.
  public var namespaceIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.datastore.admin.v1beta1"

extension Google_Datastore_Admin_V1beta1_OperationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "EXPORT_ENTITIES"),
    2: .same(proto: "IMPORT_ENTITIES"),
  ]
}

extension Google_Datastore_Admin_V1beta1_CommonMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
    3: .standard(proto: "operation_type"),
    4: .same(proto: "labels"),
    5: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.operationType) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.operationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.operationType, fieldNumber: 3)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 4)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_CommonMetadata, rhs: Google_Datastore_Admin_V1beta1_CommonMetadata) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.operationType != rhs.operationType {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_CommonMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "INITIALIZING"),
    2: .same(proto: "PROCESSING"),
    3: .same(proto: "CANCELLING"),
    4: .same(proto: "FINALIZING"),
    5: .same(proto: "SUCCESSFUL"),
    6: .same(proto: "FAILED"),
    7: .same(proto: "CANCELLED"),
  ]
}

extension Google_Datastore_Admin_V1beta1_Progress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Progress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "work_completed"),
    2: .standard(proto: "work_estimated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.workCompleted) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.workEstimated) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workCompleted != 0 {
      try visitor.visitSingularInt64Field(value: self.workCompleted, fieldNumber: 1)
    }
    if self.workEstimated != 0 {
      try visitor.visitSingularInt64Field(value: self.workEstimated, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_Progress, rhs: Google_Datastore_Admin_V1beta1_Progress) -> Bool {
    if lhs.workCompleted != rhs.workCompleted {return false}
    if lhs.workEstimated != rhs.workEstimated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_ExportEntitiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportEntitiesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .same(proto: "labels"),
    3: .standard(proto: "entity_filter"),
    4: .standard(proto: "output_url_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._entityFilter) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outputURLPrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 2)
    }
    if let v = self._entityFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.outputURLPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.outputURLPrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_ExportEntitiesRequest, rhs: Google_Datastore_Admin_V1beta1_ExportEntitiesRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._entityFilter != rhs._entityFilter {return false}
    if lhs.outputURLPrefix != rhs.outputURLPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_ImportEntitiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportEntitiesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .same(proto: "labels"),
    3: .standard(proto: "input_url"),
    4: .standard(proto: "entity_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.inputURL) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._entityFilter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 2)
    }
    if !self.inputURL.isEmpty {
      try visitor.visitSingularStringField(value: self.inputURL, fieldNumber: 3)
    }
    if let v = self._entityFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_ImportEntitiesRequest, rhs: Google_Datastore_Admin_V1beta1_ImportEntitiesRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.inputURL != rhs.inputURL {return false}
    if lhs._entityFilter != rhs._entityFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_ExportEntitiesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportEntitiesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.outputURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputURL.isEmpty {
      try visitor.visitSingularStringField(value: self.outputURL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_ExportEntitiesResponse, rhs: Google_Datastore_Admin_V1beta1_ExportEntitiesResponse) -> Bool {
    if lhs.outputURL != rhs.outputURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_ExportEntitiesMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportEntitiesMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .standard(proto: "progress_entities"),
    3: .standard(proto: "progress_bytes"),
    4: .standard(proto: "entity_filter"),
    5: .standard(proto: "output_url_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._progressEntities) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._progressBytes) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._entityFilter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.outputURLPrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._progressEntities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._progressBytes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._entityFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.outputURLPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.outputURLPrefix, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_ExportEntitiesMetadata, rhs: Google_Datastore_Admin_V1beta1_ExportEntitiesMetadata) -> Bool {
    if lhs._common != rhs._common {return false}
    if lhs._progressEntities != rhs._progressEntities {return false}
    if lhs._progressBytes != rhs._progressBytes {return false}
    if lhs._entityFilter != rhs._entityFilter {return false}
    if lhs.outputURLPrefix != rhs.outputURLPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_ImportEntitiesMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportEntitiesMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .standard(proto: "progress_entities"),
    3: .standard(proto: "progress_bytes"),
    4: .standard(proto: "entity_filter"),
    5: .standard(proto: "input_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._progressEntities) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._progressBytes) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._entityFilter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.inputURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._progressEntities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._progressBytes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._entityFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.inputURL.isEmpty {
      try visitor.visitSingularStringField(value: self.inputURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_ImportEntitiesMetadata, rhs: Google_Datastore_Admin_V1beta1_ImportEntitiesMetadata) -> Bool {
    if lhs._common != rhs._common {return false}
    if lhs._progressEntities != rhs._progressEntities {return false}
    if lhs._progressBytes != rhs._progressBytes {return false}
    if lhs._entityFilter != rhs._entityFilter {return false}
    if lhs.inputURL != rhs.inputURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1beta1_EntityFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EntityFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kinds"),
    2: .standard(proto: "namespace_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.kinds) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.namespaceIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kinds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.kinds, fieldNumber: 1)
    }
    if !self.namespaceIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.namespaceIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1beta1_EntityFilter, rhs: Google_Datastore_Admin_V1beta1_EntityFilter) -> Bool {
    if lhs.kinds != rhs.kinds {return false}
    if lhs.namespaceIds != rhs.namespaceIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
