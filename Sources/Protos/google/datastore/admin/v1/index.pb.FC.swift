// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/datastore/admin/v1/index.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A minimal index definition.
public struct Google_Datastore_Admin_V1_Index {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Project ID.
  public var projectID: String = String()

  /// Output only. The resource ID of the index.
  public var indexID: String = String()

  /// Required. The entity kind to which this index applies.
  public var kind: String = String()

  /// Required. The index's ancestor mode.  Must not be ANCESTOR_MODE_UNSPECIFIED.
  public var ancestor: Google_Datastore_Admin_V1_Index.AncestorMode = .unspecified

  /// Required. An ordered sequence of property names and their index attributes.
  public var properties: [Google_Datastore_Admin_V1_Index.IndexedProperty] = []

  /// Output only. The state of the index.
  public var state: Google_Datastore_Admin_V1_Index.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// For an ordered index, specifies whether each of the entity's ancestors
  /// will be included.
  public enum AncestorMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The ancestor mode is unspecified.
    case unspecified // = 0

    /// Do not include the entity's ancestors in the index.
    case none // = 1

    /// Include all the entity's ancestors in the index.
    case allAncestors // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .none
      case 2: self = .allAncestors
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .none: return 1
      case .allAncestors: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The direction determines how a property is indexed.
  public enum Direction: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The direction is unspecified.
    case unspecified // = 0

    /// The property's values are indexed so as to support sequencing in
    /// ascending order and also query by <, >, <=, >=, and =.
    case ascending // = 1

    /// The property's values are indexed so as to support sequencing in
    /// descending order and also query by <, >, <=, >=, and =.
    case descending // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .ascending
      case 2: self = .descending
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .ascending: return 1
      case .descending: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The possible set of states of an index.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The state is unspecified.
    case unspecified // = 0

    /// The index is being created, and cannot be used by queries.
    /// There is an active long-running operation for the index.
    /// The index is updated when writing an entity.
    /// Some index data may exist.
    case creating // = 1

    /// The index is ready to be used.
    /// The index is updated when writing an entity.
    /// The index is fully populated from all stored entities it applies to.
    case ready // = 2

    /// The index is being deleted, and cannot be used by queries.
    /// There is an active long-running operation for the index.
    /// The index is not updated when writing an entity.
    /// Some index data may exist.
    case deleting // = 3

    /// The index was being created or deleted, but something went wrong.
    /// The index cannot by used by queries.
    /// There is no active long-running operation for the index,
    /// and the most recently finished long-running operation failed.
    /// The index is not updated when writing an entity.
    /// Some index data may exist.
    case error // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .creating
      case 2: self = .ready
      case 3: self = .deleting
      case 4: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .creating: return 1
      case .ready: return 2
      case .deleting: return 3
      case .error: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A property of an index.
  public struct IndexedProperty {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The property name to index.
    public var name: String = String()

    /// Required. The indexed property's direction.  Must not be DIRECTION_UNSPECIFIED.
    public var direction: Google_Datastore_Admin_V1_Index.Direction = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Datastore_Admin_V1_Index.AncestorMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Datastore_Admin_V1_Index.AncestorMode] = [
    .unspecified,
    .none,
    .allAncestors,
  ]
}

extension Google_Datastore_Admin_V1_Index.Direction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Datastore_Admin_V1_Index.Direction] = [
    .unspecified,
    .ascending,
    .descending,
  ]
}

extension Google_Datastore_Admin_V1_Index.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Datastore_Admin_V1_Index.State] = [
    .unspecified,
    .creating,
    .ready,
    .deleting,
    .error,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.datastore.admin.v1"

extension Google_Datastore_Admin_V1_Index: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Index"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    3: .standard(proto: "index_id"),
    4: .same(proto: "kind"),
    5: .same(proto: "ancestor"),
    6: .same(proto: "properties"),
    7: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.indexID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.ancestor) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.properties) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.indexID.isEmpty {
      try visitor.visitSingularStringField(value: self.indexID, fieldNumber: 3)
    }
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 4)
    }
    if self.ancestor != .unspecified {
      try visitor.visitSingularEnumField(value: self.ancestor, fieldNumber: 5)
    }
    if !self.properties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.properties, fieldNumber: 6)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1_Index, rhs: Google_Datastore_Admin_V1_Index) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.indexID != rhs.indexID {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.ancestor != rhs.ancestor {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Datastore_Admin_V1_Index.AncestorMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANCESTOR_MODE_UNSPECIFIED"),
    1: .same(proto: "NONE"),
    2: .same(proto: "ALL_ANCESTORS"),
  ]
}

extension Google_Datastore_Admin_V1_Index.Direction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIRECTION_UNSPECIFIED"),
    1: .same(proto: "ASCENDING"),
    2: .same(proto: "DESCENDING"),
  ]
}

extension Google_Datastore_Admin_V1_Index.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "CREATING"),
    2: .same(proto: "READY"),
    3: .same(proto: "DELETING"),
    4: .same(proto: "ERROR"),
  ]
}

extension Google_Datastore_Admin_V1_Index.IndexedProperty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Datastore_Admin_V1_Index.protoMessageName + ".IndexedProperty"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "direction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Datastore_Admin_V1_Index.IndexedProperty, rhs: Google_Datastore_Admin_V1_Index.IndexedProperty) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
