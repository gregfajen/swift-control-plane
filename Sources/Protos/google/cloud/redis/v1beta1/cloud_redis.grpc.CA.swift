//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/redis/v1beta1/cloud_redis.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Redis_V1beta1_CloudRedisClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Redis_V1beta1_CloudRedisClientProtocol: GRPCClient {
  func listInstances(
    _ request: Google_Cloud_Redis_V1beta1_ListInstancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_ListInstancesRequest, Google_Cloud_Redis_V1beta1_ListInstancesResponse>

  func getInstance(
    _ request: Google_Cloud_Redis_V1beta1_GetInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_GetInstanceRequest, Google_Cloud_Redis_V1beta1_Instance>

  func createInstance(
    _ request: Google_Cloud_Redis_V1beta1_CreateInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_CreateInstanceRequest, Google_Longrunning_Operation>

  func updateInstance(
    _ request: Google_Cloud_Redis_V1beta1_UpdateInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_UpdateInstanceRequest, Google_Longrunning_Operation>

  func upgradeInstance(
    _ request: Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest, Google_Longrunning_Operation>

  func importInstance(
    _ request: Google_Cloud_Redis_V1beta1_ImportInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_ImportInstanceRequest, Google_Longrunning_Operation>

  func exportInstance(
    _ request: Google_Cloud_Redis_V1beta1_ExportInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_ExportInstanceRequest, Google_Longrunning_Operation>

  func failoverInstance(
    _ request: Google_Cloud_Redis_V1beta1_FailoverInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_FailoverInstanceRequest, Google_Longrunning_Operation>

  func deleteInstance(
    _ request: Google_Cloud_Redis_V1beta1_DeleteInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_DeleteInstanceRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Redis_V1beta1_CloudRedisClientProtocol {

  /// Lists all Redis instances owned by a project in either the specified
  /// location (region) or all locations.
  ///
  /// The location should have the following format:
  ///
  /// * `projects/{project_id}/locations/{location_id}`
  ///
  /// If `location_id` is specified as `-` (wildcard), then all regions
  /// available to the project are queried, and the results are aggregated.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInstances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInstances(
    _ request: Google_Cloud_Redis_V1beta1_ListInstancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_ListInstancesRequest, Google_Cloud_Redis_V1beta1_ListInstancesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/ListInstances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the details of a specific Redis instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInstance(
    _ request: Google_Cloud_Redis_V1beta1_GetInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_GetInstanceRequest, Google_Cloud_Redis_V1beta1_Instance> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/GetInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a Redis instance based on the specified tier and memory size.
  ///
  /// By default, the instance is accessible from the project's
  /// [default network](https://cloud.google.com/vpc/docs/vpc).
  ///
  /// The creation is executed asynchronously and callers may check the returned
  /// operation to track its progress. Once the operation is completed the Redis
  /// instance will be fully functional. Completed longrunning.Operation will
  /// contain the new instance object in the response field.
  ///
  /// The returned operation is automatically deleted after a few hours, so there
  /// is no need to call DeleteOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createInstance(
    _ request: Google_Cloud_Redis_V1beta1_CreateInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_CreateInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/CreateInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the metadata and configuration of a specific Redis instance.
  ///
  /// Completed longrunning.Operation will contain the new instance object
  /// in the response field. The returned operation is automatically deleted
  /// after a few hours, so there is no need to call DeleteOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateInstance(
    _ request: Google_Cloud_Redis_V1beta1_UpdateInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_UpdateInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/UpdateInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Upgrades Redis instance to the newer Redis version specified in the
  /// request.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpgradeInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upgradeInstance(
    _ request: Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/UpgradeInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Import a Redis RDB snapshot file from Cloud Storage into a Redis instance.
  ///
  /// Redis may stop serving during this operation. Instance state will be
  /// IMPORTING for entire operation. When complete, the instance will contain
  /// only data from the imported file.
  ///
  /// The returned operation is automatically deleted after a few hours, so
  /// there is no need to call DeleteOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func importInstance(
    _ request: Google_Cloud_Redis_V1beta1_ImportInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_ImportInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/ImportInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Export Redis instance data into a Redis RDB format file in Cloud Storage.
  ///
  /// Redis will continue serving during this operation.
  ///
  /// The returned operation is automatically deleted after a few hours, so
  /// there is no need to call DeleteOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportInstance(
    _ request: Google_Cloud_Redis_V1beta1_ExportInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_ExportInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/ExportInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Initiates a failover of the master node to current replica node for a
  /// specific STANDARD tier Cloud Memorystore for Redis instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to FailoverInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func failoverInstance(
    _ request: Google_Cloud_Redis_V1beta1_FailoverInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_FailoverInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/FailoverInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a specific Redis instance.  Instance stops serving and data is
  /// deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInstance(
    _ request: Google_Cloud_Redis_V1beta1_DeleteInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Redis_V1beta1_DeleteInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.redis.v1beta1.CloudRedis/DeleteInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Redis_V1beta1_CloudRedisClient: Google_Cloud_Redis_V1beta1_CloudRedisClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.redis.v1beta1.CloudRedis service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Redis_V1beta1_CloudRedisProvider: CallHandlerProvider {
  /// Lists all Redis instances owned by a project in either the specified
  /// location (region) or all locations.
  ///
  /// The location should have the following format:
  ///
  /// * `projects/{project_id}/locations/{location_id}`
  ///
  /// If `location_id` is specified as `-` (wildcard), then all regions
  /// available to the project are queried, and the results are aggregated.
  func listInstances(request: Google_Cloud_Redis_V1beta1_ListInstancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Redis_V1beta1_ListInstancesResponse>
  /// Gets the details of a specific Redis instance.
  func getInstance(request: Google_Cloud_Redis_V1beta1_GetInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Redis_V1beta1_Instance>
  /// Creates a Redis instance based on the specified tier and memory size.
  ///
  /// By default, the instance is accessible from the project's
  /// [default network](https://cloud.google.com/vpc/docs/vpc).
  ///
  /// The creation is executed asynchronously and callers may check the returned
  /// operation to track its progress. Once the operation is completed the Redis
  /// instance will be fully functional. Completed longrunning.Operation will
  /// contain the new instance object in the response field.
  ///
  /// The returned operation is automatically deleted after a few hours, so there
  /// is no need to call DeleteOperation.
  func createInstance(request: Google_Cloud_Redis_V1beta1_CreateInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the metadata and configuration of a specific Redis instance.
  ///
  /// Completed longrunning.Operation will contain the new instance object
  /// in the response field. The returned operation is automatically deleted
  /// after a few hours, so there is no need to call DeleteOperation.
  func updateInstance(request: Google_Cloud_Redis_V1beta1_UpdateInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Upgrades Redis instance to the newer Redis version specified in the
  /// request.
  func upgradeInstance(request: Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Import a Redis RDB snapshot file from Cloud Storage into a Redis instance.
  ///
  /// Redis may stop serving during this operation. Instance state will be
  /// IMPORTING for entire operation. When complete, the instance will contain
  /// only data from the imported file.
  ///
  /// The returned operation is automatically deleted after a few hours, so
  /// there is no need to call DeleteOperation.
  func importInstance(request: Google_Cloud_Redis_V1beta1_ImportInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Export Redis instance data into a Redis RDB format file in Cloud Storage.
  ///
  /// Redis will continue serving during this operation.
  ///
  /// The returned operation is automatically deleted after a few hours, so
  /// there is no need to call DeleteOperation.
  func exportInstance(request: Google_Cloud_Redis_V1beta1_ExportInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Initiates a failover of the master node to current replica node for a
  /// specific STANDARD tier Cloud Memorystore for Redis instance.
  func failoverInstance(request: Google_Cloud_Redis_V1beta1_FailoverInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a specific Redis instance.  Instance stops serving and data is
  /// deleted.
  func deleteInstance(request: Google_Cloud_Redis_V1beta1_DeleteInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Redis_V1beta1_CloudRedisProvider {
  public var serviceName: Substring { return "google.cloud.redis.v1beta1.CloudRedis" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListInstances":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInstances(request: request, context: context)
        }
      }

    case "GetInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInstance(request: request, context: context)
        }
      }

    case "CreateInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createInstance(request: request, context: context)
        }
      }

    case "UpdateInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateInstance(request: request, context: context)
        }
      }

    case "UpgradeInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.upgradeInstance(request: request, context: context)
        }
      }

    case "ImportInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.importInstance(request: request, context: context)
        }
      }

    case "ExportInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.exportInstance(request: request, context: context)
        }
      }

    case "FailoverInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.failoverInstance(request: request, context: context)
        }
      }

    case "DeleteInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInstance(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

