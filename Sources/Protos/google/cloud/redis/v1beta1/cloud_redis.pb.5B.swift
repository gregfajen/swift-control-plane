// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/redis/v1beta1/cloud_redis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Google Cloud Redis instance.
public struct Google_Cloud_Redis_V1beta1_Instance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Unique name of the resource in this scope including project and
  /// location using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  ///
  /// Note: Redis instances are managed and addressed at regional level so
  /// location_id here refers to a GCP region; however, users may choose which
  /// specific zone (or collection of zones for cross-zone instances) an instance
  /// should be provisioned in. Refer to [location_id][google.cloud.redis.v1beta1.Instance.location_id] and
  /// [alternative_location_id][google.cloud.redis.v1beta1.Instance.alternative_location_id] fields for more details.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// An arbitrary and optional user-provided name for the instance.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// Resource labels to represent user provided metadata
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// Optional. The zone where the instance will be provisioned. If not provided,
  /// the service will choose a zone for the instance. For STANDARD_HA tier,
  /// instances will be created across two zones for protection against zonal
  /// failures. If [alternative_location_id][google.cloud.redis.v1beta1.Instance.alternative_location_id] is also provided, it must be
  /// different from [location_id][google.cloud.redis.v1beta1.Instance.location_id].
  public var locationID: String {
    get {return _storage._locationID}
    set {_uniqueStorage()._locationID = newValue}
  }

  /// Optional. Only applicable to STANDARD_HA tier which protects the instance
  /// against zonal failures by provisioning it across two zones. If provided, it
  /// must be a different zone from the one provided in [location_id][google.cloud.redis.v1beta1.Instance.location_id].
  public var alternativeLocationID: String {
    get {return _storage._alternativeLocationID}
    set {_uniqueStorage()._alternativeLocationID = newValue}
  }

  /// Optional. The version of Redis software.
  /// If not provided, latest supported version will be used. Currently, the
  /// supported values are:
  ///
  ///  *   `REDIS_3_2` for Redis 3.2 compatibility
  ///  *   `REDIS_4_0` for Redis 4.0 compatibility (default)
  ///  *   `REDIS_5_0` for Redis 5.0 compatibility
  public var redisVersion: String {
    get {return _storage._redisVersion}
    set {_uniqueStorage()._redisVersion = newValue}
  }

  /// Optional. The CIDR range of internal addresses that are reserved for this
  /// instance. If not provided, the service will choose an unused /29 block,
  /// for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique
  /// and non-overlapping with existing subnets in an authorized network.
  public var reservedIpRange: String {
    get {return _storage._reservedIpRange}
    set {_uniqueStorage()._reservedIpRange = newValue}
  }

  /// Output only. Hostname or IP address of the exposed Redis endpoint used by
  /// clients to connect to the service.
  public var host: String {
    get {return _storage._host}
    set {_uniqueStorage()._host = newValue}
  }

  /// Output only. The port number of the exposed Redis endpoint.
  public var port: Int32 {
    get {return _storage._port}
    set {_uniqueStorage()._port = newValue}
  }

  /// Output only. The current zone where the Redis endpoint is placed. For Basic
  /// Tier instances, this will always be the same as the [location_id][google.cloud.redis.v1beta1.Instance.location_id]
  /// provided by the user at creation time. For Standard Tier instances,
  /// this can be either [location_id][google.cloud.redis.v1beta1.Instance.location_id] or [alternative_location_id][google.cloud.redis.v1beta1.Instance.alternative_location_id] and can
  /// change after a failover event.
  public var currentLocationID: String {
    get {return _storage._currentLocationID}
    set {_uniqueStorage()._currentLocationID = newValue}
  }

  /// Output only. The time the instance was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. The current state of this instance.
  public var state: Google_Cloud_Redis_V1beta1_Instance.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Output only. Additional information about the current status of this
  /// instance, if available.
  public var statusMessage: String {
    get {return _storage._statusMessage}
    set {_uniqueStorage()._statusMessage = newValue}
  }

  /// Optional. Redis configuration parameters, according to
  /// http://redis.io/topics/config. Currently, the only supported parameters
  /// are:
  ///
  ///  Redis version 3.2 and newer:
  ///
  ///  *   maxmemory-policy
  ///  *   notify-keyspace-events
  ///
  ///  Redis version 4.0 and newer:
  ///
  ///  *   activedefrag
  ///  *   lfu-decay-time
  ///  *   lfu-log-factor
  ///  *   maxmemory-gb
  ///
  ///  Redis version 5.0 and newer:
  ///
  ///  *   stream-node-max-bytes
  ///  *   stream-node-max-entries
  public var redisConfigs: Dictionary<String,String> {
    get {return _storage._redisConfigs}
    set {_uniqueStorage()._redisConfigs = newValue}
  }

  /// Required. The service tier of the instance.
  public var tier: Google_Cloud_Redis_V1beta1_Instance.Tier {
    get {return _storage._tier}
    set {_uniqueStorage()._tier = newValue}
  }

  /// Required. Redis memory size in GiB.
  public var memorySizeGb: Int32 {
    get {return _storage._memorySizeGb}
    set {_uniqueStorage()._memorySizeGb = newValue}
  }

  /// Optional. The full name of the Google Compute Engine
  /// [network](https://cloud.google.com/vpc/docs/vpc) to which the
  /// instance is connected. If left unspecified, the `default` network
  /// will be used.
  public var authorizedNetwork: String {
    get {return _storage._authorizedNetwork}
    set {_uniqueStorage()._authorizedNetwork = newValue}
  }

  /// Output only. Cloud IAM identity used by import / export operations to
  /// transfer data to/from Cloud Storage. Format is
  /// "serviceAccount:<service_account_email>". The value may change over time
  /// for a given instance so should be checked before each import/export
  /// operation.
  public var persistenceIamIdentity: String {
    get {return _storage._persistenceIamIdentity}
    set {_uniqueStorage()._persistenceIamIdentity = newValue}
  }

  /// Optional. The connect mode of Redis instance.
  /// If not provided, default one will be used.
  /// Current default: DIRECT_PEERING.
  public var connectMode: Google_Cloud_Redis_V1beta1_Instance.ConnectMode {
    get {return _storage._connectMode}
    set {_uniqueStorage()._connectMode = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents the different states of a Redis instance.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not set.
    case unspecified // = 0

    /// Redis instance is being created.
    case creating // = 1

    /// Redis instance has been created and is fully usable.
    case ready // = 2

    /// Redis instance configuration is being updated. Certain kinds of updates
    /// may cause the instance to become unusable while the update is in
    /// progress.
    case updating // = 3

    /// Redis instance is being deleted.
    case deleting // = 4

    /// Redis instance is being repaired and may be unusable.
    case repairing // = 5

    /// Maintenance is being performed on this Redis instance.
    case maintenance // = 6

    /// Redis instance is importing data (availability may be affected).
    case importing // = 8

    /// Redis instance is failing over (availability may be affected).
    case failingOver // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .creating
      case 2: self = .ready
      case 3: self = .updating
      case 4: self = .deleting
      case 5: self = .repairing
      case 6: self = .maintenance
      case 8: self = .importing
      case 10: self = .failingOver
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .creating: return 1
      case .ready: return 2
      case .updating: return 3
      case .deleting: return 4
      case .repairing: return 5
      case .maintenance: return 6
      case .importing: return 8
      case .failingOver: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Available service tiers to choose from
  public enum Tier: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not set.
    case unspecified // = 0

    /// BASIC tier: standalone instance
    case basic // = 1

    /// STANDARD_HA tier: highly available primary/replica instances
    case standardHa // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .basic
      case 3: self = .standardHa
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .basic: return 1
      case .standardHa: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Available connection modes.
  public enum ConnectMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not set.
    case unspecified // = 0

    /// Connect via directly peering with memorystore redis hosted service.
    case directPeering // = 1

    /// Connect with google via private service access and share connection
    /// across google managed services.
    case privateServiceAccess // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .directPeering
      case 2: self = .privateServiceAccess
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .directPeering: return 1
      case .privateServiceAccess: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Redis_V1beta1_Instance.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Redis_V1beta1_Instance.State] = [
    .unspecified,
    .creating,
    .ready,
    .updating,
    .deleting,
    .repairing,
    .maintenance,
    .importing,
    .failingOver,
  ]
}

extension Google_Cloud_Redis_V1beta1_Instance.Tier: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Redis_V1beta1_Instance.Tier] = [
    .unspecified,
    .basic,
    .standardHa,
  ]
}

extension Google_Cloud_Redis_V1beta1_Instance.ConnectMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Redis_V1beta1_Instance.ConnectMode] = [
    .unspecified,
    .directPeering,
    .privateServiceAccess,
  ]
}

#endif  // swift(>=4.2)

/// Request for [ListInstances][google.cloud.redis.v1beta1.CloudRedis.ListInstances].
public struct Google_Cloud_Redis_V1beta1_ListInstancesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the instance location using the form:
  ///     `projects/{project_id}/locations/{location_id}`
  /// where `location_id` refers to a GCP region.
  public var parent: String = String()

  /// The maximum number of items to return.
  ///
  /// If not specified, a default value of 1000 will be used by the service.
  /// Regardless of the page_size value, the response may include a partial list
  /// and a caller should only rely on response's
  /// [`next_page_token`][google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token]
  /// to determine if there are more instances left to be queried.
  public var pageSize: Int32 = 0

  /// The `next_page_token` value returned from a previous
  /// [ListInstances][google.cloud.redis.v1beta1.CloudRedis.ListInstances] request, if any.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for [ListInstances][google.cloud.redis.v1beta1.CloudRedis.ListInstances].
public struct Google_Cloud_Redis_V1beta1_ListInstancesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of Redis instances in the project in the specified location,
  /// or across all locations.
  ///
  /// If the `location_id` in the parent field of the request is "-", all regions
  /// available to the project are queried, and the results aggregated.
  /// If in such an aggregated query a location is unavailable, a dummy Redis
  /// entry is included in the response with the `name` field set to a value of
  /// the form `projects/{project_id}/locations/{location_id}/instances/`- and
  /// the `status` field set to ERROR and `status_message` field set to "location
  /// not available for ListInstances".
  public var instances: [Google_Cloud_Redis_V1beta1_Instance] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  /// Locations that could not be reached.
  public var unreachable: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for [GetInstance][google.cloud.redis.v1beta1.CloudRedis.GetInstance].
public struct Google_Cloud_Redis_V1beta1_GetInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Redis instance resource name using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  /// where `location_id` refers to a GCP region.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for [CreateInstance][google.cloud.redis.v1beta1.CloudRedis.CreateInstance].
public struct Google_Cloud_Redis_V1beta1_CreateInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the instance location using the form:
  ///     `projects/{project_id}/locations/{location_id}`
  /// where `location_id` refers to a GCP region.
  public var parent: String = String()

  /// Required. The logical name of the Redis instance in the customer project
  /// with the following restrictions:
  ///
  /// * Must contain only lowercase letters, numbers, and hyphens.
  /// * Must start with a letter.
  /// * Must be between 1-40 characters.
  /// * Must end with a number or a letter.
  /// * Must be unique within the customer project / location
  public var instanceID: String = String()

  /// Required. A Redis [Instance] resource
  public var instance: Google_Cloud_Redis_V1beta1_Instance {
    get {return _instance ?? Google_Cloud_Redis_V1beta1_Instance()}
    set {_instance = newValue}
  }
  /// Returns true if `instance` has been explicitly set.
  public var hasInstance: Bool {return self._instance != nil}
  /// Clears the value of `instance`. Subsequent reads from it will return its default value.
  public mutating func clearInstance() {self._instance = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _instance: Google_Cloud_Redis_V1beta1_Instance? = nil
}

/// Request for [UpdateInstance][google.cloud.redis.v1beta1.CloudRedis.UpdateInstance].
public struct Google_Cloud_Redis_V1beta1_UpdateInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Mask of fields to update. At least one path must be supplied in
  /// this field. The elements of the repeated paths field may only include these
  /// fields from [Instance][google.cloud.redis.v1beta1.Instance]:
  ///
  ///  *   `displayName`
  ///  *   `labels`
  ///  *   `memorySizeGb`
  ///  *   `redisConfig`
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// Required. Update description.
  /// Only fields specified in update_mask are updated.
  public var instance: Google_Cloud_Redis_V1beta1_Instance {
    get {return _instance ?? Google_Cloud_Redis_V1beta1_Instance()}
    set {_instance = newValue}
  }
  /// Returns true if `instance` has been explicitly set.
  public var hasInstance: Bool {return self._instance != nil}
  /// Clears the value of `instance`. Subsequent reads from it will return its default value.
  public mutating func clearInstance() {self._instance = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _instance: Google_Cloud_Redis_V1beta1_Instance? = nil
}

/// Request for [UpgradeInstance][google.cloud.redis.v1beta1.CloudRedis.UpgradeInstance].
public struct Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Redis instance resource name using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  /// where `location_id` refers to a GCP region.
  public var name: String = String()

  /// Required. Specifies the target version of Redis software to upgrade to.
  public var redisVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for [DeleteInstance][google.cloud.redis.v1beta1.CloudRedis.DeleteInstance].
public struct Google_Cloud_Redis_V1beta1_DeleteInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Redis instance resource name using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  /// where `location_id` refers to a GCP region.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The Cloud Storage location for the input content
public struct Google_Cloud_Redis_V1beta1_GcsSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Source data URI. (e.g. 'gs://my_bucket/my_object').
  public var uri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The input content
public struct Google_Cloud_Redis_V1beta1_InputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Specify source location of input data
  public var source: Google_Cloud_Redis_V1beta1_InputConfig.OneOf_Source? = nil

  /// Google Cloud Storage location where input content is located.
  public var gcsSource: Google_Cloud_Redis_V1beta1_GcsSource {
    get {
      if case .gcsSource(let v)? = source {return v}
      return Google_Cloud_Redis_V1beta1_GcsSource()
    }
    set {source = .gcsSource(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Specify source location of input data
  public enum OneOf_Source: Equatable {
    /// Google Cloud Storage location where input content is located.
    case gcsSource(Google_Cloud_Redis_V1beta1_GcsSource)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Redis_V1beta1_InputConfig.OneOf_Source, rhs: Google_Cloud_Redis_V1beta1_InputConfig.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsSource, .gcsSource): return {
        guard case .gcsSource(let l) = lhs, case .gcsSource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Request for [Import][google.cloud.redis.v1beta1.CloudRedis.ImportInstance].
public struct Google_Cloud_Redis_V1beta1_ImportInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Redis instance resource name using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  /// where `location_id` refers to a GCP region.
  public var name: String = String()

  /// Required. Specify data to be imported.
  public var inputConfig: Google_Cloud_Redis_V1beta1_InputConfig {
    get {return _inputConfig ?? Google_Cloud_Redis_V1beta1_InputConfig()}
    set {_inputConfig = newValue}
  }
  /// Returns true if `inputConfig` has been explicitly set.
  public var hasInputConfig: Bool {return self._inputConfig != nil}
  /// Clears the value of `inputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearInputConfig() {self._inputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _inputConfig: Google_Cloud_Redis_V1beta1_InputConfig? = nil
}

/// The Cloud Storage location for the output content
public struct Google_Cloud_Redis_V1beta1_GcsDestination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Data destination URI (e.g.
  /// 'gs://my_bucket/my_object'). Existing files will be overwritten.
  public var uri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The output content
public struct Google_Cloud_Redis_V1beta1_OutputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Specify destination location of output data
  public var destination: Google_Cloud_Redis_V1beta1_OutputConfig.OneOf_Destination? = nil

  /// Google Cloud Storage destination for output content.
  public var gcsDestination: Google_Cloud_Redis_V1beta1_GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Redis_V1beta1_GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Specify destination location of output data
  public enum OneOf_Destination: Equatable {
    /// Google Cloud Storage destination for output content.
    case gcsDestination(Google_Cloud_Redis_V1beta1_GcsDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Redis_V1beta1_OutputConfig.OneOf_Destination, rhs: Google_Cloud_Redis_V1beta1_OutputConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Request for [Export][google.cloud.redis.v1beta1.CloudRedis.ExportInstance].
public struct Google_Cloud_Redis_V1beta1_ExportInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Redis instance resource name using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  /// where `location_id` refers to a GCP region.
  public var name: String = String()

  /// Required. Specify data to be exported.
  public var outputConfig: Google_Cloud_Redis_V1beta1_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Redis_V1beta1_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _outputConfig: Google_Cloud_Redis_V1beta1_OutputConfig? = nil
}

/// Request for [Failover][google.cloud.redis.v1beta1.CloudRedis.FailoverInstance].
public struct Google_Cloud_Redis_V1beta1_FailoverInstanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Redis instance resource name using the form:
  ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
  /// where `location_id` refers to a GCP region.
  public var name: String = String()

  /// Optional. Available data protection modes that the user can choose. If it's
  /// unspecified, data protection mode will be LIMITED_DATA_LOSS by default.
  public var dataProtectionMode: Google_Cloud_Redis_V1beta1_FailoverInstanceRequest.DataProtectionMode = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies different modes of operation in relation to the data retention.
  public enum DataProtectionMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Defaults to LIMITED_DATA_LOSS if a data protection mode is not
    /// specified.
    case unspecified // = 0

    /// Instance failover will be protected with data loss control. More
    /// specifically, the failover will only be performed if the current
    /// replication offset diff between master and replica is under a certain
    /// threshold.
    case limitedDataLoss // = 1

    /// Instance failover will be performed without data loss control.
    case forceDataLoss // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .limitedDataLoss
      case 2: self = .forceDataLoss
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .limitedDataLoss: return 1
      case .forceDataLoss: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Redis_V1beta1_FailoverInstanceRequest.DataProtectionMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Redis_V1beta1_FailoverInstanceRequest.DataProtectionMode] = [
    .unspecified,
    .limitedDataLoss,
    .forceDataLoss,
  ]
}

#endif  // swift(>=4.2)

/// This location metadata represents additional configuration options for a
/// given location where a Redis instance may be created. All fields are output
/// only. It is returned as content of the
/// `google.cloud.location.Location.metadata` field.
public struct Google_Cloud_Redis_V1beta1_LocationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The set of available zones in the location. The map is keyed
  /// by the lowercase ID of each zone, as defined by GCE. These keys can be
  /// specified in `location_id` or `alternative_location_id` fields when
  /// creating a Redis instance.
  public var availableZones: Dictionary<String,Google_Cloud_Redis_V1beta1_ZoneMetadata> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Defines specific information for a particular zone. Currently empty and
/// reserved for future use only.
public struct Google_Cloud_Redis_V1beta1_ZoneMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.redis.v1beta1"

extension Google_Cloud_Redis_V1beta1_Instance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Instance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "labels"),
    4: .standard(proto: "location_id"),
    5: .standard(proto: "alternative_location_id"),
    7: .standard(proto: "redis_version"),
    9: .standard(proto: "reserved_ip_range"),
    10: .same(proto: "host"),
    11: .same(proto: "port"),
    12: .standard(proto: "current_location_id"),
    13: .standard(proto: "create_time"),
    14: .same(proto: "state"),
    15: .standard(proto: "status_message"),
    16: .standard(proto: "redis_configs"),
    17: .same(proto: "tier"),
    18: .standard(proto: "memory_size_gb"),
    20: .standard(proto: "authorized_network"),
    21: .standard(proto: "persistence_iam_identity"),
    22: .standard(proto: "connect_mode"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _labels: Dictionary<String,String> = [:]
    var _locationID: String = String()
    var _alternativeLocationID: String = String()
    var _redisVersion: String = String()
    var _reservedIpRange: String = String()
    var _host: String = String()
    var _port: Int32 = 0
    var _currentLocationID: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _state: Google_Cloud_Redis_V1beta1_Instance.State = .unspecified
    var _statusMessage: String = String()
    var _redisConfigs: Dictionary<String,String> = [:]
    var _tier: Google_Cloud_Redis_V1beta1_Instance.Tier = .unspecified
    var _memorySizeGb: Int32 = 0
    var _authorizedNetwork: String = String()
    var _persistenceIamIdentity: String = String()
    var _connectMode: Google_Cloud_Redis_V1beta1_Instance.ConnectMode = .unspecified

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _labels = source._labels
      _locationID = source._locationID
      _alternativeLocationID = source._alternativeLocationID
      _redisVersion = source._redisVersion
      _reservedIpRange = source._reservedIpRange
      _host = source._host
      _port = source._port
      _currentLocationID = source._currentLocationID
      _createTime = source._createTime
      _state = source._state
      _statusMessage = source._statusMessage
      _redisConfigs = source._redisConfigs
      _tier = source._tier
      _memorySizeGb = source._memorySizeGb
      _authorizedNetwork = source._authorizedNetwork
      _persistenceIamIdentity = source._persistenceIamIdentity
      _connectMode = source._connectMode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._locationID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._alternativeLocationID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._redisVersion) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._reservedIpRange) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._host) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._port) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._currentLocationID) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._statusMessage) }()
        case 16: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._redisConfigs) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._tier) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._memorySizeGb) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._authorizedNetwork) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._persistenceIamIdentity) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._connectMode) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 3)
      }
      if !_storage._locationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._locationID, fieldNumber: 4)
      }
      if !_storage._alternativeLocationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alternativeLocationID, fieldNumber: 5)
      }
      if !_storage._redisVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redisVersion, fieldNumber: 7)
      }
      if !_storage._reservedIpRange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reservedIpRange, fieldNumber: 9)
      }
      if !_storage._host.isEmpty {
        try visitor.visitSingularStringField(value: _storage._host, fieldNumber: 10)
      }
      if _storage._port != 0 {
        try visitor.visitSingularInt32Field(value: _storage._port, fieldNumber: 11)
      }
      if !_storage._currentLocationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currentLocationID, fieldNumber: 12)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 14)
      }
      if !_storage._statusMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusMessage, fieldNumber: 15)
      }
      if !_storage._redisConfigs.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._redisConfigs, fieldNumber: 16)
      }
      if _storage._tier != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._tier, fieldNumber: 17)
      }
      if _storage._memorySizeGb != 0 {
        try visitor.visitSingularInt32Field(value: _storage._memorySizeGb, fieldNumber: 18)
      }
      if !_storage._authorizedNetwork.isEmpty {
        try visitor.visitSingularStringField(value: _storage._authorizedNetwork, fieldNumber: 20)
      }
      if !_storage._persistenceIamIdentity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._persistenceIamIdentity, fieldNumber: 21)
      }
      if _storage._connectMode != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._connectMode, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_Instance, rhs: Google_Cloud_Redis_V1beta1_Instance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._locationID != rhs_storage._locationID {return false}
        if _storage._alternativeLocationID != rhs_storage._alternativeLocationID {return false}
        if _storage._redisVersion != rhs_storage._redisVersion {return false}
        if _storage._reservedIpRange != rhs_storage._reservedIpRange {return false}
        if _storage._host != rhs_storage._host {return false}
        if _storage._port != rhs_storage._port {return false}
        if _storage._currentLocationID != rhs_storage._currentLocationID {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._statusMessage != rhs_storage._statusMessage {return false}
        if _storage._redisConfigs != rhs_storage._redisConfigs {return false}
        if _storage._tier != rhs_storage._tier {return false}
        if _storage._memorySizeGb != rhs_storage._memorySizeGb {return false}
        if _storage._authorizedNetwork != rhs_storage._authorizedNetwork {return false}
        if _storage._persistenceIamIdentity != rhs_storage._persistenceIamIdentity {return false}
        if _storage._connectMode != rhs_storage._connectMode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_Instance.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "CREATING"),
    2: .same(proto: "READY"),
    3: .same(proto: "UPDATING"),
    4: .same(proto: "DELETING"),
    5: .same(proto: "REPAIRING"),
    6: .same(proto: "MAINTENANCE"),
    8: .same(proto: "IMPORTING"),
    10: .same(proto: "FAILING_OVER"),
  ]
}

extension Google_Cloud_Redis_V1beta1_Instance.Tier: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TIER_UNSPECIFIED"),
    1: .same(proto: "BASIC"),
    3: .same(proto: "STANDARD_HA"),
  ]
}

extension Google_Cloud_Redis_V1beta1_Instance.ConnectMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONNECT_MODE_UNSPECIFIED"),
    1: .same(proto: "DIRECT_PEERING"),
    2: .same(proto: "PRIVATE_SERVICE_ACCESS"),
  ]
}

extension Google_Cloud_Redis_V1beta1_ListInstancesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListInstancesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_ListInstancesRequest, rhs: Google_Cloud_Redis_V1beta1_ListInstancesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_ListInstancesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListInstancesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instances"),
    2: .standard(proto: "next_page_token"),
    3: .same(proto: "unreachable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instances) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.unreachable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instances, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if !self.unreachable.isEmpty {
      try visitor.visitRepeatedStringField(value: self.unreachable, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_ListInstancesResponse, rhs: Google_Cloud_Redis_V1beta1_ListInstancesResponse) -> Bool {
    if lhs.instances != rhs.instances {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unreachable != rhs.unreachable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_GetInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_GetInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_GetInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_CreateInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "instance_id"),
    3: .same(proto: "instance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.instanceID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._instance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.instanceID.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceID, fieldNumber: 2)
    }
    if let v = self._instance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_CreateInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_CreateInstanceRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.instanceID != rhs.instanceID {return false}
    if lhs._instance != rhs._instance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_UpdateInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_mask"),
    2: .same(proto: "instance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._instance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._instance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_UpdateInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_UpdateInstanceRequest) -> Bool {
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs._instance != rhs._instance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradeInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "redis_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.redisVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.redisVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.redisVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_UpgradeInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.redisVersion != rhs.redisVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_DeleteInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_DeleteInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_DeleteInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_GcsSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_GcsSource, rhs: Google_Cloud_Redis_V1beta1_GcsSource) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_InputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Redis_V1beta1_GcsSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .gcsSource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .gcsSource(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsSource(let v)? = self.source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_InputConfig, rhs: Google_Cloud_Redis_V1beta1_InputConfig) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_ImportInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "input_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._inputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._inputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_ImportInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_ImportInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._inputConfig != rhs._inputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_GcsDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_GcsDestination, rhs: Google_Cloud_Redis_V1beta1_GcsDestination) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_OutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Redis_V1beta1_GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsDestination(let v)? = self.destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_OutputConfig, rhs: Google_Cloud_Redis_V1beta1_OutputConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_ExportInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_ExportInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_ExportInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_FailoverInstanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FailoverInstanceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "data_protection_mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.dataProtectionMode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.dataProtectionMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.dataProtectionMode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_FailoverInstanceRequest, rhs: Google_Cloud_Redis_V1beta1_FailoverInstanceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.dataProtectionMode != rhs.dataProtectionMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_FailoverInstanceRequest.DataProtectionMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_PROTECTION_MODE_UNSPECIFIED"),
    1: .same(proto: "LIMITED_DATA_LOSS"),
    2: .same(proto: "FORCE_DATA_LOSS"),
  ]
}

extension Google_Cloud_Redis_V1beta1_LocationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "available_zones"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Redis_V1beta1_ZoneMetadata>.self, value: &self.availableZones) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.availableZones.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Redis_V1beta1_ZoneMetadata>.self, value: self.availableZones, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_LocationMetadata, rhs: Google_Cloud_Redis_V1beta1_LocationMetadata) -> Bool {
    if lhs.availableZones != rhs.availableZones {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Redis_V1beta1_ZoneMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ZoneMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Redis_V1beta1_ZoneMetadata, rhs: Google_Cloud_Redis_V1beta1_ZoneMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
