// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/recommender/logging/v1/action_log.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Log content of an action on a recommendation. This includes Mark* actions.
public struct Google_Cloud_Recommender_Logging_V1_ActionLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. User that executed this action. Eg, foo@gmail.com
  public var actor: String = String()

  /// Required. State change that was made by the actor. Eg, SUCCEEDED.
  public var state: Google_Cloud_Recommender_V1_RecommendationStateInfo.State = .unspecified

  /// Optional. Metadata that was included with the action that was taken.
  public var stateMetadata: Dictionary<String,String> = [:]

  /// Required. Name of the recommendation which was acted on. Eg, :
  /// 'projects/123/locations/global/recommenders/roleReco/recommendations/r1'
  public var recommendationName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Log content of an action on an insight. This includes Mark* actions.
public struct Google_Cloud_Recommender_Logging_V1_InsightActionLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. User that executed this action. Eg, foo@gmail.com
  public var actor: String = String()

  /// Required. State change that was made by the actor. Eg, ACCEPTED.
  public var state: Google_Cloud_Recommender_V1_InsightStateInfo.State = .unspecified

  /// Optional. Metadata that was included with the action that was taken.
  public var stateMetadata: Dictionary<String,String> = [:]

  /// Required. Name of the insight which was acted on. Eg, :
  /// 'projects/123/locations/global/insightTypes/roleInsight/insights/i1'
  public var insight: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.recommender.logging.v1"

extension Google_Cloud_Recommender_Logging_V1_ActionLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionLog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actor"),
    2: .same(proto: "state"),
    3: .standard(proto: "state_metadata"),
    4: .standard(proto: "recommendation_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.actor) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.stateMetadata) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recommendationName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.actor.isEmpty {
      try visitor.visitSingularStringField(value: self.actor, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.stateMetadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.stateMetadata, fieldNumber: 3)
    }
    if !self.recommendationName.isEmpty {
      try visitor.visitSingularStringField(value: self.recommendationName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommender_Logging_V1_ActionLog, rhs: Google_Cloud_Recommender_Logging_V1_ActionLog) -> Bool {
    if lhs.actor != rhs.actor {return false}
    if lhs.state != rhs.state {return false}
    if lhs.stateMetadata != rhs.stateMetadata {return false}
    if lhs.recommendationName != rhs.recommendationName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommender_Logging_V1_InsightActionLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsightActionLog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actor"),
    2: .same(proto: "state"),
    3: .standard(proto: "state_metadata"),
    4: .same(proto: "insight"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.actor) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.stateMetadata) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.insight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.actor.isEmpty {
      try visitor.visitSingularStringField(value: self.actor, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.stateMetadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.stateMetadata, fieldNumber: 3)
    }
    if !self.insight.isEmpty {
      try visitor.visitSingularStringField(value: self.insight, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommender_Logging_V1_InsightActionLog, rhs: Google_Cloud_Recommender_Logging_V1_InsightActionLog) -> Bool {
    if lhs.actor != rhs.actor {return false}
    if lhs.state != rhs.state {return false}
    if lhs.stateMetadata != rhs.stateMetadata {return false}
    if lhs.insight != rhs.insight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
