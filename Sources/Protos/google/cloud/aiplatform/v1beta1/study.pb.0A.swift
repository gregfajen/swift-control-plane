// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1beta1/study.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A message representing a Trial. A Trial contains a unique set of Parameters
/// that has been or will be evaluated, along with the objective metrics got by
/// running the Trial.
public struct Google_Cloud_Aiplatform_V1beta1_Trial {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The identifier of the Trial assigned by the service.
  public var id: String = String()

  /// Output only. The detailed state of the Trial.
  public var state: Google_Cloud_Aiplatform_V1beta1_Trial.State = .unspecified

  /// Output only. The parameters of the Trial.
  public var parameters: [Google_Cloud_Aiplatform_V1beta1_Trial.Parameter] = []

  /// Output only. The final measurement containing the objective value.
  public var finalMeasurement: Google_Cloud_Aiplatform_V1beta1_Measurement {
    get {return _finalMeasurement ?? Google_Cloud_Aiplatform_V1beta1_Measurement()}
    set {_finalMeasurement = newValue}
  }
  /// Returns true if `finalMeasurement` has been explicitly set.
  public var hasFinalMeasurement: Bool {return self._finalMeasurement != nil}
  /// Clears the value of `finalMeasurement`. Subsequent reads from it will return its default value.
  public mutating func clearFinalMeasurement() {self._finalMeasurement = nil}

  /// Output only. Time when the Trial was started.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Output only. Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// Output only. The CustomJob name linked to the Trial.
  /// It's set for a HyperparameterTuningJob's Trial.
  public var customJob: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Describes a Trial state.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The Trial state is unspecified.
    case unspecified // = 0

    /// Indicates that a specific Trial has been requested, but it has not yet
    /// been suggested by the service.
    case requested // = 1

    /// Indicates that the Trial has been suggested.
    case active // = 2

    /// Indicates that the Trial should stop according to the service.
    case stopping // = 3

    /// Indicates that the Trial is completed successfully.
    case succeeded // = 4

    /// Indicates that the Trial should not be attempted again.
    /// The service will set a Trial to INFEASIBLE when it's done but missing
    /// the final_measurement.
    case infeasible // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .requested
      case 2: self = .active
      case 3: self = .stopping
      case 4: self = .succeeded
      case 5: self = .infeasible
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .requested: return 1
      case .active: return 2
      case .stopping: return 3
      case .succeeded: return 4
      case .infeasible: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A message representing a parameter to be tuned.
  public struct Parameter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The ID of the parameter. The parameter should be defined in
    /// [StudySpec's Parameters][google.cloud.aiplatform.v1beta1.StudySpec.parameters].
    public var parameterID: String = String()

    /// Output only. The value of the parameter.
    /// `number_value` will be set if a parameter defined in StudySpec is
    /// in type 'INTEGER', 'DOUBLE' or 'DISCRETE'.
    /// `string_value` will be set if a parameter defined in StudySpec is
    /// in type 'CATEGORICAL'.
    public var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  public init() {}

  fileprivate var _finalMeasurement: Google_Cloud_Aiplatform_V1beta1_Measurement? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Aiplatform_V1beta1_Trial.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Aiplatform_V1beta1_Trial.State] = [
    .unspecified,
    .requested,
    .active,
    .stopping,
    .succeeded,
    .infeasible,
  ]
}

#endif  // swift(>=4.2)

/// Represents specification of a Study.
public struct Google_Cloud_Aiplatform_V1beta1_StudySpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Metric specs for the Study.
  public var metrics: [Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec] = []

  /// Required. The set of parameters to tune.
  public var parameters: [Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec] = []

  /// The search algorithm specified for the Study.
  public var algorithm: Google_Cloud_Aiplatform_V1beta1_StudySpec.Algorithm = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The available search algorithms for the Study.
  public enum Algorithm: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The default algorithm used by AI Platform Optimization service.
    case unspecified // = 0

    /// Simple grid search within the feasible space. To use grid search,
    /// all parameters must be `INTEGER`, `CATEGORICAL`, or `DISCRETE`.
    case gridSearch // = 2

    /// Simple random search within the feasible space.
    case randomSearch // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 2: self = .gridSearch
      case 3: self = .randomSearch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .gridSearch: return 2
      case .randomSearch: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Represents a metric to optimize.
  public struct MetricSpec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The ID of the metric. Must not contain whitespaces and must be unique
    /// amongst all MetricSpecs.
    public var metricID: String = String()

    /// Required. The optimization goal of the metric.
    public var goal: Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec.GoalType = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The available types of optimization goals.
    public enum GoalType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Goal Type will default to maximize.
      case unspecified // = 0

      /// Maximize the goal metric.
      case maximize // = 1

      /// Minimize the goal metric.
      case minimize // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .maximize
        case 2: self = .minimize
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .maximize: return 1
        case .minimize: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  /// Represents a single parameter to optimize.
  public struct ParameterSpec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var parameterValueSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.OneOf_ParameterValueSpec? = nil

    /// The value spec for a 'DOUBLE' parameter.
    public var doubleValueSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec {
      get {
        if case .doubleValueSpec(let v)? = parameterValueSpec {return v}
        return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec()
      }
      set {parameterValueSpec = .doubleValueSpec(newValue)}
    }

    /// The value spec for an 'INTEGER' parameter.
    public var integerValueSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec {
      get {
        if case .integerValueSpec(let v)? = parameterValueSpec {return v}
        return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec()
      }
      set {parameterValueSpec = .integerValueSpec(newValue)}
    }

    /// The value spec for a 'CATEGORICAL' parameter.
    public var categoricalValueSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec {
      get {
        if case .categoricalValueSpec(let v)? = parameterValueSpec {return v}
        return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec()
      }
      set {parameterValueSpec = .categoricalValueSpec(newValue)}
    }

    /// The value spec for a 'DISCRETE' parameter.
    public var discreteValueSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec {
      get {
        if case .discreteValueSpec(let v)? = parameterValueSpec {return v}
        return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec()
      }
      set {parameterValueSpec = .discreteValueSpec(newValue)}
    }

    /// Required. The ID of the parameter. Must not contain whitespaces and must be unique
    /// amongst all ParameterSpecs.
    public var parameterID: String = String()

    /// How the parameter should be scaled.
    /// Leave unset for `CATEGORICAL` parameters.
    public var scaleType: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ScaleType = .unspecified

    /// A conditional parameter node is active if the parameter's value matches
    /// the conditional node's parent_value_condition.
    ///
    /// If two items in conditional_parameter_specs have the same name, they
    /// must have disjoint parent_value_condition.
    public var conditionalParameterSpecs: [Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_ParameterValueSpec: Equatable {
      /// The value spec for a 'DOUBLE' parameter.
      case doubleValueSpec(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec)
      /// The value spec for an 'INTEGER' parameter.
      case integerValueSpec(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec)
      /// The value spec for a 'CATEGORICAL' parameter.
      case categoricalValueSpec(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec)
      /// The value spec for a 'DISCRETE' parameter.
      case discreteValueSpec(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.OneOf_ParameterValueSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.OneOf_ParameterValueSpec) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.doubleValueSpec, .doubleValueSpec): return {
          guard case .doubleValueSpec(let l) = lhs, case .doubleValueSpec(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.integerValueSpec, .integerValueSpec): return {
          guard case .integerValueSpec(let l) = lhs, case .integerValueSpec(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.categoricalValueSpec, .categoricalValueSpec): return {
          guard case .categoricalValueSpec(let l) = lhs, case .categoricalValueSpec(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.discreteValueSpec, .discreteValueSpec): return {
          guard case .discreteValueSpec(let l) = lhs, case .discreteValueSpec(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    /// The type of scaling that should be applied to this parameter.
    public enum ScaleType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// By default, no scaling is applied.
      case unspecified // = 0

      /// Scales the feasible space to (0, 1) linearly.
      case unitLinearScale // = 1

      /// Scales the feasible space logarithmically to (0, 1). The entire
      /// feasible space must be strictly positive.
      case unitLogScale // = 2

      /// Scales the feasible space "reverse" logarithmically to (0, 1). The
      /// result is that values close to the top of the feasible space are spread
      /// out more than points near the bottom. The entire feasible space must be
      /// strictly positive.
      case unitReverseLogScale // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .unitLinearScale
        case 2: self = .unitLogScale
        case 3: self = .unitReverseLogScale
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .unitLinearScale: return 1
        case .unitLogScale: return 2
        case .unitReverseLogScale: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// Value specification for a parameter in `DOUBLE` type.
    public struct DoubleValueSpec {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Inclusive minimum value of the parameter.
      public var minValue: Double = 0

      /// Required. Inclusive maximum value of the parameter.
      public var maxValue: Double = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Value specification for a parameter in `INTEGER` type.
    public struct IntegerValueSpec {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Inclusive minimum value of the parameter.
      public var minValue: Int64 = 0

      /// Required. Inclusive maximum value of the parameter.
      public var maxValue: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Value specification for a parameter in `CATEGORICAL` type.
    public struct CategoricalValueSpec {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The list of possible categories.
      public var values: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Value specification for a parameter in `DISCRETE` type.
    public struct DiscreteValueSpec {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. A list of possible values.
      /// The list should be in increasing order and at least 1e-10 apart.
      /// For instance, this parameter might have possible settings of 1.5, 2.5,
      /// and 4.0. This list should not contain more than 1,000 values.
      public var values: [Double] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Represents a parameter spec with condition from its parent parameter.
    public struct ConditionalParameterSpec {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// A set of parameter values from the parent ParameterSpec's feasible
      /// space.
      public var parentValueCondition: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.OneOf_ParentValueCondition? = nil

      /// The spec for matching values from a parent parameter of
      /// `DISCRETE` type.
      public var parentDiscreteValues: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition {
        get {
          if case .parentDiscreteValues(let v)? = parentValueCondition {return v}
          return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition()
        }
        set {parentValueCondition = .parentDiscreteValues(newValue)}
      }

      /// The spec for matching values from a parent parameter of `INTEGER`
      /// type.
      public var parentIntValues: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition {
        get {
          if case .parentIntValues(let v)? = parentValueCondition {return v}
          return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition()
        }
        set {parentValueCondition = .parentIntValues(newValue)}
      }

      /// The spec for matching values from a parent parameter of
      /// `CATEGORICAL` type.
      public var parentCategoricalValues: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition {
        get {
          if case .parentCategoricalValues(let v)? = parentValueCondition {return v}
          return Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition()
        }
        set {parentValueCondition = .parentCategoricalValues(newValue)}
      }

      /// Required. The spec for a conditional parameter.
      public var parameterSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec {
        get {return _parameterSpec ?? Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec()}
        set {_parameterSpec = newValue}
      }
      /// Returns true if `parameterSpec` has been explicitly set.
      public var hasParameterSpec: Bool {return self._parameterSpec != nil}
      /// Clears the value of `parameterSpec`. Subsequent reads from it will return its default value.
      public mutating func clearParameterSpec() {self._parameterSpec = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// A set of parameter values from the parent ParameterSpec's feasible
      /// space.
      public enum OneOf_ParentValueCondition: Equatable {
        /// The spec for matching values from a parent parameter of
        /// `DISCRETE` type.
        case parentDiscreteValues(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition)
        /// The spec for matching values from a parent parameter of `INTEGER`
        /// type.
        case parentIntValues(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition)
        /// The spec for matching values from a parent parameter of
        /// `CATEGORICAL` type.
        case parentCategoricalValues(Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition)

      #if !swift(>=4.1)
        public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.OneOf_ParentValueCondition, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.OneOf_ParentValueCondition) -> Bool {
          // The use of inline closures is to circumvent an issue where the compiler
          // allocates stack space for every case branch when no optimizations are
          // enabled. https://github.com/apple/swift-protobuf/issues/1034
          switch (lhs, rhs) {
          case (.parentDiscreteValues, .parentDiscreteValues): return {
            guard case .parentDiscreteValues(let l) = lhs, case .parentDiscreteValues(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.parentIntValues, .parentIntValues): return {
            guard case .parentIntValues(let l) = lhs, case .parentIntValues(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.parentCategoricalValues, .parentCategoricalValues): return {
            guard case .parentCategoricalValues(let l) = lhs, case .parentCategoricalValues(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          default: return false
          }
        }
      #endif
      }

      /// Represents the spec to match discrete values from parent parameter.
      public struct DiscreteValueCondition {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Matches values of the parent parameter of 'DISCRETE' type.
        /// All values must exist in `discrete_value_spec` of parent parameter.
        ///
        /// The Epsilon of the value matching is 1e-10.
        public var values: [Double] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Represents the spec to match integer values from parent parameter.
      public struct IntValueCondition {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Matches values of the parent parameter of 'INTEGER' type.
        /// All values must lie in `integer_value_spec` of parent parameter.
        public var values: [Int64] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Represents the spec to match categorical values from parent parameter.
      public struct CategoricalValueCondition {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Matches values of the parent parameter of 'CATEGORICAL' type.
        /// All values must exist in `categorical_value_spec` of parent
        /// parameter.
        public var values: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}

      fileprivate var _parameterSpec: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec? = nil
    }

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.Algorithm: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Aiplatform_V1beta1_StudySpec.Algorithm] = [
    .unspecified,
    .gridSearch,
    .randomSearch,
  ]
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec.GoalType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec.GoalType] = [
    .unspecified,
    .maximize,
    .minimize,
  ]
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ScaleType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ScaleType] = [
    .unspecified,
    .unitLinearScale,
    .unitLogScale,
    .unitReverseLogScale,
  ]
}

#endif  // swift(>=4.2)

/// A message representing a Measurement of a Trial. A Measurement contains
/// the Metrics got by executing a Trial using suggested hyperparameter
/// values.
public struct Google_Cloud_Aiplatform_V1beta1_Measurement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The number of steps the machine learning model has been trained for.
  /// Must be non-negative.
  public var stepCount: Int64 = 0

  /// Output only. A list of metrics got by evaluating the objective functions using suggested
  /// Parameter values.
  public var metrics: [Google_Cloud_Aiplatform_V1beta1_Measurement.Metric] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A message representing a metric in the measurement.
  public struct Metric {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The ID of the Metric. The Metric should be defined in
    /// [StudySpec's Metrics][google.cloud.aiplatform.v1beta1.StudySpec.metrics].
    public var metricID: String = String()

    /// Output only. The value for this metric.
    public var value: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1beta1"

extension Google_Cloud_Aiplatform_V1beta1_Trial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Trial"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "id"),
    3: .same(proto: "state"),
    4: .same(proto: "parameters"),
    5: .standard(proto: "final_measurement"),
    7: .standard(proto: "start_time"),
    8: .standard(proto: "end_time"),
    11: .standard(proto: "custom_job"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.parameters) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._finalMeasurement) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.customJob) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameters, fieldNumber: 4)
    }
    if let v = self._finalMeasurement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.customJob.isEmpty {
      try visitor.visitSingularStringField(value: self.customJob, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_Trial, rhs: Google_Cloud_Aiplatform_V1beta1_Trial) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.state != rhs.state {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs._finalMeasurement != rhs._finalMeasurement {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.customJob != rhs.customJob {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_Trial.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "REQUESTED"),
    2: .same(proto: "ACTIVE"),
    3: .same(proto: "STOPPING"),
    4: .same(proto: "SUCCEEDED"),
    5: .same(proto: "INFEASIBLE"),
  ]
}

extension Google_Cloud_Aiplatform_V1beta1_Trial.Parameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_Trial.protoMessageName + ".Parameter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "parameter_id"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parameterID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameterID.isEmpty {
      try visitor.visitSingularStringField(value: self.parameterID, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_Trial.Parameter, rhs: Google_Cloud_Aiplatform_V1beta1_Trial.Parameter) -> Bool {
    if lhs.parameterID != rhs.parameterID {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StudySpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metrics"),
    2: .same(proto: "parameters"),
    3: .same(proto: "algorithm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.parameters) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.algorithm) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 1)
    }
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameters, fieldNumber: 2)
    }
    if self.algorithm != .unspecified {
      try visitor.visitSingularEnumField(value: self.algorithm, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec) -> Bool {
    if lhs.metrics != rhs.metrics {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.Algorithm: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALGORITHM_UNSPECIFIED"),
    2: .same(proto: "GRID_SEARCH"),
    3: .same(proto: "RANDOM_SEARCH"),
  ]
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.protoMessageName + ".MetricSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metric_id"),
    2: .same(proto: "goal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.metricID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.goal) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metricID.isEmpty {
      try visitor.visitSingularStringField(value: self.metricID, fieldNumber: 1)
    }
    if self.goal != .unspecified {
      try visitor.visitSingularEnumField(value: self.goal, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec) -> Bool {
    if lhs.metricID != rhs.metricID {return false}
    if lhs.goal != rhs.goal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.MetricSpec.GoalType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GOAL_TYPE_UNSPECIFIED"),
    1: .same(proto: "MAXIMIZE"),
    2: .same(proto: "MINIMIZE"),
  ]
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.protoMessageName + ".ParameterSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "double_value_spec"),
    3: .standard(proto: "integer_value_spec"),
    4: .standard(proto: "categorical_value_spec"),
    5: .standard(proto: "discrete_value_spec"),
    1: .standard(proto: "parameter_id"),
    6: .standard(proto: "scale_type"),
    10: .standard(proto: "conditional_parameter_specs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parameterID) }()
      case 2: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec?
        if let current = self.parameterValueSpec {
          try decoder.handleConflictingOneOf()
          if case .doubleValueSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parameterValueSpec = .doubleValueSpec(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec?
        if let current = self.parameterValueSpec {
          try decoder.handleConflictingOneOf()
          if case .integerValueSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parameterValueSpec = .integerValueSpec(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec?
        if let current = self.parameterValueSpec {
          try decoder.handleConflictingOneOf()
          if case .categoricalValueSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parameterValueSpec = .categoricalValueSpec(v)}
      }()
      case 5: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec?
        if let current = self.parameterValueSpec {
          try decoder.handleConflictingOneOf()
          if case .discreteValueSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parameterValueSpec = .discreteValueSpec(v)}
      }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.scaleType) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.conditionalParameterSpecs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameterID.isEmpty {
      try visitor.visitSingularStringField(value: self.parameterID, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.parameterValueSpec {
    case .doubleValueSpec?: try {
      guard case .doubleValueSpec(let v)? = self.parameterValueSpec else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .integerValueSpec?: try {
      guard case .integerValueSpec(let v)? = self.parameterValueSpec else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .categoricalValueSpec?: try {
      guard case .categoricalValueSpec(let v)? = self.parameterValueSpec else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .discreteValueSpec?: try {
      guard case .discreteValueSpec(let v)? = self.parameterValueSpec else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if self.scaleType != .unspecified {
      try visitor.visitSingularEnumField(value: self.scaleType, fieldNumber: 6)
    }
    if !self.conditionalParameterSpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conditionalParameterSpecs, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec) -> Bool {
    if lhs.parameterValueSpec != rhs.parameterValueSpec {return false}
    if lhs.parameterID != rhs.parameterID {return false}
    if lhs.scaleType != rhs.scaleType {return false}
    if lhs.conditionalParameterSpecs != rhs.conditionalParameterSpecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ScaleType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SCALE_TYPE_UNSPECIFIED"),
    1: .same(proto: "UNIT_LINEAR_SCALE"),
    2: .same(proto: "UNIT_LOG_SCALE"),
    3: .same(proto: "UNIT_REVERSE_LOG_SCALE"),
  ]
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.protoMessageName + ".DoubleValueSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_value"),
    2: .standard(proto: "max_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.minValue) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.maxValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minValue != 0 {
      try visitor.visitSingularDoubleField(value: self.minValue, fieldNumber: 1)
    }
    if self.maxValue != 0 {
      try visitor.visitSingularDoubleField(value: self.maxValue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DoubleValueSpec) -> Bool {
    if lhs.minValue != rhs.minValue {return false}
    if lhs.maxValue != rhs.maxValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.protoMessageName + ".IntegerValueSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_value"),
    2: .standard(proto: "max_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.minValue) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.maxValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minValue != 0 {
      try visitor.visitSingularInt64Field(value: self.minValue, fieldNumber: 1)
    }
    if self.maxValue != 0 {
      try visitor.visitSingularInt64Field(value: self.maxValue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.IntegerValueSpec) -> Bool {
    if lhs.minValue != rhs.minValue {return false}
    if lhs.maxValue != rhs.maxValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.protoMessageName + ".CategoricalValueSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.CategoricalValueSpec) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.protoMessageName + ".DiscreteValueSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitPackedDoubleField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.DiscreteValueSpec) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.protoMessageName + ".ConditionalParameterSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "parent_discrete_values"),
    3: .standard(proto: "parent_int_values"),
    4: .standard(proto: "parent_categorical_values"),
    1: .standard(proto: "parameter_spec"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameterSpec) }()
      case 2: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition?
        if let current = self.parentValueCondition {
          try decoder.handleConflictingOneOf()
          if case .parentDiscreteValues(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parentValueCondition = .parentDiscreteValues(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition?
        if let current = self.parentValueCondition {
          try decoder.handleConflictingOneOf()
          if case .parentIntValues(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parentValueCondition = .parentIntValues(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition?
        if let current = self.parentValueCondition {
          try decoder.handleConflictingOneOf()
          if case .parentCategoricalValues(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.parentValueCondition = .parentCategoricalValues(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._parameterSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.parentValueCondition {
    case .parentDiscreteValues?: try {
      guard case .parentDiscreteValues(let v)? = self.parentValueCondition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .parentIntValues?: try {
      guard case .parentIntValues(let v)? = self.parentValueCondition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .parentCategoricalValues?: try {
      guard case .parentCategoricalValues(let v)? = self.parentValueCondition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec) -> Bool {
    if lhs.parentValueCondition != rhs.parentValueCondition {return false}
    if lhs._parameterSpec != rhs._parameterSpec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.protoMessageName + ".DiscreteValueCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitPackedDoubleField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.DiscreteValueCondition) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.protoMessageName + ".IntValueCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitPackedInt64Field(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.IntValueCondition) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.protoMessageName + ".CategoricalValueCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition, rhs: Google_Cloud_Aiplatform_V1beta1_StudySpec.ParameterSpec.ConditionalParameterSpec.CategoricalValueCondition) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_Measurement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Measurement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "step_count"),
    3: .same(proto: "metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.stepCount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stepCount != 0 {
      try visitor.visitSingularInt64Field(value: self.stepCount, fieldNumber: 2)
    }
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_Measurement, rhs: Google_Cloud_Aiplatform_V1beta1_Measurement) -> Bool {
    if lhs.stepCount != rhs.stepCount {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_Measurement.Metric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1beta1_Measurement.protoMessageName + ".Metric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metric_id"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.metricID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metricID.isEmpty {
      try visitor.visitSingularStringField(value: self.metricID, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_Measurement.Metric, rhs: Google_Cloud_Aiplatform_V1beta1_Measurement.Metric) -> Bool {
    if lhs.metricID != rhs.metricID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
