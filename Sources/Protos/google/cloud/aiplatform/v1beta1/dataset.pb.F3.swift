// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1beta1/dataset.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A collection of DataItems and Annotations on them.
public struct Google_Cloud_Aiplatform_V1beta1_Dataset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The resource name of the Dataset.
  public var name: String = String()

  /// Required. The user-defined name of the Dataset.
  /// The name can be up to 128 characters long and can be consist of any UTF-8
  /// characters.
  public var displayName: String = String()

  /// Required. Points to a YAML file stored on Google Cloud Storage describing additional
  /// information about the Dataset.
  /// The schema is defined as an OpenAPI 3.0.2 Schema Object.
  /// The schema files that can be used here are found in
  /// gs://google-cloud-aiplatform/schema/dataset/metadata/.
  public var metadataSchemaUri: String = String()

  /// Required. Additional information about the Dataset.
  public var metadata: SwiftProtobuf.Google_Protobuf_Value {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// Output only. Timestamp when this Dataset was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this Dataset was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  /// The labels with user-defined metadata to organize your Datasets.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// No more than 64 user labels can be associated with one Dataset (System
  /// labels are excluded).
  ///
  /// See https://goo.gl/xmQnxf for more information and examples of labels.
  /// System reserved label keys are prefixed with "aiplatform.googleapis.com/"
  /// and are immutable. Following system labels exist for each Dataset:
  ///
  /// * "aiplatform.googleapis.com/dataset_metadata_schema": output only, its
  ///   value is the [metadata_schema's][google.cloud.aiplatform.v1beta1.Dataset.metadata_schema_uri] title.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Value? = nil
  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Describes the location from where we import data into a Dataset, together
/// with the labels that will be applied to the DataItems and the Annotations.
public struct Google_Cloud_Aiplatform_V1beta1_ImportDataConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The source of the input.
  public var source: Google_Cloud_Aiplatform_V1beta1_ImportDataConfig.OneOf_Source? = nil

  /// The Google Cloud Storage location for the input content.
  public var gcsSource: Google_Cloud_Aiplatform_V1beta1_GcsSource {
    get {
      if case .gcsSource(let v)? = source {return v}
      return Google_Cloud_Aiplatform_V1beta1_GcsSource()
    }
    set {source = .gcsSource(newValue)}
  }

  /// Labels that will be applied to newly imported DataItems. If an identical
  /// DataItem as one being imported already exists in the Dataset, then these
  /// labels will be appended to these of the already existing one, and if labels
  /// with identical key is imported before, the old label value will be
  /// overwritten. If two DataItems are identical in the same import data
  /// operation, the labels will be combined and if key collision happens in this
  /// case, one of the values will be picked randomly. Two DataItems are
  /// considered identical if their content bytes are identical (e.g. image bytes
  /// or pdf bytes).
  /// These labels will be overridden by Annotation labels specified inside index
  /// file refenced by [import_schema_uri][google.cloud.aiplatform.v1beta1.ImportDataConfig.import_schema_uri], e.g. jsonl file.
  public var dataItemLabels: Dictionary<String,String> = [:]

  /// Required. Points to a YAML file stored on Google Cloud Storage describing the import
  /// format. Validation will be done against the schema. The schema is defined
  /// as an [OpenAPI 3.0.2 Schema Object](https://tinyurl.com/y538mdwt).
  public var importSchemaUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The source of the input.
  public enum OneOf_Source: Equatable {
    /// The Google Cloud Storage location for the input content.
    case gcsSource(Google_Cloud_Aiplatform_V1beta1_GcsSource)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_ImportDataConfig.OneOf_Source, rhs: Google_Cloud_Aiplatform_V1beta1_ImportDataConfig.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsSource, .gcsSource): return {
        guard case .gcsSource(let l) = lhs, case .gcsSource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Describes what part of the Dataset is to be exported, the destination of
/// the export and how to export.
public struct Google_Cloud_Aiplatform_V1beta1_ExportDataConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The destination of the output.
  public var destination: Google_Cloud_Aiplatform_V1beta1_ExportDataConfig.OneOf_Destination? = nil

  /// The Google Cloud Storage location where the output is to be written to.
  /// In the given directory a new directory will be created with name:
  /// `export-data-<dataset-display-name>-<timestamp-of-export-call>` where
  /// timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. All export
  /// output will be written into that directory. Inside that directory,
  /// annotations with the same schema will be grouped into sub directories
  /// which are named with the corresponding annotations' schema title. Inside
  /// these sub directories, a schema.yaml will be created to describe the
  /// output format.
  public var gcsDestination: Google_Cloud_Aiplatform_V1beta1_GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Aiplatform_V1beta1_GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  /// A filter on Annotations of the Dataset. Only Annotations on to-be-exported
  /// DataItems(specified by [data_items_filter][]) that match this filter will
  /// be exported. The filter syntax is the same as in
  /// [ListAnnotations][google.cloud.aiplatform.v1beta1.DatasetService.ListAnnotations].
  public var annotationsFilter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The destination of the output.
  public enum OneOf_Destination: Equatable {
    /// The Google Cloud Storage location where the output is to be written to.
    /// In the given directory a new directory will be created with name:
    /// `export-data-<dataset-display-name>-<timestamp-of-export-call>` where
    /// timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. All export
    /// output will be written into that directory. Inside that directory,
    /// annotations with the same schema will be grouped into sub directories
    /// which are named with the corresponding annotations' schema title. Inside
    /// these sub directories, a schema.yaml will be created to describe the
    /// output format.
    case gcsDestination(Google_Cloud_Aiplatform_V1beta1_GcsDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_ExportDataConfig.OneOf_Destination, rhs: Google_Cloud_Aiplatform_V1beta1_ExportDataConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1beta1"

extension Google_Cloud_Aiplatform_V1beta1_Dataset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dataset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "metadata_schema_uri"),
    8: .same(proto: "metadata"),
    4: .standard(proto: "create_time"),
    5: .standard(proto: "update_time"),
    6: .same(proto: "etag"),
    7: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.metadataSchemaUri) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.metadataSchemaUri.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataSchemaUri, fieldNumber: 3)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 6)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 7)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_Dataset, rhs: Google_Cloud_Aiplatform_V1beta1_Dataset) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.metadataSchemaUri != rhs.metadataSchemaUri {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_ImportDataConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_source"),
    2: .standard(proto: "data_item_labels"),
    4: .standard(proto: "import_schema_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Aiplatform_V1beta1_GcsSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .gcsSource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .gcsSource(v)}
      }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.dataItemLabels) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.importSchemaUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsSource(let v)? = self.source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.dataItemLabels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.dataItemLabels, fieldNumber: 2)
    }
    if !self.importSchemaUri.isEmpty {
      try visitor.visitSingularStringField(value: self.importSchemaUri, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_ImportDataConfig, rhs: Google_Cloud_Aiplatform_V1beta1_ImportDataConfig) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.dataItemLabels != rhs.dataItemLabels {return false}
    if lhs.importSchemaUri != rhs.importSchemaUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_ExportDataConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
    2: .standard(proto: "annotations_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Aiplatform_V1beta1_GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.annotationsFilter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsDestination(let v)? = self.destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotationsFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationsFilter, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_ExportDataConfig, rhs: Google_Cloud_Aiplatform_V1beta1_ExportDataConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.annotationsFilter != rhs.annotationsFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
