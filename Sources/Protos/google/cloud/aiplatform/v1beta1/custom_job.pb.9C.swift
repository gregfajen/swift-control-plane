// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1beta1/custom_job.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a job that runs custom workloads such as a Docker container or a
/// Python package. A CustomJob can have multiple worker pools and each worker
/// pool can have its own machine and input spec. A CustomJob will be cleaned up
/// once the job enters terminal state (failed or succeeded).
public struct Google_Cloud_Aiplatform_V1beta1_CustomJob {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of a CustomJob.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The display name of the CustomJob.
  /// The name can be up to 128 characters long and can be consist of any UTF-8
  /// characters.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// Required. Job spec.
  public var jobSpec: Google_Cloud_Aiplatform_V1beta1_CustomJobSpec {
    get {return _storage._jobSpec ?? Google_Cloud_Aiplatform_V1beta1_CustomJobSpec()}
    set {_uniqueStorage()._jobSpec = newValue}
  }
  /// Returns true if `jobSpec` has been explicitly set.
  public var hasJobSpec: Bool {return _storage._jobSpec != nil}
  /// Clears the value of `jobSpec`. Subsequent reads from it will return its default value.
  public mutating func clearJobSpec() {_uniqueStorage()._jobSpec = nil}

  /// Output only. The detailed state of the job.
  public var state: Google_Cloud_Aiplatform_V1beta1_JobState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Output only. Time when the CustomJob was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Time when the CustomJob for the first time entered the
  /// `JOB_STATE_RUNNING` state.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// Output only. Time when the CustomJob entered any of the following states:
  /// `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  /// Output only. Time when the CustomJob was most recently updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Output only. Only populated when job's state is `JOB_STATE_FAILED` or
  /// `JOB_STATE_CANCELLED`.
  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// The labels with user-defined metadata to organize CustomJobs.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information and examples of labels.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents the spec of a CustomJob.
public struct Google_Cloud_Aiplatform_V1beta1_CustomJobSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The spec of the worker pools including machine type and Docker image.
  public var workerPoolSpecs: [Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec] = []

  /// Scheduling options for a CustomJob.
  public var scheduling: Google_Cloud_Aiplatform_V1beta1_Scheduling {
    get {return _scheduling ?? Google_Cloud_Aiplatform_V1beta1_Scheduling()}
    set {_scheduling = newValue}
  }
  /// Returns true if `scheduling` has been explicitly set.
  public var hasScheduling: Bool {return self._scheduling != nil}
  /// Clears the value of `scheduling`. Subsequent reads from it will return its default value.
  public mutating func clearScheduling() {self._scheduling = nil}

  /// Specifies the service account for workload run-as account.
  /// Users submitting jobs must have act-as permission on this run-as account.
  public var serviceAccount: String = String()

  /// The full name of the Compute Engine
  /// [network](/compute/docs/networks-and-firewalls#networks) to which the Job
  /// should be peered. For example, projects/12345/global/networks/myVPC.
  ///
  /// [Format](https:
  /// //cloud.google.com/compute/docs/reference/rest/v1/networks/insert)
  /// is of the form projects/{project}/global/networks/{network}.
  /// Where {project} is a project number, as in '12345', and {network} is
  /// network name.
  ///
  /// Private services access must already be configured for the network. If left
  /// unspecified, the job is not peered with any network.
  public var network: String = String()

  /// The Google Cloud Storage location to store the output of this CustomJob or
  /// HyperparameterTuningJob. For HyperparameterTuningJob,
  /// [base_output_directory][CustomJob.job_spec.base_output_directory] of
  /// each child CustomJob backing a Trial is set to a subdirectory of name
  /// [id][google.cloud.aiplatform.v1beta1.Trial.id] under parent HyperparameterTuningJob's
  ///
  /// [base_output_directory][HyperparameterTuningJob.trial_job_spec.base_output_directory].
  ///
  /// Following AI Platform environment variables will be passed to containers or
  /// python modules when this field is set:
  ///
  ///   For CustomJob:
  ///   * AIP_MODEL_DIR = `<base_output_directory>/model/`
  ///   * AIP_CHECKPOINT_DIR = `<base_output_directory>/checkpoints/`
  ///   * AIP_TENSORBOARD_LOG_DIR = `<base_output_directory>/logs/`
  ///
  ///   For CustomJob backing a Trial of HyperparameterTuningJob:
  ///   * AIP_MODEL_DIR = `<base_output_directory>/<trial_id>/model/`
  ///   * AIP_CHECKPOINT_DIR = `<base_output_directory>/<trial_id>/checkpoints/`
  ///   * AIP_TENSORBOARD_LOG_DIR = `<base_output_directory>/<trial_id>/logs/`
  public var baseOutputDirectory: Google_Cloud_Aiplatform_V1beta1_GcsDestination {
    get {return _baseOutputDirectory ?? Google_Cloud_Aiplatform_V1beta1_GcsDestination()}
    set {_baseOutputDirectory = newValue}
  }
  /// Returns true if `baseOutputDirectory` has been explicitly set.
  public var hasBaseOutputDirectory: Bool {return self._baseOutputDirectory != nil}
  /// Clears the value of `baseOutputDirectory`. Subsequent reads from it will return its default value.
  public mutating func clearBaseOutputDirectory() {self._baseOutputDirectory = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _scheduling: Google_Cloud_Aiplatform_V1beta1_Scheduling? = nil
  fileprivate var _baseOutputDirectory: Google_Cloud_Aiplatform_V1beta1_GcsDestination? = nil
}

/// Represents the spec of a worker pool in a job.
public struct Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The custom task to be executed in this worker pool.
  public var task: Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec.OneOf_Task? = nil

  /// The custom container task.
  public var containerSpec: Google_Cloud_Aiplatform_V1beta1_ContainerSpec {
    get {
      if case .containerSpec(let v)? = task {return v}
      return Google_Cloud_Aiplatform_V1beta1_ContainerSpec()
    }
    set {task = .containerSpec(newValue)}
  }

  /// The Python packaged task.
  public var pythonPackageSpec: Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec {
    get {
      if case .pythonPackageSpec(let v)? = task {return v}
      return Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec()
    }
    set {task = .pythonPackageSpec(newValue)}
  }

  /// Required. Immutable. The specification of a single machine.
  public var machineSpec: Google_Cloud_Aiplatform_V1beta1_MachineSpec {
    get {return _machineSpec ?? Google_Cloud_Aiplatform_V1beta1_MachineSpec()}
    set {_machineSpec = newValue}
  }
  /// Returns true if `machineSpec` has been explicitly set.
  public var hasMachineSpec: Bool {return self._machineSpec != nil}
  /// Clears the value of `machineSpec`. Subsequent reads from it will return its default value.
  public mutating func clearMachineSpec() {self._machineSpec = nil}

  /// Required. The number of worker replicas to use for this worker pool.
  public var replicaCount: Int64 = 0

  /// Disk spec.
  public var diskSpec: Google_Cloud_Aiplatform_V1beta1_DiskSpec {
    get {return _diskSpec ?? Google_Cloud_Aiplatform_V1beta1_DiskSpec()}
    set {_diskSpec = newValue}
  }
  /// Returns true if `diskSpec` has been explicitly set.
  public var hasDiskSpec: Bool {return self._diskSpec != nil}
  /// Clears the value of `diskSpec`. Subsequent reads from it will return its default value.
  public mutating func clearDiskSpec() {self._diskSpec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The custom task to be executed in this worker pool.
  public enum OneOf_Task: Equatable {
    /// The custom container task.
    case containerSpec(Google_Cloud_Aiplatform_V1beta1_ContainerSpec)
    /// The Python packaged task.
    case pythonPackageSpec(Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec.OneOf_Task, rhs: Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec.OneOf_Task) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.containerSpec, .containerSpec): return {
        guard case .containerSpec(let l) = lhs, case .containerSpec(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pythonPackageSpec, .pythonPackageSpec): return {
        guard case .pythonPackageSpec(let l) = lhs, case .pythonPackageSpec(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _machineSpec: Google_Cloud_Aiplatform_V1beta1_MachineSpec? = nil
  fileprivate var _diskSpec: Google_Cloud_Aiplatform_V1beta1_DiskSpec? = nil
}

/// The spec of a Container.
public struct Google_Cloud_Aiplatform_V1beta1_ContainerSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The URI of a container image in the Container Registry that is to be run on
  /// each worker replica.
  public var imageUri: String = String()

  /// The command to be invoked when the container is started.
  /// It overrides the entrypoint instruction in Dockerfile when provided.
  public var command: [String] = []

  /// The arguments to be passed when starting the container.
  public var args: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The spec of a Python packaged code.
public struct Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The URI of a container image in the Container Registry that will run the
  /// provided python package. AI Platform provides wide range of executor images
  /// with pre-installed packages to meet users' various use cases. Only one of
  /// the provided images can be set here.
  public var executorImageUri: String = String()

  /// Required. The Google Cloud Storage location of the Python package files which are
  /// the training program and its dependent packages.
  /// The maximum number of package URIs is 100.
  public var packageUris: [String] = []

  /// Required. The Python module name to run after installing the packages.
  public var pythonModule: String = String()

  /// Command line arguments to be passed to the Python task.
  public var args: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// All parameters related to queuing and scheduling of custom jobs.
public struct Google_Cloud_Aiplatform_V1beta1_Scheduling {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The maximum job running time. The default is 7 days.
  public var timeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _timeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  public var hasTimeout: Bool {return self._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  public mutating func clearTimeout() {self._timeout = nil}

  /// Restarts the entire CustomJob if a worker gets restarted.
  /// This feature can be used by distributed training jobs that are not
  /// resilient to workers leaving and joining a job.
  public var restartJobOnWorkerRestart: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1beta1"

extension Google_Cloud_Aiplatform_V1beta1_CustomJob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomJob"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    4: .standard(proto: "job_spec"),
    5: .same(proto: "state"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "start_time"),
    8: .standard(proto: "end_time"),
    9: .standard(proto: "update_time"),
    10: .same(proto: "error"),
    11: .same(proto: "labels"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _jobSpec: Google_Cloud_Aiplatform_V1beta1_CustomJobSpec? = nil
    var _state: Google_Cloud_Aiplatform_V1beta1_JobState = .unspecified
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _error: Google_Rpc_Status? = nil
    var _labels: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _jobSpec = source._jobSpec
      _state = source._state
      _createTime = source._createTime
      _startTime = source._startTime
      _endTime = source._endTime
      _updateTime = source._updateTime
      _error = source._error
      _labels = source._labels
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._jobSpec) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._endTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._error) }()
        case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if let v = _storage._jobSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 5)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_CustomJob, rhs: Google_Cloud_Aiplatform_V1beta1_CustomJob) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._jobSpec != rhs_storage._jobSpec {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._labels != rhs_storage._labels {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_CustomJobSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomJobSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_pool_specs"),
    3: .same(proto: "scheduling"),
    4: .standard(proto: "service_account"),
    5: .same(proto: "network"),
    6: .standard(proto: "base_output_directory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.workerPoolSpecs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._scheduling) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serviceAccount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.network) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._baseOutputDirectory) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.workerPoolSpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.workerPoolSpecs, fieldNumber: 1)
    }
    if let v = self._scheduling {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.serviceAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccount, fieldNumber: 4)
    }
    if !self.network.isEmpty {
      try visitor.visitSingularStringField(value: self.network, fieldNumber: 5)
    }
    if let v = self._baseOutputDirectory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_CustomJobSpec, rhs: Google_Cloud_Aiplatform_V1beta1_CustomJobSpec) -> Bool {
    if lhs.workerPoolSpecs != rhs.workerPoolSpecs {return false}
    if lhs._scheduling != rhs._scheduling {return false}
    if lhs.serviceAccount != rhs.serviceAccount {return false}
    if lhs.network != rhs.network {return false}
    if lhs._baseOutputDirectory != rhs._baseOutputDirectory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerPoolSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .standard(proto: "container_spec"),
    7: .standard(proto: "python_package_spec"),
    1: .standard(proto: "machine_spec"),
    2: .standard(proto: "replica_count"),
    5: .standard(proto: "disk_spec"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._machineSpec) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.replicaCount) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._diskSpec) }()
      case 6: try {
        var v: Google_Cloud_Aiplatform_V1beta1_ContainerSpec?
        if let current = self.task {
          try decoder.handleConflictingOneOf()
          if case .containerSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.task = .containerSpec(v)}
      }()
      case 7: try {
        var v: Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec?
        if let current = self.task {
          try decoder.handleConflictingOneOf()
          if case .pythonPackageSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.task = .pythonPackageSpec(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._machineSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.replicaCount != 0 {
      try visitor.visitSingularInt64Field(value: self.replicaCount, fieldNumber: 2)
    }
    if let v = self._diskSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.task {
    case .containerSpec?: try {
      guard case .containerSpec(let v)? = self.task else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .pythonPackageSpec?: try {
      guard case .pythonPackageSpec(let v)? = self.task else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec, rhs: Google_Cloud_Aiplatform_V1beta1_WorkerPoolSpec) -> Bool {
    if lhs.task != rhs.task {return false}
    if lhs._machineSpec != rhs._machineSpec {return false}
    if lhs.replicaCount != rhs.replicaCount {return false}
    if lhs._diskSpec != rhs._diskSpec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_ContainerSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContainerSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_uri"),
    2: .same(proto: "command"),
    3: .same(proto: "args"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.imageUri) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.command) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.imageUri, fieldNumber: 1)
    }
    if !self.command.isEmpty {
      try visitor.visitRepeatedStringField(value: self.command, fieldNumber: 2)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_ContainerSpec, rhs: Google_Cloud_Aiplatform_V1beta1_ContainerSpec) -> Bool {
    if lhs.imageUri != rhs.imageUri {return false}
    if lhs.command != rhs.command {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PythonPackageSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "executor_image_uri"),
    2: .standard(proto: "package_uris"),
    3: .standard(proto: "python_module"),
    4: .same(proto: "args"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.executorImageUri) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.packageUris) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pythonModule) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.executorImageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.executorImageUri, fieldNumber: 1)
    }
    if !self.packageUris.isEmpty {
      try visitor.visitRepeatedStringField(value: self.packageUris, fieldNumber: 2)
    }
    if !self.pythonModule.isEmpty {
      try visitor.visitSingularStringField(value: self.pythonModule, fieldNumber: 3)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec, rhs: Google_Cloud_Aiplatform_V1beta1_PythonPackageSpec) -> Bool {
    if lhs.executorImageUri != rhs.executorImageUri {return false}
    if lhs.packageUris != rhs.packageUris {return false}
    if lhs.pythonModule != rhs.pythonModule {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1beta1_Scheduling: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Scheduling"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeout"),
    3: .standard(proto: "restart_job_on_worker_restart"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeout) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.restartJobOnWorkerRestart) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.restartJobOnWorkerRestart != false {
      try visitor.visitSingularBoolField(value: self.restartJobOnWorkerRestart, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1beta1_Scheduling, rhs: Google_Cloud_Aiplatform_V1beta1_Scheduling) -> Bool {
    if lhs._timeout != rhs._timeout {return false}
    if lhs.restartJobOnWorkerRestart != rhs.restartJobOnWorkerRestart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
