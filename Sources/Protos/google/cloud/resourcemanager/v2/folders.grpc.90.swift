//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/resourcemanager/v2/folders.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Resourcemanager_V2_FoldersClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Resourcemanager_V2_FoldersClientProtocol: GRPCClient {
  func listFolders(
    _ request: Google_Cloud_Resourcemanager_V2_ListFoldersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_ListFoldersRequest, Google_Cloud_Resourcemanager_V2_ListFoldersResponse>

  func searchFolders(
    _ request: Google_Cloud_Resourcemanager_V2_SearchFoldersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_SearchFoldersRequest, Google_Cloud_Resourcemanager_V2_SearchFoldersResponse>

  func getFolder(
    _ request: Google_Cloud_Resourcemanager_V2_GetFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_GetFolderRequest, Google_Cloud_Resourcemanager_V2_Folder>

  func createFolder(
    _ request: Google_Cloud_Resourcemanager_V2_CreateFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_CreateFolderRequest, Google_Longrunning_Operation>

  func updateFolder(
    _ request: Google_Cloud_Resourcemanager_V2_UpdateFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_UpdateFolderRequest, Google_Cloud_Resourcemanager_V2_Folder>

  func moveFolder(
    _ request: Google_Cloud_Resourcemanager_V2_MoveFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_MoveFolderRequest, Google_Longrunning_Operation>

  func deleteFolder(
    _ request: Google_Cloud_Resourcemanager_V2_DeleteFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_DeleteFolderRequest, Google_Cloud_Resourcemanager_V2_Folder>

  func undeleteFolder(
    _ request: Google_Cloud_Resourcemanager_V2_UndeleteFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_UndeleteFolderRequest, Google_Cloud_Resourcemanager_V2_Folder>

  func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

}

extension Google_Cloud_Resourcemanager_V2_FoldersClientProtocol {

  /// Lists the Folders that are direct descendants of supplied parent resource.
  /// List provides a strongly consistent view of the Folders underneath
  /// the specified parent resource.
  /// List returns Folders sorted based upon the (ascending) lexical ordering
  /// of their display_name.
  /// The caller must have `resourcemanager.folders.list` permission on the
  /// identified parent.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFolders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listFolders(
    _ request: Google_Cloud_Resourcemanager_V2_ListFoldersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_ListFoldersRequest, Google_Cloud_Resourcemanager_V2_ListFoldersResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/ListFolders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Search for folders that match specific filter criteria.
  /// Search provides an eventually consistent view of the folders a user has
  /// access to which meet the specified filter criteria.
  ///
  /// This will only return folders on which the caller has the
  /// permission `resourcemanager.folders.get`.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchFolders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchFolders(
    _ request: Google_Cloud_Resourcemanager_V2_SearchFoldersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_SearchFoldersRequest, Google_Cloud_Resourcemanager_V2_SearchFoldersResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/SearchFolders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves a Folder identified by the supplied resource name.
  /// Valid Folder resource names have the format `folders/{folder_id}`
  /// (for example, `folders/1234`).
  /// The caller must have `resourcemanager.folders.get` permission on the
  /// identified folder.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFolder(
    _ request: Google_Cloud_Resourcemanager_V2_GetFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_GetFolderRequest, Google_Cloud_Resourcemanager_V2_Folder> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/GetFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a Folder in the resource hierarchy.
  /// Returns an Operation which can be used to track the progress of the
  /// folder creation workflow.
  /// Upon success the Operation.response field will be populated with the
  /// created Folder.
  ///
  /// In order to succeed, the addition of this new Folder must not violate
  /// the Folder naming, height or fanout constraints.
  ///
  /// + The Folder's display_name must be distinct from all other Folder's that
  /// share its parent.
  /// + The addition of the Folder must not cause the active Folder hierarchy
  /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
  /// is allowed to reach a height of 8; this provides additional headroom when
  /// moving folders that contain deleted folders.
  /// + The addition of the Folder must not cause the total number of Folders
  /// under its parent to exceed 100.
  ///
  /// If the operation fails due to a folder constraint violation, some errors
  /// may be returned by the CreateFolder request, with status code
  /// FAILED_PRECONDITION and an error description. Other folder constraint
  /// violations will be communicated in the Operation, with the specific
  /// PreconditionFailure returned via the details list in the Operation.error
  /// field.
  ///
  /// The caller must have `resourcemanager.folders.create` permission on the
  /// identified parent.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFolder(
    _ request: Google_Cloud_Resourcemanager_V2_CreateFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_CreateFolderRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/CreateFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a Folder, changing its display_name.
  /// Changes to the folder display_name will be rejected if they violate either
  /// the display_name formatting rules or naming constraints described in
  /// the [CreateFolder][google.cloud.resourcemanager.v2.Folders.CreateFolder] documentation.
  ///
  /// The Folder's display name must start and end with a letter or digit,
  /// may contain letters, digits, spaces, hyphens and underscores and can be
  /// no longer than 30 characters. This is captured by the regular expression:
  /// [\p{L}\p{N}]([\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
  /// The caller must have `resourcemanager.folders.update` permission on the
  /// identified folder.
  ///
  /// If the update fails due to the unique name constraint then a
  /// PreconditionFailure explaining this violation will be returned
  /// in the Status.details field.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFolder(
    _ request: Google_Cloud_Resourcemanager_V2_UpdateFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_UpdateFolderRequest, Google_Cloud_Resourcemanager_V2_Folder> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/UpdateFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Moves a Folder under a new resource parent.
  /// Returns an Operation which can be used to track the progress of the
  /// folder move workflow.
  /// Upon success the Operation.response field will be populated with the
  /// moved Folder.
  /// Upon failure, a FolderOperationError categorizing the failure cause will
  /// be returned - if the failure occurs synchronously then the
  /// FolderOperationError will be returned via the Status.details field
  /// and if it occurs asynchronously then the FolderOperation will be returned
  /// via the Operation.error field.
  /// In addition, the Operation.metadata field will be populated with a
  /// FolderOperation message as an aid to stateless clients.
  /// Folder moves will be rejected if they violate either the naming, height
  /// or fanout constraints described in the
  /// [CreateFolder][google.cloud.resourcemanager.v2.Folders.CreateFolder] documentation.
  /// The caller must have `resourcemanager.folders.move` permission on the
  /// folder's current and proposed new parent.
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moveFolder(
    _ request: Google_Cloud_Resourcemanager_V2_MoveFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_MoveFolderRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/MoveFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Requests deletion of a Folder. The Folder is moved into the
  /// [DELETE_REQUESTED][google.cloud.resourcemanager.v2.Folder.LifecycleState.DELETE_REQUESTED] state
  /// immediately, and is deleted approximately 30 days later. This method may
  /// only be called on an empty Folder in the
  /// [ACTIVE][google.cloud.resourcemanager.v2.Folder.LifecycleState.ACTIVE] state, where a Folder is empty if
  /// it doesn't contain any Folders or Projects in the
  /// [ACTIVE][google.cloud.resourcemanager.v2.Folder.LifecycleState.ACTIVE] state.
  /// The caller must have `resourcemanager.folders.delete` permission on the
  /// identified folder.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFolder(
    _ request: Google_Cloud_Resourcemanager_V2_DeleteFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_DeleteFolderRequest, Google_Cloud_Resourcemanager_V2_Folder> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/DeleteFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Cancels the deletion request for a Folder. This method may only be
  /// called on a Folder in the
  /// [DELETE_REQUESTED][google.cloud.resourcemanager.v2.Folder.LifecycleState.DELETE_REQUESTED] state.
  /// In order to succeed, the Folder's parent must be in the
  /// [ACTIVE][google.cloud.resourcemanager.v2.Folder.LifecycleState.ACTIVE] state.
  /// In addition, reintroducing the folder into the tree must not violate
  /// folder naming, height and fanout constraints described in the
  /// [CreateFolder][google.cloud.resourcemanager.v2.Folders.CreateFolder] documentation.
  /// The caller must have `resourcemanager.folders.undelete` permission on the
  /// identified folder.
  ///
  /// - Parameters:
  ///   - request: Request to send to UndeleteFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func undeleteFolder(
    _ request: Google_Cloud_Resourcemanager_V2_UndeleteFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Resourcemanager_V2_UndeleteFolderRequest, Google_Cloud_Resourcemanager_V2_Folder> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/UndeleteFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the access control policy for a Folder. The returned policy may be
  /// empty if no such policy or resource exists. The `resource` field should
  /// be the Folder's resource name, e.g. "folders/1234".
  /// The caller must have `resourcemanager.folders.getIamPolicy` permission
  /// on the identified folder.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/GetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the access control policy on a Folder, replacing any existing policy.
  /// The `resource` field should be the Folder's resource name, e.g.
  /// "folders/1234".
  /// The caller must have `resourcemanager.folders.setIamPolicy` permission
  /// on the identified folder.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/SetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns permissions that a caller has on the specified Folder.
  /// The `resource` field should be the Folder's resource name,
  /// e.g. "folders/1234".
  ///
  /// There are no permissions required for making this API call.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.resourcemanager.v2.Folders/TestIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Resourcemanager_V2_FoldersClient: Google_Cloud_Resourcemanager_V2_FoldersClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.resourcemanager.v2.Folders service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Resourcemanager_V2_FoldersProvider: CallHandlerProvider {
  /// Lists the Folders that are direct descendants of supplied parent resource.
  /// List provides a strongly consistent view of the Folders underneath
  /// the specified parent resource.
  /// List returns Folders sorted based upon the (ascending) lexical ordering
  /// of their display_name.
  /// The caller must have `resourcemanager.folders.list` permission on the
  /// identified parent.
  func listFolders(request: Google_Cloud_Resourcemanager_V2_ListFoldersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Resourcemanager_V2_ListFoldersResponse>
  /// Search for folders that match specific filter criteria.
  /// Search provides an eventually consistent view of the folders a user has
  /// access to which meet the specified filter criteria.
  ///
  /// This will only return folders on which the caller has the
  /// permission `resourcemanager.folders.get`.
  func searchFolders(request: Google_Cloud_Resourcemanager_V2_SearchFoldersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Resourcemanager_V2_SearchFoldersResponse>
  /// Retrieves a Folder identified by the supplied resource name.
  /// Valid Folder resource names have the format `folders/{folder_id}`
  /// (for example, `folders/1234`).
  /// The caller must have `resourcemanager.folders.get` permission on the
  /// identified folder.
  func getFolder(request: Google_Cloud_Resourcemanager_V2_GetFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Resourcemanager_V2_Folder>
  /// Creates a Folder in the resource hierarchy.
  /// Returns an Operation which can be used to track the progress of the
  /// folder creation workflow.
  /// Upon success the Operation.response field will be populated with the
  /// created Folder.
  ///
  /// In order to succeed, the addition of this new Folder must not violate
  /// the Folder naming, height or fanout constraints.
  ///
  /// + The Folder's display_name must be distinct from all other Folder's that
  /// share its parent.
  /// + The addition of the Folder must not cause the active Folder hierarchy
  /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
  /// is allowed to reach a height of 8; this provides additional headroom when
  /// moving folders that contain deleted folders.
  /// + The addition of the Folder must not cause the total number of Folders
  /// under its parent to exceed 100.
  ///
  /// If the operation fails due to a folder constraint violation, some errors
  /// may be returned by the CreateFolder request, with status code
  /// FAILED_PRECONDITION and an error description. Other folder constraint
  /// violations will be communicated in the Operation, with the specific
  /// PreconditionFailure returned via the details list in the Operation.error
  /// field.
  ///
  /// The caller must have `resourcemanager.folders.create` permission on the
  /// identified parent.
  func createFolder(request: Google_Cloud_Resourcemanager_V2_CreateFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates a Folder, changing its display_name.
  /// Changes to the folder display_name will be rejected if they violate either
  /// the display_name formatting rules or naming constraints described in
  /// the [CreateFolder][google.cloud.resourcemanager.v2.Folders.CreateFolder] documentation.
  ///
  /// The Folder's display name must start and end with a letter or digit,
  /// may contain letters, digits, spaces, hyphens and underscores and can be
  /// no longer than 30 characters. This is captured by the regular expression:
  /// [\p{L}\p{N}]([\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
  /// The caller must have `resourcemanager.folders.update` permission on the
  /// identified folder.
  ///
  /// If the update fails due to the unique name constraint then a
  /// PreconditionFailure explaining this violation will be returned
  /// in the Status.details field.
  func updateFolder(request: Google_Cloud_Resourcemanager_V2_UpdateFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Resourcemanager_V2_Folder>
  /// Moves a Folder under a new resource parent.
  /// Returns an Operation which can be used to track the progress of the
  /// folder move workflow.
  /// Upon success the Operation.response field will be populated with the
  /// moved Folder.
  /// Upon failure, a FolderOperationError categorizing the failure cause will
  /// be returned - if the failure occurs synchronously then the
  /// FolderOperationError will be returned via the Status.details field
  /// and if it occurs asynchronously then the FolderOperation will be returned
  /// via the Operation.error field.
  /// In addition, the Operation.metadata field will be populated with a
  /// FolderOperation message as an aid to stateless clients.
  /// Folder moves will be rejected if they violate either the naming, height
  /// or fanout constraints described in the
  /// [CreateFolder][google.cloud.resourcemanager.v2.Folders.CreateFolder] documentation.
  /// The caller must have `resourcemanager.folders.move` permission on the
  /// folder's current and proposed new parent.
  func moveFolder(request: Google_Cloud_Resourcemanager_V2_MoveFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Requests deletion of a Folder. The Folder is moved into the
  /// [DELETE_REQUESTED][google.cloud.resourcemanager.v2.Folder.LifecycleState.DELETE_REQUESTED] state
  /// immediately, and is deleted approximately 30 days later. This method may
  /// only be called on an empty Folder in the
  /// [ACTIVE][google.cloud.resourcemanager.v2.Folder.LifecycleState.ACTIVE] state, where a Folder is empty if
  /// it doesn't contain any Folders or Projects in the
  /// [ACTIVE][google.cloud.resourcemanager.v2.Folder.LifecycleState.ACTIVE] state.
  /// The caller must have `resourcemanager.folders.delete` permission on the
  /// identified folder.
  func deleteFolder(request: Google_Cloud_Resourcemanager_V2_DeleteFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Resourcemanager_V2_Folder>
  /// Cancels the deletion request for a Folder. This method may only be
  /// called on a Folder in the
  /// [DELETE_REQUESTED][google.cloud.resourcemanager.v2.Folder.LifecycleState.DELETE_REQUESTED] state.
  /// In order to succeed, the Folder's parent must be in the
  /// [ACTIVE][google.cloud.resourcemanager.v2.Folder.LifecycleState.ACTIVE] state.
  /// In addition, reintroducing the folder into the tree must not violate
  /// folder naming, height and fanout constraints described in the
  /// [CreateFolder][google.cloud.resourcemanager.v2.Folders.CreateFolder] documentation.
  /// The caller must have `resourcemanager.folders.undelete` permission on the
  /// identified folder.
  func undeleteFolder(request: Google_Cloud_Resourcemanager_V2_UndeleteFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Resourcemanager_V2_Folder>
  /// Gets the access control policy for a Folder. The returned policy may be
  /// empty if no such policy or resource exists. The `resource` field should
  /// be the Folder's resource name, e.g. "folders/1234".
  /// The caller must have `resourcemanager.folders.getIamPolicy` permission
  /// on the identified folder.
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Sets the access control policy on a Folder, replacing any existing policy.
  /// The `resource` field should be the Folder's resource name, e.g.
  /// "folders/1234".
  /// The caller must have `resourcemanager.folders.setIamPolicy` permission
  /// on the identified folder.
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Returns permissions that a caller has on the specified Folder.
  /// The `resource` field should be the Folder's resource name,
  /// e.g. "folders/1234".
  ///
  /// There are no permissions required for making this API call.
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
}

extension Google_Cloud_Resourcemanager_V2_FoldersProvider {
  public var serviceName: Substring { return "google.cloud.resourcemanager.v2.Folders" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListFolders":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listFolders(request: request, context: context)
        }
      }

    case "SearchFolders":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchFolders(request: request, context: context)
        }
      }

    case "GetFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFolder(request: request, context: context)
        }
      }

    case "CreateFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createFolder(request: request, context: context)
        }
      }

    case "UpdateFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateFolder(request: request, context: context)
        }
      }

    case "MoveFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.moveFolder(request: request, context: context)
        }
      }

    case "DeleteFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteFolder(request: request, context: context)
        }
      }

    case "UndeleteFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.undeleteFolder(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "SetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

