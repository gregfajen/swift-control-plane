//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/vision/v1p4beta1/product_search_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Vision_V1p4beta1_ProductSearchClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Vision_V1p4beta1_ProductSearchClientProtocol: GRPCClient {
  func createProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_CreateProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_CreateProductSetRequest, Google_Cloud_Vision_V1p4beta1_ProductSet>

  func listProductSets(
    _ request: Google_Cloud_Vision_V1p4beta1_ListProductSetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListProductSetsRequest, Google_Cloud_Vision_V1p4beta1_ListProductSetsResponse>

  func getProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_GetProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_GetProductSetRequest, Google_Cloud_Vision_V1p4beta1_ProductSet>

  func updateProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_UpdateProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_UpdateProductSetRequest, Google_Cloud_Vision_V1p4beta1_ProductSet>

  func deleteProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_DeleteProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_DeleteProductSetRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_CreateProductRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_CreateProductRequest, Google_Cloud_Vision_V1p4beta1_Product>

  func listProducts(
    _ request: Google_Cloud_Vision_V1p4beta1_ListProductsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListProductsRequest, Google_Cloud_Vision_V1p4beta1_ListProductsResponse>

  func getProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_GetProductRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_GetProductRequest, Google_Cloud_Vision_V1p4beta1_Product>

  func updateProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_UpdateProductRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_UpdateProductRequest, Google_Cloud_Vision_V1p4beta1_Product>

  func deleteProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_DeleteProductRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_DeleteProductRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createReferenceImage(
    _ request: Google_Cloud_Vision_V1p4beta1_CreateReferenceImageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_CreateReferenceImageRequest, Google_Cloud_Vision_V1p4beta1_ReferenceImage>

  func deleteReferenceImage(
    _ request: Google_Cloud_Vision_V1p4beta1_DeleteReferenceImageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_DeleteReferenceImageRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listReferenceImages(
    _ request: Google_Cloud_Vision_V1p4beta1_ListReferenceImagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListReferenceImagesRequest, Google_Cloud_Vision_V1p4beta1_ListReferenceImagesResponse>

  func getReferenceImage(
    _ request: Google_Cloud_Vision_V1p4beta1_GetReferenceImageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_GetReferenceImageRequest, Google_Cloud_Vision_V1p4beta1_ReferenceImage>

  func addProductToProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_AddProductToProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_AddProductToProductSetRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func removeProductFromProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_RemoveProductFromProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_RemoveProductFromProductSetRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listProductsInProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetRequest, Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetResponse>

  func importProductSets(
    _ request: Google_Cloud_Vision_V1p4beta1_ImportProductSetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ImportProductSetsRequest, Google_Longrunning_Operation>

  func purgeProducts(
    _ request: Google_Cloud_Vision_V1p4beta1_PurgeProductsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_PurgeProductsRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Vision_V1p4beta1_ProductSearchClientProtocol {

  /// Creates and returns a new ProductSet resource.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if display_name is missing, or is longer than
  ///   4096 characters.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_CreateProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_CreateProductSetRequest, Google_Cloud_Vision_V1p4beta1_ProductSet> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/CreateProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists ProductSets in an unspecified order.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if page_size is greater than 100, or less
  ///   than 1.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProductSets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listProductSets(
    _ request: Google_Cloud_Vision_V1p4beta1_ListProductSetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListProductSetsRequest, Google_Cloud_Vision_V1p4beta1_ListProductSetsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/ListProductSets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets information associated with a ProductSet.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the ProductSet does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_GetProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_GetProductSetRequest, Google_Cloud_Vision_V1p4beta1_ProductSet> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/GetProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Makes changes to a ProductSet resource.
  /// Only display_name can be updated currently.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the ProductSet does not exist.
  /// * Returns INVALID_ARGUMENT if display_name is present in update_mask but
  ///   missing from the request or longer than 4096 characters.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_UpdateProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_UpdateProductSetRequest, Google_Cloud_Vision_V1p4beta1_ProductSet> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/UpdateProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes a ProductSet. Products and ReferenceImages in the
  /// ProductSet are not deleted.
  ///
  /// The actual image files are not deleted from Google Cloud Storage.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_DeleteProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_DeleteProductSetRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/DeleteProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates and returns a new product resource.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096
  ///   characters.
  /// * Returns INVALID_ARGUMENT if description is longer than 4096 characters.
  /// * Returns INVALID_ARGUMENT if product_category is missing or invalid.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProduct.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_CreateProductRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_CreateProductRequest, Google_Cloud_Vision_V1p4beta1_Product> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/CreateProduct",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists products in an unspecified order.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProducts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listProducts(
    _ request: Google_Cloud_Vision_V1p4beta1_ListProductsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListProductsRequest, Google_Cloud_Vision_V1p4beta1_ListProductsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/ListProducts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets information associated with a Product.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the Product does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProduct.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_GetProductRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_GetProductRequest, Google_Cloud_Vision_V1p4beta1_Product> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/GetProduct",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Makes changes to a Product resource.
  /// Only the `display_name`, `description`, and `labels` fields can be updated
  /// right now.
  ///
  /// If labels are updated, the change will not be reflected in queries until
  /// the next index time.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the Product does not exist.
  /// * Returns INVALID_ARGUMENT if display_name is present in update_mask but is
  ///   missing from the request or longer than 4096 characters.
  /// * Returns INVALID_ARGUMENT if description is present in update_mask but is
  ///   longer than 4096 characters.
  /// * Returns INVALID_ARGUMENT if product_category is present in update_mask.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProduct.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_UpdateProductRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_UpdateProductRequest, Google_Cloud_Vision_V1p4beta1_Product> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/UpdateProduct",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes a product and its reference images.
  ///
  /// Metadata of the product and all its images will be deleted right away, but
  /// search queries against ProductSets containing the product may still work
  /// until all related caches are refreshed.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteProduct.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteProduct(
    _ request: Google_Cloud_Vision_V1p4beta1_DeleteProductRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_DeleteProductRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/DeleteProduct",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates and returns a new ReferenceImage resource.
  ///
  /// The `bounding_poly` field is optional. If `bounding_poly` is not specified,
  /// the system will try to detect regions of interest in the image that are
  /// compatible with the product_category on the parent product. If it is
  /// specified, detection is ALWAYS skipped. The system converts polygons into
  /// non-rotated rectangles.
  ///
  /// Note that the pipeline will resize the image if the image resolution is too
  /// large to process (above 50MP).
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096
  ///   characters.
  /// * Returns INVALID_ARGUMENT if the product does not exist.
  /// * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing
  ///   compatible with the parent product's product_category is detected.
  /// * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateReferenceImage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createReferenceImage(
    _ request: Google_Cloud_Vision_V1p4beta1_CreateReferenceImageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_CreateReferenceImageRequest, Google_Cloud_Vision_V1p4beta1_ReferenceImage> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/CreateReferenceImage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes a reference image.
  ///
  /// The image metadata will be deleted right away, but search queries
  /// against ProductSets containing the image may still work until all related
  /// caches are refreshed.
  ///
  /// The actual image files are not deleted from Google Cloud Storage.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteReferenceImage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteReferenceImage(
    _ request: Google_Cloud_Vision_V1p4beta1_DeleteReferenceImageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_DeleteReferenceImageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/DeleteReferenceImage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists reference images.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the parent product does not exist.
  /// * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less
  ///   than 1.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListReferenceImages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listReferenceImages(
    _ request: Google_Cloud_Vision_V1p4beta1_ListReferenceImagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListReferenceImagesRequest, Google_Cloud_Vision_V1p4beta1_ListReferenceImagesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/ListReferenceImages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets information associated with a ReferenceImage.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the specified image does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReferenceImage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getReferenceImage(
    _ request: Google_Cloud_Vision_V1p4beta1_GetReferenceImageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_GetReferenceImageRequest, Google_Cloud_Vision_V1p4beta1_ReferenceImage> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/GetReferenceImage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Adds a Product to the specified ProductSet. If the Product is already
  /// present, no change is made.
  ///
  /// One Product can be added to at most 100 ProductSets.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddProductToProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addProductToProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_AddProductToProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_AddProductToProductSetRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/AddProductToProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Removes a Product from the specified ProductSet.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveProductFromProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeProductFromProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_RemoveProductFromProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_RemoveProductFromProductSetRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/RemoveProductFromProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the Products in a ProductSet, in an unspecified order. If the
  /// ProductSet does not exist, the products field of the response will be
  /// empty.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProductsInProductSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listProductsInProductSet(
    _ request: Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetRequest, Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/ListProductsInProductSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Asynchronous API that imports a list of reference images to specified
  /// product sets based on a list of image information.
  ///
  /// The [google.longrunning.Operation][google.longrunning.Operation] API can be
  /// used to keep track of the progress and results of the request.
  /// `Operation.metadata` contains `BatchOperationMetadata`. (progress)
  /// `Operation.response` contains `ImportProductSetsResponse`. (results)
  ///
  /// The input source of this method is a csv file on Google Cloud Storage.
  /// For the format of the csv file please see
  /// [ImportProductSetsGcsSource.csv_file_uri][google.cloud.vision.v1p4beta1.ImportProductSetsGcsSource.csv_file_uri].
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportProductSets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func importProductSets(
    _ request: Google_Cloud_Vision_V1p4beta1_ImportProductSetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_ImportProductSetsRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/ImportProductSets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Asynchronous API to delete all Products in a ProductSet or all Products
  /// that are in no ProductSet.
  ///
  /// If a Product is a member of the specified ProductSet in addition to other
  /// ProductSets, the Product will still be deleted.
  ///
  /// It is recommended to not delete the specified ProductSet until after this
  /// operation has completed. It is also recommended to not add any of the
  /// Products involved in the batch delete to a new ProductSet while this
  /// operation is running because those Products may still end up deleted.
  ///
  /// It's not possible to undo the PurgeProducts operation. Therefore, it is
  /// recommended to keep the csv files used in ImportProductSets (if that was
  /// how you originally built the Product Set) before starting PurgeProducts, in
  /// case you need to re-import the data after deletion.
  ///
  /// If the plan is to purge all of the Products from a ProductSet and then
  /// re-use the empty ProductSet to re-import new Products into the empty
  /// ProductSet, you must wait until the PurgeProducts operation has finished
  /// for that ProductSet.
  ///
  /// The [google.longrunning.Operation][google.longrunning.Operation] API can be
  /// used to keep track of the progress and results of the request.
  /// `Operation.metadata` contains `BatchOperationMetadata`. (progress)
  ///
  /// - Parameters:
  ///   - request: Request to send to PurgeProducts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func purgeProducts(
    _ request: Google_Cloud_Vision_V1p4beta1_PurgeProductsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Vision_V1p4beta1_PurgeProductsRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.vision.v1p4beta1.ProductSearch/PurgeProducts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Vision_V1p4beta1_ProductSearchClient: Google_Cloud_Vision_V1p4beta1_ProductSearchClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.vision.v1p4beta1.ProductSearch service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Vision_V1p4beta1_ProductSearchProvider: CallHandlerProvider {
  /// Creates and returns a new ProductSet resource.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if display_name is missing, or is longer than
  ///   4096 characters.
  func createProductSet(request: Google_Cloud_Vision_V1p4beta1_CreateProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ProductSet>
  /// Lists ProductSets in an unspecified order.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if page_size is greater than 100, or less
  ///   than 1.
  func listProductSets(request: Google_Cloud_Vision_V1p4beta1_ListProductSetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ListProductSetsResponse>
  /// Gets information associated with a ProductSet.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the ProductSet does not exist.
  func getProductSet(request: Google_Cloud_Vision_V1p4beta1_GetProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ProductSet>
  /// Makes changes to a ProductSet resource.
  /// Only display_name can be updated currently.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the ProductSet does not exist.
  /// * Returns INVALID_ARGUMENT if display_name is present in update_mask but
  ///   missing from the request or longer than 4096 characters.
  func updateProductSet(request: Google_Cloud_Vision_V1p4beta1_UpdateProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ProductSet>
  /// Permanently deletes a ProductSet. Products and ReferenceImages in the
  /// ProductSet are not deleted.
  ///
  /// The actual image files are not deleted from Google Cloud Storage.
  func deleteProductSet(request: Google_Cloud_Vision_V1p4beta1_DeleteProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Creates and returns a new product resource.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096
  ///   characters.
  /// * Returns INVALID_ARGUMENT if description is longer than 4096 characters.
  /// * Returns INVALID_ARGUMENT if product_category is missing or invalid.
  func createProduct(request: Google_Cloud_Vision_V1p4beta1_CreateProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_Product>
  /// Lists products in an unspecified order.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
  func listProducts(request: Google_Cloud_Vision_V1p4beta1_ListProductsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ListProductsResponse>
  /// Gets information associated with a Product.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the Product does not exist.
  func getProduct(request: Google_Cloud_Vision_V1p4beta1_GetProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_Product>
  /// Makes changes to a Product resource.
  /// Only the `display_name`, `description`, and `labels` fields can be updated
  /// right now.
  ///
  /// If labels are updated, the change will not be reflected in queries until
  /// the next index time.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the Product does not exist.
  /// * Returns INVALID_ARGUMENT if display_name is present in update_mask but is
  ///   missing from the request or longer than 4096 characters.
  /// * Returns INVALID_ARGUMENT if description is present in update_mask but is
  ///   longer than 4096 characters.
  /// * Returns INVALID_ARGUMENT if product_category is present in update_mask.
  func updateProduct(request: Google_Cloud_Vision_V1p4beta1_UpdateProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_Product>
  /// Permanently deletes a product and its reference images.
  ///
  /// Metadata of the product and all its images will be deleted right away, but
  /// search queries against ProductSets containing the product may still work
  /// until all related caches are refreshed.
  func deleteProduct(request: Google_Cloud_Vision_V1p4beta1_DeleteProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Creates and returns a new ReferenceImage resource.
  ///
  /// The `bounding_poly` field is optional. If `bounding_poly` is not specified,
  /// the system will try to detect regions of interest in the image that are
  /// compatible with the product_category on the parent product. If it is
  /// specified, detection is ALWAYS skipped. The system converts polygons into
  /// non-rotated rectangles.
  ///
  /// Note that the pipeline will resize the image if the image resolution is too
  /// large to process (above 50MP).
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096
  ///   characters.
  /// * Returns INVALID_ARGUMENT if the product does not exist.
  /// * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing
  ///   compatible with the parent product's product_category is detected.
  /// * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
  func createReferenceImage(request: Google_Cloud_Vision_V1p4beta1_CreateReferenceImageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ReferenceImage>
  /// Permanently deletes a reference image.
  ///
  /// The image metadata will be deleted right away, but search queries
  /// against ProductSets containing the image may still work until all related
  /// caches are refreshed.
  ///
  /// The actual image files are not deleted from Google Cloud Storage.
  func deleteReferenceImage(request: Google_Cloud_Vision_V1p4beta1_DeleteReferenceImageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Lists reference images.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the parent product does not exist.
  /// * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less
  ///   than 1.
  func listReferenceImages(request: Google_Cloud_Vision_V1p4beta1_ListReferenceImagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ListReferenceImagesResponse>
  /// Gets information associated with a ReferenceImage.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the specified image does not exist.
  func getReferenceImage(request: Google_Cloud_Vision_V1p4beta1_GetReferenceImageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ReferenceImage>
  /// Adds a Product to the specified ProductSet. If the Product is already
  /// present, no change is made.
  ///
  /// One Product can be added to at most 100 ProductSets.
  ///
  /// Possible errors:
  ///
  /// * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.
  func addProductToProductSet(request: Google_Cloud_Vision_V1p4beta1_AddProductToProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Removes a Product from the specified ProductSet.
  func removeProductFromProductSet(request: Google_Cloud_Vision_V1p4beta1_RemoveProductFromProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Lists the Products in a ProductSet, in an unspecified order. If the
  /// ProductSet does not exist, the products field of the response will be
  /// empty.
  ///
  /// Possible errors:
  ///
  /// * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
  func listProductsInProductSet(request: Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Vision_V1p4beta1_ListProductsInProductSetResponse>
  /// Asynchronous API that imports a list of reference images to specified
  /// product sets based on a list of image information.
  ///
  /// The [google.longrunning.Operation][google.longrunning.Operation] API can be
  /// used to keep track of the progress and results of the request.
  /// `Operation.metadata` contains `BatchOperationMetadata`. (progress)
  /// `Operation.response` contains `ImportProductSetsResponse`. (results)
  ///
  /// The input source of this method is a csv file on Google Cloud Storage.
  /// For the format of the csv file please see
  /// [ImportProductSetsGcsSource.csv_file_uri][google.cloud.vision.v1p4beta1.ImportProductSetsGcsSource.csv_file_uri].
  func importProductSets(request: Google_Cloud_Vision_V1p4beta1_ImportProductSetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Asynchronous API to delete all Products in a ProductSet or all Products
  /// that are in no ProductSet.
  ///
  /// If a Product is a member of the specified ProductSet in addition to other
  /// ProductSets, the Product will still be deleted.
  ///
  /// It is recommended to not delete the specified ProductSet until after this
  /// operation has completed. It is also recommended to not add any of the
  /// Products involved in the batch delete to a new ProductSet while this
  /// operation is running because those Products may still end up deleted.
  ///
  /// It's not possible to undo the PurgeProducts operation. Therefore, it is
  /// recommended to keep the csv files used in ImportProductSets (if that was
  /// how you originally built the Product Set) before starting PurgeProducts, in
  /// case you need to re-import the data after deletion.
  ///
  /// If the plan is to purge all of the Products from a ProductSet and then
  /// re-use the empty ProductSet to re-import new Products into the empty
  /// ProductSet, you must wait until the PurgeProducts operation has finished
  /// for that ProductSet.
  ///
  /// The [google.longrunning.Operation][google.longrunning.Operation] API can be
  /// used to keep track of the progress and results of the request.
  /// `Operation.metadata` contains `BatchOperationMetadata`. (progress)
  func purgeProducts(request: Google_Cloud_Vision_V1p4beta1_PurgeProductsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Vision_V1p4beta1_ProductSearchProvider {
  public var serviceName: Substring { return "google.cloud.vision.v1p4beta1.ProductSearch" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createProductSet(request: request, context: context)
        }
      }

    case "ListProductSets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listProductSets(request: request, context: context)
        }
      }

    case "GetProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getProductSet(request: request, context: context)
        }
      }

    case "UpdateProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateProductSet(request: request, context: context)
        }
      }

    case "DeleteProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteProductSet(request: request, context: context)
        }
      }

    case "CreateProduct":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createProduct(request: request, context: context)
        }
      }

    case "ListProducts":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listProducts(request: request, context: context)
        }
      }

    case "GetProduct":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getProduct(request: request, context: context)
        }
      }

    case "UpdateProduct":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateProduct(request: request, context: context)
        }
      }

    case "DeleteProduct":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteProduct(request: request, context: context)
        }
      }

    case "CreateReferenceImage":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createReferenceImage(request: request, context: context)
        }
      }

    case "DeleteReferenceImage":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteReferenceImage(request: request, context: context)
        }
      }

    case "ListReferenceImages":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listReferenceImages(request: request, context: context)
        }
      }

    case "GetReferenceImage":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getReferenceImage(request: request, context: context)
        }
      }

    case "AddProductToProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addProductToProductSet(request: request, context: context)
        }
      }

    case "RemoveProductFromProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.removeProductFromProductSet(request: request, context: context)
        }
      }

    case "ListProductsInProductSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listProductsInProductSet(request: request, context: context)
        }
      }

    case "ImportProductSets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.importProductSets(request: request, context: context)
        }
      }

    case "PurgeProducts":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.purgeProducts(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

