// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/vision/v1p3beta1/product_search.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Supported product search categories.
public enum Google_Cloud_Vision_V1p3beta1_ProductSearchCategory: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value used when a category is not specified.
  case unspecified // = 0

  /// Shoes category.
  case shoes // = 1

  /// Bags category.
  case bags // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .shoes
    case 2: self = .bags
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .shoes: return 1
    case .bags: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Vision_V1p3beta1_ProductSearchCategory: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Vision_V1p3beta1_ProductSearchCategory] = [
    .unspecified,
    .shoes,
    .bags,
  ]
}

#endif  // swift(>=4.2)

/// Specifies the fields to include in product search results.
public enum Google_Cloud_Vision_V1p3beta1_ProductSearchResultsView: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Product search results contain only `product_category` and `product_id`.
  /// Default value.
  case basic // = 0

  /// Product search results contain `product_category`, `product_id`,
  /// `image_uri`, and `score`.
  case full // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .basic
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .basic
    case 1: self = .full
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .basic: return 0
    case .full: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Vision_V1p3beta1_ProductSearchResultsView: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Vision_V1p3beta1_ProductSearchResultsView] = [
    .basic,
    .full,
  ]
}

#endif  // swift(>=4.2)

/// Parameters for a product search request.
public struct Google_Cloud_Vision_V1p3beta1_ProductSearchParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the catalog to search.
  ///
  /// Format is: `productSearch/catalogs/CATALOG_NAME`.
  public var catalogName: String = String()

  /// The category to search in.
  /// Optional. It is inferred by the system if it is not specified.
  /// [Deprecated] Use `product_category`.
  public var category: Google_Cloud_Vision_V1p3beta1_ProductSearchCategory = .unspecified

  /// The product category to search in.
  /// Optional. It is inferred by the system if it is not specified.
  /// Supported values are `bag`, `shoe`, `sunglasses`, `dress`, `outerwear`,
  /// `skirt`, `top`, `shorts`, and `pants`.
  public var productCategory: String = String()

  /// The bounding polygon around the area of interest in the image.
  /// Optional. If it is not specified, system discretion will be applied.
  /// [Deprecated] Use `bounding_poly`.
  public var normalizedBoundingPoly: Google_Cloud_Vision_V1p3beta1_NormalizedBoundingPoly {
    get {return _normalizedBoundingPoly ?? Google_Cloud_Vision_V1p3beta1_NormalizedBoundingPoly()}
    set {_normalizedBoundingPoly = newValue}
  }
  /// Returns true if `normalizedBoundingPoly` has been explicitly set.
  public var hasNormalizedBoundingPoly: Bool {return self._normalizedBoundingPoly != nil}
  /// Clears the value of `normalizedBoundingPoly`. Subsequent reads from it will return its default value.
  public mutating func clearNormalizedBoundingPoly() {self._normalizedBoundingPoly = nil}

  /// The bounding polygon around the area of interest in the image.
  /// Optional. If it is not specified, system discretion will be applied.
  public var boundingPoly: Google_Cloud_Vision_V1p3beta1_BoundingPoly {
    get {return _boundingPoly ?? Google_Cloud_Vision_V1p3beta1_BoundingPoly()}
    set {_boundingPoly = newValue}
  }
  /// Returns true if `boundingPoly` has been explicitly set.
  public var hasBoundingPoly: Bool {return self._boundingPoly != nil}
  /// Clears the value of `boundingPoly`. Subsequent reads from it will return its default value.
  public mutating func clearBoundingPoly() {self._boundingPoly = nil}

  /// Specifies the verbosity of the  product search results.
  /// Optional. Defaults to `BASIC`.
  public var view: Google_Cloud_Vision_V1p3beta1_ProductSearchResultsView = .basic

  /// The resource name of a
  /// [ProductSet][google.cloud.vision.v1p3beta1.ProductSet] to be searched for
  /// similar images.
  ///
  /// Format is:
  /// `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
  public var productSet: String = String()

  /// The list of product categories to search in. Currently, we only consider
  /// the first category, and either "homegoods" or "apparel" should be
  /// specified.
  public var productCategories: [String] = []

  /// The filtering expression. This can be used to restrict search results based
  /// on Product labels. We currently support an AND of OR of key-value
  /// expressions, where each expression within an OR must have the same key.
  ///
  /// For example, "(color = red OR color = blue) AND brand = Google" is
  /// acceptable, but not "(color = red OR brand = Google)" or "color: red".
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _normalizedBoundingPoly: Google_Cloud_Vision_V1p3beta1_NormalizedBoundingPoly? = nil
  fileprivate var _boundingPoly: Google_Cloud_Vision_V1p3beta1_BoundingPoly? = nil
}

/// Results for a product search request.
public struct Google_Cloud_Vision_V1p3beta1_ProductSearchResults {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Product category.
  /// [Deprecated] Use `product_category`.
  public var category: Google_Cloud_Vision_V1p3beta1_ProductSearchCategory = .unspecified

  /// Product category.
  /// Supported values are `bag` and `shoe`.
  /// [Deprecated] `product_category` is provided in each Product.
  public var productCategory: String = String()

  /// Timestamp of the index which provided these results. Changes made after
  /// this time are not reflected in the current results.
  public var indexTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _indexTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_indexTime = newValue}
  }
  /// Returns true if `indexTime` has been explicitly set.
  public var hasIndexTime: Bool {return self._indexTime != nil}
  /// Clears the value of `indexTime`. Subsequent reads from it will return its default value.
  public mutating func clearIndexTime() {self._indexTime = nil}

  /// List of detected products.
  public var products: [Google_Cloud_Vision_V1p3beta1_ProductSearchResults.ProductInfo] = []

  /// List of results, one for each product match.
  public var results: [Google_Cloud_Vision_V1p3beta1_ProductSearchResults.Result] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Information about a product.
  public struct ProductInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Product ID.
    public var productID: String = String()

    /// The URI of the image which matched the query image.
    ///
    /// This field is returned only if `view` is set to `FULL` in
    /// the request.
    public var imageUri: String = String()

    /// A confidence level on the match, ranging from 0 (no confidence) to
    /// 1 (full confidence).
    ///
    /// This field is returned only if `view` is set to `FULL` in
    /// the request.
    public var score: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Information about a product.
  public struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The Product.
    public var product: Google_Cloud_Vision_V1p3beta1_Product {
      get {return _product ?? Google_Cloud_Vision_V1p3beta1_Product()}
      set {_product = newValue}
    }
    /// Returns true if `product` has been explicitly set.
    public var hasProduct: Bool {return self._product != nil}
    /// Clears the value of `product`. Subsequent reads from it will return its default value.
    public mutating func clearProduct() {self._product = nil}

    /// A confidence level on the match, ranging from 0 (no confidence) to
    /// 1 (full confidence).
    ///
    /// This field is returned only if `view` is set to `FULL` in
    /// the request.
    public var score: Float = 0

    /// The resource name of the image from the product that is the closest match
    /// to the query.
    public var image: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _product: Google_Cloud_Vision_V1p3beta1_Product? = nil
  }

  public init() {}

  fileprivate var _indexTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.vision.v1p3beta1"

extension Google_Cloud_Vision_V1p3beta1_ProductSearchCategory: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRODUCT_SEARCH_CATEGORY_UNSPECIFIED"),
    1: .same(proto: "SHOES"),
    2: .same(proto: "BAGS"),
  ]
}

extension Google_Cloud_Vision_V1p3beta1_ProductSearchResultsView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BASIC"),
    1: .same(proto: "FULL"),
  ]
}

extension Google_Cloud_Vision_V1p3beta1_ProductSearchParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductSearchParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "catalog_name"),
    2: .same(proto: "category"),
    5: .standard(proto: "product_category"),
    3: .standard(proto: "normalized_bounding_poly"),
    9: .standard(proto: "bounding_poly"),
    4: .same(proto: "view"),
    6: .standard(proto: "product_set"),
    7: .standard(proto: "product_categories"),
    8: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.catalogName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.category) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._normalizedBoundingPoly) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.view) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.productCategory) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.productSet) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.productCategories) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._boundingPoly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.catalogName.isEmpty {
      try visitor.visitSingularStringField(value: self.catalogName, fieldNumber: 1)
    }
    if self.category != .unspecified {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if let v = self._normalizedBoundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.view != .basic {
      try visitor.visitSingularEnumField(value: self.view, fieldNumber: 4)
    }
    if !self.productCategory.isEmpty {
      try visitor.visitSingularStringField(value: self.productCategory, fieldNumber: 5)
    }
    if !self.productSet.isEmpty {
      try visitor.visitSingularStringField(value: self.productSet, fieldNumber: 6)
    }
    if !self.productCategories.isEmpty {
      try visitor.visitRepeatedStringField(value: self.productCategories, fieldNumber: 7)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 8)
    }
    if let v = self._boundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1p3beta1_ProductSearchParams, rhs: Google_Cloud_Vision_V1p3beta1_ProductSearchParams) -> Bool {
    if lhs.catalogName != rhs.catalogName {return false}
    if lhs.category != rhs.category {return false}
    if lhs.productCategory != rhs.productCategory {return false}
    if lhs._normalizedBoundingPoly != rhs._normalizedBoundingPoly {return false}
    if lhs._boundingPoly != rhs._boundingPoly {return false}
    if lhs.view != rhs.view {return false}
    if lhs.productSet != rhs.productSet {return false}
    if lhs.productCategories != rhs.productCategories {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1p3beta1_ProductSearchResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductSearchResults"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    4: .standard(proto: "product_category"),
    2: .standard(proto: "index_time"),
    3: .same(proto: "products"),
    5: .same(proto: "results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.category) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._indexTime) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.products) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.productCategory) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.category != .unspecified {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 1)
    }
    if let v = self._indexTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 3)
    }
    if !self.productCategory.isEmpty {
      try visitor.visitSingularStringField(value: self.productCategory, fieldNumber: 4)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1p3beta1_ProductSearchResults, rhs: Google_Cloud_Vision_V1p3beta1_ProductSearchResults) -> Bool {
    if lhs.category != rhs.category {return false}
    if lhs.productCategory != rhs.productCategory {return false}
    if lhs._indexTime != rhs._indexTime {return false}
    if lhs.products != rhs.products {return false}
    if lhs.results != rhs.results {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1p3beta1_ProductSearchResults.ProductInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Vision_V1p3beta1_ProductSearchResults.protoMessageName + ".ProductInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .standard(proto: "image_uri"),
    3: .same(proto: "score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imageUri) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    if !self.imageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.imageUri, fieldNumber: 2)
    }
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1p3beta1_ProductSearchResults.ProductInfo, rhs: Google_Cloud_Vision_V1p3beta1_ProductSearchResults.ProductInfo) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.imageUri != rhs.imageUri {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1p3beta1_ProductSearchResults.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Vision_V1p3beta1_ProductSearchResults.protoMessageName + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "product"),
    2: .same(proto: "score"),
    3: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.image) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1p3beta1_ProductSearchResults.Result, rhs: Google_Cloud_Vision_V1p3beta1_ProductSearchResults.Result) -> Bool {
    if lhs._product != rhs._product {return false}
    if lhs.score != rhs.score {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
