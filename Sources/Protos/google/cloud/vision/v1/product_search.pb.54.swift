// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/vision/v1/product_search.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Parameters for a product search request.
public struct Google_Cloud_Vision_V1_ProductSearchParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The bounding polygon around the area of interest in the image.
  /// Optional. If it is not specified, system discretion will be applied.
  public var boundingPoly: Google_Cloud_Vision_V1_BoundingPoly {
    get {return _boundingPoly ?? Google_Cloud_Vision_V1_BoundingPoly()}
    set {_boundingPoly = newValue}
  }
  /// Returns true if `boundingPoly` has been explicitly set.
  public var hasBoundingPoly: Bool {return self._boundingPoly != nil}
  /// Clears the value of `boundingPoly`. Subsequent reads from it will return its default value.
  public mutating func clearBoundingPoly() {self._boundingPoly = nil}

  /// The resource name of a [ProductSet][google.cloud.vision.v1.ProductSet] to be searched for similar images.
  ///
  /// Format is:
  /// `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
  public var productSet: String = String()

  /// The list of product categories to search in. Currently, we only consider
  /// the first category, and either "homegoods-v2", "apparel-v2", "toys-v2",
  /// "packagedgoods-v1", or "general-v1" should be specified. The legacy
  /// categories "homegoods", "apparel", and "toys" are still supported but will
  /// be deprecated. For new products, please use "homegoods-v2", "apparel-v2",
  /// or "toys-v2" for better product search accuracy. It is recommended to
  /// migrate existing products to these categories as well.
  public var productCategories: [String] = []

  /// The filtering expression. This can be used to restrict search results based
  /// on Product labels. We currently support an AND of OR of key-value
  /// expressions, where each expression within an OR must have the same key. An
  /// '=' should be used to connect the key and value.
  ///
  /// For example, "(color = red OR color = blue) AND brand = Google" is
  /// acceptable, but "(color = red OR brand = Google)" is not acceptable.
  /// "color: red" is not acceptable because it uses a ':' instead of an '='.
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _boundingPoly: Google_Cloud_Vision_V1_BoundingPoly? = nil
}

/// Results for a product search request.
public struct Google_Cloud_Vision_V1_ProductSearchResults {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp of the index which provided these results. Products added to the
  /// product set and products removed from the product set after this time are
  /// not reflected in the current results.
  public var indexTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _indexTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_indexTime = newValue}
  }
  /// Returns true if `indexTime` has been explicitly set.
  public var hasIndexTime: Bool {return self._indexTime != nil}
  /// Clears the value of `indexTime`. Subsequent reads from it will return its default value.
  public mutating func clearIndexTime() {self._indexTime = nil}

  /// List of results, one for each product match.
  public var results: [Google_Cloud_Vision_V1_ProductSearchResults.Result] = []

  /// List of results grouped by products detected in the query image. Each entry
  /// corresponds to one bounding polygon in the query image, and contains the
  /// matching products specific to that region. There may be duplicate product
  /// matches in the union of all the per-product results.
  public var productGroupedResults: [Google_Cloud_Vision_V1_ProductSearchResults.GroupedResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Information about a product.
  public struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The Product.
    public var product: Google_Cloud_Vision_V1_Product {
      get {return _product ?? Google_Cloud_Vision_V1_Product()}
      set {_product = newValue}
    }
    /// Returns true if `product` has been explicitly set.
    public var hasProduct: Bool {return self._product != nil}
    /// Clears the value of `product`. Subsequent reads from it will return its default value.
    public mutating func clearProduct() {self._product = nil}

    /// A confidence level on the match, ranging from 0 (no confidence) to
    /// 1 (full confidence).
    public var score: Float = 0

    /// The resource name of the image from the product that is the closest match
    /// to the query.
    public var image: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _product: Google_Cloud_Vision_V1_Product? = nil
  }

  /// Prediction for what the object in the bounding box is.
  public struct ObjectAnnotation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Object ID that should align with EntityAnnotation mid.
    public var mid: String = String()

    /// The BCP-47 language code, such as "en-US" or "sr-Latn". For more
    /// information, see
    /// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
    public var languageCode: String = String()

    /// Object name, expressed in its `language_code` language.
    public var name: String = String()

    /// Score of the result. Range [0, 1].
    public var score: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Information about the products similar to a single product in a query
  /// image.
  public struct GroupedResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The bounding polygon around the product detected in the query image.
    public var boundingPoly: Google_Cloud_Vision_V1_BoundingPoly {
      get {return _boundingPoly ?? Google_Cloud_Vision_V1_BoundingPoly()}
      set {_boundingPoly = newValue}
    }
    /// Returns true if `boundingPoly` has been explicitly set.
    public var hasBoundingPoly: Bool {return self._boundingPoly != nil}
    /// Clears the value of `boundingPoly`. Subsequent reads from it will return its default value.
    public mutating func clearBoundingPoly() {self._boundingPoly = nil}

    /// List of results, one for each product match.
    public var results: [Google_Cloud_Vision_V1_ProductSearchResults.Result] = []

    /// List of generic predictions for the object in the bounding box.
    public var objectAnnotations: [Google_Cloud_Vision_V1_ProductSearchResults.ObjectAnnotation] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _boundingPoly: Google_Cloud_Vision_V1_BoundingPoly? = nil
  }

  public init() {}

  fileprivate var _indexTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.vision.v1"

extension Google_Cloud_Vision_V1_ProductSearchParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductSearchParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9: .standard(proto: "bounding_poly"),
    6: .standard(proto: "product_set"),
    7: .standard(proto: "product_categories"),
    8: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 6: try { try decoder.decodeSingularStringField(value: &self.productSet) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.productCategories) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._boundingPoly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productSet.isEmpty {
      try visitor.visitSingularStringField(value: self.productSet, fieldNumber: 6)
    }
    if !self.productCategories.isEmpty {
      try visitor.visitRepeatedStringField(value: self.productCategories, fieldNumber: 7)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 8)
    }
    if let v = self._boundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1_ProductSearchParams, rhs: Google_Cloud_Vision_V1_ProductSearchParams) -> Bool {
    if lhs._boundingPoly != rhs._boundingPoly {return false}
    if lhs.productSet != rhs.productSet {return false}
    if lhs.productCategories != rhs.productCategories {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1_ProductSearchResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductSearchResults"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "index_time"),
    5: .same(proto: "results"),
    6: .standard(proto: "product_grouped_results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._indexTime) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.productGroupedResults) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._indexTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 5)
    }
    if !self.productGroupedResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productGroupedResults, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1_ProductSearchResults, rhs: Google_Cloud_Vision_V1_ProductSearchResults) -> Bool {
    if lhs._indexTime != rhs._indexTime {return false}
    if lhs.results != rhs.results {return false}
    if lhs.productGroupedResults != rhs.productGroupedResults {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1_ProductSearchResults.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Vision_V1_ProductSearchResults.protoMessageName + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "product"),
    2: .same(proto: "score"),
    3: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.image) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1_ProductSearchResults.Result, rhs: Google_Cloud_Vision_V1_ProductSearchResults.Result) -> Bool {
    if lhs._product != rhs._product {return false}
    if lhs.score != rhs.score {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1_ProductSearchResults.ObjectAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Vision_V1_ProductSearchResults.protoMessageName + ".ObjectAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .standard(proto: "language_code"),
    3: .same(proto: "name"),
    4: .same(proto: "score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mid.isEmpty {
      try visitor.visitSingularStringField(value: self.mid, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1_ProductSearchResults.ObjectAnnotation, rhs: Google_Cloud_Vision_V1_ProductSearchResults.ObjectAnnotation) -> Bool {
    if lhs.mid != rhs.mid {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.name != rhs.name {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Vision_V1_ProductSearchResults.GroupedResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Vision_V1_ProductSearchResults.protoMessageName + ".GroupedResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bounding_poly"),
    2: .same(proto: "results"),
    3: .standard(proto: "object_annotations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._boundingPoly) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.objectAnnotations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._boundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 2)
    }
    if !self.objectAnnotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectAnnotations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Vision_V1_ProductSearchResults.GroupedResult, rhs: Google_Cloud_Vision_V1_ProductSearchResults.GroupedResult) -> Bool {
    if lhs._boundingPoly != rhs._boundingPoly {return false}
    if lhs.results != rhs.results {return false}
    if lhs.objectAnnotations != rhs.objectAnnotations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
