//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/memcache/v1beta2/cloud_memcache.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Memcache_V1beta2_CloudMemcacheClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Memcache_V1beta2_CloudMemcacheClientProtocol: GRPCClient {
  func listInstances(
    _ request: Google_Cloud_Memcache_V1beta2_ListInstancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_ListInstancesRequest, Google_Cloud_Memcache_V1beta2_ListInstancesResponse>

  func getInstance(
    _ request: Google_Cloud_Memcache_V1beta2_GetInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_GetInstanceRequest, Google_Cloud_Memcache_V1beta2_Instance>

  func createInstance(
    _ request: Google_Cloud_Memcache_V1beta2_CreateInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_CreateInstanceRequest, Google_Longrunning_Operation>

  func updateInstance(
    _ request: Google_Cloud_Memcache_V1beta2_UpdateInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_UpdateInstanceRequest, Google_Longrunning_Operation>

  func updateParameters(
    _ request: Google_Cloud_Memcache_V1beta2_UpdateParametersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_UpdateParametersRequest, Google_Longrunning_Operation>

  func deleteInstance(
    _ request: Google_Cloud_Memcache_V1beta2_DeleteInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_DeleteInstanceRequest, Google_Longrunning_Operation>

  func applyParameters(
    _ request: Google_Cloud_Memcache_V1beta2_ApplyParametersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_ApplyParametersRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Memcache_V1beta2_CloudMemcacheClientProtocol {

  /// Lists Instances in a given project and location.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInstances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInstances(
    _ request: Google_Cloud_Memcache_V1beta2_ListInstancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_ListInstancesRequest, Google_Cloud_Memcache_V1beta2_ListInstancesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/ListInstances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets details of a single Instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInstance(
    _ request: Google_Cloud_Memcache_V1beta2_GetInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_GetInstanceRequest, Google_Cloud_Memcache_V1beta2_Instance> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/GetInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new Instance in a given project and location.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createInstance(
    _ request: Google_Cloud_Memcache_V1beta2_CreateInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_CreateInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/CreateInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing Instance in a given project and location.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateInstance(
    _ request: Google_Cloud_Memcache_V1beta2_UpdateInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_UpdateInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/UpdateInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the defined Memcached Parameters for an existing Instance.
  /// This method only stages the parameters, it must be followed by
  /// ApplyParameters to apply the parameters to nodes of the Memcached Instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateParameters(
    _ request: Google_Cloud_Memcache_V1beta2_UpdateParametersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_UpdateParametersRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/UpdateParameters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a single Instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInstance(
    _ request: Google_Cloud_Memcache_V1beta2_DeleteInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_DeleteInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/DeleteInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// ApplyParameters will update current set of Parameters to the set of
  /// specified nodes of the Memcached Instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApplyParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func applyParameters(
    _ request: Google_Cloud_Memcache_V1beta2_ApplyParametersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Memcache_V1beta2_ApplyParametersRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.memcache.v1beta2.CloudMemcache/ApplyParameters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Memcache_V1beta2_CloudMemcacheClient: Google_Cloud_Memcache_V1beta2_CloudMemcacheClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.memcache.v1beta2.CloudMemcache service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Memcache_V1beta2_CloudMemcacheProvider: CallHandlerProvider {
  /// Lists Instances in a given project and location.
  func listInstances(request: Google_Cloud_Memcache_V1beta2_ListInstancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Memcache_V1beta2_ListInstancesResponse>
  /// Gets details of a single Instance.
  func getInstance(request: Google_Cloud_Memcache_V1beta2_GetInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Memcache_V1beta2_Instance>
  /// Creates a new Instance in a given project and location.
  func createInstance(request: Google_Cloud_Memcache_V1beta2_CreateInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates an existing Instance in a given project and location.
  func updateInstance(request: Google_Cloud_Memcache_V1beta2_UpdateInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the defined Memcached Parameters for an existing Instance.
  /// This method only stages the parameters, it must be followed by
  /// ApplyParameters to apply the parameters to nodes of the Memcached Instance.
  func updateParameters(request: Google_Cloud_Memcache_V1beta2_UpdateParametersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a single Instance.
  func deleteInstance(request: Google_Cloud_Memcache_V1beta2_DeleteInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// ApplyParameters will update current set of Parameters to the set of
  /// specified nodes of the Memcached Instance.
  func applyParameters(request: Google_Cloud_Memcache_V1beta2_ApplyParametersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Memcache_V1beta2_CloudMemcacheProvider {
  public var serviceName: Substring { return "google.cloud.memcache.v1beta2.CloudMemcache" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListInstances":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInstances(request: request, context: context)
        }
      }

    case "GetInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInstance(request: request, context: context)
        }
      }

    case "CreateInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createInstance(request: request, context: context)
        }
      }

    case "UpdateInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateInstance(request: request, context: context)
        }
      }

    case "UpdateParameters":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateParameters(request: request, context: context)
        }
      }

    case "DeleteInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInstance(request: request, context: context)
        }
      }

    case "ApplyParameters":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.applyParameters(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

