// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/servicedirectory/v1/lookup_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The request message for
/// [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
/// Looks up a service by its name, returns the service and its endpoints.
public struct Google_Cloud_Servicedirectory_V1_ResolveServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service to resolve.
  public var name: String = String()

  /// Optional. The maximum number of endpoints to return. Defaults to 25.
  /// Maximum is 100. If a value less than one is specified, the Default is used.
  /// If a value greater than the Maximum is specified, the Maximum is used.
  public var maxEndpoints: Int32 = 0

  /// Optional. The filter applied to the endpoints of the resolved service.
  ///
  /// General filter string syntax:
  /// <field> <operator> <value> (<logical connector>)
  /// <field> can be "name" or "metadata.<key>" for map field.
  /// <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS and is
  /// roughly the same as "=".
  /// <value> must be the same data type as the field.
  /// <logical connector> can be "AND, OR, NOT".
  ///
  /// Examples of valid filters:
  /// * "metadata.owner" returns Endpoints that have a label with the
  ///   key "owner", this is the same as "metadata:owner"
  /// * "metadata.protocol=gRPC" returns Endpoints that have key/value
  ///   "protocol=gRPC"
  /// * "metadata.owner!=sd AND metadata.foo=bar" returns
  ///   Endpoints that have "owner" field in metadata with a value that is not
  ///   "sd" AND have the key/value foo=bar.
  public var endpointFilter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for
/// [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
public struct Google_Cloud_Servicedirectory_V1_ResolveServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var service: Google_Cloud_Servicedirectory_V1_Service {
    get {return _service ?? Google_Cloud_Servicedirectory_V1_Service()}
    set {_service = newValue}
  }
  /// Returns true if `service` has been explicitly set.
  public var hasService: Bool {return self._service != nil}
  /// Clears the value of `service`. Subsequent reads from it will return its default value.
  public mutating func clearService() {self._service = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _service: Google_Cloud_Servicedirectory_V1_Service? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.servicedirectory.v1"

extension Google_Cloud_Servicedirectory_V1_ResolveServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResolveServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "max_endpoints"),
    3: .standard(proto: "endpoint_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.maxEndpoints) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.endpointFilter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.maxEndpoints != 0 {
      try visitor.visitSingularInt32Field(value: self.maxEndpoints, fieldNumber: 2)
    }
    if !self.endpointFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.endpointFilter, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Servicedirectory_V1_ResolveServiceRequest, rhs: Google_Cloud_Servicedirectory_V1_ResolveServiceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.maxEndpoints != rhs.maxEndpoints {return false}
    if lhs.endpointFilter != rhs.endpointFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Servicedirectory_V1_ResolveServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResolveServiceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._service) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._service {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Servicedirectory_V1_ResolveServiceResponse, rhs: Google_Cloud_Servicedirectory_V1_ResolveServiceResponse) -> Bool {
    if lhs._service != rhs._service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
