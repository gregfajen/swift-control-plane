//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/assuredworkloads/v1beta1/assuredworkloads_v1beta1.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceClientProtocol: GRPCClient {
  func createWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_CreateWorkloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_CreateWorkloadRequest, Google_Longrunning_Operation>

  func updateWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_UpdateWorkloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_UpdateWorkloadRequest, Google_Cloud_Assuredworkloads_V1beta1_Workload>

  func deleteWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_DeleteWorkloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_DeleteWorkloadRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_GetWorkloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_GetWorkloadRequest, Google_Cloud_Assuredworkloads_V1beta1_Workload>

  func listWorkloads(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsRequest, Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsResponse>

}

extension Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceClientProtocol {

  /// Creates Assured Workload.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWorkload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_CreateWorkloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_CreateWorkloadRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService/CreateWorkload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing workload.
  /// Currently allows updating of workload display_name and labels.
  /// For force updates don't set etag field in the Workload.
  /// Only one update operation per workload can be in progress.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWorkload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_UpdateWorkloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_UpdateWorkloadRequest, Google_Cloud_Assuredworkloads_V1beta1_Workload> {
    return self.makeUnaryCall(
      path: "/google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService/UpdateWorkload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the workload. Make sure that workload's direct children are already
  /// in a deleted state, otherwise the request will fail with a
  /// FAILED_PRECONDITION error.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWorkload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_DeleteWorkloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_DeleteWorkloadRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService/DeleteWorkload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets Assured Workload associated with a CRM Node
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWorkload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWorkload(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_GetWorkloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_GetWorkloadRequest, Google_Cloud_Assuredworkloads_V1beta1_Workload> {
    return self.makeUnaryCall(
      path: "/google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService/GetWorkload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists Assured Workloads under a CRM Node.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWorkloads.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listWorkloads(
    _ request: Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsRequest, Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService/ListWorkloads",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceClient: Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceProvider: CallHandlerProvider {
  /// Creates Assured Workload.
  func createWorkload(request: Google_Cloud_Assuredworkloads_V1beta1_CreateWorkloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates an existing workload.
  /// Currently allows updating of workload display_name and labels.
  /// For force updates don't set etag field in the Workload.
  /// Only one update operation per workload can be in progress.
  func updateWorkload(request: Google_Cloud_Assuredworkloads_V1beta1_UpdateWorkloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Assuredworkloads_V1beta1_Workload>
  /// Deletes the workload. Make sure that workload's direct children are already
  /// in a deleted state, otherwise the request will fail with a
  /// FAILED_PRECONDITION error.
  func deleteWorkload(request: Google_Cloud_Assuredworkloads_V1beta1_DeleteWorkloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets Assured Workload associated with a CRM Node
  func getWorkload(request: Google_Cloud_Assuredworkloads_V1beta1_GetWorkloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Assuredworkloads_V1beta1_Workload>
  /// Lists Assured Workloads under a CRM Node.
  func listWorkloads(request: Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Assuredworkloads_V1beta1_ListWorkloadsResponse>
}

extension Google_Cloud_Assuredworkloads_V1beta1_AssuredWorkloadsServiceProvider {
  public var serviceName: Substring { return "google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateWorkload":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createWorkload(request: request, context: context)
        }
      }

    case "UpdateWorkload":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateWorkload(request: request, context: context)
        }
      }

    case "DeleteWorkload":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteWorkload(request: request, context: context)
        }
      }

    case "GetWorkload":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getWorkload(request: request, context: context)
        }
      }

    case "ListWorkloads":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listWorkloads(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

