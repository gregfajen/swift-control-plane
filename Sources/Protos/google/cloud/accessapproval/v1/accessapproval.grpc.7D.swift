//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/accessapproval/v1/accessapproval.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Accessapproval_V1_AccessApprovalClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Accessapproval_V1_AccessApprovalClientProtocol: GRPCClient {
  func listApprovalRequests(
    _ request: Google_Cloud_Accessapproval_V1_ListApprovalRequestsMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_ListApprovalRequestsMessage, Google_Cloud_Accessapproval_V1_ListApprovalRequestsResponse>

  func getApprovalRequest(
    _ request: Google_Cloud_Accessapproval_V1_GetApprovalRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_GetApprovalRequestMessage, Google_Cloud_Accessapproval_V1_ApprovalRequest>

  func approveApprovalRequest(
    _ request: Google_Cloud_Accessapproval_V1_ApproveApprovalRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_ApproveApprovalRequestMessage, Google_Cloud_Accessapproval_V1_ApprovalRequest>

  func dismissApprovalRequest(
    _ request: Google_Cloud_Accessapproval_V1_DismissApprovalRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_DismissApprovalRequestMessage, Google_Cloud_Accessapproval_V1_ApprovalRequest>

  func getAccessApprovalSettings(
    _ request: Google_Cloud_Accessapproval_V1_GetAccessApprovalSettingsMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_GetAccessApprovalSettingsMessage, Google_Cloud_Accessapproval_V1_AccessApprovalSettings>

  func updateAccessApprovalSettings(
    _ request: Google_Cloud_Accessapproval_V1_UpdateAccessApprovalSettingsMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_UpdateAccessApprovalSettingsMessage, Google_Cloud_Accessapproval_V1_AccessApprovalSettings>

  func deleteAccessApprovalSettings(
    _ request: Google_Cloud_Accessapproval_V1_DeleteAccessApprovalSettingsMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_DeleteAccessApprovalSettingsMessage, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Cloud_Accessapproval_V1_AccessApprovalClientProtocol {

  /// Lists approval requests associated with a project, folder, or organization.
  /// Approval requests can be filtered by state (pending, active, dismissed).
  /// The order is reverse chronological.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListApprovalRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listApprovalRequests(
    _ request: Google_Cloud_Accessapproval_V1_ListApprovalRequestsMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_ListApprovalRequestsMessage, Google_Cloud_Accessapproval_V1_ListApprovalRequestsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/ListApprovalRequests",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets an approval request. Returns NOT_FOUND if the request does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetApprovalRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getApprovalRequest(
    _ request: Google_Cloud_Accessapproval_V1_GetApprovalRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_GetApprovalRequestMessage, Google_Cloud_Accessapproval_V1_ApprovalRequest> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/GetApprovalRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Approves a request and returns the updated ApprovalRequest.
  ///
  /// Returns NOT_FOUND if the request does not exist. Returns
  /// FAILED_PRECONDITION if the request exists but is not in a pending state.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApproveApprovalRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func approveApprovalRequest(
    _ request: Google_Cloud_Accessapproval_V1_ApproveApprovalRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_ApproveApprovalRequestMessage, Google_Cloud_Accessapproval_V1_ApprovalRequest> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/ApproveApprovalRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Dismisses a request. Returns the updated ApprovalRequest.
  ///
  /// NOTE: This does not deny access to the resource if another request has been
  /// made and approved. It is equivalent in effect to ignoring the request
  /// altogether.
  ///
  /// Returns NOT_FOUND if the request does not exist.
  ///
  /// Returns FAILED_PRECONDITION if the request exists but is not in a pending
  /// state.
  ///
  /// - Parameters:
  ///   - request: Request to send to DismissApprovalRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dismissApprovalRequest(
    _ request: Google_Cloud_Accessapproval_V1_DismissApprovalRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_DismissApprovalRequestMessage, Google_Cloud_Accessapproval_V1_ApprovalRequest> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/DismissApprovalRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the settings associated with a project, folder, or organization.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccessApprovalSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccessApprovalSettings(
    _ request: Google_Cloud_Accessapproval_V1_GetAccessApprovalSettingsMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_GetAccessApprovalSettingsMessage, Google_Cloud_Accessapproval_V1_AccessApprovalSettings> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/GetAccessApprovalSettings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the settings associated with a project, folder, or organization.
  /// Settings to update are determined by the value of field_mask.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAccessApprovalSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAccessApprovalSettings(
    _ request: Google_Cloud_Accessapproval_V1_UpdateAccessApprovalSettingsMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_UpdateAccessApprovalSettingsMessage, Google_Cloud_Accessapproval_V1_AccessApprovalSettings> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/UpdateAccessApprovalSettings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the settings associated with a project, folder, or organization.
  /// This will have the effect of disabling Access Approval for the project,
  /// folder, or organization, but only if all ancestors also have Access
  /// Approval disabled. If Access Approval is enabled at a higher level of the
  /// hierarchy, then Access Approval will still be enabled at this level as
  /// the settings are inherited.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAccessApprovalSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAccessApprovalSettings(
    _ request: Google_Cloud_Accessapproval_V1_DeleteAccessApprovalSettingsMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Accessapproval_V1_DeleteAccessApprovalSettingsMessage, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.accessapproval.v1.AccessApproval/DeleteAccessApprovalSettings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Accessapproval_V1_AccessApprovalClient: Google_Cloud_Accessapproval_V1_AccessApprovalClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.accessapproval.v1.AccessApproval service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Accessapproval_V1_AccessApprovalProvider: CallHandlerProvider {
  /// Lists approval requests associated with a project, folder, or organization.
  /// Approval requests can be filtered by state (pending, active, dismissed).
  /// The order is reverse chronological.
  func listApprovalRequests(request: Google_Cloud_Accessapproval_V1_ListApprovalRequestsMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Accessapproval_V1_ListApprovalRequestsResponse>
  /// Gets an approval request. Returns NOT_FOUND if the request does not exist.
  func getApprovalRequest(request: Google_Cloud_Accessapproval_V1_GetApprovalRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Accessapproval_V1_ApprovalRequest>
  /// Approves a request and returns the updated ApprovalRequest.
  ///
  /// Returns NOT_FOUND if the request does not exist. Returns
  /// FAILED_PRECONDITION if the request exists but is not in a pending state.
  func approveApprovalRequest(request: Google_Cloud_Accessapproval_V1_ApproveApprovalRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Accessapproval_V1_ApprovalRequest>
  /// Dismisses a request. Returns the updated ApprovalRequest.
  ///
  /// NOTE: This does not deny access to the resource if another request has been
  /// made and approved. It is equivalent in effect to ignoring the request
  /// altogether.
  ///
  /// Returns NOT_FOUND if the request does not exist.
  ///
  /// Returns FAILED_PRECONDITION if the request exists but is not in a pending
  /// state.
  func dismissApprovalRequest(request: Google_Cloud_Accessapproval_V1_DismissApprovalRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Accessapproval_V1_ApprovalRequest>
  /// Gets the settings associated with a project, folder, or organization.
  func getAccessApprovalSettings(request: Google_Cloud_Accessapproval_V1_GetAccessApprovalSettingsMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Accessapproval_V1_AccessApprovalSettings>
  /// Updates the settings associated with a project, folder, or organization.
  /// Settings to update are determined by the value of field_mask.
  func updateAccessApprovalSettings(request: Google_Cloud_Accessapproval_V1_UpdateAccessApprovalSettingsMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Accessapproval_V1_AccessApprovalSettings>
  /// Deletes the settings associated with a project, folder, or organization.
  /// This will have the effect of disabling Access Approval for the project,
  /// folder, or organization, but only if all ancestors also have Access
  /// Approval disabled. If Access Approval is enabled at a higher level of the
  /// hierarchy, then Access Approval will still be enabled at this level as
  /// the settings are inherited.
  func deleteAccessApprovalSettings(request: Google_Cloud_Accessapproval_V1_DeleteAccessApprovalSettingsMessage, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Cloud_Accessapproval_V1_AccessApprovalProvider {
  public var serviceName: Substring { return "google.cloud.accessapproval.v1.AccessApproval" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListApprovalRequests":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listApprovalRequests(request: request, context: context)
        }
      }

    case "GetApprovalRequest":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getApprovalRequest(request: request, context: context)
        }
      }

    case "ApproveApprovalRequest":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.approveApprovalRequest(request: request, context: context)
        }
      }

    case "DismissApprovalRequest":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.dismissApprovalRequest(request: request, context: context)
        }
      }

    case "GetAccessApprovalSettings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAccessApprovalSettings(request: request, context: context)
        }
      }

    case "UpdateAccessApprovalSettings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAccessApprovalSettings(request: request, context: context)
        }
      }

    case "DeleteAccessApprovalSettings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAccessApprovalSettings(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

