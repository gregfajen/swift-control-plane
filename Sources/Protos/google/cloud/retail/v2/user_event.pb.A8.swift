// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/retail/v2/user_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UserEvent captures all metadata information recommendation engine needs to
/// know about how end users interact with customers' website.
public struct Google_Cloud_Retail_V2_UserEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. User event type. Allowed values are:
  ///
  /// * `add-to-cart` Products being added to cart.
  /// * `category-page-view` Special pages such as sale or promotion pages
  ///   viewed.
  /// * `detail-page-view` Products detail page viewed.
  /// * `home-page-view` Homepage viewed.
  /// * `purchase-complete` User finishing a purchase.
  /// * `search`
  /// * `shopping-cart-page-view` User viewing a shopping cart.
  public var eventType: String {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  /// Required. A unique identifier for tracking visitors. For example, this
  /// could be implemented with a http cookie, which should be able to uniquely
  /// identify a visitor on a single device. This unique identifier should not
  /// change if the visitor log in/out of the website.
  ///
  /// The field must be a UTF-8 encoded string with a length limit of 128
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  public var visitorID: String {
    get {return _storage._visitorID}
    set {_uniqueStorage()._visitorID = newValue}
  }

  /// Only required for
  /// [UserEventService.ImportUserEvents][google.cloud.retail.v2.UserEventService.ImportUserEvents]
  /// method. Timestamp of when the user event happened.
  public var eventTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eventTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  public var hasEventTime: Bool {return _storage._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  public mutating func clearEventTime() {_uniqueStorage()._eventTime = nil}

  /// A list of identifiers for the independent experiment groups
  /// this user event belongs to. This is used to distinguish between user events
  /// associated with different experiment setups (e.g. using Recommendations AI,
  /// using different recommendation models).
  public var experimentIds: [String] {
    get {return _storage._experimentIds}
    set {_uniqueStorage()._experimentIds = newValue}
  }

  /// Highly recommended for user events that are the result of
  /// [PredictionService.Predict][google.cloud.retail.v2.PredictionService.Predict].
  /// This field enables accurate attribution of recommendation model
  /// performance.
  ///
  /// The value must be a valid
  /// [PredictResponse.attribute_token][] for user events that are the result of
  /// [PredictionService.Predict][google.cloud.retail.v2.PredictionService.Predict].
  ///
  /// This token enables us to accurately attribute page view or purchase back to
  /// the event and the particular predict response containing this
  /// clicked/purchased product. If user clicks on product K in the
  /// recommendation results, pass [PredictResponse.attribute_token][] as a url
  /// parameter to product K's page. When recording events on product K's page,
  /// log the [PredictResponse.attribute_token][] to this field.
  public var attributionToken: String {
    get {return _storage._attributionToken}
    set {_uniqueStorage()._attributionToken = newValue}
  }

  /// The main product details related to the event.
  ///
  /// This field is required for the following event types:
  ///
  /// * `add-to-cart`
  /// * `detail-page-view`
  /// * `purchase-complete`
  ///
  /// In a `search` event, this field represents the products returned to the end
  /// user on the current page (the end user may have not finished broswing the
  /// whole page yet). When a new page is returned to the end user, after
  /// pagination/filtering/ordering even for the same query, a new SEARCH event
  /// with different
  /// [product_details][google.cloud.retail.v2.UserEvent.product_details] is
  /// desired. The end user may have not finished broswing the whole page yet.
  public var productDetails: [Google_Cloud_Retail_V2_ProductDetail] {
    get {return _storage._productDetails}
    set {_uniqueStorage()._productDetails = newValue}
  }

  /// Extra user event features to include in the recommendation model.
  ///
  /// For product recommendation, an example of extra user information is
  /// traffic_channel, i.e. how user arrives at the site. Users can arrive
  /// at the site by coming to the site directly, or coming through Google
  /// search, and etc.
  public var attributes: Dictionary<String,Google_Cloud_Retail_V2_CustomAttribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  /// The id or name of the associated shopping cart. This id is used
  /// to associate multiple items added or present in the cart before purchase.
  ///
  /// This can only be set for `add-to-cart`, `remove-from-cart`,
  /// `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.
  public var cartID: String {
    get {return _storage._cartID}
    set {_uniqueStorage()._cartID = newValue}
  }

  /// A transaction represents the entire purchase transaction.
  ///
  /// Required for `purchase-complete` events. Optional for `checkout-start`
  /// events. Other event types should not set this field. Otherwise, an
  /// INVALID_ARGUMENT error is returned.
  public var purchaseTransaction: Google_Cloud_Retail_V2_PurchaseTransaction {
    get {return _storage._purchaseTransaction ?? Google_Cloud_Retail_V2_PurchaseTransaction()}
    set {_uniqueStorage()._purchaseTransaction = newValue}
  }
  /// Returns true if `purchaseTransaction` has been explicitly set.
  public var hasPurchaseTransaction: Bool {return _storage._purchaseTransaction != nil}
  /// Clears the value of `purchaseTransaction`. Subsequent reads from it will return its default value.
  public mutating func clearPurchaseTransaction() {_uniqueStorage()._purchaseTransaction = nil}

  /// The user's search query.
  ///
  /// The value must be a UTF-8 encoded string with a length limit of 5,000
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  ///
  /// Required for `search` events. Other event types should not set this field.
  /// Otherwise, an INVALID_ARGUMENT error is returned.
  public var searchQuery: String {
    get {return _storage._searchQuery}
    set {_uniqueStorage()._searchQuery = newValue}
  }

  /// The categories associated with a category page.
  ///
  /// To represent full path of category, use '>' sign to separate different
  /// hierarchies. If '>' is part of the category name, please replace it with
  /// other character(s).
  ///
  /// Category pages include special pages such as sales or promotions. For
  /// instance, a special sale page may have the category hierarchy:
  /// "pageCategories" : ["Sales > 2017 Black Friday Deals"].
  ///
  /// Required for `category-page-view` events. Other event types should not set
  /// this field. Otherwise, an INVALID_ARGUMENT error is returned.
  public var pageCategories: [String] {
    get {return _storage._pageCategories}
    set {_uniqueStorage()._pageCategories = newValue}
  }

  /// User information.
  public var userInfo: Google_Cloud_Retail_V2_UserInfo {
    get {return _storage._userInfo ?? Google_Cloud_Retail_V2_UserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  public var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  public mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  /// Complete url (window.location.href) of the user's current page.
  /// When using the client side event reporting with JavaScript pixel and Google
  /// Tag Manager, this value is filled in automatically. Maximum length 5,000
  /// characters.
  public var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// The referrer url of the current page. When using
  /// the client side event reporting with JavaScript pixel and Google Tag
  /// Manager, this value is filled in automatically.
  public var referrerUri: String {
    get {return _storage._referrerUri}
    set {_uniqueStorage()._referrerUri = newValue}
  }

  /// A unique id of a web page view.
  /// This should be kept the same for all user events triggered from the same
  /// pageview. For example, an item detail page view could trigger multiple
  /// events as the user is browsing the page.
  /// The `pageViewId` property should be kept the same for all these events so
  /// that they can be grouped together properly. This `pageViewId` will be
  /// automatically generated if using the client side event reporting with
  /// JavaScript pixel and Google Tag Manager.
  public var pageViewID: String {
    get {return _storage._pageViewID}
    set {_uniqueStorage()._pageViewID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Detailed product information associated with a user event.
public struct Google_Cloud_Retail_V2_ProductDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. [Product][google.cloud.retail.v2.Product] information.
  /// Only [Product][id] field is used when ingesting an event, all other product
  /// fields are ignored as we will look them up from the catalog.
  public var product: Google_Cloud_Retail_V2_Product {
    get {return _product ?? Google_Cloud_Retail_V2_Product()}
    set {_product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return self._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {self._product = nil}

  /// Quantity of the product associated with the user event. For
  /// example, this field will be 2 if two products are added to the shopping
  /// cart for `purchase-complete` event. Required for `add-to-cart` and
  /// `purchase-complete` event types.
  public var quantity: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _quantity ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_quantity = newValue}
  }
  /// Returns true if `quantity` has been explicitly set.
  public var hasQuantity: Bool {return self._quantity != nil}
  /// Clears the value of `quantity`. Subsequent reads from it will return its default value.
  public mutating func clearQuantity() {self._quantity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _product: Google_Cloud_Retail_V2_Product? = nil
  fileprivate var _quantity: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
}

/// A transaction represents the entire purchase transaction.
public struct Google_Cloud_Retail_V2_PurchaseTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The transaction ID with a length limit of 128 characters.
  public var id: String = String()

  /// Required. Total revenue or grand total associated with the transaction.
  /// This value include shipping, tax, or other adjustments to total revenue
  /// that you want to include as part of your revenue calculations. This field
  /// is not required if the event type is `refund`.
  public var revenue: Float = 0

  /// All the taxes associated with the transaction.
  public var tax: Float = 0

  /// All the costs associated with the product. These can be
  /// manufacturing costs, shipping expenses not borne by the end user, or any
  /// other costs.
  ///
  /// Total product cost such that
  ///   profit = revenue - tax + [Product][pricing][cost]
  /// If product_cost is not set, then
  ///   profit = revenue - tax - [Product][pricing][cost].
  ///
  /// If [Product][pricing][cost] is not specified for one of the products,
  /// [Product][pricing][cost] based profit *cannot* be calculated for this
  /// Transaction.
  public var cost: Float = 0

  /// Required. Currency code. Use three-character ISO-4217 code. This field
  /// is not required if the event type is `refund`.
  public var currencyCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.retail.v2"

extension Google_Cloud_Retail_V2_UserEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_type"),
    2: .standard(proto: "visitor_id"),
    3: .standard(proto: "event_time"),
    4: .standard(proto: "experiment_ids"),
    5: .standard(proto: "attribution_token"),
    6: .standard(proto: "product_details"),
    7: .same(proto: "attributes"),
    8: .standard(proto: "cart_id"),
    9: .standard(proto: "purchase_transaction"),
    10: .standard(proto: "search_query"),
    11: .standard(proto: "page_categories"),
    12: .standard(proto: "user_info"),
    13: .same(proto: "uri"),
    14: .standard(proto: "referrer_uri"),
    15: .standard(proto: "page_view_id"),
  ]

  fileprivate class _StorageClass {
    var _eventType: String = String()
    var _visitorID: String = String()
    var _eventTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _experimentIds: [String] = []
    var _attributionToken: String = String()
    var _productDetails: [Google_Cloud_Retail_V2_ProductDetail] = []
    var _attributes: Dictionary<String,Google_Cloud_Retail_V2_CustomAttribute> = [:]
    var _cartID: String = String()
    var _purchaseTransaction: Google_Cloud_Retail_V2_PurchaseTransaction? = nil
    var _searchQuery: String = String()
    var _pageCategories: [String] = []
    var _userInfo: Google_Cloud_Retail_V2_UserInfo? = nil
    var _uri: String = String()
    var _referrerUri: String = String()
    var _pageViewID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _visitorID = source._visitorID
      _eventTime = source._eventTime
      _experimentIds = source._experimentIds
      _attributionToken = source._attributionToken
      _productDetails = source._productDetails
      _attributes = source._attributes
      _cartID = source._cartID
      _purchaseTransaction = source._purchaseTransaction
      _searchQuery = source._searchQuery
      _pageCategories = source._pageCategories
      _userInfo = source._userInfo
      _uri = source._uri
      _referrerUri = source._referrerUri
      _pageViewID = source._pageViewID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._eventType) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._visitorID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._eventTime) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._experimentIds) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._attributionToken) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._productDetails) }()
        case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Retail_V2_CustomAttribute>.self, value: &_storage._attributes) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._cartID) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._purchaseTransaction) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._searchQuery) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._pageCategories) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._userInfo) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._referrerUri) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._pageViewID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._eventType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventType, fieldNumber: 1)
      }
      if !_storage._visitorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._visitorID, fieldNumber: 2)
      }
      if let v = _storage._eventTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._experimentIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._experimentIds, fieldNumber: 4)
      }
      if !_storage._attributionToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._attributionToken, fieldNumber: 5)
      }
      if !_storage._productDetails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._productDetails, fieldNumber: 6)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Retail_V2_CustomAttribute>.self, value: _storage._attributes, fieldNumber: 7)
      }
      if !_storage._cartID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cartID, fieldNumber: 8)
      }
      if let v = _storage._purchaseTransaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._searchQuery.isEmpty {
        try visitor.visitSingularStringField(value: _storage._searchQuery, fieldNumber: 10)
      }
      if !_storage._pageCategories.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._pageCategories, fieldNumber: 11)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 13)
      }
      if !_storage._referrerUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._referrerUri, fieldNumber: 14)
      }
      if !_storage._pageViewID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pageViewID, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2_UserEvent, rhs: Google_Cloud_Retail_V2_UserEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._visitorID != rhs_storage._visitorID {return false}
        if _storage._eventTime != rhs_storage._eventTime {return false}
        if _storage._experimentIds != rhs_storage._experimentIds {return false}
        if _storage._attributionToken != rhs_storage._attributionToken {return false}
        if _storage._productDetails != rhs_storage._productDetails {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._cartID != rhs_storage._cartID {return false}
        if _storage._purchaseTransaction != rhs_storage._purchaseTransaction {return false}
        if _storage._searchQuery != rhs_storage._searchQuery {return false}
        if _storage._pageCategories != rhs_storage._pageCategories {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._referrerUri != rhs_storage._referrerUri {return false}
        if _storage._pageViewID != rhs_storage._pageViewID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2_ProductDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "product"),
    2: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._quantity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2_ProductDetail, rhs: Google_Cloud_Retail_V2_ProductDetail) -> Bool {
    if lhs._product != rhs._product {return false}
    if lhs._quantity != rhs._quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2_PurchaseTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PurchaseTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "revenue"),
    3: .same(proto: "tax"),
    4: .same(proto: "cost"),
    5: .standard(proto: "currency_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.revenue) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.tax) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.cost) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.currencyCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.revenue != 0 {
      try visitor.visitSingularFloatField(value: self.revenue, fieldNumber: 2)
    }
    if self.tax != 0 {
      try visitor.visitSingularFloatField(value: self.tax, fieldNumber: 3)
    }
    if self.cost != 0 {
      try visitor.visitSingularFloatField(value: self.cost, fieldNumber: 4)
    }
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2_PurchaseTransaction, rhs: Google_Cloud_Retail_V2_PurchaseTransaction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.revenue != rhs.revenue {return false}
    if lhs.tax != rhs.tax {return false}
    if lhs.cost != rhs.cost {return false}
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
