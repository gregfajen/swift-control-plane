// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/retail/v2alpha/catalog.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configures what level the product should be uploaded with regards to
/// how users will be send events and how predictions will be made.
public struct Google_Cloud_Retail_V2alpha_ProductLevelConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of [Product][google.cloud.retail.v2alpha.Product]s allowed to be
  /// ingested into the catalog. Acceptable values are:
  ///
  /// * `primary` (default): You can only ingest PRIMARY
  /// [Product][google.cloud.retail.v2alpha.Product]s. This means
  ///   [Product.primary_product_id][google.cloud.retail.v2alpha.Product.primary_product_id]
  ///   can only be empty or set to the same value as
  ///   [Product.id][google.cloud.retail.v2alpha.Product.id].
  /// * `variant`: You can only ingest VARIANT
  /// [Product][google.cloud.retail.v2alpha.Product]s. This means
  ///   [Product.primary_product_id][google.cloud.retail.v2alpha.Product.primary_product_id]
  ///   cannot be empty.
  ///
  /// If this field is set to an invalid value other than these, an
  /// INVALID_ARGUMENT error is returned.
  ///
  /// If this field is `variant` and
  /// [merchant_center_product_id_field][google.cloud.retail.v2alpha.ProductLevelConfig.merchant_center_product_id_field]
  /// is `itemGroupId`, an INVALID_ARGUMENT error is returned.
  ///
  /// See
  /// https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels
  /// for more details.
  public var ingestionProductType: String = String()

  /// Which field of [Merchant Center
  ///
  /// Product](https:
  /// //cloud.google.com/bigquery-transfer/docs/merchant-center-products-schema)
  /// should be imported as [Product.id][google.cloud.retail.v2alpha.Product.id].
  /// Acceptable values are:
  ///
  /// * `offerId` (default): Import `offerId` as the product ID.
  /// * `itemGroupId`: Import `itemGroupId` as the product ID. Notice that Retail
  ///   API will choose one item from the ones with the same `itemGroupId`, and
  ///   use it to represent the item group.
  ///
  /// If this field is set to an invalid value other than these, an
  /// INVALID_ARGUMENT error is returned.
  ///
  /// If this field is `itemGroupId` and
  /// [ingestion_product_type][google.cloud.retail.v2alpha.ProductLevelConfig.ingestion_product_type]
  /// is `variant`, an INVALID_ARGUMENT error is returned.
  ///
  /// See
  /// https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels
  /// for more details.
  public var merchantCenterProductIDField: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The catalog configuration.
/// Next ID: 5.
public struct Google_Cloud_Retail_V2alpha_Catalog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Immutable. The fully qualified resource name of the catalog.
  public var name: String = String()

  /// Required. Immutable. The catalog display name.
  ///
  /// This field must be a UTF-8 encoded string with a length limit of 128
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  public var displayName: String = String()

  /// Required. The product level configuration.
  public var productLevelConfig: Google_Cloud_Retail_V2alpha_ProductLevelConfig {
    get {return _productLevelConfig ?? Google_Cloud_Retail_V2alpha_ProductLevelConfig()}
    set {_productLevelConfig = newValue}
  }
  /// Returns true if `productLevelConfig` has been explicitly set.
  public var hasProductLevelConfig: Bool {return self._productLevelConfig != nil}
  /// Clears the value of `productLevelConfig`. Subsequent reads from it will return its default value.
  public mutating func clearProductLevelConfig() {self._productLevelConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _productLevelConfig: Google_Cloud_Retail_V2alpha_ProductLevelConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.retail.v2alpha"

extension Google_Cloud_Retail_V2alpha_ProductLevelConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductLevelConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ingestion_product_type"),
    2: .standard(proto: "merchant_center_product_id_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ingestionProductType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.merchantCenterProductIDField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ingestionProductType.isEmpty {
      try visitor.visitSingularStringField(value: self.ingestionProductType, fieldNumber: 1)
    }
    if !self.merchantCenterProductIDField.isEmpty {
      try visitor.visitSingularStringField(value: self.merchantCenterProductIDField, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ProductLevelConfig, rhs: Google_Cloud_Retail_V2alpha_ProductLevelConfig) -> Bool {
    if lhs.ingestionProductType != rhs.ingestionProductType {return false}
    if lhs.merchantCenterProductIDField != rhs.merchantCenterProductIDField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_Catalog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Catalog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    4: .standard(proto: "product_level_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._productLevelConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if let v = self._productLevelConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_Catalog, rhs: Google_Cloud_Retail_V2alpha_Catalog) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._productLevelConfig != rhs._productLevelConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
