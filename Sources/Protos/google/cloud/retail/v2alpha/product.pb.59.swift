// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/retail/v2alpha/product.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Product captures all metadata information of items to be recommended or
/// searched.
public struct Google_Cloud_Retail_V2alpha_Product {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Immutable. Full resource name of the product, such as
  ///
  /// "projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/product_id".
  ///
  /// The branch ID must be "default_branch".
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Immutable. [Product][google.cloud.retail.v2alpha.Product] identifier, which
  /// is the final component of [name][google.cloud.retail.v2alpha.Product.name].
  /// For example, this field is "id_1", if
  /// [name][google.cloud.retail.v2alpha.Product.name] is
  ///
  /// "projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/id_1".
  ///
  /// This field must be a UTF-8 encoded string with a length limit of 128
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  ///
  /// Google Merchant Center property
  /// [id](https://support.google.com/merchants/answer/6324405).
  /// schema.org Property [Product.sku](https://schema.org/sku).
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Variant group identifier. Must be an
  /// [id][google.cloud.retail.v2alpha.Product.id], with the same parent branch
  /// with this product. Otherwise, an error is thrown.
  ///
  /// For [Type.PRIMARY][google.cloud.retail.v2alpha.Product.Type.PRIMARY]
  /// [Product][google.cloud.retail.v2alpha.Product]s, this field can only be
  /// empty or set to the same value as
  /// [id][google.cloud.retail.v2alpha.Product.id].
  ///
  /// For [Type.VARIANT][google.cloud.retail.v2alpha.Product.Type.VARIANT]
  /// [Product][google.cloud.retail.v2alpha.Product]s, this field cannot be
  /// empty. A maximum of 2000 products are allowed to share the same
  /// [Type.PRIMARY][google.cloud.retail.v2alpha.Product.Type.PRIMARY]
  /// [Product][google.cloud.retail.v2alpha.Product]. Otherwise, an
  /// INVALID_ARGUMENT error is returned.
  ///
  /// Google Merchant Center Property
  /// [item_group_id](https://support.google.com/merchants/answer/6324507).
  /// schema.org Property
  /// [Product.inProductGroupWithID](https://schema.org/inProductGroupWithID).
  ///
  /// This field must be enabled before it can be used. [Learn
  /// more](/recommendations-ai/docs/catalog#item-group-id).
  public var primaryProductID: String {
    get {return _storage._primaryProductID}
    set {_uniqueStorage()._primaryProductID = newValue}
  }

  /// Product categories. This field is repeated for supporting one product
  /// belonging to several parallel categories. Each value is either the full
  /// path of the category, or the [category
  ///
  /// ID](https:
  /// //www.google.com/basepages/producttype/taxonomy-with-ids.en-US.txt).
  /// Strongly recommended using the full path for better search / recommendation
  /// quality.
  ///
  /// To represent full path of category, use '>' sign to separate different
  /// hierarchies. If '>' is part of the category name, please replace it with
  /// other character(s).
  ///
  /// For example, if a shoes product belongs to both
  /// ["Shoes & Accessories" -> "Shoes"] and
  /// ["Sports & Fitness" -> "Athletic Clothing" -> "Shoes"], it could be
  /// represented as:
  ///
  ///      "categories": [
  ///        "Shoes & Accessories > Shoes",
  ///        "Sports & Fitness > Athletic Clothing > Shoes"
  ///      ]
  ///
  /// Must be set for
  /// [Type.PRIMARY][google.cloud.retail.v2alpha.Product.Type.PRIMARY]
  /// [Product][google.cloud.retail.v2alpha.Product] otherwise an
  /// INVALID_ARGUMENT error is returned.
  ///
  /// At most 250 values are allowed per
  /// [Product][google.cloud.retail.v2alpha.Product]. Empty values are not
  /// allowed. Each value must be a UTF-8 encoded string with a length limit of
  /// 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned.
  ///
  /// Google Merchant Center property
  ///
  /// [google_product_category](https:
  /// //support.google.com/merchants/answer/6324436).
  /// Schema.org property [Product.category] (https://schema.org/category).
  public var categories: [String] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  /// Required. Product title.
  ///
  /// This field must be a UTF-8 encoded string with a length limit of 128
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  ///
  /// Google Merchant Center property
  /// [title](https://support.google.com/merchants/answer/6324415). Schema.org
  /// property [Product.name](https://schema.org/name).
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// Product description.
  ///
  /// This field must be a UTF-8 encoded string with a length limit of 5,000
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  ///
  /// Google Merchant Center property
  /// [description](https://support.google.com/merchants/answer/6324468).
  /// schema.org property [Product.description](https://schema.org/description).
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Highly encouraged. Extra product attributes to be included. For example,
  /// for products, this could include the store name, vendor, style, color, etc.
  /// These are very strong signals for recommendation model, thus we highly
  /// recommend providing the attributes here.
  ///
  /// Features that can take on one of a limited number of possible values. Two
  /// types of features can be set are:
  ///
  /// Textual features. some examples would be the brand/maker of a product, or
  /// country of a customer. Numerical features. Some examples would be the
  /// height/weight of a product, or age of a customer.
  ///
  /// For example: { "vendor": {"text": ["vendor123", "vendor456"]},
  /// "lengths_cm": {"numbers":[2.3, 15.4]}, "heights_cm": {"numbers":[8.1, 6.4]}
  /// }.
  ///
  /// A maximum of 150 attributes are allowed. Otherwise, an INVALID_ARGUMENT
  /// error is returned.
  public var attributes: Dictionary<String,Google_Cloud_Retail_V2alpha_CustomAttribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  /// Custom tags associated with the product.
  ///
  /// At most 250 values are allowed per
  /// [Product][google.cloud.retail.v2alpha.Product]. This value must be a UTF-8
  /// encoded string with a length limit of 1,000 characters. Otherwise, an
  /// INVALID_ARGUMENT error is returned.
  ///
  /// This tag can be used for filtering recommendation results by passing the
  /// tag as part of the
  /// [PredictRequest.filter][google.cloud.retail.v2alpha.PredictRequest.filter].
  ///
  /// Google Merchant Center property
  /// [custom_label_0â€“4](https://support.google.com/merchants/answer/6324473).
  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  /// Product price and cost information.
  ///
  /// Google Merchant Center property
  /// [price](https://support.google.com/merchants/answer/6324371).
  public var priceInfo: Google_Cloud_Retail_V2alpha_PriceInfo {
    get {return _storage._priceInfo ?? Google_Cloud_Retail_V2alpha_PriceInfo()}
    set {_uniqueStorage()._priceInfo = newValue}
  }
  /// Returns true if `priceInfo` has been explicitly set.
  public var hasPriceInfo: Bool {return _storage._priceInfo != nil}
  /// Clears the value of `priceInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPriceInfo() {_uniqueStorage()._priceInfo = nil}

  /// The timestamp when this [Product][google.cloud.retail.v2alpha.Product]
  /// becomes available recommendation and search.
  public var availableTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._availableTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._availableTime = newValue}
  }
  /// Returns true if `availableTime` has been explicitly set.
  public var hasAvailableTime: Bool {return _storage._availableTime != nil}
  /// Clears the value of `availableTime`. Subsequent reads from it will return its default value.
  public mutating func clearAvailableTime() {_uniqueStorage()._availableTime = nil}

  /// The online availability of the
  /// [Product][google.cloud.retail.v2alpha.Product], which is parallel to and
  /// independent of
  /// [fulfillment_info][google.cloud.retail.v2alpha.Product.fulfillment_info].
  /// Default is
  /// [Availability.IN_STOCK][google.cloud.retail.v2alpha.Product.Availability.IN_STOCK].
  ///
  /// Google Merchant Center Property
  /// [availability](https://support.google.com/merchants/answer/6324448).
  /// schema.org Property [Offer.availability](https://schema.org/availability).
  public var availability: Google_Cloud_Retail_V2alpha_Product.Availability {
    get {return _storage._availability}
    set {_uniqueStorage()._availability = newValue}
  }

  /// The available quantity of the item.
  public var availableQuantity: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._availableQuantity ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._availableQuantity = newValue}
  }
  /// Returns true if `availableQuantity` has been explicitly set.
  public var hasAvailableQuantity: Bool {return _storage._availableQuantity != nil}
  /// Clears the value of `availableQuantity`. Subsequent reads from it will return its default value.
  public mutating func clearAvailableQuantity() {_uniqueStorage()._availableQuantity = nil}

  /// Canonical URL directly linking to the product detail page.
  ///
  /// This field must be a UTF-8 encoded string with a length limit of 5,000
  /// characters. Otherwise, an INVALID_ARGUMENT error is returned.
  ///
  /// Google Merchant Center property
  /// [link](https://support.google.com/merchants/answer/6324416).
  /// Schema.org property [Offer.url](https://schema.org/url).
  public var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// Product images for the product.
  ///
  /// A maximum of 300 images are allowed.
  ///
  /// Google Merchant Center property
  /// [image_link](https://support.google.com/merchants/answer/6324350).
  /// Schema.org property [Product.image](https://schema.org/image).
  public var images: [Google_Cloud_Retail_V2alpha_Image] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Product availability. If this field is unspecified, the product is
  /// assumed to be in stock.
  public enum Availability: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default product availability. Default to
    /// [Availability.IN_STOCK][google.cloud.retail.v2alpha.Product.Availability.IN_STOCK]
    /// if unset.
    case unspecified // = 0

    /// Product in stock.
    case inStock // = 1

    /// Product out of stock.
    case outOfStock // = 2

    /// Product that is in pre-order state.
    case preorder // = 3

    /// Product that is back-ordered (i.e. temporarily out of stock).
    case backorder // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .inStock
      case 2: self = .outOfStock
      case 3: self = .preorder
      case 4: self = .backorder
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .inStock: return 1
      case .outOfStock: return 2
      case .preorder: return 3
      case .backorder: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Retail_V2alpha_Product.Availability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Retail_V2alpha_Product.Availability] = [
    .unspecified,
    .inStock,
    .outOfStock,
    .preorder,
    .backorder,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.retail.v2alpha"

extension Google_Cloud_Retail_V2alpha_Product: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Product"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    4: .standard(proto: "primary_product_id"),
    7: .same(proto: "categories"),
    8: .same(proto: "title"),
    10: .same(proto: "description"),
    12: .same(proto: "attributes"),
    13: .same(proto: "tags"),
    14: .standard(proto: "price_info"),
    18: .standard(proto: "available_time"),
    19: .same(proto: "availability"),
    20: .standard(proto: "available_quantity"),
    22: .same(proto: "uri"),
    23: .same(proto: "images"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _id: String = String()
    var _primaryProductID: String = String()
    var _categories: [String] = []
    var _title: String = String()
    var _description_p: String = String()
    var _attributes: Dictionary<String,Google_Cloud_Retail_V2alpha_CustomAttribute> = [:]
    var _tags: [String] = []
    var _priceInfo: Google_Cloud_Retail_V2alpha_PriceInfo? = nil
    var _availableTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _availability: Google_Cloud_Retail_V2alpha_Product.Availability = .unspecified
    var _availableQuantity: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _uri: String = String()
    var _images: [Google_Cloud_Retail_V2alpha_Image] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _id = source._id
      _primaryProductID = source._primaryProductID
      _categories = source._categories
      _title = source._title
      _description_p = source._description_p
      _attributes = source._attributes
      _tags = source._tags
      _priceInfo = source._priceInfo
      _availableTime = source._availableTime
      _availability = source._availability
      _availableQuantity = source._availableQuantity
      _uri = source._uri
      _images = source._images
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._primaryProductID) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._categories) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Retail_V2alpha_CustomAttribute>.self, value: &_storage._attributes) }()
        case 13: try { try decoder.decodeRepeatedStringField(value: &_storage._tags) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._priceInfo) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._availableTime) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._availability) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._availableQuantity) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 23: try { try decoder.decodeRepeatedMessageField(value: &_storage._images) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._primaryProductID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._primaryProductID, fieldNumber: 4)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._categories, fieldNumber: 7)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 8)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 10)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Retail_V2alpha_CustomAttribute>.self, value: _storage._attributes, fieldNumber: 12)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 13)
      }
      if let v = _storage._priceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._availableTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if _storage._availability != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._availability, fieldNumber: 19)
      }
      if let v = _storage._availableQuantity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 22)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_Product, rhs: Google_Cloud_Retail_V2alpha_Product) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._primaryProductID != rhs_storage._primaryProductID {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._priceInfo != rhs_storage._priceInfo {return false}
        if _storage._availableTime != rhs_storage._availableTime {return false}
        if _storage._availability != rhs_storage._availability {return false}
        if _storage._availableQuantity != rhs_storage._availableQuantity {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._images != rhs_storage._images {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_Product.Availability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AVAILABILITY_UNSPECIFIED"),
    1: .same(proto: "IN_STOCK"),
    2: .same(proto: "OUT_OF_STOCK"),
    3: .same(proto: "PREORDER"),
    4: .same(proto: "BACKORDER"),
  ]
}
