// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/retail/v2alpha/export_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The output configuration setting.
public struct Google_Cloud_Retail_V2alpha_OutputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The configuration of destination for holding output data.
  public var destination: Google_Cloud_Retail_V2alpha_OutputConfig.OneOf_Destination? = nil

  /// The Google Cloud Storage location where the output is to be written to.
  public var gcsDestination: Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  /// The BigQuery location where the output is to be written to.
  public var bigqueryDestination: Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination {
    get {
      if case .bigqueryDestination(let v)? = destination {return v}
      return Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination()
    }
    set {destination = .bigqueryDestination(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The configuration of destination for holding output data.
  public enum OneOf_Destination: Equatable {
    /// The Google Cloud Storage location where the output is to be written to.
    case gcsDestination(Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination)
    /// The BigQuery location where the output is to be written to.
    case bigqueryDestination(Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Retail_V2alpha_OutputConfig.OneOf_Destination, rhs: Google_Cloud_Retail_V2alpha_OutputConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bigqueryDestination, .bigqueryDestination): return {
        guard case .bigqueryDestination(let l) = lhs, case .bigqueryDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// The Google Cloud Storage output destination configuration.
  public struct GcsDestination {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The output uri prefix for saving output data to json files.
    /// Some mapping examples are as follows:
    /// output_uri_prefix         sample output(assuming the object is foo.json)
    /// ========================  =============================================
    /// gs://bucket/              gs://bucket/foo.json
    /// gs://bucket/folder/       gs://bucket/folder/foo.json
    /// gs://bucket/folder/item_  gs://bucket/folder/item_foo.json
    public var outputUriPrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// The BigQuery output destination configuration.
  public struct BigQueryDestination {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The ID of a BigQuery Dataset.
    public var datasetID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Configuration of destination for Export related errors.
public struct Google_Cloud_Retail_V2alpha_ExportErrorsConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Errors destination.
  public var destination: Google_Cloud_Retail_V2alpha_ExportErrorsConfig.OneOf_Destination? = nil

  /// Google Cloud Storage path for import errors. This must be an empty,
  /// existing Cloud Storage bucket. Export errors will be written to a file in
  /// this bucket, one per line, as a JSON-encoded
  /// `google.rpc.Status` message.
  public var gcsPrefix: String {
    get {
      if case .gcsPrefix(let v)? = destination {return v}
      return String()
    }
    set {destination = .gcsPrefix(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Errors destination.
  public enum OneOf_Destination: Equatable {
    /// Google Cloud Storage path for import errors. This must be an empty,
    /// existing Cloud Storage bucket. Export errors will be written to a file in
    /// this bucket, one per line, as a JSON-encoded
    /// `google.rpc.Status` message.
    case gcsPrefix(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportErrorsConfig.OneOf_Destination, rhs: Google_Cloud_Retail_V2alpha_ExportErrorsConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsPrefix, .gcsPrefix): return {
        guard case .gcsPrefix(let l) = lhs, case .gcsPrefix(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Request message for ExportProducts method.
public struct Google_Cloud_Retail_V2alpha_ExportProductsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required.
  /// "projects/1234/locations/global/catalogs/default_catalog/branches/default_branch"
  public var parent: String = String()

  /// Required. The desired output location of the data.
  public var outputConfig: Google_Cloud_Retail_V2alpha_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Retail_V2alpha_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  /// Filtering expression to specify restrictions over
  /// returned products. This is a sequence of terms, where each term applies
  /// some kind of a restriction to the returned products. Use this expression to
  /// restrict results to a specific time range, tag, stock state or filter
  /// products by product type.
  ///    eg: lastModifiedTime > "2012-04-23T18:25:43.511Z"
  ///    lastModifiedTime<"2012-04-23T18:25:43.511Z" productType=primary
  ///
  ///   We expect only 4 types of fields:
  ///
  ///    * lastModifiedTime: this can be specified a maximum of 2 times, once
  ///    with a
  ///      less than operator and once with a greater than operator. The
  ///      lastModifiedTime restrict should result in one contiguous valid last
  ///      modified time range.
  ///
  ///    * productType: supported values are 'primary' and 'variant'. Boolean
  ///    operators `OR` and `NOT` are supported if the
  ///      expression is enclosed in parentheses, and must be separated from the
  ///      productType values by a space.
  ///
  ///    * availability: supported values are IN_STOCK, OUT_OF_STOCK,
  ///    PREORDER and BACKORDER. Boolean operators `OR` and `NOT` are
  ///    supported if the
  ///      expression is enclosed in parentheses, and must be separated from the
  ///      availability values by a space.
  ///
  ///    * Tag expressions. Restricts output to products that match all of the
  ///      specified tags. Boolean operators `OR` and `NOT` are supported if the
  ///      expression is enclosed in parentheses, and must be separated from the
  ///      tag values by a space. `-"tagA"` is also supported and is equivalent
  ///      to `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded
  ///      strings with a size limit of 1,000 characters.
  ///
  ///   Some examples of valid filters expressions:
  ///
  ///   * Example 1: lastModifiedTime > "2012-04-23T18:25:43.511Z"
  ///             lastModifiedTime < "2012-04-23T18:30:43.511Z"
  ///   * Example 2: lastModifiedTime > "2012-04-23T18:25:43.511Z"
  ///             productType = "variant"
  ///   * Example 3: tag=("Red" OR "Blue") tag="New-Arrival"
  ///             tag=(NOT "promotional")
  ///             productType = "primary" lastModifiedTime <
  ///             "2018-04-23T18:30:43.511Z"
  ///   * Example 4: lastModifiedTime > "2012-04-23T18:25:43.511Z"
  ///   * Example 5: availability = (IN_STOCK OR BACKORDER)
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _outputConfig: Google_Cloud_Retail_V2alpha_OutputConfig? = nil
}

/// Request message for ExportUserEvents method.
public struct Google_Cloud_Retail_V2alpha_ExportUserEventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. "projects/1234/locations/global/catalogs/default_catalog"
  public var parent: String = String()

  /// Required. The desired output location of the data.
  public var outputConfig: Google_Cloud_Retail_V2alpha_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Retail_V2alpha_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  /// Filtering expression to specify restrictions over
  /// returned events. This is a sequence of terms, where each term applies some
  /// kind of a restriction to the returned user events. Use this expression to
  /// restrict results to a specific time range, or filter events by eventType.
  ///    eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
  ///    eventTime<"2012-04-23T18:25:43.511Z" eventType=search
  ///
  ///   We expect only 3 types of fields:
  ///
  ///    * eventTime: this can be specified a maximum of 2 times, once with a
  ///      less than operator and once with a greater than operator. The
  ///      eventTime restrict should result in one contiguous valid eventTime
  ///      range.
  ///
  ///    * eventType: Boolean operators `OR` and `NOT` are supported if the
  ///      expression is enclosed in parentheses, and must be separated from the
  ///      tag values by a space.
  ///
  ///    * eventsMissingCatalogItems: specifying this will restrict results
  ///      to events for which catalog items were not found in the catalog. The
  ///      default behavior is to return only those events for which catalog
  ///      items were found.
  ///
  ///   Some examples of valid filters expressions:
  ///
  ///   * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
  ///             eventTime < "2012-04-23T18:30:43.511Z"
  ///   * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
  ///             eventType = detail-page-view
  ///   * Example 3: eventsMissingCatalogItems
  ///             eventType = (NOT search) eventTime < "2018-04-23T18:30:43.511Z"
  ///   * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
  ///   * Example 5: eventType = (search OR impression)
  ///   * Example 6: eventsMissingCatalogItems
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _outputConfig: Google_Cloud_Retail_V2alpha_OutputConfig? = nil
}

/// Metadata related to the progress of the Export operation. This will be
/// returned by the google.longrunning.Operation.metadata field.
public struct Google_Cloud_Retail_V2alpha_ExportMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Operation create time.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Operation last update time. If the operation is done, this is also the
  /// finish time.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response of the ExportProductsRequest. If the long running
/// operation is done, then this message is returned by the
/// google.longrunning.Operations.response field if the operation was successful.
public struct Google_Cloud_Retail_V2alpha_ExportProductsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A sample of errors encountered while processing the request.
  public var errorSamples: [Google_Rpc_Status] = []

  /// Echoes the destination for the complete errors in the request if set.
  public var errorsConfig: Google_Cloud_Retail_V2alpha_ExportErrorsConfig {
    get {return _errorsConfig ?? Google_Cloud_Retail_V2alpha_ExportErrorsConfig()}
    set {_errorsConfig = newValue}
  }
  /// Returns true if `errorsConfig` has been explicitly set.
  public var hasErrorsConfig: Bool {return self._errorsConfig != nil}
  /// Clears the value of `errorsConfig`. Subsequent reads from it will return its default value.
  public mutating func clearErrorsConfig() {self._errorsConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _errorsConfig: Google_Cloud_Retail_V2alpha_ExportErrorsConfig? = nil
}

/// Response of the ExportUserEventsRequest. If the long running
/// operation was successful, then this message is returned by the
/// google.longrunning.Operations.response field if the operation was successful.
public struct Google_Cloud_Retail_V2alpha_ExportUserEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A sample of errors encountered while processing the request.
  public var errorSamples: [Google_Rpc_Status] = []

  /// Echoes the destination for the complete errors if this field was set in
  /// the request.
  public var errorsConfig: Google_Cloud_Retail_V2alpha_ExportErrorsConfig {
    get {return _errorsConfig ?? Google_Cloud_Retail_V2alpha_ExportErrorsConfig()}
    set {_errorsConfig = newValue}
  }
  /// Returns true if `errorsConfig` has been explicitly set.
  public var hasErrorsConfig: Bool {return self._errorsConfig != nil}
  /// Clears the value of `errorsConfig`. Subsequent reads from it will return its default value.
  public mutating func clearErrorsConfig() {self._errorsConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _errorsConfig: Google_Cloud_Retail_V2alpha_ExportErrorsConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.retail.v2alpha"

extension Google_Cloud_Retail_V2alpha_OutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
    2: .standard(proto: "bigquery_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .bigqueryDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .bigqueryDestination(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.destination {
    case .gcsDestination?: try {
      guard case .gcsDestination(let v)? = self.destination else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .bigqueryDestination?: try {
      guard case .bigqueryDestination(let v)? = self.destination else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_OutputConfig, rhs: Google_Cloud_Retail_V2alpha_OutputConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Retail_V2alpha_OutputConfig.protoMessageName + ".GcsDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_uri_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.outputUriPrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputUriPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.outputUriPrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination, rhs: Google_Cloud_Retail_V2alpha_OutputConfig.GcsDestination) -> Bool {
    if lhs.outputUriPrefix != rhs.outputUriPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Retail_V2alpha_OutputConfig.protoMessageName + ".BigQueryDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dataset_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.datasetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.datasetID.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination, rhs: Google_Cloud_Retail_V2alpha_OutputConfig.BigQueryDestination) -> Bool {
    if lhs.datasetID != rhs.datasetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_ExportErrorsConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportErrorsConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.destination != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.destination = .gcsPrefix(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsPrefix(let v)? = self.destination {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportErrorsConfig, rhs: Google_Cloud_Retail_V2alpha_ExportErrorsConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_ExportProductsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportProductsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "output_config"),
    3: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportProductsRequest, rhs: Google_Cloud_Retail_V2alpha_ExportProductsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_ExportUserEventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportUserEventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "output_config"),
    3: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportUserEventsRequest, rhs: Google_Cloud_Retail_V2alpha_ExportUserEventsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_ExportMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "create_time"),
    2: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportMetadata, rhs: Google_Cloud_Retail_V2alpha_ExportMetadata) -> Bool {
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_ExportProductsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportProductsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_samples"),
    2: .standard(proto: "errors_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.errorSamples) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._errorsConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errorSamples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errorSamples, fieldNumber: 1)
    }
    if let v = self._errorsConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportProductsResponse, rhs: Google_Cloud_Retail_V2alpha_ExportProductsResponse) -> Bool {
    if lhs.errorSamples != rhs.errorSamples {return false}
    if lhs._errorsConfig != rhs._errorsConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Retail_V2alpha_ExportUserEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportUserEventsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_samples"),
    2: .standard(proto: "errors_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.errorSamples) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._errorsConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errorSamples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errorSamples, fieldNumber: 1)
    }
    if let v = self._errorsConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Retail_V2alpha_ExportUserEventsResponse, rhs: Google_Cloud_Retail_V2alpha_ExportUserEventsResponse) -> Bool {
    if lhs.errorSamples != rhs.errorSamples {return false}
    if lhs._errorsConfig != rhs._errorsConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
