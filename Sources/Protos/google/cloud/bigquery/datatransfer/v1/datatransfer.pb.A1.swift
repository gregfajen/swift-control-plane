// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a data source parameter with validation rules, so that
/// parameters can be rendered in the UI. These parameters are given to us by
/// supported data sources, and include all needed information for rendering
/// and validation.
/// Thus, whoever uses this api can decide to generate either generic ui,
/// or custom data source specific forms.
public struct Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Parameter identifier.
  public var paramID: String = String()

  /// Parameter display name in the user interface.
  public var displayName: String = String()

  /// Parameter description.
  public var description_p: String = String()

  /// Parameter type.
  public var type: Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter.TypeEnum = .unspecified

  /// Is parameter required.
  public var required: Bool = false

  /// Deprecated. This field has no effect.
  public var repeated: Bool = false

  /// Regular expression which can be used for parameter validation.
  public var validationRegex: String = String()

  /// All possible values for the parameter.
  public var allowedValues: [String] = []

  /// For integer and double values specifies minimum allowed value.
  public var minValue: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _minValue ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_minValue = newValue}
  }
  /// Returns true if `minValue` has been explicitly set.
  public var hasMinValue: Bool {return self._minValue != nil}
  /// Clears the value of `minValue`. Subsequent reads from it will return its default value.
  public mutating func clearMinValue() {self._minValue = nil}

  /// For integer and double values specifies maxminum allowed value.
  public var maxValue: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _maxValue ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_maxValue = newValue}
  }
  /// Returns true if `maxValue` has been explicitly set.
  public var hasMaxValue: Bool {return self._maxValue != nil}
  /// Clears the value of `maxValue`. Subsequent reads from it will return its default value.
  public mutating func clearMaxValue() {self._maxValue = nil}

  /// Deprecated. This field has no effect.
  public var fields: [Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter] = []

  /// Description of the requirements for this field, in case the user input does
  /// not fulfill the regex pattern or min/max values.
  public var validationDescription: String = String()

  /// URL to a help document to further explain the naming requirements.
  public var validationHelpURL: String = String()

  /// Cannot be changed after initial creation.
  public var immutable: Bool = false

  /// Deprecated. This field has no effect.
  public var recurse: Bool = false

  /// If true, it should not be used in new transfers, and it should not be
  /// visible to users.
  public var deprecated: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Parameter type.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Type unspecified.
    case unspecified // = 0

    /// String parameter.
    case string // = 1

    /// Integer parameter (64-bits).
    /// Will be serialized to json as string.
    case integer // = 2

    /// Double precision floating point parameter.
    case double // = 3

    /// Boolean parameter.
    case boolean // = 4

    /// Deprecated. This field has no effect.
    case record // = 5

    /// Page ID for a Google+ Page.
    case plusPage // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .string
      case 2: self = .integer
      case 3: self = .double
      case 4: self = .boolean
      case 5: self = .record
      case 6: self = .plusPage
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .string: return 1
      case .integer: return 2
      case .double: return 3
      case .boolean: return 4
      case .record: return 5
      case .plusPage: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _minValue: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _maxValue: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter.TypeEnum] = [
    .unspecified,
    .string,
    .integer,
    .double,
    .boolean,
    .record,
    .plusPage,
  ]
}

#endif  // swift(>=4.2)

/// Represents data source metadata. Metadata is sufficient to
/// render UI and request proper OAuth tokens.
public struct Google_Cloud_Bigquery_Datatransfer_V1_DataSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Data source resource name.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Data source id.
  public var dataSourceID: String {
    get {return _storage._dataSourceID}
    set {_uniqueStorage()._dataSourceID = newValue}
  }

  /// User friendly data source name.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// User friendly data source description string.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Data source client id which should be used to receive refresh token.
  public var clientID: String {
    get {return _storage._clientID}
    set {_uniqueStorage()._clientID = newValue}
  }

  /// Api auth scopes for which refresh token needs to be obtained. These are
  /// scopes needed by a data source to prepare data and ingest them into
  /// BigQuery, e.g., https://www.googleapis.com/auth/bigquery
  public var scopes: [String] {
    get {return _storage._scopes}
    set {_uniqueStorage()._scopes = newValue}
  }

  /// Deprecated. This field has no effect.
  public var transferType: Google_Cloud_Bigquery_Datatransfer_V1_TransferType {
    get {return _storage._transferType}
    set {_uniqueStorage()._transferType = newValue}
  }

  /// Deprecated. This field has no effect.
  public var supportsMultipleTransfers: Bool {
    get {return _storage._supportsMultipleTransfers}
    set {_uniqueStorage()._supportsMultipleTransfers = newValue}
  }

  /// The number of seconds to wait for an update from the data source
  /// before the Data Transfer Service marks the transfer as FAILED.
  public var updateDeadlineSeconds: Int32 {
    get {return _storage._updateDeadlineSeconds}
    set {_uniqueStorage()._updateDeadlineSeconds = newValue}
  }

  /// Default data transfer schedule.
  /// Examples of valid schedules include:
  /// `1st,3rd monday of month 15:30`,
  /// `every wed,fri of jan,jun 13:15`, and
  /// `first sunday of quarter 00:00`.
  public var defaultSchedule: String {
    get {return _storage._defaultSchedule}
    set {_uniqueStorage()._defaultSchedule = newValue}
  }

  /// Specifies whether the data source supports a user defined schedule, or
  /// operates on the default schedule.
  /// When set to `true`, user can override default schedule.
  public var supportsCustomSchedule: Bool {
    get {return _storage._supportsCustomSchedule}
    set {_uniqueStorage()._supportsCustomSchedule = newValue}
  }

  /// Data source parameters.
  public var parameters: [Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  /// Url for the help document for this data source.
  public var helpURL: String {
    get {return _storage._helpURL}
    set {_uniqueStorage()._helpURL = newValue}
  }

  /// Indicates the type of authorization.
  public var authorizationType: Google_Cloud_Bigquery_Datatransfer_V1_DataSource.AuthorizationType {
    get {return _storage._authorizationType}
    set {_uniqueStorage()._authorizationType = newValue}
  }

  /// Specifies whether the data source supports automatic data refresh for the
  /// past few days, and how it's supported.
  /// For some data sources, data might not be complete until a few days later,
  /// so it's useful to refresh data automatically.
  public var dataRefreshType: Google_Cloud_Bigquery_Datatransfer_V1_DataSource.DataRefreshType {
    get {return _storage._dataRefreshType}
    set {_uniqueStorage()._dataRefreshType = newValue}
  }

  /// Default data refresh window on days.
  /// Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
  public var defaultDataRefreshWindowDays: Int32 {
    get {return _storage._defaultDataRefreshWindowDays}
    set {_uniqueStorage()._defaultDataRefreshWindowDays = newValue}
  }

  /// Disables backfilling and manual run scheduling
  /// for the data source.
  public var manualRunsDisabled: Bool {
    get {return _storage._manualRunsDisabled}
    set {_uniqueStorage()._manualRunsDisabled = newValue}
  }

  /// The minimum interval for scheduler to schedule runs.
  public var minimumScheduleInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._minimumScheduleInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._minimumScheduleInterval = newValue}
  }
  /// Returns true if `minimumScheduleInterval` has been explicitly set.
  public var hasMinimumScheduleInterval: Bool {return _storage._minimumScheduleInterval != nil}
  /// Clears the value of `minimumScheduleInterval`. Subsequent reads from it will return its default value.
  public mutating func clearMinimumScheduleInterval() {_uniqueStorage()._minimumScheduleInterval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of authorization needed for this data source.
  public enum AuthorizationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Type unspecified.
    case unspecified // = 0

    /// Use OAuth 2 authorization codes that can be exchanged
    /// for a refresh token on the backend.
    case authorizationCode // = 1

    /// Return an authorization code for a given Google+ page that can then be
    /// exchanged for a refresh token on the backend.
    case googlePlusAuthorizationCode // = 2

    /// Use First Party Client OAuth. First Party Client OAuth doesn't require a
    /// refresh token to get an offline access token. Instead, it uses a
    /// client-signed JWT assertion to retrieve an access token.
    case firstPartyOauth // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .authorizationCode
      case 2: self = .googlePlusAuthorizationCode
      case 3: self = .firstPartyOauth
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .authorizationCode: return 1
      case .googlePlusAuthorizationCode: return 2
      case .firstPartyOauth: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Represents how the data source supports data auto refresh.
  public enum DataRefreshType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The data source won't support data auto refresh, which is default value.
    case unspecified // = 0

    /// The data source supports data auto refresh, and runs will be scheduled
    /// for the past few days. Does not allow custom values to be set for each
    /// transfer config.
    case slidingWindow // = 1

    /// The data source supports data auto refresh, and runs will be scheduled
    /// for the past few days. Allows custom values to be set for each transfer
    /// config.
    case customSlidingWindow // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .slidingWindow
      case 2: self = .customSlidingWindow
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .slidingWindow: return 1
      case .customSlidingWindow: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSource.AuthorizationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Datatransfer_V1_DataSource.AuthorizationType] = [
    .unspecified,
    .authorizationCode,
    .googlePlusAuthorizationCode,
    .firstPartyOauth,
  ]
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSource.DataRefreshType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Datatransfer_V1_DataSource.DataRefreshType] = [
    .unspecified,
    .slidingWindow,
    .customSlidingWindow,
  ]
}

#endif  // swift(>=4.2)

/// A request to get data source info.
public struct Google_Cloud_Bigquery_Datatransfer_V1_GetDataSourceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field will contain name of the resource requested, for example:
  /// `projects/{project_id}/dataSources/{data_source_id}` or
  /// `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request to list supported data sources and their data transfer settings.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The BigQuery project id for which data sources should be returned.
  /// Must be in the form: `projects/{project_id}` or
  /// `projects/{project_id}/locations/{location_id}
  public var parent: String = String()

  /// Pagination token, which can be used to request a specific page
  /// of `ListDataSourcesRequest` list results. For multiple-page
  /// results, `ListDataSourcesResponse` outputs
  /// a `next_page` token, which can be used as the
  /// `page_token` value to request the next page of list results.
  public var pageToken: String = String()

  /// Page size. The default page size is the maximum value of 1000 results.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Returns list of supported data sources and their metadata.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of supported data sources and their transfer settings.
  public var dataSources: [Google_Cloud_Bigquery_Datatransfer_V1_DataSource] = []

  /// Output only. The next-pagination token. For multiple-page list results,
  /// this token can be used as the
  /// `ListDataSourcesRequest.page_token`
  /// to request the next page of list results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to create a data transfer configuration. If new credentials are
/// needed for this transfer configuration, an authorization code must be
/// provided. If an authorization code is provided, the transfer configuration
/// will be associated with the user id corresponding to the
/// authorization code. Otherwise, the transfer configuration will be associated
/// with the calling user.
public struct Google_Cloud_Bigquery_Datatransfer_V1_CreateTransferConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The BigQuery project id where the transfer configuration should be created.
  /// Must be in the format projects/{project_id}/locations/{location_id} or
  /// projects/{project_id}. If specified location and location of the
  /// destination bigquery dataset do not match - the request will fail.
  public var parent: String = String()

  /// Required. Data transfer configuration to create.
  public var transferConfig: Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig {
    get {return _transferConfig ?? Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig()}
    set {_transferConfig = newValue}
  }
  /// Returns true if `transferConfig` has been explicitly set.
  public var hasTransferConfig: Bool {return self._transferConfig != nil}
  /// Clears the value of `transferConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTransferConfig() {self._transferConfig = nil}

  /// Optional OAuth2 authorization code to use with this transfer configuration.
  /// This is required if new credentials are needed, as indicated by
  /// `CheckValidCreds`.
  /// In order to obtain authorization_code, please make a
  /// request to
  /// https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
  ///
  /// * client_id should be OAuth client_id of BigQuery DTS API for the given
  ///   data source returned by ListDataSources method.
  /// * data_source_scopes are the scopes returned by ListDataSources method.
  /// * redirect_uri is an optional parameter. If not specified, then
  ///   authorization code is posted to the opener of authorization flow window.
  ///   Otherwise it will be sent to the redirect uri. A special value of
  ///   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
  ///   returned in the title bar of the browser, with the page text prompting
  ///   the user to copy the code and paste it in the application.
  public var authorizationCode: String = String()

  /// Optional version info. If users want to find a very recent access token,
  /// that is, immediately after approving access, users have to set the
  /// version_info claim in the token request. To obtain the version_info, users
  /// must use the "none+gsession" response type. which be return a
  /// version_info back in the authorization response which be be put in a JWT
  /// claim in the token request.
  public var versionInfo: String = String()

  /// Optional service account name. If this field is set, transfer config will
  /// be created with this service account credentials. It requires that
  /// requesting user calling this API has permissions to act as this service
  /// account.
  public var serviceAccountName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _transferConfig: Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig? = nil
}

/// A request to update a transfer configuration. To update the user id of the
/// transfer configuration, an authorization code needs to be provided.
public struct Google_Cloud_Bigquery_Datatransfer_V1_UpdateTransferConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Data transfer configuration to create.
  public var transferConfig: Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig {
    get {return _transferConfig ?? Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig()}
    set {_transferConfig = newValue}
  }
  /// Returns true if `transferConfig` has been explicitly set.
  public var hasTransferConfig: Bool {return self._transferConfig != nil}
  /// Clears the value of `transferConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTransferConfig() {self._transferConfig = nil}

  /// Optional OAuth2 authorization code to use with this transfer configuration.
  /// If it is provided, the transfer configuration will be associated with the
  /// authorizing user.
  /// In order to obtain authorization_code, please make a
  /// request to
  /// https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
  ///
  /// * client_id should be OAuth client_id of BigQuery DTS API for the given
  ///   data source returned by ListDataSources method.
  /// * data_source_scopes are the scopes returned by ListDataSources method.
  /// * redirect_uri is an optional parameter. If not specified, then
  ///   authorization code is posted to the opener of authorization flow window.
  ///   Otherwise it will be sent to the redirect uri. A special value of
  ///   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
  ///   returned in the title bar of the browser, with the page text prompting
  ///   the user to copy the code and paste it in the application.
  public var authorizationCode: String = String()

  /// Required. Required list of fields to be updated in this request.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// Optional version info. If users want to find a very recent access token,
  /// that is, immediately after approving access, users have to set the
  /// version_info claim in the token request. To obtain the version_info, users
  /// must use the "none+gsession" response type. which be return a
  /// version_info back in the authorization response which be be put in a JWT
  /// claim in the token request.
  public var versionInfo: String = String()

  /// Optional service account name. If this field is set and
  /// "service_account_name" is set in update_mask, transfer config will be
  /// updated to use this service account credentials. It requires that
  /// requesting user calling this API has permissions to act as this service
  /// account.
  public var serviceAccountName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _transferConfig: Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// A request to get data transfer information.
public struct Google_Cloud_Bigquery_Datatransfer_V1_GetTransferConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field will contain name of the resource requested, for example:
  /// `projects/{project_id}/transferConfigs/{config_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to delete data transfer information. All associated transfer runs
/// and log messages will be deleted as well.
public struct Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field will contain name of the resource requested, for example:
  /// `projects/{project_id}/transferConfigs/{config_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to get data transfer run information.
public struct Google_Cloud_Bigquery_Datatransfer_V1_GetTransferRunRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field will contain name of the resource requested, for example:
  /// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to delete data transfer run information.
public struct Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferRunRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field will contain name of the resource requested, for example:
  /// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to list data transfers configured for a BigQuery project.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The BigQuery project id for which data sources
  /// should be returned: `projects/{project_id}` or
  /// `projects/{project_id}/locations/{location_id}`
  public var parent: String = String()

  /// When specified, only configurations of requested data sources are returned.
  public var dataSourceIds: [String] = []

  /// Pagination token, which can be used to request a specific page
  /// of `ListTransfersRequest` list results. For multiple-page
  /// results, `ListTransfersResponse` outputs
  /// a `next_page` token, which can be used as the
  /// `page_token` value to request the next page of list results.
  public var pageToken: String = String()

  /// Page size. The default page size is the maximum value of 1000 results.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The returned list of pipelines in the project.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The stored pipeline transfer configurations.
  public var transferConfigs: [Google_Cloud_Bigquery_Datatransfer_V1_TransferConfig] = []

  /// Output only. The next-pagination token. For multiple-page list results,
  /// this token can be used as the
  /// `ListTransferConfigsRequest.page_token`
  /// to request the next page of list results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to list data transfer runs. UI can use this method to show/filter
/// specific data transfer runs. The data source can use this method to request
/// all scheduled transfer runs.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of transfer configuration for which transfer runs should be retrieved.
  /// Format of transfer configuration resource name is:
  /// `projects/{project_id}/transferConfigs/{config_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
  public var parent: String = String()

  /// When specified, only transfer runs with requested states are returned.
  public var states: [Google_Cloud_Bigquery_Datatransfer_V1_TransferState] = []

  /// Pagination token, which can be used to request a specific page
  /// of `ListTransferRunsRequest` list results. For multiple-page
  /// results, `ListTransferRunsResponse` outputs
  /// a `next_page` token, which can be used as the
  /// `page_token` value to request the next page of list results.
  public var pageToken: String = String()

  /// Page size. The default page size is the maximum value of 1000 results.
  public var pageSize: Int32 = 0

  /// Indicates how run attempts are to be pulled.
  public var runAttempt: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest.RunAttempt = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents which runs should be pulled.
  public enum RunAttempt: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// All runs should be returned.
    case unspecified // = 0

    /// Only latest run per day should be returned.
    case latest // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .latest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .latest: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest.RunAttempt: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest.RunAttempt] = [
    .unspecified,
    .latest,
  ]
}

#endif  // swift(>=4.2)

/// The returned list of pipelines in the project.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The stored pipeline transfer runs.
  public var transferRuns: [Google_Cloud_Bigquery_Datatransfer_V1_TransferRun] = []

  /// Output only. The next-pagination token. For multiple-page list results,
  /// this token can be used as the
  /// `ListTransferRunsRequest.page_token`
  /// to request the next page of list results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to get user facing log messages associated with data transfer run.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Transfer run name in the form:
  /// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
  public var parent: String = String()

  /// Pagination token, which can be used to request a specific page
  /// of `ListTransferLogsRequest` list results. For multiple-page
  /// results, `ListTransferLogsResponse` outputs
  /// a `next_page` token, which can be used as the
  /// `page_token` value to request the next page of list results.
  public var pageToken: String = String()

  /// Page size. The default page size is the maximum value of 1000 results.
  public var pageSize: Int32 = 0

  /// Message types to return. If not populated - INFO, WARNING and ERROR
  /// messages are returned.
  public var messageTypes: [Google_Cloud_Bigquery_Datatransfer_V1_TransferMessage.MessageSeverity] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The returned list transfer run messages.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The stored pipeline transfer messages.
  public var transferMessages: [Google_Cloud_Bigquery_Datatransfer_V1_TransferMessage] = []

  /// Output only. The next-pagination token. For multiple-page list results,
  /// this token can be used as the
  /// `GetTransferRunLogRequest.page_token`
  /// to request the next page of list results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to determine whether the user has valid credentials. This method
/// is used to limit the number of OAuth popups in the user interface. The
/// user id is inferred from the API call context.
/// If the data source has the Google+ authorization type, this method
/// returns false, as it cannot be determined whether the credentials are
/// already valid merely based on the user id.
public struct Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The data source in the form:
  /// `projects/{project_id}/dataSources/{data_source_id}` or
  /// `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A response indicating whether the credentials exist and are valid.
public struct Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If set to `true`, the credentials exist and are valid.
  public var hasValidCreds_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to schedule transfer runs for a time range.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Transfer configuration name in the form:
  /// `projects/{project_id}/transferConfigs/{config_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
  public var parent: String = String()

  /// Required. Start time of the range of transfer runs. For example,
  /// `"2017-05-25T00:00:00+00:00"`.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Required. End time of the range of transfer runs. For example,
  /// `"2017-05-30T00:00:00+00:00"`.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A response to schedule transfer runs for a time range.
public struct Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The transfer runs that were scheduled.
  public var runs: [Google_Cloud_Bigquery_Datatransfer_V1_TransferRun] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to start manual transfer runs.
public struct Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transfer configuration name in the form:
  /// `projects/{project_id}/transferConfigs/{config_id}` or
  /// `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
  public var parent: String = String()

  /// The requested time specification - this can be a time range or a specific
  /// run_time.
  public var time: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.OneOf_Time? = nil

  /// Time range for the transfer runs that should be started.
  public var requestedTimeRange: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange {
    get {
      if case .requestedTimeRange(let v)? = time {return v}
      return Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange()
    }
    set {time = .requestedTimeRange(newValue)}
  }

  /// Specific run_time for a transfer run to be started. The
  /// requested_run_time must not be in the future.
  public var requestedRunTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .requestedRunTime(let v)? = time {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {time = .requestedRunTime(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The requested time specification - this can be a time range or a specific
  /// run_time.
  public enum OneOf_Time: Equatable {
    /// Time range for the transfer runs that should be started.
    case requestedTimeRange(Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange)
    /// Specific run_time for a transfer run to be started. The
    /// requested_run_time must not be in the future.
    case requestedRunTime(SwiftProtobuf.Google_Protobuf_Timestamp)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.OneOf_Time, rhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.OneOf_Time) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.requestedTimeRange, .requestedTimeRange): return {
        guard case .requestedTimeRange(let l) = lhs, case .requestedTimeRange(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.requestedRunTime, .requestedRunTime): return {
        guard case .requestedRunTime(let l) = lhs, case .requestedRunTime(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// A specification for a time range, this will request transfer runs with
  /// run_time between start_time (inclusive) and end_time (exclusive).
  public struct TimeRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Start time of the range of transfer runs. For example,
    /// `"2017-05-25T00:00:00+00:00"`. The start_time must be strictly less than
    /// the end_time. Creates transfer runs where run_time is in the range betwen
    /// start_time (inclusive) and end_time (exlusive).
    public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_startTime = newValue}
    }
    /// Returns true if `startTime` has been explicitly set.
    public var hasStartTime: Bool {return self._startTime != nil}
    /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
    public mutating func clearStartTime() {self._startTime = nil}

    /// End time of the range of transfer runs. For example,
    /// `"2017-05-30T00:00:00+00:00"`. The end_time must not be in the future.
    /// Creates transfer runs where run_time is in the range betwen start_time
    /// (inclusive) and end_time (exlusive).
    public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_endTime = newValue}
    }
    /// Returns true if `endTime` has been explicitly set.
    public var hasEndTime: Bool {return self._endTime != nil}
    /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
    public mutating func clearEndTime() {self._endTime = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

/// A response to start manual transfer runs.
public struct Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The transfer runs that were created.
  public var runs: [Google_Cloud_Bigquery_Datatransfer_V1_TransferRun] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.datatransfer.v1"

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataSourceParameter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "param_id"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "description"),
    4: .same(proto: "type"),
    5: .same(proto: "required"),
    6: .same(proto: "repeated"),
    7: .standard(proto: "validation_regex"),
    8: .standard(proto: "allowed_values"),
    9: .standard(proto: "min_value"),
    10: .standard(proto: "max_value"),
    11: .same(proto: "fields"),
    12: .standard(proto: "validation_description"),
    13: .standard(proto: "validation_help_url"),
    14: .same(proto: "immutable"),
    15: .same(proto: "recurse"),
    20: .same(proto: "deprecated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.paramID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.required) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.repeated) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.validationRegex) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.allowedValues) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._minValue) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._maxValue) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.validationDescription) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.validationHelpURL) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.immutable) }()
      case 15: try { try decoder.decodeSingularBoolField(value: &self.recurse) }()
      case 20: try { try decoder.decodeSingularBoolField(value: &self.deprecated) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.paramID.isEmpty {
      try visitor.visitSingularStringField(value: self.paramID, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    if self.required != false {
      try visitor.visitSingularBoolField(value: self.required, fieldNumber: 5)
    }
    if self.repeated != false {
      try visitor.visitSingularBoolField(value: self.repeated, fieldNumber: 6)
    }
    if !self.validationRegex.isEmpty {
      try visitor.visitSingularStringField(value: self.validationRegex, fieldNumber: 7)
    }
    if !self.allowedValues.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedValues, fieldNumber: 8)
    }
    if let v = self._minValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._maxValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 11)
    }
    if !self.validationDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.validationDescription, fieldNumber: 12)
    }
    if !self.validationHelpURL.isEmpty {
      try visitor.visitSingularStringField(value: self.validationHelpURL, fieldNumber: 13)
    }
    if self.immutable != false {
      try visitor.visitSingularBoolField(value: self.immutable, fieldNumber: 14)
    }
    if self.recurse != false {
      try visitor.visitSingularBoolField(value: self.recurse, fieldNumber: 15)
    }
    if self.deprecated != false {
      try visitor.visitSingularBoolField(value: self.deprecated, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter, rhs: Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter) -> Bool {
    if lhs.paramID != rhs.paramID {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.type != rhs.type {return false}
    if lhs.required != rhs.required {return false}
    if lhs.repeated != rhs.repeated {return false}
    if lhs.validationRegex != rhs.validationRegex {return false}
    if lhs.allowedValues != rhs.allowedValues {return false}
    if lhs._minValue != rhs._minValue {return false}
    if lhs._maxValue != rhs._maxValue {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.validationDescription != rhs.validationDescription {return false}
    if lhs.validationHelpURL != rhs.validationHelpURL {return false}
    if lhs.immutable != rhs.immutable {return false}
    if lhs.recurse != rhs.recurse {return false}
    if lhs.deprecated != rhs.deprecated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "STRING"),
    2: .same(proto: "INTEGER"),
    3: .same(proto: "DOUBLE"),
    4: .same(proto: "BOOLEAN"),
    5: .same(proto: "RECORD"),
    6: .same(proto: "PLUS_PAGE"),
  ]
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "data_source_id"),
    3: .standard(proto: "display_name"),
    4: .same(proto: "description"),
    5: .standard(proto: "client_id"),
    6: .same(proto: "scopes"),
    7: .standard(proto: "transfer_type"),
    8: .standard(proto: "supports_multiple_transfers"),
    9: .standard(proto: "update_deadline_seconds"),
    10: .standard(proto: "default_schedule"),
    11: .standard(proto: "supports_custom_schedule"),
    12: .same(proto: "parameters"),
    13: .standard(proto: "help_url"),
    14: .standard(proto: "authorization_type"),
    15: .standard(proto: "data_refresh_type"),
    16: .standard(proto: "default_data_refresh_window_days"),
    17: .standard(proto: "manual_runs_disabled"),
    18: .standard(proto: "minimum_schedule_interval"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _dataSourceID: String = String()
    var _displayName: String = String()
    var _description_p: String = String()
    var _clientID: String = String()
    var _scopes: [String] = []
    var _transferType: Google_Cloud_Bigquery_Datatransfer_V1_TransferType = .unspecified
    var _supportsMultipleTransfers: Bool = false
    var _updateDeadlineSeconds: Int32 = 0
    var _defaultSchedule: String = String()
    var _supportsCustomSchedule: Bool = false
    var _parameters: [Google_Cloud_Bigquery_Datatransfer_V1_DataSourceParameter] = []
    var _helpURL: String = String()
    var _authorizationType: Google_Cloud_Bigquery_Datatransfer_V1_DataSource.AuthorizationType = .unspecified
    var _dataRefreshType: Google_Cloud_Bigquery_Datatransfer_V1_DataSource.DataRefreshType = .unspecified
    var _defaultDataRefreshWindowDays: Int32 = 0
    var _manualRunsDisabled: Bool = false
    var _minimumScheduleInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _dataSourceID = source._dataSourceID
      _displayName = source._displayName
      _description_p = source._description_p
      _clientID = source._clientID
      _scopes = source._scopes
      _transferType = source._transferType
      _supportsMultipleTransfers = source._supportsMultipleTransfers
      _updateDeadlineSeconds = source._updateDeadlineSeconds
      _defaultSchedule = source._defaultSchedule
      _supportsCustomSchedule = source._supportsCustomSchedule
      _parameters = source._parameters
      _helpURL = source._helpURL
      _authorizationType = source._authorizationType
      _dataRefreshType = source._dataRefreshType
      _defaultDataRefreshWindowDays = source._defaultDataRefreshWindowDays
      _manualRunsDisabled = source._manualRunsDisabled
      _minimumScheduleInterval = source._minimumScheduleInterval
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._dataSourceID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._clientID) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._scopes) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._transferType) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._supportsMultipleTransfers) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._updateDeadlineSeconds) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._defaultSchedule) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._supportsCustomSchedule) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._parameters) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._helpURL) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._authorizationType) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._dataRefreshType) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._defaultDataRefreshWindowDays) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._manualRunsDisabled) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._minimumScheduleInterval) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._dataSourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dataSourceID, fieldNumber: 2)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._clientID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientID, fieldNumber: 5)
      }
      if !_storage._scopes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._scopes, fieldNumber: 6)
      }
      if _storage._transferType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._transferType, fieldNumber: 7)
      }
      if _storage._supportsMultipleTransfers != false {
        try visitor.visitSingularBoolField(value: _storage._supportsMultipleTransfers, fieldNumber: 8)
      }
      if _storage._updateDeadlineSeconds != 0 {
        try visitor.visitSingularInt32Field(value: _storage._updateDeadlineSeconds, fieldNumber: 9)
      }
      if !_storage._defaultSchedule.isEmpty {
        try visitor.visitSingularStringField(value: _storage._defaultSchedule, fieldNumber: 10)
      }
      if _storage._supportsCustomSchedule != false {
        try visitor.visitSingularBoolField(value: _storage._supportsCustomSchedule, fieldNumber: 11)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 12)
      }
      if !_storage._helpURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._helpURL, fieldNumber: 13)
      }
      if _storage._authorizationType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._authorizationType, fieldNumber: 14)
      }
      if _storage._dataRefreshType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._dataRefreshType, fieldNumber: 15)
      }
      if _storage._defaultDataRefreshWindowDays != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultDataRefreshWindowDays, fieldNumber: 16)
      }
      if _storage._manualRunsDisabled != false {
        try visitor.visitSingularBoolField(value: _storage._manualRunsDisabled, fieldNumber: 17)
      }
      if let v = _storage._minimumScheduleInterval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_DataSource, rhs: Google_Cloud_Bigquery_Datatransfer_V1_DataSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._dataSourceID != rhs_storage._dataSourceID {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._scopes != rhs_storage._scopes {return false}
        if _storage._transferType != rhs_storage._transferType {return false}
        if _storage._supportsMultipleTransfers != rhs_storage._supportsMultipleTransfers {return false}
        if _storage._updateDeadlineSeconds != rhs_storage._updateDeadlineSeconds {return false}
        if _storage._defaultSchedule != rhs_storage._defaultSchedule {return false}
        if _storage._supportsCustomSchedule != rhs_storage._supportsCustomSchedule {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._helpURL != rhs_storage._helpURL {return false}
        if _storage._authorizationType != rhs_storage._authorizationType {return false}
        if _storage._dataRefreshType != rhs_storage._dataRefreshType {return false}
        if _storage._defaultDataRefreshWindowDays != rhs_storage._defaultDataRefreshWindowDays {return false}
        if _storage._manualRunsDisabled != rhs_storage._manualRunsDisabled {return false}
        if _storage._minimumScheduleInterval != rhs_storage._minimumScheduleInterval {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSource.AuthorizationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHORIZATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "AUTHORIZATION_CODE"),
    2: .same(proto: "GOOGLE_PLUS_AUTHORIZATION_CODE"),
    3: .same(proto: "FIRST_PARTY_OAUTH"),
  ]
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DataSource.DataRefreshType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_REFRESH_TYPE_UNSPECIFIED"),
    1: .same(proto: "SLIDING_WINDOW"),
    2: .same(proto: "CUSTOM_SLIDING_WINDOW"),
  ]
}

extension Google_Cloud_Bigquery_Datatransfer_V1_GetDataSourceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataSourceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_GetDataSourceRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_GetDataSourceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListDataSourcesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    3: .standard(proto: "page_token"),
    4: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListDataSourcesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_sources"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataSources) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataSources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataSources, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListDataSourcesResponse) -> Bool {
    if lhs.dataSources != rhs.dataSources {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_CreateTransferConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTransferConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "transfer_config"),
    3: .standard(proto: "authorization_code"),
    5: .standard(proto: "version_info"),
    6: .standard(proto: "service_account_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._transferConfig) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.authorizationCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.versionInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.serviceAccountName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._transferConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.authorizationCode.isEmpty {
      try visitor.visitSingularStringField(value: self.authorizationCode, fieldNumber: 3)
    }
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 5)
    }
    if !self.serviceAccountName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_CreateTransferConfigRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_CreateTransferConfigRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._transferConfig != rhs._transferConfig {return false}
    if lhs.authorizationCode != rhs.authorizationCode {return false}
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs.serviceAccountName != rhs.serviceAccountName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_UpdateTransferConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateTransferConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_config"),
    3: .standard(proto: "authorization_code"),
    4: .standard(proto: "update_mask"),
    5: .standard(proto: "version_info"),
    6: .standard(proto: "service_account_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._transferConfig) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.authorizationCode) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.versionInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.serviceAccountName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transferConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.authorizationCode.isEmpty {
      try visitor.visitSingularStringField(value: self.authorizationCode, fieldNumber: 3)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.versionInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.versionInfo, fieldNumber: 5)
    }
    if !self.serviceAccountName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_UpdateTransferConfigRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_UpdateTransferConfigRequest) -> Bool {
    if lhs._transferConfig != rhs._transferConfig {return false}
    if lhs.authorizationCode != rhs.authorizationCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.versionInfo != rhs.versionInfo {return false}
    if lhs.serviceAccountName != rhs.serviceAccountName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_GetTransferConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransferConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_GetTransferConfigRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_GetTransferConfigRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteTransferConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferConfigRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferConfigRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_GetTransferRunRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransferRunRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_GetTransferRunRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_GetTransferRunRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferRunRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteTransferRunRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferRunRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_DeleteTransferRunRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransferConfigsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "data_source_ids"),
    3: .standard(proto: "page_token"),
    4: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.dataSourceIds) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.dataSourceIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataSourceIds, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.dataSourceIds != rhs.dataSourceIds {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransferConfigsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_configs"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.transferConfigs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transferConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transferConfigs, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferConfigsResponse) -> Bool {
    if lhs.transferConfigs != rhs.transferConfigs {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransferRunsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "states"),
    3: .standard(proto: "page_token"),
    4: .standard(proto: "page_size"),
    5: .standard(proto: "run_attempt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.states) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.runAttempt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.states.isEmpty {
      try visitor.visitPackedEnumField(value: self.states, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    if self.runAttempt != .unspecified {
      try visitor.visitSingularEnumField(value: self.runAttempt, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.states != rhs.states {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.runAttempt != rhs.runAttempt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsRequest.RunAttempt: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RUN_ATTEMPT_UNSPECIFIED"),
    1: .same(proto: "LATEST"),
  ]
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransferRunsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_runs"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.transferRuns) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transferRuns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transferRuns, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferRunsResponse) -> Bool {
    if lhs.transferRuns != rhs.transferRuns {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransferLogsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    4: .standard(proto: "page_token"),
    5: .standard(proto: "page_size"),
    6: .standard(proto: "message_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.messageTypes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 5)
    }
    if !self.messageTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.messageTypes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.messageTypes != rhs.messageTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTransferLogsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_messages"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.transferMessages) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transferMessages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transferMessages, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ListTransferLogsResponse) -> Bool {
    if lhs.transferMessages != rhs.transferMessages {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckValidCredsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckValidCredsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "has_valid_creds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.hasValidCreds_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hasValidCreds_p != false {
      try visitor.visitSingularBoolField(value: self.hasValidCreds_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_CheckValidCredsResponse) -> Bool {
    if lhs.hasValidCreds_p != rhs.hasValidCreds_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScheduleTransferRunsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScheduleTransferRunsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "runs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.runs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.runs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.runs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_ScheduleTransferRunsResponse) -> Bool {
    if lhs.runs != rhs.runs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartManualTransferRunsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    3: .standard(proto: "requested_time_range"),
    4: .standard(proto: "requested_run_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 3: try {
        var v: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange?
        if let current = self.time {
          try decoder.handleConflictingOneOf()
          if case .requestedTimeRange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.time = .requestedTimeRange(v)}
      }()
      case 4: try {
        var v: SwiftProtobuf.Google_Protobuf_Timestamp?
        if let current = self.time {
          try decoder.handleConflictingOneOf()
          if case .requestedRunTime(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.time = .requestedRunTime(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.time {
    case .requestedTimeRange?: try {
      guard case .requestedTimeRange(let v)? = self.time else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .requestedRunTime?: try {
      guard case .requestedRunTime(let v)? = self.time else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest, rhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.protoMessageName + ".TimeRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange, rhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsRequest.TimeRange) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartManualTransferRunsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "runs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.runs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.runs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.runs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsResponse, rhs: Google_Cloud_Bigquery_Datatransfer_V1_StartManualTransferRunsResponse) -> Bool {
    if lhs.runs != rhs.runs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
