// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/reservation/v1beta1/reservation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A reservation is a mechanism used to guarantee slots to users.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_Reservation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the reservation, e.g.,
  /// `projects/*/locations/*/reservations/team1-prod`.
  public var name: String = String()

  /// Minimum slots available to this reservation. A slot is a unit of
  /// computational power in BigQuery, and serves as the unit of parallelism.
  ///
  /// Queries using this reservation might use more slots during runtime if
  /// ignore_idle_slots is set to false.
  ///
  /// If the new reservation's slot capacity exceed the parent's slot capacity or
  /// if total slot capacity of the new reservation and its siblings exceeds the
  /// parent's slot capacity, the request will fail with
  /// `google.rpc.Code.RESOURCE_EXHAUSTED`.
  public var slotCapacity: Int64 = 0

  /// If false, any query using this reservation will use idle slots from other
  /// reservations within the same admin project. If true, a query using this
  /// reservation will execute with the slot capacity specified above at most.
  public var ignoreIdleSlots: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Capacity commitment is a way to purchase compute capacity for BigQuery jobs
/// (in the form of slots) with some committed period of usage. Annual
/// commitments renew by default. Commitments can be removed after their
/// commitment end time passes.
///
/// In order to remove annual commitment, its plan needs to be changed
/// to monthly or flex first.
///
/// A capacity commitment resource exists as a child resource of the admin
/// project.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The resource name of the capacity commitment, e.g.,
  /// `projects/myproject/locations/US/capacityCommitments/123`
  public var name: String = String()

  /// Number of slots in this commitment.
  public var slotCount: Int64 = 0

  /// Capacity commitment commitment plan.
  public var plan: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.CommitmentPlan = .unspecified

  /// Output only. State of the commitment.
  public var state: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.State = .unspecified

  /// Output only. The end of the current commitment period. It is applicable
  /// only for ACTIVE capacity commitments.
  public var commitmentEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _commitmentEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_commitmentEndTime = newValue}
  }
  /// Returns true if `commitmentEndTime` has been explicitly set.
  public var hasCommitmentEndTime: Bool {return self._commitmentEndTime != nil}
  /// Clears the value of `commitmentEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearCommitmentEndTime() {self._commitmentEndTime = nil}

  /// Output only. For FAILED commitment plan, provides the reason of failure.
  public var failureStatus: Google_Rpc_Status {
    get {return _failureStatus ?? Google_Rpc_Status()}
    set {_failureStatus = newValue}
  }
  /// Returns true if `failureStatus` has been explicitly set.
  public var hasFailureStatus: Bool {return self._failureStatus != nil}
  /// Clears the value of `failureStatus`. Subsequent reads from it will return its default value.
  public mutating func clearFailureStatus() {self._failureStatus = nil}

  /// The plan this capacity commitment is converted to after commitment_end_time
  /// passes. Once the plan is changed, committed period is extended according to
  /// commitment plan. Only applicable for ANNUAL commitments.
  public var renewalPlan: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.CommitmentPlan = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Commitment plan defines the current committed period. Capacity commitment
  /// cannot be deleted during it's committed period.
  public enum CommitmentPlan: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid plan value. Requests with this value will be rejected with
    /// error code `google.rpc.Code.INVALID_ARGUMENT`.
    case unspecified // = 0

    /// Flex commitments have committed period of 1 minute after becoming ACTIVE.
    /// After that, they are not in a committed period anymore and can be removed
    /// any time.
    case flex // = 3

    /// Trial commitments have a committed period of 182 days after becoming
    /// ACTIVE. After that, they are converted to a new commitment based on the
    /// `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so
    /// that it can be deleted right after committed period ends.
    case trial // = 5

    /// Monthly commitments have a committed period of 30 days after becoming
    /// ACTIVE. After that, they are not in a committed period anymore and can be
    /// removed any time.
    case monthly // = 2

    /// Annual commitments have a committed period of 365 days after becoming
    /// ACTIVE. After that they are converted to a new commitment based on the
    /// renewal_plan.
    case annual // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 2: self = .monthly
      case 3: self = .flex
      case 4: self = .annual
      case 5: self = .trial
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .monthly: return 2
      case .flex: return 3
      case .annual: return 4
      case .trial: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Capacity commitment can either become ACTIVE right away or transition
  /// from PENDING to ACTIVE or FAILED.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid state value.
    case unspecified // = 0

    /// Capacity commitment is pending provisioning. Pending capacity commitment
    /// does not contribute to the parent's slot_capacity.
    case pending // = 1

    /// Once slots are provisioned, capacity commitment becomes active.
    /// slot_count is added to the parent's slot_capacity.
    case active // = 2

    /// Capacity commitment is failed to be activated by the backend.
    case failed // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pending
      case 2: self = .active
      case 3: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pending: return 1
      case .active: return 2
      case .failed: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _commitmentEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _failureStatus: Google_Rpc_Status? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.CommitmentPlan: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.CommitmentPlan] = [
    .unspecified,
    .flex,
    .trial,
    .monthly,
    .annual,
  ]
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.State] = [
    .unspecified,
    .pending,
    .active,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// The request for
/// [ReservationService.CreateReservation][google.cloud.bigquery.reservation.v1beta1.ReservationService.CreateReservation].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project, location. E.g.,
  /// `projects/myproject/locations/US`
  public var parent: String = String()

  /// The reservation ID. This field must only contain lower case alphanumeric
  /// characters or dash. Max length is 64 characters.
  public var reservationID: String = String()

  /// Content of the new reservation to create.
  public var reservation: Google_Cloud_Bigquery_Reservation_V1beta1_Reservation {
    get {return _reservation ?? Google_Cloud_Bigquery_Reservation_V1beta1_Reservation()}
    set {_reservation = newValue}
  }
  /// Returns true if `reservation` has been explicitly set.
  public var hasReservation: Bool {return self._reservation != nil}
  /// Clears the value of `reservation`. Subsequent reads from it will return its default value.
  public mutating func clearReservation() {self._reservation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _reservation: Google_Cloud_Bigquery_Reservation_V1beta1_Reservation? = nil
}

/// The request for
/// [ReservationService.ListReservations][google.cloud.bigquery.reservation.v1beta1.ReservationService.ListReservations].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource name containing project and location, e.g.:
  ///   `projects/myproject/locations/US`
  public var parent: String = String()

  /// The maximum number of items to return.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous List request, if any.
  public var pageToken: String = String()

  /// Can be used to filter out reservations based on names, capacity, etc, e.g.:
  /// filter="reservation.slot_capacity > 200"
  /// filter="reservation.name = \"*dev/*\""
  /// Advanced filtering syntax can be
  /// [here](https://cloud.google.com/logging/docs/view/advanced-filters).
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response for
/// [ReservationService.ListReservations][google.cloud.bigquery.reservation.v1beta1.ReservationService.ListReservations].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of reservations visible to the user.
  public var reservations: [Google_Cloud_Bigquery_Reservation_V1beta1_Reservation] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.GetReservation][google.cloud.bigquery.reservation.v1beta1.ReservationService.GetReservation].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the reservation to retrieve. E.g.,
  ///    `projects/myproject/locations/US/reservations/team1-prod`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.DeleteReservation][google.cloud.bigquery.reservation.v1beta1.ReservationService.DeleteReservation].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the reservation to retrieve. E.g.,
  ///    `projects/myproject/locations/US/reservations/team1-prod`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.UpdateReservation][google.cloud.bigquery.reservation.v1beta1.ReservationService.UpdateReservation].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Content of the reservation to update.
  public var reservation: Google_Cloud_Bigquery_Reservation_V1beta1_Reservation {
    get {return _reservation ?? Google_Cloud_Bigquery_Reservation_V1beta1_Reservation()}
    set {_reservation = newValue}
  }
  /// Returns true if `reservation` has been explicitly set.
  public var hasReservation: Bool {return self._reservation != nil}
  /// Clears the value of `reservation`. Subsequent reads from it will return its default value.
  public mutating func clearReservation() {self._reservation = nil}

  /// Standard field mask for the set of fields to be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _reservation: Google_Cloud_Bigquery_Reservation_V1beta1_Reservation? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request for
/// [ReservationService.CreateCapacityCommitment][google.cloud.bigquery.reservation.v1beta1.ReservationService.CreateCapacityCommitment].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the parent reservation. E.g.,
  ///    `projects/myproject/locations/US`
  public var parent: String = String()

  /// Content of the capacity commitment to create.
  public var capacityCommitment: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment {
    get {return _capacityCommitment ?? Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment()}
    set {_capacityCommitment = newValue}
  }
  /// Returns true if `capacityCommitment` has been explicitly set.
  public var hasCapacityCommitment: Bool {return self._capacityCommitment != nil}
  /// Clears the value of `capacityCommitment`. Subsequent reads from it will return its default value.
  public mutating func clearCapacityCommitment() {self._capacityCommitment = nil}

  /// If true, fail the request if another project in the organization has a
  /// capacity commitment.
  public var enforceSingleAdminProjectPerOrg: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _capacityCommitment: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment? = nil
}

/// The request for
/// [ReservationService.ListCapacityCommitments][google.cloud.bigquery.reservation.v1beta1.ReservationService.ListCapacityCommitments].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the parent reservation. E.g.,
  ///    `projects/myproject/locations/US`
  public var parent: String = String()

  /// The maximum number of items to return.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous List request, if any.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response for
/// [ReservationService.ListCapacityCommitments][google.cloud.bigquery.reservation.v1beta1.ReservationService.ListCapacityCommitments].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of capacity commitments visible to the user.
  public var capacityCommitments: [Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.GetCapacityCommitment][google.cloud.bigquery.reservation.v1beta1.ReservationService.GetCapacityCommitment].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the capacity commitment to retrieve. E.g.,
  ///    `projects/myproject/locations/US/capacityCommitments/123`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.DeleteCapacityCommitment][google.cloud.bigquery.reservation.v1beta1.ReservationService.DeleteCapacityCommitment].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the capacity commitment to delete. E.g.,
  ///    `projects/myproject/locations/US/capacityCommitments/123`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.UpdateCapacityCommitment][google.cloud.bigquery.reservation.v1beta1.ReservationService.UpdateCapacityCommitment].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Content of the capacity commitment to update.
  public var capacityCommitment: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment {
    get {return _capacityCommitment ?? Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment()}
    set {_capacityCommitment = newValue}
  }
  /// Returns true if `capacityCommitment` has been explicitly set.
  public var hasCapacityCommitment: Bool {return self._capacityCommitment != nil}
  /// Clears the value of `capacityCommitment`. Subsequent reads from it will return its default value.
  public mutating func clearCapacityCommitment() {self._capacityCommitment = nil}

  /// Standard field mask for the set of fields to be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _capacityCommitment: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request for
/// [ReservationService.SplitCapacityCommitment][google.cloud.bigquery.reservation.v1beta1.ReservationService.SplitCapacityCommitment].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name e.g.,:
  ///  `projects/myproject/locations/US/capacityCommitments/123`
  public var name: String = String()

  /// Number of slots in the capacity commitment after the split.
  public var slotCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response for
/// [ReservationService.SplitCapacityCommitment][google.cloud.bigquery.reservation.v1beta1.ReservationService.SplitCapacityCommitment].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// First capacity commitment, result of a split.
  public var first: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment {
    get {return _storage._first ?? Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment()}
    set {_uniqueStorage()._first = newValue}
  }
  /// Returns true if `first` has been explicitly set.
  public var hasFirst: Bool {return _storage._first != nil}
  /// Clears the value of `first`. Subsequent reads from it will return its default value.
  public mutating func clearFirst() {_uniqueStorage()._first = nil}

  /// Second capacity commitment, result of a split.
  public var second: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment {
    get {return _storage._second ?? Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment()}
    set {_uniqueStorage()._second = newValue}
  }
  /// Returns true if `second` has been explicitly set.
  public var hasSecond: Bool {return _storage._second != nil}
  /// Clears the value of `second`. Subsequent reads from it will return its default value.
  public mutating func clearSecond() {_uniqueStorage()._second = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The request for
/// [ReservationService.MergeCapacityCommitments][google.cloud.bigquery.reservation.v1beta1.ReservationService.MergeCapacityCommitments].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Parent resource that identifies admin project and location e.g.,
  ///  `projects/myproject/locations/us`
  public var parent: String = String()

  /// Ids of capacity commitments to merge.
  /// These capacity commitments must exist under admin project and location
  /// specified in the parent.
  public var capacityCommitmentIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A Assignment allows a project to submit jobs
/// of a certain type using slots from the specified reservation.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_Assignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of the resource. E.g.:
  /// `projects/myproject/locations/US/reservations/team1-prod/assignments/123`.
  public var name: String = String()

  /// The resource which will use the reservation. E.g.
  /// `projects/myproject`, `folders/123`, or `organizations/456`.
  public var assignee: String = String()

  /// Which type of jobs will use the reservation.
  public var jobType: Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.JobType = .unspecified

  /// Output only. State of the assignment.
  public var state: Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Types of job, which could be specified when using the reservation.
  public enum JobType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid type. Requests with this value will be rejected with
    /// error code `google.rpc.Code.INVALID_ARGUMENT`.
    case unspecified // = 0

    /// Pipeline (load/export) jobs from the project will use the reservation.
    case pipeline // = 1

    /// Query jobs from the project will use the reservation.
    case query // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pipeline
      case 2: self = .query
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pipeline: return 1
      case .query: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Assignment will remain in PENDING state if no active capacity commitment is
  /// present. It will become ACTIVE when some capacity commitment becomes
  /// active.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid state value.
    case unspecified // = 0

    /// Queries from assignee will be executed as on-demand, if related
    /// assignment is pending.
    case pending // = 1

    /// Assignment is ready.
    case active // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pending
      case 2: self = .active
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pending: return 1
      case .active: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.JobType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.JobType] = [
    .unspecified,
    .pipeline,
    .query,
  ]
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.State] = [
    .unspecified,
    .pending,
    .active,
  ]
}

#endif  // swift(>=4.2)

/// The request for
/// [ReservationService.CreateAssignment][google.cloud.bigquery.reservation.v1beta1.ReservationService.CreateAssignment].
/// Note: "bigquery.reservationAssignments.create" permission is required on the
/// related assignee.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource name of the assignment
  /// E.g. `projects/myproject/locations/US/reservations/team1-prod`
  public var parent: String = String()

  /// Assignment resource to create.
  public var assignment: Google_Cloud_Bigquery_Reservation_V1beta1_Assignment {
    get {return _assignment ?? Google_Cloud_Bigquery_Reservation_V1beta1_Assignment()}
    set {_assignment = newValue}
  }
  /// Returns true if `assignment` has been explicitly set.
  public var hasAssignment: Bool {return self._assignment != nil}
  /// Clears the value of `assignment`. Subsequent reads from it will return its default value.
  public mutating func clearAssignment() {self._assignment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _assignment: Google_Cloud_Bigquery_Reservation_V1beta1_Assignment? = nil
}

/// The request for
/// [ReservationService.ListAssignments][google.cloud.bigquery.reservation.v1beta1.ReservationService.ListAssignments].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource name e.g.:
  ///
  /// `projects/myproject/locations/US/reservations/team1-prod`
  ///
  /// Or:
  ///
  /// `projects/myproject/locations/US/reservations/-`
  public var parent: String = String()

  /// The maximum number of items to return.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous List request, if any.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response for
/// [ReservationService.ListAssignments][google.cloud.bigquery.reservation.v1beta1.ReservationService.ListAssignments].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of assignments visible to the user.
  public var assignments: [Google_Cloud_Bigquery_Reservation_V1beta1_Assignment] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.DeleteAssignment][google.cloud.bigquery.reservation.v1beta1.ReservationService.DeleteAssignment].
/// Note: "bigquery.reservationAssignments.delete" permission is required on the
/// related assignee.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the resource, e.g.
  ///   `projects/myproject/locations/US/reservations/team1-prod/assignments/123`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.SearchAssignments][google.cloud.bigquery.reservation.v1beta1.ReservationService.SearchAssignments].
/// Note: "bigquery.reservationAssignments.search" permission is required on the
/// related assignee.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the admin project(containing project and
  /// location), e.g.:
  ///   `projects/myproject/locations/US`.
  public var parent: String = String()

  /// Please specify resource name as assignee in the query.
  ///
  /// Examples:
  ///
  /// * `assignee=projects/myproject`
  /// * `assignee=folders/123`
  /// * `assignee=organizations/456`
  public var query: String = String()

  /// The maximum number of items to return.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous List request, if any.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response for
/// [ReservationService.SearchAssignments][google.cloud.bigquery.reservation.v1beta1.ReservationService.SearchAssignments].
public struct Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of assignments visible to the user.
  public var assignments: [Google_Cloud_Bigquery_Reservation_V1beta1_Assignment] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for
/// [ReservationService.MoveAssignment][google.cloud.bigquery.reservation.v1beta1.ReservationService.MoveAssignment].
///
/// **Note**: "bigquery.reservationAssignments.create" permission is required on
/// the destination_id.
///
/// **Note**: "bigquery.reservationAssignments.create" and
/// "bigquery.reservationAssignments.delete" permission are required on the
/// related assignee.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the assignment,
  /// e.g.
  /// `projects/myproject/locations/US/reservations/team1-prod/assignments/123`
  public var name: String = String()

  /// The new reservation ID, e.g.:
  ///   `projects/myotherproject/locations/US/reservations/team2-prod`
  public var destinationID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents a BI Reservation.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the singleton BI reservation.
  /// Reservation names have the form
  /// `projects/{project_id}/locations/{location_id}/bireservation`.
  public var name: String = String()

  /// Output only. The last update timestamp of a reservation.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Size of a reservation, in bytes.
  public var size: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A request to get a singleton BI reservation.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the requested reservation, for example:
  /// `projects/{project_id}/locations/{location_id}/bireservation`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to update a BI reservation.
public struct Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A reservation to update.
  public var reservation: Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation {
    get {return _reservation ?? Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation()}
    set {_reservation = newValue}
  }
  /// Returns true if `reservation` has been explicitly set.
  public var hasReservation: Bool {return self._reservation != nil}
  /// Clears the value of `reservation`. Subsequent reads from it will return its default value.
  public mutating func clearReservation() {self._reservation = nil}

  /// A list of fields to be updated in this request.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _reservation: Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.reservation.v1beta1"

extension Google_Cloud_Bigquery_Reservation_V1beta1_Reservation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Reservation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "slot_capacity"),
    4: .standard(proto: "ignore_idle_slots"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.slotCapacity) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.ignoreIdleSlots) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.slotCapacity != 0 {
      try visitor.visitSingularInt64Field(value: self.slotCapacity, fieldNumber: 2)
    }
    if self.ignoreIdleSlots != false {
      try visitor.visitSingularBoolField(value: self.ignoreIdleSlots, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_Reservation, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_Reservation) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.slotCapacity != rhs.slotCapacity {return false}
    if lhs.ignoreIdleSlots != rhs.ignoreIdleSlots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CapacityCommitment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "slot_count"),
    3: .same(proto: "plan"),
    4: .same(proto: "state"),
    5: .standard(proto: "commitment_end_time"),
    7: .standard(proto: "failure_status"),
    8: .standard(proto: "renewal_plan"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.slotCount) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.plan) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commitmentEndTime) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._failureStatus) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.renewalPlan) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.slotCount != 0 {
      try visitor.visitSingularInt64Field(value: self.slotCount, fieldNumber: 2)
    }
    if self.plan != .unspecified {
      try visitor.visitSingularEnumField(value: self.plan, fieldNumber: 3)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    if let v = self._commitmentEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._failureStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.renewalPlan != .unspecified {
      try visitor.visitSingularEnumField(value: self.renewalPlan, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.slotCount != rhs.slotCount {return false}
    if lhs.plan != rhs.plan {return false}
    if lhs.state != rhs.state {return false}
    if lhs._commitmentEndTime != rhs._commitmentEndTime {return false}
    if lhs._failureStatus != rhs._failureStatus {return false}
    if lhs.renewalPlan != rhs.renewalPlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.CommitmentPlan: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMMITMENT_PLAN_UNSPECIFIED"),
    2: .same(proto: "MONTHLY"),
    3: .same(proto: "FLEX"),
    4: .same(proto: "ANNUAL"),
    5: .same(proto: "TRIAL"),
  ]
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "PENDING"),
    2: .same(proto: "ACTIVE"),
    3: .same(proto: "FAILED"),
  ]
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateReservationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "reservation_id"),
    3: .same(proto: "reservation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reservationID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._reservation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.reservationID.isEmpty {
      try visitor.visitSingularStringField(value: self.reservationID, fieldNumber: 2)
    }
    if let v = self._reservation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.reservationID != rhs.reservationID {return false}
    if lhs._reservation != rhs._reservation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListReservationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListReservationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reservations"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.reservations) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reservations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reservations, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse) -> Bool {
    if lhs.reservations != rhs.reservations {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetReservationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteReservationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateReservationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reservation"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reservation) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reservation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest) -> Bool {
    if lhs._reservation != rhs._reservation {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateCapacityCommitmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "capacity_commitment"),
    4: .standard(proto: "enforce_single_admin_project_per_org"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._capacityCommitment) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.enforceSingleAdminProjectPerOrg) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._capacityCommitment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.enforceSingleAdminProjectPerOrg != false {
      try visitor.visitSingularBoolField(value: self.enforceSingleAdminProjectPerOrg, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._capacityCommitment != rhs._capacityCommitment {return false}
    if lhs.enforceSingleAdminProjectPerOrg != rhs.enforceSingleAdminProjectPerOrg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCapacityCommitmentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCapacityCommitmentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "capacity_commitments"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.capacityCommitments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.capacityCommitments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.capacityCommitments, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse) -> Bool {
    if lhs.capacityCommitments != rhs.capacityCommitments {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCapacityCommitmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteCapacityCommitmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateCapacityCommitmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "capacity_commitment"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._capacityCommitment) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._capacityCommitment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest) -> Bool {
    if lhs._capacityCommitment != rhs._capacityCommitment {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SplitCapacityCommitmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "slot_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.slotCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.slotCount != 0 {
      try visitor.visitSingularInt64Field(value: self.slotCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.slotCount != rhs.slotCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SplitCapacityCommitmentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "first"),
    2: .same(proto: "second"),
  ]

  fileprivate class _StorageClass {
    var _first: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment? = nil
    var _second: Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _first = source._first
      _second = source._second
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._first) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._second) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._first {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._second {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._first != rhs_storage._first {return false}
        if _storage._second != rhs_storage._second {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MergeCapacityCommitmentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "capacity_commitment_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.capacityCommitmentIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.capacityCommitmentIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.capacityCommitmentIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.capacityCommitmentIds != rhs.capacityCommitmentIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_Assignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Assignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    4: .same(proto: "assignee"),
    3: .standard(proto: "job_type"),
    6: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.jobType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.assignee) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.jobType != .unspecified {
      try visitor.visitSingularEnumField(value: self.jobType, fieldNumber: 3)
    }
    if !self.assignee.isEmpty {
      try visitor.visitSingularStringField(value: self.assignee, fieldNumber: 4)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_Assignment, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_Assignment) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.assignee != rhs.assignee {return false}
    if lhs.jobType != rhs.jobType {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.JobType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_TYPE_UNSPECIFIED"),
    1: .same(proto: "PIPELINE"),
    2: .same(proto: "QUERY"),
  ]
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_Assignment.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "PENDING"),
    2: .same(proto: "ACTIVE"),
  ]
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAssignmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "assignment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._assignment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._assignment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._assignment != rhs._assignment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAssignmentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAssignmentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assignments"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assignments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assignments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assignments, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse) -> Bool {
    if lhs.assignments != rhs.assignments {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAssignmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAssignmentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "query"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.query != rhs.query {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAssignmentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assignments"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assignments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assignments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assignments, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse) -> Bool {
    if lhs.assignments != rhs.assignments {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoveAssignmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "destination_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destinationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.destinationID.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.destinationID != rhs.destinationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BiReservation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "update_time"),
    4: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.size != rhs.size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBiReservationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateBiReservationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reservation"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reservation) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reservation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest, rhs: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest) -> Bool {
    if lhs._reservation != rhs._reservation {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
