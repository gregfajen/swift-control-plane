//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/bigquery/reservation/v1beta1/reservation.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceClientProtocol: GRPCClient {
  func createReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Reservation>

  func listReservations(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse>

  func getReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Reservation>

  func deleteReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Reservation>

  func createCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>

  func listCapacityCommitments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse>

  func getCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>

  func deleteCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>

  func splitCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse>

  func mergeCapacityCommitments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>

  func createAssignment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Assignment>

  func listAssignments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse>

  func deleteAssignment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func searchAssignments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse>

  func moveAssignment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Assignment>

  func getBiReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation>

  func updateBiReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation>

}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceClientProtocol {

  /// Creates a new reservation resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateReservation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Reservation> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/CreateReservation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all the reservations for the project in the specified location.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListReservations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listReservations(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/ListReservations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns information about the reservation.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReservation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Reservation> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/GetReservation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a reservation.
  /// Returns `google.rpc.Code.FAILED_PRECONDITION` when reservation has
  /// assignments.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteReservation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/DeleteReservation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing reservation resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateReservation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Reservation> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/UpdateReservation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new capacity commitment resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCapacityCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/CreateCapacityCommitment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all the capacity commitments for the admin project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCapacityCommitments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCapacityCommitments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/ListCapacityCommitments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns information about the capacity commitment.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCapacityCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/GetCapacityCommitment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a capacity commitment. Attempting to delete capacity commitment
  /// before its commitment_end_time will fail with the error code
  /// `google.rpc.Code.FAILED_PRECONDITION`.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCapacityCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/DeleteCapacityCommitment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing capacity commitment.
  ///
  /// Only `plan` and `renewal_plan` fields can be updated.
  ///
  /// Plan can only be changed to a plan of a longer commitment period.
  /// Attempting to change to a plan with shorter commitment period will fail
  /// with the error code `google.rpc.Code.FAILED_PRECONDITION`.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCapacityCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/UpdateCapacityCommitment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Splits capacity commitment to two commitments of the same plan and
  /// `commitment_end_time`.
  ///
  /// A common use case is to enable downgrading commitments.
  ///
  /// For example, in order to downgrade from 10000 slots to 8000, you might
  /// split a 10000 capacity commitment into commitments of 2000 and 8000. Then,
  /// you would change the plan of the first one to `FLEX` and then delete it.
  ///
  /// - Parameters:
  ///   - request: Request to send to SplitCapacityCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func splitCapacityCommitment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/SplitCapacityCommitment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Merges capacity commitments of the same plan into a single commitment.
  ///
  /// The resulting capacity commitment has the greater commitment_end_time
  /// out of the to-be-merged capacity commitments.
  ///
  /// Attempting to merge capacity commitments of different plan will fail
  /// with the error code `google.rpc.Code.FAILED_PRECONDITION`.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeCapacityCommitments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeCapacityCommitments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/MergeCapacityCommitments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates an assignment object which allows the given project to submit jobs
  /// of a certain type using slots from the specified reservation.
  ///
  /// Currently a
  /// resource (project, folder, organization) can only have one assignment per
  /// each (job_type, location) combination, and that reservation will be used
  /// for all jobs of the matching type.
  ///
  /// Different assignments can be created on different levels of the
  /// projects, folders or organization hierarchy.  During query execution,
  /// the assignment is looked up at the project, folder and organization levels
  /// in that order. The first assignment found is applied to the query.
  ///
  /// When creating assignments, it does not matter if other assignments exist at
  /// higher levels.
  ///
  /// Example:
  ///
  /// * The organization `organizationA` contains two projects, `project1`
  ///   and `project2`.
  /// * Assignments for all three entities (`organizationA`, `project1`, and
  ///   `project2`) could all be created and mapped to the same or different
  ///   reservations.
  ///
  /// Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have
  /// 'bigquery.admin' permissions on the project using the reservation
  /// and the project that owns this reservation.
  ///
  /// Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment
  /// does not match location of the reservation.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAssignment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAssignment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Assignment> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/CreateAssignment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists assignments.
  ///
  /// Only explicitly created assignments will be returned.
  ///
  /// Example:
  ///
  /// * Organization `organizationA` contains two projects, `project1` and
  ///   `project2`.
  /// * Reservation `res1` exists and was created previously.
  /// * CreateAssignment was used previously to define the following
  ///   associations between entities and reservations: `<organizationA, res1>`
  ///   and `<project1, res1>`
  ///
  /// In this example, ListAssignments will just return the above two assignments
  /// for reservation `res1`, and no expansion/merge will happen.
  ///
  /// The wildcard "-" can be used for
  /// reservations in the request. In that case all assignments belongs to the
  /// specified project and location will be listed.
  ///
  /// **Note** "-" cannot be used for projects nor locations.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAssignments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAssignments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/ListAssignments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a assignment. No expansion will happen.
  ///
  /// Example:
  ///
  /// * Organization `organizationA` contains two projects, `project1` and
  ///   `project2`.
  /// * Reservation `res1` exists and was created previously.
  /// * CreateAssignment was used previously to define the following
  ///   associations between entities and reservations: `<organizationA, res1>`
  ///   and `<project1, res1>`
  ///
  /// In this example, deletion of the `<organizationA, res1>` assignment won't
  /// affect the other assignment `<project1, res1>`. After said deletion,
  /// queries from `project1` will still use `res1` while queries from
  /// `project2` will switch to use on-demand mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAssignment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAssignment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/DeleteAssignment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Looks up assignments for a specified resource for a particular region.
  /// If the request is about a project:
  ///
  /// 1. Assignments created on the project will be returned if they exist.
  /// 2. Otherwise assignments created on the closest ancestor will be
  ///    returned.
  /// 3. Assignments for different JobTypes will all be returned.
  ///
  /// The same logic applies if the request is about a folder.
  ///
  /// If the request is about an organization, then assignments created on the
  /// organization will be returned (organization doesn't have ancestors).
  ///
  /// Comparing to ListAssignments, there are some behavior
  /// differences:
  ///
  /// 1. permission on the assignee will be verified in this API.
  /// 2. Hierarchy lookup (project->folder->organization) happens in this API.
  /// 3. Parent here is `projects/*/locations/*`, instead of
  ///    `projects/*/locations/*reservations/*`.
  ///
  /// **Note** "-" cannot be used for projects
  /// nor locations.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchAssignments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchAssignments(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest, Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/SearchAssignments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Moves an assignment under a new reservation.
  ///
  /// This differs from removing an existing assignment and recreating a new one
  /// by providing a transactional change that ensures an assignee always has an
  /// associated reservation.
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveAssignment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moveAssignment(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest, Google_Cloud_Bigquery_Reservation_V1beta1_Assignment> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/MoveAssignment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves a BI reservation.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBiReservation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBiReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/GetBiReservation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a BI reservation.
  ///
  /// Only fields specified in the `field_mask` are updated.
  ///
  /// A singleton BI reservation always exists with default size 0.
  /// In order to reserve BI capacity it needs to be updated to an amount
  /// greater than 0. In order to release BI capacity reservation size
  /// must be set to 0.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBiReservation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateBiReservation(
    _ request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest, Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.reservation.v1beta1.ReservationService/UpdateBiReservation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceClient: Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.bigquery.reservation.v1beta1.ReservationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceProvider: CallHandlerProvider {
  /// Creates a new reservation resource.
  func createReservation(request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateReservationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_Reservation>
  /// Lists all the reservations for the project in the specified location.
  func listReservations(request: Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_ListReservationsResponse>
  /// Returns information about the reservation.
  func getReservation(request: Google_Cloud_Bigquery_Reservation_V1beta1_GetReservationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_Reservation>
  /// Deletes a reservation.
  /// Returns `google.rpc.Code.FAILED_PRECONDITION` when reservation has
  /// assignments.
  func deleteReservation(request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteReservationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Updates an existing reservation resource.
  func updateReservation(request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateReservationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_Reservation>
  /// Creates a new capacity commitment resource.
  func createCapacityCommitment(request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateCapacityCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>
  /// Lists all the capacity commitments for the admin project.
  func listCapacityCommitments(request: Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_ListCapacityCommitmentsResponse>
  /// Returns information about the capacity commitment.
  func getCapacityCommitment(request: Google_Cloud_Bigquery_Reservation_V1beta1_GetCapacityCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>
  /// Deletes a capacity commitment. Attempting to delete capacity commitment
  /// before its commitment_end_time will fail with the error code
  /// `google.rpc.Code.FAILED_PRECONDITION`.
  func deleteCapacityCommitment(request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteCapacityCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Updates an existing capacity commitment.
  ///
  /// Only `plan` and `renewal_plan` fields can be updated.
  ///
  /// Plan can only be changed to a plan of a longer commitment period.
  /// Attempting to change to a plan with shorter commitment period will fail
  /// with the error code `google.rpc.Code.FAILED_PRECONDITION`.
  func updateCapacityCommitment(request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateCapacityCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>
  /// Splits capacity commitment to two commitments of the same plan and
  /// `commitment_end_time`.
  ///
  /// A common use case is to enable downgrading commitments.
  ///
  /// For example, in order to downgrade from 10000 slots to 8000, you might
  /// split a 10000 capacity commitment into commitments of 2000 and 8000. Then,
  /// you would change the plan of the first one to `FLEX` and then delete it.
  func splitCapacityCommitment(request: Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_SplitCapacityCommitmentResponse>
  /// Merges capacity commitments of the same plan into a single commitment.
  ///
  /// The resulting capacity commitment has the greater commitment_end_time
  /// out of the to-be-merged capacity commitments.
  ///
  /// Attempting to merge capacity commitments of different plan will fail
  /// with the error code `google.rpc.Code.FAILED_PRECONDITION`.
  func mergeCapacityCommitments(request: Google_Cloud_Bigquery_Reservation_V1beta1_MergeCapacityCommitmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_CapacityCommitment>
  /// Creates an assignment object which allows the given project to submit jobs
  /// of a certain type using slots from the specified reservation.
  ///
  /// Currently a
  /// resource (project, folder, organization) can only have one assignment per
  /// each (job_type, location) combination, and that reservation will be used
  /// for all jobs of the matching type.
  ///
  /// Different assignments can be created on different levels of the
  /// projects, folders or organization hierarchy.  During query execution,
  /// the assignment is looked up at the project, folder and organization levels
  /// in that order. The first assignment found is applied to the query.
  ///
  /// When creating assignments, it does not matter if other assignments exist at
  /// higher levels.
  ///
  /// Example:
  ///
  /// * The organization `organizationA` contains two projects, `project1`
  ///   and `project2`.
  /// * Assignments for all three entities (`organizationA`, `project1`, and
  ///   `project2`) could all be created and mapped to the same or different
  ///   reservations.
  ///
  /// Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have
  /// 'bigquery.admin' permissions on the project using the reservation
  /// and the project that owns this reservation.
  ///
  /// Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment
  /// does not match location of the reservation.
  func createAssignment(request: Google_Cloud_Bigquery_Reservation_V1beta1_CreateAssignmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_Assignment>
  /// Lists assignments.
  ///
  /// Only explicitly created assignments will be returned.
  ///
  /// Example:
  ///
  /// * Organization `organizationA` contains two projects, `project1` and
  ///   `project2`.
  /// * Reservation `res1` exists and was created previously.
  /// * CreateAssignment was used previously to define the following
  ///   associations between entities and reservations: `<organizationA, res1>`
  ///   and `<project1, res1>`
  ///
  /// In this example, ListAssignments will just return the above two assignments
  /// for reservation `res1`, and no expansion/merge will happen.
  ///
  /// The wildcard "-" can be used for
  /// reservations in the request. In that case all assignments belongs to the
  /// specified project and location will be listed.
  ///
  /// **Note** "-" cannot be used for projects nor locations.
  func listAssignments(request: Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_ListAssignmentsResponse>
  /// Deletes a assignment. No expansion will happen.
  ///
  /// Example:
  ///
  /// * Organization `organizationA` contains two projects, `project1` and
  ///   `project2`.
  /// * Reservation `res1` exists and was created previously.
  /// * CreateAssignment was used previously to define the following
  ///   associations between entities and reservations: `<organizationA, res1>`
  ///   and `<project1, res1>`
  ///
  /// In this example, deletion of the `<organizationA, res1>` assignment won't
  /// affect the other assignment `<project1, res1>`. After said deletion,
  /// queries from `project1` will still use `res1` while queries from
  /// `project2` will switch to use on-demand mode.
  func deleteAssignment(request: Google_Cloud_Bigquery_Reservation_V1beta1_DeleteAssignmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Looks up assignments for a specified resource for a particular region.
  /// If the request is about a project:
  ///
  /// 1. Assignments created on the project will be returned if they exist.
  /// 2. Otherwise assignments created on the closest ancestor will be
  ///    returned.
  /// 3. Assignments for different JobTypes will all be returned.
  ///
  /// The same logic applies if the request is about a folder.
  ///
  /// If the request is about an organization, then assignments created on the
  /// organization will be returned (organization doesn't have ancestors).
  ///
  /// Comparing to ListAssignments, there are some behavior
  /// differences:
  ///
  /// 1. permission on the assignee will be verified in this API.
  /// 2. Hierarchy lookup (project->folder->organization) happens in this API.
  /// 3. Parent here is `projects/*/locations/*`, instead of
  ///    `projects/*/locations/*reservations/*`.
  ///
  /// **Note** "-" cannot be used for projects
  /// nor locations.
  func searchAssignments(request: Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_SearchAssignmentsResponse>
  /// Moves an assignment under a new reservation.
  ///
  /// This differs from removing an existing assignment and recreating a new one
  /// by providing a transactional change that ensures an assignee always has an
  /// associated reservation.
  func moveAssignment(request: Google_Cloud_Bigquery_Reservation_V1beta1_MoveAssignmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_Assignment>
  /// Retrieves a BI reservation.
  func getBiReservation(request: Google_Cloud_Bigquery_Reservation_V1beta1_GetBiReservationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation>
  /// Updates a BI reservation.
  ///
  /// Only fields specified in the `field_mask` are updated.
  ///
  /// A singleton BI reservation always exists with default size 0.
  /// In order to reserve BI capacity it needs to be updated to an amount
  /// greater than 0. In order to release BI capacity reservation size
  /// must be set to 0.
  func updateBiReservation(request: Google_Cloud_Bigquery_Reservation_V1beta1_UpdateBiReservationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Reservation_V1beta1_BiReservation>
}

extension Google_Cloud_Bigquery_Reservation_V1beta1_ReservationServiceProvider {
  public var serviceName: Substring { return "google.cloud.bigquery.reservation.v1beta1.ReservationService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateReservation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createReservation(request: request, context: context)
        }
      }

    case "ListReservations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listReservations(request: request, context: context)
        }
      }

    case "GetReservation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getReservation(request: request, context: context)
        }
      }

    case "DeleteReservation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteReservation(request: request, context: context)
        }
      }

    case "UpdateReservation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateReservation(request: request, context: context)
        }
      }

    case "CreateCapacityCommitment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCapacityCommitment(request: request, context: context)
        }
      }

    case "ListCapacityCommitments":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCapacityCommitments(request: request, context: context)
        }
      }

    case "GetCapacityCommitment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCapacityCommitment(request: request, context: context)
        }
      }

    case "DeleteCapacityCommitment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteCapacityCommitment(request: request, context: context)
        }
      }

    case "UpdateCapacityCommitment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCapacityCommitment(request: request, context: context)
        }
      }

    case "SplitCapacityCommitment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.splitCapacityCommitment(request: request, context: context)
        }
      }

    case "MergeCapacityCommitments":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeCapacityCommitments(request: request, context: context)
        }
      }

    case "CreateAssignment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAssignment(request: request, context: context)
        }
      }

    case "ListAssignments":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAssignments(request: request, context: context)
        }
      }

    case "DeleteAssignment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAssignment(request: request, context: context)
        }
      }

    case "SearchAssignments":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchAssignments(request: request, context: context)
        }
      }

    case "MoveAssignment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.moveAssignment(request: request, context: context)
        }
      }

    case "GetBiReservation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBiReservation(request: request, context: context)
        }
      }

    case "UpdateBiReservation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateBiReservation(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

