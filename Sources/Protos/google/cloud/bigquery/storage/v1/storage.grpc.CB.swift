//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/bigquery/storage/v1/storage.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Bigquery_Storage_V1_BigQueryReadClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Bigquery_Storage_V1_BigQueryReadClientProtocol: GRPCClient {
  func createReadSession(
    _ request: Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest, Google_Cloud_Bigquery_Storage_V1_ReadSession>

  func readRows(
    _ request: Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse) -> Void
  ) -> ServerStreamingCall<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest, Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>

  func splitReadStream(
    _ request: Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest, Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>

}

extension Google_Cloud_Bigquery_Storage_V1_BigQueryReadClientProtocol {

  /// Creates a new read session. A read session divides the contents of a
  /// BigQuery table into one or more streams, which can then be used to read
  /// data from the table. The read session also specifies properties of the
  /// data to be read, such as a list of columns or a push-down filter describing
  /// the rows to be returned.
  ///
  /// A particular row can be read by at most one stream. When the caller has
  /// reached the end of each stream in the session, then all the data in the
  /// table has been read.
  ///
  /// Data is assigned to each stream such that roughly the same number of
  /// rows can be read from each stream. Because the server-side unit for
  /// assigning data is collections of rows, the API does not guarantee that
  /// each stream will return the same number or rows. Additionally, the
  /// limits are enforced based on the number of pre-filtered rows, so some
  /// filters can lead to lopsided assignments.
  ///
  /// Read sessions automatically expire 24 hours after they are created and do
  /// not require manual clean-up by the caller.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateReadSession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createReadSession(
    _ request: Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest, Google_Cloud_Bigquery_Storage_V1_ReadSession> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.storage.v1.BigQueryRead/CreateReadSession",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Reads rows from the stream in the format prescribed by the ReadSession.
  /// Each response contains one or more table rows, up to a maximum of 100 MiB
  /// per response; read requests which attempt to read individual rows larger
  /// than 100 MiB will fail.
  ///
  /// Each request also returns a set of stream statistics reflecting the current
  /// state of the stream.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadRows.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func readRows(
    _ request: Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse) -> Void
  ) -> ServerStreamingCall<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest, Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse> {
    return self.makeServerStreamingCall(
      path: "/google.cloud.bigquery.storage.v1.BigQueryRead/ReadRows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Splits a given `ReadStream` into two `ReadStream` objects. These
  /// `ReadStream` objects are referred to as the primary and the residual
  /// streams of the split. The original `ReadStream` can still be read from in
  /// the same manner as before. Both of the returned `ReadStream` objects can
  /// also be read from, and the rows returned by both child streams will be
  /// the same as the rows read from the original stream.
  ///
  /// Moreover, the two child streams will be allocated back-to-back in the
  /// original `ReadStream`. Concretely, it is guaranteed that for streams
  /// original, primary, and residual, that original[0-j] = primary[0-j] and
  /// original[j-n] = residual[0-m] once the streams have been read to
  /// completion.
  ///
  /// - Parameters:
  ///   - request: Request to send to SplitReadStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func splitReadStream(
    _ request: Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest, Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.bigquery.storage.v1.BigQueryRead/SplitReadStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Bigquery_Storage_V1_BigQueryReadClient: Google_Cloud_Bigquery_Storage_V1_BigQueryReadClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.bigquery.storage.v1.BigQueryRead service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Bigquery_Storage_V1_BigQueryReadProvider: CallHandlerProvider {
  /// Creates a new read session. A read session divides the contents of a
  /// BigQuery table into one or more streams, which can then be used to read
  /// data from the table. The read session also specifies properties of the
  /// data to be read, such as a list of columns or a push-down filter describing
  /// the rows to be returned.
  ///
  /// A particular row can be read by at most one stream. When the caller has
  /// reached the end of each stream in the session, then all the data in the
  /// table has been read.
  ///
  /// Data is assigned to each stream such that roughly the same number of
  /// rows can be read from each stream. Because the server-side unit for
  /// assigning data is collections of rows, the API does not guarantee that
  /// each stream will return the same number or rows. Additionally, the
  /// limits are enforced based on the number of pre-filtered rows, so some
  /// filters can lead to lopsided assignments.
  ///
  /// Read sessions automatically expire 24 hours after they are created and do
  /// not require manual clean-up by the caller.
  func createReadSession(request: Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Storage_V1_ReadSession>
  /// Reads rows from the stream in the format prescribed by the ReadSession.
  /// Each response contains one or more table rows, up to a maximum of 100 MiB
  /// per response; read requests which attempt to read individual rows larger
  /// than 100 MiB will fail.
  ///
  /// Each request also returns a set of stream statistics reflecting the current
  /// state of the stream.
  func readRows(request: Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest, context: StreamingResponseCallContext<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>) -> EventLoopFuture<GRPCStatus>
  /// Splits a given `ReadStream` into two `ReadStream` objects. These
  /// `ReadStream` objects are referred to as the primary and the residual
  /// streams of the split. The original `ReadStream` can still be read from in
  /// the same manner as before. Both of the returned `ReadStream` objects can
  /// also be read from, and the rows returned by both child streams will be
  /// the same as the rows read from the original stream.
  ///
  /// Moreover, the two child streams will be allocated back-to-back in the
  /// original `ReadStream`. Concretely, it is guaranteed that for streams
  /// original, primary, and residual, that original[0-j] = primary[0-j] and
  /// original[j-n] = residual[0-m] once the streams have been read to
  /// completion.
  func splitReadStream(request: Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>
}

extension Google_Cloud_Bigquery_Storage_V1_BigQueryReadProvider {
  public var serviceName: Substring { return "google.cloud.bigquery.storage.v1.BigQueryRead" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateReadSession":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createReadSession(request: request, context: context)
        }
      }

    case "ReadRows":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.readRows(request: request, context: context)
        }
      }

    case "SplitReadStream":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.splitReadStream(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

