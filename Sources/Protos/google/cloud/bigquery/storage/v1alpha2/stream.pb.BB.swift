// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/storage/v1alpha2/stream.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about a single stream that gets data inside the storage system.
public struct Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of the stream, in the form
  /// `projects/{project}/datasets/{dataset}/tables/{table}/streams/{stream}`.
  public var name: String = String()

  public var type: Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream.TypeEnum = .unspecified

  /// Output only. Create time of the stream.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Commit time of the stream.
  /// If a stream is of `COMMITTED` type, then it will have a commit_time same as
  /// `create_time`. If the stream is of `PENDING` type, commit_time being empty
  /// means it is not committed.
  public var commitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _commitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_commitTime = newValue}
  }
  /// Returns true if `commitTime` has been explicitly set.
  public var hasCommitTime: Bool {return self._commitTime != nil}
  /// Clears the value of `commitTime`. Subsequent reads from it will return its default value.
  public mutating func clearCommitTime() {self._commitTime = nil}

  /// Output only. The schema of the destination table. It is only returned in
  /// `CreateWriteStream` response. Caller should generate data that's
  /// compatible with this schema to send in initial `AppendRowsRequest`.
  /// The table schema could go out of date during the life time of the stream.
  public var tableSchema: Google_Cloud_Bigquery_Storage_V1alpha2_TableSchema {
    get {return _tableSchema ?? Google_Cloud_Bigquery_Storage_V1alpha2_TableSchema()}
    set {_tableSchema = newValue}
  }
  /// Returns true if `tableSchema` has been explicitly set.
  public var hasTableSchema: Bool {return self._tableSchema != nil}
  /// Clears the value of `tableSchema`. Subsequent reads from it will return its default value.
  public mutating func clearTableSchema() {self._tableSchema = nil}

  /// Id set by client to annotate its identity.
  public var externalID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown type.
    case unspecified // = 0

    /// Data will commit automatically and appear as soon as the write is
    /// acknowledged.
    case committed // = 1

    /// Data is invisible until the stream is committed.
    case pending // = 2

    /// Data is only visible up to the offset to which it was flushed.
    case buffered // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .committed
      case 2: self = .pending
      case 3: self = .buffered
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .committed: return 1
      case .pending: return 2
      case .buffered: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _commitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _tableSchema: Google_Cloud_Bigquery_Storage_V1alpha2_TableSchema? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream.TypeEnum] = [
    .unspecified,
    .committed,
    .pending,
    .buffered,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.storage.v1alpha2"

extension Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteStream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "commit_time"),
    5: .standard(proto: "table_schema"),
    6: .standard(proto: "external_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commitTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._tableSchema) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._tableSchema {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream, rhs: Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._commitTime != rhs._commitTime {return false}
    if lhs._tableSchema != rhs._tableSchema {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Storage_V1alpha2_WriteStream.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "COMMITTED"),
    2: .same(proto: "PENDING"),
    3: .same(proto: "BUFFERED"),
  ]
}
