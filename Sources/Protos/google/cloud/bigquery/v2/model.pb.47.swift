// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Google_Cloud_Bigquery_V2_Model {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. A hash of this resource.
  public var etag: String = String()

  /// Required. Unique identifier for this model.
  public var modelReference: Google_Cloud_Bigquery_V2_ModelReference {
    get {return _modelReference ?? Google_Cloud_Bigquery_V2_ModelReference()}
    set {_modelReference = newValue}
  }
  /// Returns true if `modelReference` has been explicitly set.
  public var hasModelReference: Bool {return self._modelReference != nil}
  /// Clears the value of `modelReference`. Subsequent reads from it will return its default value.
  public mutating func clearModelReference() {self._modelReference = nil}

  /// Output only. The time when this model was created, in millisecs since the epoch.
  public var creationTime: Int64 = 0

  /// Output only. The time when this model was last modified, in millisecs since the epoch.
  public var lastModifiedTime: Int64 = 0

  /// Optional. A user-friendly description of this model.
  public var description_p: String = String()

  /// Optional. A descriptive name for this model.
  public var friendlyName: String = String()

  /// The labels associated with this model. You can use these to organize
  /// and group your models. Label keys and values can be no longer
  /// than 63 characters, can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label values are optional. Label keys must start with a letter and each
  /// label in the list must have a different key.
  public var labels: Dictionary<String,String> = [:]

  /// Optional. The time when this model expires, in milliseconds since the epoch.
  /// If not present, the model will persist indefinitely. Expired models
  /// will be deleted and their storage reclaimed.  The defaultTableExpirationMs
  /// property of the encapsulating dataset can be used to set a default
  /// expirationTime on newly created models.
  public var expirationTime: Int64 = 0

  /// Output only. The geographic location where the model resides. This value
  /// is inherited from the dataset.
  public var location: String = String()

  /// Custom encryption configuration (e.g., Cloud KMS keys). This shows the
  /// encryption configuration of the model data while stored in BigQuery
  /// storage. This field can be used with PatchModel to update encryption key
  /// for an already encrypted model.
  public var encryptionConfiguration: Google_Cloud_Bigquery_V2_EncryptionConfiguration {
    get {return _encryptionConfiguration ?? Google_Cloud_Bigquery_V2_EncryptionConfiguration()}
    set {_encryptionConfiguration = newValue}
  }
  /// Returns true if `encryptionConfiguration` has been explicitly set.
  public var hasEncryptionConfiguration: Bool {return self._encryptionConfiguration != nil}
  /// Clears the value of `encryptionConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionConfiguration() {self._encryptionConfiguration = nil}

  /// Output only. Type of the model resource.
  public var modelType: Google_Cloud_Bigquery_V2_Model.ModelType = .unspecified

  /// Output only. Information for all training runs in increasing order of start_time.
  public var trainingRuns: [Google_Cloud_Bigquery_V2_Model.TrainingRun] = []

  /// Output only. Input feature columns that were used to train this model.
  public var featureColumns: [Google_Cloud_Bigquery_V2_StandardSqlField] = []

  /// Output only. Label columns that were used to train this model.
  /// The output of the model will have a "predicted_" prefix to these columns.
  public var labelColumns: [Google_Cloud_Bigquery_V2_StandardSqlField] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Indicates the type of the Model.
  public enum ModelType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Linear regression model.
    case linearRegression // = 1

    /// Logistic regression based classification model.
    case logisticRegression // = 2

    /// K-means clustering model.
    case kmeans // = 3

    /// Matrix factorization model.
    case matrixFactorization // = 4

    /// [Beta] DNN classifier model.
    case dnnClassifier // = 5

    /// [Beta] An imported TensorFlow model.
    case tensorflow // = 6

    /// [Beta] DNN regressor model.
    case dnnRegressor // = 7

    /// [Beta] Boosted tree regressor model.
    case boostedTreeRegressor // = 9

    /// [Beta] Boosted tree classifier model.
    case boostedTreeClassifier // = 10

    /// [Beta] ARIMA model.
    case arima // = 11

    /// [Beta] AutoML Tables regression model.
    case automlRegressor // = 12

    /// [Beta] AutoML Tables classification model.
    case automlClassifier // = 13
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .linearRegression
      case 2: self = .logisticRegression
      case 3: self = .kmeans
      case 4: self = .matrixFactorization
      case 5: self = .dnnClassifier
      case 6: self = .tensorflow
      case 7: self = .dnnRegressor
      case 9: self = .boostedTreeRegressor
      case 10: self = .boostedTreeClassifier
      case 11: self = .arima
      case 12: self = .automlRegressor
      case 13: self = .automlClassifier
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .linearRegression: return 1
      case .logisticRegression: return 2
      case .kmeans: return 3
      case .matrixFactorization: return 4
      case .dnnClassifier: return 5
      case .tensorflow: return 6
      case .dnnRegressor: return 7
      case .boostedTreeRegressor: return 9
      case .boostedTreeClassifier: return 10
      case .arima: return 11
      case .automlRegressor: return 12
      case .automlClassifier: return 13
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Loss metric to evaluate model training performance.
  public enum LossType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Mean squared loss, used for linear regression.
    case meanSquaredLoss // = 1

    /// Mean log loss, used for logistic regression.
    case meanLogLoss // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .meanSquaredLoss
      case 2: self = .meanLogLoss
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .meanSquaredLoss: return 1
      case .meanLogLoss: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Distance metric used to compute the distance between two points.
  public enum DistanceType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Eculidean distance.
    case euclidean // = 1

    /// Cosine distance.
    case cosine // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .euclidean
      case 2: self = .cosine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .euclidean: return 1
      case .cosine: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Indicates the method to split input data into multiple tables.
  public enum DataSplitMethod: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Splits data randomly.
    case random // = 1

    /// Splits data with the user provided tags.
    case custom // = 2

    /// Splits data sequentially.
    case sequential // = 3

    /// Data split will be skipped.
    case noSplit // = 4

    /// Splits data automatically: Uses NO_SPLIT if the data size is small.
    /// Otherwise uses RANDOM.
    case autoSplit // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .random
      case 2: self = .custom
      case 3: self = .sequential
      case 4: self = .noSplit
      case 5: self = .autoSplit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .random: return 1
      case .custom: return 2
      case .sequential: return 3
      case .noSplit: return 4
      case .autoSplit: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Type of supported data frequency for time series forecasting models.
  public enum DataFrequency: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Automatically inferred from timestamps.
    case autoFrequency // = 1

    /// Yearly data.
    case yearly // = 2

    /// Quarterly data.
    case quarterly // = 3

    /// Monthly data.
    case monthly // = 4

    /// Weekly data.
    case weekly // = 5

    /// Daily data.
    case daily // = 6

    /// Hourly data.
    case hourly // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .autoFrequency
      case 2: self = .yearly
      case 3: self = .quarterly
      case 4: self = .monthly
      case 5: self = .weekly
      case 6: self = .daily
      case 7: self = .hourly
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .autoFrequency: return 1
      case .yearly: return 2
      case .quarterly: return 3
      case .monthly: return 4
      case .weekly: return 5
      case .daily: return 6
      case .hourly: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Type of supported holiday regions for time series forecasting models.
  public enum HolidayRegion: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Holiday region unspecified.
    case unspecified // = 0

    /// Global.
    case global // = 1

    /// North America.
    case na // = 2

    /// Japan and Asia Pacific: Korea, Greater China, India, Australia, and New
    /// Zealand.
    case japac // = 3

    /// Europe, the Middle East and Africa.
    case emea // = 4

    /// Latin America and the Caribbean.
    case lac // = 5

    /// United Arab Emirates
    case ae // = 6

    /// Argentina
    case ar // = 7

    /// Austria
    case at // = 8

    /// Australia
    case au // = 9

    /// Belgium
    case be // = 10

    /// Brazil
    case br // = 11

    /// Canada
    case ca // = 12

    /// Switzerland
    case ch // = 13

    /// Chile
    case cl // = 14

    /// China
    case cn // = 15

    /// Colombia
    case co // = 16

    /// Czechoslovakia
    case cs // = 17

    /// Czech Republic
    case cz // = 18

    /// Germany
    case de // = 19

    /// Denmark
    case dk // = 20

    /// Algeria
    case dz // = 21

    /// Ecuador
    case ec // = 22

    /// Estonia
    case ee // = 23

    /// Egypt
    case eg // = 24

    /// Spain
    case es // = 25

    /// Finland
    case fi // = 26

    /// France
    case fr // = 27

    /// Great Britain (United Kingdom)
    case gb // = 28

    /// Greece
    case gr // = 29

    /// Hong Kong
    case hk // = 30

    /// Hungary
    case hu // = 31

    /// Indonesia
    case id // = 32

    /// Ireland
    case ie // = 33

    /// Israel
    case il // = 34

    /// India
    case `in` // = 35

    /// Iran
    case ir // = 36

    /// Italy
    case it // = 37

    /// Japan
    case jp // = 38

    /// Korea (South)
    case kr // = 39

    /// Latvia
    case lv // = 40

    /// Morocco
    case ma // = 41

    /// Mexico
    case mx // = 42

    /// Malaysia
    case my // = 43

    /// Nigeria
    case ng // = 44

    /// Netherlands
    case nl // = 45

    /// Norway
    case no // = 46

    /// New Zealand
    case nz // = 47

    /// Peru
    case pe // = 48

    /// Philippines
    case ph // = 49

    /// Pakistan
    case pk // = 50

    /// Poland
    case pl // = 51

    /// Portugal
    case pt // = 52

    /// Romania
    case ro // = 53

    /// Serbia
    case rs // = 54

    /// Russian Federation
    case ru // = 55

    /// Saudi Arabia
    case sa // = 56

    /// Sweden
    case se // = 57

    /// Singapore
    case sg // = 58

    /// Slovenia
    case si // = 59

    /// Slovakia
    case sk // = 60

    /// Thailand
    case th // = 61

    /// Turkey
    case tr // = 62

    /// Taiwan
    case tw // = 63

    /// Ukraine
    case ua // = 64

    /// United States
    case us // = 65

    /// Venezuela
    case ve // = 66

    /// Viet Nam
    case vn // = 67

    /// South Africa
    case za // = 68
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .global
      case 2: self = .na
      case 3: self = .japac
      case 4: self = .emea
      case 5: self = .lac
      case 6: self = .ae
      case 7: self = .ar
      case 8: self = .at
      case 9: self = .au
      case 10: self = .be
      case 11: self = .br
      case 12: self = .ca
      case 13: self = .ch
      case 14: self = .cl
      case 15: self = .cn
      case 16: self = .co
      case 17: self = .cs
      case 18: self = .cz
      case 19: self = .de
      case 20: self = .dk
      case 21: self = .dz
      case 22: self = .ec
      case 23: self = .ee
      case 24: self = .eg
      case 25: self = .es
      case 26: self = .fi
      case 27: self = .fr
      case 28: self = .gb
      case 29: self = .gr
      case 30: self = .hk
      case 31: self = .hu
      case 32: self = .id
      case 33: self = .ie
      case 34: self = .il
      case 35: self = .in
      case 36: self = .ir
      case 37: self = .it
      case 38: self = .jp
      case 39: self = .kr
      case 40: self = .lv
      case 41: self = .ma
      case 42: self = .mx
      case 43: self = .my
      case 44: self = .ng
      case 45: self = .nl
      case 46: self = .no
      case 47: self = .nz
      case 48: self = .pe
      case 49: self = .ph
      case 50: self = .pk
      case 51: self = .pl
      case 52: self = .pt
      case 53: self = .ro
      case 54: self = .rs
      case 55: self = .ru
      case 56: self = .sa
      case 57: self = .se
      case 58: self = .sg
      case 59: self = .si
      case 60: self = .sk
      case 61: self = .th
      case 62: self = .tr
      case 63: self = .tw
      case 64: self = .ua
      case 65: self = .us
      case 66: self = .ve
      case 67: self = .vn
      case 68: self = .za
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .global: return 1
      case .na: return 2
      case .japac: return 3
      case .emea: return 4
      case .lac: return 5
      case .ae: return 6
      case .ar: return 7
      case .at: return 8
      case .au: return 9
      case .be: return 10
      case .br: return 11
      case .ca: return 12
      case .ch: return 13
      case .cl: return 14
      case .cn: return 15
      case .co: return 16
      case .cs: return 17
      case .cz: return 18
      case .de: return 19
      case .dk: return 20
      case .dz: return 21
      case .ec: return 22
      case .ee: return 23
      case .eg: return 24
      case .es: return 25
      case .fi: return 26
      case .fr: return 27
      case .gb: return 28
      case .gr: return 29
      case .hk: return 30
      case .hu: return 31
      case .id: return 32
      case .ie: return 33
      case .il: return 34
      case .in: return 35
      case .ir: return 36
      case .it: return 37
      case .jp: return 38
      case .kr: return 39
      case .lv: return 40
      case .ma: return 41
      case .mx: return 42
      case .my: return 43
      case .ng: return 44
      case .nl: return 45
      case .no: return 46
      case .nz: return 47
      case .pe: return 48
      case .ph: return 49
      case .pk: return 50
      case .pl: return 51
      case .pt: return 52
      case .ro: return 53
      case .rs: return 54
      case .ru: return 55
      case .sa: return 56
      case .se: return 57
      case .sg: return 58
      case .si: return 59
      case .sk: return 60
      case .th: return 61
      case .tr: return 62
      case .tw: return 63
      case .ua: return 64
      case .us: return 65
      case .ve: return 66
      case .vn: return 67
      case .za: return 68
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Indicates the learning rate optimization strategy to use.
  public enum LearnRateStrategy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Use line search to determine learning rate.
    case lineSearch // = 1

    /// Use a constant learning rate.
    case constant // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .lineSearch
      case 2: self = .constant
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .lineSearch: return 1
      case .constant: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Indicates the optimization strategy used for training.
  public enum OptimizationStrategy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Uses an iterative batch gradient descent algorithm.
    case batchGradientDescent // = 1

    /// Uses a normal equation to solve linear regression problem.
    case normalEquation // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .batchGradientDescent
      case 2: self = .normalEquation
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .batchGradientDescent: return 1
      case .normalEquation: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Indicates the training algorithm to use for matrix factorization models.
  public enum FeedbackType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0

    /// Use weighted-als for implicit feedback problems.
    case implicit // = 1

    /// Use nonweighted-als for explicit feedback problems.
    case explicit // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .implicit
      case 2: self = .explicit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .implicit: return 1
      case .explicit: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct SeasonalPeriod {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum SeasonalPeriodType: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case unspecified // = 0

      /// No seasonality
      case noSeasonality // = 1

      /// Daily period, 24 hours.
      case daily // = 2

      /// Weekly period, 7 days.
      case weekly // = 3

      /// Monthly period, 30 days or irregular.
      case monthly // = 4

      /// Quarterly period, 90 days or irregular.
      case quarterly // = 5

      /// Yearly period, 365 days or irregular.
      case yearly // = 6
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .noSeasonality
        case 2: self = .daily
        case 3: self = .weekly
        case 4: self = .monthly
        case 5: self = .quarterly
        case 6: self = .yearly
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .noSeasonality: return 1
        case .daily: return 2
        case .weekly: return 3
        case .monthly: return 4
        case .quarterly: return 5
        case .yearly: return 6
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public struct KmeansEnums {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Indicates the method used to initialize the centroids for KMeans
    /// clustering algorithm.
    public enum KmeansInitializationMethod: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case unspecified // = 0

      /// Initializes the centroids randomly.
      case random // = 1

      /// Initializes the centroids using data specified in
      /// kmeans_initialization_column.
      case custom // = 2

      /// Initializes with kmeans++.
      case kmeansPlusPlus // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .random
        case 2: self = .custom
        case 3: self = .kmeansPlusPlus
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .random: return 1
        case .custom: return 2
        case .kmeansPlusPlus: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  /// Evaluation metrics for regression and explicit feedback type matrix
  /// factorization models.
  public struct RegressionMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Mean absolute error.
    public var meanAbsoluteError: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _meanAbsoluteError ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_meanAbsoluteError = newValue}
    }
    /// Returns true if `meanAbsoluteError` has been explicitly set.
    public var hasMeanAbsoluteError: Bool {return self._meanAbsoluteError != nil}
    /// Clears the value of `meanAbsoluteError`. Subsequent reads from it will return its default value.
    public mutating func clearMeanAbsoluteError() {self._meanAbsoluteError = nil}

    /// Mean squared error.
    public var meanSquaredError: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _meanSquaredError ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_meanSquaredError = newValue}
    }
    /// Returns true if `meanSquaredError` has been explicitly set.
    public var hasMeanSquaredError: Bool {return self._meanSquaredError != nil}
    /// Clears the value of `meanSquaredError`. Subsequent reads from it will return its default value.
    public mutating func clearMeanSquaredError() {self._meanSquaredError = nil}

    /// Mean squared log error.
    public var meanSquaredLogError: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _meanSquaredLogError ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_meanSquaredLogError = newValue}
    }
    /// Returns true if `meanSquaredLogError` has been explicitly set.
    public var hasMeanSquaredLogError: Bool {return self._meanSquaredLogError != nil}
    /// Clears the value of `meanSquaredLogError`. Subsequent reads from it will return its default value.
    public mutating func clearMeanSquaredLogError() {self._meanSquaredLogError = nil}

    /// Median absolute error.
    public var medianAbsoluteError: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _medianAbsoluteError ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_medianAbsoluteError = newValue}
    }
    /// Returns true if `medianAbsoluteError` has been explicitly set.
    public var hasMedianAbsoluteError: Bool {return self._medianAbsoluteError != nil}
    /// Clears the value of `medianAbsoluteError`. Subsequent reads from it will return its default value.
    public mutating func clearMedianAbsoluteError() {self._medianAbsoluteError = nil}

    /// R^2 score.
    public var rSquared: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _rSquared ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_rSquared = newValue}
    }
    /// Returns true if `rSquared` has been explicitly set.
    public var hasRSquared: Bool {return self._rSquared != nil}
    /// Clears the value of `rSquared`. Subsequent reads from it will return its default value.
    public mutating func clearRSquared() {self._rSquared = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _meanAbsoluteError: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _meanSquaredError: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _meanSquaredLogError: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _medianAbsoluteError: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _rSquared: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  }

  /// Aggregate metrics for classification/classifier models. For multi-class
  /// models, the metrics are either macro-averaged or micro-averaged. When
  /// macro-averaged, the metrics are calculated for each label and then an
  /// unweighted average is taken of those values. When micro-averaged, the
  /// metric is calculated globally by counting the total number of correctly
  /// predicted rows.
  public struct AggregateClassificationMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Precision is the fraction of actual positive predictions that had
    /// positive actual labels. For multiclass this is a macro-averaged
    /// metric treating each class as a binary classifier.
    public var precision: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _precision ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_precision = newValue}
    }
    /// Returns true if `precision` has been explicitly set.
    public var hasPrecision: Bool {return self._precision != nil}
    /// Clears the value of `precision`. Subsequent reads from it will return its default value.
    public mutating func clearPrecision() {self._precision = nil}

    /// Recall is the fraction of actual positive labels that were given a
    /// positive prediction. For multiclass this is a macro-averaged metric.
    public var recall: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _recall ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_recall = newValue}
    }
    /// Returns true if `recall` has been explicitly set.
    public var hasRecall: Bool {return self._recall != nil}
    /// Clears the value of `recall`. Subsequent reads from it will return its default value.
    public mutating func clearRecall() {self._recall = nil}

    /// Accuracy is the fraction of predictions given the correct label. For
    /// multiclass this is a micro-averaged metric.
    public var accuracy: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _accuracy ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_accuracy = newValue}
    }
    /// Returns true if `accuracy` has been explicitly set.
    public var hasAccuracy: Bool {return self._accuracy != nil}
    /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
    public mutating func clearAccuracy() {self._accuracy = nil}

    /// Threshold at which the metrics are computed. For binary
    /// classification models this is the positive class threshold.
    /// For multi-class classfication models this is the confidence
    /// threshold.
    public var threshold: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _threshold ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_threshold = newValue}
    }
    /// Returns true if `threshold` has been explicitly set.
    public var hasThreshold: Bool {return self._threshold != nil}
    /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
    public mutating func clearThreshold() {self._threshold = nil}

    /// The F1 score is an average of recall and precision. For multiclass
    /// this is a macro-averaged metric.
    public var f1Score: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _f1Score ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_f1Score = newValue}
    }
    /// Returns true if `f1Score` has been explicitly set.
    public var hasF1Score: Bool {return self._f1Score != nil}
    /// Clears the value of `f1Score`. Subsequent reads from it will return its default value.
    public mutating func clearF1Score() {self._f1Score = nil}

    /// Logarithmic Loss. For multiclass this is a macro-averaged metric.
    public var logLoss: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _logLoss ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_logLoss = newValue}
    }
    /// Returns true if `logLoss` has been explicitly set.
    public var hasLogLoss: Bool {return self._logLoss != nil}
    /// Clears the value of `logLoss`. Subsequent reads from it will return its default value.
    public mutating func clearLogLoss() {self._logLoss = nil}

    /// Area Under a ROC Curve. For multiclass this is a macro-averaged
    /// metric.
    public var rocAuc: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _rocAuc ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_rocAuc = newValue}
    }
    /// Returns true if `rocAuc` has been explicitly set.
    public var hasRocAuc: Bool {return self._rocAuc != nil}
    /// Clears the value of `rocAuc`. Subsequent reads from it will return its default value.
    public mutating func clearRocAuc() {self._rocAuc = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _precision: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _recall: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _accuracy: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _threshold: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _f1Score: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _logLoss: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _rocAuc: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  }

  /// Evaluation metrics for binary classification/classifier models.
  public struct BinaryClassificationMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Aggregate classification metrics.
    public var aggregateClassificationMetrics: Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics {
      get {return _aggregateClassificationMetrics ?? Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics()}
      set {_aggregateClassificationMetrics = newValue}
    }
    /// Returns true if `aggregateClassificationMetrics` has been explicitly set.
    public var hasAggregateClassificationMetrics: Bool {return self._aggregateClassificationMetrics != nil}
    /// Clears the value of `aggregateClassificationMetrics`. Subsequent reads from it will return its default value.
    public mutating func clearAggregateClassificationMetrics() {self._aggregateClassificationMetrics = nil}

    /// Binary confusion matrix at multiple thresholds.
    public var binaryConfusionMatrixList: [Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics.BinaryConfusionMatrix] = []

    /// Label representing the positive class.
    public var positiveLabel: String = String()

    /// Label representing the negative class.
    public var negativeLabel: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Confusion matrix for binary classification models.
    public struct BinaryConfusionMatrix {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Threshold value used when computing each of the following metric.
      public var positiveClassThreshold: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _positiveClassThreshold ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_positiveClassThreshold = newValue}
      }
      /// Returns true if `positiveClassThreshold` has been explicitly set.
      public var hasPositiveClassThreshold: Bool {return self._positiveClassThreshold != nil}
      /// Clears the value of `positiveClassThreshold`. Subsequent reads from it will return its default value.
      public mutating func clearPositiveClassThreshold() {self._positiveClassThreshold = nil}

      /// Number of true samples predicted as true.
      public var truePositives: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _truePositives ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_truePositives = newValue}
      }
      /// Returns true if `truePositives` has been explicitly set.
      public var hasTruePositives: Bool {return self._truePositives != nil}
      /// Clears the value of `truePositives`. Subsequent reads from it will return its default value.
      public mutating func clearTruePositives() {self._truePositives = nil}

      /// Number of false samples predicted as true.
      public var falsePositives: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _falsePositives ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_falsePositives = newValue}
      }
      /// Returns true if `falsePositives` has been explicitly set.
      public var hasFalsePositives: Bool {return self._falsePositives != nil}
      /// Clears the value of `falsePositives`. Subsequent reads from it will return its default value.
      public mutating func clearFalsePositives() {self._falsePositives = nil}

      /// Number of true samples predicted as false.
      public var trueNegatives: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _trueNegatives ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_trueNegatives = newValue}
      }
      /// Returns true if `trueNegatives` has been explicitly set.
      public var hasTrueNegatives: Bool {return self._trueNegatives != nil}
      /// Clears the value of `trueNegatives`. Subsequent reads from it will return its default value.
      public mutating func clearTrueNegatives() {self._trueNegatives = nil}

      /// Number of false samples predicted as false.
      public var falseNegatives: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _falseNegatives ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_falseNegatives = newValue}
      }
      /// Returns true if `falseNegatives` has been explicitly set.
      public var hasFalseNegatives: Bool {return self._falseNegatives != nil}
      /// Clears the value of `falseNegatives`. Subsequent reads from it will return its default value.
      public mutating func clearFalseNegatives() {self._falseNegatives = nil}

      /// The fraction of actual positive predictions that had positive actual
      /// labels.
      public var precision: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _precision ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_precision = newValue}
      }
      /// Returns true if `precision` has been explicitly set.
      public var hasPrecision: Bool {return self._precision != nil}
      /// Clears the value of `precision`. Subsequent reads from it will return its default value.
      public mutating func clearPrecision() {self._precision = nil}

      /// The fraction of actual positive labels that were given a positive
      /// prediction.
      public var recall: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _recall ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_recall = newValue}
      }
      /// Returns true if `recall` has been explicitly set.
      public var hasRecall: Bool {return self._recall != nil}
      /// Clears the value of `recall`. Subsequent reads from it will return its default value.
      public mutating func clearRecall() {self._recall = nil}

      /// The equally weighted average of recall and precision.
      public var f1Score: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _f1Score ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_f1Score = newValue}
      }
      /// Returns true if `f1Score` has been explicitly set.
      public var hasF1Score: Bool {return self._f1Score != nil}
      /// Clears the value of `f1Score`. Subsequent reads from it will return its default value.
      public mutating func clearF1Score() {self._f1Score = nil}

      /// The fraction of predictions given the correct label.
      public var accuracy: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _accuracy ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_accuracy = newValue}
      }
      /// Returns true if `accuracy` has been explicitly set.
      public var hasAccuracy: Bool {return self._accuracy != nil}
      /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
      public mutating func clearAccuracy() {self._accuracy = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _positiveClassThreshold: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
      fileprivate var _truePositives: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      fileprivate var _falsePositives: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      fileprivate var _trueNegatives: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      fileprivate var _falseNegatives: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      fileprivate var _precision: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
      fileprivate var _recall: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
      fileprivate var _f1Score: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
      fileprivate var _accuracy: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    }

    public init() {}

    fileprivate var _aggregateClassificationMetrics: Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics? = nil
  }

  /// Evaluation metrics for multi-class classification/classifier models.
  public struct MultiClassClassificationMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Aggregate classification metrics.
    public var aggregateClassificationMetrics: Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics {
      get {return _aggregateClassificationMetrics ?? Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics()}
      set {_aggregateClassificationMetrics = newValue}
    }
    /// Returns true if `aggregateClassificationMetrics` has been explicitly set.
    public var hasAggregateClassificationMetrics: Bool {return self._aggregateClassificationMetrics != nil}
    /// Clears the value of `aggregateClassificationMetrics`. Subsequent reads from it will return its default value.
    public mutating func clearAggregateClassificationMetrics() {self._aggregateClassificationMetrics = nil}

    /// Confusion matrix at different thresholds.
    public var confusionMatrixList: [Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Confusion matrix for multi-class classification models.
    public struct ConfusionMatrix {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Confidence threshold used when computing the entries of the
      /// confusion matrix.
      public var confidenceThreshold: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _confidenceThreshold ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_confidenceThreshold = newValue}
      }
      /// Returns true if `confidenceThreshold` has been explicitly set.
      public var hasConfidenceThreshold: Bool {return self._confidenceThreshold != nil}
      /// Clears the value of `confidenceThreshold`. Subsequent reads from it will return its default value.
      public mutating func clearConfidenceThreshold() {self._confidenceThreshold = nil}

      /// One row per actual label.
      public var rows: [Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Row] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// A single entry in the confusion matrix.
      public struct Entry {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// The predicted label. For confidence_threshold > 0, we will
        /// also add an entry indicating the number of items under the
        /// confidence threshold.
        public var predictedLabel: String = String()

        /// Number of items being predicted as this label.
        public var itemCount: SwiftProtobuf.Google_Protobuf_Int64Value {
          get {return _itemCount ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
          set {_itemCount = newValue}
        }
        /// Returns true if `itemCount` has been explicitly set.
        public var hasItemCount: Bool {return self._itemCount != nil}
        /// Clears the value of `itemCount`. Subsequent reads from it will return its default value.
        public mutating func clearItemCount() {self._itemCount = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _itemCount: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      }

      /// A single row in the confusion matrix.
      public struct Row {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// The original label of this row.
        public var actualLabel: String = String()

        /// Info describing predicted label distribution.
        public var entries: [Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Entry] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}

      fileprivate var _confidenceThreshold: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    }

    public init() {}

    fileprivate var _aggregateClassificationMetrics: Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics? = nil
  }

  /// Evaluation metrics for clustering models.
  public struct ClusteringMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Davies-Bouldin index.
    public var daviesBouldinIndex: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _daviesBouldinIndex ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_daviesBouldinIndex = newValue}
    }
    /// Returns true if `daviesBouldinIndex` has been explicitly set.
    public var hasDaviesBouldinIndex: Bool {return self._daviesBouldinIndex != nil}
    /// Clears the value of `daviesBouldinIndex`. Subsequent reads from it will return its default value.
    public mutating func clearDaviesBouldinIndex() {self._daviesBouldinIndex = nil}

    /// Mean of squared distances between each sample to its cluster centroid.
    public var meanSquaredDistance: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _meanSquaredDistance ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_meanSquaredDistance = newValue}
    }
    /// Returns true if `meanSquaredDistance` has been explicitly set.
    public var hasMeanSquaredDistance: Bool {return self._meanSquaredDistance != nil}
    /// Clears the value of `meanSquaredDistance`. Subsequent reads from it will return its default value.
    public mutating func clearMeanSquaredDistance() {self._meanSquaredDistance = nil}

    /// [Beta] Information for all clusters.
    public var clusters: [Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Message containing the information about one cluster.
    public struct Cluster {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Centroid id.
      public var centroidID: Int64 = 0

      /// Values of highly variant features for this cluster.
      public var featureValues: [Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue] = []

      /// Count of training data rows that were assigned to this cluster.
      public var count: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _count ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_count = newValue}
      }
      /// Returns true if `count` has been explicitly set.
      public var hasCount: Bool {return self._count != nil}
      /// Clears the value of `count`. Subsequent reads from it will return its default value.
      public mutating func clearCount() {self._count = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Representative value of a single feature within the cluster.
      public struct FeatureValue {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// The feature column name.
        public var featureColumn: String = String()

        public var value: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.OneOf_Value? = nil

        /// The numerical feature value. This is the centroid value for this
        /// feature.
        public var numericalValue: SwiftProtobuf.Google_Protobuf_DoubleValue {
          get {
            if case .numericalValue(let v)? = value {return v}
            return SwiftProtobuf.Google_Protobuf_DoubleValue()
          }
          set {value = .numericalValue(newValue)}
        }

        /// The categorical feature value.
        public var categoricalValue: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue {
          get {
            if case .categoricalValue(let v)? = value {return v}
            return Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue()
          }
          set {value = .categoricalValue(newValue)}
        }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum OneOf_Value: Equatable {
          /// The numerical feature value. This is the centroid value for this
          /// feature.
          case numericalValue(SwiftProtobuf.Google_Protobuf_DoubleValue)
          /// The categorical feature value.
          case categoricalValue(Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue)

        #if !swift(>=4.1)
          public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.OneOf_Value, rhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.OneOf_Value) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.numericalValue, .numericalValue): return {
              guard case .numericalValue(let l) = lhs, case .numericalValue(let r) = rhs else { preconditionFailure() }
              return l == r
            }()
            case (.categoricalValue, .categoricalValue): return {
              guard case .categoricalValue(let l) = lhs, case .categoricalValue(let r) = rhs else { preconditionFailure() }
              return l == r
            }()
            default: return false
            }
          }
        #endif
        }

        /// Representative value of a categorical feature.
        public struct CategoricalValue {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// Counts of all categories for the categorical feature. If there are
          /// more than ten categories, we return top ten (by count) and return
          /// one more CategoryCount with category "_OTHER_" and count as
          /// aggregate counts of remaining categories.
          public var categoryCounts: [Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue.CategoryCount] = []

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          /// Represents the count of a single category within the cluster.
          public struct CategoryCount {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The name of category.
            public var category: String = String()

            /// The count of training samples matching the category within the
            /// cluster.
            public var count: SwiftProtobuf.Google_Protobuf_Int64Value {
              get {return _count ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
              set {_count = newValue}
            }
            /// Returns true if `count` has been explicitly set.
            public var hasCount: Bool {return self._count != nil}
            /// Clears the value of `count`. Subsequent reads from it will return its default value.
            public mutating func clearCount() {self._count = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _count: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
          }

          public init() {}
        }

        public init() {}
      }

      public init() {}

      fileprivate var _count: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    }

    public init() {}

    fileprivate var _daviesBouldinIndex: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _meanSquaredDistance: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  }

  /// Evaluation metrics used by weighted-ALS models specified by
  /// feedback_type=implicit.
  public struct RankingMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Calculates a precision per user for all the items by ranking them and
    /// then averages all the precisions across all the users.
    public var meanAveragePrecision: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _meanAveragePrecision ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_meanAveragePrecision = newValue}
    }
    /// Returns true if `meanAveragePrecision` has been explicitly set.
    public var hasMeanAveragePrecision: Bool {return self._meanAveragePrecision != nil}
    /// Clears the value of `meanAveragePrecision`. Subsequent reads from it will return its default value.
    public mutating func clearMeanAveragePrecision() {self._meanAveragePrecision = nil}

    /// Similar to the mean squared error computed in regression and explicit
    /// recommendation models except instead of computing the rating directly,
    /// the output from evaluate is computed against a preference which is 1 or 0
    /// depending on if the rating exists or not.
    public var meanSquaredError: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _meanSquaredError ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_meanSquaredError = newValue}
    }
    /// Returns true if `meanSquaredError` has been explicitly set.
    public var hasMeanSquaredError: Bool {return self._meanSquaredError != nil}
    /// Clears the value of `meanSquaredError`. Subsequent reads from it will return its default value.
    public mutating func clearMeanSquaredError() {self._meanSquaredError = nil}

    /// A metric to determine the goodness of a ranking calculated from the
    /// predicted confidence by comparing it to an ideal rank measured by the
    /// original ratings.
    public var normalizedDiscountedCumulativeGain: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _normalizedDiscountedCumulativeGain ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_normalizedDiscountedCumulativeGain = newValue}
    }
    /// Returns true if `normalizedDiscountedCumulativeGain` has been explicitly set.
    public var hasNormalizedDiscountedCumulativeGain: Bool {return self._normalizedDiscountedCumulativeGain != nil}
    /// Clears the value of `normalizedDiscountedCumulativeGain`. Subsequent reads from it will return its default value.
    public mutating func clearNormalizedDiscountedCumulativeGain() {self._normalizedDiscountedCumulativeGain = nil}

    /// Determines the goodness of a ranking by computing the percentile rank
    /// from the predicted confidence and dividing it by the original rank.
    public var averageRank: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _averageRank ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_averageRank = newValue}
    }
    /// Returns true if `averageRank` has been explicitly set.
    public var hasAverageRank: Bool {return self._averageRank != nil}
    /// Clears the value of `averageRank`. Subsequent reads from it will return its default value.
    public mutating func clearAverageRank() {self._averageRank = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _meanAveragePrecision: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _meanSquaredError: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _normalizedDiscountedCumulativeGain: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _averageRank: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  }

  /// Model evaluation metrics for ARIMA forecasting models.
  public struct ArimaForecastingMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Non-seasonal order.
    public var nonSeasonalOrder: [Google_Cloud_Bigquery_V2_Model.ArimaOrder] = []

    /// Arima model fitting metrics.
    public var arimaFittingMetrics: [Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics] = []

    /// Seasonal periods. Repeated because multiple periods are supported for one
    /// time series.
    public var seasonalPeriods: [Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType] = []

    /// Whether Arima model fitted with drift or not. It is always false when d
    /// is not 1.
    public var hasDrift_p: [Bool] = []

    /// Id to differentiate different time series for the large-scale case.
    public var timeSeriesID: [String] = []

    /// Repeated as there can be many metric sets (one for each model) in
    /// auto-arima and the large-scale case.
    public var arimaSingleModelForecastingMetrics: [Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics.ArimaSingleModelForecastingMetrics] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Model evaluation metrics for a single ARIMA forecasting model.
    public struct ArimaSingleModelForecastingMetrics {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Non-seasonal order.
      public var nonSeasonalOrder: Google_Cloud_Bigquery_V2_Model.ArimaOrder {
        get {return _nonSeasonalOrder ?? Google_Cloud_Bigquery_V2_Model.ArimaOrder()}
        set {_nonSeasonalOrder = newValue}
      }
      /// Returns true if `nonSeasonalOrder` has been explicitly set.
      public var hasNonSeasonalOrder: Bool {return self._nonSeasonalOrder != nil}
      /// Clears the value of `nonSeasonalOrder`. Subsequent reads from it will return its default value.
      public mutating func clearNonSeasonalOrder() {self._nonSeasonalOrder = nil}

      /// Arima fitting metrics.
      public var arimaFittingMetrics: Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics {
        get {return _arimaFittingMetrics ?? Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics()}
        set {_arimaFittingMetrics = newValue}
      }
      /// Returns true if `arimaFittingMetrics` has been explicitly set.
      public var hasArimaFittingMetrics: Bool {return self._arimaFittingMetrics != nil}
      /// Clears the value of `arimaFittingMetrics`. Subsequent reads from it will return its default value.
      public mutating func clearArimaFittingMetrics() {self._arimaFittingMetrics = nil}

      /// Is arima model fitted with drift or not. It is always false when d
      /// is not 1.
      public var hasDrift_p: Bool = false

      /// The id to indicate different time series.
      public var timeSeriesID: String = String()

      /// Seasonal periods. Repeated because multiple periods are supported
      /// for one time series.
      public var seasonalPeriods: [Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _nonSeasonalOrder: Google_Cloud_Bigquery_V2_Model.ArimaOrder? = nil
      fileprivate var _arimaFittingMetrics: Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics? = nil
    }

    public init() {}
  }

  /// Evaluation metrics of a model. These are either computed on all training
  /// data or just the eval data based on whether eval data was used during
  /// training. These are not present for imported models.
  public struct EvaluationMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var metrics: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics.OneOf_Metrics? = nil

    /// Populated for regression models and explicit feedback type matrix
    /// factorization models.
    public var regressionMetrics: Google_Cloud_Bigquery_V2_Model.RegressionMetrics {
      get {
        if case .regressionMetrics(let v)? = metrics {return v}
        return Google_Cloud_Bigquery_V2_Model.RegressionMetrics()
      }
      set {metrics = .regressionMetrics(newValue)}
    }

    /// Populated for binary classification/classifier models.
    public var binaryClassificationMetrics: Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics {
      get {
        if case .binaryClassificationMetrics(let v)? = metrics {return v}
        return Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics()
      }
      set {metrics = .binaryClassificationMetrics(newValue)}
    }

    /// Populated for multi-class classification/classifier models.
    public var multiClassClassificationMetrics: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics {
      get {
        if case .multiClassClassificationMetrics(let v)? = metrics {return v}
        return Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics()
      }
      set {metrics = .multiClassClassificationMetrics(newValue)}
    }

    /// Populated for clustering models.
    public var clusteringMetrics: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics {
      get {
        if case .clusteringMetrics(let v)? = metrics {return v}
        return Google_Cloud_Bigquery_V2_Model.ClusteringMetrics()
      }
      set {metrics = .clusteringMetrics(newValue)}
    }

    /// Populated for implicit feedback type matrix factorization models.
    public var rankingMetrics: Google_Cloud_Bigquery_V2_Model.RankingMetrics {
      get {
        if case .rankingMetrics(let v)? = metrics {return v}
        return Google_Cloud_Bigquery_V2_Model.RankingMetrics()
      }
      set {metrics = .rankingMetrics(newValue)}
    }

    /// Populated for ARIMA models.
    public var arimaForecastingMetrics: Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics {
      get {
        if case .arimaForecastingMetrics(let v)? = metrics {return v}
        return Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics()
      }
      set {metrics = .arimaForecastingMetrics(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Metrics: Equatable {
      /// Populated for regression models and explicit feedback type matrix
      /// factorization models.
      case regressionMetrics(Google_Cloud_Bigquery_V2_Model.RegressionMetrics)
      /// Populated for binary classification/classifier models.
      case binaryClassificationMetrics(Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics)
      /// Populated for multi-class classification/classifier models.
      case multiClassClassificationMetrics(Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics)
      /// Populated for clustering models.
      case clusteringMetrics(Google_Cloud_Bigquery_V2_Model.ClusteringMetrics)
      /// Populated for implicit feedback type matrix factorization models.
      case rankingMetrics(Google_Cloud_Bigquery_V2_Model.RankingMetrics)
      /// Populated for ARIMA models.
      case arimaForecastingMetrics(Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics.OneOf_Metrics, rhs: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics.OneOf_Metrics) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.regressionMetrics, .regressionMetrics): return {
          guard case .regressionMetrics(let l) = lhs, case .regressionMetrics(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.binaryClassificationMetrics, .binaryClassificationMetrics): return {
          guard case .binaryClassificationMetrics(let l) = lhs, case .binaryClassificationMetrics(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.multiClassClassificationMetrics, .multiClassClassificationMetrics): return {
          guard case .multiClassClassificationMetrics(let l) = lhs, case .multiClassClassificationMetrics(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.clusteringMetrics, .clusteringMetrics): return {
          guard case .clusteringMetrics(let l) = lhs, case .clusteringMetrics(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.rankingMetrics, .rankingMetrics): return {
          guard case .rankingMetrics(let l) = lhs, case .rankingMetrics(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.arimaForecastingMetrics, .arimaForecastingMetrics): return {
          guard case .arimaForecastingMetrics(let l) = lhs, case .arimaForecastingMetrics(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  /// Data split result. This contains references to the training and evaluation
  /// data tables that were used to train the model.
  public struct DataSplitResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Table reference of the training data after split.
    public var trainingTable: Google_Cloud_Bigquery_V2_TableReference {
      get {return _trainingTable ?? Google_Cloud_Bigquery_V2_TableReference()}
      set {_trainingTable = newValue}
    }
    /// Returns true if `trainingTable` has been explicitly set.
    public var hasTrainingTable: Bool {return self._trainingTable != nil}
    /// Clears the value of `trainingTable`. Subsequent reads from it will return its default value.
    public mutating func clearTrainingTable() {self._trainingTable = nil}

    /// Table reference of the evaluation data after split.
    public var evaluationTable: Google_Cloud_Bigquery_V2_TableReference {
      get {return _evaluationTable ?? Google_Cloud_Bigquery_V2_TableReference()}
      set {_evaluationTable = newValue}
    }
    /// Returns true if `evaluationTable` has been explicitly set.
    public var hasEvaluationTable: Bool {return self._evaluationTable != nil}
    /// Clears the value of `evaluationTable`. Subsequent reads from it will return its default value.
    public mutating func clearEvaluationTable() {self._evaluationTable = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _trainingTable: Google_Cloud_Bigquery_V2_TableReference? = nil
    fileprivate var _evaluationTable: Google_Cloud_Bigquery_V2_TableReference? = nil
  }

  /// Arima order, can be used for both non-seasonal and seasonal parts.
  public struct ArimaOrder {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Order of the autoregressive part.
    public var p: Int64 = 0

    /// Order of the differencing part.
    public var d: Int64 = 0

    /// Order of the moving-average part.
    public var q: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// ARIMA model fitting metrics.
  public struct ArimaFittingMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Log-likelihood.
    public var logLikelihood: Double = 0

    /// AIC.
    public var aic: Double = 0

    /// Variance.
    public var variance: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Global explanations containing the top most important features
  /// after training.
  public struct GlobalExplanation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A list of the top global explanations. Sorted by absolute value of
    /// attribution in descending order.
    public var explanations: [Google_Cloud_Bigquery_V2_Model.GlobalExplanation.Explanation] = []

    /// Class label for this set of global explanations. Will be empty/null for
    /// binary logistic and linear regression models. Sorted alphabetically in
    /// descending order.
    public var classLabel: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Explanation for a single feature.
    public struct Explanation {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Full name of the feature. For non-numerical features, will be
      /// formatted like <column_name>.<encoded_feature_name>. Overall size of
      /// feature name will always be truncated to first 120 characters.
      public var featureName: String = String()

      /// Attribution of feature.
      public var attribution: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _attribution ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_attribution = newValue}
      }
      /// Returns true if `attribution` has been explicitly set.
      public var hasAttribution: Bool {return self._attribution != nil}
      /// Clears the value of `attribution`. Subsequent reads from it will return its default value.
      public mutating func clearAttribution() {self._attribution = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _attribution: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    }

    public init() {}
  }

  /// Information about a single training query run for the model.
  public struct TrainingRun {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Options that were used for this training run, includes
    /// user specified and default options that were used.
    public var trainingOptions: Google_Cloud_Bigquery_V2_Model.TrainingRun.TrainingOptions {
      get {return _storage._trainingOptions ?? Google_Cloud_Bigquery_V2_Model.TrainingRun.TrainingOptions()}
      set {_uniqueStorage()._trainingOptions = newValue}
    }
    /// Returns true if `trainingOptions` has been explicitly set.
    public var hasTrainingOptions: Bool {return _storage._trainingOptions != nil}
    /// Clears the value of `trainingOptions`. Subsequent reads from it will return its default value.
    public mutating func clearTrainingOptions() {_uniqueStorage()._trainingOptions = nil}

    /// The start time of this training run.
    public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._startTime = newValue}
    }
    /// Returns true if `startTime` has been explicitly set.
    public var hasStartTime: Bool {return _storage._startTime != nil}
    /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
    public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

    /// Output of each iteration run, results.size() <= max_iterations.
    public var results: [Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult] {
      get {return _storage._results}
      set {_uniqueStorage()._results = newValue}
    }

    /// The evaluation metrics over training/eval data that were computed at the
    /// end of training.
    public var evaluationMetrics: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics {
      get {return _storage._evaluationMetrics ?? Google_Cloud_Bigquery_V2_Model.EvaluationMetrics()}
      set {_uniqueStorage()._evaluationMetrics = newValue}
    }
    /// Returns true if `evaluationMetrics` has been explicitly set.
    public var hasEvaluationMetrics: Bool {return _storage._evaluationMetrics != nil}
    /// Clears the value of `evaluationMetrics`. Subsequent reads from it will return its default value.
    public mutating func clearEvaluationMetrics() {_uniqueStorage()._evaluationMetrics = nil}

    /// Data split result of the training run. Only set when the input data is
    /// actually split.
    public var dataSplitResult: Google_Cloud_Bigquery_V2_Model.DataSplitResult {
      get {return _storage._dataSplitResult ?? Google_Cloud_Bigquery_V2_Model.DataSplitResult()}
      set {_uniqueStorage()._dataSplitResult = newValue}
    }
    /// Returns true if `dataSplitResult` has been explicitly set.
    public var hasDataSplitResult: Bool {return _storage._dataSplitResult != nil}
    /// Clears the value of `dataSplitResult`. Subsequent reads from it will return its default value.
    public mutating func clearDataSplitResult() {_uniqueStorage()._dataSplitResult = nil}

    /// Global explanations for important features of the model. For multi-class
    /// models, there is one entry for each label class. For other models, there
    /// is only one entry in the list.
    public var globalExplanations: [Google_Cloud_Bigquery_V2_Model.GlobalExplanation] {
      get {return _storage._globalExplanations}
      set {_uniqueStorage()._globalExplanations = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct TrainingOptions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The maximum number of iterations in training. Used only for iterative
      /// training algorithms.
      public var maxIterations: Int64 {
        get {return _storage._maxIterations}
        set {_uniqueStorage()._maxIterations = newValue}
      }

      /// Type of loss function used during training run.
      public var lossType: Google_Cloud_Bigquery_V2_Model.LossType {
        get {return _storage._lossType}
        set {_uniqueStorage()._lossType = newValue}
      }

      /// Learning rate in training. Used only for iterative training algorithms.
      public var learnRate: Double {
        get {return _storage._learnRate}
        set {_uniqueStorage()._learnRate = newValue}
      }

      /// L1 regularization coefficient.
      public var l1Regularization: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _storage._l1Regularization ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_uniqueStorage()._l1Regularization = newValue}
      }
      /// Returns true if `l1Regularization` has been explicitly set.
      public var hasL1Regularization: Bool {return _storage._l1Regularization != nil}
      /// Clears the value of `l1Regularization`. Subsequent reads from it will return its default value.
      public mutating func clearL1Regularization() {_uniqueStorage()._l1Regularization = nil}

      /// L2 regularization coefficient.
      public var l2Regularization: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _storage._l2Regularization ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_uniqueStorage()._l2Regularization = newValue}
      }
      /// Returns true if `l2Regularization` has been explicitly set.
      public var hasL2Regularization: Bool {return _storage._l2Regularization != nil}
      /// Clears the value of `l2Regularization`. Subsequent reads from it will return its default value.
      public mutating func clearL2Regularization() {_uniqueStorage()._l2Regularization = nil}

      /// When early_stop is true, stops training when accuracy improvement is
      /// less than 'min_relative_progress'. Used only for iterative training
      /// algorithms.
      public var minRelativeProgress: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _storage._minRelativeProgress ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_uniqueStorage()._minRelativeProgress = newValue}
      }
      /// Returns true if `minRelativeProgress` has been explicitly set.
      public var hasMinRelativeProgress: Bool {return _storage._minRelativeProgress != nil}
      /// Clears the value of `minRelativeProgress`. Subsequent reads from it will return its default value.
      public mutating func clearMinRelativeProgress() {_uniqueStorage()._minRelativeProgress = nil}

      /// Whether to train a model from the last checkpoint.
      public var warmStart: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._warmStart ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._warmStart = newValue}
      }
      /// Returns true if `warmStart` has been explicitly set.
      public var hasWarmStart: Bool {return _storage._warmStart != nil}
      /// Clears the value of `warmStart`. Subsequent reads from it will return its default value.
      public mutating func clearWarmStart() {_uniqueStorage()._warmStart = nil}

      /// Whether to stop early when the loss doesn't improve significantly
      /// any more (compared to min_relative_progress). Used only for iterative
      /// training algorithms.
      public var earlyStop: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._earlyStop ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._earlyStop = newValue}
      }
      /// Returns true if `earlyStop` has been explicitly set.
      public var hasEarlyStop: Bool {return _storage._earlyStop != nil}
      /// Clears the value of `earlyStop`. Subsequent reads from it will return its default value.
      public mutating func clearEarlyStop() {_uniqueStorage()._earlyStop = nil}

      /// Name of input label columns in training data.
      public var inputLabelColumns: [String] {
        get {return _storage._inputLabelColumns}
        set {_uniqueStorage()._inputLabelColumns = newValue}
      }

      /// The data split type for training and evaluation, e.g. RANDOM.
      public var dataSplitMethod: Google_Cloud_Bigquery_V2_Model.DataSplitMethod {
        get {return _storage._dataSplitMethod}
        set {_uniqueStorage()._dataSplitMethod = newValue}
      }

      /// The fraction of evaluation data over the whole input data. The rest
      /// of data will be used as training data. The format should be double.
      /// Accurate to two decimal places.
      /// Default value is 0.2.
      public var dataSplitEvalFraction: Double {
        get {return _storage._dataSplitEvalFraction}
        set {_uniqueStorage()._dataSplitEvalFraction = newValue}
      }

      /// The column to split data with. This column won't be used as a
      /// feature.
      /// 1. When data_split_method is CUSTOM, the corresponding column should
      /// be boolean. The rows with true value tag are eval data, and the false
      /// are training data.
      /// 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION
      /// rows (from smallest to largest) in the corresponding column are used
      /// as training data, and the rest are eval data. It respects the order
      /// in Orderable data types:
      /// https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
      public var dataSplitColumn: String {
        get {return _storage._dataSplitColumn}
        set {_uniqueStorage()._dataSplitColumn = newValue}
      }

      /// The strategy to determine learn rate for the current iteration.
      public var learnRateStrategy: Google_Cloud_Bigquery_V2_Model.LearnRateStrategy {
        get {return _storage._learnRateStrategy}
        set {_uniqueStorage()._learnRateStrategy = newValue}
      }

      /// Specifies the initial learning rate for the line search learn rate
      /// strategy.
      public var initialLearnRate: Double {
        get {return _storage._initialLearnRate}
        set {_uniqueStorage()._initialLearnRate = newValue}
      }

      /// Weights associated with each label class, for rebalancing the
      /// training data. Only applicable for classification models.
      public var labelClassWeights: Dictionary<String,Double> {
        get {return _storage._labelClassWeights}
        set {_uniqueStorage()._labelClassWeights = newValue}
      }

      /// User column specified for matrix factorization models.
      public var userColumn: String {
        get {return _storage._userColumn}
        set {_uniqueStorage()._userColumn = newValue}
      }

      /// Item column specified for matrix factorization models.
      public var itemColumn: String {
        get {return _storage._itemColumn}
        set {_uniqueStorage()._itemColumn = newValue}
      }

      /// Distance type for clustering models.
      public var distanceType: Google_Cloud_Bigquery_V2_Model.DistanceType {
        get {return _storage._distanceType}
        set {_uniqueStorage()._distanceType = newValue}
      }

      /// Number of clusters for clustering models.
      public var numClusters: Int64 {
        get {return _storage._numClusters}
        set {_uniqueStorage()._numClusters = newValue}
      }

      /// [Beta] Google Cloud Storage URI from which the model was imported. Only
      /// applicable for imported models.
      public var modelUri: String {
        get {return _storage._modelUri}
        set {_uniqueStorage()._modelUri = newValue}
      }

      /// Optimization strategy for training linear regression models.
      public var optimizationStrategy: Google_Cloud_Bigquery_V2_Model.OptimizationStrategy {
        get {return _storage._optimizationStrategy}
        set {_uniqueStorage()._optimizationStrategy = newValue}
      }

      /// Hidden units for dnn models.
      public var hiddenUnits: [Int64] {
        get {return _storage._hiddenUnits}
        set {_uniqueStorage()._hiddenUnits = newValue}
      }

      /// Batch size for dnn models.
      public var batchSize: Int64 {
        get {return _storage._batchSize}
        set {_uniqueStorage()._batchSize = newValue}
      }

      /// Dropout probability for dnn models.
      public var dropout: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _storage._dropout ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_uniqueStorage()._dropout = newValue}
      }
      /// Returns true if `dropout` has been explicitly set.
      public var hasDropout: Bool {return _storage._dropout != nil}
      /// Clears the value of `dropout`. Subsequent reads from it will return its default value.
      public mutating func clearDropout() {_uniqueStorage()._dropout = nil}

      /// Maximum depth of a tree for boosted tree models.
      public var maxTreeDepth: Int64 {
        get {return _storage._maxTreeDepth}
        set {_uniqueStorage()._maxTreeDepth = newValue}
      }

      /// Subsample fraction of the training data to grow tree to prevent
      /// overfitting for boosted tree models.
      public var subsample: Double {
        get {return _storage._subsample}
        set {_uniqueStorage()._subsample = newValue}
      }

      /// Minimum split loss for boosted tree models.
      public var minSplitLoss: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _storage._minSplitLoss ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_uniqueStorage()._minSplitLoss = newValue}
      }
      /// Returns true if `minSplitLoss` has been explicitly set.
      public var hasMinSplitLoss: Bool {return _storage._minSplitLoss != nil}
      /// Clears the value of `minSplitLoss`. Subsequent reads from it will return its default value.
      public mutating func clearMinSplitLoss() {_uniqueStorage()._minSplitLoss = nil}

      /// Num factors specified for matrix factorization models.
      public var numFactors: Int64 {
        get {return _storage._numFactors}
        set {_uniqueStorage()._numFactors = newValue}
      }

      /// Feedback type that specifies which algorithm to run for matrix
      /// factorization.
      public var feedbackType: Google_Cloud_Bigquery_V2_Model.FeedbackType {
        get {return _storage._feedbackType}
        set {_uniqueStorage()._feedbackType = newValue}
      }

      /// Hyperparameter for matrix factoration when implicit feedback type is
      /// specified.
      public var walsAlpha: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _storage._walsAlpha ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_uniqueStorage()._walsAlpha = newValue}
      }
      /// Returns true if `walsAlpha` has been explicitly set.
      public var hasWalsAlpha: Bool {return _storage._walsAlpha != nil}
      /// Clears the value of `walsAlpha`. Subsequent reads from it will return its default value.
      public mutating func clearWalsAlpha() {_uniqueStorage()._walsAlpha = nil}

      /// The method used to initialize the centroids for kmeans algorithm.
      public var kmeansInitializationMethod: Google_Cloud_Bigquery_V2_Model.KmeansEnums.KmeansInitializationMethod {
        get {return _storage._kmeansInitializationMethod}
        set {_uniqueStorage()._kmeansInitializationMethod = newValue}
      }

      /// The column used to provide the initial centroids for kmeans algorithm
      /// when kmeans_initialization_method is CUSTOM.
      public var kmeansInitializationColumn: String {
        get {return _storage._kmeansInitializationColumn}
        set {_uniqueStorage()._kmeansInitializationColumn = newValue}
      }

      /// Column to be designated as time series timestamp for ARIMA model.
      public var timeSeriesTimestampColumn: String {
        get {return _storage._timeSeriesTimestampColumn}
        set {_uniqueStorage()._timeSeriesTimestampColumn = newValue}
      }

      /// Column to be designated as time series data for ARIMA model.
      public var timeSeriesDataColumn: String {
        get {return _storage._timeSeriesDataColumn}
        set {_uniqueStorage()._timeSeriesDataColumn = newValue}
      }

      /// Whether to enable auto ARIMA or not.
      public var autoArima: Bool {
        get {return _storage._autoArima}
        set {_uniqueStorage()._autoArima = newValue}
      }

      /// A specification of the non-seasonal part of the ARIMA model: the three
      /// components (p, d, q) are the AR order, the degree of differencing, and
      /// the MA order.
      public var nonSeasonalOrder: Google_Cloud_Bigquery_V2_Model.ArimaOrder {
        get {return _storage._nonSeasonalOrder ?? Google_Cloud_Bigquery_V2_Model.ArimaOrder()}
        set {_uniqueStorage()._nonSeasonalOrder = newValue}
      }
      /// Returns true if `nonSeasonalOrder` has been explicitly set.
      public var hasNonSeasonalOrder: Bool {return _storage._nonSeasonalOrder != nil}
      /// Clears the value of `nonSeasonalOrder`. Subsequent reads from it will return its default value.
      public mutating func clearNonSeasonalOrder() {_uniqueStorage()._nonSeasonalOrder = nil}

      /// The data frequency of a time series.
      public var dataFrequency: Google_Cloud_Bigquery_V2_Model.DataFrequency {
        get {return _storage._dataFrequency}
        set {_uniqueStorage()._dataFrequency = newValue}
      }

      /// Include drift when fitting an ARIMA model.
      public var includeDrift: Bool {
        get {return _storage._includeDrift}
        set {_uniqueStorage()._includeDrift = newValue}
      }

      /// The geographical region based on which the holidays are considered in
      /// time series modeling. If a valid value is specified, then holiday
      /// effects modeling is enabled.
      public var holidayRegion: Google_Cloud_Bigquery_V2_Model.HolidayRegion {
        get {return _storage._holidayRegion}
        set {_uniqueStorage()._holidayRegion = newValue}
      }

      /// The id column that will be used to indicate different time series to
      /// forecast in parallel.
      public var timeSeriesIDColumn: String {
        get {return _storage._timeSeriesIDColumn}
        set {_uniqueStorage()._timeSeriesIDColumn = newValue}
      }

      /// The number of periods ahead that need to be forecasted.
      public var horizon: Int64 {
        get {return _storage._horizon}
        set {_uniqueStorage()._horizon = newValue}
      }

      /// Whether to preserve the input structs in output feature names.
      /// Suppose there is a struct A with field b.
      /// When false (default), the output feature name is A_b.
      /// When true, the output feature name is A.b.
      public var preserveInputStructs: Bool {
        get {return _storage._preserveInputStructs}
        set {_uniqueStorage()._preserveInputStructs = newValue}
      }

      /// The max value of non-seasonal p and q.
      public var autoArimaMaxOrder: Int64 {
        get {return _storage._autoArimaMaxOrder}
        set {_uniqueStorage()._autoArimaMaxOrder = newValue}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    /// Information about a single iteration of the training run.
    public struct IterationResult {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Index of the iteration, 0 based.
      public var index: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _index ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_index = newValue}
      }
      /// Returns true if `index` has been explicitly set.
      public var hasIndex: Bool {return self._index != nil}
      /// Clears the value of `index`. Subsequent reads from it will return its default value.
      public mutating func clearIndex() {self._index = nil}

      /// Time taken to run the iteration in milliseconds.
      public var durationMs: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _durationMs ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_durationMs = newValue}
      }
      /// Returns true if `durationMs` has been explicitly set.
      public var hasDurationMs: Bool {return self._durationMs != nil}
      /// Clears the value of `durationMs`. Subsequent reads from it will return its default value.
      public mutating func clearDurationMs() {self._durationMs = nil}

      /// Loss computed on the training data at the end of iteration.
      public var trainingLoss: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _trainingLoss ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_trainingLoss = newValue}
      }
      /// Returns true if `trainingLoss` has been explicitly set.
      public var hasTrainingLoss: Bool {return self._trainingLoss != nil}
      /// Clears the value of `trainingLoss`. Subsequent reads from it will return its default value.
      public mutating func clearTrainingLoss() {self._trainingLoss = nil}

      /// Loss computed on the eval data at the end of iteration.
      public var evalLoss: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get {return _evalLoss ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
        set {_evalLoss = newValue}
      }
      /// Returns true if `evalLoss` has been explicitly set.
      public var hasEvalLoss: Bool {return self._evalLoss != nil}
      /// Clears the value of `evalLoss`. Subsequent reads from it will return its default value.
      public mutating func clearEvalLoss() {self._evalLoss = nil}

      /// Learn rate used for this iteration.
      public var learnRate: Double = 0

      /// Information about top clusters for clustering models.
      public var clusterInfos: [Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ClusterInfo] = []

      public var arimaResult: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult {
        get {return _arimaResult ?? Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult()}
        set {_arimaResult = newValue}
      }
      /// Returns true if `arimaResult` has been explicitly set.
      public var hasArimaResult: Bool {return self._arimaResult != nil}
      /// Clears the value of `arimaResult`. Subsequent reads from it will return its default value.
      public mutating func clearArimaResult() {self._arimaResult = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Information about a single cluster for clustering model.
      public struct ClusterInfo {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Centroid id.
        public var centroidID: Int64 = 0

        /// Cluster radius, the average distance from centroid
        /// to each point assigned to the cluster.
        public var clusterRadius: SwiftProtobuf.Google_Protobuf_DoubleValue {
          get {return _clusterRadius ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
          set {_clusterRadius = newValue}
        }
        /// Returns true if `clusterRadius` has been explicitly set.
        public var hasClusterRadius: Bool {return self._clusterRadius != nil}
        /// Clears the value of `clusterRadius`. Subsequent reads from it will return its default value.
        public mutating func clearClusterRadius() {self._clusterRadius = nil}

        /// Cluster size, the total number of points assigned to the cluster.
        public var clusterSize: SwiftProtobuf.Google_Protobuf_Int64Value {
          get {return _clusterSize ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
          set {_clusterSize = newValue}
        }
        /// Returns true if `clusterSize` has been explicitly set.
        public var hasClusterSize: Bool {return self._clusterSize != nil}
        /// Clears the value of `clusterSize`. Subsequent reads from it will return its default value.
        public mutating func clearClusterSize() {self._clusterSize = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _clusterRadius: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
        fileprivate var _clusterSize: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      }

      /// (Auto-)arima fitting result. Wrap everything in ArimaResult for easier
      /// refactoring if we want to use model-specific iteration results.
      public struct ArimaResult {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// This message is repeated because there are multiple arima models
        /// fitted in auto-arima. For non-auto-arima model, its size is one.
        public var arimaModelInfo: [Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaModelInfo] = []

        /// Seasonal periods. Repeated because multiple periods are supported for
        /// one time series.
        public var seasonalPeriods: [Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Arima coefficients.
        public struct ArimaCoefficients {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// Auto-regressive coefficients, an array of double.
          public var autoRegressiveCoefficients: [Double] = []

          /// Moving-average coefficients, an array of double.
          public var movingAverageCoefficients: [Double] = []

          /// Intercept coefficient, just a double not an array.
          public var interceptCoefficient: Double = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        /// Arima model information.
        public struct ArimaModelInfo {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// Non-seasonal order.
          public var nonSeasonalOrder: Google_Cloud_Bigquery_V2_Model.ArimaOrder {
            get {return _nonSeasonalOrder ?? Google_Cloud_Bigquery_V2_Model.ArimaOrder()}
            set {_nonSeasonalOrder = newValue}
          }
          /// Returns true if `nonSeasonalOrder` has been explicitly set.
          public var hasNonSeasonalOrder: Bool {return self._nonSeasonalOrder != nil}
          /// Clears the value of `nonSeasonalOrder`. Subsequent reads from it will return its default value.
          public mutating func clearNonSeasonalOrder() {self._nonSeasonalOrder = nil}

          /// Arima coefficients.
          public var arimaCoefficients: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients {
            get {return _arimaCoefficients ?? Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients()}
            set {_arimaCoefficients = newValue}
          }
          /// Returns true if `arimaCoefficients` has been explicitly set.
          public var hasArimaCoefficients: Bool {return self._arimaCoefficients != nil}
          /// Clears the value of `arimaCoefficients`. Subsequent reads from it will return its default value.
          public mutating func clearArimaCoefficients() {self._arimaCoefficients = nil}

          /// Arima fitting metrics.
          public var arimaFittingMetrics: Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics {
            get {return _arimaFittingMetrics ?? Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics()}
            set {_arimaFittingMetrics = newValue}
          }
          /// Returns true if `arimaFittingMetrics` has been explicitly set.
          public var hasArimaFittingMetrics: Bool {return self._arimaFittingMetrics != nil}
          /// Clears the value of `arimaFittingMetrics`. Subsequent reads from it will return its default value.
          public mutating func clearArimaFittingMetrics() {self._arimaFittingMetrics = nil}

          /// Whether Arima model fitted with drift or not. It is always false
          /// when d is not 1.
          public var hasDrift_p: Bool = false

          /// The id to indicate different time series.
          public var timeSeriesID: String = String()

          /// Seasonal periods. Repeated because multiple periods are supported
          /// for one time series.
          public var seasonalPeriods: [Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType] = []

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _nonSeasonalOrder: Google_Cloud_Bigquery_V2_Model.ArimaOrder? = nil
          fileprivate var _arimaCoefficients: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients? = nil
          fileprivate var _arimaFittingMetrics: Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics? = nil
        }

        public init() {}
      }

      public init() {}

      fileprivate var _index: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
      fileprivate var _durationMs: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
      fileprivate var _trainingLoss: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
      fileprivate var _evalLoss: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
      fileprivate var _arimaResult: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult? = nil
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _modelReference: Google_Cloud_Bigquery_V2_ModelReference? = nil
  fileprivate var _encryptionConfiguration: Google_Cloud_Bigquery_V2_EncryptionConfiguration? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Bigquery_V2_Model.ModelType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.ModelType] = [
    .unspecified,
    .linearRegression,
    .logisticRegression,
    .kmeans,
    .matrixFactorization,
    .dnnClassifier,
    .tensorflow,
    .dnnRegressor,
    .boostedTreeRegressor,
    .boostedTreeClassifier,
    .arima,
    .automlRegressor,
    .automlClassifier,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.LossType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.LossType] = [
    .unspecified,
    .meanSquaredLoss,
    .meanLogLoss,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.DistanceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.DistanceType] = [
    .unspecified,
    .euclidean,
    .cosine,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.DataSplitMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.DataSplitMethod] = [
    .unspecified,
    .random,
    .custom,
    .sequential,
    .noSplit,
    .autoSplit,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.DataFrequency: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.DataFrequency] = [
    .unspecified,
    .autoFrequency,
    .yearly,
    .quarterly,
    .monthly,
    .weekly,
    .daily,
    .hourly,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.HolidayRegion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.HolidayRegion] = [
    .unspecified,
    .global,
    .na,
    .japac,
    .emea,
    .lac,
    .ae,
    .ar,
    .at,
    .au,
    .be,
    .br,
    .ca,
    .ch,
    .cl,
    .cn,
    .co,
    .cs,
    .cz,
    .de,
    .dk,
    .dz,
    .ec,
    .ee,
    .eg,
    .es,
    .fi,
    .fr,
    .gb,
    .gr,
    .hk,
    .hu,
    .id,
    .ie,
    .il,
    .in,
    .ir,
    .it,
    .jp,
    .kr,
    .lv,
    .ma,
    .mx,
    .my,
    .ng,
    .nl,
    .no,
    .nz,
    .pe,
    .ph,
    .pk,
    .pl,
    .pt,
    .ro,
    .rs,
    .ru,
    .sa,
    .se,
    .sg,
    .si,
    .sk,
    .th,
    .tr,
    .tw,
    .ua,
    .us,
    .ve,
    .vn,
    .za,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.LearnRateStrategy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.LearnRateStrategy] = [
    .unspecified,
    .lineSearch,
    .constant,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.OptimizationStrategy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.OptimizationStrategy] = [
    .unspecified,
    .batchGradientDescent,
    .normalEquation,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.FeedbackType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.FeedbackType] = [
    .unspecified,
    .implicit,
    .explicit,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType] = [
    .unspecified,
    .noSeasonality,
    .daily,
    .weekly,
    .monthly,
    .quarterly,
    .yearly,
  ]
}

extension Google_Cloud_Bigquery_V2_Model.KmeansEnums.KmeansInitializationMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Bigquery_V2_Model.KmeansEnums.KmeansInitializationMethod] = [
    .unspecified,
    .random,
    .custom,
    .kmeansPlusPlus,
  ]
}

#endif  // swift(>=4.2)

public struct Google_Cloud_Bigquery_V2_GetModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project ID of the requested model.
  public var projectID: String = String()

  /// Required. Dataset ID of the requested model.
  public var datasetID: String = String()

  /// Required. Model ID of the requested model.
  public var modelID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloud_Bigquery_V2_PatchModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project ID of the model to patch.
  public var projectID: String {
    get {return _storage._projectID}
    set {_uniqueStorage()._projectID = newValue}
  }

  /// Required. Dataset ID of the model to patch.
  public var datasetID: String {
    get {return _storage._datasetID}
    set {_uniqueStorage()._datasetID = newValue}
  }

  /// Required. Model ID of the model to patch.
  public var modelID: String {
    get {return _storage._modelID}
    set {_uniqueStorage()._modelID = newValue}
  }

  /// Required. Patched model.
  /// Follows RFC5789 patch semantics. Missing fields are not updated.
  /// To clear a field, explicitly set to default value.
  public var model: Google_Cloud_Bigquery_V2_Model {
    get {return _storage._model ?? Google_Cloud_Bigquery_V2_Model()}
    set {_uniqueStorage()._model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return _storage._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {_uniqueStorage()._model = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Google_Cloud_Bigquery_V2_DeleteModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project ID of the model to delete.
  public var projectID: String = String()

  /// Required. Dataset ID of the model to delete.
  public var datasetID: String = String()

  /// Required. Model ID of the model to delete.
  public var modelID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloud_Bigquery_V2_ListModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project ID of the models to list.
  public var projectID: String = String()

  /// Required. Dataset ID of the models to list.
  public var datasetID: String = String()

  /// The maximum number of results to return in a single response page.
  /// Leverage the page tokens to iterate through the entire collection.
  public var maxResults: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _maxResults ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_maxResults = newValue}
  }
  /// Returns true if `maxResults` has been explicitly set.
  public var hasMaxResults: Bool {return self._maxResults != nil}
  /// Clears the value of `maxResults`. Subsequent reads from it will return its default value.
  public mutating func clearMaxResults() {self._maxResults = nil}

  /// Page token, returned by a previous call to request the next page of
  /// results
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxResults: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
}

public struct Google_Cloud_Bigquery_V2_ListModelsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Models in the requested dataset. Only the following fields are populated:
  /// model_reference, model_type, creation_time, last_modified_time and
  /// labels.
  public var models: [Google_Cloud_Bigquery_V2_Model] = []

  /// A token to request the next page of results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_Model: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Model"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "etag"),
    2: .standard(proto: "model_reference"),
    5: .standard(proto: "creation_time"),
    6: .standard(proto: "last_modified_time"),
    12: .same(proto: "description"),
    14: .standard(proto: "friendly_name"),
    15: .same(proto: "labels"),
    16: .standard(proto: "expiration_time"),
    13: .same(proto: "location"),
    17: .standard(proto: "encryption_configuration"),
    7: .standard(proto: "model_type"),
    9: .standard(proto: "training_runs"),
    10: .standard(proto: "feature_columns"),
    11: .standard(proto: "label_columns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._modelReference) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.creationTime) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastModifiedTime) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.modelType) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.trainingRuns) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.featureColumns) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.labelColumns) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.location) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.friendlyName) }()
      case 15: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 16: try { try decoder.decodeSingularInt64Field(value: &self.expirationTime) }()
      case 17: try { try decoder.decodeSingularMessageField(value: &self._encryptionConfiguration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 1)
    }
    if let v = self._modelReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.creationTime != 0 {
      try visitor.visitSingularInt64Field(value: self.creationTime, fieldNumber: 5)
    }
    if self.lastModifiedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.lastModifiedTime, fieldNumber: 6)
    }
    if self.modelType != .unspecified {
      try visitor.visitSingularEnumField(value: self.modelType, fieldNumber: 7)
    }
    if !self.trainingRuns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trainingRuns, fieldNumber: 9)
    }
    if !self.featureColumns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featureColumns, fieldNumber: 10)
    }
    if !self.labelColumns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.labelColumns, fieldNumber: 11)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 12)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 13)
    }
    if !self.friendlyName.isEmpty {
      try visitor.visitSingularStringField(value: self.friendlyName, fieldNumber: 14)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 15)
    }
    if self.expirationTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expirationTime, fieldNumber: 16)
    }
    if let v = self._encryptionConfiguration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model, rhs: Google_Cloud_Bigquery_V2_Model) -> Bool {
    if lhs.etag != rhs.etag {return false}
    if lhs._modelReference != rhs._modelReference {return false}
    if lhs.creationTime != rhs.creationTime {return false}
    if lhs.lastModifiedTime != rhs.lastModifiedTime {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.friendlyName != rhs.friendlyName {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.expirationTime != rhs.expirationTime {return false}
    if lhs.location != rhs.location {return false}
    if lhs._encryptionConfiguration != rhs._encryptionConfiguration {return false}
    if lhs.modelType != rhs.modelType {return false}
    if lhs.trainingRuns != rhs.trainingRuns {return false}
    if lhs.featureColumns != rhs.featureColumns {return false}
    if lhs.labelColumns != rhs.labelColumns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ModelType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODEL_TYPE_UNSPECIFIED"),
    1: .same(proto: "LINEAR_REGRESSION"),
    2: .same(proto: "LOGISTIC_REGRESSION"),
    3: .same(proto: "KMEANS"),
    4: .same(proto: "MATRIX_FACTORIZATION"),
    5: .same(proto: "DNN_CLASSIFIER"),
    6: .same(proto: "TENSORFLOW"),
    7: .same(proto: "DNN_REGRESSOR"),
    9: .same(proto: "BOOSTED_TREE_REGRESSOR"),
    10: .same(proto: "BOOSTED_TREE_CLASSIFIER"),
    11: .same(proto: "ARIMA"),
    12: .same(proto: "AUTOML_REGRESSOR"),
    13: .same(proto: "AUTOML_CLASSIFIER"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.LossType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOSS_TYPE_UNSPECIFIED"),
    1: .same(proto: "MEAN_SQUARED_LOSS"),
    2: .same(proto: "MEAN_LOG_LOSS"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.DistanceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISTANCE_TYPE_UNSPECIFIED"),
    1: .same(proto: "EUCLIDEAN"),
    2: .same(proto: "COSINE"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.DataSplitMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_SPLIT_METHOD_UNSPECIFIED"),
    1: .same(proto: "RANDOM"),
    2: .same(proto: "CUSTOM"),
    3: .same(proto: "SEQUENTIAL"),
    4: .same(proto: "NO_SPLIT"),
    5: .same(proto: "AUTO_SPLIT"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.DataFrequency: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_FREQUENCY_UNSPECIFIED"),
    1: .same(proto: "AUTO_FREQUENCY"),
    2: .same(proto: "YEARLY"),
    3: .same(proto: "QUARTERLY"),
    4: .same(proto: "MONTHLY"),
    5: .same(proto: "WEEKLY"),
    6: .same(proto: "DAILY"),
    7: .same(proto: "HOURLY"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.HolidayRegion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HOLIDAY_REGION_UNSPECIFIED"),
    1: .same(proto: "GLOBAL"),
    2: .same(proto: "NA"),
    3: .same(proto: "JAPAC"),
    4: .same(proto: "EMEA"),
    5: .same(proto: "LAC"),
    6: .same(proto: "AE"),
    7: .same(proto: "AR"),
    8: .same(proto: "AT"),
    9: .same(proto: "AU"),
    10: .same(proto: "BE"),
    11: .same(proto: "BR"),
    12: .same(proto: "CA"),
    13: .same(proto: "CH"),
    14: .same(proto: "CL"),
    15: .same(proto: "CN"),
    16: .same(proto: "CO"),
    17: .same(proto: "CS"),
    18: .same(proto: "CZ"),
    19: .same(proto: "DE"),
    20: .same(proto: "DK"),
    21: .same(proto: "DZ"),
    22: .same(proto: "EC"),
    23: .same(proto: "EE"),
    24: .same(proto: "EG"),
    25: .same(proto: "ES"),
    26: .same(proto: "FI"),
    27: .same(proto: "FR"),
    28: .same(proto: "GB"),
    29: .same(proto: "GR"),
    30: .same(proto: "HK"),
    31: .same(proto: "HU"),
    32: .same(proto: "ID"),
    33: .same(proto: "IE"),
    34: .same(proto: "IL"),
    35: .same(proto: "IN"),
    36: .same(proto: "IR"),
    37: .same(proto: "IT"),
    38: .same(proto: "JP"),
    39: .same(proto: "KR"),
    40: .same(proto: "LV"),
    41: .same(proto: "MA"),
    42: .same(proto: "MX"),
    43: .same(proto: "MY"),
    44: .same(proto: "NG"),
    45: .same(proto: "NL"),
    46: .same(proto: "NO"),
    47: .same(proto: "NZ"),
    48: .same(proto: "PE"),
    49: .same(proto: "PH"),
    50: .same(proto: "PK"),
    51: .same(proto: "PL"),
    52: .same(proto: "PT"),
    53: .same(proto: "RO"),
    54: .same(proto: "RS"),
    55: .same(proto: "RU"),
    56: .same(proto: "SA"),
    57: .same(proto: "SE"),
    58: .same(proto: "SG"),
    59: .same(proto: "SI"),
    60: .same(proto: "SK"),
    61: .same(proto: "TH"),
    62: .same(proto: "TR"),
    63: .same(proto: "TW"),
    64: .same(proto: "UA"),
    65: .same(proto: "US"),
    66: .same(proto: "VE"),
    67: .same(proto: "VN"),
    68: .same(proto: "ZA"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.LearnRateStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEARN_RATE_STRATEGY_UNSPECIFIED"),
    1: .same(proto: "LINE_SEARCH"),
    2: .same(proto: "CONSTANT"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.OptimizationStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPTIMIZATION_STRATEGY_UNSPECIFIED"),
    1: .same(proto: "BATCH_GRADIENT_DESCENT"),
    2: .same(proto: "NORMAL_EQUATION"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.FeedbackType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FEEDBACK_TYPE_UNSPECIFIED"),
    1: .same(proto: "IMPLICIT"),
    2: .same(proto: "EXPLICIT"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.SeasonalPeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".SeasonalPeriod"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.SeasonalPeriod, rhs: Google_Cloud_Bigquery_V2_Model.SeasonalPeriod) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.SeasonalPeriod.SeasonalPeriodType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"),
    1: .same(proto: "NO_SEASONALITY"),
    2: .same(proto: "DAILY"),
    3: .same(proto: "WEEKLY"),
    4: .same(proto: "MONTHLY"),
    5: .same(proto: "QUARTERLY"),
    6: .same(proto: "YEARLY"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.KmeansEnums: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".KmeansEnums"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.KmeansEnums, rhs: Google_Cloud_Bigquery_V2_Model.KmeansEnums) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.KmeansEnums.KmeansInitializationMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED"),
    1: .same(proto: "RANDOM"),
    2: .same(proto: "CUSTOM"),
    3: .same(proto: "KMEANS_PLUS_PLUS"),
  ]
}

extension Google_Cloud_Bigquery_V2_Model.RegressionMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".RegressionMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mean_absolute_error"),
    2: .standard(proto: "mean_squared_error"),
    3: .standard(proto: "mean_squared_log_error"),
    4: .standard(proto: "median_absolute_error"),
    5: .standard(proto: "r_squared"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._meanAbsoluteError) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meanSquaredError) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._meanSquaredLogError) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._medianAbsoluteError) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rSquared) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._meanAbsoluteError {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._meanSquaredError {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._meanSquaredLogError {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._medianAbsoluteError {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._rSquared {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.RegressionMetrics, rhs: Google_Cloud_Bigquery_V2_Model.RegressionMetrics) -> Bool {
    if lhs._meanAbsoluteError != rhs._meanAbsoluteError {return false}
    if lhs._meanSquaredError != rhs._meanSquaredError {return false}
    if lhs._meanSquaredLogError != rhs._meanSquaredLogError {return false}
    if lhs._medianAbsoluteError != rhs._medianAbsoluteError {return false}
    if lhs._rSquared != rhs._rSquared {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".AggregateClassificationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "precision"),
    2: .same(proto: "recall"),
    3: .same(proto: "accuracy"),
    4: .same(proto: "threshold"),
    5: .standard(proto: "f1_score"),
    6: .standard(proto: "log_loss"),
    7: .standard(proto: "roc_auc"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._precision) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._recall) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._accuracy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._threshold) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._f1Score) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._logLoss) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._rocAuc) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._precision {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._recall {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._accuracy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._threshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._f1Score {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._logLoss {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._rocAuc {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics, rhs: Google_Cloud_Bigquery_V2_Model.AggregateClassificationMetrics) -> Bool {
    if lhs._precision != rhs._precision {return false}
    if lhs._recall != rhs._recall {return false}
    if lhs._accuracy != rhs._accuracy {return false}
    if lhs._threshold != rhs._threshold {return false}
    if lhs._f1Score != rhs._f1Score {return false}
    if lhs._logLoss != rhs._logLoss {return false}
    if lhs._rocAuc != rhs._rocAuc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".BinaryClassificationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aggregate_classification_metrics"),
    2: .standard(proto: "binary_confusion_matrix_list"),
    3: .standard(proto: "positive_label"),
    4: .standard(proto: "negative_label"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._aggregateClassificationMetrics) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.binaryConfusionMatrixList) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.positiveLabel) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.negativeLabel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._aggregateClassificationMetrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.binaryConfusionMatrixList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.binaryConfusionMatrixList, fieldNumber: 2)
    }
    if !self.positiveLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.positiveLabel, fieldNumber: 3)
    }
    if !self.negativeLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.negativeLabel, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics, rhs: Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics) -> Bool {
    if lhs._aggregateClassificationMetrics != rhs._aggregateClassificationMetrics {return false}
    if lhs.binaryConfusionMatrixList != rhs.binaryConfusionMatrixList {return false}
    if lhs.positiveLabel != rhs.positiveLabel {return false}
    if lhs.negativeLabel != rhs.negativeLabel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics.BinaryConfusionMatrix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics.protoMessageName + ".BinaryConfusionMatrix"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "positive_class_threshold"),
    2: .standard(proto: "true_positives"),
    3: .standard(proto: "false_positives"),
    4: .standard(proto: "true_negatives"),
    5: .standard(proto: "false_negatives"),
    6: .same(proto: "precision"),
    7: .same(proto: "recall"),
    8: .standard(proto: "f1_score"),
    9: .same(proto: "accuracy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._positiveClassThreshold) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._truePositives) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._falsePositives) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._trueNegatives) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._falseNegatives) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._precision) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._recall) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._f1Score) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._accuracy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._positiveClassThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._truePositives {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._falsePositives {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._trueNegatives {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._falseNegatives {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._precision {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._recall {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._f1Score {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._accuracy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics.BinaryConfusionMatrix, rhs: Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics.BinaryConfusionMatrix) -> Bool {
    if lhs._positiveClassThreshold != rhs._positiveClassThreshold {return false}
    if lhs._truePositives != rhs._truePositives {return false}
    if lhs._falsePositives != rhs._falsePositives {return false}
    if lhs._trueNegatives != rhs._trueNegatives {return false}
    if lhs._falseNegatives != rhs._falseNegatives {return false}
    if lhs._precision != rhs._precision {return false}
    if lhs._recall != rhs._recall {return false}
    if lhs._f1Score != rhs._f1Score {return false}
    if lhs._accuracy != rhs._accuracy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".MultiClassClassificationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aggregate_classification_metrics"),
    2: .standard(proto: "confusion_matrix_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._aggregateClassificationMetrics) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.confusionMatrixList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._aggregateClassificationMetrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.confusionMatrixList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.confusionMatrixList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics, rhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics) -> Bool {
    if lhs._aggregateClassificationMetrics != rhs._aggregateClassificationMetrics {return false}
    if lhs.confusionMatrixList != rhs.confusionMatrixList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.protoMessageName + ".ConfusionMatrix"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "confidence_threshold"),
    2: .same(proto: "rows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._confidenceThreshold) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._confidenceThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix, rhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix) -> Bool {
    if lhs._confidenceThreshold != rhs._confidenceThreshold {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.protoMessageName + ".Entry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "predicted_label"),
    2: .standard(proto: "item_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.predictedLabel) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._itemCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.predictedLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.predictedLabel, fieldNumber: 1)
    }
    if let v = self._itemCount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Entry, rhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Entry) -> Bool {
    if lhs.predictedLabel != rhs.predictedLabel {return false}
    if lhs._itemCount != rhs._itemCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Row: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.protoMessageName + ".Row"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "actual_label"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.actualLabel) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.actualLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.actualLabel, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Row, rhs: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics.ConfusionMatrix.Row) -> Bool {
    if lhs.actualLabel != rhs.actualLabel {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ClusteringMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".ClusteringMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "davies_bouldin_index"),
    2: .standard(proto: "mean_squared_distance"),
    3: .same(proto: "clusters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._daviesBouldinIndex) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meanSquaredDistance) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.clusters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._daviesBouldinIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._meanSquaredDistance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.clusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clusters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics, rhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics) -> Bool {
    if lhs._daviesBouldinIndex != rhs._daviesBouldinIndex {return false}
    if lhs._meanSquaredDistance != rhs._meanSquaredDistance {return false}
    if lhs.clusters != rhs.clusters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.protoMessageName + ".Cluster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "centroid_id"),
    2: .standard(proto: "feature_values"),
    3: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.centroidID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.featureValues) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.centroidID != 0 {
      try visitor.visitSingularInt64Field(value: self.centroidID, fieldNumber: 1)
    }
    if !self.featureValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featureValues, fieldNumber: 2)
    }
    if let v = self._count {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster, rhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster) -> Bool {
    if lhs.centroidID != rhs.centroidID {return false}
    if lhs.featureValues != rhs.featureValues {return false}
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.protoMessageName + ".FeatureValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_column"),
    2: .standard(proto: "numerical_value"),
    3: .standard(proto: "categorical_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.featureColumn) }()
      case 2: try {
        var v: SwiftProtobuf.Google_Protobuf_DoubleValue?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .numericalValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .numericalValue(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .categoricalValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .categoricalValue(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureColumn.isEmpty {
      try visitor.visitSingularStringField(value: self.featureColumn, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.value {
    case .numericalValue?: try {
      guard case .numericalValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .categoricalValue?: try {
      guard case .categoricalValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue, rhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue) -> Bool {
    if lhs.featureColumn != rhs.featureColumn {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.protoMessageName + ".CategoricalValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "category_counts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.categoryCounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.categoryCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoryCounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue, rhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue) -> Bool {
    if lhs.categoryCounts != rhs.categoryCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue.CategoryCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue.protoMessageName + ".CategoryCount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    2: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.category) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 1)
    }
    if let v = self._count {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue.CategoryCount, rhs: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics.Cluster.FeatureValue.CategoricalValue.CategoryCount) -> Bool {
    if lhs.category != rhs.category {return false}
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.RankingMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".RankingMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mean_average_precision"),
    2: .standard(proto: "mean_squared_error"),
    3: .standard(proto: "normalized_discounted_cumulative_gain"),
    4: .standard(proto: "average_rank"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._meanAveragePrecision) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meanSquaredError) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._normalizedDiscountedCumulativeGain) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._averageRank) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._meanAveragePrecision {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._meanSquaredError {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._normalizedDiscountedCumulativeGain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._averageRank {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.RankingMetrics, rhs: Google_Cloud_Bigquery_V2_Model.RankingMetrics) -> Bool {
    if lhs._meanAveragePrecision != rhs._meanAveragePrecision {return false}
    if lhs._meanSquaredError != rhs._meanSquaredError {return false}
    if lhs._normalizedDiscountedCumulativeGain != rhs._normalizedDiscountedCumulativeGain {return false}
    if lhs._averageRank != rhs._averageRank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".ArimaForecastingMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "non_seasonal_order"),
    2: .standard(proto: "arima_fitting_metrics"),
    3: .standard(proto: "seasonal_periods"),
    4: .standard(proto: "has_drift"),
    5: .standard(proto: "time_series_id"),
    6: .standard(proto: "arima_single_model_forecasting_metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.nonSeasonalOrder) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.arimaFittingMetrics) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.seasonalPeriods) }()
      case 4: try { try decoder.decodeRepeatedBoolField(value: &self.hasDrift_p) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.timeSeriesID) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.arimaSingleModelForecastingMetrics) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nonSeasonalOrder.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonSeasonalOrder, fieldNumber: 1)
    }
    if !self.arimaFittingMetrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.arimaFittingMetrics, fieldNumber: 2)
    }
    if !self.seasonalPeriods.isEmpty {
      try visitor.visitPackedEnumField(value: self.seasonalPeriods, fieldNumber: 3)
    }
    if !self.hasDrift_p.isEmpty {
      try visitor.visitPackedBoolField(value: self.hasDrift_p, fieldNumber: 4)
    }
    if !self.timeSeriesID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.timeSeriesID, fieldNumber: 5)
    }
    if !self.arimaSingleModelForecastingMetrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.arimaSingleModelForecastingMetrics, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics, rhs: Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics) -> Bool {
    if lhs.nonSeasonalOrder != rhs.nonSeasonalOrder {return false}
    if lhs.arimaFittingMetrics != rhs.arimaFittingMetrics {return false}
    if lhs.seasonalPeriods != rhs.seasonalPeriods {return false}
    if lhs.hasDrift_p != rhs.hasDrift_p {return false}
    if lhs.timeSeriesID != rhs.timeSeriesID {return false}
    if lhs.arimaSingleModelForecastingMetrics != rhs.arimaSingleModelForecastingMetrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics.ArimaSingleModelForecastingMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics.protoMessageName + ".ArimaSingleModelForecastingMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "non_seasonal_order"),
    2: .standard(proto: "arima_fitting_metrics"),
    3: .standard(proto: "has_drift"),
    4: .standard(proto: "time_series_id"),
    5: .standard(proto: "seasonal_periods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._nonSeasonalOrder) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._arimaFittingMetrics) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasDrift_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.timeSeriesID) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.seasonalPeriods) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._nonSeasonalOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._arimaFittingMetrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.hasDrift_p != false {
      try visitor.visitSingularBoolField(value: self.hasDrift_p, fieldNumber: 3)
    }
    if !self.timeSeriesID.isEmpty {
      try visitor.visitSingularStringField(value: self.timeSeriesID, fieldNumber: 4)
    }
    if !self.seasonalPeriods.isEmpty {
      try visitor.visitPackedEnumField(value: self.seasonalPeriods, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics.ArimaSingleModelForecastingMetrics, rhs: Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics.ArimaSingleModelForecastingMetrics) -> Bool {
    if lhs._nonSeasonalOrder != rhs._nonSeasonalOrder {return false}
    if lhs._arimaFittingMetrics != rhs._arimaFittingMetrics {return false}
    if lhs.hasDrift_p != rhs.hasDrift_p {return false}
    if lhs.timeSeriesID != rhs.timeSeriesID {return false}
    if lhs.seasonalPeriods != rhs.seasonalPeriods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.EvaluationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".EvaluationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "regression_metrics"),
    2: .standard(proto: "binary_classification_metrics"),
    3: .standard(proto: "multi_class_classification_metrics"),
    4: .standard(proto: "clustering_metrics"),
    5: .standard(proto: "ranking_metrics"),
    6: .standard(proto: "arima_forecasting_metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Bigquery_V2_Model.RegressionMetrics?
        if let current = self.metrics {
          try decoder.handleConflictingOneOf()
          if case .regressionMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.metrics = .regressionMetrics(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Bigquery_V2_Model.BinaryClassificationMetrics?
        if let current = self.metrics {
          try decoder.handleConflictingOneOf()
          if case .binaryClassificationMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.metrics = .binaryClassificationMetrics(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Bigquery_V2_Model.MultiClassClassificationMetrics?
        if let current = self.metrics {
          try decoder.handleConflictingOneOf()
          if case .multiClassClassificationMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.metrics = .multiClassClassificationMetrics(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Bigquery_V2_Model.ClusteringMetrics?
        if let current = self.metrics {
          try decoder.handleConflictingOneOf()
          if case .clusteringMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.metrics = .clusteringMetrics(v)}
      }()
      case 5: try {
        var v: Google_Cloud_Bigquery_V2_Model.RankingMetrics?
        if let current = self.metrics {
          try decoder.handleConflictingOneOf()
          if case .rankingMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.metrics = .rankingMetrics(v)}
      }()
      case 6: try {
        var v: Google_Cloud_Bigquery_V2_Model.ArimaForecastingMetrics?
        if let current = self.metrics {
          try decoder.handleConflictingOneOf()
          if case .arimaForecastingMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.metrics = .arimaForecastingMetrics(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.metrics {
    case .regressionMetrics?: try {
      guard case .regressionMetrics(let v)? = self.metrics else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .binaryClassificationMetrics?: try {
      guard case .binaryClassificationMetrics(let v)? = self.metrics else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .multiClassClassificationMetrics?: try {
      guard case .multiClassClassificationMetrics(let v)? = self.metrics else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .clusteringMetrics?: try {
      guard case .clusteringMetrics(let v)? = self.metrics else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .rankingMetrics?: try {
      guard case .rankingMetrics(let v)? = self.metrics else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .arimaForecastingMetrics?: try {
      guard case .arimaForecastingMetrics(let v)? = self.metrics else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics, rhs: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics) -> Bool {
    if lhs.metrics != rhs.metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.DataSplitResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".DataSplitResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "training_table"),
    2: .standard(proto: "evaluation_table"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trainingTable) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._evaluationTable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trainingTable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._evaluationTable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.DataSplitResult, rhs: Google_Cloud_Bigquery_V2_Model.DataSplitResult) -> Bool {
    if lhs._trainingTable != rhs._trainingTable {return false}
    if lhs._evaluationTable != rhs._evaluationTable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ArimaOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".ArimaOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "p"),
    2: .same(proto: "d"),
    3: .same(proto: "q"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.p) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.d) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.q) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.p != 0 {
      try visitor.visitSingularInt64Field(value: self.p, fieldNumber: 1)
    }
    if self.d != 0 {
      try visitor.visitSingularInt64Field(value: self.d, fieldNumber: 2)
    }
    if self.q != 0 {
      try visitor.visitSingularInt64Field(value: self.q, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ArimaOrder, rhs: Google_Cloud_Bigquery_V2_Model.ArimaOrder) -> Bool {
    if lhs.p != rhs.p {return false}
    if lhs.d != rhs.d {return false}
    if lhs.q != rhs.q {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".ArimaFittingMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "log_likelihood"),
    2: .same(proto: "aic"),
    3: .same(proto: "variance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.logLikelihood) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.aic) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.variance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.logLikelihood != 0 {
      try visitor.visitSingularDoubleField(value: self.logLikelihood, fieldNumber: 1)
    }
    if self.aic != 0 {
      try visitor.visitSingularDoubleField(value: self.aic, fieldNumber: 2)
    }
    if self.variance != 0 {
      try visitor.visitSingularDoubleField(value: self.variance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics, rhs: Google_Cloud_Bigquery_V2_Model.ArimaFittingMetrics) -> Bool {
    if lhs.logLikelihood != rhs.logLikelihood {return false}
    if lhs.aic != rhs.aic {return false}
    if lhs.variance != rhs.variance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.GlobalExplanation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".GlobalExplanation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "explanations"),
    2: .standard(proto: "class_label"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.explanations) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.classLabel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.explanations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.explanations, fieldNumber: 1)
    }
    if !self.classLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.classLabel, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.GlobalExplanation, rhs: Google_Cloud_Bigquery_V2_Model.GlobalExplanation) -> Bool {
    if lhs.explanations != rhs.explanations {return false}
    if lhs.classLabel != rhs.classLabel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.GlobalExplanation.Explanation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.GlobalExplanation.protoMessageName + ".Explanation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_name"),
    2: .same(proto: "attribution"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.featureName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._attribution) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureName.isEmpty {
      try visitor.visitSingularStringField(value: self.featureName, fieldNumber: 1)
    }
    if let v = self._attribution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.GlobalExplanation.Explanation, rhs: Google_Cloud_Bigquery_V2_Model.GlobalExplanation.Explanation) -> Bool {
    if lhs.featureName != rhs.featureName {return false}
    if lhs._attribution != rhs._attribution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.protoMessageName + ".TrainingRun"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "training_options"),
    8: .standard(proto: "start_time"),
    6: .same(proto: "results"),
    7: .standard(proto: "evaluation_metrics"),
    9: .standard(proto: "data_split_result"),
    10: .standard(proto: "global_explanations"),
  ]

  fileprivate class _StorageClass {
    var _trainingOptions: Google_Cloud_Bigquery_V2_Model.TrainingRun.TrainingOptions? = nil
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _results: [Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult] = []
    var _evaluationMetrics: Google_Cloud_Bigquery_V2_Model.EvaluationMetrics? = nil
    var _dataSplitResult: Google_Cloud_Bigquery_V2_Model.DataSplitResult? = nil
    var _globalExplanations: [Google_Cloud_Bigquery_V2_Model.GlobalExplanation] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trainingOptions = source._trainingOptions
      _startTime = source._startTime
      _results = source._results
      _evaluationMetrics = source._evaluationMetrics
      _dataSplitResult = source._dataSplitResult
      _globalExplanations = source._globalExplanations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._trainingOptions) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._results) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._evaluationMetrics) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._dataSplitResult) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._globalExplanations) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._trainingOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._results.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._results, fieldNumber: 6)
      }
      if let v = _storage._evaluationMetrics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._dataSplitResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._globalExplanations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._globalExplanations, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trainingOptions != rhs_storage._trainingOptions {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._results != rhs_storage._results {return false}
        if _storage._evaluationMetrics != rhs_storage._evaluationMetrics {return false}
        if _storage._dataSplitResult != rhs_storage._dataSplitResult {return false}
        if _storage._globalExplanations != rhs_storage._globalExplanations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun.TrainingOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.TrainingRun.protoMessageName + ".TrainingOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_iterations"),
    2: .standard(proto: "loss_type"),
    3: .standard(proto: "learn_rate"),
    4: .standard(proto: "l1_regularization"),
    5: .standard(proto: "l2_regularization"),
    6: .standard(proto: "min_relative_progress"),
    7: .standard(proto: "warm_start"),
    8: .standard(proto: "early_stop"),
    9: .standard(proto: "input_label_columns"),
    10: .standard(proto: "data_split_method"),
    11: .standard(proto: "data_split_eval_fraction"),
    12: .standard(proto: "data_split_column"),
    13: .standard(proto: "learn_rate_strategy"),
    16: .standard(proto: "initial_learn_rate"),
    17: .standard(proto: "label_class_weights"),
    18: .standard(proto: "user_column"),
    19: .standard(proto: "item_column"),
    20: .standard(proto: "distance_type"),
    21: .standard(proto: "num_clusters"),
    22: .standard(proto: "model_uri"),
    23: .standard(proto: "optimization_strategy"),
    24: .standard(proto: "hidden_units"),
    25: .standard(proto: "batch_size"),
    26: .same(proto: "dropout"),
    27: .standard(proto: "max_tree_depth"),
    28: .same(proto: "subsample"),
    29: .standard(proto: "min_split_loss"),
    30: .standard(proto: "num_factors"),
    31: .standard(proto: "feedback_type"),
    32: .standard(proto: "wals_alpha"),
    33: .standard(proto: "kmeans_initialization_method"),
    34: .standard(proto: "kmeans_initialization_column"),
    35: .standard(proto: "time_series_timestamp_column"),
    36: .standard(proto: "time_series_data_column"),
    37: .standard(proto: "auto_arima"),
    38: .standard(proto: "non_seasonal_order"),
    39: .standard(proto: "data_frequency"),
    41: .standard(proto: "include_drift"),
    42: .standard(proto: "holiday_region"),
    43: .standard(proto: "time_series_id_column"),
    44: .same(proto: "horizon"),
    45: .standard(proto: "preserve_input_structs"),
    46: .standard(proto: "auto_arima_max_order"),
  ]

  fileprivate class _StorageClass {
    var _maxIterations: Int64 = 0
    var _lossType: Google_Cloud_Bigquery_V2_Model.LossType = .unspecified
    var _learnRate: Double = 0
    var _l1Regularization: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _l2Regularization: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _minRelativeProgress: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _warmStart: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _earlyStop: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _inputLabelColumns: [String] = []
    var _dataSplitMethod: Google_Cloud_Bigquery_V2_Model.DataSplitMethod = .unspecified
    var _dataSplitEvalFraction: Double = 0
    var _dataSplitColumn: String = String()
    var _learnRateStrategy: Google_Cloud_Bigquery_V2_Model.LearnRateStrategy = .unspecified
    var _initialLearnRate: Double = 0
    var _labelClassWeights: Dictionary<String,Double> = [:]
    var _userColumn: String = String()
    var _itemColumn: String = String()
    var _distanceType: Google_Cloud_Bigquery_V2_Model.DistanceType = .unspecified
    var _numClusters: Int64 = 0
    var _modelUri: String = String()
    var _optimizationStrategy: Google_Cloud_Bigquery_V2_Model.OptimizationStrategy = .unspecified
    var _hiddenUnits: [Int64] = []
    var _batchSize: Int64 = 0
    var _dropout: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _maxTreeDepth: Int64 = 0
    var _subsample: Double = 0
    var _minSplitLoss: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _numFactors: Int64 = 0
    var _feedbackType: Google_Cloud_Bigquery_V2_Model.FeedbackType = .unspecified
    var _walsAlpha: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _kmeansInitializationMethod: Google_Cloud_Bigquery_V2_Model.KmeansEnums.KmeansInitializationMethod = .unspecified
    var _kmeansInitializationColumn: String = String()
    var _timeSeriesTimestampColumn: String = String()
    var _timeSeriesDataColumn: String = String()
    var _autoArima: Bool = false
    var _nonSeasonalOrder: Google_Cloud_Bigquery_V2_Model.ArimaOrder? = nil
    var _dataFrequency: Google_Cloud_Bigquery_V2_Model.DataFrequency = .unspecified
    var _includeDrift: Bool = false
    var _holidayRegion: Google_Cloud_Bigquery_V2_Model.HolidayRegion = .unspecified
    var _timeSeriesIDColumn: String = String()
    var _horizon: Int64 = 0
    var _preserveInputStructs: Bool = false
    var _autoArimaMaxOrder: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _maxIterations = source._maxIterations
      _lossType = source._lossType
      _learnRate = source._learnRate
      _l1Regularization = source._l1Regularization
      _l2Regularization = source._l2Regularization
      _minRelativeProgress = source._minRelativeProgress
      _warmStart = source._warmStart
      _earlyStop = source._earlyStop
      _inputLabelColumns = source._inputLabelColumns
      _dataSplitMethod = source._dataSplitMethod
      _dataSplitEvalFraction = source._dataSplitEvalFraction
      _dataSplitColumn = source._dataSplitColumn
      _learnRateStrategy = source._learnRateStrategy
      _initialLearnRate = source._initialLearnRate
      _labelClassWeights = source._labelClassWeights
      _userColumn = source._userColumn
      _itemColumn = source._itemColumn
      _distanceType = source._distanceType
      _numClusters = source._numClusters
      _modelUri = source._modelUri
      _optimizationStrategy = source._optimizationStrategy
      _hiddenUnits = source._hiddenUnits
      _batchSize = source._batchSize
      _dropout = source._dropout
      _maxTreeDepth = source._maxTreeDepth
      _subsample = source._subsample
      _minSplitLoss = source._minSplitLoss
      _numFactors = source._numFactors
      _feedbackType = source._feedbackType
      _walsAlpha = source._walsAlpha
      _kmeansInitializationMethod = source._kmeansInitializationMethod
      _kmeansInitializationColumn = source._kmeansInitializationColumn
      _timeSeriesTimestampColumn = source._timeSeriesTimestampColumn
      _timeSeriesDataColumn = source._timeSeriesDataColumn
      _autoArima = source._autoArima
      _nonSeasonalOrder = source._nonSeasonalOrder
      _dataFrequency = source._dataFrequency
      _includeDrift = source._includeDrift
      _holidayRegion = source._holidayRegion
      _timeSeriesIDColumn = source._timeSeriesIDColumn
      _horizon = source._horizon
      _preserveInputStructs = source._preserveInputStructs
      _autoArimaMaxOrder = source._autoArimaMaxOrder
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._maxIterations) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._lossType) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._learnRate) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._l1Regularization) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._l2Regularization) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._minRelativeProgress) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._warmStart) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._earlyStop) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._inputLabelColumns) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._dataSplitMethod) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._dataSplitEvalFraction) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._dataSplitColumn) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._learnRateStrategy) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._initialLearnRate) }()
        case 17: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._labelClassWeights) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._userColumn) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._itemColumn) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._distanceType) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._numClusters) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._modelUri) }()
        case 23: try { try decoder.decodeSingularEnumField(value: &_storage._optimizationStrategy) }()
        case 24: try { try decoder.decodeRepeatedInt64Field(value: &_storage._hiddenUnits) }()
        case 25: try { try decoder.decodeSingularInt64Field(value: &_storage._batchSize) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._dropout) }()
        case 27: try { try decoder.decodeSingularInt64Field(value: &_storage._maxTreeDepth) }()
        case 28: try { try decoder.decodeSingularDoubleField(value: &_storage._subsample) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._minSplitLoss) }()
        case 30: try { try decoder.decodeSingularInt64Field(value: &_storage._numFactors) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._feedbackType) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._walsAlpha) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._kmeansInitializationMethod) }()
        case 34: try { try decoder.decodeSingularStringField(value: &_storage._kmeansInitializationColumn) }()
        case 35: try { try decoder.decodeSingularStringField(value: &_storage._timeSeriesTimestampColumn) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._timeSeriesDataColumn) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._autoArima) }()
        case 38: try { try decoder.decodeSingularMessageField(value: &_storage._nonSeasonalOrder) }()
        case 39: try { try decoder.decodeSingularEnumField(value: &_storage._dataFrequency) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._includeDrift) }()
        case 42: try { try decoder.decodeSingularEnumField(value: &_storage._holidayRegion) }()
        case 43: try { try decoder.decodeSingularStringField(value: &_storage._timeSeriesIDColumn) }()
        case 44: try { try decoder.decodeSingularInt64Field(value: &_storage._horizon) }()
        case 45: try { try decoder.decodeSingularBoolField(value: &_storage._preserveInputStructs) }()
        case 46: try { try decoder.decodeSingularInt64Field(value: &_storage._autoArimaMaxOrder) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._maxIterations != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxIterations, fieldNumber: 1)
      }
      if _storage._lossType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._lossType, fieldNumber: 2)
      }
      if _storage._learnRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._learnRate, fieldNumber: 3)
      }
      if let v = _storage._l1Regularization {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._l2Regularization {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._minRelativeProgress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._warmStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._earlyStop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._inputLabelColumns.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._inputLabelColumns, fieldNumber: 9)
      }
      if _storage._dataSplitMethod != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._dataSplitMethod, fieldNumber: 10)
      }
      if _storage._dataSplitEvalFraction != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dataSplitEvalFraction, fieldNumber: 11)
      }
      if !_storage._dataSplitColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dataSplitColumn, fieldNumber: 12)
      }
      if _storage._learnRateStrategy != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._learnRateStrategy, fieldNumber: 13)
      }
      if _storage._initialLearnRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._initialLearnRate, fieldNumber: 16)
      }
      if !_storage._labelClassWeights.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: _storage._labelClassWeights, fieldNumber: 17)
      }
      if !_storage._userColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userColumn, fieldNumber: 18)
      }
      if !_storage._itemColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._itemColumn, fieldNumber: 19)
      }
      if _storage._distanceType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._distanceType, fieldNumber: 20)
      }
      if _storage._numClusters != 0 {
        try visitor.visitSingularInt64Field(value: _storage._numClusters, fieldNumber: 21)
      }
      if !_storage._modelUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modelUri, fieldNumber: 22)
      }
      if _storage._optimizationStrategy != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._optimizationStrategy, fieldNumber: 23)
      }
      if !_storage._hiddenUnits.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._hiddenUnits, fieldNumber: 24)
      }
      if _storage._batchSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._batchSize, fieldNumber: 25)
      }
      if let v = _storage._dropout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if _storage._maxTreeDepth != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxTreeDepth, fieldNumber: 27)
      }
      if _storage._subsample != 0 {
        try visitor.visitSingularDoubleField(value: _storage._subsample, fieldNumber: 28)
      }
      if let v = _storage._minSplitLoss {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if _storage._numFactors != 0 {
        try visitor.visitSingularInt64Field(value: _storage._numFactors, fieldNumber: 30)
      }
      if _storage._feedbackType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._feedbackType, fieldNumber: 31)
      }
      if let v = _storage._walsAlpha {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if _storage._kmeansInitializationMethod != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._kmeansInitializationMethod, fieldNumber: 33)
      }
      if !_storage._kmeansInitializationColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kmeansInitializationColumn, fieldNumber: 34)
      }
      if !_storage._timeSeriesTimestampColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timeSeriesTimestampColumn, fieldNumber: 35)
      }
      if !_storage._timeSeriesDataColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timeSeriesDataColumn, fieldNumber: 36)
      }
      if _storage._autoArima != false {
        try visitor.visitSingularBoolField(value: _storage._autoArima, fieldNumber: 37)
      }
      if let v = _storage._nonSeasonalOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
      if _storage._dataFrequency != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._dataFrequency, fieldNumber: 39)
      }
      if _storage._includeDrift != false {
        try visitor.visitSingularBoolField(value: _storage._includeDrift, fieldNumber: 41)
      }
      if _storage._holidayRegion != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._holidayRegion, fieldNumber: 42)
      }
      if !_storage._timeSeriesIDColumn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timeSeriesIDColumn, fieldNumber: 43)
      }
      if _storage._horizon != 0 {
        try visitor.visitSingularInt64Field(value: _storage._horizon, fieldNumber: 44)
      }
      if _storage._preserveInputStructs != false {
        try visitor.visitSingularBoolField(value: _storage._preserveInputStructs, fieldNumber: 45)
      }
      if _storage._autoArimaMaxOrder != 0 {
        try visitor.visitSingularInt64Field(value: _storage._autoArimaMaxOrder, fieldNumber: 46)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.TrainingOptions, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.TrainingOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._maxIterations != rhs_storage._maxIterations {return false}
        if _storage._lossType != rhs_storage._lossType {return false}
        if _storage._learnRate != rhs_storage._learnRate {return false}
        if _storage._l1Regularization != rhs_storage._l1Regularization {return false}
        if _storage._l2Regularization != rhs_storage._l2Regularization {return false}
        if _storage._minRelativeProgress != rhs_storage._minRelativeProgress {return false}
        if _storage._warmStart != rhs_storage._warmStart {return false}
        if _storage._earlyStop != rhs_storage._earlyStop {return false}
        if _storage._inputLabelColumns != rhs_storage._inputLabelColumns {return false}
        if _storage._dataSplitMethod != rhs_storage._dataSplitMethod {return false}
        if _storage._dataSplitEvalFraction != rhs_storage._dataSplitEvalFraction {return false}
        if _storage._dataSplitColumn != rhs_storage._dataSplitColumn {return false}
        if _storage._learnRateStrategy != rhs_storage._learnRateStrategy {return false}
        if _storage._initialLearnRate != rhs_storage._initialLearnRate {return false}
        if _storage._labelClassWeights != rhs_storage._labelClassWeights {return false}
        if _storage._userColumn != rhs_storage._userColumn {return false}
        if _storage._itemColumn != rhs_storage._itemColumn {return false}
        if _storage._distanceType != rhs_storage._distanceType {return false}
        if _storage._numClusters != rhs_storage._numClusters {return false}
        if _storage._modelUri != rhs_storage._modelUri {return false}
        if _storage._optimizationStrategy != rhs_storage._optimizationStrategy {return false}
        if _storage._hiddenUnits != rhs_storage._hiddenUnits {return false}
        if _storage._batchSize != rhs_storage._batchSize {return false}
        if _storage._dropout != rhs_storage._dropout {return false}
        if _storage._maxTreeDepth != rhs_storage._maxTreeDepth {return false}
        if _storage._subsample != rhs_storage._subsample {return false}
        if _storage._minSplitLoss != rhs_storage._minSplitLoss {return false}
        if _storage._numFactors != rhs_storage._numFactors {return false}
        if _storage._feedbackType != rhs_storage._feedbackType {return false}
        if _storage._walsAlpha != rhs_storage._walsAlpha {return false}
        if _storage._kmeansInitializationMethod != rhs_storage._kmeansInitializationMethod {return false}
        if _storage._kmeansInitializationColumn != rhs_storage._kmeansInitializationColumn {return false}
        if _storage._timeSeriesTimestampColumn != rhs_storage._timeSeriesTimestampColumn {return false}
        if _storage._timeSeriesDataColumn != rhs_storage._timeSeriesDataColumn {return false}
        if _storage._autoArima != rhs_storage._autoArima {return false}
        if _storage._nonSeasonalOrder != rhs_storage._nonSeasonalOrder {return false}
        if _storage._dataFrequency != rhs_storage._dataFrequency {return false}
        if _storage._includeDrift != rhs_storage._includeDrift {return false}
        if _storage._holidayRegion != rhs_storage._holidayRegion {return false}
        if _storage._timeSeriesIDColumn != rhs_storage._timeSeriesIDColumn {return false}
        if _storage._horizon != rhs_storage._horizon {return false}
        if _storage._preserveInputStructs != rhs_storage._preserveInputStructs {return false}
        if _storage._autoArimaMaxOrder != rhs_storage._autoArimaMaxOrder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.TrainingRun.protoMessageName + ".IterationResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    4: .standard(proto: "duration_ms"),
    5: .standard(proto: "training_loss"),
    6: .standard(proto: "eval_loss"),
    7: .standard(proto: "learn_rate"),
    8: .standard(proto: "cluster_infos"),
    9: .standard(proto: "arima_result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._index) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._durationMs) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._trainingLoss) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._evalLoss) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.learnRate) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.clusterInfos) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._arimaResult) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._index {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._durationMs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._trainingLoss {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._evalLoss {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.learnRate != 0 {
      try visitor.visitSingularDoubleField(value: self.learnRate, fieldNumber: 7)
    }
    if !self.clusterInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clusterInfos, fieldNumber: 8)
    }
    if let v = self._arimaResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult) -> Bool {
    if lhs._index != rhs._index {return false}
    if lhs._durationMs != rhs._durationMs {return false}
    if lhs._trainingLoss != rhs._trainingLoss {return false}
    if lhs._evalLoss != rhs._evalLoss {return false}
    if lhs.learnRate != rhs.learnRate {return false}
    if lhs.clusterInfos != rhs.clusterInfos {return false}
    if lhs._arimaResult != rhs._arimaResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ClusterInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.protoMessageName + ".ClusterInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "centroid_id"),
    2: .standard(proto: "cluster_radius"),
    3: .standard(proto: "cluster_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.centroidID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._clusterRadius) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._clusterSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.centroidID != 0 {
      try visitor.visitSingularInt64Field(value: self.centroidID, fieldNumber: 1)
    }
    if let v = self._clusterRadius {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._clusterSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ClusterInfo, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ClusterInfo) -> Bool {
    if lhs.centroidID != rhs.centroidID {return false}
    if lhs._clusterRadius != rhs._clusterRadius {return false}
    if lhs._clusterSize != rhs._clusterSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.protoMessageName + ".ArimaResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "arima_model_info"),
    2: .standard(proto: "seasonal_periods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.arimaModelInfo) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.seasonalPeriods) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.arimaModelInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.arimaModelInfo, fieldNumber: 1)
    }
    if !self.seasonalPeriods.isEmpty {
      try visitor.visitPackedEnumField(value: self.seasonalPeriods, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult) -> Bool {
    if lhs.arimaModelInfo != rhs.arimaModelInfo {return false}
    if lhs.seasonalPeriods != rhs.seasonalPeriods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.protoMessageName + ".ArimaCoefficients"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auto_regressive_coefficients"),
    2: .standard(proto: "moving_average_coefficients"),
    3: .standard(proto: "intercept_coefficient"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.autoRegressiveCoefficients) }()
      case 2: try { try decoder.decodeRepeatedDoubleField(value: &self.movingAverageCoefficients) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.interceptCoefficient) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.autoRegressiveCoefficients.isEmpty {
      try visitor.visitPackedDoubleField(value: self.autoRegressiveCoefficients, fieldNumber: 1)
    }
    if !self.movingAverageCoefficients.isEmpty {
      try visitor.visitPackedDoubleField(value: self.movingAverageCoefficients, fieldNumber: 2)
    }
    if self.interceptCoefficient != 0 {
      try visitor.visitSingularDoubleField(value: self.interceptCoefficient, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaCoefficients) -> Bool {
    if lhs.autoRegressiveCoefficients != rhs.autoRegressiveCoefficients {return false}
    if lhs.movingAverageCoefficients != rhs.movingAverageCoefficients {return false}
    if lhs.interceptCoefficient != rhs.interceptCoefficient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaModelInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.protoMessageName + ".ArimaModelInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "non_seasonal_order"),
    2: .standard(proto: "arima_coefficients"),
    3: .standard(proto: "arima_fitting_metrics"),
    4: .standard(proto: "has_drift"),
    5: .standard(proto: "time_series_id"),
    6: .standard(proto: "seasonal_periods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._nonSeasonalOrder) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._arimaCoefficients) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._arimaFittingMetrics) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.hasDrift_p) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.timeSeriesID) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.seasonalPeriods) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._nonSeasonalOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._arimaCoefficients {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._arimaFittingMetrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.hasDrift_p != false {
      try visitor.visitSingularBoolField(value: self.hasDrift_p, fieldNumber: 4)
    }
    if !self.timeSeriesID.isEmpty {
      try visitor.visitSingularStringField(value: self.timeSeriesID, fieldNumber: 5)
    }
    if !self.seasonalPeriods.isEmpty {
      try visitor.visitPackedEnumField(value: self.seasonalPeriods, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaModelInfo, rhs: Google_Cloud_Bigquery_V2_Model.TrainingRun.IterationResult.ArimaResult.ArimaModelInfo) -> Bool {
    if lhs._nonSeasonalOrder != rhs._nonSeasonalOrder {return false}
    if lhs._arimaCoefficients != rhs._arimaCoefficients {return false}
    if lhs._arimaFittingMetrics != rhs._arimaFittingMetrics {return false}
    if lhs.hasDrift_p != rhs.hasDrift_p {return false}
    if lhs.timeSeriesID != rhs.timeSeriesID {return false}
    if lhs.seasonalPeriods != rhs.seasonalPeriods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_GetModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "dataset_id"),
    3: .standard(proto: "model_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.datasetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.modelID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.datasetID.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetID, fieldNumber: 2)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_GetModelRequest, rhs: Google_Cloud_Bigquery_V2_GetModelRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.datasetID != rhs.datasetID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_PatchModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "dataset_id"),
    3: .standard(proto: "model_id"),
    4: .same(proto: "model"),
  ]

  fileprivate class _StorageClass {
    var _projectID: String = String()
    var _datasetID: String = String()
    var _modelID: String = String()
    var _model: Google_Cloud_Bigquery_V2_Model? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _projectID = source._projectID
      _datasetID = source._datasetID
      _modelID = source._modelID
      _model = source._model
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._projectID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._datasetID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._modelID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._model) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._projectID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectID, fieldNumber: 1)
      }
      if !_storage._datasetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._datasetID, fieldNumber: 2)
      }
      if !_storage._modelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modelID, fieldNumber: 3)
      }
      if let v = _storage._model {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_PatchModelRequest, rhs: Google_Cloud_Bigquery_V2_PatchModelRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._projectID != rhs_storage._projectID {return false}
        if _storage._datasetID != rhs_storage._datasetID {return false}
        if _storage._modelID != rhs_storage._modelID {return false}
        if _storage._model != rhs_storage._model {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_DeleteModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "dataset_id"),
    3: .standard(proto: "model_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.datasetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.modelID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.datasetID.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetID, fieldNumber: 2)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_DeleteModelRequest, rhs: Google_Cloud_Bigquery_V2_DeleteModelRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.datasetID != rhs.datasetID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ListModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "dataset_id"),
    3: .standard(proto: "max_results"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.datasetID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._maxResults) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.datasetID.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetID, fieldNumber: 2)
    }
    if let v = self._maxResults {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_ListModelsRequest, rhs: Google_Cloud_Bigquery_V2_ListModelsRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.datasetID != rhs.datasetID {return false}
    if lhs._maxResults != rhs._maxResults {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ListModelsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "models"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.models) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Bigquery_V2_ListModelsResponse, rhs: Google_Cloud_Bigquery_V2_ListModelsResponse) -> Bool {
    if lhs.models != rhs.models {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
