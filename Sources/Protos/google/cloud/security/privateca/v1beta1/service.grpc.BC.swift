//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/security/privateca/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceClientProtocol: GRPCClient {
  func createCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_CreateCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_CreateCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate>

  func getCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate>

  func listCertificates(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListCertificatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListCertificatesRequest, Google_Cloud_Security_Privateca_V1beta1_ListCertificatesResponse>

  func revokeCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_RevokeCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_RevokeCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate>

  func updateCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate>

  func activateCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ActivateCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ActivateCertificateAuthorityRequest, Google_Longrunning_Operation>

  func createCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_CreateCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_CreateCertificateAuthorityRequest, Google_Longrunning_Operation>

  func disableCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_DisableCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_DisableCertificateAuthorityRequest, Google_Longrunning_Operation>

  func enableCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_EnableCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_EnableCertificateAuthorityRequest, Google_Longrunning_Operation>

  func fetchCertificateAuthorityCsr(
    _ request: Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrRequest, Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrResponse>

  func getCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetCertificateAuthorityRequest, Google_Cloud_Security_Privateca_V1beta1_CertificateAuthority>

  func listCertificateAuthorities(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesRequest, Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesResponse>

  func restoreCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_RestoreCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_RestoreCertificateAuthorityRequest, Google_Longrunning_Operation>

  func scheduleDeleteCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ScheduleDeleteCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ScheduleDeleteCertificateAuthorityRequest, Google_Longrunning_Operation>

  func updateCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateAuthorityRequest, Google_Longrunning_Operation>

  func getCertificateRevocationList(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateRevocationListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetCertificateRevocationListRequest, Google_Cloud_Security_Privateca_V1beta1_CertificateRevocationList>

  func listCertificateRevocationLists(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsRequest, Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsResponse>

  func updateCertificateRevocationList(
    _ request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRevocationListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRevocationListRequest, Google_Longrunning_Operation>

  func getReusableConfig(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetReusableConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetReusableConfigRequest, Google_Cloud_Security_Privateca_V1beta1_ReusableConfig>

  func listReusableConfigs(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsRequest, Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsResponse>

}

extension Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceClientProtocol {

  /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
  /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_CreateCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_CreateCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/CreateCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/GetCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCertificates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCertificates(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListCertificatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListCertificatesRequest, Google_Cloud_Security_Privateca_V1beta1_ListCertificatesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/ListCertificates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func revokeCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_RevokeCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_RevokeCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/RevokeCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
  /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCertificate(
    _ request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRequest, Google_Cloud_Security_Privateca_V1beta1_Certificate> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/UpdateCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
  /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
  /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
  /// parent Certificate Authority signs a certificate signing request from
  /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
  /// process.
  ///
  /// - Parameters:
  ///   - request: Request to send to ActivateCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func activateCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ActivateCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ActivateCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/ActivateCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_CreateCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_CreateCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/CreateCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to DisableCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func disableCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_DisableCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_DisableCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/DisableCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func enableCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_EnableCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_EnableCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/EnableCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
  /// that is in state
  /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
  /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
  /// then be signed by the desired parent Certificate Authority, which could be
  /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
  /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchCertificateAuthorityCsr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fetchCertificateAuthorityCsr(
    _ request: Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrRequest, Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/FetchCertificateAuthorityCsr",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetCertificateAuthorityRequest, Google_Cloud_Security_Privateca_V1beta1_CertificateAuthority> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/GetCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCertificateAuthorities.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCertificateAuthorities(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesRequest, Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/ListCertificateAuthorities",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
  ///
  /// - Parameters:
  ///   - request: Request to send to RestoreCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func restoreCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_RestoreCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_RestoreCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/RestoreCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
  ///
  /// - Parameters:
  ///   - request: Request to send to ScheduleDeleteCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func scheduleDeleteCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ScheduleDeleteCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ScheduleDeleteCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/ScheduleDeleteCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCertificateAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCertificateAuthority(
    _ request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateAuthorityRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/UpdateCertificateAuthority",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCertificateRevocationList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCertificateRevocationList(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateRevocationListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetCertificateRevocationListRequest, Google_Cloud_Security_Privateca_V1beta1_CertificateRevocationList> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/GetCertificateRevocationList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCertificateRevocationLists.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCertificateRevocationLists(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsRequest, Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/ListCertificateRevocationLists",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCertificateRevocationList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCertificateRevocationList(
    _ request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRevocationListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRevocationListRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/UpdateCertificateRevocationList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReusableConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getReusableConfig(
    _ request: Google_Cloud_Security_Privateca_V1beta1_GetReusableConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_GetReusableConfigRequest, Google_Cloud_Security_Privateca_V1beta1_ReusableConfig> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/GetReusableConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListReusableConfigs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listReusableConfigs(
    _ request: Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsRequest, Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.security.privateca.v1beta1.CertificateAuthorityService/ListReusableConfigs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceClient: Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.security.privateca.v1beta1.CertificateAuthorityService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceProvider: CallHandlerProvider {
  /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
  /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  func createCertificate(request: Google_Cloud_Security_Privateca_V1beta1_CreateCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_Certificate>
  /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
  func getCertificate(request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_Certificate>
  /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
  func listCertificates(request: Google_Cloud_Security_Privateca_V1beta1_ListCertificatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_ListCertificatesResponse>
  /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
  func revokeCertificate(request: Google_Cloud_Security_Privateca_V1beta1_RevokeCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_Certificate>
  /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
  /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
  func updateCertificate(request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_Certificate>
  /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
  /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
  /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
  /// parent Certificate Authority signs a certificate signing request from
  /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
  /// process.
  func activateCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_ActivateCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
  func createCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_CreateCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  func disableCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_DisableCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  func enableCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_EnableCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
  /// that is in state
  /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
  /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
  /// then be signed by the desired parent Certificate Authority, which could be
  /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
  /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
  func fetchCertificateAuthorityCsr(request: Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_FetchCertificateAuthorityCsrResponse>
  /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  func getCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_CertificateAuthority>
  /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  func listCertificateAuthorities(request: Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_ListCertificateAuthoritiesResponse>
  /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
  func restoreCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_RestoreCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
  func scheduleDeleteCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_ScheduleDeleteCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
  func updateCertificateAuthority(request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateAuthorityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
  func getCertificateRevocationList(request: Google_Cloud_Security_Privateca_V1beta1_GetCertificateRevocationListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_CertificateRevocationList>
  /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
  func listCertificateRevocationLists(request: Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_ListCertificateRevocationListsResponse>
  /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
  func updateCertificateRevocationList(request: Google_Cloud_Security_Privateca_V1beta1_UpdateCertificateRevocationListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
  func getReusableConfig(request: Google_Cloud_Security_Privateca_V1beta1_GetReusableConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_ReusableConfig>
  /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
  func listReusableConfigs(request: Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Security_Privateca_V1beta1_ListReusableConfigsResponse>
}

extension Google_Cloud_Security_Privateca_V1beta1_CertificateAuthorityServiceProvider {
  public var serviceName: Substring { return "google.cloud.security.privateca.v1beta1.CertificateAuthorityService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCertificate(request: request, context: context)
        }
      }

    case "GetCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCertificate(request: request, context: context)
        }
      }

    case "ListCertificates":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCertificates(request: request, context: context)
        }
      }

    case "RevokeCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.revokeCertificate(request: request, context: context)
        }
      }

    case "UpdateCertificate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCertificate(request: request, context: context)
        }
      }

    case "ActivateCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.activateCertificateAuthority(request: request, context: context)
        }
      }

    case "CreateCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCertificateAuthority(request: request, context: context)
        }
      }

    case "DisableCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.disableCertificateAuthority(request: request, context: context)
        }
      }

    case "EnableCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.enableCertificateAuthority(request: request, context: context)
        }
      }

    case "FetchCertificateAuthorityCsr":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.fetchCertificateAuthorityCsr(request: request, context: context)
        }
      }

    case "GetCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCertificateAuthority(request: request, context: context)
        }
      }

    case "ListCertificateAuthorities":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCertificateAuthorities(request: request, context: context)
        }
      }

    case "RestoreCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.restoreCertificateAuthority(request: request, context: context)
        }
      }

    case "ScheduleDeleteCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.scheduleDeleteCertificateAuthority(request: request, context: context)
        }
      }

    case "UpdateCertificateAuthority":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCertificateAuthority(request: request, context: context)
        }
      }

    case "GetCertificateRevocationList":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCertificateRevocationList(request: request, context: context)
        }
      }

    case "ListCertificateRevocationLists":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCertificateRevocationLists(request: request, context: context)
        }
      }

    case "UpdateCertificateRevocationList":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCertificateRevocationList(request: request, context: context)
        }
      }

    case "GetReusableConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getReusableConfig(request: request, context: context)
        }
      }

    case "ListReusableConfigs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listReusableConfigs(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

