//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/webrisk/v1/webrisk.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Webrisk_V1_WebRiskServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Webrisk_V1_WebRiskServiceClientProtocol: GRPCClient {
  func computeThreatListDiff(
    _ request: Google_Cloud_Webrisk_V1_ComputeThreatListDiffRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_ComputeThreatListDiffRequest, Google_Cloud_Webrisk_V1_ComputeThreatListDiffResponse>

  func searchUris(
    _ request: Google_Cloud_Webrisk_V1_SearchUrisRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_SearchUrisRequest, Google_Cloud_Webrisk_V1_SearchUrisResponse>

  func searchHashes(
    _ request: Google_Cloud_Webrisk_V1_SearchHashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_SearchHashesRequest, Google_Cloud_Webrisk_V1_SearchHashesResponse>

  func createSubmission(
    _ request: Google_Cloud_Webrisk_V1_CreateSubmissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_CreateSubmissionRequest, Google_Cloud_Webrisk_V1_Submission>

}

extension Google_Cloud_Webrisk_V1_WebRiskServiceClientProtocol {

  /// Gets the most recent threat list diffs. These diffs should be applied to
  /// a local database of hashes to keep it up-to-date. If the local database is
  /// empty or excessively out-of-date, a complete snapshot of the database will
  /// be returned. This Method only updates a single ThreatList at a time. To
  /// update multiple ThreatList databases, this method needs to be called once
  /// for each list.
  ///
  /// - Parameters:
  ///   - request: Request to send to ComputeThreatListDiff.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func computeThreatListDiff(
    _ request: Google_Cloud_Webrisk_V1_ComputeThreatListDiffRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_ComputeThreatListDiffRequest, Google_Cloud_Webrisk_V1_ComputeThreatListDiffResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.webrisk.v1.WebRiskService/ComputeThreatListDiff",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// This method is used to check whether a URI is on a given threatList.
  /// Multiple threatLists may be searched in a single query.
  /// The response will list all requested threatLists the URI was found to
  /// match. If the URI is not found on any of the requested ThreatList an
  /// empty response will be returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchUris.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchUris(
    _ request: Google_Cloud_Webrisk_V1_SearchUrisRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_SearchUrisRequest, Google_Cloud_Webrisk_V1_SearchUrisResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.webrisk.v1.WebRiskService/SearchUris",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the full hashes that match the requested hash prefix.
  /// This is used after a hash prefix is looked up in a threatList
  /// and there is a match. The client side threatList only holds partial hashes
  /// so the client must query this method to determine if there is a full
  /// hash match of a threat.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchHashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchHashes(
    _ request: Google_Cloud_Webrisk_V1_SearchHashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_SearchHashesRequest, Google_Cloud_Webrisk_V1_SearchHashesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.webrisk.v1.WebRiskService/SearchHashes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a Submission of a URI suspected of containing phishing content to
  /// be reviewed. If the result verifies the existence of malicious phishing
  /// content, the site will be added to the [Google's Social Engineering
  /// lists](https://support.google.com/webmasters/answer/6350487/) in order to
  /// protect users that could get exposed to this threat in the future. Only
  /// projects with CREATE_SUBMISSION_USERS visibility can use this method.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSubmission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSubmission(
    _ request: Google_Cloud_Webrisk_V1_CreateSubmissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Webrisk_V1_CreateSubmissionRequest, Google_Cloud_Webrisk_V1_Submission> {
    return self.makeUnaryCall(
      path: "/google.cloud.webrisk.v1.WebRiskService/CreateSubmission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Webrisk_V1_WebRiskServiceClient: Google_Cloud_Webrisk_V1_WebRiskServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.webrisk.v1.WebRiskService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Webrisk_V1_WebRiskServiceProvider: CallHandlerProvider {
  /// Gets the most recent threat list diffs. These diffs should be applied to
  /// a local database of hashes to keep it up-to-date. If the local database is
  /// empty or excessively out-of-date, a complete snapshot of the database will
  /// be returned. This Method only updates a single ThreatList at a time. To
  /// update multiple ThreatList databases, this method needs to be called once
  /// for each list.
  func computeThreatListDiff(request: Google_Cloud_Webrisk_V1_ComputeThreatListDiffRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Webrisk_V1_ComputeThreatListDiffResponse>
  /// This method is used to check whether a URI is on a given threatList.
  /// Multiple threatLists may be searched in a single query.
  /// The response will list all requested threatLists the URI was found to
  /// match. If the URI is not found on any of the requested ThreatList an
  /// empty response will be returned.
  func searchUris(request: Google_Cloud_Webrisk_V1_SearchUrisRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Webrisk_V1_SearchUrisResponse>
  /// Gets the full hashes that match the requested hash prefix.
  /// This is used after a hash prefix is looked up in a threatList
  /// and there is a match. The client side threatList only holds partial hashes
  /// so the client must query this method to determine if there is a full
  /// hash match of a threat.
  func searchHashes(request: Google_Cloud_Webrisk_V1_SearchHashesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Webrisk_V1_SearchHashesResponse>
  /// Creates a Submission of a URI suspected of containing phishing content to
  /// be reviewed. If the result verifies the existence of malicious phishing
  /// content, the site will be added to the [Google's Social Engineering
  /// lists](https://support.google.com/webmasters/answer/6350487/) in order to
  /// protect users that could get exposed to this threat in the future. Only
  /// projects with CREATE_SUBMISSION_USERS visibility can use this method.
  func createSubmission(request: Google_Cloud_Webrisk_V1_CreateSubmissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Webrisk_V1_Submission>
}

extension Google_Cloud_Webrisk_V1_WebRiskServiceProvider {
  public var serviceName: Substring { return "google.cloud.webrisk.v1.WebRiskService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ComputeThreatListDiff":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.computeThreatListDiff(request: request, context: context)
        }
      }

    case "SearchUris":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchUris(request: request, context: context)
        }
      }

    case "SearchHashes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchHashes(request: request, context: context)
        }
      }

    case "CreateSubmission":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createSubmission(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

