// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/v2/agent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Dialogflow agent is a virtual agent that handles conversations with your
/// end-users. It is a natural language understanding module that understands the
/// nuances of human language. Dialogflow translates end-user text or audio
/// during a conversation to structured data that your apps and services can
/// understand. You design and build a Dialogflow agent to handle the types of
/// conversations required for your system.
///
/// For more information about agents, see the
/// [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview).
public struct Google_Cloud_Dialogflow_V2_Agent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project of this agent.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  /// Required. The name of this agent.
  public var displayName: String = String()

  /// Required. The default language of the agent as a language tag. See
  /// [Language
  /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
  /// for a list of the currently supported language codes. This field cannot be
  /// set by the `Update` method.
  public var defaultLanguageCode: String = String()

  /// Optional. The list of all languages supported by this agent (except for the
  /// `default_language_code`).
  public var supportedLanguageCodes: [String] = []

  /// Required. The time zone of this agent from the
  /// [time zone database](https://www.iana.org/time-zones), e.g.,
  /// America/New_York, Europe/Paris.
  public var timeZone: String = String()

  /// Optional. The description of this agent.
  /// The maximum length is 500 characters. If exceeded, the request is rejected.
  public var description_p: String = String()

  /// Optional. The URI of the agent's avatar.
  /// Avatars are used throughout the Dialogflow console and in the self-hosted
  /// [Web
  /// Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo)
  /// integration.
  public var avatarUri: String = String()

  /// Optional. Determines whether this agent should log conversation queries.
  public var enableLogging: Bool = false

  /// Optional. Determines how intents are detected from user queries.
  public var matchMode: Google_Cloud_Dialogflow_V2_Agent.MatchMode = .unspecified

  /// Optional. To filter out false positive results and still get variety in
  /// matched natural language inputs for your agent, you can tune the machine
  /// learning classification threshold. If the returned score value is less than
  /// the threshold value, then a fallback intent will be triggered or, if there
  /// are no fallback intents defined, no intent will be triggered. The score
  /// values range from 0.0 (completely uncertain) to 1.0 (completely certain).
  /// If set to 0.0, the default of 0.3 is used.
  public var classificationThreshold: Float = 0

  /// Optional. API version displayed in Dialogflow console. If not specified,
  /// V2 API is assumed. Clients are free to query different service endpoints
  /// for different API versions. However, bots connectors and webhook calls will
  /// follow the specified API version.
  public var apiVersion: Google_Cloud_Dialogflow_V2_Agent.ApiVersion = .unspecified

  /// Optional. The agent tier. If not specified, TIER_STANDARD is assumed.
  public var tier: Google_Cloud_Dialogflow_V2_Agent.Tier = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Match mode determines how intents are detected from user queries.
  public enum MatchMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not specified.
    case unspecified // = 0

    /// Best for agents with a small number of examples in intents and/or wide
    /// use of templates syntax and composite entities.
    case hybrid // = 1

    /// Can be used for agents with a large number of examples in intents,
    /// especially the ones using @sys.any or very large custom entities.
    case mlOnly // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .hybrid
      case 2: self = .mlOnly
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .hybrid: return 1
      case .mlOnly: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// API version for the agent.
  public enum ApiVersion: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not specified.
    case unspecified // = 0

    /// Legacy V1 API.
    case v1 // = 1

    /// V2 API.
    case v2 // = 2

    /// V2beta1 API.
    case v2Beta1 // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .v1
      case 2: self = .v2
      case 3: self = .v2Beta1
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .v1: return 1
      case .v2: return 2
      case .v2Beta1: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Represents the agent tier.
  public enum Tier: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not specified. This value should never be used.
    case unspecified // = 0

    /// Standard tier.
    case standard // = 1

    /// Enterprise tier (Essentials).
    case enterprise // = 2

    /// Enterprise tier (Plus).
    case enterprisePlus // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .standard
      case 2: self = .enterprise
      case 3: self = .enterprisePlus
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .standard: return 1
      case .enterprise: return 2
      case .enterprisePlus: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_V2_Agent.MatchMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Agent.MatchMode] = [
    .unspecified,
    .hybrid,
    .mlOnly,
  ]
}

extension Google_Cloud_Dialogflow_V2_Agent.ApiVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Agent.ApiVersion] = [
    .unspecified,
    .v1,
    .v2,
    .v2Beta1,
  ]
}

extension Google_Cloud_Dialogflow_V2_Agent.Tier: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Agent.Tier] = [
    .unspecified,
    .standard,
    .enterprise,
    .enterprisePlus,
  ]
}

#endif  // swift(>=4.2)

/// The request message for [Agents.GetAgent][google.cloud.dialogflow.v2.Agents.GetAgent].
public struct Google_Cloud_Dialogflow_V2_GetAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent to fetch is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.SetAgent][google.cloud.dialogflow.v2.Agents.SetAgent].
public struct Google_Cloud_Dialogflow_V2_SetAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to update.
  public var agent: Google_Cloud_Dialogflow_V2_Agent {
    get {return _agent ?? Google_Cloud_Dialogflow_V2_Agent()}
    set {_agent = newValue}
  }
  /// Returns true if `agent` has been explicitly set.
  public var hasAgent: Bool {return self._agent != nil}
  /// Clears the value of `agent`. Subsequent reads from it will return its default value.
  public mutating func clearAgent() {self._agent = nil}

  /// Optional. The mask to control which fields get updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _agent: Google_Cloud_Dialogflow_V2_Agent? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [Agents.DeleteAgent][google.cloud.dialogflow.v2.Agents.DeleteAgent].
public struct Google_Cloud_Dialogflow_V2_DeleteAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent to delete is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.SearchAgents][google.cloud.dialogflow.v2.Agents.SearchAgents].
public struct Google_Cloud_Dialogflow_V2_SearchAgentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project to list agents from.
  /// Format: `projects/<Project ID or '-'>`.
  public var parent: String = String()

  /// Optional. The maximum number of items to return in a single page. By
  /// default 100 and at most 1000.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Agents.SearchAgents][google.cloud.dialogflow.v2.Agents.SearchAgents].
public struct Google_Cloud_Dialogflow_V2_SearchAgentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of agents. There will be a maximum number of items returned based
  /// on the page_size field in the request.
  public var agents: [Google_Cloud_Dialogflow_V2_Agent] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.TrainAgent][google.cloud.dialogflow.v2.Agents.TrainAgent].
public struct Google_Cloud_Dialogflow_V2_TrainAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent to train is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.ExportAgent][google.cloud.dialogflow.v2.Agents.ExportAgent].
public struct Google_Cloud_Dialogflow_V2_ExportAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent to export is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  /// Required. The [Google Cloud Storage](https://cloud.google.com/storage/docs/)
  /// URI to export the agent to.
  /// The format of this URI must be `gs://<bucket-name>/<object-name>`.
  /// If left unspecified, the serialized agent is returned inline.
  public var agentUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Agents.ExportAgent][google.cloud.dialogflow.v2.Agents.ExportAgent].
public struct Google_Cloud_Dialogflow_V2_ExportAgentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The exported agent.
  public var agent: Google_Cloud_Dialogflow_V2_ExportAgentResponse.OneOf_Agent? = nil

  /// The URI to a file containing the exported agent. This field is populated
  /// only if `agent_uri` is specified in `ExportAgentRequest`.
  public var agentUri: String {
    get {
      if case .agentUri(let v)? = agent {return v}
      return String()
    }
    set {agent = .agentUri(newValue)}
  }

  /// Zip compressed raw byte content for agent.
  public var agentContent: Data {
    get {
      if case .agentContent(let v)? = agent {return v}
      return Data()
    }
    set {agent = .agentContent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The exported agent.
  public enum OneOf_Agent: Equatable {
    /// The URI to a file containing the exported agent. This field is populated
    /// only if `agent_uri` is specified in `ExportAgentRequest`.
    case agentUri(String)
    /// Zip compressed raw byte content for agent.
    case agentContent(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_V2_ExportAgentResponse.OneOf_Agent, rhs: Google_Cloud_Dialogflow_V2_ExportAgentResponse.OneOf_Agent) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.agentUri, .agentUri): return {
        guard case .agentUri(let l) = lhs, case .agentUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentContent, .agentContent): return {
        guard case .agentContent(let l) = lhs, case .agentContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The request message for [Agents.ImportAgent][google.cloud.dialogflow.v2.Agents.ImportAgent].
public struct Google_Cloud_Dialogflow_V2_ImportAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent to import is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  /// Required. The agent to import.
  public var agent: Google_Cloud_Dialogflow_V2_ImportAgentRequest.OneOf_Agent? = nil

  /// The URI to a Google Cloud Storage file containing the agent to import.
  /// Note: The URI must start with "gs://".
  public var agentUri: String {
    get {
      if case .agentUri(let v)? = agent {return v}
      return String()
    }
    set {agent = .agentUri(newValue)}
  }

  /// Zip compressed raw byte content for agent.
  public var agentContent: Data {
    get {
      if case .agentContent(let v)? = agent {return v}
      return Data()
    }
    set {agent = .agentContent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The agent to import.
  public enum OneOf_Agent: Equatable {
    /// The URI to a Google Cloud Storage file containing the agent to import.
    /// Note: The URI must start with "gs://".
    case agentUri(String)
    /// Zip compressed raw byte content for agent.
    case agentContent(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_V2_ImportAgentRequest.OneOf_Agent, rhs: Google_Cloud_Dialogflow_V2_ImportAgentRequest.OneOf_Agent) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.agentUri, .agentUri): return {
        guard case .agentUri(let l) = lhs, case .agentUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentContent, .agentContent): return {
        guard case .agentContent(let l) = lhs, case .agentContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The request message for [Agents.RestoreAgent][google.cloud.dialogflow.v2.Agents.RestoreAgent].
public struct Google_Cloud_Dialogflow_V2_RestoreAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent to restore is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  /// Required. The agent to restore.
  public var agent: Google_Cloud_Dialogflow_V2_RestoreAgentRequest.OneOf_Agent? = nil

  /// The URI to a Google Cloud Storage file containing the agent to restore.
  /// Note: The URI must start with "gs://".
  public var agentUri: String {
    get {
      if case .agentUri(let v)? = agent {return v}
      return String()
    }
    set {agent = .agentUri(newValue)}
  }

  /// Zip compressed raw byte content for agent.
  public var agentContent: Data {
    get {
      if case .agentContent(let v)? = agent {return v}
      return Data()
    }
    set {agent = .agentContent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The agent to restore.
  public enum OneOf_Agent: Equatable {
    /// The URI to a Google Cloud Storage file containing the agent to restore.
    /// Note: The URI must start with "gs://".
    case agentUri(String)
    /// Zip compressed raw byte content for agent.
    case agentContent(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_V2_RestoreAgentRequest.OneOf_Agent, rhs: Google_Cloud_Dialogflow_V2_RestoreAgentRequest.OneOf_Agent) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.agentUri, .agentUri): return {
        guard case .agentUri(let l) = lhs, case .agentUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentContent, .agentContent): return {
        guard case .agentContent(let l) = lhs, case .agentContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The request message for [Agents.GetValidationResult][google.cloud.dialogflow.v2.Agents.GetValidationResult].
public struct Google_Cloud_Dialogflow_V2_GetValidationResultRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the agent is associated with.
  /// Format: `projects/<Project ID>`.
  public var parent: String = String()

  /// Optional. The language for which you want a validation result. If not
  /// specified, the agent's default language is used. [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported. Note: languages must be enabled in the agent before they can
  /// be used.
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.v2"

extension Google_Cloud_Dialogflow_V2_Agent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Agent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "default_language_code"),
    4: .standard(proto: "supported_language_codes"),
    5: .standard(proto: "time_zone"),
    6: .same(proto: "description"),
    7: .standard(proto: "avatar_uri"),
    8: .standard(proto: "enable_logging"),
    9: .standard(proto: "match_mode"),
    10: .standard(proto: "classification_threshold"),
    14: .standard(proto: "api_version"),
    15: .same(proto: "tier"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.defaultLanguageCode) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.supportedLanguageCodes) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.timeZone) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.avatarUri) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.enableLogging) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.matchMode) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.classificationThreshold) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.apiVersion) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.tier) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.defaultLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultLanguageCode, fieldNumber: 3)
    }
    if !self.supportedLanguageCodes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.supportedLanguageCodes, fieldNumber: 4)
    }
    if !self.timeZone.isEmpty {
      try visitor.visitSingularStringField(value: self.timeZone, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.avatarUri.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarUri, fieldNumber: 7)
    }
    if self.enableLogging != false {
      try visitor.visitSingularBoolField(value: self.enableLogging, fieldNumber: 8)
    }
    if self.matchMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.matchMode, fieldNumber: 9)
    }
    if self.classificationThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.classificationThreshold, fieldNumber: 10)
    }
    if self.apiVersion != .unspecified {
      try visitor.visitSingularEnumField(value: self.apiVersion, fieldNumber: 14)
    }
    if self.tier != .unspecified {
      try visitor.visitSingularEnumField(value: self.tier, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Agent, rhs: Google_Cloud_Dialogflow_V2_Agent) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.defaultLanguageCode != rhs.defaultLanguageCode {return false}
    if lhs.supportedLanguageCodes != rhs.supportedLanguageCodes {return false}
    if lhs.timeZone != rhs.timeZone {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.avatarUri != rhs.avatarUri {return false}
    if lhs.enableLogging != rhs.enableLogging {return false}
    if lhs.matchMode != rhs.matchMode {return false}
    if lhs.classificationThreshold != rhs.classificationThreshold {return false}
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.tier != rhs.tier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Agent.MatchMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MATCH_MODE_UNSPECIFIED"),
    1: .same(proto: "MATCH_MODE_HYBRID"),
    2: .same(proto: "MATCH_MODE_ML_ONLY"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Agent.ApiVersion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "API_VERSION_UNSPECIFIED"),
    1: .same(proto: "API_VERSION_V1"),
    2: .same(proto: "API_VERSION_V2"),
    3: .same(proto: "API_VERSION_V2_BETA_1"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Agent.Tier: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TIER_UNSPECIFIED"),
    1: .same(proto: "TIER_STANDARD"),
    2: .same(proto: "TIER_ENTERPRISE"),
    3: .same(proto: "TIER_ENTERPRISE_PLUS"),
  ]
}

extension Google_Cloud_Dialogflow_V2_GetAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_GetAgentRequest, rhs: Google_Cloud_Dialogflow_V2_GetAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_SetAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "agent"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._agent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._agent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_SetAgentRequest, rhs: Google_Cloud_Dialogflow_V2_SetAgentRequest) -> Bool {
    if lhs._agent != rhs._agent {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_DeleteAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_DeleteAgentRequest, rhs: Google_Cloud_Dialogflow_V2_DeleteAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_SearchAgentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAgentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_SearchAgentsRequest, rhs: Google_Cloud_Dialogflow_V2_SearchAgentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_SearchAgentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAgentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "agents"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.agents) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.agents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.agents, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_SearchAgentsResponse, rhs: Google_Cloud_Dialogflow_V2_SearchAgentsResponse) -> Bool {
    if lhs.agents != rhs.agents {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_TrainAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrainAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_TrainAgentRequest, rhs: Google_Cloud_Dialogflow_V2_TrainAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ExportAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "agent_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.agentUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.agentUri.isEmpty {
      try visitor.visitSingularStringField(value: self.agentUri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ExportAgentRequest, rhs: Google_Cloud_Dialogflow_V2_ExportAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.agentUri != rhs.agentUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ExportAgentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportAgentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_uri"),
    2: .standard(proto: "agent_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.agent = .agentUri(v)}
      }()
      case 2: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.agent = .agentContent(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.agent {
    case .agentUri?: try {
      guard case .agentUri(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .agentContent?: try {
      guard case .agentContent(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ExportAgentResponse, rhs: Google_Cloud_Dialogflow_V2_ExportAgentResponse) -> Bool {
    if lhs.agent != rhs.agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ImportAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "agent_uri"),
    3: .standard(proto: "agent_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.agent = .agentUri(v)}
      }()
      case 3: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.agent = .agentContent(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.agent {
    case .agentUri?: try {
      guard case .agentUri(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .agentContent?: try {
      guard case .agentContent(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ImportAgentRequest, rhs: Google_Cloud_Dialogflow_V2_ImportAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.agent != rhs.agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_RestoreAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RestoreAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "agent_uri"),
    3: .standard(proto: "agent_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.agent = .agentUri(v)}
      }()
      case 3: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.agent = .agentContent(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.agent {
    case .agentUri?: try {
      guard case .agentUri(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .agentContent?: try {
      guard case .agentContent(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_RestoreAgentRequest, rhs: Google_Cloud_Dialogflow_V2_RestoreAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.agent != rhs.agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_GetValidationResultRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetValidationResultRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    3: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_GetValidationResultRequest, rhs: Google_Cloud_Dialogflow_V2_GetValidationResultRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
