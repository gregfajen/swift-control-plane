// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/v2/entity_type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Each intent parameter has a type, called the entity type, which dictates
/// exactly how data from an end-user expression is extracted.
///
/// Dialogflow provides predefined system entities that can match many common
/// types of data. For example, there are system entities for matching dates,
/// times, colors, email addresses, and so on. You can also create your own
/// custom entities for matching custom data. For example, you could define a
/// vegetable entity that can match the types of vegetables available for
/// purchase with a grocery store agent.
///
/// For more information, see the
/// [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview).
public struct Google_Cloud_Dialogflow_V2_EntityType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the entity type.
  /// Required for [EntityTypes.UpdateEntityType][google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType] and
  /// [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes] methods.
  /// Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
  public var name: String = String()

  /// Required. The name of the entity type.
  public var displayName: String = String()

  /// Required. Indicates the kind of entity type.
  public var kind: Google_Cloud_Dialogflow_V2_EntityType.Kind = .unspecified

  /// Optional. Indicates whether the entity type can be automatically
  /// expanded.
  public var autoExpansionMode: Google_Cloud_Dialogflow_V2_EntityType.AutoExpansionMode = .unspecified

  /// Optional. The collection of entity entries associated with the entity type.
  public var entities: [Google_Cloud_Dialogflow_V2_EntityType.Entity] = []

  /// Optional. Enables fuzzy entity extraction during classification.
  public var enableFuzzyExtraction: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents kinds of entities.
  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not specified. This value should be never used.
    case unspecified // = 0

    /// Map entity types allow mapping of a group of synonyms to a reference
    /// value.
    case map // = 1

    /// List entity types contain a set of entries that do not map to reference
    /// values. However, list entity types can contain references to other entity
    /// types (with or without aliases).
    case list // = 2

    /// Regexp entity types allow to specify regular expressions in entries
    /// values.
    case regexp // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .map
      case 2: self = .list
      case 3: self = .regexp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .map: return 1
      case .list: return 2
      case .regexp: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Represents different entity type expansion modes. Automated expansion
  /// allows an agent to recognize values that have not been explicitly listed in
  /// the entity (for example, new kinds of shopping list items).
  public enum AutoExpansionMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Auto expansion disabled for the entity.
    case unspecified // = 0

    /// Allows an agent to recognize values that have not been explicitly
    /// listed in the entity.
    case `default` // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .default
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .default: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// An **entity entry** for an associated entity type.
  public struct Entity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The primary value associated with this entity entry.
    /// For example, if the entity type is *vegetable*, the value could be
    /// *scallions*.
    ///
    /// For `KIND_MAP` entity types:
    ///
    /// *   A reference value to be used in place of synonyms.
    ///
    /// For `KIND_LIST` entity types:
    ///
    /// *   A string that can contain references to other entity types (with or
    ///     without aliases).
    public var value: String = String()

    /// Required. A collection of value synonyms. For example, if the entity type
    /// is *vegetable*, and `value` is *scallions*, a synonym could be *green
    /// onions*.
    ///
    /// For `KIND_LIST` entity types:
    ///
    /// *   This collection must contain exactly one synonym equal to `value`.
    public var synonyms: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_V2_EntityType.Kind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_EntityType.Kind] = [
    .unspecified,
    .map,
    .list,
    .regexp,
  ]
}

extension Google_Cloud_Dialogflow_V2_EntityType.AutoExpansionMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_EntityType.AutoExpansionMode] = [
    .unspecified,
    .default,
  ]
}

#endif  // swift(>=4.2)

/// The request message for [EntityTypes.ListEntityTypes][google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes].
public struct Google_Cloud_Dialogflow_V2_ListEntityTypesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to list all entity types from.
  /// Format: `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The maximum number of items to return in a single page. By
  /// default 100 and at most 1000.
  public var pageSize: Int32 = 0

  /// Optional. The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [EntityTypes.ListEntityTypes][google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes].
public struct Google_Cloud_Dialogflow_V2_ListEntityTypesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of agent entity types. There will be a maximum number of items
  /// returned based on the page_size field in the request.
  public var entityTypes: [Google_Cloud_Dialogflow_V2_EntityType] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [EntityTypes.GetEntityType][google.cloud.dialogflow.v2.EntityTypes.GetEntityType].
public struct Google_Cloud_Dialogflow_V2_GetEntityTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the entity type.
  /// Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
  public var name: String = String()

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [EntityTypes.CreateEntityType][google.cloud.dialogflow.v2.EntityTypes.CreateEntityType].
public struct Google_Cloud_Dialogflow_V2_CreateEntityTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to create a entity type for.
  /// Format: `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// Required. The entity type to create.
  public var entityType: Google_Cloud_Dialogflow_V2_EntityType {
    get {return _entityType ?? Google_Cloud_Dialogflow_V2_EntityType()}
    set {_entityType = newValue}
  }
  /// Returns true if `entityType` has been explicitly set.
  public var hasEntityType: Bool {return self._entityType != nil}
  /// Clears the value of `entityType`. Subsequent reads from it will return its default value.
  public mutating func clearEntityType() {self._entityType = nil}

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entityType: Google_Cloud_Dialogflow_V2_EntityType? = nil
}

/// The request message for [EntityTypes.UpdateEntityType][google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType].
public struct Google_Cloud_Dialogflow_V2_UpdateEntityTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The entity type to update.
  public var entityType: Google_Cloud_Dialogflow_V2_EntityType {
    get {return _entityType ?? Google_Cloud_Dialogflow_V2_EntityType()}
    set {_entityType = newValue}
  }
  /// Returns true if `entityType` has been explicitly set.
  public var hasEntityType: Bool {return self._entityType != nil}
  /// Clears the value of `entityType`. Subsequent reads from it will return its default value.
  public mutating func clearEntityType() {self._entityType = nil}

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The mask to control which fields get updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entityType: Google_Cloud_Dialogflow_V2_EntityType? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [EntityTypes.DeleteEntityType][google.cloud.dialogflow.v2.EntityTypes.DeleteEntityType].
public struct Google_Cloud_Dialogflow_V2_DeleteEntityTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the entity type to delete.
  /// Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes].
public struct Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to update or create entity types in.
  /// Format: `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// The source of the entity type batch.
  ///
  /// For each entity type in the batch:
  ///
  /// *   If `name` is specified, we update an existing entity type.
  /// *   If `name` is not specified, we create a new entity type.
  public var entityTypeBatch: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest.OneOf_EntityTypeBatch? = nil

  /// The URI to a Google Cloud Storage file containing entity types to update
  /// or create. The file format can either be a serialized proto (of
  /// EntityBatch type) or a JSON object. Note: The URI must start with
  /// "gs://".
  public var entityTypeBatchUri: String {
    get {
      if case .entityTypeBatchUri(let v)? = entityTypeBatch {return v}
      return String()
    }
    set {entityTypeBatch = .entityTypeBatchUri(newValue)}
  }

  /// The collection of entity types to update or create.
  public var entityTypeBatchInline: Google_Cloud_Dialogflow_V2_EntityTypeBatch {
    get {
      if case .entityTypeBatchInline(let v)? = entityTypeBatch {return v}
      return Google_Cloud_Dialogflow_V2_EntityTypeBatch()
    }
    set {entityTypeBatch = .entityTypeBatchInline(newValue)}
  }

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The mask to control which fields get updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The source of the entity type batch.
  ///
  /// For each entity type in the batch:
  ///
  /// *   If `name` is specified, we update an existing entity type.
  /// *   If `name` is not specified, we create a new entity type.
  public enum OneOf_EntityTypeBatch: Equatable {
    /// The URI to a Google Cloud Storage file containing entity types to update
    /// or create. The file format can either be a serialized proto (of
    /// EntityBatch type) or a JSON object. Note: The URI must start with
    /// "gs://".
    case entityTypeBatchUri(String)
    /// The collection of entity types to update or create.
    case entityTypeBatchInline(Google_Cloud_Dialogflow_V2_EntityTypeBatch)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest.OneOf_EntityTypeBatch, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest.OneOf_EntityTypeBatch) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.entityTypeBatchUri, .entityTypeBatchUri): return {
        guard case .entityTypeBatchUri(let l) = lhs, case .entityTypeBatchUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.entityTypeBatchInline, .entityTypeBatchInline): return {
        guard case .entityTypeBatchInline(let l) = lhs, case .entityTypeBatchInline(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The response message for [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes].
public struct Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The collection of updated or created entity types.
  public var entityTypes: [Google_Cloud_Dialogflow_V2_EntityType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [EntityTypes.BatchDeleteEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntityTypes].
public struct Google_Cloud_Dialogflow_V2_BatchDeleteEntityTypesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to delete all entities types for. Format:
  /// `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// Required. The names entity types to delete. All names must point to the
  /// same agent as `parent`.
  public var entityTypeNames: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [EntityTypes.BatchCreateEntities][google.cloud.dialogflow.v2.EntityTypes.BatchCreateEntities].
public struct Google_Cloud_Dialogflow_V2_BatchCreateEntitiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the entity type to create entities in. Format:
  /// `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
  public var parent: String = String()

  /// Required. The entities to create.
  public var entities: [Google_Cloud_Dialogflow_V2_EntityType.Entity] = []

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [EntityTypes.BatchUpdateEntities][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntities].
public struct Google_Cloud_Dialogflow_V2_BatchUpdateEntitiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the entity type to update or create entities in.
  /// Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
  public var parent: String = String()

  /// Required. The entities to update or create.
  public var entities: [Google_Cloud_Dialogflow_V2_EntityType.Entity] = []

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The mask to control which fields get updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [EntityTypes.BatchDeleteEntities][google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntities].
public struct Google_Cloud_Dialogflow_V2_BatchDeleteEntitiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the entity type to delete entries for. Format:
  /// `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
  public var parent: String = String()

  /// Required. The reference `values` of the entities to delete. Note that
  /// these are not fully-qualified names, i.e. they don't start with
  /// `projects/<Project ID>`.
  public var entityValues: [String] = []

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// This message is a wrapper around a collection of entity types.
public struct Google_Cloud_Dialogflow_V2_EntityTypeBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A collection of entity types.
  public var entityTypes: [Google_Cloud_Dialogflow_V2_EntityType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.v2"

extension Google_Cloud_Dialogflow_V2_EntityType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EntityType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "kind"),
    4: .standard(proto: "auto_expansion_mode"),
    6: .same(proto: "entities"),
    7: .standard(proto: "enable_fuzzy_extraction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.autoExpansionMode) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.entities) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.enableFuzzyExtraction) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if self.kind != .unspecified {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 3)
    }
    if self.autoExpansionMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.autoExpansionMode, fieldNumber: 4)
    }
    if !self.entities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entities, fieldNumber: 6)
    }
    if self.enableFuzzyExtraction != false {
      try visitor.visitSingularBoolField(value: self.enableFuzzyExtraction, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_EntityType, rhs: Google_Cloud_Dialogflow_V2_EntityType) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.autoExpansionMode != rhs.autoExpansionMode {return false}
    if lhs.entities != rhs.entities {return false}
    if lhs.enableFuzzyExtraction != rhs.enableFuzzyExtraction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_EntityType.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KIND_UNSPECIFIED"),
    1: .same(proto: "KIND_MAP"),
    2: .same(proto: "KIND_LIST"),
    3: .same(proto: "KIND_REGEXP"),
  ]
}

extension Google_Cloud_Dialogflow_V2_EntityType.AutoExpansionMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTO_EXPANSION_MODE_UNSPECIFIED"),
    1: .same(proto: "AUTO_EXPANSION_MODE_DEFAULT"),
  ]
}

extension Google_Cloud_Dialogflow_V2_EntityType.Entity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_EntityType.protoMessageName + ".Entity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "synonyms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.synonyms) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    if !self.synonyms.isEmpty {
      try visitor.visitRepeatedStringField(value: self.synonyms, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_EntityType.Entity, rhs: Google_Cloud_Dialogflow_V2_EntityType.Entity) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.synonyms != rhs.synonyms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ListEntityTypesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEntityTypesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ListEntityTypesRequest, rhs: Google_Cloud_Dialogflow_V2_ListEntityTypesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ListEntityTypesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEntityTypesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_types"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entityTypes) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entityTypes, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ListEntityTypesResponse, rhs: Google_Cloud_Dialogflow_V2_ListEntityTypesResponse) -> Bool {
    if lhs.entityTypes != rhs.entityTypes {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_GetEntityTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEntityTypeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_GetEntityTypeRequest, rhs: Google_Cloud_Dialogflow_V2_GetEntityTypeRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_CreateEntityTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateEntityTypeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "entity_type"),
    3: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._entityType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._entityType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_CreateEntityTypeRequest, rhs: Google_Cloud_Dialogflow_V2_CreateEntityTypeRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._entityType != rhs._entityType {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_UpdateEntityTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateEntityTypeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_type"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._entityType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entityType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_UpdateEntityTypeRequest, rhs: Google_Cloud_Dialogflow_V2_UpdateEntityTypeRequest) -> Bool {
    if lhs._entityType != rhs._entityType {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_DeleteEntityTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteEntityTypeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_DeleteEntityTypeRequest, rhs: Google_Cloud_Dialogflow_V2_DeleteEntityTypeRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchUpdateEntityTypesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "entity_type_batch_uri"),
    3: .standard(proto: "entity_type_batch_inline"),
    4: .standard(proto: "language_code"),
    5: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try {
        if self.entityTypeBatch != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.entityTypeBatch = .entityTypeBatchUri(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Dialogflow_V2_EntityTypeBatch?
        if let current = self.entityTypeBatch {
          try decoder.handleConflictingOneOf()
          if case .entityTypeBatchInline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.entityTypeBatch = .entityTypeBatchInline(v)}
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.entityTypeBatch {
    case .entityTypeBatchUri?: try {
      guard case .entityTypeBatchUri(let v)? = self.entityTypeBatch else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .entityTypeBatchInline?: try {
      guard case .entityTypeBatchInline(let v)? = self.entityTypeBatch else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 4)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.entityTypeBatch != rhs.entityTypeBatch {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchUpdateEntityTypesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entityTypes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entityTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesResponse, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntityTypesResponse) -> Bool {
    if lhs.entityTypes != rhs.entityTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchDeleteEntityTypesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchDeleteEntityTypesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "entity_type_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.entityTypeNames) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.entityTypeNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.entityTypeNames, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchDeleteEntityTypesRequest, rhs: Google_Cloud_Dialogflow_V2_BatchDeleteEntityTypesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.entityTypeNames != rhs.entityTypeNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchCreateEntitiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchCreateEntitiesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "entities"),
    3: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entities) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.entities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entities, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchCreateEntitiesRequest, rhs: Google_Cloud_Dialogflow_V2_BatchCreateEntitiesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.entities != rhs.entities {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchUpdateEntitiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchUpdateEntitiesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "entities"),
    3: .standard(proto: "language_code"),
    4: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entities) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.entities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entities, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntitiesRequest, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateEntitiesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.entities != rhs.entities {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchDeleteEntitiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchDeleteEntitiesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "entity_values"),
    3: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.entityValues) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.entityValues.isEmpty {
      try visitor.visitRepeatedStringField(value: self.entityValues, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchDeleteEntitiesRequest, rhs: Google_Cloud_Dialogflow_V2_BatchDeleteEntitiesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.entityValues != rhs.entityValues {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_EntityTypeBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EntityTypeBatch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entityTypes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entityTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_EntityTypeBatch, rhs: Google_Cloud_Dialogflow_V2_EntityTypeBatch) -> Bool {
    if lhs.entityTypes != rhs.entityTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
