// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/v2/intent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the options for views of an intent.
/// An intent can be a sizable object. Therefore, we provide a resource view that
/// does not return training phrases in the response by default.
public enum Google_Cloud_Dialogflow_V2_IntentView: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Training phrases field is not populated in the response.
  case unspecified // = 0

  /// All fields are populated.
  case full // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .full
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .full: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_V2_IntentView: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_IntentView] = [
    .unspecified,
    .full,
  ]
}

#endif  // swift(>=4.2)

/// An intent categorizes an end-user's intention for one conversation turn. For
/// each agent, you define many intents, where your combined intents can handle a
/// complete conversation. When an end-user writes or says something, referred to
/// as an end-user expression or end-user input, Dialogflow matches the end-user
/// input to the best intent in your agent. Matching an intent is also known as
/// intent classification.
///
/// For more information, see the [intent
/// guide](https://cloud.google.com/dialogflow/docs/intents-overview).
public struct Google_Cloud_Dialogflow_V2_Intent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The unique identifier of this intent.
  /// Required for [Intents.UpdateIntent][google.cloud.dialogflow.v2.Intents.UpdateIntent] and [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents]
  /// methods.
  /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The name of this intent.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// Optional. Indicates whether webhooks are enabled for the intent.
  public var webhookState: Google_Cloud_Dialogflow_V2_Intent.WebhookState {
    get {return _storage._webhookState}
    set {_uniqueStorage()._webhookState = newValue}
  }

  /// Optional. The priority of this intent. Higher numbers represent higher
  /// priorities.
  ///
  /// - If the supplied value is unspecified or 0, the service
  ///   translates the value to 500,000, which corresponds to the
  ///   `Normal` priority in the console.
  /// - If the supplied value is negative, the intent is ignored
  ///   in runtime detect intent requests.
  public var priority: Int32 {
    get {return _storage._priority}
    set {_uniqueStorage()._priority = newValue}
  }

  /// Optional. Indicates whether this is a fallback intent.
  public var isFallback: Bool {
    get {return _storage._isFallback}
    set {_uniqueStorage()._isFallback = newValue}
  }

  /// Optional. Indicates whether Machine Learning is disabled for the intent.
  /// Note: If `ml_disabled` setting is set to true, then this intent is not
  /// taken into account during inference in `ML ONLY` match mode. Also,
  /// auto-markup in the UI is turned off.
  public var mlDisabled: Bool {
    get {return _storage._mlDisabled}
    set {_uniqueStorage()._mlDisabled = newValue}
  }

  /// Optional. The list of context names required for this intent to be
  /// triggered.
  /// Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
  public var inputContextNames: [String] {
    get {return _storage._inputContextNames}
    set {_uniqueStorage()._inputContextNames = newValue}
  }

  /// Optional. The collection of event names that trigger the intent.
  /// If the collection of input contexts is not empty, all of the contexts must
  /// be present in the active user session for an event to trigger this intent.
  /// Event names are limited to 150 characters.
  public var events: [String] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  /// Optional. The collection of examples that the agent is
  /// trained on.
  public var trainingPhrases: [Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase] {
    get {return _storage._trainingPhrases}
    set {_uniqueStorage()._trainingPhrases = newValue}
  }

  /// Optional. The name of the action associated with the intent.
  /// Note: The action name must not contain whitespaces.
  public var action: String {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  /// Optional. The collection of contexts that are activated when the intent
  /// is matched. Context messages in this collection should not set the
  /// parameters field. Setting the `lifespan_count` to 0 will reset the context
  /// when the intent is matched.
  /// Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
  public var outputContexts: [Google_Cloud_Dialogflow_V2_Context] {
    get {return _storage._outputContexts}
    set {_uniqueStorage()._outputContexts = newValue}
  }

  /// Optional. Indicates whether to delete all contexts in the current
  /// session when this intent is matched.
  public var resetContexts: Bool {
    get {return _storage._resetContexts}
    set {_uniqueStorage()._resetContexts = newValue}
  }

  /// Optional. The collection of parameters associated with the intent.
  public var parameters: [Google_Cloud_Dialogflow_V2_Intent.Parameter] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  /// Optional. The collection of rich messages corresponding to the
  /// `Response` field in the Dialogflow console.
  public var messages: [Google_Cloud_Dialogflow_V2_Intent.Message] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  /// Optional. The list of platforms for which the first responses will be
  /// copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform).
  public var defaultResponsePlatforms: [Google_Cloud_Dialogflow_V2_Intent.Message.Platform] {
    get {return _storage._defaultResponsePlatforms}
    set {_uniqueStorage()._defaultResponsePlatforms = newValue}
  }

  /// Read-only. The unique identifier of the root intent in the chain of
  /// followup intents. It identifies the correct followup intents chain for
  /// this intent. We populate this field only in the output.
  ///
  /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
  public var rootFollowupIntentName: String {
    get {return _storage._rootFollowupIntentName}
    set {_uniqueStorage()._rootFollowupIntentName = newValue}
  }

  /// Read-only after creation. The unique identifier of the parent intent in the
  /// chain of followup intents. You can set this field when creating an intent,
  /// for example with [CreateIntent][google.cloud.dialogflow.v2.Intents.CreateIntent] or
  /// [BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents], in order to make this
  /// intent a followup intent.
  ///
  /// It identifies the parent followup intent.
  /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
  public var parentFollowupIntentName: String {
    get {return _storage._parentFollowupIntentName}
    set {_uniqueStorage()._parentFollowupIntentName = newValue}
  }

  /// Read-only. Information about all followup intents that have this intent as
  /// a direct or indirect parent. We populate this field only in the output.
  public var followupIntentInfo: [Google_Cloud_Dialogflow_V2_Intent.FollowupIntentInfo] {
    get {return _storage._followupIntentInfo}
    set {_uniqueStorage()._followupIntentInfo = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents the different states that webhooks can be in.
  public enum WebhookState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Webhook is disabled in the agent and in the intent.
    case unspecified // = 0

    /// Webhook is enabled in the agent and in the intent.
    case enabled // = 1

    /// Webhook is enabled in the agent and in the intent. Also, each slot
    /// filling prompt is forwarded to the webhook.
    case enabledForSlotFilling // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .enabled
      case 2: self = .enabledForSlotFilling
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .enabled: return 1
      case .enabledForSlotFilling: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Represents an example that the agent is trained on.
  public struct TrainingPhrase {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The unique identifier of this training phrase.
    public var name: String = String()

    /// Required. The type of the training phrase.
    public var type: Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.TypeEnum = .unspecified

    /// Required. The ordered list of training phrase parts.
    /// The parts are concatenated in order to form the training phrase.
    ///
    /// Note: The API does not automatically annotate training phrases like the
    /// Dialogflow Console does.
    ///
    /// Note: Do not forget to include whitespace at part boundaries,
    /// so the training phrase is well formatted when the parts are concatenated.
    ///
    /// If the training phrase does not need to be annotated with parameters,
    /// you just need a single part with only the [Part.text][google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text] field set.
    ///
    /// If you want to annotate the training phrase, you must create multiple
    /// parts, where the fields of each part are populated in one of two ways:
    ///
    /// -   `Part.text` is set to a part of the phrase that has no parameters.
    /// -   `Part.text` is set to a part of the phrase that you want to annotate,
    ///     and the `entity_type`, `alias`, and `user_defined` fields are all
    ///     set.
    public var parts: [Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.Part] = []

    /// Optional. Indicates how many times this example was added to
    /// the intent. Each time a developer adds an existing sample by editing an
    /// intent or training, this counter is increased.
    public var timesAddedCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Represents different types of training phrases.
    public enum TypeEnum: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Not specified. This value should never be used.
      case unspecified // = 0

      /// Examples do not contain @-prefixed entity type names, but example parts
      /// can be annotated with entity types.
      case example // = 1

      /// Templates are not annotated with entity types, but they can contain
      /// @-prefixed entity type names as substrings.
      /// Template mode has been deprecated. Example mode is the only supported
      /// way to create new training phrases. If you have existing training
      /// phrases that you've created in template mode, those will continue to
      /// work.
      case template // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .example
        case 2: self = .template
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .example: return 1
        case .template: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// Represents a part of a training phrase.
    public struct Part {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The text for this part.
      public var text: String = String()

      /// Optional. The entity type name prefixed with `@`.
      /// This field is required for annotated parts of the training phrase.
      public var entityType: String = String()

      /// Optional. The parameter name for the value extracted from the
      /// annotated part of the example.
      /// This field is required for annotated parts of the training phrase.
      public var alias: String = String()

      /// Optional. Indicates whether the text was manually annotated.
      /// This field is set to true when the Dialogflow Console is used to
      /// manually annotate the part. When creating an annotated part with the
      /// API, you must set this to true.
      public var userDefined: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  /// Represents intent parameters.
  public struct Parameter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The unique identifier of this parameter.
    public var name: String = String()

    /// Required. The name of the parameter.
    public var displayName: String = String()

    /// Optional. The definition of the parameter value. It can be:
    ///
    /// - a constant string,
    /// - a parameter value defined as `$parameter_name`,
    /// - an original parameter value defined as `$parameter_name.original`,
    /// - a parameter value from some context defined as
    ///   `#context_name.parameter_name`.
    public var value: String = String()

    /// Optional. The default value to use when the `value` yields an empty
    /// result.
    /// Default values can be extracted from contexts by using the following
    /// syntax: `#context_name.parameter_name`.
    public var defaultValue: String = String()

    /// Optional. The name of the entity type, prefixed with `@`, that
    /// describes values of the parameter. If the parameter is
    /// required, this must be provided.
    public var entityTypeDisplayName: String = String()

    /// Optional. Indicates whether the parameter is required. That is,
    /// whether the intent cannot be completed without collecting the parameter
    /// value.
    public var mandatory: Bool = false

    /// Optional. The collection of prompts that the agent can present to the
    /// user in order to collect a value for the parameter.
    public var prompts: [String] = []

    /// Optional. Indicates whether the parameter represents a list of values.
    public var isList: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// A rich response message.
  /// Corresponds to the intent `Response` field in the Dialogflow console.
  /// For more information, see
  /// [Rich response
  /// messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages).
  public struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The rich response message.
    public var message: Google_Cloud_Dialogflow_V2_Intent.Message.OneOf_Message? = nil

    /// The text response.
    public var text: Google_Cloud_Dialogflow_V2_Intent.Message.Text {
      get {
        if case .text(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.Text()
      }
      set {message = .text(newValue)}
    }

    /// The image response.
    public var image: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
      get {
        if case .image(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.Image()
      }
      set {message = .image(newValue)}
    }

    /// The quick replies response.
    public var quickReplies: Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies {
      get {
        if case .quickReplies(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies()
      }
      set {message = .quickReplies(newValue)}
    }

    /// The card response.
    public var card: Google_Cloud_Dialogflow_V2_Intent.Message.Card {
      get {
        if case .card(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.Card()
      }
      set {message = .card(newValue)}
    }

    /// A custom platform-specific response.
    public var payload: SwiftProtobuf.Google_Protobuf_Struct {
      get {
        if case .payload(let v)? = message {return v}
        return SwiftProtobuf.Google_Protobuf_Struct()
      }
      set {message = .payload(newValue)}
    }

    /// The voice and text-only responses for Actions on Google.
    public var simpleResponses: Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses {
      get {
        if case .simpleResponses(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses()
      }
      set {message = .simpleResponses(newValue)}
    }

    /// The basic card response for Actions on Google.
    public var basicCard: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard {
      get {
        if case .basicCard(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard()
      }
      set {message = .basicCard(newValue)}
    }

    /// The suggestion chips for Actions on Google.
    public var suggestions: Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions {
      get {
        if case .suggestions(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions()
      }
      set {message = .suggestions(newValue)}
    }

    /// The link out suggestion chip for Actions on Google.
    public var linkOutSuggestion: Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion {
      get {
        if case .linkOutSuggestion(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion()
      }
      set {message = .linkOutSuggestion(newValue)}
    }

    /// The list card response for Actions on Google.
    public var listSelect: Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect {
      get {
        if case .listSelect(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect()
      }
      set {message = .listSelect(newValue)}
    }

    /// The carousel card response for Actions on Google.
    public var carouselSelect: Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect {
      get {
        if case .carouselSelect(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect()
      }
      set {message = .carouselSelect(newValue)}
    }

    /// Browse carousel card for Actions on Google.
    public var browseCarouselCard: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard {
      get {
        if case .browseCarouselCard(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard()
      }
      set {message = .browseCarouselCard(newValue)}
    }

    /// Table card for Actions on Google.
    public var tableCard: Google_Cloud_Dialogflow_V2_Intent.Message.TableCard {
      get {
        if case .tableCard(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.TableCard()
      }
      set {message = .tableCard(newValue)}
    }

    /// The media content card for Actions on Google.
    public var mediaContent: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent {
      get {
        if case .mediaContent(let v)? = message {return v}
        return Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent()
      }
      set {message = .mediaContent(newValue)}
    }

    /// Optional. The platform that this message is intended for.
    public var platform: Google_Cloud_Dialogflow_V2_Intent.Message.Platform = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Required. The rich response message.
    public enum OneOf_Message: Equatable {
      /// The text response.
      case text(Google_Cloud_Dialogflow_V2_Intent.Message.Text)
      /// The image response.
      case image(Google_Cloud_Dialogflow_V2_Intent.Message.Image)
      /// The quick replies response.
      case quickReplies(Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies)
      /// The card response.
      case card(Google_Cloud_Dialogflow_V2_Intent.Message.Card)
      /// A custom platform-specific response.
      case payload(SwiftProtobuf.Google_Protobuf_Struct)
      /// The voice and text-only responses for Actions on Google.
      case simpleResponses(Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses)
      /// The basic card response for Actions on Google.
      case basicCard(Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard)
      /// The suggestion chips for Actions on Google.
      case suggestions(Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions)
      /// The link out suggestion chip for Actions on Google.
      case linkOutSuggestion(Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion)
      /// The list card response for Actions on Google.
      case listSelect(Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect)
      /// The carousel card response for Actions on Google.
      case carouselSelect(Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect)
      /// Browse carousel card for Actions on Google.
      case browseCarouselCard(Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard)
      /// Table card for Actions on Google.
      case tableCard(Google_Cloud_Dialogflow_V2_Intent.Message.TableCard)
      /// The media content card for Actions on Google.
      case mediaContent(Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.OneOf_Message, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.OneOf_Message) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.text, .text): return {
          guard case .text(let l) = lhs, case .text(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.image, .image): return {
          guard case .image(let l) = lhs, case .image(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.quickReplies, .quickReplies): return {
          guard case .quickReplies(let l) = lhs, case .quickReplies(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.card, .card): return {
          guard case .card(let l) = lhs, case .card(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.payload, .payload): return {
          guard case .payload(let l) = lhs, case .payload(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.simpleResponses, .simpleResponses): return {
          guard case .simpleResponses(let l) = lhs, case .simpleResponses(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.basicCard, .basicCard): return {
          guard case .basicCard(let l) = lhs, case .basicCard(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.suggestions, .suggestions): return {
          guard case .suggestions(let l) = lhs, case .suggestions(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.linkOutSuggestion, .linkOutSuggestion): return {
          guard case .linkOutSuggestion(let l) = lhs, case .linkOutSuggestion(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.listSelect, .listSelect): return {
          guard case .listSelect(let l) = lhs, case .listSelect(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.carouselSelect, .carouselSelect): return {
          guard case .carouselSelect(let l) = lhs, case .carouselSelect(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.browseCarouselCard, .browseCarouselCard): return {
          guard case .browseCarouselCard(let l) = lhs, case .browseCarouselCard(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.tableCard, .tableCard): return {
          guard case .tableCard(let l) = lhs, case .tableCard(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.mediaContent, .mediaContent): return {
          guard case .mediaContent(let l) = lhs, case .mediaContent(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    /// The rich response message integration platform. See
    /// [Integrations](https://cloud.google.com/dialogflow/docs/integrations).
    public enum Platform: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Default platform.
      case unspecified // = 0

      /// Facebook.
      case facebook // = 1

      /// Slack.
      case slack // = 2

      /// Telegram.
      case telegram // = 3

      /// Kik.
      case kik // = 4

      /// Skype.
      case skype // = 5

      /// Line.
      case line // = 6

      /// Viber.
      case viber // = 7

      /// Google Assistant
      /// See [Dialogflow webhook
      /// format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
      case actionsOnGoogle // = 8

      /// Google Hangouts.
      case googleHangouts // = 11
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .facebook
        case 2: self = .slack
        case 3: self = .telegram
        case 4: self = .kik
        case 5: self = .skype
        case 6: self = .line
        case 7: self = .viber
        case 8: self = .actionsOnGoogle
        case 11: self = .googleHangouts
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .facebook: return 1
        case .slack: return 2
        case .telegram: return 3
        case .kik: return 4
        case .skype: return 5
        case .line: return 6
        case .viber: return 7
        case .actionsOnGoogle: return 8
        case .googleHangouts: return 11
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// The text response message.
    public struct Text {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. The collection of the agent's responses.
      public var text: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The image response message.
    public struct Image {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. The public URI to an image file.
      public var imageUri: String = String()

      /// Optional. A text description of the image to be used for accessibility,
      /// e.g., screen readers.
      public var accessibilityText: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The quick replies response message.
    public struct QuickReplies {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. The title of the collection of quick replies.
      public var title: String = String()

      /// Optional. The collection of quick replies.
      public var quickReplies: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The card response message.
    public struct Card {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. The title of the card.
      public var title: String = String()

      /// Optional. The subtitle of the card.
      public var subtitle: String = String()

      /// Optional. The public URI to an image file for the card.
      public var imageUri: String = String()

      /// Optional. The collection of card buttons.
      public var buttons: [Google_Cloud_Dialogflow_V2_Intent.Message.Card.Button] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Contains information about a button.
      public struct Button {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Optional. The text to show on the button.
        public var text: String = String()

        /// Optional. The text to send back to the Dialogflow API or a URI to
        /// open.
        public var postback: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    /// The simple response message containing speech or text.
    public struct SimpleResponse {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// One of text_to_speech or ssml must be provided. The plain text of the
      /// speech output. Mutually exclusive with ssml.
      public var textToSpeech: String = String()

      /// One of text_to_speech or ssml must be provided. Structured spoken
      /// response to the user in the SSML format. Mutually exclusive with
      /// text_to_speech.
      public var ssml: String = String()

      /// Optional. The text to display.
      public var displayText: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The collection of simple response candidates.
    /// This message in `QueryResult.fulfillment_messages` and
    /// `WebhookResponse.fulfillment_messages` should contain only one
    /// `SimpleResponse`.
    public struct SimpleResponses {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The list of simple responses.
      public var simpleResponses: [Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponse] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The basic card message. Useful for displaying information.
    public struct BasicCard {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. The title of the card.
      public var title: String = String()

      /// Optional. The subtitle of the card.
      public var subtitle: String = String()

      /// Required, unless image is present. The body text of the card.
      public var formattedText: String = String()

      /// Optional. The image for the card.
      public var image: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
        get {return _image ?? Google_Cloud_Dialogflow_V2_Intent.Message.Image()}
        set {_image = newValue}
      }
      /// Returns true if `image` has been explicitly set.
      public var hasImage: Bool {return self._image != nil}
      /// Clears the value of `image`. Subsequent reads from it will return its default value.
      public mutating func clearImage() {self._image = nil}

      /// Optional. The collection of card buttons.
      public var buttons: [Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// The button object that appears at the bottom of a card.
      public struct Button {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. The title of the button.
        public var title: String = String()

        /// Required. Action to take when a user taps on the button.
        public var openUriAction: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.OpenUriAction {
          get {return _openUriAction ?? Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.OpenUriAction()}
          set {_openUriAction = newValue}
        }
        /// Returns true if `openUriAction` has been explicitly set.
        public var hasOpenUriAction: Bool {return self._openUriAction != nil}
        /// Clears the value of `openUriAction`. Subsequent reads from it will return its default value.
        public mutating func clearOpenUriAction() {self._openUriAction = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Opens the given URI.
        public struct OpenUriAction {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// Required. The HTTP or HTTPS scheme URI.
          public var uri: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _openUriAction: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.OpenUriAction? = nil
      }

      public init() {}

      fileprivate var _image: Google_Cloud_Dialogflow_V2_Intent.Message.Image? = nil
    }

    /// The suggestion chip message that the user can tap to quickly post a reply
    /// to the conversation.
    public struct Suggestion {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The text shown the in the suggestion chip.
      public var title: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The collection of suggestions.
    public struct Suggestions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The list of suggested replies.
      public var suggestions: [Google_Cloud_Dialogflow_V2_Intent.Message.Suggestion] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The suggestion chip message that allows the user to jump out to the app
    /// or website associated with this agent.
    public struct LinkOutSuggestion {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The name of the app or site this chip is linking to.
      public var destinationName: String = String()

      /// Required. The URI of the app or site to open when the user taps the
      /// suggestion chip.
      public var uri: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The card for presenting a list of options to select from.
    public struct ListSelect {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. The overall title of the list.
      public var title: String = String()

      /// Required. List items.
      public var items: [Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect.Item] = []

      /// Optional. Subtitle of the list.
      public var subtitle: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// An item in the list.
      public struct Item {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Additional information about this option.
        public var info: Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo {
          get {return _info ?? Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo()}
          set {_info = newValue}
        }
        /// Returns true if `info` has been explicitly set.
        public var hasInfo: Bool {return self._info != nil}
        /// Clears the value of `info`. Subsequent reads from it will return its default value.
        public mutating func clearInfo() {self._info = nil}

        /// Required. The title of the list item.
        public var title: String = String()

        /// Optional. The main text describing the item.
        public var description_p: String = String()

        /// Optional. The image to display.
        public var image: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
          get {return _image ?? Google_Cloud_Dialogflow_V2_Intent.Message.Image()}
          set {_image = newValue}
        }
        /// Returns true if `image` has been explicitly set.
        public var hasImage: Bool {return self._image != nil}
        /// Clears the value of `image`. Subsequent reads from it will return its default value.
        public mutating func clearImage() {self._image = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _info: Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo? = nil
        fileprivate var _image: Google_Cloud_Dialogflow_V2_Intent.Message.Image? = nil
      }

      public init() {}
    }

    /// The card for presenting a carousel of options to select from.
    public struct CarouselSelect {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Carousel items.
      public var items: [Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect.Item] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// An item in the carousel.
      public struct Item {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Additional info about the option item.
        public var info: Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo {
          get {return _info ?? Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo()}
          set {_info = newValue}
        }
        /// Returns true if `info` has been explicitly set.
        public var hasInfo: Bool {return self._info != nil}
        /// Clears the value of `info`. Subsequent reads from it will return its default value.
        public mutating func clearInfo() {self._info = nil}

        /// Required. Title of the carousel item.
        public var title: String = String()

        /// Optional. The body text of the card.
        public var description_p: String = String()

        /// Optional. The image to display.
        public var image: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
          get {return _image ?? Google_Cloud_Dialogflow_V2_Intent.Message.Image()}
          set {_image = newValue}
        }
        /// Returns true if `image` has been explicitly set.
        public var hasImage: Bool {return self._image != nil}
        /// Clears the value of `image`. Subsequent reads from it will return its default value.
        public mutating func clearImage() {self._image = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _info: Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo? = nil
        fileprivate var _image: Google_Cloud_Dialogflow_V2_Intent.Message.Image? = nil
      }

      public init() {}
    }

    /// Additional info about the select item for when it is triggered in a
    /// dialog.
    public struct SelectItemInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. A unique key that will be sent back to the agent if this
      /// response is given.
      public var key: String = String()

      /// Optional. A list of synonyms that can also be used to trigger this
      /// item in dialog.
      public var synonyms: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// The media content card for Actions on Google.
    public struct MediaContent {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. What type of media is the content (ie "audio").
      public var mediaType: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaType = .unspecified

      /// Required. List of media objects.
      public var mediaObjects: [Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Format of response media type.
      public enum ResponseMediaType: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Unspecified.
        case unspecified // = 0

        /// Response media type is audio.
        case audio // = 1
        case UNRECOGNIZED(Int)

        public init() {
          self = .unspecified
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unspecified
          case 1: self = .audio
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unspecified: return 0
          case .audio: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      /// Response media object for media content card.
      public struct ResponseMediaObject {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Name of media card.
        public var name: String = String()

        /// Optional. Description of media card.
        public var description_p: String = String()

        /// Image to show with the media card.
        public var image: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject.OneOf_Image? = nil

        /// Optional. Image to display above media content.
        public var largeImage: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
          get {
            if case .largeImage(let v)? = image {return v}
            return Google_Cloud_Dialogflow_V2_Intent.Message.Image()
          }
          set {image = .largeImage(newValue)}
        }

        /// Optional. Icon to display above media content.
        public var icon: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
          get {
            if case .icon(let v)? = image {return v}
            return Google_Cloud_Dialogflow_V2_Intent.Message.Image()
          }
          set {image = .icon(newValue)}
        }

        /// Required. Url where the media is stored.
        public var contentURL: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Image to show with the media card.
        public enum OneOf_Image: Equatable {
          /// Optional. Image to display above media content.
          case largeImage(Google_Cloud_Dialogflow_V2_Intent.Message.Image)
          /// Optional. Icon to display above media content.
          case icon(Google_Cloud_Dialogflow_V2_Intent.Message.Image)

        #if !swift(>=4.1)
          public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject.OneOf_Image, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject.OneOf_Image) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.largeImage, .largeImage): return {
              guard case .largeImage(let l) = lhs, case .largeImage(let r) = rhs else { preconditionFailure() }
              return l == r
            }()
            case (.icon, .icon): return {
              guard case .icon(let l) = lhs, case .icon(let r) = rhs else { preconditionFailure() }
              return l == r
            }()
            default: return false
            }
          }
        #endif
        }

        public init() {}
      }

      public init() {}
    }

    /// Browse Carousel Card for Actions on Google.
    /// https://developers.google.com/actions/assistant/responses#browsing_carousel
    public struct BrowseCarouselCard {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. List of items in the Browse Carousel Card. Minimum of two
      /// items, maximum of ten.
      public var items: [Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem] = []

      /// Optional. Settings for displaying the image. Applies to every image in
      /// [items][google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items].
      public var imageDisplayOptions: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.ImageDisplayOptions = .unspecified

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Image display options for Actions on Google. This should be used for
      /// when the image's aspect ratio does not match the image container's
      /// aspect ratio.
      public enum ImageDisplayOptions: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Fill the gaps between the image and the image container with gray
        /// bars.
        case unspecified // = 0

        /// Fill the gaps between the image and the image container with gray
        /// bars.
        case gray // = 1

        /// Fill the gaps between the image and the image container with white
        /// bars.
        case white // = 2

        /// Image is scaled such that the image width and height match or exceed
        /// the container dimensions. This may crop the top and bottom of the
        /// image if the scaled image height is greater than the container
        /// height, or crop the left and right of the image if the scaled image
        /// width is greater than the container width. This is similar to "Zoom
        /// Mode" on a widescreen TV when playing a 4:3 video.
        case cropped // = 3

        /// Pad the gaps between image and image frame with a blurred copy of the
        /// same image.
        case blurredBackground // = 4
        case UNRECOGNIZED(Int)

        public init() {
          self = .unspecified
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unspecified
          case 1: self = .gray
          case 2: self = .white
          case 3: self = .cropped
          case 4: self = .blurredBackground
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unspecified: return 0
          case .gray: return 1
          case .white: return 2
          case .cropped: return 3
          case .blurredBackground: return 4
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      /// Browsing carousel tile
      public struct BrowseCarouselCardItem {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Required. Action to present to the user.
        public var openUriAction: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction {
          get {return _openUriAction ?? Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction()}
          set {_openUriAction = newValue}
        }
        /// Returns true if `openUriAction` has been explicitly set.
        public var hasOpenUriAction: Bool {return self._openUriAction != nil}
        /// Clears the value of `openUriAction`. Subsequent reads from it will return its default value.
        public mutating func clearOpenUriAction() {self._openUriAction = nil}

        /// Required. Title of the carousel item. Maximum of two lines of text.
        public var title: String = String()

        /// Optional. Description of the carousel item. Maximum of four lines of
        /// text.
        public var description_p: String = String()

        /// Optional. Hero image for the carousel item.
        public var image: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
          get {return _image ?? Google_Cloud_Dialogflow_V2_Intent.Message.Image()}
          set {_image = newValue}
        }
        /// Returns true if `image` has been explicitly set.
        public var hasImage: Bool {return self._image != nil}
        /// Clears the value of `image`. Subsequent reads from it will return its default value.
        public mutating func clearImage() {self._image = nil}

        /// Optional. Text that appears at the bottom of the Browse Carousel
        /// Card. Maximum of one line of text.
        public var footer: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Actions on Google action to open a given url.
        public struct OpenUrlAction {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// Required. URL
          public var url: String = String()

          /// Optional. Specifies the type of viewer that is used when opening
          /// the URL. Defaults to opening via web browser.
          public var urlTypeHint: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint = .unspecified

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          /// Type of the URI.
          public enum UrlTypeHint: SwiftProtobuf.Enum {
            public typealias RawValue = Int

            /// Unspecified
            case unspecified // = 0

            /// Url would be an amp action
            case ampAction // = 1

            /// URL that points directly to AMP content, or to a canonical URL
            /// which refers to AMP content via <link rel="amphtml">.
            case ampContent // = 2
            case UNRECOGNIZED(Int)

            public init() {
              self = .unspecified
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .unspecified
              case 1: self = .ampAction
              case 2: self = .ampContent
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .unspecified: return 0
              case .ampAction: return 1
              case .ampContent: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          public init() {}
        }

        public init() {}

        fileprivate var _openUriAction: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction? = nil
        fileprivate var _image: Google_Cloud_Dialogflow_V2_Intent.Message.Image? = nil
      }

      public init() {}
    }

    /// Table card for Actions on Google.
    public struct TableCard {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Title of the card.
      public var title: String = String()

      /// Optional. Subtitle to the title.
      public var subtitle: String = String()

      /// Optional. Image which should be displayed on the card.
      public var image: Google_Cloud_Dialogflow_V2_Intent.Message.Image {
        get {return _image ?? Google_Cloud_Dialogflow_V2_Intent.Message.Image()}
        set {_image = newValue}
      }
      /// Returns true if `image` has been explicitly set.
      public var hasImage: Bool {return self._image != nil}
      /// Clears the value of `image`. Subsequent reads from it will return its default value.
      public mutating func clearImage() {self._image = nil}

      /// Optional. Display properties for the columns in this table.
      public var columnProperties: [Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties] = []

      /// Optional. Rows in this table of data.
      public var rows: [Google_Cloud_Dialogflow_V2_Intent.Message.TableCardRow] = []

      /// Optional. List of buttons for the card.
      public var buttons: [Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _image: Google_Cloud_Dialogflow_V2_Intent.Message.Image? = nil
    }

    /// Column properties for [TableCard][google.cloud.dialogflow.v2.Intent.Message.TableCard].
    public struct ColumnProperties {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Column heading.
      public var header: String = String()

      /// Optional. Defines text alignment for all cells in this column.
      public var horizontalAlignment: Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties.HorizontalAlignment = .unspecified

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Text alignments within a cell.
      public enum HorizontalAlignment: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Text is aligned to the leading edge of the column.
        case unspecified // = 0

        /// Text is aligned to the leading edge of the column.
        case leading // = 1

        /// Text is centered in the column.
        case center // = 2

        /// Text is aligned to the trailing edge of the column.
        case trailing // = 3
        case UNRECOGNIZED(Int)

        public init() {
          self = .unspecified
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unspecified
          case 1: self = .leading
          case 2: self = .center
          case 3: self = .trailing
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unspecified: return 0
          case .leading: return 1
          case .center: return 2
          case .trailing: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}
    }

    /// Row of [TableCard][google.cloud.dialogflow.v2.Intent.Message.TableCard].
    public struct TableCardRow {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. List of cells that make up this row.
      public var cells: [Google_Cloud_Dialogflow_V2_Intent.Message.TableCardCell] = []

      /// Optional. Whether to add a visual divider after this row.
      public var dividerAfter: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Cell of [TableCardRow][google.cloud.dialogflow.v2.Intent.Message.TableCardRow].
    public struct TableCardCell {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Text in this cell.
      public var text: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  /// Represents a single followup intent in the chain.
  public struct FollowupIntentInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The unique identifier of the followup intent.
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    public var followupIntentName: String = String()

    /// The unique identifier of the followup intent's parent.
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    public var parentFollowupIntentName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_V2_Intent.WebhookState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.WebhookState] = [
    .unspecified,
    .enabled,
    .enabledForSlotFilling,
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.TypeEnum] = [
    .unspecified,
    .example,
    .template,
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Platform: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.Message.Platform] = [
    .unspecified,
    .facebook,
    .slack,
    .telegram,
    .kik,
    .skype,
    .line,
    .viber,
    .actionsOnGoogle,
    .googleHangouts,
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaType] = [
    .unspecified,
    .audio,
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.ImageDisplayOptions: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.ImageDisplayOptions] = [
    .unspecified,
    .gray,
    .white,
    .cropped,
    .blurredBackground,
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint] = [
    .unspecified,
    .ampAction,
    .ampContent,
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties.HorizontalAlignment: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties.HorizontalAlignment] = [
    .unspecified,
    .leading,
    .center,
    .trailing,
  ]
}

#endif  // swift(>=4.2)

/// The request message for [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents].
public struct Google_Cloud_Dialogflow_V2_ListIntentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to list all intents from.
  /// Format: `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The resource view to apply to the returned intent.
  public var intentView: Google_Cloud_Dialogflow_V2_IntentView = .unspecified

  /// Optional. The maximum number of items to return in a single page. By
  /// default 100 and at most 1000.
  public var pageSize: Int32 = 0

  /// Optional. The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents].
public struct Google_Cloud_Dialogflow_V2_ListIntentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of agent intents. There will be a maximum number of items
  /// returned based on the page_size field in the request.
  public var intents: [Google_Cloud_Dialogflow_V2_Intent] = []

  /// Token to retrieve the next page of results, or empty if there are no
  /// more results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Intents.GetIntent][google.cloud.dialogflow.v2.Intents.GetIntent].
public struct Google_Cloud_Dialogflow_V2_GetIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the intent.
  /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
  public var name: String = String()

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The resource view to apply to the returned intent.
  public var intentView: Google_Cloud_Dialogflow_V2_IntentView = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Intents.CreateIntent][google.cloud.dialogflow.v2.Intents.CreateIntent].
public struct Google_Cloud_Dialogflow_V2_CreateIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to create a intent for.
  /// Format: `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// Required. The intent to create.
  public var intent: Google_Cloud_Dialogflow_V2_Intent {
    get {return _intent ?? Google_Cloud_Dialogflow_V2_Intent()}
    set {_intent = newValue}
  }
  /// Returns true if `intent` has been explicitly set.
  public var hasIntent: Bool {return self._intent != nil}
  /// Clears the value of `intent`. Subsequent reads from it will return its default value.
  public mutating func clearIntent() {self._intent = nil}

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The resource view to apply to the returned intent.
  public var intentView: Google_Cloud_Dialogflow_V2_IntentView = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intent: Google_Cloud_Dialogflow_V2_Intent? = nil
}

/// The request message for [Intents.UpdateIntent][google.cloud.dialogflow.v2.Intents.UpdateIntent].
public struct Google_Cloud_Dialogflow_V2_UpdateIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The intent to update.
  public var intent: Google_Cloud_Dialogflow_V2_Intent {
    get {return _intent ?? Google_Cloud_Dialogflow_V2_Intent()}
    set {_intent = newValue}
  }
  /// Returns true if `intent` has been explicitly set.
  public var hasIntent: Bool {return self._intent != nil}
  /// Clears the value of `intent`. Subsequent reads from it will return its default value.
  public mutating func clearIntent() {self._intent = nil}

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The mask to control which fields get updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// Optional. The resource view to apply to the returned intent.
  public var intentView: Google_Cloud_Dialogflow_V2_IntentView = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intent: Google_Cloud_Dialogflow_V2_Intent? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [Intents.DeleteIntent][google.cloud.dialogflow.v2.Intents.DeleteIntent].
public struct Google_Cloud_Dialogflow_V2_DeleteIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the intent to delete. If this intent has direct or
  /// indirect followup intents, we also delete them.
  /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to update or create intents in.
  /// Format: `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// The source of the intent batch.
  public var intentBatch: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest.OneOf_IntentBatch? = nil

  /// The URI to a Google Cloud Storage file containing intents to update or
  /// create. The file format can either be a serialized proto (of IntentBatch
  /// type) or JSON object. Note: The URI must start with "gs://".
  public var intentBatchUri: String {
    get {
      if case .intentBatchUri(let v)? = intentBatch {return v}
      return String()
    }
    set {intentBatch = .intentBatchUri(newValue)}
  }

  /// The collection of intents to update or create.
  public var intentBatchInline: Google_Cloud_Dialogflow_V2_IntentBatch {
    get {
      if case .intentBatchInline(let v)? = intentBatch {return v}
      return Google_Cloud_Dialogflow_V2_IntentBatch()
    }
    set {intentBatch = .intentBatchInline(newValue)}
  }

  /// Optional. The language used to access language-specific data.
  /// If not specified, the agent's default language is used.
  /// For more information, see
  /// [Multilingual intent and entity
  /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
  public var languageCode: String = String()

  /// Optional. The mask to control which fields get updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// Optional. The resource view to apply to the returned intent.
  public var intentView: Google_Cloud_Dialogflow_V2_IntentView = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The source of the intent batch.
  public enum OneOf_IntentBatch: Equatable {
    /// The URI to a Google Cloud Storage file containing intents to update or
    /// create. The file format can either be a serialized proto (of IntentBatch
    /// type) or JSON object. Note: The URI must start with "gs://".
    case intentBatchUri(String)
    /// The collection of intents to update or create.
    case intentBatchInline(Google_Cloud_Dialogflow_V2_IntentBatch)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest.OneOf_IntentBatch, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest.OneOf_IntentBatch) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.intentBatchUri, .intentBatchUri): return {
        guard case .intentBatchUri(let l) = lhs, case .intentBatchUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.intentBatchInline, .intentBatchInline): return {
        guard case .intentBatchInline(let l) = lhs, case .intentBatchInline(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The response message for [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents].
public struct Google_Cloud_Dialogflow_V2_BatchUpdateIntentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The collection of updated or created intents.
  public var intents: [Google_Cloud_Dialogflow_V2_Intent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Intents.BatchDeleteIntents][google.cloud.dialogflow.v2.Intents.BatchDeleteIntents].
public struct Google_Cloud_Dialogflow_V2_BatchDeleteIntentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to delete all entities types for. Format:
  /// `projects/<Project ID>/agent`.
  public var parent: String = String()

  /// Required. The collection of intents to delete. Only intent `name` must be
  /// filled in.
  public var intents: [Google_Cloud_Dialogflow_V2_Intent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// This message is a wrapper around a collection of intents.
public struct Google_Cloud_Dialogflow_V2_IntentBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A collection of intents.
  public var intents: [Google_Cloud_Dialogflow_V2_Intent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.v2"

extension Google_Cloud_Dialogflow_V2_IntentView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTENT_VIEW_UNSPECIFIED"),
    1: .same(proto: "INTENT_VIEW_FULL"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Intent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    6: .standard(proto: "webhook_state"),
    3: .same(proto: "priority"),
    4: .standard(proto: "is_fallback"),
    19: .standard(proto: "ml_disabled"),
    7: .standard(proto: "input_context_names"),
    8: .same(proto: "events"),
    9: .standard(proto: "training_phrases"),
    10: .same(proto: "action"),
    11: .standard(proto: "output_contexts"),
    12: .standard(proto: "reset_contexts"),
    13: .same(proto: "parameters"),
    14: .same(proto: "messages"),
    15: .standard(proto: "default_response_platforms"),
    16: .standard(proto: "root_followup_intent_name"),
    17: .standard(proto: "parent_followup_intent_name"),
    18: .standard(proto: "followup_intent_info"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _webhookState: Google_Cloud_Dialogflow_V2_Intent.WebhookState = .unspecified
    var _priority: Int32 = 0
    var _isFallback: Bool = false
    var _mlDisabled: Bool = false
    var _inputContextNames: [String] = []
    var _events: [String] = []
    var _trainingPhrases: [Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase] = []
    var _action: String = String()
    var _outputContexts: [Google_Cloud_Dialogflow_V2_Context] = []
    var _resetContexts: Bool = false
    var _parameters: [Google_Cloud_Dialogflow_V2_Intent.Parameter] = []
    var _messages: [Google_Cloud_Dialogflow_V2_Intent.Message] = []
    var _defaultResponsePlatforms: [Google_Cloud_Dialogflow_V2_Intent.Message.Platform] = []
    var _rootFollowupIntentName: String = String()
    var _parentFollowupIntentName: String = String()
    var _followupIntentInfo: [Google_Cloud_Dialogflow_V2_Intent.FollowupIntentInfo] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _webhookState = source._webhookState
      _priority = source._priority
      _isFallback = source._isFallback
      _mlDisabled = source._mlDisabled
      _inputContextNames = source._inputContextNames
      _events = source._events
      _trainingPhrases = source._trainingPhrases
      _action = source._action
      _outputContexts = source._outputContexts
      _resetContexts = source._resetContexts
      _parameters = source._parameters
      _messages = source._messages
      _defaultResponsePlatforms = source._defaultResponsePlatforms
      _rootFollowupIntentName = source._rootFollowupIntentName
      _parentFollowupIntentName = source._parentFollowupIntentName
      _followupIntentInfo = source._followupIntentInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._priority) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isFallback) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._webhookState) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._inputContextNames) }()
        case 8: try { try decoder.decodeRepeatedStringField(value: &_storage._events) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._trainingPhrases) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._action) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._outputContexts) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._resetContexts) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._parameters) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._messages) }()
        case 15: try { try decoder.decodeRepeatedEnumField(value: &_storage._defaultResponsePlatforms) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._rootFollowupIntentName) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._parentFollowupIntentName) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._followupIntentInfo) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._mlDisabled) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if _storage._priority != 0 {
        try visitor.visitSingularInt32Field(value: _storage._priority, fieldNumber: 3)
      }
      if _storage._isFallback != false {
        try visitor.visitSingularBoolField(value: _storage._isFallback, fieldNumber: 4)
      }
      if _storage._webhookState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._webhookState, fieldNumber: 6)
      }
      if !_storage._inputContextNames.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._inputContextNames, fieldNumber: 7)
      }
      if !_storage._events.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._events, fieldNumber: 8)
      }
      if !_storage._trainingPhrases.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._trainingPhrases, fieldNumber: 9)
      }
      if !_storage._action.isEmpty {
        try visitor.visitSingularStringField(value: _storage._action, fieldNumber: 10)
      }
      if !_storage._outputContexts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outputContexts, fieldNumber: 11)
      }
      if _storage._resetContexts != false {
        try visitor.visitSingularBoolField(value: _storage._resetContexts, fieldNumber: 12)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 13)
      }
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 14)
      }
      if !_storage._defaultResponsePlatforms.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._defaultResponsePlatforms, fieldNumber: 15)
      }
      if !_storage._rootFollowupIntentName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rootFollowupIntentName, fieldNumber: 16)
      }
      if !_storage._parentFollowupIntentName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parentFollowupIntentName, fieldNumber: 17)
      }
      if !_storage._followupIntentInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._followupIntentInfo, fieldNumber: 18)
      }
      if _storage._mlDisabled != false {
        try visitor.visitSingularBoolField(value: _storage._mlDisabled, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent, rhs: Google_Cloud_Dialogflow_V2_Intent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._webhookState != rhs_storage._webhookState {return false}
        if _storage._priority != rhs_storage._priority {return false}
        if _storage._isFallback != rhs_storage._isFallback {return false}
        if _storage._mlDisabled != rhs_storage._mlDisabled {return false}
        if _storage._inputContextNames != rhs_storage._inputContextNames {return false}
        if _storage._events != rhs_storage._events {return false}
        if _storage._trainingPhrases != rhs_storage._trainingPhrases {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._outputContexts != rhs_storage._outputContexts {return false}
        if _storage._resetContexts != rhs_storage._resetContexts {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._messages != rhs_storage._messages {return false}
        if _storage._defaultResponsePlatforms != rhs_storage._defaultResponsePlatforms {return false}
        if _storage._rootFollowupIntentName != rhs_storage._rootFollowupIntentName {return false}
        if _storage._parentFollowupIntentName != rhs_storage._parentFollowupIntentName {return false}
        if _storage._followupIntentInfo != rhs_storage._followupIntentInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.WebhookState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WEBHOOK_STATE_UNSPECIFIED"),
    1: .same(proto: "WEBHOOK_STATE_ENABLED"),
    2: .same(proto: "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.protoMessageName + ".TrainingPhrase"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "parts"),
    4: .standard(proto: "times_added_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.parts) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.timesAddedCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.parts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parts, fieldNumber: 3)
    }
    if self.timesAddedCount != 0 {
      try visitor.visitSingularInt32Field(value: self.timesAddedCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase, rhs: Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.parts != rhs.parts {return false}
    if lhs.timesAddedCount != rhs.timesAddedCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "EXAMPLE"),
    2: .same(proto: "TEMPLATE"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.Part: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.protoMessageName + ".Part"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "entity_type"),
    3: .same(proto: "alias"),
    4: .standard(proto: "user_defined"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.alias) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.userDefined) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 2)
    }
    if !self.alias.isEmpty {
      try visitor.visitSingularStringField(value: self.alias, fieldNumber: 3)
    }
    if self.userDefined != false {
      try visitor.visitSingularBoolField(value: self.userDefined, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.Part, rhs: Google_Cloud_Dialogflow_V2_Intent.TrainingPhrase.Part) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.entityType != rhs.entityType {return false}
    if lhs.alias != rhs.alias {return false}
    if lhs.userDefined != rhs.userDefined {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Parameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.protoMessageName + ".Parameter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "value"),
    4: .standard(proto: "default_value"),
    5: .standard(proto: "entity_type_display_name"),
    6: .same(proto: "mandatory"),
    7: .same(proto: "prompts"),
    8: .standard(proto: "is_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.defaultValue) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.entityTypeDisplayName) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.mandatory) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.prompts) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    if !self.defaultValue.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultValue, fieldNumber: 4)
    }
    if !self.entityTypeDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.entityTypeDisplayName, fieldNumber: 5)
    }
    if self.mandatory != false {
      try visitor.visitSingularBoolField(value: self.mandatory, fieldNumber: 6)
    }
    if !self.prompts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.prompts, fieldNumber: 7)
    }
    if self.isList != false {
      try visitor.visitSingularBoolField(value: self.isList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Parameter, rhs: Google_Cloud_Dialogflow_V2_Intent.Parameter) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.value != rhs.value {return false}
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.entityTypeDisplayName != rhs.entityTypeDisplayName {return false}
    if lhs.mandatory != rhs.mandatory {return false}
    if lhs.prompts != rhs.prompts {return false}
    if lhs.isList != rhs.isList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.protoMessageName + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "image"),
    3: .standard(proto: "quick_replies"),
    4: .same(proto: "card"),
    5: .same(proto: "payload"),
    7: .standard(proto: "simple_responses"),
    8: .standard(proto: "basic_card"),
    9: .same(proto: "suggestions"),
    10: .standard(proto: "link_out_suggestion"),
    11: .standard(proto: "list_select"),
    12: .standard(proto: "carousel_select"),
    22: .standard(proto: "browse_carousel_card"),
    23: .standard(proto: "table_card"),
    24: .standard(proto: "media_content"),
    6: .same(proto: "platform"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.Text?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .text(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .text(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.Image?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .image(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .image(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .quickReplies(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .quickReplies(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.Card?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .card(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .card(v)}
      }()
      case 5: try {
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .payload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .payload(v)}
      }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 7: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .simpleResponses(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .simpleResponses(v)}
      }()
      case 8: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .basicCard(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .basicCard(v)}
      }()
      case 9: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .suggestions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .suggestions(v)}
      }()
      case 10: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .linkOutSuggestion(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .linkOutSuggestion(v)}
      }()
      case 11: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .listSelect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .listSelect(v)}
      }()
      case 12: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .carouselSelect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .carouselSelect(v)}
      }()
      case 22: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .browseCarouselCard(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .browseCarouselCard(v)}
      }()
      case 23: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.TableCard?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .tableCard(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .tableCard(v)}
      }()
      case 24: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .mediaContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .mediaContent(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.message {
    case .text?: try {
      guard case .text(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .image?: try {
      guard case .image(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .quickReplies?: try {
      guard case .quickReplies(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .card?: try {
      guard case .card(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .payload?: try {
      guard case .payload(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    default: break
    }
    if self.platform != .unspecified {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 6)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.message {
    case .simpleResponses?: try {
      guard case .simpleResponses(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .basicCard?: try {
      guard case .basicCard(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .suggestions?: try {
      guard case .suggestions(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .linkOutSuggestion?: try {
      guard case .linkOutSuggestion(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .listSelect?: try {
      guard case .listSelect(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .carouselSelect?: try {
      guard case .carouselSelect(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .browseCarouselCard?: try {
      guard case .browseCarouselCard(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .tableCard?: try {
      guard case .tableCard(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .mediaContent?: try {
      guard case .mediaContent(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message, rhs: Google_Cloud_Dialogflow_V2_Intent.Message) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Platform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLATFORM_UNSPECIFIED"),
    1: .same(proto: "FACEBOOK"),
    2: .same(proto: "SLACK"),
    3: .same(proto: "TELEGRAM"),
    4: .same(proto: "KIK"),
    5: .same(proto: "SKYPE"),
    6: .same(proto: "LINE"),
    7: .same(proto: "VIBER"),
    8: .same(proto: "ACTIONS_ON_GOOGLE"),
    11: .same(proto: "GOOGLE_HANGOUTS"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitRepeatedStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.Text, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.Text) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_uri"),
    2: .standard(proto: "accessibility_text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.imageUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accessibilityText) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.imageUri, fieldNumber: 1)
    }
    if !self.accessibilityText.isEmpty {
      try visitor.visitSingularStringField(value: self.accessibilityText, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.Image, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.Image) -> Bool {
    if lhs.imageUri != rhs.imageUri {return false}
    if lhs.accessibilityText != rhs.accessibilityText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".QuickReplies"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "quick_replies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.quickReplies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.quickReplies.isEmpty {
      try visitor.visitRepeatedStringField(value: self.quickReplies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.QuickReplies) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.quickReplies != rhs.quickReplies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Card: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".Card"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "subtitle"),
    3: .standard(proto: "image_uri"),
    4: .same(proto: "buttons"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subtitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageUri) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.buttons) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 2)
    }
    if !self.imageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.imageUri, fieldNumber: 3)
    }
    if !self.buttons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buttons, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.Card, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.Card) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.subtitle != rhs.subtitle {return false}
    if lhs.imageUri != rhs.imageUri {return false}
    if lhs.buttons != rhs.buttons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Card.Button: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.Card.protoMessageName + ".Button"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "postback"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.postback) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.postback.isEmpty {
      try visitor.visitSingularStringField(value: self.postback, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.Card.Button, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.Card.Button) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.postback != rhs.postback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".SimpleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_to_speech"),
    2: .same(proto: "ssml"),
    3: .standard(proto: "display_text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.textToSpeech) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ssml) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayText) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.textToSpeech.isEmpty {
      try visitor.visitSingularStringField(value: self.textToSpeech, fieldNumber: 1)
    }
    if !self.ssml.isEmpty {
      try visitor.visitSingularStringField(value: self.ssml, fieldNumber: 2)
    }
    if !self.displayText.isEmpty {
      try visitor.visitSingularStringField(value: self.displayText, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponse, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponse) -> Bool {
    if lhs.textToSpeech != rhs.textToSpeech {return false}
    if lhs.ssml != rhs.ssml {return false}
    if lhs.displayText != rhs.displayText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".SimpleResponses"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "simple_responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.simpleResponses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.simpleResponses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.simpleResponses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.SimpleResponses) -> Bool {
    if lhs.simpleResponses != rhs.simpleResponses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".BasicCard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "subtitle"),
    3: .standard(proto: "formatted_text"),
    4: .same(proto: "image"),
    5: .same(proto: "buttons"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subtitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.formattedText) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.buttons) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 2)
    }
    if !self.formattedText.isEmpty {
      try visitor.visitSingularStringField(value: self.formattedText, fieldNumber: 3)
    }
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.buttons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buttons, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.subtitle != rhs.subtitle {return false}
    if lhs.formattedText != rhs.formattedText {return false}
    if lhs._image != rhs._image {return false}
    if lhs.buttons != rhs.buttons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.protoMessageName + ".Button"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "open_uri_action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._openUriAction) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if let v = self._openUriAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._openUriAction != rhs._openUriAction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.OpenUriAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.protoMessageName + ".OpenUriAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.OpenUriAction, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.BasicCard.Button.OpenUriAction) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Suggestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".Suggestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.Suggestion, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.Suggestion) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".Suggestions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "suggestions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.suggestions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.suggestions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.Suggestions) -> Bool {
    if lhs.suggestions != rhs.suggestions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".LinkOutSuggestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "destination_name"),
    2: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.destinationName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.destinationName.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationName, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.LinkOutSuggestion) -> Bool {
    if lhs.destinationName != rhs.destinationName {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".ListSelect"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "items"),
    3: .same(proto: "subtitle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subtitle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.items != rhs.items {return false}
    if lhs.subtitle != rhs.subtitle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect.Item, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.ListSelect.Item) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._image != rhs._image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".CarouselSelect"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect.Item, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.CarouselSelect.Item) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._image != rhs._image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".SelectItemInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "synonyms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.synonyms) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.synonyms.isEmpty {
      try visitor.visitRepeatedStringField(value: self.synonyms, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.SelectItemInfo) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.synonyms != rhs.synonyms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".MediaContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_type"),
    2: .standard(proto: "media_objects"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mediaType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.mediaObjects) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mediaType != .unspecified {
      try visitor.visitSingularEnumField(value: self.mediaType, fieldNumber: 1)
    }
    if !self.mediaObjects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mediaObjects, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent) -> Bool {
    if lhs.mediaType != rhs.mediaType {return false}
    if lhs.mediaObjects != rhs.mediaObjects {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESPONSE_MEDIA_TYPE_UNSPECIFIED"),
    1: .same(proto: "AUDIO"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.protoMessageName + ".ResponseMediaObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "large_image"),
    4: .same(proto: "icon"),
    5: .standard(proto: "content_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.Image?
        if let current = self.image {
          try decoder.handleConflictingOneOf()
          if case .largeImage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.image = .largeImage(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Dialogflow_V2_Intent.Message.Image?
        if let current = self.image {
          try decoder.handleConflictingOneOf()
          if case .icon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.image = .icon(v)}
      }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.contentURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.image {
    case .largeImage?: try {
      guard case .largeImage(let v)? = self.image else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .icon?: try {
      guard case .icon(let v)? = self.image else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if !self.contentURL.isEmpty {
      try visitor.visitSingularStringField(value: self.contentURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.MediaContent.ResponseMediaObject) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.image != rhs.image {return false}
    if lhs.contentURL != rhs.contentURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".BrowseCarouselCard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .standard(proto: "image_display_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.imageDisplayOptions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if self.imageDisplayOptions != .unspecified {
      try visitor.visitSingularEnumField(value: self.imageDisplayOptions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.imageDisplayOptions != rhs.imageDisplayOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.ImageDisplayOptions: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMAGE_DISPLAY_OPTIONS_UNSPECIFIED"),
    1: .same(proto: "GRAY"),
    2: .same(proto: "WHITE"),
    3: .same(proto: "CROPPED"),
    4: .same(proto: "BLURRED_BACKGROUND"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.protoMessageName + ".BrowseCarouselCardItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "open_uri_action"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "image"),
    5: .same(proto: "footer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._openUriAction) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.footer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._openUriAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.footer.isEmpty {
      try visitor.visitSingularStringField(value: self.footer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem) -> Bool {
    if lhs._openUriAction != rhs._openUriAction {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._image != rhs._image {return false}
    if lhs.footer != rhs.footer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.protoMessageName + ".OpenUrlAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    3: .standard(proto: "url_type_hint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.urlTypeHint) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.urlTypeHint != .unspecified {
      try visitor.visitSingularEnumField(value: self.urlTypeHint, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.urlTypeHint != rhs.urlTypeHint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "URL_TYPE_HINT_UNSPECIFIED"),
    1: .same(proto: "AMP_ACTION"),
    2: .same(proto: "AMP_CONTENT"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.TableCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".TableCard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "subtitle"),
    3: .same(proto: "image"),
    4: .standard(proto: "column_properties"),
    5: .same(proto: "rows"),
    6: .same(proto: "buttons"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subtitle) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.columnProperties) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.buttons) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 2)
    }
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.columnProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columnProperties, fieldNumber: 4)
    }
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 5)
    }
    if !self.buttons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buttons, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.TableCard, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.TableCard) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.subtitle != rhs.subtitle {return false}
    if lhs._image != rhs._image {return false}
    if lhs.columnProperties != rhs.columnProperties {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.buttons != rhs.buttons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".ColumnProperties"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "horizontal_alignment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.header) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.horizontalAlignment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.header.isEmpty {
      try visitor.visitSingularStringField(value: self.header, fieldNumber: 1)
    }
    if self.horizontalAlignment != .unspecified {
      try visitor.visitSingularEnumField(value: self.horizontalAlignment, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties) -> Bool {
    if lhs.header != rhs.header {return false}
    if lhs.horizontalAlignment != rhs.horizontalAlignment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.ColumnProperties.HorizontalAlignment: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"),
    1: .same(proto: "LEADING"),
    2: .same(proto: "CENTER"),
    3: .same(proto: "TRAILING"),
  ]
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.TableCardRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".TableCardRow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cells"),
    2: .standard(proto: "divider_after"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cells) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.dividerAfter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cells.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cells, fieldNumber: 1)
    }
    if self.dividerAfter != false {
      try visitor.visitSingularBoolField(value: self.dividerAfter, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.TableCardRow, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.TableCardRow) -> Bool {
    if lhs.cells != rhs.cells {return false}
    if lhs.dividerAfter != rhs.dividerAfter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.Message.TableCardCell: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.Message.protoMessageName + ".TableCardCell"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.Message.TableCardCell, rhs: Google_Cloud_Dialogflow_V2_Intent.Message.TableCardCell) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_Intent.FollowupIntentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_V2_Intent.protoMessageName + ".FollowupIntentInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "followup_intent_name"),
    2: .standard(proto: "parent_followup_intent_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.followupIntentName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parentFollowupIntentName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.followupIntentName.isEmpty {
      try visitor.visitSingularStringField(value: self.followupIntentName, fieldNumber: 1)
    }
    if !self.parentFollowupIntentName.isEmpty {
      try visitor.visitSingularStringField(value: self.parentFollowupIntentName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_Intent.FollowupIntentInfo, rhs: Google_Cloud_Dialogflow_V2_Intent.FollowupIntentInfo) -> Bool {
    if lhs.followupIntentName != rhs.followupIntentName {return false}
    if lhs.parentFollowupIntentName != rhs.parentFollowupIntentName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ListIntentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListIntentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "intent_view"),
    4: .standard(proto: "page_size"),
    5: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.intentView) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.intentView != .unspecified {
      try visitor.visitSingularEnumField(value: self.intentView, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ListIntentsRequest, rhs: Google_Cloud_Dialogflow_V2_ListIntentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.intentView != rhs.intentView {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_ListIntentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListIntentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intents"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.intents) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.intents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.intents, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_ListIntentsResponse, rhs: Google_Cloud_Dialogflow_V2_ListIntentsResponse) -> Bool {
    if lhs.intents != rhs.intents {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_GetIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "intent_view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.intentView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.intentView != .unspecified {
      try visitor.visitSingularEnumField(value: self.intentView, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_GetIntentRequest, rhs: Google_Cloud_Dialogflow_V2_GetIntentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.intentView != rhs.intentView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_CreateIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "intent"),
    3: .standard(proto: "language_code"),
    4: .standard(proto: "intent_view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._intent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.intentView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._intent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    if self.intentView != .unspecified {
      try visitor.visitSingularEnumField(value: self.intentView, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_CreateIntentRequest, rhs: Google_Cloud_Dialogflow_V2_CreateIntentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._intent != rhs._intent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.intentView != rhs.intentView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_UpdateIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intent"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "update_mask"),
    4: .standard(proto: "intent_view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.intentView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._intent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.intentView != .unspecified {
      try visitor.visitSingularEnumField(value: self.intentView, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_UpdateIntentRequest, rhs: Google_Cloud_Dialogflow_V2_UpdateIntentRequest) -> Bool {
    if lhs._intent != rhs._intent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.intentView != rhs.intentView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_DeleteIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_DeleteIntentRequest, rhs: Google_Cloud_Dialogflow_V2_DeleteIntentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchUpdateIntentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "intent_batch_uri"),
    3: .standard(proto: "intent_batch_inline"),
    4: .standard(proto: "language_code"),
    5: .standard(proto: "update_mask"),
    6: .standard(proto: "intent_view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try {
        if self.intentBatch != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.intentBatch = .intentBatchUri(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Dialogflow_V2_IntentBatch?
        if let current = self.intentBatch {
          try decoder.handleConflictingOneOf()
          if case .intentBatchInline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.intentBatch = .intentBatchInline(v)}
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.intentView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.intentBatch {
    case .intentBatchUri?: try {
      guard case .intentBatchUri(let v)? = self.intentBatch else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .intentBatchInline?: try {
      guard case .intentBatchInline(let v)? = self.intentBatch else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 4)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.intentView != .unspecified {
      try visitor.visitSingularEnumField(value: self.intentView, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.intentBatch != rhs.intentBatch {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.intentView != rhs.intentView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchUpdateIntentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchUpdateIntentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.intents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.intents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.intents, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsResponse, rhs: Google_Cloud_Dialogflow_V2_BatchUpdateIntentsResponse) -> Bool {
    if lhs.intents != rhs.intents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_BatchDeleteIntentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchDeleteIntentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "intents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.intents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.intents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.intents, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_BatchDeleteIntentsRequest, rhs: Google_Cloud_Dialogflow_V2_BatchDeleteIntentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.intents != rhs.intents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_V2_IntentBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IntentBatch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.intents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.intents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.intents, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_V2_IntentBatch, rhs: Google_Cloud_Dialogflow_V2_IntentBatch) -> Bool {
    if lhs.intents != rhs.intents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
