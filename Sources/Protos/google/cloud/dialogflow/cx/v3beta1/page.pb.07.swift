// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3beta1/page.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Dialogflow CX conversation (session) can be described and visualized as a
/// state machine. The states of a CX session are represented by pages.
///
/// For each flow, you define many pages, where your combined pages can handle a
/// complete conversation on the topics the flow is designed for. At any given
/// moment, exactly one page is the current page, the current page is considered
/// active, and the flow associated with that page is considered active. Every
/// flow has a special start page. When a flow initially becomes active, the
/// start page page becomes the current page. For each conversational turn, the
/// current page will either stay the same or transition to another page.
///
/// You configure each page to collect information from the end-user that is
/// relevant for the conversational state represented by the page.
///
/// For more information, see the
/// [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
public struct Google_Cloud_Dialogflow_Cx_V3beta1_Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the page.
  /// Required for the [Pages.UpdatePage][google.cloud.dialogflow.cx.v3beta1.Pages.UpdatePage] method. [Pages.CreatePage][google.cloud.dialogflow.cx.v3beta1.Pages.CreatePage]
  /// populates the name automatically.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/pages/<Page ID>`.
  public var name: String = String()

  /// Required. The human-readable name of the page, unique within the agent.
  public var displayName: String = String()

  /// The fulfillment to call when the session is entering the page.
  public var entryFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment {
    get {return _entryFulfillment ?? Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment()}
    set {_entryFulfillment = newValue}
  }
  /// Returns true if `entryFulfillment` has been explicitly set.
  public var hasEntryFulfillment: Bool {return self._entryFulfillment != nil}
  /// Clears the value of `entryFulfillment`. Subsequent reads from it will return its default value.
  public mutating func clearEntryFulfillment() {self._entryFulfillment = nil}

  /// The form associated with the page, used for collecting parameters
  /// relevant to the page.
  public var form: Google_Cloud_Dialogflow_Cx_V3beta1_Form {
    get {return _form ?? Google_Cloud_Dialogflow_Cx_V3beta1_Form()}
    set {_form = newValue}
  }
  /// Returns true if `form` has been explicitly set.
  public var hasForm: Bool {return self._form != nil}
  /// Clears the value of `form`. Subsequent reads from it will return its default value.
  public mutating func clearForm() {self._form = nil}

  /// Ordered list of [`TransitionRouteGroups`][google.cloud.dialogflow.cx.v3beta1.TransitionRouteGroup] associated
  /// with the page. Transition route groups must be unique within a page.
  ///
  /// *   If multiple transition routes within a page scope refer to the same
  ///     intent, then the precedence order is: page's transition route -> page's
  ///     transition route group -> flow's transition routes.
  ///
  /// *   If multiple transition route groups within a page contain the same
  ///     intent, then the first group in the ordered list takes precedence.
  ///
  /// Format:`projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>`.
  public var transitionRouteGroups: [String] = []

  /// A list of transitions for the transition rules of this page.
  /// They route the conversation to another page in the same flow, or another
  /// flow.
  ///
  /// When we are in a certain page, the TransitionRoutes are evalauted in the
  /// following order:
  ///
  /// *   TransitionRoutes defined in the page with intent specified.
  /// *   TransitionRoutes defined in the
  /// [transition route groups][google.cloud.dialogflow.cx.v3beta1.Page.transition_route_groups].
  /// *   TransitionRoutes defined in flow with intent specified.
  /// *   TransitionRoutes defined in the page with only condition specified.
  public var transitionRoutes: [Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute] = []

  /// Handlers associated with the page to handle events such as webhook errors,
  /// no match or no input.
  public var eventHandlers: [Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _entryFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment? = nil
  fileprivate var _form: Google_Cloud_Dialogflow_Cx_V3beta1_Form? = nil
}

/// A form is a data model that groups related parameters that can be collected
/// from the user. The process in which the agent prompts the user and collects
/// parameter values from the user is called form filling. A form can be added to
/// a [page][google.cloud.dialogflow.cx.v3beta1.Page]. When form filling is done, the filled parameters will be
/// written to the [session][google.cloud.dialogflow.cx.v3beta1.SessionInfo.parameters].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_Form {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Parameters to collect from the user.
  public var parameters: [Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents a form parameter.
  public struct Parameter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The human-readable name of the parameter, unique within the
    /// form.
    public var displayName: String = String()

    /// Indicates whether the parameter is required. Optional parameters will not
    /// trigger prompts; however, they are filled if the user specifies them.
    /// Required parameters must be filled before form filling concludes.
    public var required: Bool = false

    /// Required. The entity type of the parameter.
    /// Format: `projects/-/locations/-/agents/-/entityTypes/<System Entity Type
    /// ID>` for system entity types (for example,
    /// `projects/-/locations/-/agents/-/entityTypes/sys.date`), or
    /// `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/entityTypes/<Entity Type ID>` for developer entity types.
    public var entityType: String = String()

    /// Indicates whether the parameter represents a list of values.
    public var isList: Bool = false

    /// Required. Defines fill behavior for the parameter.
    public var fillBehavior: Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.FillBehavior {
      get {return _fillBehavior ?? Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.FillBehavior()}
      set {_fillBehavior = newValue}
    }
    /// Returns true if `fillBehavior` has been explicitly set.
    public var hasFillBehavior: Bool {return self._fillBehavior != nil}
    /// Clears the value of `fillBehavior`. Subsequent reads from it will return its default value.
    public mutating func clearFillBehavior() {self._fillBehavior = nil}

    /// The default value of an optional parameter. If the parameter is required,
    /// the default value will be ignored.
    public var defaultValue: SwiftProtobuf.Google_Protobuf_Value {
      get {return _defaultValue ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_defaultValue = newValue}
    }
    /// Returns true if `defaultValue` has been explicitly set.
    public var hasDefaultValue: Bool {return self._defaultValue != nil}
    /// Clears the value of `defaultValue`. Subsequent reads from it will return its default value.
    public mutating func clearDefaultValue() {self._defaultValue = nil}

    /// Indicates whether the parameter content is logged in text and audio. If
    /// it is set to true, the parameter content will be replaced to parameter
    /// name in both request and response. The default value is false.
    public var redact: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Configuration for how the filling of a parameter should be handled.
    public struct FillBehavior {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The fulfillment to provide the initial prompt that the agent
      /// can present to the user in order to fill the parameter.
      public var initialPromptFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment {
        get {return _initialPromptFulfillment ?? Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment()}
        set {_initialPromptFulfillment = newValue}
      }
      /// Returns true if `initialPromptFulfillment` has been explicitly set.
      public var hasInitialPromptFulfillment: Bool {return self._initialPromptFulfillment != nil}
      /// Clears the value of `initialPromptFulfillment`. Subsequent reads from it will return its default value.
      public mutating func clearInitialPromptFulfillment() {self._initialPromptFulfillment = nil}

      /// The handlers for parameter-level events, used to provide reprompt for
      /// the parameter or transition to a different page/flow. The supported
      /// events are:
      /// *   `sys.no-match-<N>`, where N can be from 1 to 6
      /// *   `sys.no-match-default`
      /// *   `sys.no-input-<N>`, where N can be from 1 to 6
      /// *   `sys.no-input-default`
      /// *   `sys.invalid-parameter`
      ///
      /// `initial_prompt_fulfillment` provides the first prompt for the
      /// parameter.
      ///
      /// If the user's response does not fill the parameter, a
      /// no-match/no-input event will be triggered, and the fulfillment
      /// associated with the `sys.no-match-1`/`sys.no-input-1` handler (if
      /// defined) will be called to provide a prompt. The
      /// `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to
      /// the next no-match/no-input event, and so on.
      ///
      /// A `sys.no-match-default` or `sys.no-input-default` handler will be used
      /// to handle all following no-match/no-input events after all numbered
      /// no-match/no-input handlers for the parameter are consumed.
      ///
      /// A `sys.invalid-parameter` handler can be defined to handle the case
      /// where the parameter values have been `invalidated` by webhook. For
      /// example, if the user's response fill the parameter, however the
      /// parameter was invalidated by webhook, the fulfillment associated with
      /// the `sys.invalid-parameter` handler (if defined) will be called to
      /// provide a prompt.
      ///
      /// If the event handler for the corresponding event can't be found on the
      /// parameter, `initial_prompt_fulfillment` will be re-prompted.
      public var repromptEventHandlers: [Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _initialPromptFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment? = nil
    }

    public init() {}

    fileprivate var _fillBehavior: Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.FillBehavior? = nil
    fileprivate var _defaultValue: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  public init() {}
}

/// An event handler specifies an [event][google.cloud.dialogflow.cx.v3beta1.EventHandler.event] that can be handled
/// during a session. When the specified event happens, the following actions are
/// taken in order:
///
/// *   If there is a
/// [`trigger_fulfillment`][google.cloud.dialogflow.cx.v3beta1.EventHandler.trigger_fulfillment] associated with
/// the event, it will be called.
/// *   If there is a [`target_page`][google.cloud.dialogflow.cx.v3beta1.EventHandler.target_page] associated
/// with the event, the session will transition into the specified page.
/// *   If there is a [`target_flow`][google.cloud.dialogflow.cx.v3beta1.EventHandler.target_flow] associated
/// with the event, the session will transition into the specified flow.
public struct Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The unique identifier of this event handler.
  public var name: String = String()

  /// Required. The name of the event to handle.
  public var event: String = String()

  /// The fulfillment to call when the event occurs.
  /// Handling webhook errors with a fulfillment enabled with webhook could
  /// cause infinite loop. It is invalid to specify such fulfillment for a
  /// handler handling webhooks.
  public var triggerFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment {
    get {return _triggerFulfillment ?? Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment()}
    set {_triggerFulfillment = newValue}
  }
  /// Returns true if `triggerFulfillment` has been explicitly set.
  public var hasTriggerFulfillment: Bool {return self._triggerFulfillment != nil}
  /// Clears the value of `triggerFulfillment`. Subsequent reads from it will return its default value.
  public mutating func clearTriggerFulfillment() {self._triggerFulfillment = nil}

  /// The target to transition to, either a page in the same host flow (the flow
  /// that owns this [TransitionRoute][google.cloud.dialogflow.cx.v3beta1.TransitionRoute]), or another flow in the same agent.
  public var target: Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler.OneOf_Target? = nil

  /// The target page to transition to.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/pages/<Page ID>`.
  public var targetPage: String {
    get {
      if case .targetPage(let v)? = target {return v}
      return String()
    }
    set {target = .targetPage(newValue)}
  }

  /// The target flow to transition to.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>`.
  public var targetFlow: String {
    get {
      if case .targetFlow(let v)? = target {return v}
      return String()
    }
    set {target = .targetFlow(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The target to transition to, either a page in the same host flow (the flow
  /// that owns this [TransitionRoute][google.cloud.dialogflow.cx.v3beta1.TransitionRoute]), or another flow in the same agent.
  public enum OneOf_Target: Equatable {
    /// The target page to transition to.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>/pages/<Page ID>`.
    case targetPage(String)
    /// The target flow to transition to.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>`.
    case targetFlow(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler.OneOf_Target, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler.OneOf_Target) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.targetPage, .targetPage): return {
        guard case .targetPage(let l) = lhs, case .targetPage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.targetFlow, .targetFlow): return {
        guard case .targetFlow(let l) = lhs, case .targetFlow(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _triggerFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment? = nil
}

/// A transition route specifies a [intent][google.cloud.dialogflow.cx.v3beta1.Intent] that can be matched and/or a
/// data condition that can be evaluated during a session. When a specified
/// transition is matched, the following actions are taken in order:
///
/// *   If there is a
/// [`trigger_fulfillment`][google.cloud.dialogflow.cx.v3beta1.TransitionRoute.trigger_fulfillment] associated with
/// the transition, it will be called.
/// *   If there is a [`target_page`][google.cloud.dialogflow.cx.v3beta1.TransitionRoute.target_page] associated
/// with the transition, the session will transition into the specified page.
/// *   If there is a [`target_flow`][google.cloud.dialogflow.cx.v3beta1.TransitionRoute.target_flow] associated
/// with the transition, the session will transition into the specified flow.
public struct Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The unique identifier of this transition route.
  public var name: String = String()

  /// The unique identifier of an [Intent][google.cloud.dialogflow.cx.v3beta1.Intent].
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/intents/<Intent ID>`.
  /// Indicates that the transition can only happen when the given intent is
  /// matched.
  /// At least one of `intent` or `condition` must be specified. When both
  /// `intent` and `condition` are specified, the transition can only happen
  /// when both are fulfilled.
  public var intent: String = String()

  /// The condition to evaluate against [form parameters][google.cloud.dialogflow.cx.v3beta1.Form.parameters] or
  /// [session parameters][google.cloud.dialogflow.cx.v3beta1.SessionInfo.parameters].
  ///
  /// See the [conditions
  /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
  /// At least one of `intent` or `condition` must be specified. When both
  /// `intent` and `condition` are specified, the transition can only happen
  /// when both are fulfilled.
  public var condition: String = String()

  /// The fulfillment to call when the condition is satisfied. At least one of
  /// `trigger_fulfillment` and `target` must be specified. When both are
  /// defined, `trigger_fulfillment` is executed first.
  public var triggerFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment {
    get {return _triggerFulfillment ?? Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment()}
    set {_triggerFulfillment = newValue}
  }
  /// Returns true if `triggerFulfillment` has been explicitly set.
  public var hasTriggerFulfillment: Bool {return self._triggerFulfillment != nil}
  /// Clears the value of `triggerFulfillment`. Subsequent reads from it will return its default value.
  public mutating func clearTriggerFulfillment() {self._triggerFulfillment = nil}

  /// The target to transition to, either a page in the same host flow (the flow
  /// that owns this [TransitionRoute][google.cloud.dialogflow.cx.v3beta1.TransitionRoute]), or another flow in the same agent.
  public var target: Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute.OneOf_Target? = nil

  /// The target page to transition to.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/pages/<Page ID>`.
  public var targetPage: String {
    get {
      if case .targetPage(let v)? = target {return v}
      return String()
    }
    set {target = .targetPage(newValue)}
  }

  /// The target flow to transition to.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>`.
  public var targetFlow: String {
    get {
      if case .targetFlow(let v)? = target {return v}
      return String()
    }
    set {target = .targetFlow(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The target to transition to, either a page in the same host flow (the flow
  /// that owns this [TransitionRoute][google.cloud.dialogflow.cx.v3beta1.TransitionRoute]), or another flow in the same agent.
  public enum OneOf_Target: Equatable {
    /// The target page to transition to.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>/pages/<Page ID>`.
    case targetPage(String)
    /// The target flow to transition to.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>`.
    case targetFlow(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute.OneOf_Target, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute.OneOf_Target) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.targetPage, .targetPage): return {
        guard case .targetPage(let l) = lhs, case .targetPage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.targetFlow, .targetFlow): return {
        guard case .targetFlow(let l) = lhs, case .targetFlow(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _triggerFulfillment: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment? = nil
}

/// The request message for [Pages.ListPages][google.cloud.dialogflow.cx.v3beta1.Pages.ListPages].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The flow to list all pages for.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>`.
  public var parent: String = String()

  /// The language to list pages for. The following fields are language
  /// dependent:
  ///
  /// *  `Page.entry_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
  /// *  `Page.transition_routes.trigger_fulfillment.messages`
  /// *
  /// `Page.transition_route_groups.transition_routes.trigger_fulfillment.messages`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  /// The maximum number of items to return in a single page. By default 100 and
  /// at most 1000.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Pages.ListPages][google.cloud.dialogflow.cx.v3beta1.Pages.ListPages].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of pages. There will be a maximum number of items returned based
  /// on the page_size field in the request.
  public var pages: [Google_Cloud_Dialogflow_Cx_V3beta1_Page] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Pages.GetPage][google.cloud.dialogflow.cx.v3beta1.Pages.GetPage].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_GetPageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the page.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/pages/<Page ID>`.
  public var name: String = String()

  /// The language to retrieve the page for. The following fields are language
  /// dependent:
  ///
  /// *  `Page.entry_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
  /// *  `Page.transition_routes.trigger_fulfillment.messages`
  /// *
  /// `Page.transition_route_groups.transition_routes.trigger_fulfillment.messages`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Pages.CreatePage][google.cloud.dialogflow.cx.v3beta1.Pages.CreatePage].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_CreatePageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The flow to create a page for.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>`.
  public var parent: String = String()

  /// Required. The page to create.
  public var page: Google_Cloud_Dialogflow_Cx_V3beta1_Page {
    get {return _page ?? Google_Cloud_Dialogflow_Cx_V3beta1_Page()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {self._page = nil}

  /// The language of the following fields in `page`:
  ///
  /// *  `Page.entry_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
  /// *  `Page.transition_routes.trigger_fulfillment.messages`
  /// *
  /// `Page.transition_route_groups.transition_routes.trigger_fulfillment.messages`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _page: Google_Cloud_Dialogflow_Cx_V3beta1_Page? = nil
}

/// The request message for [Pages.UpdatePage][google.cloud.dialogflow.cx.v3beta1.Pages.UpdatePage].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_UpdatePageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The page to update.
  public var page: Google_Cloud_Dialogflow_Cx_V3beta1_Page {
    get {return _page ?? Google_Cloud_Dialogflow_Cx_V3beta1_Page()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {self._page = nil}

  /// The language of the following fields in `page`:
  ///
  /// *  `Page.entry_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
  /// *  `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
  /// *  `Page.transition_routes.trigger_fulfillment.messages`
  /// *
  /// `Page.transition_route_groups.transition_routes.trigger_fulfillment.messages`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  /// The mask to control which fields get updated. If the mask is not present,
  /// all fields will be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _page: Google_Cloud_Dialogflow_Cx_V3beta1_Page? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [Pages.DeletePage][google.cloud.dialogflow.cx.v3beta1.Pages.DeletePage].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_DeletePageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the page to delete.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/Flows/<flow ID>/pages/<Page ID>`.
  public var name: String = String()

  /// This field has no effect for pages with no incoming transitions.
  /// For pages with incoming transitions:
  ///
  /// *  If `force` is set to false, an error will be returned with message
  ///    indicating the incoming transitions.
  /// *  If `force` is set to true, Dialogflow will remove the page, as well as
  ///    any transitions to the page (i.e. [Target
  ///    page][EventHandler.target_page] in event handlers or [Target
  ///    page][TransitionRoute.target_page] in transition routes that point to
  ///    this page will be cleared).
  public var force: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.cx.v3beta1"

extension Google_Cloud_Dialogflow_Cx_V3beta1_Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    7: .standard(proto: "entry_fulfillment"),
    4: .same(proto: "form"),
    11: .standard(proto: "transition_route_groups"),
    9: .standard(proto: "transition_routes"),
    10: .standard(proto: "event_handlers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._form) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._entryFulfillment) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.transitionRoutes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.eventHandlers) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.transitionRouteGroups) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if let v = self._form {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._entryFulfillment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.transitionRoutes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transitionRoutes, fieldNumber: 9)
    }
    if !self.eventHandlers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eventHandlers, fieldNumber: 10)
    }
    if !self.transitionRouteGroups.isEmpty {
      try visitor.visitRepeatedStringField(value: self.transitionRouteGroups, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Page, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Page) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._entryFulfillment != rhs._entryFulfillment {return false}
    if lhs._form != rhs._form {return false}
    if lhs.transitionRouteGroups != rhs.transitionRouteGroups {return false}
    if lhs.transitionRoutes != rhs.transitionRoutes {return false}
    if lhs.eventHandlers != rhs.eventHandlers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Form: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Form"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Form, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Form) -> Bool {
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3beta1_Form.protoMessageName + ".Parameter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "required"),
    3: .standard(proto: "entity_type"),
    4: .standard(proto: "is_list"),
    7: .standard(proto: "fill_behavior"),
    9: .standard(proto: "default_value"),
    11: .same(proto: "redact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.required) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isList) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._fillBehavior) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._defaultValue) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.redact) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if self.required != false {
      try visitor.visitSingularBoolField(value: self.required, fieldNumber: 2)
    }
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 3)
    }
    if self.isList != false {
      try visitor.visitSingularBoolField(value: self.isList, fieldNumber: 4)
    }
    if let v = self._fillBehavior {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._defaultValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if self.redact != false {
      try visitor.visitSingularBoolField(value: self.redact, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.required != rhs.required {return false}
    if lhs.entityType != rhs.entityType {return false}
    if lhs.isList != rhs.isList {return false}
    if lhs._fillBehavior != rhs._fillBehavior {return false}
    if lhs._defaultValue != rhs._defaultValue {return false}
    if lhs.redact != rhs.redact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.FillBehavior: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.protoMessageName + ".FillBehavior"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "initial_prompt_fulfillment"),
    5: .standard(proto: "reprompt_event_handlers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._initialPromptFulfillment) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.repromptEventHandlers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._initialPromptFulfillment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.repromptEventHandlers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.repromptEventHandlers, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.FillBehavior, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Form.Parameter.FillBehavior) -> Bool {
    if lhs._initialPromptFulfillment != rhs._initialPromptFulfillment {return false}
    if lhs.repromptEventHandlers != rhs.repromptEventHandlers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventHandler"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "name"),
    4: .same(proto: "event"),
    5: .standard(proto: "trigger_fulfillment"),
    2: .standard(proto: "target_page"),
    3: .standard(proto: "target_flow"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try {
        if self.target != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.target = .targetPage(v)}
      }()
      case 3: try {
        if self.target != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.target = .targetFlow(v)}
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._triggerFulfillment) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.target {
    case .targetPage?: try {
      guard case .targetPage(let v)? = self.target else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .targetFlow?: try {
      guard case .targetFlow(let v)? = self.target else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 4)
    }
    if let v = self._triggerFulfillment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_EventHandler) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.event != rhs.event {return false}
    if lhs._triggerFulfillment != rhs._triggerFulfillment {return false}
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransitionRoute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "name"),
    1: .same(proto: "intent"),
    2: .same(proto: "condition"),
    3: .standard(proto: "trigger_fulfillment"),
    4: .standard(proto: "target_page"),
    5: .standard(proto: "target_flow"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.intent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.condition) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._triggerFulfillment) }()
      case 4: try {
        if self.target != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.target = .targetPage(v)}
      }()
      case 5: try {
        if self.target != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.target = .targetFlow(v)}
      }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.intent.isEmpty {
      try visitor.visitSingularStringField(value: self.intent, fieldNumber: 1)
    }
    if !self.condition.isEmpty {
      try visitor.visitSingularStringField(value: self.condition, fieldNumber: 2)
    }
    if let v = self._triggerFulfillment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.target {
    case .targetPage?: try {
      guard case .targetPage(let v)? = self.target else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .targetFlow?: try {
      guard case .targetFlow(let v)? = self.target else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_TransitionRoute) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.intent != rhs.intent {return false}
    if lhs.condition != rhs.condition {return false}
    if lhs._triggerFulfillment != rhs._triggerFulfillment {return false}
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pages"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pages) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesResponse, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListPagesResponse) -> Bool {
    if lhs.pages != rhs.pages {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_GetPageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_GetPageRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_GetPageRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_CreatePageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatePageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "page"),
    3: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._page) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_CreatePageRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_CreatePageRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._page != rhs._page {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_UpdatePageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdatePageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._page) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_UpdatePageRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_UpdatePageRequest) -> Bool {
    if lhs._page != rhs._page {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_DeletePageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "force"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.force) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.force != false {
      try visitor.visitSingularBoolField(value: self.force, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_DeletePageRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_DeletePageRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.force != rhs.force {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
