// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3beta1/agent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Settings related to speech recognition.
public struct Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether to use speech adaptation for speech recognition.
  public var enableSpeechAdaptation: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Agents are best described as Natural Language Understanding (NLU) modules
/// that transform user requests into actionable data. You can include agents
/// in your app, product, or service to determine user intent and respond to the
/// user in a natural way.
///
/// After you create an agent, you can add [Intents][google.cloud.dialogflow.cx.v3beta1.Intent],
/// [Entity Types][google.cloud.dialogflow.cx.v3beta1.EntityType], [Flows][google.cloud.dialogflow.cx.v3beta1.Flow], [Fulfillments][google.cloud.dialogflow.cx.v3beta1.Fulfillment],
/// [Webhooks][google.cloud.dialogflow.cx.v3beta1.Webhook], and so on to manage the conversation flows..
public struct Google_Cloud_Dialogflow_Cx_V3beta1_Agent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the agent.
  /// Required for the [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3beta1.Agents.UpdateAgent] method. [Agents.CreateAgent][google.cloud.dialogflow.cx.v3beta1.Agents.CreateAgent]
  /// populates the name automatically.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var name: String = String()

  /// Required. The human-readable name of the agent, unique within the location.
  public var displayName: String = String()

  /// Immutable. The default language of the agent as a language tag.
  /// See [Language
  /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
  /// for a list of the currently supported language codes.
  /// This field cannot be set by the [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3beta1.Agents.UpdateAgent] method.
  public var defaultLanguageCode: String = String()

  /// Required. The time zone of the agent from the [time zone
  /// database](https://www.iana.org/time-zones), e.g., America/New_York,
  /// Europe/Paris.
  public var timeZone: String = String()

  /// The description of the agent. The maximum length is 500 characters. If
  /// exceeded, the request is rejected.
  public var description_p: String = String()

  /// The URI of the agent's avatar. Avatars are used throughout the Dialogflow
  /// console and in the self-hosted [Web
  /// Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo)
  /// integration.
  public var avatarUri: String = String()

  /// Speech recognition related settings.
  public var speechToTextSettings: Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings {
    get {return _speechToTextSettings ?? Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings()}
    set {_speechToTextSettings = newValue}
  }
  /// Returns true if `speechToTextSettings` has been explicitly set.
  public var hasSpeechToTextSettings: Bool {return self._speechToTextSettings != nil}
  /// Clears the value of `speechToTextSettings`. Subsequent reads from it will return its default value.
  public mutating func clearSpeechToTextSettings() {self._speechToTextSettings = nil}

  /// Immutable. Name of the start flow in this agent. A start flow will be automatically
  /// created when the agent is created, and can only be deleted by deleting the
  /// agent.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>`.
  public var startFlow: String = String()

  /// Indicates if stackdriver logging is enabled for the agent.
  public var enableStackdriverLogging: Bool = false

  /// Indicates if automatic spell correction is enabled in detect intent
  /// requests.
  public var enableSpellCorrection: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _speechToTextSettings: Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings? = nil
}

/// The request message for [Agents.ListAgents][google.cloud.dialogflow.cx.v3beta1.Agents.ListAgents].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The location to list all agents for.
  /// Format: `projects/<Project ID>/locations/<Location ID>`.
  public var parent: String = String()

  /// The maximum number of items to return in a single page. By default 100 and
  /// at most 1000.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Agents.ListAgents][google.cloud.dialogflow.cx.v3beta1.Agents.ListAgents].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of agents. There will be a maximum number of items returned based
  /// on the page_size field in the request.
  public var agents: [Google_Cloud_Dialogflow_Cx_V3beta1_Agent] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.GetAgent][google.cloud.dialogflow.cx.v3beta1.Agents.GetAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_GetAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.CreateAgent][google.cloud.dialogflow.cx.v3beta1.Agents.CreateAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_CreateAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The location to create a agent for.
  /// Format: `projects/<Project ID>/locations/<Location ID>`.
  public var parent: String = String()

  /// Required. The agent to create.
  public var agent: Google_Cloud_Dialogflow_Cx_V3beta1_Agent {
    get {return _agent ?? Google_Cloud_Dialogflow_Cx_V3beta1_Agent()}
    set {_agent = newValue}
  }
  /// Returns true if `agent` has been explicitly set.
  public var hasAgent: Bool {return self._agent != nil}
  /// Clears the value of `agent`. Subsequent reads from it will return its default value.
  public mutating func clearAgent() {self._agent = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _agent: Google_Cloud_Dialogflow_Cx_V3beta1_Agent? = nil
}

/// The request message for [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3beta1.Agents.UpdateAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_UpdateAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to update.
  public var agent: Google_Cloud_Dialogflow_Cx_V3beta1_Agent {
    get {return _agent ?? Google_Cloud_Dialogflow_Cx_V3beta1_Agent()}
    set {_agent = newValue}
  }
  /// Returns true if `agent` has been explicitly set.
  public var hasAgent: Bool {return self._agent != nil}
  /// Clears the value of `agent`. Subsequent reads from it will return its default value.
  public mutating func clearAgent() {self._agent = nil}

  /// The mask to control which fields get updated. If the mask is not present,
  /// all fields will be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _agent: Google_Cloud_Dialogflow_Cx_V3beta1_Agent? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [Agents.DeleteAgent][google.cloud.dialogflow.cx.v3beta1.Agents.DeleteAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_DeleteAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to delete.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Agents.ExportAgent][google.cloud.dialogflow.cx.v3beta1.Agents.ExportAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to export.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var name: String = String()

  /// Optional. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
  /// export the agent to. The format of this URI must be
  /// `gs://<bucket-name>/<object-name>`.
  /// If left unspecified, the serialized agent is returned inline.
  public var agentUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Agents.ExportAgent][google.cloud.dialogflow.cx.v3beta1.Agents.ExportAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The exported agent.
  public var agent: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse.OneOf_Agent? = nil

  /// The URI to a file containing the exported agent. This field is populated
  /// only if `agent_uri` is specified in [ExportAgentRequest][google.cloud.dialogflow.cx.v3beta1.ExportAgentRequest].
  public var agentUri: String {
    get {
      if case .agentUri(let v)? = agent {return v}
      return String()
    }
    set {agent = .agentUri(newValue)}
  }

  /// Uncompressed raw byte content for agent.
  public var agentContent: Data {
    get {
      if case .agentContent(let v)? = agent {return v}
      return Data()
    }
    set {agent = .agentContent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The exported agent.
  public enum OneOf_Agent: Equatable {
    /// The URI to a file containing the exported agent. This field is populated
    /// only if `agent_uri` is specified in [ExportAgentRequest][google.cloud.dialogflow.cx.v3beta1.ExportAgentRequest].
    case agentUri(String)
    /// Uncompressed raw byte content for agent.
    case agentContent(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse.OneOf_Agent, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse.OneOf_Agent) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.agentUri, .agentUri): return {
        guard case .agentUri(let l) = lhs, case .agentUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentContent, .agentContent): return {
        guard case .agentContent(let l) = lhs, case .agentContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The request message for [Agents.RestoreAgent][google.cloud.dialogflow.cx.v3beta1.Agents.RestoreAgent].
public struct Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the agent to restore into.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var name: String = String()

  /// Required. The agent to restore.
  public var agent: Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest.OneOf_Agent? = nil

  /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
  /// to restore agent from. The format of this URI must be
  /// `gs://<bucket-name>/<object-name>`.
  public var agentUri: String {
    get {
      if case .agentUri(let v)? = agent {return v}
      return String()
    }
    set {agent = .agentUri(newValue)}
  }

  /// Uncompressed raw byte content for agent.
  public var agentContent: Data {
    get {
      if case .agentContent(let v)? = agent {return v}
      return Data()
    }
    set {agent = .agentContent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The agent to restore.
  public enum OneOf_Agent: Equatable {
    /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
    /// to restore agent from. The format of this URI must be
    /// `gs://<bucket-name>/<object-name>`.
    case agentUri(String)
    /// Uncompressed raw byte content for agent.
    case agentContent(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest.OneOf_Agent, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest.OneOf_Agent) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.agentUri, .agentUri): return {
        guard case .agentUri(let l) = lhs, case .agentUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentContent, .agentContent): return {
        guard case .agentContent(let l) = lhs, case .agentContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.cx.v3beta1"

extension Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpeechToTextSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_speech_adaptation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enableSpeechAdaptation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableSpeechAdaptation != false {
      try visitor.visitSingularBoolField(value: self.enableSpeechAdaptation, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_SpeechToTextSettings) -> Bool {
    if lhs.enableSpeechAdaptation != rhs.enableSpeechAdaptation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Agent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Agent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "default_language_code"),
    5: .standard(proto: "time_zone"),
    6: .same(proto: "description"),
    7: .standard(proto: "avatar_uri"),
    13: .standard(proto: "speech_to_text_settings"),
    16: .standard(proto: "start_flow"),
    18: .standard(proto: "enable_stackdriver_logging"),
    20: .standard(proto: "enable_spell_correction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.defaultLanguageCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.timeZone) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.avatarUri) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._speechToTextSettings) }()
      case 16: try { try decoder.decodeSingularStringField(value: &self.startFlow) }()
      case 18: try { try decoder.decodeSingularBoolField(value: &self.enableStackdriverLogging) }()
      case 20: try { try decoder.decodeSingularBoolField(value: &self.enableSpellCorrection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.defaultLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultLanguageCode, fieldNumber: 3)
    }
    if !self.timeZone.isEmpty {
      try visitor.visitSingularStringField(value: self.timeZone, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.avatarUri.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarUri, fieldNumber: 7)
    }
    if let v = self._speechToTextSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if !self.startFlow.isEmpty {
      try visitor.visitSingularStringField(value: self.startFlow, fieldNumber: 16)
    }
    if self.enableStackdriverLogging != false {
      try visitor.visitSingularBoolField(value: self.enableStackdriverLogging, fieldNumber: 18)
    }
    if self.enableSpellCorrection != false {
      try visitor.visitSingularBoolField(value: self.enableSpellCorrection, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Agent, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Agent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.defaultLanguageCode != rhs.defaultLanguageCode {return false}
    if lhs.timeZone != rhs.timeZone {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.avatarUri != rhs.avatarUri {return false}
    if lhs._speechToTextSettings != rhs._speechToTextSettings {return false}
    if lhs.startFlow != rhs.startFlow {return false}
    if lhs.enableStackdriverLogging != rhs.enableStackdriverLogging {return false}
    if lhs.enableSpellCorrection != rhs.enableSpellCorrection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAgentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAgentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "agents"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.agents) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.agents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.agents, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsResponse, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ListAgentsResponse) -> Bool {
    if lhs.agents != rhs.agents {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_GetAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_GetAgentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_GetAgentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_CreateAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "agent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._agent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._agent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_CreateAgentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_CreateAgentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._agent != rhs._agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_UpdateAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "agent"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._agent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._agent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_UpdateAgentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_UpdateAgentRequest) -> Bool {
    if lhs._agent != rhs._agent {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_DeleteAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_DeleteAgentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_DeleteAgentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "agent_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.agentUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.agentUri.isEmpty {
      try visitor.visitSingularStringField(value: self.agentUri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.agentUri != rhs.agentUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportAgentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_uri"),
    2: .standard(proto: "agent_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.agent = .agentUri(v)}
      }()
      case 2: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.agent = .agentContent(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.agent {
    case .agentUri?: try {
      guard case .agentUri(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .agentContent?: try {
      guard case .agentContent(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_ExportAgentResponse) -> Bool {
    if lhs.agent != rhs.agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RestoreAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "agent_uri"),
    3: .standard(proto: "agent_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.agent = .agentUri(v)}
      }()
      case 3: try {
        if self.agent != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.agent = .agentContent(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.agent {
    case .agentUri?: try {
      guard case .agentUri(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .agentContent?: try {
      guard case .agentContent(let v)? = self.agent else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_RestoreAgentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.agent != rhs.agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
