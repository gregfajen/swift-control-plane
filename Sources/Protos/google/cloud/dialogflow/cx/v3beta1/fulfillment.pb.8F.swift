// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3beta1/fulfillment.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A fulfillment can do one or more of the following actions at the same time:
///
///   * Generate rich message responses.
///   * Set parameter values.
///   * Call the webhook.
///
/// Fulfillments can be called at various stages in the [Page][google.cloud.dialogflow.cx.v3beta1.Page] or
/// [Form][google.cloud.dialogflow.cx.v3beta1.Form] lifecycle. For example, when a [DetectIntentRequest][google.cloud.dialogflow.cx.v3beta1.DetectIntentRequest] drives a
/// session to enter a new page, the page's entry fulfillment can add a static
/// response to the [QueryResult][google.cloud.dialogflow.cx.v3beta1.QueryResult] in the returning [DetectIntentResponse][google.cloud.dialogflow.cx.v3beta1.DetectIntentResponse],
/// call the webhook (for example, to load user data from a database), or both.
public struct Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of rich message responses to present to the user.
  public var messages: [Google_Cloud_Dialogflow_Cx_V3beta1_ResponseMessage] = []

  /// The webhook to call.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/webhooks/<Webhook ID>`.
  public var webhook: String = String()

  /// The tag used by the webhook to identify which fulfillment is being called.
  /// This field is required if `webhook` is specified.
  public var tag: String = String()

  /// Set parameter values before executing the webhook.
  public var setParameterActions: [Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.SetParameterAction] = []

  /// Conditional cases for this fulfillment.
  public var conditionalCases: [Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Setting a parameter value.
  public struct SetParameterAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Display name of the parameter.
    public var parameter: String = String()

    /// The new value of the parameter. A null value clears the parameter.
    public var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  /// A list of cascading if-else conditions. Cases are mutually exclusive.
  /// The first one with a matching condition is selected, all the rest ignored.
  public struct ConditionalCases {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A list of cascading if-else conditions.
    public var cases: [Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Each case has a Boolean condition. When it is evaluated to be True, the
    /// corresponding messages will be selected and evaluated recursively.
    public struct Case {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The condition to activate and select this case. Empty means the
      /// condition is always true. The condition is evaluated against [form
      /// parameters][Form.parameters] or [session
      /// parameters][SessionInfo.parameters].
      ///
      /// See the [conditions
      /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
      public var condition: String = String()

      /// A list of case content.
      public var caseContent: [Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// The list of messages or conditional cases to activate for this case.
      public struct CaseContent {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Either a message is returned or additional cases to be evaluated.
        public var casesOrMessage: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent.OneOf_CasesOrMessage? = nil

        /// Returned message.
        public var message: Google_Cloud_Dialogflow_Cx_V3beta1_ResponseMessage {
          get {
            if case .message(let v)? = casesOrMessage {return v}
            return Google_Cloud_Dialogflow_Cx_V3beta1_ResponseMessage()
          }
          set {casesOrMessage = .message(newValue)}
        }

        /// Additional cases to be evaluated.
        public var additionalCases: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases {
          get {
            if case .additionalCases(let v)? = casesOrMessage {return v}
            return Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases()
          }
          set {casesOrMessage = .additionalCases(newValue)}
        }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Either a message is returned or additional cases to be evaluated.
        public enum OneOf_CasesOrMessage: Equatable {
          /// Returned message.
          case message(Google_Cloud_Dialogflow_Cx_V3beta1_ResponseMessage)
          /// Additional cases to be evaluated.
          case additionalCases(Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases)

        #if !swift(>=4.1)
          public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent.OneOf_CasesOrMessage, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent.OneOf_CasesOrMessage) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.message, .message): return {
              guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
              return l == r
            }()
            case (.additionalCases, .additionalCases): return {
              guard case .additionalCases(let l) = lhs, case .additionalCases(let r) = rhs else { preconditionFailure() }
              return l == r
            }()
            default: return false
            }
          }
        #endif
        }

        public init() {}
      }

      public init() {}
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.cx.v3beta1"

extension Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fulfillment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "webhook"),
    3: .same(proto: "tag"),
    4: .standard(proto: "set_parameter_actions"),
    5: .standard(proto: "conditional_cases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.webhook) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tag) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.setParameterActions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.conditionalCases) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.webhook.isEmpty {
      try visitor.visitSingularStringField(value: self.webhook, fieldNumber: 2)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 3)
    }
    if !self.setParameterActions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.setParameterActions, fieldNumber: 4)
    }
    if !self.conditionalCases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conditionalCases, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.webhook != rhs.webhook {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.setParameterActions != rhs.setParameterActions {return false}
    if lhs.conditionalCases != rhs.conditionalCases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.SetParameterAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.protoMessageName + ".SetParameterAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameter"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parameter) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameter.isEmpty {
      try visitor.visitSingularStringField(value: self.parameter, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.SetParameterAction, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.SetParameterAction) -> Bool {
    if lhs.parameter != rhs.parameter {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.protoMessageName + ".ConditionalCases"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cases) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cases, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases) -> Bool {
    if lhs.cases != rhs.cases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.protoMessageName + ".Case"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "condition"),
    2: .standard(proto: "case_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.condition) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.caseContent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.condition.isEmpty {
      try visitor.visitSingularStringField(value: self.condition, fieldNumber: 1)
    }
    if !self.caseContent.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.caseContent, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case) -> Bool {
    if lhs.condition != rhs.condition {return false}
    if lhs.caseContent != rhs.caseContent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.protoMessageName + ".CaseContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .standard(proto: "additional_cases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Dialogflow_Cx_V3beta1_ResponseMessage?
        if let current = self.casesOrMessage {
          try decoder.handleConflictingOneOf()
          if case .message(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.casesOrMessage = .message(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases?
        if let current = self.casesOrMessage {
          try decoder.handleConflictingOneOf()
          if case .additionalCases(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.casesOrMessage = .additionalCases(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.casesOrMessage {
    case .message?: try {
      guard case .message(let v)? = self.casesOrMessage else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .additionalCases?: try {
      guard case .additionalCases(let v)? = self.casesOrMessage else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent, rhs: Google_Cloud_Dialogflow_Cx_V3beta1_Fulfillment.ConditionalCases.Case.CaseContent) -> Bool {
    if lhs.casesOrMessage != rhs.casesOrMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
