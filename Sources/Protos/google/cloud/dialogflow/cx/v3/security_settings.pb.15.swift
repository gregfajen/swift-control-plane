// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3/security_settings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The request message for [SecuritySettingsService.GetSecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettingsService.GetSecuritySettings].
public struct Google_Cloud_Dialogflow_Cx_V3_GetSecuritySettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the settings.
  /// Format: `projects/<Project ID>/locations/<Location
  /// ID>/securitySettings/<security settings ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [SecuritySettingsService.UpdateSecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettingsService.UpdateSecuritySettings].
public struct Google_Cloud_Dialogflow_Cx_V3_UpdateSecuritySettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. [SecuritySettings] object that contains values for each of the
  /// fields to update.
  public var securitySettings: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings {
    get {return _securitySettings ?? Google_Cloud_Dialogflow_Cx_V3_SecuritySettings()}
    set {_securitySettings = newValue}
  }
  /// Returns true if `securitySettings` has been explicitly set.
  public var hasSecuritySettings: Bool {return self._securitySettings != nil}
  /// Clears the value of `securitySettings`. Subsequent reads from it will return its default value.
  public mutating func clearSecuritySettings() {self._securitySettings = nil}

  /// Required. The mask to control which fields get updated. If the mask is not present,
  /// all fields will be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _securitySettings: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [SecuritySettings.ListSecuritySettings][].
public struct Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The location to list all security settings for.
  /// Format: `projects/<Project ID>/locations/<Location ID>`.
  public var parent: String = String()

  /// The maximum number of items to return in a single page. By default 20 and
  /// at most 100.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [SecuritySettings.ListSecuritySettings][].
public struct Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of security settings.
  public var securitySettings: [Google_Cloud_Dialogflow_Cx_V3_SecuritySettings] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [SecuritySettings.CreateSecuritySettings][].
public struct Google_Cloud_Dialogflow_Cx_V3_CreateSecuritySettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The location to create an [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings] for.
  /// Format: `projects/<Project ID>/locations/<Location ID>`.
  public var parent: String = String()

  /// Required. The security settings to create.
  public var securitySettings: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings {
    get {return _securitySettings ?? Google_Cloud_Dialogflow_Cx_V3_SecuritySettings()}
    set {_securitySettings = newValue}
  }
  /// Returns true if `securitySettings` has been explicitly set.
  public var hasSecuritySettings: Bool {return self._securitySettings != nil}
  /// Clears the value of `securitySettings`. Subsequent reads from it will return its default value.
  public mutating func clearSecuritySettings() {self._securitySettings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _securitySettings: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings? = nil
}

/// The request message for [SecuritySettings.DeleteSecuritySettings][].
public struct Google_Cloud_Dialogflow_Cx_V3_DeleteSecuritySettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings] to delete.
  /// Format: `projects/<Project ID>/locations/<Location
  /// ID>/securitySettings/<Security Settings ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents the settings related to security issues, such as data redaction
/// and data retention. It may take hours for updates on the settings to
/// propagate to all the related components and take effect.
public struct Google_Cloud_Dialogflow_Cx_V3_SecuritySettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the settings.
  /// Format: `projects/<Project ID>/locations/<Location
  /// ID>/securitySettings/<Security Settings ID>`.
  public var name: String = String()

  /// Required. The human-readable name of the security settings, unique within the
  /// location.
  public var displayName: String = String()

  /// Strategy that defines how we do redaction.
  public var redactionStrategy: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionStrategy = .unspecified

  /// Defines on what data we apply redaction. Note that we don't
  /// redact data to which we don't have access, e.g., Stackdriver logs.
  public var redactionScope: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionScope = .unspecified

  /// DLP inspect template name. Use this template to define inspect base
  /// settings.
  ///
  /// If empty, we use the default DLP inspect config.
  ///
  /// The template name will have one of the following formats:
  /// `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR
  /// `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
  public var inspectTemplate: String = String()

  /// Specifies how data is retained. Note that even if the data is
  /// purged due to retention policy, we may still hold it in backup storage for
  /// a few days without allowing direct readings.
  public var dataRetention: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.OneOf_DataRetention? = nil

  /// Retains the data for the specified number of days.
  /// User must Set a value lower than Dialogflow's default 30d TTL. Setting a
  /// value higher than that has no effect.
  /// A missing value or setting to 0 also means we use Dialogflow's default
  /// TTL.
  public var retentionWindowDays: Int32 {
    get {
      if case .retentionWindowDays(let v)? = dataRetention {return v}
      return 0
    }
    set {dataRetention = .retentionWindowDays(newValue)}
  }

  /// List of types of data to remove when retention settings triggers purge.
  public var purgeDataTypes: [Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.PurgeDataType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies how data is retained. Note that even if the data is
  /// purged due to retention policy, we may still hold it in backup storage for
  /// a few days without allowing direct readings.
  public enum OneOf_DataRetention: Equatable {
    /// Retains the data for the specified number of days.
    /// User must Set a value lower than Dialogflow's default 30d TTL. Setting a
    /// value higher than that has no effect.
    /// A missing value or setting to 0 also means we use Dialogflow's default
    /// TTL.
    case retentionWindowDays(Int32)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.OneOf_DataRetention, rhs: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.OneOf_DataRetention) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.retentionWindowDays, .retentionWindowDays): return {
        guard case .retentionWindowDays(let l) = lhs, case .retentionWindowDays(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Defines how we redact data.
  public enum RedactionStrategy: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Do not redact.
    case unspecified // = 0

    /// Call redaction service to clean up the data to be persisted.
    case redactWithService // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .redactWithService
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .redactWithService: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Defines what types of data to redact.
  public enum RedactionScope: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Don't redact any kind of data.
    case unspecified // = 0

    /// On data to be written to disk or similar devices that are capable of
    /// holding data even if power is disconnected. This includes data that are
    /// temporarily saved on disk.
    case redactDiskStorage // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 2: self = .redactDiskStorage
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .redactDiskStorage: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Type of data we purge after retention settings triggers purge.
  public enum PurgeDataType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified. Do not use.
    case unspecified // = 0

    /// Dialogflow history. This does not include Stackdriver log, which is
    /// owned by the user not Dialogflow.
    case dialogflowHistory // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .dialogflowHistory
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .dialogflowHistory: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionStrategy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionStrategy] = [
    .unspecified,
    .redactWithService,
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionScope: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionScope] = [
    .unspecified,
    .redactDiskStorage,
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.PurgeDataType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.PurgeDataType] = [
    .unspecified,
    .dialogflowHistory,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.cx.v3"

extension Google_Cloud_Dialogflow_Cx_V3_GetSecuritySettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSecuritySettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_GetSecuritySettingsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_GetSecuritySettingsRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_UpdateSecuritySettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSecuritySettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "security_settings"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._securitySettings) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._securitySettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_UpdateSecuritySettingsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_UpdateSecuritySettingsRequest) -> Bool {
    if lhs._securitySettings != rhs._securitySettings {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSecuritySettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSecuritySettingsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "security_settings"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.securitySettings) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.securitySettings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.securitySettings, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsResponse, rhs: Google_Cloud_Dialogflow_Cx_V3_ListSecuritySettingsResponse) -> Bool {
    if lhs.securitySettings != rhs.securitySettings {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_CreateSecuritySettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSecuritySettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "security_settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._securitySettings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._securitySettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_CreateSecuritySettingsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_CreateSecuritySettingsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._securitySettings != rhs._securitySettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_DeleteSecuritySettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteSecuritySettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_DeleteSecuritySettingsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_DeleteSecuritySettingsRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecuritySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "redaction_strategy"),
    4: .standard(proto: "redaction_scope"),
    9: .standard(proto: "inspect_template"),
    6: .standard(proto: "retention_window_days"),
    8: .standard(proto: "purge_data_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.redactionStrategy) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.redactionScope) }()
      case 6: try {
        if self.dataRetention != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.dataRetention = .retentionWindowDays(v)}
      }()
      case 8: try { try decoder.decodeRepeatedEnumField(value: &self.purgeDataTypes) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.inspectTemplate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if self.redactionStrategy != .unspecified {
      try visitor.visitSingularEnumField(value: self.redactionStrategy, fieldNumber: 3)
    }
    if self.redactionScope != .unspecified {
      try visitor.visitSingularEnumField(value: self.redactionScope, fieldNumber: 4)
    }
    if case .retentionWindowDays(let v)? = self.dataRetention {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if !self.purgeDataTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.purgeDataTypes, fieldNumber: 8)
    }
    if !self.inspectTemplate.isEmpty {
      try visitor.visitSingularStringField(value: self.inspectTemplate, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings, rhs: Google_Cloud_Dialogflow_Cx_V3_SecuritySettings) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.redactionStrategy != rhs.redactionStrategy {return false}
    if lhs.redactionScope != rhs.redactionScope {return false}
    if lhs.inspectTemplate != rhs.inspectTemplate {return false}
    if lhs.dataRetention != rhs.dataRetention {return false}
    if lhs.purgeDataTypes != rhs.purgeDataTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REDACTION_STRATEGY_UNSPECIFIED"),
    1: .same(proto: "REDACT_WITH_SERVICE"),
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.RedactionScope: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REDACTION_SCOPE_UNSPECIFIED"),
    2: .same(proto: "REDACT_DISK_STORAGE"),
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_SecuritySettings.PurgeDataType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PURGE_DATA_TYPE_UNSPECIFIED"),
    1: .same(proto: "DIALOGFLOW_HISTORY"),
  ]
}
