// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3/intent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the options for views of an intent.
/// An intent can be a sizable object. Therefore, we provide a resource view that
/// does not return training phrases in the response.
public enum Google_Cloud_Dialogflow_Cx_V3_IntentView: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Not specified. Treated as INTENT_VIEW_FULL.
  case unspecified // = 0

  /// Training phrases field is not populated in the response.
  case partial // = 1

  /// All fields are populated.
  case full // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .partial
    case 2: self = .full
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .partial: return 1
    case .full: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_Cx_V3_IntentView: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_Cx_V3_IntentView] = [
    .unspecified,
    .partial,
    .full,
  ]
}

#endif  // swift(>=4.2)

/// An intent represents a user's intent to interact with a conversational agent.
///
/// You can provide information for the Dialogflow API to use to match user input
/// to an intent by adding training phrases (i.e., examples of user input) to
/// your intent.
public struct Google_Cloud_Dialogflow_Cx_V3_Intent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the intent.
  /// Required for the [Intents.UpdateIntent][google.cloud.dialogflow.cx.v3.Intents.UpdateIntent] method. [Intents.CreateIntent][google.cloud.dialogflow.cx.v3.Intents.CreateIntent]
  /// populates the name automatically.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/intents/<Intent ID>`.
  public var name: String = String()

  /// Required. The human-readable name of the intent, unique within the agent.
  public var displayName: String = String()

  /// The collection of training phrases the agent is trained on to identify the
  /// intent.
  public var trainingPhrases: [Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase] = []

  /// The collection of parameters associated with the intent.
  public var parameters: [Google_Cloud_Dialogflow_Cx_V3_Intent.Parameter] = []

  /// The priority of this intent. Higher numbers represent higher
  /// priorities.
  ///
  /// - If the supplied value is unspecified or 0, the service
  ///   translates the value to 500,000, which corresponds to the
  ///   `Normal` priority in the console.
  /// - If the supplied value is negative, the intent is ignored
  ///   in runtime detect intent requests.
  public var priority: Int32 = 0

  /// Indicates whether this is a fallback intent. Currently only default
  /// fallback intent is allowed in the agent, which is added upon agent
  /// creation.
  /// Adding training phrases to fallback intent is useful in the case of
  /// requests that are mistakenly matched, since training phrases assigned to
  /// fallback intents act as negative examples that triggers no-match event.
  public var isFallback: Bool = false

  /// Optional. The key/value metadata to label an intent. Labels can contain
  /// lowercase letters, digits and the symbols '-' and '_'. International
  /// characters are allowed, including letters from unicase alphabets. Keys must
  /// start with a letter. Keys and values can be no longer than 63 characters
  /// and no more than 128 bytes.
  ///
  /// Prefix "sys." is reserved for Dialogflow defined labels. Currently allowed
  /// Dialogflow defined labels include:
  /// * sys.head
  /// * sys.contextual
  /// The above labels do not require value. "sys.head" means the intent is a
  /// head intent. "sys.contextual" means the intent is a contextual intent.
  public var labels: Dictionary<String,String> = [:]

  /// Optional. Human readable description for better understanding an intent like its
  /// scope, content, result etc. Maximum character limit: 140 characters.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents an example that the agent is trained on to identify the intent.
  public struct TrainingPhrase {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The unique identifier of the training phrase.
    public var id: String = String()

    /// Required. The ordered list of training phrase parts.
    /// The parts are concatenated in order to form the training phrase.
    ///
    /// Note: The API does not automatically annotate training phrases like the
    /// Dialogflow Console does.
    ///
    /// Note: Do not forget to include whitespace at part boundaries, so the
    /// training phrase is well formatted when the parts are concatenated.
    ///
    /// If the training phrase does not need to be annotated with parameters,
    /// you just need a single part with only the [Part.text][google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part.text] field set.
    ///
    /// If you want to annotate the training phrase, you must create multiple
    /// parts, where the fields of each part are populated in one of two ways:
    ///
    /// -   `Part.text` is set to a part of the phrase that has no parameters.
    /// -   `Part.text` is set to a part of the phrase that you want to annotate,
    ///     and the `parameter_id` field is set.
    public var parts: [Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase.Part] = []

    /// Indicates how many times this example was added to the intent.
    public var repeatCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Represents a part of a training phrase.
    public struct Part {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The text for this part.
      public var text: String = String()

      /// The [parameter][google.cloud.dialogflow.cx.v3.Intent.Parameter] used to annotate this part of the
      /// training phrase. This field is required for annotated parts of the
      /// training phrase.
      public var parameterID: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  /// Represents an intent parameter.
  public struct Parameter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The unique identifier of the parameter. This field
    /// is used by [training phrases][google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase] to annotate their
    /// [parts][google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part].
    public var id: String = String()

    /// Required. The entity type of the parameter.
    /// Format: `projects/-/locations/-/agents/-/entityTypes/<System Entity Type
    /// ID>` for system entity types (for example,
    /// `projects/-/locations/-/agents/-/entityTypes/sys.date`), or
    /// `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/entityTypes/<Entity Type ID>` for developer entity types.
    public var entityType: String = String()

    /// Indicates whether the parameter represents a list of values.
    public var isList: Bool = false

    /// Indicates whether the parameter content is logged in text and audio. If
    /// it is set to true, the parameter content will be replaced to parameter
    /// id in both request and response. The default value is false.
    public var redact: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// The request message for [Intents.ListIntents][google.cloud.dialogflow.cx.v3.Intents.ListIntents].
public struct Google_Cloud_Dialogflow_Cx_V3_ListIntentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to list all intents for.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var parent: String = String()

  /// The language to list intents for. The following fields are language
  /// dependent:
  ///
  /// *   `Intent.training_phrases.parts.text`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  /// The resource view to apply to the returned intent.
  public var intentView: Google_Cloud_Dialogflow_Cx_V3_IntentView = .unspecified

  /// The maximum number of items to return in a single page. By default 100 and
  /// at most 1000.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Intents.ListIntents][google.cloud.dialogflow.cx.v3.Intents.ListIntents].
public struct Google_Cloud_Dialogflow_Cx_V3_ListIntentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of intents. There will be a maximum number of items returned based
  /// on the page_size field in the request.
  public var intents: [Google_Cloud_Dialogflow_Cx_V3_Intent] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Intents.GetIntent][google.cloud.dialogflow.cx.v3.Intents.GetIntent].
public struct Google_Cloud_Dialogflow_Cx_V3_GetIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the intent.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/intents/<Intent ID>`.
  public var name: String = String()

  /// The language to retrieve the intent for. The following fields are language
  /// dependent:
  ///
  /// *   `Intent.training_phrases.parts.text`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Intents.CreateIntent][google.cloud.dialogflow.cx.v3.Intents.CreateIntent].
public struct Google_Cloud_Dialogflow_Cx_V3_CreateIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to create an intent for.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var parent: String = String()

  /// Required. The intent to create.
  public var intent: Google_Cloud_Dialogflow_Cx_V3_Intent {
    get {return _intent ?? Google_Cloud_Dialogflow_Cx_V3_Intent()}
    set {_intent = newValue}
  }
  /// Returns true if `intent` has been explicitly set.
  public var hasIntent: Bool {return self._intent != nil}
  /// Clears the value of `intent`. Subsequent reads from it will return its default value.
  public mutating func clearIntent() {self._intent = nil}

  /// The language of the following fields in `intent`:
  ///
  /// *   `Intent.training_phrases.parts.text`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intent: Google_Cloud_Dialogflow_Cx_V3_Intent? = nil
}

/// The request message for [Intents.UpdateIntent][google.cloud.dialogflow.cx.v3.Intents.UpdateIntent].
public struct Google_Cloud_Dialogflow_Cx_V3_UpdateIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The intent to update.
  public var intent: Google_Cloud_Dialogflow_Cx_V3_Intent {
    get {return _intent ?? Google_Cloud_Dialogflow_Cx_V3_Intent()}
    set {_intent = newValue}
  }
  /// Returns true if `intent` has been explicitly set.
  public var hasIntent: Bool {return self._intent != nil}
  /// Clears the value of `intent`. Subsequent reads from it will return its default value.
  public mutating func clearIntent() {self._intent = nil}

  /// The language of the following fields in `intent`:
  ///
  /// *   `Intent.training_phrases.parts.text`
  ///
  /// If not specified, the agent's default language is used.
  /// [Many
  /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
  /// are supported.
  /// Note: languages must be enabled in the agent before they can be used.
  public var languageCode: String = String()

  /// The mask to control which fields get updated. If the mask is not present,
  /// all fields will be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intent: Google_Cloud_Dialogflow_Cx_V3_Intent? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [Intents.DeleteIntent][google.cloud.dialogflow.cx.v3.Intents.DeleteIntent].
public struct Google_Cloud_Dialogflow_Cx_V3_DeleteIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the intent to delete.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/intents/<Intent ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.cx.v3"

extension Google_Cloud_Dialogflow_Cx_V3_IntentView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTENT_VIEW_UNSPECIFIED"),
    1: .same(proto: "INTENT_VIEW_PARTIAL"),
    2: .same(proto: "INTENT_VIEW_FULL"),
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_Intent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Intent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "training_phrases"),
    4: .same(proto: "parameters"),
    5: .same(proto: "priority"),
    6: .standard(proto: "is_fallback"),
    7: .same(proto: "labels"),
    8: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.trainingPhrases) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.parameters) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isFallback) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.trainingPhrases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trainingPhrases, fieldNumber: 3)
    }
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameters, fieldNumber: 4)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 5)
    }
    if self.isFallback != false {
      try visitor.visitSingularBoolField(value: self.isFallback, fieldNumber: 6)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Intent, rhs: Google_Cloud_Dialogflow_Cx_V3_Intent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.trainingPhrases != rhs.trainingPhrases {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.isFallback != rhs.isFallback {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_Intent.protoMessageName + ".TrainingPhrase"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "parts"),
    3: .standard(proto: "repeat_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.parts) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.repeatCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.parts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parts, fieldNumber: 2)
    }
    if self.repeatCount != 0 {
      try visitor.visitSingularInt32Field(value: self.repeatCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase, rhs: Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.parts != rhs.parts {return false}
    if lhs.repeatCount != rhs.repeatCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase.Part: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase.protoMessageName + ".Part"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "parameter_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parameterID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.parameterID.isEmpty {
      try visitor.visitSingularStringField(value: self.parameterID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase.Part, rhs: Google_Cloud_Dialogflow_Cx_V3_Intent.TrainingPhrase.Part) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.parameterID != rhs.parameterID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_Intent.Parameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_Intent.protoMessageName + ".Parameter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "entity_type"),
    3: .standard(proto: "is_list"),
    4: .same(proto: "redact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isList) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.redact) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 2)
    }
    if self.isList != false {
      try visitor.visitSingularBoolField(value: self.isList, fieldNumber: 3)
    }
    if self.redact != false {
      try visitor.visitSingularBoolField(value: self.redact, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Intent.Parameter, rhs: Google_Cloud_Dialogflow_Cx_V3_Intent.Parameter) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.entityType != rhs.entityType {return false}
    if lhs.isList != rhs.isList {return false}
    if lhs.redact != rhs.redact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_ListIntentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListIntentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "language_code"),
    5: .standard(proto: "intent_view"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.intentView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    if self.intentView != .unspecified {
      try visitor.visitSingularEnumField(value: self.intentView, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_ListIntentsRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_ListIntentsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.intentView != rhs.intentView {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_ListIntentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListIntentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intents"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.intents) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.intents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.intents, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_ListIntentsResponse, rhs: Google_Cloud_Dialogflow_Cx_V3_ListIntentsResponse) -> Bool {
    if lhs.intents != rhs.intents {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_GetIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_GetIntentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_GetIntentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_CreateIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "intent"),
    3: .standard(proto: "language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._intent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._intent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_CreateIntentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_CreateIntentRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._intent != rhs._intent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_UpdateIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intent"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._intent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_UpdateIntentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_UpdateIntentRequest) -> Bool {
    if lhs._intent != rhs._intent {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_DeleteIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteIntentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_DeleteIntentRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_DeleteIntentRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
