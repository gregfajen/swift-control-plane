//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3/version.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Dialogflow_Cx_V3_VersionsClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Dialogflow_Cx_V3_VersionsClientProtocol: GRPCClient {
  func listVersions(
    _ request: Google_Cloud_Dialogflow_Cx_V3_ListVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_ListVersionsRequest, Google_Cloud_Dialogflow_Cx_V3_ListVersionsResponse>

  func getVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_GetVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_GetVersionRequest, Google_Cloud_Dialogflow_Cx_V3_Version>

  func createVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_CreateVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_CreateVersionRequest, Google_Longrunning_Operation>

  func updateVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_UpdateVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_UpdateVersionRequest, Google_Cloud_Dialogflow_Cx_V3_Version>

  func deleteVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_DeleteVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_DeleteVersionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func loadVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_LoadVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_LoadVersionRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Dialogflow_Cx_V3_VersionsClientProtocol {

  /// Returns the list of all versions in the specified [Flow][google.cloud.dialogflow.cx.v3.Flow].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listVersions(
    _ request: Google_Cloud_Dialogflow_Cx_V3_ListVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_ListVersionsRequest, Google_Cloud_Dialogflow_Cx_V3_ListVersionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.dialogflow.cx.v3.Versions/ListVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves the specified [Version][google.cloud.dialogflow.cx.v3.Version].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_GetVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_GetVersionRequest, Google_Cloud_Dialogflow_Cx_V3_Version> {
    return self.makeUnaryCall(
      path: "/google.cloud.dialogflow.cx.v3.Versions/GetVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a [Version][google.cloud.dialogflow.cx.v3.Version] in the specified [Flow][google.cloud.dialogflow.cx.v3.Flow].
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_CreateVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_CreateVersionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.dialogflow.cx.v3.Versions/CreateVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified [Version][google.cloud.dialogflow.cx.v3.Version].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_UpdateVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_UpdateVersionRequest, Google_Cloud_Dialogflow_Cx_V3_Version> {
    return self.makeUnaryCall(
      path: "/google.cloud.dialogflow.cx.v3.Versions/UpdateVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the specified [Version][google.cloud.dialogflow.cx.v3.Version].
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_DeleteVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_DeleteVersionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.dialogflow.cx.v3.Versions/DeleteVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Loads a specified version to draft version.
  ///
  /// - Parameters:
  ///   - request: Request to send to LoadVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func loadVersion(
    _ request: Google_Cloud_Dialogflow_Cx_V3_LoadVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Dialogflow_Cx_V3_LoadVersionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.dialogflow.cx.v3.Versions/LoadVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Dialogflow_Cx_V3_VersionsClient: Google_Cloud_Dialogflow_Cx_V3_VersionsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.dialogflow.cx.v3.Versions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Dialogflow_Cx_V3_VersionsProvider: CallHandlerProvider {
  /// Returns the list of all versions in the specified [Flow][google.cloud.dialogflow.cx.v3.Flow].
  func listVersions(request: Google_Cloud_Dialogflow_Cx_V3_ListVersionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Dialogflow_Cx_V3_ListVersionsResponse>
  /// Retrieves the specified [Version][google.cloud.dialogflow.cx.v3.Version].
  func getVersion(request: Google_Cloud_Dialogflow_Cx_V3_GetVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Dialogflow_Cx_V3_Version>
  /// Creates a [Version][google.cloud.dialogflow.cx.v3.Version] in the specified [Flow][google.cloud.dialogflow.cx.v3.Flow].
  func createVersion(request: Google_Cloud_Dialogflow_Cx_V3_CreateVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the specified [Version][google.cloud.dialogflow.cx.v3.Version].
  func updateVersion(request: Google_Cloud_Dialogflow_Cx_V3_UpdateVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Dialogflow_Cx_V3_Version>
  /// Deletes the specified [Version][google.cloud.dialogflow.cx.v3.Version].
  func deleteVersion(request: Google_Cloud_Dialogflow_Cx_V3_DeleteVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Loads a specified version to draft version.
  func loadVersion(request: Google_Cloud_Dialogflow_Cx_V3_LoadVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Dialogflow_Cx_V3_VersionsProvider {
  public var serviceName: Substring { return "google.cloud.dialogflow.cx.v3.Versions" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listVersions(request: request, context: context)
        }
      }

    case "GetVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getVersion(request: request, context: context)
        }
      }

    case "CreateVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createVersion(request: request, context: context)
        }
      }

    case "UpdateVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateVersion(request: request, context: context)
        }
      }

    case "DeleteVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteVersion(request: request, context: context)
        }
      }

    case "LoadVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.loadVersion(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

