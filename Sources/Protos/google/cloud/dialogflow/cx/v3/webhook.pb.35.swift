// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dialogflow/cx/v3/webhook.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Webhooks host the developer's business logic. During a session, webhooks
/// allow the developer to use the data extracted by Dialogflow's natural
/// language processing to generate dynamic responses, validate collected data,
/// or trigger actions on the backend.
public struct Google_Cloud_Dialogflow_Cx_V3_Webhook {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the webhook.
  /// Required for the [Webhooks.UpdateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.UpdateWebhook] method.
  /// [Webhooks.CreateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.CreateWebhook] populates the name automatically.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/webhooks/<Webhook ID>`.
  public var name: String = String()

  /// Required. The human-readable name of the webhook, unique within the agent.
  public var displayName: String = String()

  /// Required. The webhook configuration.
  public var webhook: Google_Cloud_Dialogflow_Cx_V3_Webhook.OneOf_Webhook? = nil

  /// Configuration for a generic web service.
  public var genericWebService: Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService {
    get {
      if case .genericWebService(let v)? = webhook {return v}
      return Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService()
    }
    set {webhook = .genericWebService(newValue)}
  }

  /// Webhook execution timeout. Execution is considered failed if Dialogflow
  /// doesn't receive a response from webhook at the end of the timeout period.
  /// Defaults to 5 seconds, maximum allowed timeout is 30 seconds.
  public var timeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _timeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  public var hasTimeout: Bool {return self._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  public mutating func clearTimeout() {self._timeout = nil}

  /// Indicates whether the webhook is disabled.
  public var disabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The webhook configuration.
  public enum OneOf_Webhook: Equatable {
    /// Configuration for a generic web service.
    case genericWebService(Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Webhook.OneOf_Webhook, rhs: Google_Cloud_Dialogflow_Cx_V3_Webhook.OneOf_Webhook) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.genericWebService, .genericWebService): return {
        guard case .genericWebService(let l) = lhs, case .genericWebService(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Represents configuration for a generic web service.
  public struct GenericWebService {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The webhook URI for receiving POST requests. It must use https protocol.
    public var uri: String = String()

    /// The user name for HTTP Basic authentication.
    public var username: String = String()

    /// The password for HTTP Basic authentication.
    public var password: String = String()

    /// The HTTP request headers to send together with webhook
    /// requests.
    public var requestHeaders: Dictionary<String,String> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _timeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// The request message for [Webhooks.ListWebhooks][google.cloud.dialogflow.cx.v3.Webhooks.ListWebhooks].
public struct Google_Cloud_Dialogflow_Cx_V3_ListWebhooksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to list all webhooks for.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var parent: String = String()

  /// The maximum number of items to return in a single page. By default 100 and
  /// at most 1000.
  public var pageSize: Int32 = 0

  /// The next_page_token value returned from a previous list request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for [Webhooks.ListWebhooks][google.cloud.dialogflow.cx.v3.Webhooks.ListWebhooks].
public struct Google_Cloud_Dialogflow_Cx_V3_ListWebhooksResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of webhooks. There will be a maximum number of items returned
  /// based on the page_size field in the request.
  public var webhooks: [Google_Cloud_Dialogflow_Cx_V3_Webhook] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Webhooks.GetWebhook][google.cloud.dialogflow.cx.v3.Webhooks.GetWebhook].
public struct Google_Cloud_Dialogflow_Cx_V3_GetWebhookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the webhook.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/webhooks/<Webhook ID>`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for [Webhooks.CreateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.CreateWebhook].
public struct Google_Cloud_Dialogflow_Cx_V3_CreateWebhookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The agent to create a webhook for.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
  public var parent: String = String()

  /// Required. The webhook to create.
  public var webhook: Google_Cloud_Dialogflow_Cx_V3_Webhook {
    get {return _webhook ?? Google_Cloud_Dialogflow_Cx_V3_Webhook()}
    set {_webhook = newValue}
  }
  /// Returns true if `webhook` has been explicitly set.
  public var hasWebhook: Bool {return self._webhook != nil}
  /// Clears the value of `webhook`. Subsequent reads from it will return its default value.
  public mutating func clearWebhook() {self._webhook = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _webhook: Google_Cloud_Dialogflow_Cx_V3_Webhook? = nil
}

/// The request message for [Webhooks.UpdateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.UpdateWebhook].
public struct Google_Cloud_Dialogflow_Cx_V3_UpdateWebhookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The webhook to update.
  public var webhook: Google_Cloud_Dialogflow_Cx_V3_Webhook {
    get {return _webhook ?? Google_Cloud_Dialogflow_Cx_V3_Webhook()}
    set {_webhook = newValue}
  }
  /// Returns true if `webhook` has been explicitly set.
  public var hasWebhook: Bool {return self._webhook != nil}
  /// Clears the value of `webhook`. Subsequent reads from it will return its default value.
  public mutating func clearWebhook() {self._webhook = nil}

  /// The mask to control which fields get updated. If the mask is not present,
  /// all fields will be updated.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _webhook: Google_Cloud_Dialogflow_Cx_V3_Webhook? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The request message for [Webhooks.DeleteWebhook][google.cloud.dialogflow.cx.v3.Webhooks.DeleteWebhook].
public struct Google_Cloud_Dialogflow_Cx_V3_DeleteWebhookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the webhook to delete.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/webhooks/<Webhook ID>`.
  public var name: String = String()

  /// This field has no effect for webhook not being used.
  /// For webhooks that are used by pages/flows/transition route groups:
  ///
  /// *  If `force` is set to false, an error will be returned with message
  ///    indicating the referenced resources.
  /// *  If `force` is set to true, Dialogflow will remove the webhook, as well
  ///    as any references to the webhook (i.e. [Webhook][google.cloud.dialogflow.cx.v3.Fulfillment.webhook]
  ///    and [tag][google.cloud.dialogflow.cx.v3.Fulfillment.tag]in fulfillments that point to this webhook
  ///    will be removed).
  public var force: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for a webhook call.
public struct Google_Cloud_Dialogflow_Cx_V3_WebhookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Always present. The unique identifier of the [DetectIntentResponse][google.cloud.dialogflow.cx.v3.DetectIntentResponse] that
  /// will be returned to the API caller.
  public var detectIntentResponseID: String = String()

  /// Always present. Information about the fulfillment that triggered this
  /// webhook call.
  public var fulfillmentInfo: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.FulfillmentInfo {
    get {return _fulfillmentInfo ?? Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.FulfillmentInfo()}
    set {_fulfillmentInfo = newValue}
  }
  /// Returns true if `fulfillmentInfo` has been explicitly set.
  public var hasFulfillmentInfo: Bool {return self._fulfillmentInfo != nil}
  /// Clears the value of `fulfillmentInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFulfillmentInfo() {self._fulfillmentInfo = nil}

  /// Information about the last matched intent.
  public var intentInfo: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo {
    get {return _intentInfo ?? Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo()}
    set {_intentInfo = newValue}
  }
  /// Returns true if `intentInfo` has been explicitly set.
  public var hasIntentInfo: Bool {return self._intentInfo != nil}
  /// Clears the value of `intentInfo`. Subsequent reads from it will return its default value.
  public mutating func clearIntentInfo() {self._intentInfo = nil}

  /// Information about page status.
  public var pageInfo: Google_Cloud_Dialogflow_Cx_V3_PageInfo {
    get {return _pageInfo ?? Google_Cloud_Dialogflow_Cx_V3_PageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  /// Information about session status.
  public var sessionInfo: Google_Cloud_Dialogflow_Cx_V3_SessionInfo {
    get {return _sessionInfo ?? Google_Cloud_Dialogflow_Cx_V3_SessionInfo()}
    set {_sessionInfo = newValue}
  }
  /// Returns true if `sessionInfo` has been explicitly set.
  public var hasSessionInfo: Bool {return self._sessionInfo != nil}
  /// Clears the value of `sessionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSessionInfo() {self._sessionInfo = nil}

  /// The list of rich message responses to present to the user. Webhook can
  /// choose to append or replace this list in
  /// [WebhookResponse.fulfillment_response][google.cloud.dialogflow.cx.v3.WebhookResponse.fulfillment_response];
  public var messages: [Google_Cloud_Dialogflow_Cx_V3_ResponseMessage] = []

  /// Custom data set in [QueryParameters.payload][google.cloud.dialogflow.cx.v3.QueryParameters.payload].
  public var payload: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _payload ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {self._payload = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents fulfillment information communicated to the webhook.
  public struct FulfillmentInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Always present. The tag used to identify which fulfillment is being
    /// called.
    public var tag: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Represents intent information communicated to the webhook.
  public struct IntentInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Always present. The unique identifier of the last matched
    /// [intent][google.cloud.dialogflow.cx.v3.Intent]. Format: `projects/<Project ID>/locations/<Location
    /// ID>/agents/<Agent ID>/intents/<Intent ID>`.
    public var lastMatchedIntent: String = String()

    /// Parameters identified as a result of intent matching. This is a map of
    /// the name of the identified parameter to the value of the parameter
    /// identified from the user's utterance. All parameters defined in the
    /// matched intent that are identified will be surfaced here.
    public var parameters: Dictionary<String,Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.IntentParameterValue> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Represents a value for an intent parameter.
    public struct IntentParameterValue {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Always present. Original text value extracted from user utterance.
      public var originalValue: String = String()

      /// Always present. Structured value for the parameter extracted from user
      /// utterance.
      public var resolvedValue: SwiftProtobuf.Google_Protobuf_Value {
        get {return _resolvedValue ?? SwiftProtobuf.Google_Protobuf_Value()}
        set {_resolvedValue = newValue}
      }
      /// Returns true if `resolvedValue` has been explicitly set.
      public var hasResolvedValue: Bool {return self._resolvedValue != nil}
      /// Clears the value of `resolvedValue`. Subsequent reads from it will return its default value.
      public mutating func clearResolvedValue() {self._resolvedValue = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _resolvedValue: SwiftProtobuf.Google_Protobuf_Value? = nil
    }

    public init() {}
  }

  public init() {}

  fileprivate var _fulfillmentInfo: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.FulfillmentInfo? = nil
  fileprivate var _intentInfo: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo? = nil
  fileprivate var _pageInfo: Google_Cloud_Dialogflow_Cx_V3_PageInfo? = nil
  fileprivate var _sessionInfo: Google_Cloud_Dialogflow_Cx_V3_SessionInfo? = nil
  fileprivate var _payload: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

/// The response message for a webhook call.
public struct Google_Cloud_Dialogflow_Cx_V3_WebhookResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The fulfillment response to send to the user. This field can be omitted by
  /// the webhook if it does not intend to send any response to the user.
  public var fulfillmentResponse: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse {
    get {return _fulfillmentResponse ?? Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse()}
    set {_fulfillmentResponse = newValue}
  }
  /// Returns true if `fulfillmentResponse` has been explicitly set.
  public var hasFulfillmentResponse: Bool {return self._fulfillmentResponse != nil}
  /// Clears the value of `fulfillmentResponse`. Subsequent reads from it will return its default value.
  public mutating func clearFulfillmentResponse() {self._fulfillmentResponse = nil}

  /// Information about page status. This field can be omitted by the webhook if
  /// it does not intend to modify page status.
  public var pageInfo: Google_Cloud_Dialogflow_Cx_V3_PageInfo {
    get {return _pageInfo ?? Google_Cloud_Dialogflow_Cx_V3_PageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  /// Information about session status. This field can be omitted by the webhook
  /// if it does not intend to modify session status.
  public var sessionInfo: Google_Cloud_Dialogflow_Cx_V3_SessionInfo {
    get {return _sessionInfo ?? Google_Cloud_Dialogflow_Cx_V3_SessionInfo()}
    set {_sessionInfo = newValue}
  }
  /// Returns true if `sessionInfo` has been explicitly set.
  public var hasSessionInfo: Bool {return self._sessionInfo != nil}
  /// Clears the value of `sessionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSessionInfo() {self._sessionInfo = nil}

  /// Value to append directly to [QueryResult.webhook_payloads][google.cloud.dialogflow.cx.v3.QueryResult.webhook_payloads].
  public var payload: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _payload ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {self._payload = nil}

  /// The target to transition to. This can be set optionally to indicate an
  /// immediate transition to a different page in the same host flow, or a
  /// different flow in the same agent.
  public var transition: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.OneOf_Transition? = nil

  /// The target page to transition to.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/pages/<Page ID>`.
  public var targetPage: String {
    get {
      if case .targetPage(let v)? = transition {return v}
      return String()
    }
    set {transition = .targetPage(newValue)}
  }

  /// The target flow to transition to.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>`.
  public var targetFlow: String {
    get {
      if case .targetFlow(let v)? = transition {return v}
      return String()
    }
    set {transition = .targetFlow(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The target to transition to. This can be set optionally to indicate an
  /// immediate transition to a different page in the same host flow, or a
  /// different flow in the same agent.
  public enum OneOf_Transition: Equatable {
    /// The target page to transition to.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>/pages/<Page ID>`.
    case targetPage(String)
    /// The target flow to transition to.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>`.
    case targetFlow(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.OneOf_Transition, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.OneOf_Transition) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.targetPage, .targetPage): return {
        guard case .targetPage(let l) = lhs, case .targetPage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.targetFlow, .targetFlow): return {
        guard case .targetFlow(let l) = lhs, case .targetFlow(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Represents a fulfillment response to the user.
  public struct FulfillmentResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The list of rich message responses to present to the user.
    public var messages: [Google_Cloud_Dialogflow_Cx_V3_ResponseMessage] = []

    /// Merge behavior for `messages`.
    public var mergeBehavior: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse.MergeBehavior = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Defines merge behavior for `messages`.
    public enum MergeBehavior: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Not specified. `APPEND` will be used.
      case unspecified // = 0

      /// `messages` will be appended to the list of messages waiting to be sent
      /// to the user.
      case append // = 1

      /// `messages` will replace the list of messages waiting to be sent to the
      /// user.
      case replace // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .append
        case 2: self = .replace
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .append: return 1
        case .replace: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _fulfillmentResponse: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse? = nil
  fileprivate var _pageInfo: Google_Cloud_Dialogflow_Cx_V3_PageInfo? = nil
  fileprivate var _sessionInfo: Google_Cloud_Dialogflow_Cx_V3_SessionInfo? = nil
  fileprivate var _payload: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse.MergeBehavior: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse.MergeBehavior] = [
    .unspecified,
    .append,
    .replace,
  ]
}

#endif  // swift(>=4.2)

/// Represents page information communicated to and from the webhook.
public struct Google_Cloud_Dialogflow_Cx_V3_PageInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Always present for [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored for [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
  /// The unique identifier of the current page.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/flows/<Flow ID>/pages/<Page ID>`.
  public var currentPage: String = String()

  /// Optional for both [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
  /// Information about the form.
  public var formInfo: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo {
    get {return _formInfo ?? Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo()}
    set {_formInfo = newValue}
  }
  /// Returns true if `formInfo` has been explicitly set.
  public var hasFormInfo: Bool {return self._formInfo != nil}
  /// Clears the value of `formInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFormInfo() {self._formInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents form information.
  public struct FormInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional for both [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
    /// The parameters contained in the form. Note that the webhook cannot add
    /// or remove any form parameter.
    public var parameterInfo: [Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Represents parameter information.
    public struct ParameterInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Always present for [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Required for
      /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
      /// The human-readable name of the parameter, unique within the form. This
      /// field cannot be modified by the webhook.
      public var displayName: String = String()

      /// Optional for both [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
      /// Indicates whether the parameter is required. Optional parameters will
      /// not trigger prompts; however, they are filled if the user specifies
      /// them. Required parameters must be filled before form filling concludes.
      public var required: Bool = false

      /// Always present for [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Required for
      /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The state of the parameter. This field can be set
      /// to [INVALID][google.cloud.dialogflow.cx.v3.PageInfo.FormInfo.ParameterInfo.ParameterState.INVALID] by
      /// the webhook to invalidate the parameter; other values set by the
      /// webhook will be ignored.
      public var state: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo.ParameterState = .unspecified

      /// Optional for both [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
      /// The value of the parameter. This field can be set by the webhook to
      /// change the parameter value.
      public var value: SwiftProtobuf.Google_Protobuf_Value {
        get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
        set {_value = newValue}
      }
      /// Returns true if `value` has been explicitly set.
      public var hasValue: Bool {return self._value != nil}
      /// Clears the value of `value`. Subsequent reads from it will return its default value.
      public mutating func clearValue() {self._value = nil}

      /// Optional for [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored for [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
      /// Indicates if the parameter value was just collected on the last
      /// conversation turn.
      public var justCollected: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Represents the state of a parameter.
      public enum ParameterState: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Not specified. This value should be never used.
        case unspecified // = 0

        /// Indicates that the parameter does not have a value.
        case empty // = 1

        /// Indicates that the parameter value is invalid. This field can be used
        /// by the webhook to invalidate the parameter and ask the server to
        /// collect it from the user again.
        case invalid // = 2

        /// Indicates that the parameter has a value.
        case filled // = 3
        case UNRECOGNIZED(Int)

        public init() {
          self = .unspecified
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unspecified
          case 1: self = .empty
          case 2: self = .invalid
          case 3: self = .filled
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unspecified: return 0
          case .empty: return 1
          case .invalid: return 2
          case .filled: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}

      fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
    }

    public init() {}
  }

  public init() {}

  fileprivate var _formInfo: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo.ParameterState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo.ParameterState] = [
    .unspecified,
    .empty,
    .invalid,
    .filled,
  ]
}

#endif  // swift(>=4.2)

/// Represents session information communicated to and from the webhook.
public struct Google_Cloud_Dialogflow_Cx_V3_SessionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Always present for [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored for [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
  /// The unique identifier of the [session][google.cloud.dialogflow.cx.v3.DetectIntentRequest.session]. This
  /// field can be used by the webhook to identify a user.
  /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
  /// ID>/sessions/<Session ID>`.
  public var session: String = String()

  /// Optional for [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Optional for [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
  /// All parameters collected from forms and intents during the session.
  /// Parameters can be created, updated, or removed by the webhook. To remove a
  /// parameter from the session, the webhook should explicitly set the parameter
  /// value to null in [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The map is keyed by parameters'
  /// display names.
  public var parameters: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dialogflow.cx.v3"

extension Google_Cloud_Dialogflow_Cx_V3_Webhook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Webhook"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    4: .standard(proto: "generic_web_service"),
    6: .same(proto: "timeout"),
    5: .same(proto: "disabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try {
        var v: Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService?
        if let current = self.webhook {
          try decoder.handleConflictingOneOf()
          if case .genericWebService(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.webhook = .genericWebService(v)}
      }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.disabled) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timeout) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if case .genericWebService(let v)? = self.webhook {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 5)
    }
    if let v = self._timeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Webhook, rhs: Google_Cloud_Dialogflow_Cx_V3_Webhook) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.webhook != rhs.webhook {return false}
    if lhs._timeout != rhs._timeout {return false}
    if lhs.disabled != rhs.disabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_Webhook.protoMessageName + ".GenericWebService"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "username"),
    3: .same(proto: "password"),
    4: .standard(proto: "request_headers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.requestHeaders) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if !self.requestHeaders.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.requestHeaders, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService, rhs: Google_Cloud_Dialogflow_Cx_V3_Webhook.GenericWebService) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.username != rhs.username {return false}
    if lhs.password != rhs.password {return false}
    if lhs.requestHeaders != rhs.requestHeaders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_ListWebhooksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListWebhooksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_ListWebhooksRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_ListWebhooksRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_ListWebhooksResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListWebhooksResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "webhooks"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.webhooks) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.webhooks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.webhooks, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_ListWebhooksResponse, rhs: Google_Cloud_Dialogflow_Cx_V3_ListWebhooksResponse) -> Bool {
    if lhs.webhooks != rhs.webhooks {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_GetWebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetWebhookRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_GetWebhookRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_GetWebhookRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_CreateWebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateWebhookRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "webhook"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._webhook) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._webhook {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_CreateWebhookRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_CreateWebhookRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._webhook != rhs._webhook {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_UpdateWebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateWebhookRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "webhook"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._webhook) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._webhook {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_UpdateWebhookRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_UpdateWebhookRequest) -> Bool {
    if lhs._webhook != rhs._webhook {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_DeleteWebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteWebhookRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "force"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.force) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.force != false {
      try visitor.visitSingularBoolField(value: self.force, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_DeleteWebhookRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_DeleteWebhookRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.force != rhs.force {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WebhookRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "detect_intent_response_id"),
    6: .standard(proto: "fulfillment_info"),
    3: .standard(proto: "intent_info"),
    4: .standard(proto: "page_info"),
    5: .standard(proto: "session_info"),
    7: .same(proto: "messages"),
    8: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.detectIntentResponseID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._intentInfo) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._sessionInfo) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._fulfillmentInfo) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.detectIntentResponseID.isEmpty {
      try visitor.visitSingularStringField(value: self.detectIntentResponseID, fieldNumber: 1)
    }
    if let v = self._intentInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._sessionInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._fulfillmentInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 7)
    }
    if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest) -> Bool {
    if lhs.detectIntentResponseID != rhs.detectIntentResponseID {return false}
    if lhs._fulfillmentInfo != rhs._fulfillmentInfo {return false}
    if lhs._intentInfo != rhs._intentInfo {return false}
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs._sessionInfo != rhs._sessionInfo {return false}
    if lhs.messages != rhs.messages {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.FulfillmentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.protoMessageName + ".FulfillmentInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.FulfillmentInfo, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.FulfillmentInfo) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.protoMessageName + ".IntentInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_matched_intent"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.lastMatchedIntent) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.IntentParameterValue>.self, value: &self.parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lastMatchedIntent.isEmpty {
      try visitor.visitSingularStringField(value: self.lastMatchedIntent, fieldNumber: 1)
    }
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.IntentParameterValue>.self, value: self.parameters, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo) -> Bool {
    if lhs.lastMatchedIntent != rhs.lastMatchedIntent {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.IntentParameterValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.protoMessageName + ".IntentParameterValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_value"),
    2: .standard(proto: "resolved_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.originalValue) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._resolvedValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.originalValue.isEmpty {
      try visitor.visitSingularStringField(value: self.originalValue, fieldNumber: 1)
    }
    if let v = self._resolvedValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.IntentParameterValue, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookRequest.IntentInfo.IntentParameterValue) -> Bool {
    if lhs.originalValue != rhs.originalValue {return false}
    if lhs._resolvedValue != rhs._resolvedValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WebhookResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fulfillment_response"),
    2: .standard(proto: "page_info"),
    3: .standard(proto: "session_info"),
    4: .same(proto: "payload"),
    5: .standard(proto: "target_page"),
    6: .standard(proto: "target_flow"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fulfillmentResponse) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sessionInfo) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      case 5: try {
        if self.transition != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.transition = .targetPage(v)}
      }()
      case 6: try {
        if self.transition != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.transition = .targetFlow(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fulfillmentResponse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._sessionInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.transition {
    case .targetPage?: try {
      guard case .targetPage(let v)? = self.transition else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case .targetFlow?: try {
      guard case .targetFlow(let v)? = self.transition else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse) -> Bool {
    if lhs._fulfillmentResponse != rhs._fulfillmentResponse {return false}
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs._sessionInfo != rhs._sessionInfo {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.transition != rhs.transition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.protoMessageName + ".FulfillmentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .standard(proto: "merge_behavior"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.mergeBehavior) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if self.mergeBehavior != .unspecified {
      try visitor.visitSingularEnumField(value: self.mergeBehavior, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse, rhs: Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.mergeBehavior != rhs.mergeBehavior {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_WebhookResponse.FulfillmentResponse.MergeBehavior: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MERGE_BEHAVIOR_UNSPECIFIED"),
    1: .same(proto: "APPEND"),
    2: .same(proto: "REPLACE"),
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_PageInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_page"),
    3: .standard(proto: "form_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.currentPage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._formInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currentPage.isEmpty {
      try visitor.visitSingularStringField(value: self.currentPage, fieldNumber: 1)
    }
    if let v = self._formInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_PageInfo, rhs: Google_Cloud_Dialogflow_Cx_V3_PageInfo) -> Bool {
    if lhs.currentPage != rhs.currentPage {return false}
    if lhs._formInfo != rhs._formInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_PageInfo.protoMessageName + ".FormInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "parameter_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.parameterInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameterInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameterInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo, rhs: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo) -> Bool {
    if lhs.parameterInfo != rhs.parameterInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.protoMessageName + ".ParameterInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "required"),
    3: .same(proto: "state"),
    4: .same(proto: "value"),
    5: .standard(proto: "just_collected"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.required) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.justCollected) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if self.required != false {
      try visitor.visitSingularBoolField(value: self.required, fieldNumber: 2)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.justCollected != false {
      try visitor.visitSingularBoolField(value: self.justCollected, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo, rhs: Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.required != rhs.required {return false}
    if lhs.state != rhs.state {return false}
    if lhs._value != rhs._value {return false}
    if lhs.justCollected != rhs.justCollected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dialogflow_Cx_V3_PageInfo.FormInfo.ParameterInfo.ParameterState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PARAMETER_STATE_UNSPECIFIED"),
    1: .same(proto: "EMPTY"),
    2: .same(proto: "INVALID"),
    3: .same(proto: "FILLED"),
  ]
}

extension Google_Cloud_Dialogflow_Cx_V3_SessionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "session"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.session) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &self.parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.session.isEmpty {
      try visitor.visitSingularStringField(value: self.session, fieldNumber: 1)
    }
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: self.parameters, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dialogflow_Cx_V3_SessionInfo, rhs: Google_Cloud_Dialogflow_Cx_V3_SessionInfo) -> Bool {
    if lhs.session != rhs.session {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
