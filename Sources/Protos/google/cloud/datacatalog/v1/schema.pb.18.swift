// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/datacatalog/v1/schema.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
public struct Google_Cloud_Datacatalog_V1_Schema {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be
  /// specified.
  public var columns: [Google_Cloud_Datacatalog_V1_ColumnSchema] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Representation of a column within a schema. Columns could be nested inside
/// other columns.
public struct Google_Cloud_Datacatalog_V1_ColumnSchema {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the column.
  public var column: String = String()

  /// Required. Type of the column.
  public var type: String = String()

  /// Optional. Description of the column. Default value is an empty string.
  public var description_p: String = String()

  /// Optional. A column's mode indicates whether the values in this column are required,
  /// nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported.
  /// Default mode is `NULLABLE`.
  public var mode: String = String()

  /// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
  public var subcolumns: [Google_Cloud_Datacatalog_V1_ColumnSchema] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.datacatalog.v1"

extension Google_Cloud_Datacatalog_V1_Schema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Schema"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "columns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.columns) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columns, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datacatalog_V1_Schema, rhs: Google_Cloud_Datacatalog_V1_Schema) -> Bool {
    if lhs.columns != rhs.columns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datacatalog_V1_ColumnSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColumnSchema"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "column"),
    1: .same(proto: "type"),
    2: .same(proto: "description"),
    3: .same(proto: "mode"),
    7: .same(proto: "subcolumns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mode) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.column) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.subcolumns) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.mode.isEmpty {
      try visitor.visitSingularStringField(value: self.mode, fieldNumber: 3)
    }
    if !self.column.isEmpty {
      try visitor.visitSingularStringField(value: self.column, fieldNumber: 6)
    }
    if !self.subcolumns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subcolumns, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datacatalog_V1_ColumnSchema, rhs: Google_Cloud_Datacatalog_V1_ColumnSchema) -> Bool {
    if lhs.column != rhs.column {return false}
    if lhs.type != rhs.type {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.subcolumns != rhs.subcolumns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
