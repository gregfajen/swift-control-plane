// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/datacatalog/v1/search.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The different types of resources that can be returned in search.
public enum Google_Cloud_Datacatalog_V1_SearchResultType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default unknown type.
  case unspecified // = 0

  /// An [Entry][google.cloud.datacatalog.v1.Entry].
  case entry // = 1

  /// A [TagTemplate][google.cloud.datacatalog.v1.TagTemplate].
  case tagTemplate // = 2

  /// An [EntryGroup][google.cloud.datacatalog.v1.EntryGroup].
  case entryGroup // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .entry
    case 2: self = .tagTemplate
    case 3: self = .entryGroup
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .entry: return 1
    case .tagTemplate: return 2
    case .entryGroup: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Datacatalog_V1_SearchResultType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Datacatalog_V1_SearchResultType] = [
    .unspecified,
    .entry,
    .tagTemplate,
    .entryGroup,
  ]
}

#endif  // swift(>=4.2)

/// A result that appears in the response of a search request. Each result
/// captures details of one entry that matches the search.
public struct Google_Cloud_Datacatalog_V1_SearchCatalogResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of the search result. This field can be used to determine which Get
  /// method to call to fetch the full resource.
  public var searchResultType: Google_Cloud_Datacatalog_V1_SearchResultType = .unspecified

  /// Sub-type of the search result. This is a dot-delimited description of the
  /// resource's full type, and is the same as the value callers would provide in
  /// the "type" search facet.  Examples: `entry.table`, `entry.dataStream`,
  /// `tagTemplate`.
  public var searchResultSubtype: String = String()

  /// The relative resource name of the resource in URL format.
  /// Examples:
  ///
  ///  * `projects/{project_id}/locations/{location_id}/entryGroups/{entry_group_id}/entries/{entry_id}`
  ///  * `projects/{project_id}/tagTemplates/{tag_template_id}`
  public var relativeResourceName: String = String()

  /// The full name of the cloud resource the entry belongs to. See:
  /// https://cloud.google.com/apis/design/resource_names#full_resource_name.
  /// Example:
  ///
  ///  * `//bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId`
  public var linkedResource: String = String()

  /// The source system of the entry. Only applicable when `search_result_type`
  /// is ENTRY.
  public var system: Google_Cloud_Datacatalog_V1_SearchCatalogResult.OneOf_System? = nil

  /// Output only. This field indicates the entry's source system that Data Catalog
  /// integrates with, such as BigQuery or Cloud Pub/Sub.
  public var integratedSystem: Google_Cloud_Datacatalog_V1_IntegratedSystem {
    get {
      if case .integratedSystem(let v)? = system {return v}
      return .unspecified
    }
    set {system = .integratedSystem(newValue)}
  }

  /// This field indicates the entry's source system that Data Catalog does not
  /// integrate with.
  public var userSpecifiedSystem: String {
    get {
      if case .userSpecifiedSystem(let v)? = system {return v}
      return String()
    }
    set {system = .userSpecifiedSystem(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The source system of the entry. Only applicable when `search_result_type`
  /// is ENTRY.
  public enum OneOf_System: Equatable {
    /// Output only. This field indicates the entry's source system that Data Catalog
    /// integrates with, such as BigQuery or Cloud Pub/Sub.
    case integratedSystem(Google_Cloud_Datacatalog_V1_IntegratedSystem)
    /// This field indicates the entry's source system that Data Catalog does not
    /// integrate with.
    case userSpecifiedSystem(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Datacatalog_V1_SearchCatalogResult.OneOf_System, rhs: Google_Cloud_Datacatalog_V1_SearchCatalogResult.OneOf_System) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.integratedSystem, .integratedSystem): return {
        guard case .integratedSystem(let l) = lhs, case .integratedSystem(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userSpecifiedSystem, .userSpecifiedSystem): return {
        guard case .userSpecifiedSystem(let l) = lhs, case .userSpecifiedSystem(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.datacatalog.v1"

extension Google_Cloud_Datacatalog_V1_SearchResultType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEARCH_RESULT_TYPE_UNSPECIFIED"),
    1: .same(proto: "ENTRY"),
    2: .same(proto: "TAG_TEMPLATE"),
    3: .same(proto: "ENTRY_GROUP"),
  ]
}

extension Google_Cloud_Datacatalog_V1_SearchCatalogResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchCatalogResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "search_result_type"),
    2: .standard(proto: "search_result_subtype"),
    3: .standard(proto: "relative_resource_name"),
    4: .standard(proto: "linked_resource"),
    8: .standard(proto: "integrated_system"),
    9: .standard(proto: "user_specified_system"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.searchResultType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.searchResultSubtype) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.relativeResourceName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.linkedResource) }()
      case 8: try {
        if self.system != nil {try decoder.handleConflictingOneOf()}
        var v: Google_Cloud_Datacatalog_V1_IntegratedSystem?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.system = .integratedSystem(v)}
      }()
      case 9: try {
        if self.system != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.system = .userSpecifiedSystem(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.searchResultType != .unspecified {
      try visitor.visitSingularEnumField(value: self.searchResultType, fieldNumber: 1)
    }
    if !self.searchResultSubtype.isEmpty {
      try visitor.visitSingularStringField(value: self.searchResultSubtype, fieldNumber: 2)
    }
    if !self.relativeResourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.relativeResourceName, fieldNumber: 3)
    }
    if !self.linkedResource.isEmpty {
      try visitor.visitSingularStringField(value: self.linkedResource, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.system {
    case .integratedSystem?: try {
      guard case .integratedSystem(let v)? = self.system else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }()
    case .userSpecifiedSystem?: try {
      guard case .userSpecifiedSystem(let v)? = self.system else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datacatalog_V1_SearchCatalogResult, rhs: Google_Cloud_Datacatalog_V1_SearchCatalogResult) -> Bool {
    if lhs.searchResultType != rhs.searchResultType {return false}
    if lhs.searchResultSubtype != rhs.searchResultSubtype {return false}
    if lhs.relativeResourceName != rhs.relativeResourceName {return false}
    if lhs.linkedResource != rhs.linkedResource {return false}
    if lhs.system != rhs.system {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
