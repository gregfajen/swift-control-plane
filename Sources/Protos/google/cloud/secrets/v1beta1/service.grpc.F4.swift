//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/secrets/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Secrets_V1beta1_SecretManagerServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Secrets_V1beta1_SecretManagerServiceClientProtocol: GRPCClient {
  func listSecrets(
    _ request: Google_Cloud_Secrets_V1beta1_ListSecretsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_ListSecretsRequest, Google_Cloud_Secrets_V1beta1_ListSecretsResponse>

  func createSecret(
    _ request: Google_Cloud_Secrets_V1beta1_CreateSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_CreateSecretRequest, Google_Cloud_Secrets_V1beta1_Secret>

  func addSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_AddSecretVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_AddSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion>

  func getSecret(
    _ request: Google_Cloud_Secrets_V1beta1_GetSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_GetSecretRequest, Google_Cloud_Secrets_V1beta1_Secret>

  func updateSecret(
    _ request: Google_Cloud_Secrets_V1beta1_UpdateSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_UpdateSecretRequest, Google_Cloud_Secrets_V1beta1_Secret>

  func deleteSecret(
    _ request: Google_Cloud_Secrets_V1beta1_DeleteSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_DeleteSecretRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listSecretVersions(
    _ request: Google_Cloud_Secrets_V1beta1_ListSecretVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_ListSecretVersionsRequest, Google_Cloud_Secrets_V1beta1_ListSecretVersionsResponse>

  func getSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_GetSecretVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_GetSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion>

  func accessSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_AccessSecretVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_AccessSecretVersionRequest, Google_Cloud_Secrets_V1beta1_AccessSecretVersionResponse>

  func disableSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_DisableSecretVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_DisableSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion>

  func enableSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_EnableSecretVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_EnableSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion>

  func destroySecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_DestroySecretVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_DestroySecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion>

  func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

}

extension Google_Cloud_Secrets_V1beta1_SecretManagerServiceClientProtocol {

  /// Lists [Secrets][google.cloud.secrets.v1beta1.Secret].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSecrets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSecrets(
    _ request: Google_Cloud_Secrets_V1beta1_ListSecretsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_ListSecretsRequest, Google_Cloud_Secrets_V1beta1_ListSecretsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/ListSecrets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new [Secret][google.cloud.secrets.v1beta1.Secret] containing no [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSecret.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSecret(
    _ request: Google_Cloud_Secrets_V1beta1_CreateSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_CreateSecretRequest, Google_Cloud_Secrets_V1beta1_Secret> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/CreateSecret",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] containing secret data and attaches
  /// it to an existing [Secret][google.cloud.secrets.v1beta1.Secret].
  ///
  /// - Parameters:
  ///   - request: Request to send to AddSecretVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_AddSecretVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_AddSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/AddSecretVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets metadata for a given [Secret][google.cloud.secrets.v1beta1.Secret].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSecret.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSecret(
    _ request: Google_Cloud_Secrets_V1beta1_GetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_GetSecretRequest, Google_Cloud_Secrets_V1beta1_Secret> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/GetSecret",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates metadata of an existing [Secret][google.cloud.secrets.v1beta1.Secret].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSecret.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateSecret(
    _ request: Google_Cloud_Secrets_V1beta1_UpdateSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_UpdateSecretRequest, Google_Cloud_Secrets_V1beta1_Secret> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/UpdateSecret",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a [Secret][google.cloud.secrets.v1beta1.Secret].
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSecret.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSecret(
    _ request: Google_Cloud_Secrets_V1beta1_DeleteSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_DeleteSecretRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/DeleteSecret",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion]. This call does not return secret
  /// data.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSecretVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSecretVersions(
    _ request: Google_Cloud_Secrets_V1beta1_ListSecretVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_ListSecretVersionsRequest, Google_Cloud_Secrets_V1beta1_ListSecretVersionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/ListSecretVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets metadata for a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// `projects/*/secrets/*/versions/latest` is an alias to the `latest`
  /// [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSecretVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_GetSecretVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_GetSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/GetSecretVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Accesses a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion]. This call returns the secret data.
  ///
  /// `projects/*/secrets/*/versions/latest` is an alias to the `latest`
  /// [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// - Parameters:
  ///   - request: Request to send to AccessSecretVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func accessSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_AccessSecretVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_AccessSecretVersionRequest, Google_Cloud_Secrets_V1beta1_AccessSecretVersionResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/AccessSecretVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Disables a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// Sets the [state][google.cloud.secrets.v1beta1.SecretVersion.state] of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] to
  /// [DISABLED][google.cloud.secrets.v1beta1.SecretVersion.State.DISABLED].
  ///
  /// - Parameters:
  ///   - request: Request to send to DisableSecretVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func disableSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_DisableSecretVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_DisableSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/DisableSecretVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Enables a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// Sets the [state][google.cloud.secrets.v1beta1.SecretVersion.state] of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] to
  /// [ENABLED][google.cloud.secrets.v1beta1.SecretVersion.State.ENABLED].
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableSecretVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func enableSecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_EnableSecretVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_EnableSecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/EnableSecretVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Destroys a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// Sets the [state][google.cloud.secrets.v1beta1.SecretVersion.state] of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] to
  /// [DESTROYED][google.cloud.secrets.v1beta1.SecretVersion.State.DESTROYED] and irrevocably destroys the
  /// secret data.
  ///
  /// - Parameters:
  ///   - request: Request to send to DestroySecretVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func destroySecretVersion(
    _ request: Google_Cloud_Secrets_V1beta1_DestroySecretVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Secrets_V1beta1_DestroySecretVersionRequest, Google_Cloud_Secrets_V1beta1_SecretVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/DestroySecretVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the access control policy on the specified secret. Replaces any
  /// existing policy.
  ///
  /// Permissions on [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion] are enforced according
  /// to the policy set on the associated [Secret][google.cloud.secrets.v1beta1.Secret].
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/SetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the access control policy for a secret.
  /// Returns empty policy if the secret exists and does not have a policy set.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/GetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns permissions that a caller has for the specified secret.
  /// If the secret does not exist, this call returns an empty set of
  /// permissions, not a NOT_FOUND error.
  ///
  /// Note: This operation is designed to be used for building permission-aware
  /// UIs and command-line tools, not for authorization checking. This operation
  /// may "fail open" without warning.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.secrets.v1beta1.SecretManagerService/TestIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Secrets_V1beta1_SecretManagerServiceClient: Google_Cloud_Secrets_V1beta1_SecretManagerServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.secrets.v1beta1.SecretManagerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Secrets_V1beta1_SecretManagerServiceProvider: CallHandlerProvider {
  /// Lists [Secrets][google.cloud.secrets.v1beta1.Secret].
  func listSecrets(request: Google_Cloud_Secrets_V1beta1_ListSecretsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_ListSecretsResponse>
  /// Creates a new [Secret][google.cloud.secrets.v1beta1.Secret] containing no [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion].
  func createSecret(request: Google_Cloud_Secrets_V1beta1_CreateSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_Secret>
  /// Creates a new [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] containing secret data and attaches
  /// it to an existing [Secret][google.cloud.secrets.v1beta1.Secret].
  func addSecretVersion(request: Google_Cloud_Secrets_V1beta1_AddSecretVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_SecretVersion>
  /// Gets metadata for a given [Secret][google.cloud.secrets.v1beta1.Secret].
  func getSecret(request: Google_Cloud_Secrets_V1beta1_GetSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_Secret>
  /// Updates metadata of an existing [Secret][google.cloud.secrets.v1beta1.Secret].
  func updateSecret(request: Google_Cloud_Secrets_V1beta1_UpdateSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_Secret>
  /// Deletes a [Secret][google.cloud.secrets.v1beta1.Secret].
  func deleteSecret(request: Google_Cloud_Secrets_V1beta1_DeleteSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Lists [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion]. This call does not return secret
  /// data.
  func listSecretVersions(request: Google_Cloud_Secrets_V1beta1_ListSecretVersionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_ListSecretVersionsResponse>
  /// Gets metadata for a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// `projects/*/secrets/*/versions/latest` is an alias to the `latest`
  /// [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  func getSecretVersion(request: Google_Cloud_Secrets_V1beta1_GetSecretVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_SecretVersion>
  /// Accesses a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion]. This call returns the secret data.
  ///
  /// `projects/*/secrets/*/versions/latest` is an alias to the `latest`
  /// [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  func accessSecretVersion(request: Google_Cloud_Secrets_V1beta1_AccessSecretVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_AccessSecretVersionResponse>
  /// Disables a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// Sets the [state][google.cloud.secrets.v1beta1.SecretVersion.state] of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] to
  /// [DISABLED][google.cloud.secrets.v1beta1.SecretVersion.State.DISABLED].
  func disableSecretVersion(request: Google_Cloud_Secrets_V1beta1_DisableSecretVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_SecretVersion>
  /// Enables a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// Sets the [state][google.cloud.secrets.v1beta1.SecretVersion.state] of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] to
  /// [ENABLED][google.cloud.secrets.v1beta1.SecretVersion.State.ENABLED].
  func enableSecretVersion(request: Google_Cloud_Secrets_V1beta1_EnableSecretVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_SecretVersion>
  /// Destroys a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
  ///
  /// Sets the [state][google.cloud.secrets.v1beta1.SecretVersion.state] of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] to
  /// [DESTROYED][google.cloud.secrets.v1beta1.SecretVersion.State.DESTROYED] and irrevocably destroys the
  /// secret data.
  func destroySecretVersion(request: Google_Cloud_Secrets_V1beta1_DestroySecretVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Secrets_V1beta1_SecretVersion>
  /// Sets the access control policy on the specified secret. Replaces any
  /// existing policy.
  ///
  /// Permissions on [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion] are enforced according
  /// to the policy set on the associated [Secret][google.cloud.secrets.v1beta1.Secret].
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Gets the access control policy for a secret.
  /// Returns empty policy if the secret exists and does not have a policy set.
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Returns permissions that a caller has for the specified secret.
  /// If the secret does not exist, this call returns an empty set of
  /// permissions, not a NOT_FOUND error.
  ///
  /// Note: This operation is designed to be used for building permission-aware
  /// UIs and command-line tools, not for authorization checking. This operation
  /// may "fail open" without warning.
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
}

extension Google_Cloud_Secrets_V1beta1_SecretManagerServiceProvider {
  public var serviceName: Substring { return "google.cloud.secrets.v1beta1.SecretManagerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListSecrets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSecrets(request: request, context: context)
        }
      }

    case "CreateSecret":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createSecret(request: request, context: context)
        }
      }

    case "AddSecretVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addSecretVersion(request: request, context: context)
        }
      }

    case "GetSecret":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSecret(request: request, context: context)
        }
      }

    case "UpdateSecret":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateSecret(request: request, context: context)
        }
      }

    case "DeleteSecret":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSecret(request: request, context: context)
        }
      }

    case "ListSecretVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSecretVersions(request: request, context: context)
        }
      }

    case "GetSecretVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSecretVersion(request: request, context: context)
        }
      }

    case "AccessSecretVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.accessSecretVersion(request: request, context: context)
        }
      }

    case "DisableSecretVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.disableSecretVersion(request: request, context: context)
        }
      }

    case "EnableSecretVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.enableSecretVersion(request: request, context: context)
        }
      }

    case "DestroySecretVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.destroySecretVersion(request: request, context: context)
        }
      }

    case "SetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

