//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/functions/v1/functions.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Functions_V1_CloudFunctionsServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Functions_V1_CloudFunctionsServiceClientProtocol: GRPCClient {
  func listFunctions(
    _ request: Google_Cloud_Functions_V1_ListFunctionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_ListFunctionsRequest, Google_Cloud_Functions_V1_ListFunctionsResponse>

  func getFunction(
    _ request: Google_Cloud_Functions_V1_GetFunctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_GetFunctionRequest, Google_Cloud_Functions_V1_CloudFunction>

  func createFunction(
    _ request: Google_Cloud_Functions_V1_CreateFunctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_CreateFunctionRequest, Google_Longrunning_Operation>

  func updateFunction(
    _ request: Google_Cloud_Functions_V1_UpdateFunctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_UpdateFunctionRequest, Google_Longrunning_Operation>

  func deleteFunction(
    _ request: Google_Cloud_Functions_V1_DeleteFunctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_DeleteFunctionRequest, Google_Longrunning_Operation>

  func callFunction(
    _ request: Google_Cloud_Functions_V1_CallFunctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_CallFunctionRequest, Google_Cloud_Functions_V1_CallFunctionResponse>

  func generateUploadUrl(
    _ request: Google_Cloud_Functions_V1_GenerateUploadUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_GenerateUploadUrlRequest, Google_Cloud_Functions_V1_GenerateUploadUrlResponse>

  func generateDownloadUrl(
    _ request: Google_Cloud_Functions_V1_GenerateDownloadUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Functions_V1_GenerateDownloadUrlRequest, Google_Cloud_Functions_V1_GenerateDownloadUrlResponse>

  func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

}

extension Google_Cloud_Functions_V1_CloudFunctionsServiceClientProtocol {

  /// Returns a list of functions that belong to the requested project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFunctions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listFunctions(
    _ request: Google_Cloud_Functions_V1_ListFunctionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_ListFunctionsRequest, Google_Cloud_Functions_V1_ListFunctionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/ListFunctions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a function with the given name from the requested project.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFunction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFunction(
    _ request: Google_Cloud_Functions_V1_GetFunctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_GetFunctionRequest, Google_Cloud_Functions_V1_CloudFunction> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/GetFunction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new function. If a function with the given name already exists in
  /// the specified project, the long running operation will return
  /// `ALREADY_EXISTS` error.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFunction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFunction(
    _ request: Google_Cloud_Functions_V1_CreateFunctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_CreateFunctionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/CreateFunction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates existing function.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFunction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFunction(
    _ request: Google_Cloud_Functions_V1_UpdateFunctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_UpdateFunctionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/UpdateFunction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a function with the given name from the specified project. If the
  /// given function is used by some trigger, the trigger will be updated to
  /// remove this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFunction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFunction(
    _ request: Google_Cloud_Functions_V1_DeleteFunctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_DeleteFunctionRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/DeleteFunction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Synchronously invokes a deployed Cloud Function. To be used for testing
  /// purposes as very limited traffic is allowed. For more information on
  /// the actual limits, refer to
  /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
  ///
  /// - Parameters:
  ///   - request: Request to send to CallFunction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func callFunction(
    _ request: Google_Cloud_Functions_V1_CallFunctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_CallFunctionRequest, Google_Cloud_Functions_V1_CallFunctionResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/CallFunction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a signed URL for uploading a function source code.
  /// For more information about the signed URL usage see:
  /// https://cloud.google.com/storage/docs/access-control/signed-urls.
  /// Once the function source code upload is complete, the used signed
  /// URL should be provided in CreateFunction or UpdateFunction request
  /// as a reference to the function source code.
  ///
  /// When uploading source code to the generated signed URL, please follow
  /// these restrictions:
  ///
  /// * Source file type should be a zip file.
  /// * Source file size should not exceed 100MB limit.
  /// * No credentials should be attached - the signed URLs provide access to the
  ///   target bucket using internal service identity; if credentials were
  ///   attached, the identity from the credentials would be used, but that
  ///   identity does not have permissions to upload files to the URL.
  ///
  /// When making a HTTP PUT request, these two headers need to be specified:
  ///
  /// * `content-type: application/zip`
  /// * `x-goog-content-length-range: 0,104857600`
  ///
  /// And this header SHOULD NOT be specified:
  ///
  /// * `Authorization: Bearer YOUR_TOKEN`
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateUploadUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateUploadUrl(
    _ request: Google_Cloud_Functions_V1_GenerateUploadUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_GenerateUploadUrlRequest, Google_Cloud_Functions_V1_GenerateUploadUrlResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/GenerateUploadUrl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns a signed URL for downloading deployed function source code.
  /// The URL is only valid for a limited period and should be used within
  /// minutes after generation.
  /// For more information about the signed URL usage see:
  /// https://cloud.google.com/storage/docs/access-control/signed-urls
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateDownloadUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateDownloadUrl(
    _ request: Google_Cloud_Functions_V1_GenerateDownloadUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Functions_V1_GenerateDownloadUrlRequest, Google_Cloud_Functions_V1_GenerateDownloadUrlResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/GenerateDownloadUrl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the IAM access control policy on the specified function.
  /// Replaces any existing policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/SetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the IAM access control policy for a function.
  /// Returns an empty policy if the function exists and does not have a policy
  /// set.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/GetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Tests the specified permissions against the IAM access control policy
  /// for a function.
  /// If the function does not exist, this will return an empty set of
  /// permissions, not a NOT_FOUND error.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.functions.v1.CloudFunctionsService/TestIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Functions_V1_CloudFunctionsServiceClient: Google_Cloud_Functions_V1_CloudFunctionsServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.functions.v1.CloudFunctionsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Functions_V1_CloudFunctionsServiceProvider: CallHandlerProvider {
  /// Returns a list of functions that belong to the requested project.
  func listFunctions(request: Google_Cloud_Functions_V1_ListFunctionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Functions_V1_ListFunctionsResponse>
  /// Returns a function with the given name from the requested project.
  func getFunction(request: Google_Cloud_Functions_V1_GetFunctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Functions_V1_CloudFunction>
  /// Creates a new function. If a function with the given name already exists in
  /// the specified project, the long running operation will return
  /// `ALREADY_EXISTS` error.
  func createFunction(request: Google_Cloud_Functions_V1_CreateFunctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates existing function.
  func updateFunction(request: Google_Cloud_Functions_V1_UpdateFunctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a function with the given name from the specified project. If the
  /// given function is used by some trigger, the trigger will be updated to
  /// remove this function.
  func deleteFunction(request: Google_Cloud_Functions_V1_DeleteFunctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Synchronously invokes a deployed Cloud Function. To be used for testing
  /// purposes as very limited traffic is allowed. For more information on
  /// the actual limits, refer to
  /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
  func callFunction(request: Google_Cloud_Functions_V1_CallFunctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Functions_V1_CallFunctionResponse>
  /// Returns a signed URL for uploading a function source code.
  /// For more information about the signed URL usage see:
  /// https://cloud.google.com/storage/docs/access-control/signed-urls.
  /// Once the function source code upload is complete, the used signed
  /// URL should be provided in CreateFunction or UpdateFunction request
  /// as a reference to the function source code.
  ///
  /// When uploading source code to the generated signed URL, please follow
  /// these restrictions:
  ///
  /// * Source file type should be a zip file.
  /// * Source file size should not exceed 100MB limit.
  /// * No credentials should be attached - the signed URLs provide access to the
  ///   target bucket using internal service identity; if credentials were
  ///   attached, the identity from the credentials would be used, but that
  ///   identity does not have permissions to upload files to the URL.
  ///
  /// When making a HTTP PUT request, these two headers need to be specified:
  ///
  /// * `content-type: application/zip`
  /// * `x-goog-content-length-range: 0,104857600`
  ///
  /// And this header SHOULD NOT be specified:
  ///
  /// * `Authorization: Bearer YOUR_TOKEN`
  func generateUploadUrl(request: Google_Cloud_Functions_V1_GenerateUploadUrlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Functions_V1_GenerateUploadUrlResponse>
  /// Returns a signed URL for downloading deployed function source code.
  /// The URL is only valid for a limited period and should be used within
  /// minutes after generation.
  /// For more information about the signed URL usage see:
  /// https://cloud.google.com/storage/docs/access-control/signed-urls
  func generateDownloadUrl(request: Google_Cloud_Functions_V1_GenerateDownloadUrlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Functions_V1_GenerateDownloadUrlResponse>
  /// Sets the IAM access control policy on the specified function.
  /// Replaces any existing policy.
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Gets the IAM access control policy for a function.
  /// Returns an empty policy if the function exists and does not have a policy
  /// set.
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Tests the specified permissions against the IAM access control policy
  /// for a function.
  /// If the function does not exist, this will return an empty set of
  /// permissions, not a NOT_FOUND error.
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
}

extension Google_Cloud_Functions_V1_CloudFunctionsServiceProvider {
  public var serviceName: Substring { return "google.cloud.functions.v1.CloudFunctionsService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListFunctions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listFunctions(request: request, context: context)
        }
      }

    case "GetFunction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFunction(request: request, context: context)
        }
      }

    case "CreateFunction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createFunction(request: request, context: context)
        }
      }

    case "UpdateFunction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateFunction(request: request, context: context)
        }
      }

    case "DeleteFunction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteFunction(request: request, context: context)
        }
      }

    case "CallFunction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.callFunction(request: request, context: context)
        }
      }

    case "GenerateUploadUrl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.generateUploadUrl(request: request, context: context)
        }
      }

    case "GenerateDownloadUrl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.generateDownloadUrl(request: request, context: context)
        }
      }

    case "SetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

