// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/module.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Module applies a computer vision algorithm to a subproblem of a visual
/// inspection task.
public struct Google_Cloud_Visualinspection_V1beta1_Module {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of the module.
  public var type: Google_Cloud_Visualinspection_V1beta1_Module.OneOf_Type? = nil

  /// Anomaly detection.
  public var anomalyDetection: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule {
    get {
      if case .anomalyDetection(let v)? = type {return v}
      return Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule()
    }
    set {type = .anomalyDetection(newValue)}
  }

  /// Sparse alignment localization.
  public var sparseAlignmentLocalization: Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule {
    get {
      if case .sparseAlignmentLocalization(let v)? = type {return v}
      return Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule()
    }
    set {type = .sparseAlignmentLocalization(newValue)}
  }

  /// Localization refinement.
  public var localizationRefinement: Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule {
    get {
      if case .localizationRefinement(let v)? = type {return v}
      return Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule()
    }
    set {type = .localizationRefinement(newValue)}
  }

  /// Object detection.
  public var objectDetection: Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule {
    get {
      if case .objectDetection(let v)? = type {return v}
      return Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule()
    }
    set {type = .objectDetection(newValue)}
  }

  /// Segmentation.
  public var segmentation: Google_Cloud_Visualinspection_V1beta1_SegmentationModule {
    get {
      if case .segmentation(let v)? = type {return v}
      return Google_Cloud_Visualinspection_V1beta1_SegmentationModule()
    }
    set {type = .segmentation(newValue)}
  }

  /// Classification.
  public var classification: Google_Cloud_Visualinspection_V1beta1_ClassificationModule {
    get {
      if case .classification(let v)? = type {return v}
      return Google_Cloud_Visualinspection_V1beta1_ClassificationModule()
    }
    set {type = .classification(newValue)}
  }

  /// Output only. Resource name for Module generated by the system.
  public var name: String = String()

  /// Output only. Timestamp when this Module was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when Module was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Required. A user friendly display name for the Module.
  /// The name can be up to 128 characters long and can consist of any UTF-8
  /// characters.
  public var displayName: String = String()

  /// A description for this Module.
  public var description_p: String = String()

  /// Configuration for this Module. Each Module may define its own
  /// configuration options.
  public var config: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _config ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  /// The labels with user-defined metadata to organize your Modules.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label keys must start with a letter.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of the module.
  public enum OneOf_Type: Equatable {
    /// Anomaly detection.
    case anomalyDetection(Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule)
    /// Sparse alignment localization.
    case sparseAlignmentLocalization(Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule)
    /// Localization refinement.
    case localizationRefinement(Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule)
    /// Object detection.
    case objectDetection(Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule)
    /// Segmentation.
    case segmentation(Google_Cloud_Visualinspection_V1beta1_SegmentationModule)
    /// Classification.
    case classification(Google_Cloud_Visualinspection_V1beta1_ClassificationModule)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Module.OneOf_Type, rhs: Google_Cloud_Visualinspection_V1beta1_Module.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.anomalyDetection, .anomalyDetection): return {
        guard case .anomalyDetection(let l) = lhs, case .anomalyDetection(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sparseAlignmentLocalization, .sparseAlignmentLocalization): return {
        guard case .sparseAlignmentLocalization(let l) = lhs, case .sparseAlignmentLocalization(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.localizationRefinement, .localizationRefinement): return {
        guard case .localizationRefinement(let l) = lhs, case .localizationRefinement(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.objectDetection, .objectDetection): return {
        guard case .objectDetection(let l) = lhs, case .objectDetection(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.segmentation, .segmentation): return {
        guard case .segmentation(let l) = lhs, case .segmentation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.classification, .classification): return {
        guard case .classification(let l) = lhs, case .classification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _config: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

/// Detailed input and output information of an anomaly detection Module.
public struct Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Input regions within which to detect anomalies. If not provided, the full
  /// image is used as input.
  public var queryRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Required. Classification labels to train the model.
  public var classificationLabels: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Required. Classification predictions by the model.
  public var classificationPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed input and output information of a sparse alignment localization
/// module.
public struct Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Regions within the query image to align. Multiple regions could be aligned
  /// per Image.
  public var queryRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions within the template image to transfer to the query image.
  public var targetRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions that define the portion of the template image from which to extract
  /// local features. These have both include/exclude Annotations, distinguished
  /// by labels on the AnnotationSpec.
  public var inspectionRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// The target regions transformed by the module.
  public var targetRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  /// The inspection regions transformed by the module.
  public var inspectionRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed input and output information of a localization refinment module.
public struct Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Regions within the query image to align. Multiple regions could
  /// be aligned per Image.
  public var queryRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions within the template image to transfer to the query image.
  public var targetRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions which customize the search process for each target region.
  public var localSearchRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// The target regions transformed by the module.
  public var targetRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  /// The inspection regions transformed by the module.
  public var localSearchRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed input and output information of an object detection module.
public struct Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Regions to search on for the query image, anything outside of these regions
  /// will not be considered from the module. These regions are defined in the
  /// template image and applied "as is" to each query image. If query_regions
  /// are not specified, the full image will be used as a single query region.
  public var queryRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions within the template image to transfer to the query image.
  public var targetRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Required. The regions for each object to learn the representation of.
  public var objectRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// The target regions transformed by the module.
  public var targetRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  /// Required. The objects regions detected by the module.
  public var objectRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed input and output information of an image segmentation module.
public struct Google_Cloud_Visualinspection_V1beta1_SegmentationModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Regions to search on for the query image, anything outside of these regions
  /// will not be considered from the module. The query images can be defined in
  /// the template image or predicted per image from other modules.  If
  /// query_regions are not specified, the full image will be used as a single
  /// query region.
  public var queryRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions within the template image to transfer to the query image.
  public var inspectionRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Required. The segmentation regions to learn the representation of.
  public var segmentationRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// The segmentation predictions in inspection regions by the module.
  public var inspectionRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  /// Required. The segmentation predictions by the module.
  public var segmentationPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed input and output information of an image classification module.
public struct Google_Cloud_Visualinspection_V1beta1_ClassificationModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Regions to search on for the query image, anything outside of these regions
  /// will not be considered from the module. The query images can be defined in
  /// the template image or predicted per image from other modules.  If
  /// query_regions are not specified, the full image will be used as a single
  /// query region.
  public var queryRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Regions within the template image to transfer to the query image.
  public var inspectionRegions: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Required. Classification labels to train the module.
  public var classificationLabels: [Google_Cloud_Visualinspection_V1beta1_AnnotationInput] = []

  /// Classification predictions in inspection regions by the module.
  public var inspectionRegionPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  /// Required. Classification predictions by the module.
  public var classificationPredictions: [Google_Cloud_Visualinspection_V1beta1_AnnotationOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies the source of Annotations for a Module input.
public struct Google_Cloud_Visualinspection_V1beta1_AnnotationInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The AnnotationSet ID containing input Annotations. The expected
  /// AnnotationType of this AnnotationSet will depend on the Module.
  public var annotationSetID: String = String()

  /// Required. The AnnotationSet containing input Annotations. The expected
  /// AnnotationType of this AnnotationSet will depend on the Module.
  public var annotationSet: String = String()

  /// A list of AnnotationSpecs to subselect Annotations in this AnnotationSet.
  /// If specified, only Annotations which have an AnnotationSpec in the list are
  /// used as input to the Module.
  public var annotationSpecAllowlist: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies the output for Annotations produced by a Module.
public struct Google_Cloud_Visualinspection_V1beta1_AnnotationOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The AnnotationSet ID containing output Annotations. The expected
  /// AnnotationType of this AnnotationSet will depend on the Module.
  public var annotationSetID: String = String()

  /// Required. The AnnotationSet containing output Annotations. The expected
  /// AnnotationType of this AnnotationSet will depend on the Module.
  public var annotationSet: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_Module: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Module"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .standard(proto: "anomaly_detection"),
    9: .standard(proto: "sparse_alignment_localization"),
    10: .standard(proto: "localization_refinement"),
    11: .standard(proto: "object_detection"),
    12: .same(proto: "segmentation"),
    13: .same(proto: "classification"),
    1: .same(proto: "name"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "update_time"),
    4: .standard(proto: "display_name"),
    5: .same(proto: "description"),
    6: .same(proto: "config"),
    7: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 8: try {
        var v: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .anomalyDetection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .anomalyDetection(v)}
      }()
      case 9: try {
        var v: Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .sparseAlignmentLocalization(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .sparseAlignmentLocalization(v)}
      }()
      case 10: try {
        var v: Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .localizationRefinement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .localizationRefinement(v)}
      }()
      case 11: try {
        var v: Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .objectDetection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .objectDetection(v)}
      }()
      case 12: try {
        var v: Google_Cloud_Visualinspection_V1beta1_SegmentationModule?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .segmentation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .segmentation(v)}
      }()
      case 13: try {
        var v: Google_Cloud_Visualinspection_V1beta1_ClassificationModule?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .classification(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .classification(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 7)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .anomalyDetection?: try {
      guard case .anomalyDetection(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .sparseAlignmentLocalization?: try {
      guard case .sparseAlignmentLocalization(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .localizationRefinement?: try {
      guard case .localizationRefinement(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .objectDetection?: try {
      guard case .objectDetection(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .segmentation?: try {
      guard case .segmentation(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .classification?: try {
      guard case .classification(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Module, rhs: Google_Cloud_Visualinspection_V1beta1_Module) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._config != rhs._config {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnomalyDetectionModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_regions"),
    2: .standard(proto: "classification_labels"),
    3: .standard(proto: "classification_predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.queryRegions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.classificationLabels) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.classificationPredictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryRegions, fieldNumber: 1)
    }
    if !self.classificationLabels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classificationLabels, fieldNumber: 2)
    }
    if !self.classificationPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classificationPredictions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule, rhs: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionModule) -> Bool {
    if lhs.queryRegions != rhs.queryRegions {return false}
    if lhs.classificationLabels != rhs.classificationLabels {return false}
    if lhs.classificationPredictions != rhs.classificationPredictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SparseAlignmentLocalizationModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_regions"),
    2: .standard(proto: "target_regions"),
    3: .standard(proto: "inspection_regions"),
    4: .standard(proto: "target_region_predictions"),
    5: .standard(proto: "inspection_region_predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.queryRegions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.targetRegions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.inspectionRegions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.targetRegionPredictions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.inspectionRegionPredictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryRegions, fieldNumber: 1)
    }
    if !self.targetRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targetRegions, fieldNumber: 2)
    }
    if !self.inspectionRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inspectionRegions, fieldNumber: 3)
    }
    if !self.targetRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targetRegionPredictions, fieldNumber: 4)
    }
    if !self.inspectionRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inspectionRegionPredictions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule, rhs: Google_Cloud_Visualinspection_V1beta1_SparseAlignmentLocalizationModule) -> Bool {
    if lhs.queryRegions != rhs.queryRegions {return false}
    if lhs.targetRegions != rhs.targetRegions {return false}
    if lhs.inspectionRegions != rhs.inspectionRegions {return false}
    if lhs.targetRegionPredictions != rhs.targetRegionPredictions {return false}
    if lhs.inspectionRegionPredictions != rhs.inspectionRegionPredictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocalizationRefinementModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_regions"),
    2: .standard(proto: "target_regions"),
    3: .standard(proto: "local_search_regions"),
    4: .standard(proto: "target_region_predictions"),
    5: .standard(proto: "local_search_region_predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.queryRegions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.targetRegions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.localSearchRegions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.targetRegionPredictions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.localSearchRegionPredictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryRegions, fieldNumber: 1)
    }
    if !self.targetRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targetRegions, fieldNumber: 2)
    }
    if !self.localSearchRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.localSearchRegions, fieldNumber: 3)
    }
    if !self.targetRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targetRegionPredictions, fieldNumber: 4)
    }
    if !self.localSearchRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.localSearchRegionPredictions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule, rhs: Google_Cloud_Visualinspection_V1beta1_LocalizationRefinementModule) -> Bool {
    if lhs.queryRegions != rhs.queryRegions {return false}
    if lhs.targetRegions != rhs.targetRegions {return false}
    if lhs.localSearchRegions != rhs.localSearchRegions {return false}
    if lhs.targetRegionPredictions != rhs.targetRegionPredictions {return false}
    if lhs.localSearchRegionPredictions != rhs.localSearchRegionPredictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectDetectionModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_regions"),
    2: .standard(proto: "target_regions"),
    3: .standard(proto: "object_regions"),
    4: .standard(proto: "target_region_predictions"),
    5: .standard(proto: "object_region_predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.queryRegions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.targetRegions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.objectRegions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.targetRegionPredictions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.objectRegionPredictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryRegions, fieldNumber: 1)
    }
    if !self.targetRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targetRegions, fieldNumber: 2)
    }
    if !self.objectRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectRegions, fieldNumber: 3)
    }
    if !self.targetRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targetRegionPredictions, fieldNumber: 4)
    }
    if !self.objectRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectRegionPredictions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule, rhs: Google_Cloud_Visualinspection_V1beta1_ObjectDetectionModule) -> Bool {
    if lhs.queryRegions != rhs.queryRegions {return false}
    if lhs.targetRegions != rhs.targetRegions {return false}
    if lhs.objectRegions != rhs.objectRegions {return false}
    if lhs.targetRegionPredictions != rhs.targetRegionPredictions {return false}
    if lhs.objectRegionPredictions != rhs.objectRegionPredictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_SegmentationModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SegmentationModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_regions"),
    2: .standard(proto: "inspection_regions"),
    3: .standard(proto: "segmentation_regions"),
    4: .standard(proto: "inspection_region_predictions"),
    5: .standard(proto: "segmentation_predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.queryRegions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inspectionRegions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.segmentationRegions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.inspectionRegionPredictions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.segmentationPredictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryRegions, fieldNumber: 1)
    }
    if !self.inspectionRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inspectionRegions, fieldNumber: 2)
    }
    if !self.segmentationRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segmentationRegions, fieldNumber: 3)
    }
    if !self.inspectionRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inspectionRegionPredictions, fieldNumber: 4)
    }
    if !self.segmentationPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segmentationPredictions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_SegmentationModule, rhs: Google_Cloud_Visualinspection_V1beta1_SegmentationModule) -> Bool {
    if lhs.queryRegions != rhs.queryRegions {return false}
    if lhs.inspectionRegions != rhs.inspectionRegions {return false}
    if lhs.segmentationRegions != rhs.segmentationRegions {return false}
    if lhs.inspectionRegionPredictions != rhs.inspectionRegionPredictions {return false}
    if lhs.segmentationPredictions != rhs.segmentationPredictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ClassificationModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClassificationModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_regions"),
    2: .standard(proto: "inspection_regions"),
    3: .standard(proto: "classification_labels"),
    4: .standard(proto: "inspection_region_predictions"),
    5: .standard(proto: "classification_predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.queryRegions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inspectionRegions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.classificationLabels) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.inspectionRegionPredictions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.classificationPredictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryRegions, fieldNumber: 1)
    }
    if !self.inspectionRegions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inspectionRegions, fieldNumber: 2)
    }
    if !self.classificationLabels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classificationLabels, fieldNumber: 3)
    }
    if !self.inspectionRegionPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inspectionRegionPredictions, fieldNumber: 4)
    }
    if !self.classificationPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classificationPredictions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ClassificationModule, rhs: Google_Cloud_Visualinspection_V1beta1_ClassificationModule) -> Bool {
    if lhs.queryRegions != rhs.queryRegions {return false}
    if lhs.inspectionRegions != rhs.inspectionRegions {return false}
    if lhs.classificationLabels != rhs.classificationLabels {return false}
    if lhs.inspectionRegionPredictions != rhs.inspectionRegionPredictions {return false}
    if lhs.classificationPredictions != rhs.classificationPredictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_AnnotationInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnnotationInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_set_id"),
    3: .standard(proto: "annotation_set"),
    2: .standard(proto: "annotation_spec_allowlist"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.annotationSetID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.annotationSpecAllowlist) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.annotationSet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSetID, fieldNumber: 1)
    }
    if !self.annotationSpecAllowlist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.annotationSpecAllowlist, fieldNumber: 2)
    }
    if !self.annotationSet.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSet, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnnotationInput, rhs: Google_Cloud_Visualinspection_V1beta1_AnnotationInput) -> Bool {
    if lhs.annotationSetID != rhs.annotationSetID {return false}
    if lhs.annotationSet != rhs.annotationSet {return false}
    if lhs.annotationSpecAllowlist != rhs.annotationSpecAllowlist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_AnnotationOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnnotationOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_set_id"),
    2: .standard(proto: "annotation_set"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.annotationSetID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.annotationSet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSetID, fieldNumber: 1)
    }
    if !self.annotationSet.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSet, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnnotationOutput, rhs: Google_Cloud_Visualinspection_V1beta1_AnnotationOutput) -> Bool {
    if lhs.annotationSetID != rhs.annotationSetID {return false}
    if lhs.annotationSet != rhs.annotationSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
