// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/dataset.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Dataset is a collection of Images and Annotations, which could be used to
/// solve a specifc visual inspection problem.
public struct Google_Cloud_Visualinspection_V1beta1_Dataset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name for the Dataset generated by the system.
  public var name: String = String()

  /// Required. A user friendly display name for the Dataset.
  public var displayName: String = String()

  /// Output only. Timestamp when this Dataset was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this Dataset was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  /// The labels with user-defined metadata to organize your dataset.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label keys must start with a letter.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  public var labels: Dictionary<String,String> = [:]

  /// Output only. The number of Images in the Dataset.
  public var imageCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Describes the location from where we import data into a Dataset.
public struct Google_Cloud_Visualinspection_V1beta1_ImportDataConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The source of the input.
  public var source: Google_Cloud_Visualinspection_V1beta1_ImportDataConfig.OneOf_Source? = nil

  /// The Google Cloud Storage location for the input content.
  /// Supported file extensions:
  /// 1. A JSON/CSV file.
  /// 2. Image file. Supported extension includes jpg,jpeg,png.
  public var gcsSource: Google_Cloud_Visualinspection_V1beta1_GcsSource {
    get {
      if case .gcsSource(let v)? = source {return v}
      return Google_Cloud_Visualinspection_V1beta1_GcsSource()
    }
    set {source = .gcsSource(newValue)}
  }

  /// Import data from another Dataset.
  public var datasetResource: Google_Cloud_Visualinspection_V1beta1_DatasetSource {
    get {
      if case .datasetResource(let v)? = source {return v}
      return Google_Cloud_Visualinspection_V1beta1_DatasetSource()
    }
    set {source = .datasetResource(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The source of the input.
  public enum OneOf_Source: Equatable {
    /// The Google Cloud Storage location for the input content.
    /// Supported file extensions:
    /// 1. A JSON/CSV file.
    /// 2. Image file. Supported extension includes jpg,jpeg,png.
    case gcsSource(Google_Cloud_Visualinspection_V1beta1_GcsSource)
    /// Import data from another Dataset.
    case datasetResource(Google_Cloud_Visualinspection_V1beta1_DatasetSource)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ImportDataConfig.OneOf_Source, rhs: Google_Cloud_Visualinspection_V1beta1_ImportDataConfig.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsSource, .gcsSource): return {
        guard case .gcsSource(let l) = lhs, case .gcsSource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.datasetResource, .datasetResource): return {
        guard case .datasetResource(let l) = lhs, case .datasetResource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Describes the source Dataset from where we import data.
public struct Google_Cloud_Visualinspection_V1beta1_DatasetSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Dataset resource name. It needs to be in the same project and
  /// location.
  public var dataset: String = String()

  /// Filter on Images to import.
  public var imageFilter: String = String()

  /// Filter on Annotations to import. Only Annotations on already filtered in
  /// Images are considered.
  public var annotationFilter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Describes the location to where we export data from a Dataset.
public struct Google_Cloud_Visualinspection_V1beta1_ExportDataConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Google Cloud Storage location where the output is to be written to.
  /// In the given directory a new directory will be created with name:
  /// export-data-<dataset-display-name>-<timestamp-of-export-call> where
  /// timestamp is in YYYYMMDDHHMMSS format. All export
  /// output will be written into that directory. Inside that directory,
  /// annotations with the same schema will be grouped into sub directories
  /// which are named with the corresponding annotations' schema title. Inside
  /// these sub directories, a schema.yaml will be created to describe the
  /// output format.
  public var gcsDestination: Google_Cloud_Visualinspection_V1beta1_GcsDestination {
    get {return _gcsDestination ?? Google_Cloud_Visualinspection_V1beta1_GcsDestination()}
    set {_gcsDestination = newValue}
  }
  /// Returns true if `gcsDestination` has been explicitly set.
  public var hasGcsDestination: Bool {return self._gcsDestination != nil}
  /// Clears the value of `gcsDestination`. Subsequent reads from it will return its default value.
  public mutating func clearGcsDestination() {self._gcsDestination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gcsDestination: Google_Cloud_Visualinspection_V1beta1_GcsDestination? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_Dataset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dataset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .same(proto: "etag"),
    6: .same(proto: "labels"),
    7: .standard(proto: "image_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.imageCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 5)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 6)
    }
    if self.imageCount != 0 {
      try visitor.visitSingularInt64Field(value: self.imageCount, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Dataset, rhs: Google_Cloud_Visualinspection_V1beta1_Dataset) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.imageCount != rhs.imageCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ImportDataConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_source"),
    2: .standard(proto: "dataset_resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Visualinspection_V1beta1_GcsSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .gcsSource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .gcsSource(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Visualinspection_V1beta1_DatasetSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .datasetResource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .datasetResource(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.source {
    case .gcsSource?: try {
      guard case .gcsSource(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .datasetResource?: try {
      guard case .datasetResource(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ImportDataConfig, rhs: Google_Cloud_Visualinspection_V1beta1_ImportDataConfig) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DatasetSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatasetSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    2: .standard(proto: "image_filter"),
    3: .standard(proto: "annotation_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imageFilter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.annotationFilter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if !self.imageFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.imageFilter, fieldNumber: 2)
    }
    if !self.annotationFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationFilter, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DatasetSource, rhs: Google_Cloud_Visualinspection_V1beta1_DatasetSource) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.imageFilter != rhs.imageFilter {return false}
    if lhs.annotationFilter != rhs.annotationFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ExportDataConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gcsDestination) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._gcsDestination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ExportDataConfig, rhs: Google_Cloud_Visualinspection_V1beta1_ExportDataConfig) -> Bool {
    if lhs._gcsDestination != rhs._gcsDestination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
