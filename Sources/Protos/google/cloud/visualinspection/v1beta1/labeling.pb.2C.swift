// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/labeling.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Labeling job to trigger human labeling for adding annotations to images.
public struct Google_Cloud_Visualinspection_V1beta1_LabelingJob {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var labelingConfig: Google_Cloud_Visualinspection_V1beta1_LabelingJob.OneOf_LabelingConfig? = nil

  /// Optional. Labeling Config for `AnomalyDetection` module.
  public var anomalyDetectionLabelingConfig: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig {
    get {
      if case .anomalyDetectionLabelingConfig(let v)? = labelingConfig {return v}
      return Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig()
    }
    set {labelingConfig = .anomalyDetectionLabelingConfig(newValue)}
  }

  /// Output only. Resource name of the LabelingJob.
  public var name: String = String()

  /// Required. The user-defined name of the LabelingJob.
  /// The name can be up to 128 characters long and can be consist of any UTF-8
  /// characters.
  /// Display name of a LabelingJob.
  public var displayName: String = String()

  /// Required. The resource name of an existing AnnotationSet for all
  /// annotations created through this labeling job. The corresponding
  /// AnnotationSet needs to match the `labeling_config`, e.g.,
  /// AnomalyDetectionLabelingConfig needs AnnotationSet with
  /// `classification_label` specified. Format:
  ///
  /// projects/{project}/locations/{location}/datasets/{dataset}/annotationSets/{annotation_set}.
  public var outputAnnotationSet: String = String()

  /// Required. The Google Cloud Storage location of the instruction PDF. This
  /// pdf is shared with labelers, and provides detailed description on how to
  /// label.
  public var instructionUri: String = String()

  /// Required. The full resource name of annotation specs that will be used for
  /// labeling. Format
  ///
  /// `projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}`.
  public var annotationSpecs: [String] = []

  /// Optional. The SpecialistPools' resource names associated with this job.
  public var specialistPools: [String] = []

  /// Optional. The active learning config, e.g., maximum number of items to
  /// label.
  public var activeLearningConfig: Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig {
    get {return _activeLearningConfig ?? Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig()}
    set {_activeLearningConfig = newValue}
  }
  /// Returns true if `activeLearningConfig` has been explicitly set.
  public var hasActiveLearningConfig: Bool {return self._activeLearningConfig != nil}
  /// Clears the value of `activeLearningConfig`. Subsequent reads from it will return its default value.
  public mutating func clearActiveLearningConfig() {self._activeLearningConfig = nil}

  /// Output only. The detailed state of the job.
  public var state: Google_Cloud_Visualinspection_V1beta1_LabelingJob.JobState = .unspecified

  /// Output only. Current labeling job progress percentage scaled in interval
  /// [0, 100], indicating the percentage of DataItems that has been finished.
  public var labelingProgress: Int32 = 0

  /// Output only. Timestamp when this LabelingJob was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this LabelingJob was updated most recently.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Optional. The labels with user-defined metadata to organize your
  /// LabelingJob.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label keys must start with a letter.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_LabelingConfig: Equatable {
    /// Optional. Labeling Config for `AnomalyDetection` module.
    case anomalyDetectionLabelingConfig(Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_LabelingJob.OneOf_LabelingConfig, rhs: Google_Cloud_Visualinspection_V1beta1_LabelingJob.OneOf_LabelingConfig) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.anomalyDetectionLabelingConfig, .anomalyDetectionLabelingConfig): return {
        guard case .anomalyDetectionLabelingConfig(let l) = lhs, case .anomalyDetectionLabelingConfig(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Describes the state of a labeling job.
  public enum JobState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The job state is unspecified.
    case unspecified // = 0

    /// The job has been just created or resumed and processing has not yet
    /// begun.
    case queued // = 1

    /// The service is preparing to run the job.
    case pending // = 2

    /// The job is in progress.
    case running // = 3

    /// The job completed successfully.
    case succeeded // = 4

    /// The job failed.
    case failed // = 5

    /// The job is being cancelled. From this state the job may only go to
    /// either JOB_STATE_SUCCEEDED, JOB_STATE_FAILED or JOB_STATE_CANCELLED.
    case cancelling // = 6

    /// The job has been cancelled.
    case cancelled // = 7

    /// The job has been stopped, and can be resumed.
    case paused // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .queued
      case 2: self = .pending
      case 3: self = .running
      case 4: self = .succeeded
      case 5: self = .failed
      case 6: self = .cancelling
      case 7: self = .cancelled
      case 8: self = .paused
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .queued: return 1
      case .pending: return 2
      case .running: return 3
      case .succeeded: return 4
      case .failed: return 5
      case .cancelling: return 6
      case .cancelled: return 7
      case .paused: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _activeLearningConfig: Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig? = nil
  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Visualinspection_V1beta1_LabelingJob.JobState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Visualinspection_V1beta1_LabelingJob.JobState] = [
    .unspecified,
    .queued,
    .pending,
    .running,
    .succeeded,
    .failed,
    .cancelling,
    .cancelled,
    .paused,
  ]
}

#endif  // swift(>=4.2)

/// Configuration of active learning.
public struct Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Max number of human labeled data items.
  public var maxItemCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Labeling configuration of anomaly detection.
public struct Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The bounding box annotation set for anomaly detection module.
  /// Format:
  ///
  /// projects/{project}/locations/{location}/datasets/{dataset}/annotationSets/{annotation_set}.
  public var inputBoundingBoxAnnotationSets: [String] = []

  /// A list of AnnotationSpecs to subselect Annotations in
  /// `input_bounding_box_annotation_sets`. If specified, only Annotations which
  /// have an AnnotationSpec in the list will be used for labeling. Format:
  ///
  /// `projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}`.
  public var annotationSpecAllowlist: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// SpecialistPool represents customers' own workforce to work on their data
/// labeling jobs. It includes a group of specialist managers who are responsible
/// for managing the labelers in this pool as well as customers' data labeling
/// jobs associated with this pool.
/// Customers create specialist pool as well as start data labeling jobs on
/// Cloud, managers and labelers work with the jobs using CrowdCompute console.
public struct Google_Cloud_Visualinspection_V1beta1_SpecialistPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name for the SpecialistPool.
  public var name: String = String()

  /// Required. A user friendly display name for the Dataset.
  public var displayName: String = String()

  /// Output only. The number of Specialists in this SpecialistPool.
  public var specialistManagersCount: Int32 = 0

  /// The email addresses of the specialists in the SpecialistPool.
  public var specialistManagerEmails: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_LabelingJob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelingJob"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "anomaly_detection_labeling_config"),
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    4: .standard(proto: "output_annotation_set"),
    5: .standard(proto: "instruction_uri"),
    6: .standard(proto: "annotation_specs"),
    7: .standard(proto: "specialist_pools"),
    8: .standard(proto: "active_learning_config"),
    9: .same(proto: "state"),
    10: .standard(proto: "labeling_progress"),
    11: .standard(proto: "create_time"),
    12: .standard(proto: "update_time"),
    13: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try {
        var v: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig?
        if let current = self.labelingConfig {
          try decoder.handleConflictingOneOf()
          if case .anomalyDetectionLabelingConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.labelingConfig = .anomalyDetectionLabelingConfig(v)}
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outputAnnotationSet) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.instructionUri) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.annotationSpecs) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.specialistPools) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._activeLearningConfig) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.labelingProgress) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if case .anomalyDetectionLabelingConfig(let v)? = self.labelingConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.outputAnnotationSet.isEmpty {
      try visitor.visitSingularStringField(value: self.outputAnnotationSet, fieldNumber: 4)
    }
    if !self.instructionUri.isEmpty {
      try visitor.visitSingularStringField(value: self.instructionUri, fieldNumber: 5)
    }
    if !self.annotationSpecs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.annotationSpecs, fieldNumber: 6)
    }
    if !self.specialistPools.isEmpty {
      try visitor.visitRepeatedStringField(value: self.specialistPools, fieldNumber: 7)
    }
    if let v = self._activeLearningConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 9)
    }
    if self.labelingProgress != 0 {
      try visitor.visitSingularInt32Field(value: self.labelingProgress, fieldNumber: 10)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_LabelingJob, rhs: Google_Cloud_Visualinspection_V1beta1_LabelingJob) -> Bool {
    if lhs.labelingConfig != rhs.labelingConfig {return false}
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.outputAnnotationSet != rhs.outputAnnotationSet {return false}
    if lhs.instructionUri != rhs.instructionUri {return false}
    if lhs.annotationSpecs != rhs.annotationSpecs {return false}
    if lhs.specialistPools != rhs.specialistPools {return false}
    if lhs._activeLearningConfig != rhs._activeLearningConfig {return false}
    if lhs.state != rhs.state {return false}
    if lhs.labelingProgress != rhs.labelingProgress {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_LabelingJob.JobState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_STATE_UNSPECIFIED"),
    1: .same(proto: "JOB_STATE_QUEUED"),
    2: .same(proto: "JOB_STATE_PENDING"),
    3: .same(proto: "JOB_STATE_RUNNING"),
    4: .same(proto: "JOB_STATE_SUCCEEDED"),
    5: .same(proto: "JOB_STATE_FAILED"),
    6: .same(proto: "JOB_STATE_CANCELLING"),
    7: .same(proto: "JOB_STATE_CANCELLED"),
    8: .same(proto: "JOB_STATE_PAUSED"),
  ]
}

extension Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveLearningConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_item_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.maxItemCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxItemCount != 0 {
      try visitor.visitSingularInt64Field(value: self.maxItemCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig, rhs: Google_Cloud_Visualinspection_V1beta1_ActiveLearningConfig) -> Bool {
    if lhs.maxItemCount != rhs.maxItemCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnomalyDetectionLabelingConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_bounding_box_annotation_sets"),
    2: .standard(proto: "annotation_spec_allowlist"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.inputBoundingBoxAnnotationSets) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.annotationSpecAllowlist) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputBoundingBoxAnnotationSets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.inputBoundingBoxAnnotationSets, fieldNumber: 1)
    }
    if !self.annotationSpecAllowlist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.annotationSpecAllowlist, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig, rhs: Google_Cloud_Visualinspection_V1beta1_AnomalyDetectionLabelingConfig) -> Bool {
    if lhs.inputBoundingBoxAnnotationSets != rhs.inputBoundingBoxAnnotationSets {return false}
    if lhs.annotationSpecAllowlist != rhs.annotationSpecAllowlist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_SpecialistPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpecialistPool"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "specialist_managers_count"),
    4: .standard(proto: "specialist_manager_emails"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.specialistManagersCount) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.specialistManagerEmails) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if self.specialistManagersCount != 0 {
      try visitor.visitSingularInt32Field(value: self.specialistManagersCount, fieldNumber: 3)
    }
    if !self.specialistManagerEmails.isEmpty {
      try visitor.visitRepeatedStringField(value: self.specialistManagerEmails, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_SpecialistPool, rhs: Google_Cloud_Visualinspection_V1beta1_SpecialistPool) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.specialistManagersCount != rhs.specialistManagersCount {return false}
    if lhs.specialistManagerEmails != rhs.specialistManagerEmails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
