// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/metrics.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// All metrics for the solution.
public struct Google_Cloud_Visualinspection_V1beta1_Metrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Metrics for the solution at different slices.
  public var metricsSlice: Dictionary<String,Google_Cloud_Visualinspection_V1beta1_MetricsSlice> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Metrics at a particular slice.
/// A slice can be "pixel" level, "image" level, "component" level, "unit" level,
/// and/or "product" level depending on the solution and the input data.
public struct Google_Cloud_Visualinspection_V1beta1_MetricsSlice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The AnnotationSpec which this MetricSlice refers to. It is
  /// empty if this MetricSlice aggregates across AnnotationSpecs.
  public var annotationSpec: String = String()

  /// Output only. The AnnotationSpec display name which this MetricSlice refers
  /// to. It is empty if this MetricSlice aggregates across AnnotationSpecs.
  public var displayName: String = String()

  /// Output only. The number of examples used to create this evaluation metrics
  /// instance.
  public var evaluatedExampleCount: Int32 = 0

  /// Output only. Model metrics across confidence thresholds.
  public var confidenceLevelModelMetrics: [Google_Cloud_Visualinspection_V1beta1_MetricsSlice.ConfidenceLevelModelMetrics] = []

  /// Output only. Average model metrics.
  public var averageModelMetrics: Google_Cloud_Visualinspection_V1beta1_ModelMetrics {
    get {return _averageModelMetrics ?? Google_Cloud_Visualinspection_V1beta1_ModelMetrics()}
    set {_averageModelMetrics = newValue}
  }
  /// Returns true if `averageModelMetrics` has been explicitly set.
  public var hasAverageModelMetrics: Bool {return self._averageModelMetrics != nil}
  /// Clears the value of `averageModelMetrics`. Subsequent reads from it will return its default value.
  public mutating func clearAverageModelMetrics() {self._averageModelMetrics = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Model metrics at a specific threshold.
  public struct ConfidenceLevelModelMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. Model metrics.
    public var modelMetrics: Google_Cloud_Visualinspection_V1beta1_ModelMetrics {
      get {return _modelMetrics ?? Google_Cloud_Visualinspection_V1beta1_ModelMetrics()}
      set {_modelMetrics = newValue}
    }
    /// Returns true if `modelMetrics` has been explicitly set.
    public var hasModelMetrics: Bool {return self._modelMetrics != nil}
    /// Clears the value of `modelMetrics`. Subsequent reads from it will return its default value.
    public mutating func clearModelMetrics() {self._modelMetrics = nil}

    /// Output only. Confidence threshold in the range [0, 1].
    public var confidenceThreshold: Float = 0

    /// Output only. Pixel level confidence threshold in the range [0, 1].
    public var pixelConfidenceThreshold: Float = 0

    /// Output only. Cluster distance threshold in the range [0, 1] normalized by
    /// the diagonal length of the image.
    public var clusterDistanceThreshold: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _modelMetrics: Google_Cloud_Visualinspection_V1beta1_ModelMetrics? = nil
  }

  public init() {}

  fileprivate var _averageModelMetrics: Google_Cloud_Visualinspection_V1beta1_ModelMetrics? = nil
}

/// Model metrics which can vary depending on the model. These are not assumed to
/// refer to defect states in particular.
public struct Google_Cloud_Visualinspection_V1beta1_ModelMetrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The false negative rate in the range [0, 1]. This is the rate
  /// with which the model incorrectly classifies examples as negative when they
  /// are positive. This is consistent with the following definition:
  ///
  /// https:
  /// //en.wikipedia.org/wiki/False_positives_
  /// // and_false_negatives#False_positive_and_false_negative_rates.
  public var falseNegativeRate: Float = 0

  /// Output only. The false positive rate in the range [0, 1]. This is the rate
  /// with which the model  incorrectly classifies examples as positive when they
  /// are negative. This is consistent with the following definition:
  ///
  /// https:
  /// //en.wikipedia.org/wiki/False_positives_
  /// // and_false_negatives#False_positive_and_false_negative_rates.
  public var falsePositiveRate: Float = 0

  /// Output only. The precision in the range [0, 1]. Precision measures the
  /// ratio of correctly classified examples by the model against all the
  /// predictions made by the model. Please see
  /// https://en.wikipedia.org/wiki/Precision_and_recall for its definition.
  public var precision: Float = 0

  /// Output only. The recall in the range [0, 1]. Recall measures the ratio of
  /// correctly predicted labels by the model against all true examples of that
  /// label. Please see https://en.wikipedia.org/wiki/Precision_and_recall for
  /// its definition.
  public var recall: Float = 0

  /// Output only. The Intersection over union (IOU) in the range [0, 1]. IOU
  /// measures the proportion of label regions that are common between ground
  /// truth and model predictions versus their union. Please see
  /// https://en.wikipedia.org/wiki/Jaccard_index for its definition.
  public var iou: Float = 0

  /// Output only. The Dice similarity coefficient in the range [0, 1]. Dice
  /// similarity coefficient is similar to IOU except that the common label
  /// region is weighted twice in the calculation. Please see its definition
  /// here: https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient
  public var diceSimilarityCoefficient: Float = 0

  /// Output only. Confusion matrix for the classifications.
  /// Only present for aggregated metrics.
  public var confusionMatrix: Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix {
    get {return _confusionMatrix ?? Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix()}
    set {_confusionMatrix = newValue}
  }
  /// Returns true if `confusionMatrix` has been explicitly set.
  public var hasConfusionMatrix: Bool {return self._confusionMatrix != nil}
  /// Clears the value of `confusionMatrix`. Subsequent reads from it will return its default value.
  public mutating func clearConfusionMatrix() {self._confusionMatrix = nil}

  /// Output only. The average precision in the range [0, 1].
  public var averagePrecision: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _confusionMatrix: Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix? = nil
}

/// Confusion matrix across different class labels (if present).
public struct Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Counts of items across slices.
  /// For example, rows[i][j].count indicate the count for class_labels[i] as
  /// present in ground truth versus class_labels[j] as predicted by the model.
  /// The number of rows is the same as individual number of "counts" in a Row as
  /// well as the number of class_labels. So if the number of class_labels is n,
  /// then rows count is n as well as each rows.count has also count n.
  public var rows: [Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix.Row] = []

  /// Output only. Class labels as the rows/columns of the confusion matrix.
  public var classLabels: [String] = []

  /// Output only. Class AnnotationSpecs as the rows/columns of the confusion
  /// matrix.
  public var annotationSpecs: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Individual row for the confusion matrix.
  public struct Row {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. Count of items in a "slice" classified at a particular
    /// class_label in the ground truth versus that classified by the solution.
    public var count: [Int64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_Metrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Metrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metrics_slice"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Visualinspection_V1beta1_MetricsSlice>.self, value: &self.metricsSlice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metricsSlice.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Visualinspection_V1beta1_MetricsSlice>.self, value: self.metricsSlice, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Metrics, rhs: Google_Cloud_Visualinspection_V1beta1_Metrics) -> Bool {
    if lhs.metricsSlice != rhs.metricsSlice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_MetricsSlice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MetricsSlice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .standard(proto: "annotation_spec"),
    9: .standard(proto: "display_name"),
    10: .standard(proto: "evaluated_example_count"),
    5: .standard(proto: "confidence_level_model_metrics"),
    7: .standard(proto: "average_model_metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.confidenceLevelModelMetrics) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._averageModelMetrics) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.annotationSpec) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.evaluatedExampleCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.confidenceLevelModelMetrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.confidenceLevelModelMetrics, fieldNumber: 5)
    }
    if let v = self._averageModelMetrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.annotationSpec.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSpec, fieldNumber: 8)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 9)
    }
    if self.evaluatedExampleCount != 0 {
      try visitor.visitSingularInt32Field(value: self.evaluatedExampleCount, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_MetricsSlice, rhs: Google_Cloud_Visualinspection_V1beta1_MetricsSlice) -> Bool {
    if lhs.annotationSpec != rhs.annotationSpec {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.evaluatedExampleCount != rhs.evaluatedExampleCount {return false}
    if lhs.confidenceLevelModelMetrics != rhs.confidenceLevelModelMetrics {return false}
    if lhs._averageModelMetrics != rhs._averageModelMetrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_MetricsSlice.ConfidenceLevelModelMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_MetricsSlice.protoMessageName + ".ConfidenceLevelModelMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "model_metrics"),
    2: .standard(proto: "confidence_threshold"),
    3: .standard(proto: "pixel_confidence_threshold"),
    4: .standard(proto: "cluster_distance_threshold"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._modelMetrics) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidenceThreshold) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.pixelConfidenceThreshold) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.clusterDistanceThreshold) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._modelMetrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.confidenceThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.confidenceThreshold, fieldNumber: 2)
    }
    if self.pixelConfidenceThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.pixelConfidenceThreshold, fieldNumber: 3)
    }
    if self.clusterDistanceThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.clusterDistanceThreshold, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_MetricsSlice.ConfidenceLevelModelMetrics, rhs: Google_Cloud_Visualinspection_V1beta1_MetricsSlice.ConfidenceLevelModelMetrics) -> Bool {
    if lhs._modelMetrics != rhs._modelMetrics {return false}
    if lhs.confidenceThreshold != rhs.confidenceThreshold {return false}
    if lhs.pixelConfidenceThreshold != rhs.pixelConfidenceThreshold {return false}
    if lhs.clusterDistanceThreshold != rhs.clusterDistanceThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ModelMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "false_negative_rate"),
    2: .standard(proto: "false_positive_rate"),
    3: .same(proto: "precision"),
    4: .same(proto: "recall"),
    5: .same(proto: "iou"),
    6: .standard(proto: "dice_similarity_coefficient"),
    7: .standard(proto: "confusion_matrix"),
    8: .standard(proto: "average_precision"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.falseNegativeRate) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.falsePositiveRate) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.precision) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.recall) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.iou) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.diceSimilarityCoefficient) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._confusionMatrix) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.averagePrecision) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.falseNegativeRate != 0 {
      try visitor.visitSingularFloatField(value: self.falseNegativeRate, fieldNumber: 1)
    }
    if self.falsePositiveRate != 0 {
      try visitor.visitSingularFloatField(value: self.falsePositiveRate, fieldNumber: 2)
    }
    if self.precision != 0 {
      try visitor.visitSingularFloatField(value: self.precision, fieldNumber: 3)
    }
    if self.recall != 0 {
      try visitor.visitSingularFloatField(value: self.recall, fieldNumber: 4)
    }
    if self.iou != 0 {
      try visitor.visitSingularFloatField(value: self.iou, fieldNumber: 5)
    }
    if self.diceSimilarityCoefficient != 0 {
      try visitor.visitSingularFloatField(value: self.diceSimilarityCoefficient, fieldNumber: 6)
    }
    if let v = self._confusionMatrix {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.averagePrecision != 0 {
      try visitor.visitSingularFloatField(value: self.averagePrecision, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ModelMetrics, rhs: Google_Cloud_Visualinspection_V1beta1_ModelMetrics) -> Bool {
    if lhs.falseNegativeRate != rhs.falseNegativeRate {return false}
    if lhs.falsePositiveRate != rhs.falsePositiveRate {return false}
    if lhs.precision != rhs.precision {return false}
    if lhs.recall != rhs.recall {return false}
    if lhs.iou != rhs.iou {return false}
    if lhs.diceSimilarityCoefficient != rhs.diceSimilarityCoefficient {return false}
    if lhs._confusionMatrix != rhs._confusionMatrix {return false}
    if lhs.averagePrecision != rhs.averagePrecision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfusionMatrix"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rows"),
    2: .standard(proto: "class_labels"),
    3: .standard(proto: "annotation_specs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rows) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.classLabels) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.annotationSpecs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 1)
    }
    if !self.classLabels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.classLabels, fieldNumber: 2)
    }
    if !self.annotationSpecs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.annotationSpecs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix, rhs: Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix) -> Bool {
    if lhs.rows != rhs.rows {return false}
    if lhs.classLabels != rhs.classLabels {return false}
    if lhs.annotationSpecs != rhs.annotationSpecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix.Row: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix.protoMessageName + ".Row"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.count.isEmpty {
      try visitor.visitPackedInt64Field(value: self.count, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix.Row, rhs: Google_Cloud_Visualinspection_V1beta1_ConfusionMatrix.Row) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
