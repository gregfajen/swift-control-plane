// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/annotation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Annotation is used to assign specific AnnotationSpec to a particular Image.
public struct Google_Cloud_Visualinspection_V1beta1_Annotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Annotation type of the Annotation.
  public var annotationType: OneOf_AnnotationType? {
    get {return _storage._annotationType}
    set {_uniqueStorage()._annotationType = newValue}
  }

  /// A BoundingBox Annotation.
  public var box: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation {
    get {
      if case .box(let v)? = _storage._annotationType {return v}
      return Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation()
    }
    set {_uniqueStorage()._annotationType = .box(newValue)}
  }

  /// A BoundingPoly Annotation.
  public var polygon: Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation {
    get {
      if case .polygon(let v)? = _storage._annotationType {return v}
      return Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation()
    }
    set {_uniqueStorage()._annotationType = .polygon(newValue)}
  }

  /// A Classification Label Annotation.
  public var classificationLabel: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation {
    get {
      if case .classificationLabel(let v)? = _storage._annotationType {return v}
      return Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation()
    }
    set {_uniqueStorage()._annotationType = .classificationLabel(newValue)}
  }

  /// A Mask Annotation.
  public var mask: Google_Cloud_Visualinspection_V1beta1_MaskAnnotation {
    get {
      if case .mask(let v)? = _storage._annotationType {return v}
      return Google_Cloud_Visualinspection_V1beta1_MaskAnnotation()
    }
    set {_uniqueStorage()._annotationType = .mask(newValue)}
  }

  /// A Polyline Annotation,
  public var polyline: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation {
    get {
      if case .polyline(let v)? = _storage._annotationType {return v}
      return Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation()
    }
    set {_uniqueStorage()._annotationType = .polyline(newValue)}
  }

  /// Output only. Resource name for Annotation generated by the system.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Output only. Timestamp when this Annotation was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Timestamp when Annotation was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// The resource ID of the AnnotationSpec that this Annotation pertains to.
  /// The AnnotationSpec must be in the same ancestor Dataset.
  /// The field could be empty for a MaskAnnotation.
  public var annotationSpecID: String {
    get {return _storage._annotationSpecID}
    set {_uniqueStorage()._annotationSpecID = newValue}
  }

  /// Required. The resource ID of the AnnotationSet that this Annotation belongs
  /// to.
  public var annotationSetID: String {
    get {return _storage._annotationSetID}
    set {_uniqueStorage()._annotationSetID = newValue}
  }

  /// The resource ID of the parent Annotation. Parent annotation represents a
  /// region in the original Image.
  public var parentAnnotationID: String {
    get {return _storage._parentAnnotationID}
    set {_uniqueStorage()._parentAnnotationID = newValue}
  }

  /// Output only. Source of the Annotation.
  public var source: Google_Cloud_Visualinspection_V1beta1_Annotation.Source {
    get {return _storage._source ?? Google_Cloud_Visualinspection_V1beta1_Annotation.Source()}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {_uniqueStorage()._source = nil}

  /// The labels with user-defined metadata to organize your Annotations.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label keys must start with a letter.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Annotation type of the Annotation.
  public enum OneOf_AnnotationType: Equatable {
    /// A BoundingBox Annotation.
    case box(Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation)
    /// A BoundingPoly Annotation.
    case polygon(Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation)
    /// A Classification Label Annotation.
    case classificationLabel(Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation)
    /// A Mask Annotation.
    case mask(Google_Cloud_Visualinspection_V1beta1_MaskAnnotation)
    /// A Polyline Annotation,
    case polyline(Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Annotation.OneOf_AnnotationType, rhs: Google_Cloud_Visualinspection_V1beta1_Annotation.OneOf_AnnotationType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.box, .box): return {
        guard case .box(let l) = lhs, case .box(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.polygon, .polygon): return {
        guard case .polygon(let l) = lhs, case .polygon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.classificationLabel, .classificationLabel): return {
        guard case .classificationLabel(let l) = lhs, case .classificationLabel(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mask, .mask): return {
        guard case .mask(let l) = lhs, case .mask(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.polyline, .polyline): return {
        guard case .polyline(let l) = lhs, case .polyline(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Source of the Annotation.
  public struct Source {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Source type.
    public var type: Google_Cloud_Visualinspection_V1beta1_Annotation.Source.SourceType = .unspecified

    /// Resource name of the source model when the Annotation is
    /// MACHINE_PRODUCED.
    public var sourceModel: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Source type of the Annotation.
    public enum SourceType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Unspecified source type.
      case unspecified // = 0

      /// The Annotation is generated by a human user.
      case humanProduced // = 1

      /// The Annotation is generated by a ML model.
      case machineProduced // = 2

      /// The Annotation is generated by machine, and it has
      /// child Annotation with HUMAN_PRODUCED.
      case humanLabeled // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .humanProduced
        case 2: self = .machineProduced
        case 3: self = .humanLabeled
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .humanProduced: return 1
        case .machineProduced: return 2
        case .humanLabeled: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Visualinspection_V1beta1_Annotation.Source.SourceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Visualinspection_V1beta1_Annotation.Source.SourceType] = [
    .unspecified,
    .humanProduced,
    .machineProduced,
    .humanLabeled,
  ]
}

#endif  // swift(>=4.2)

/// Detailed information for BoundingBox Annotation.
public struct Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A box representing a rectangle region on the image.
  /// A box is supposed to have exactly four vertices in clockwise order.
  /// Vertices are represented in normalized format.
  public var normalizedBoundingBox: Google_Cloud_Visualinspection_V1beta1_NormalizedBoundingPoly {
    get {return _normalizedBoundingBox ?? Google_Cloud_Visualinspection_V1beta1_NormalizedBoundingPoly()}
    set {_normalizedBoundingBox = newValue}
  }
  /// Returns true if `normalizedBoundingBox` has been explicitly set.
  public var hasNormalizedBoundingBox: Bool {return self._normalizedBoundingBox != nil}
  /// Clears the value of `normalizedBoundingBox`. Subsequent reads from it will return its default value.
  public mutating func clearNormalizedBoundingBox() {self._normalizedBoundingBox = nil}

  /// Output only. A confidence score between 0.0 and 1.0. A higher value
  /// means greater confidence about the annotation.
  public var confidenceScore: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _normalizedBoundingBox: Google_Cloud_Visualinspection_V1beta1_NormalizedBoundingPoly? = nil
}

/// Detailed information for BoundingPoly Annotation.
public struct Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A polygon region on the image.
  /// A polygon is supposed to have N vertices in clockwise order.
  /// Vertices are represented in normalized format.
  public var normalizedBoundingPoly: Google_Cloud_Visualinspection_V1beta1_NormalizedBoundingPoly {
    get {return _normalizedBoundingPoly ?? Google_Cloud_Visualinspection_V1beta1_NormalizedBoundingPoly()}
    set {_normalizedBoundingPoly = newValue}
  }
  /// Returns true if `normalizedBoundingPoly` has been explicitly set.
  public var hasNormalizedBoundingPoly: Bool {return self._normalizedBoundingPoly != nil}
  /// Clears the value of `normalizedBoundingPoly`. Subsequent reads from it will return its default value.
  public mutating func clearNormalizedBoundingPoly() {self._normalizedBoundingPoly = nil}

  /// Output only. A confidence score between 0.0 and 1.0. A higher value
  /// means greater confidence that the annotation is positive.
  public var confidenceScore: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _normalizedBoundingPoly: Google_Cloud_Visualinspection_V1beta1_NormalizedBoundingPoly? = nil
}

/// Detailed information for ClassificationLabel Annotation.
public struct Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. A confidence score between 0.0 and 1.0. A higher value
  /// means greater confidence that the annotation is positive.
  public var confidenceScore: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed information for Mask Annotation.
public struct Google_Cloud_Visualinspection_V1beta1_MaskAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. One channel image which is encoded as an 8bit lossless PNG.
  /// The size of the image will be the same as the original image. For a
  /// specific pixel, darker color means less confidence in correctness of the
  /// cateogry in the category_meask for the corresponding pixel. Black means no
  /// confidence and white means full confidence.
  public var confidenceMask: Google_Cloud_Visualinspection_V1beta1_Image {
    get {return _confidenceMask ?? Google_Cloud_Visualinspection_V1beta1_Image()}
    set {_confidenceMask = newValue}
  }
  /// Returns true if `confidenceMask` has been explicitly set.
  public var hasConfidenceMask: Bool {return self._confidenceMask != nil}
  /// Clears the value of `confidenceMask`. Subsequent reads from it will return its default value.
  public mutating func clearConfidenceMask() {self._confidenceMask = nil}

  /// Three channel image which is encoded as an 8bit lossless PNG. Each pixel in
  /// the image mask represents the category which the pixel in the original
  /// image belong to. Each color is mapped to one AnnotationSpec based on
  /// annotation_spec_colors.
  public var categoryMask: Google_Cloud_Visualinspection_V1beta1_Image {
    get {return _categoryMask ?? Google_Cloud_Visualinspection_V1beta1_Image()}
    set {_categoryMask = newValue}
  }
  /// Returns true if `categoryMask` has been explicitly set.
  public var hasCategoryMask: Bool {return self._categoryMask != nil}
  /// Clears the value of `categoryMask`. Subsequent reads from it will return its default value.
  public mutating func clearCategoryMask() {self._categoryMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _confidenceMask: Google_Cloud_Visualinspection_V1beta1_Image? = nil
  fileprivate var _categoryMask: Google_Cloud_Visualinspection_V1beta1_Image? = nil
}

/// Detailed information for Polyline Annotation.
public struct Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A polyline consisting of connected straight-line segments.
  public var normalizedPolyline: Google_Cloud_Visualinspection_V1beta1_NormalizedPolyline {
    get {return _normalizedPolyline ?? Google_Cloud_Visualinspection_V1beta1_NormalizedPolyline()}
    set {_normalizedPolyline = newValue}
  }
  /// Returns true if `normalizedPolyline` has been explicitly set.
  public var hasNormalizedPolyline: Bool {return self._normalizedPolyline != nil}
  /// Clears the value of `normalizedPolyline`. Subsequent reads from it will return its default value.
  public mutating func clearNormalizedPolyline() {self._normalizedPolyline = nil}

  /// Output only. A confidence score between 0.0 and 1.0. A higher value
  /// means greater confidence that the annotation is positive.
  public var confidenceScore: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _normalizedPolyline: Google_Cloud_Visualinspection_V1beta1_NormalizedPolyline? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_Annotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Annotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .same(proto: "box"),
    9: .same(proto: "polygon"),
    10: .standard(proto: "classification_label"),
    11: .same(proto: "mask"),
    14: .same(proto: "polyline"),
    1: .same(proto: "name"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "update_time"),
    4: .standard(proto: "annotation_spec_id"),
    5: .standard(proto: "annotation_set_id"),
    7: .standard(proto: "parent_annotation_id"),
    12: .same(proto: "source"),
    13: .same(proto: "labels"),
  ]

  fileprivate class _StorageClass {
    var _annotationType: Google_Cloud_Visualinspection_V1beta1_Annotation.OneOf_AnnotationType?
    var _name: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _annotationSpecID: String = String()
    var _annotationSetID: String = String()
    var _parentAnnotationID: String = String()
    var _source: Google_Cloud_Visualinspection_V1beta1_Annotation.Source? = nil
    var _labels: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _annotationType = source._annotationType
      _name = source._name
      _createTime = source._createTime
      _updateTime = source._updateTime
      _annotationSpecID = source._annotationSpecID
      _annotationSetID = source._annotationSetID
      _parentAnnotationID = source._parentAnnotationID
      _source = source._source
      _labels = source._labels
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._annotationSpecID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._annotationSetID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._parentAnnotationID) }()
        case 8: try {
          var v: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation?
          if let current = _storage._annotationType {
            try decoder.handleConflictingOneOf()
            if case .box(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._annotationType = .box(v)}
        }()
        case 9: try {
          var v: Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation?
          if let current = _storage._annotationType {
            try decoder.handleConflictingOneOf()
            if case .polygon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._annotationType = .polygon(v)}
        }()
        case 10: try {
          var v: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation?
          if let current = _storage._annotationType {
            try decoder.handleConflictingOneOf()
            if case .classificationLabel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._annotationType = .classificationLabel(v)}
        }()
        case 11: try {
          var v: Google_Cloud_Visualinspection_V1beta1_MaskAnnotation?
          if let current = _storage._annotationType {
            try decoder.handleConflictingOneOf()
            if case .mask(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._annotationType = .mask(v)}
        }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._source) }()
        case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 14: try {
          var v: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation?
          if let current = _storage._annotationType {
            try decoder.handleConflictingOneOf()
            if case .polyline(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._annotationType = .polyline(v)}
        }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._annotationSpecID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._annotationSpecID, fieldNumber: 4)
      }
      if !_storage._annotationSetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._annotationSetID, fieldNumber: 5)
      }
      if !_storage._parentAnnotationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parentAnnotationID, fieldNumber: 7)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._annotationType {
      case .box?: try {
        guard case .box(let v)? = _storage._annotationType else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .polygon?: try {
        guard case .polygon(let v)? = _storage._annotationType else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .classificationLabel?: try {
        guard case .classificationLabel(let v)? = _storage._annotationType else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .mask?: try {
        guard case .mask(let v)? = _storage._annotationType else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      default: break
      }
      if let v = _storage._source {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 13)
      }
      if case .polyline(let v)? = _storage._annotationType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Annotation, rhs: Google_Cloud_Visualinspection_V1beta1_Annotation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._annotationType != rhs_storage._annotationType {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._annotationSpecID != rhs_storage._annotationSpecID {return false}
        if _storage._annotationSetID != rhs_storage._annotationSetID {return false}
        if _storage._parentAnnotationID != rhs_storage._parentAnnotationID {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._labels != rhs_storage._labels {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Annotation.Source: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_Annotation.protoMessageName + ".Source"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "source_model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceModel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.sourceModel.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceModel, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Annotation.Source, rhs: Google_Cloud_Visualinspection_V1beta1_Annotation.Source) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.sourceModel != rhs.sourceModel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Annotation.Source.SourceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_TYPE_UNSPECIFIED"),
    1: .same(proto: "HUMAN_PRODUCED"),
    2: .same(proto: "MACHINE_PRODUCED"),
    3: .same(proto: "HUMAN_LABELED"),
  ]
}

extension Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoundingBoxAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "normalized_bounding_box"),
    2: .standard(proto: "confidence_score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._normalizedBoundingBox) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidenceScore) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._normalizedBoundingBox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.confidenceScore != 0 {
      try visitor.visitSingularFloatField(value: self.confidenceScore, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation, rhs: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotation) -> Bool {
    if lhs._normalizedBoundingBox != rhs._normalizedBoundingBox {return false}
    if lhs.confidenceScore != rhs.confidenceScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoundingPolyAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "normalized_bounding_poly"),
    2: .standard(proto: "confidence_score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._normalizedBoundingPoly) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidenceScore) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._normalizedBoundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.confidenceScore != 0 {
      try visitor.visitSingularFloatField(value: self.confidenceScore, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation, rhs: Google_Cloud_Visualinspection_V1beta1_BoundingPolyAnnotation) -> Bool {
    if lhs._normalizedBoundingPoly != rhs._normalizedBoundingPoly {return false}
    if lhs.confidenceScore != rhs.confidenceScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClassificationLabelAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "confidence_score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.confidenceScore) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.confidenceScore != 0 {
      try visitor.visitSingularFloatField(value: self.confidenceScore, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation, rhs: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotation) -> Bool {
    if lhs.confidenceScore != rhs.confidenceScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_MaskAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MaskAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "confidence_mask"),
    2: .standard(proto: "category_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._confidenceMask) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._categoryMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._confidenceMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._categoryMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_MaskAnnotation, rhs: Google_Cloud_Visualinspection_V1beta1_MaskAnnotation) -> Bool {
    if lhs._confidenceMask != rhs._confidenceMask {return false}
    if lhs._categoryMask != rhs._categoryMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PolylineAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "normalized_polyline"),
    2: .standard(proto: "confidence_score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._normalizedPolyline) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidenceScore) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._normalizedPolyline {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.confidenceScore != 0 {
      try visitor.visitSingularFloatField(value: self.confidenceScore, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation, rhs: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotation) -> Bool {
    if lhs._normalizedPolyline != rhs._normalizedPolyline {return false}
    if lhs.confidenceScore != rhs.confidenceScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
