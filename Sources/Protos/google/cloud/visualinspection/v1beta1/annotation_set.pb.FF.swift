// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/annotation_set.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Resource of an AnnotationSet.
public struct Google_Cloud_Visualinspection_V1beta1_AnnotationSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of the Annotations in this AnnotationSet. Annotations in this
  /// AnnotationSet must be of the same type.
  public var annotationSetType: Google_Cloud_Visualinspection_V1beta1_AnnotationSet.OneOf_AnnotationSetType? = nil

  /// Classification label.
  public var classificationLabel: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet {
    get {
      if case .classificationLabel(let v)? = annotationSetType {return v}
      return Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet()
    }
    set {annotationSetType = .classificationLabel(newValue)}
  }

  /// Bounding box.
  public var box: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet {
    get {
      if case .box(let v)? = annotationSetType {return v}
      return Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet()
    }
    set {annotationSetType = .box(newValue)}
  }

  /// Polygon.
  public var polygon: Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet {
    get {
      if case .polygon(let v)? = annotationSetType {return v}
      return Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet()
    }
    set {annotationSetType = .polygon(newValue)}
  }

  /// Mask.
  public var mask: Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet {
    get {
      if case .mask(let v)? = annotationSetType {return v}
      return Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet()
    }
    set {annotationSetType = .mask(newValue)}
  }

  /// Polyline
  public var polyline: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet {
    get {
      if case .polyline(let v)? = annotationSetType {return v}
      return Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet()
    }
    set {annotationSetType = .polyline(newValue)}
  }

  /// Output only. Resource name of the AnnotationSet generated by the system.
  public var name: String = String()

  /// Required. A user friendly display name for the annotationset.
  /// It can be up to 128 characters long and can be consist of any UTF-8
  /// characters.
  public var displayName: String = String()

  /// Output only. Timestamp when this AnnotationSet was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when AnnotationSet was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Output only. The list of the AnnotationSpecs in the context of the
  /// AnnotationSet. All of the AnnotationSpecs that are imported or created into
  /// the AnnotationSet are automatically added to this list. User can manually
  /// add item to this list even though no annotation is associated with the
  /// corresponding AnnotationSpec.
  public var annotationSpecs: [Google_Cloud_Visualinspection_V1beta1_AnnotationSpec] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Type of the Annotations in this AnnotationSet. Annotations in this
  /// AnnotationSet must be of the same type.
  public enum OneOf_AnnotationSetType: Equatable {
    /// Classification label.
    case classificationLabel(Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet)
    /// Bounding box.
    case box(Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet)
    /// Polygon.
    case polygon(Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet)
    /// Mask.
    case mask(Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet)
    /// Polyline
    case polyline(Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnnotationSet.OneOf_AnnotationSetType, rhs: Google_Cloud_Visualinspection_V1beta1_AnnotationSet.OneOf_AnnotationSetType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.classificationLabel, .classificationLabel): return {
        guard case .classificationLabel(let l) = lhs, case .classificationLabel(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.box, .box): return {
        guard case .box(let l) = lhs, case .box(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.polygon, .polygon): return {
        guard case .polygon(let l) = lhs, case .polygon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mask, .mask): return {
        guard case .mask(let l) = lhs, case .mask(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.polyline, .polyline): return {
        guard case .polyline(let l) = lhs, case .polyline(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ClassificationLabel Annotation type.
public struct Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether or not the classification annotation is a multi-label
  /// classification.
  public var multiLabel: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// BoundingBox Annotation type.
public struct Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Polygon Annotation type.
public struct Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Mask Annotation type.
public struct Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Mapping of color to annotationspec.
  /// For example,
  /// annotation_spec_colors {
  ///  annotation_spec_id: 1
  ///  red: 0
  ///  green: 1
  ///  blue:0
  /// }
  /// it means green color maps to annotation_spec_id==1.
  public var annotationSpecColors: [Google_Cloud_Visualinspection_V1beta1_AnnotationSpecColor] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Mapping of color to AnnotationSpec
public struct Google_Cloud_Visualinspection_V1beta1_AnnotationSpecColor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// AnnotationSpec Id.
  public var annotationSpecID: String = String()

  /// RGB value represents color in the category_mask image.
  /// Alpha value will always be empty.
  public var color: Google_Type_Color {
    get {return _color ?? Google_Type_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {self._color = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _color: Google_Type_Color? = nil
}

/// Polyline Annotation type.
public struct Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_AnnotationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnnotationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "classification_label"),
    4: .same(proto: "box"),
    5: .same(proto: "polygon"),
    6: .same(proto: "mask"),
    11: .same(proto: "polyline"),
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    7: .standard(proto: "create_time"),
    8: .standard(proto: "update_time"),
    9: .standard(proto: "annotation_specs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try {
        var v: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet?
        if let current = self.annotationSetType {
          try decoder.handleConflictingOneOf()
          if case .classificationLabel(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.annotationSetType = .classificationLabel(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet?
        if let current = self.annotationSetType {
          try decoder.handleConflictingOneOf()
          if case .box(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.annotationSetType = .box(v)}
      }()
      case 5: try {
        var v: Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet?
        if let current = self.annotationSetType {
          try decoder.handleConflictingOneOf()
          if case .polygon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.annotationSetType = .polygon(v)}
      }()
      case 6: try {
        var v: Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet?
        if let current = self.annotationSetType {
          try decoder.handleConflictingOneOf()
          if case .mask(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.annotationSetType = .mask(v)}
      }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.annotationSpecs) }()
      case 11: try {
        var v: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet?
        if let current = self.annotationSetType {
          try decoder.handleConflictingOneOf()
          if case .polyline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.annotationSetType = .polyline(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.annotationSetType {
    case .classificationLabel?: try {
      guard case .classificationLabel(let v)? = self.annotationSetType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .box?: try {
      guard case .box(let v)? = self.annotationSetType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .polygon?: try {
      guard case .polygon(let v)? = self.annotationSetType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .mask?: try {
      guard case .mask(let v)? = self.annotationSetType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    default: break
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.annotationSpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationSpecs, fieldNumber: 9)
    }
    if case .polyline(let v)? = self.annotationSetType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnnotationSet, rhs: Google_Cloud_Visualinspection_V1beta1_AnnotationSet) -> Bool {
    if lhs.annotationSetType != rhs.annotationSetType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.annotationSpecs != rhs.annotationSpecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClassificationLabelAnnotationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "multi_label"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.multiLabel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.multiLabel != false {
      try visitor.visitSingularBoolField(value: self.multiLabel, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet, rhs: Google_Cloud_Visualinspection_V1beta1_ClassificationLabelAnnotationSet) -> Bool {
    if lhs.multiLabel != rhs.multiLabel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoundingBoxAnnotationSet"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet, rhs: Google_Cloud_Visualinspection_V1beta1_BoundingBoxAnnotationSet) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PolygonAnnotationSet"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet, rhs: Google_Cloud_Visualinspection_V1beta1_PolygonAnnotationSet) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MaskAnnotationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_spec_colors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.annotationSpecColors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSpecColors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationSpecColors, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet, rhs: Google_Cloud_Visualinspection_V1beta1_MaskAnnotationSet) -> Bool {
    if lhs.annotationSpecColors != rhs.annotationSpecColors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_AnnotationSpecColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnnotationSpecColor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_spec_id"),
    2: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.annotationSpecID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSpecID.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSpecID, fieldNumber: 1)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_AnnotationSpecColor, rhs: Google_Cloud_Visualinspection_V1beta1_AnnotationSpecColor) -> Bool {
    if lhs.annotationSpecID != rhs.annotationSpecID {return false}
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PolylineAnnotationSet"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet, rhs: Google_Cloud_Visualinspection_V1beta1_PolylineAnnotationSet) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
