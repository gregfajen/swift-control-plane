// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/visualinspection/v1beta1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A solution is a set of models and algorithms combined together that will
/// solve a specific visual inspection problem.
public struct Google_Cloud_Visualinspection_V1beta1_Solution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A unique name for the solution.
  /// This is an alphanumeric identifier generated by the system
  /// ([A-Z][A-Z0-9]+).
  public var name: String = String()

  /// A user friendly display name for the solution.
  public var displayName: String = String()

  /// Data input file specifies the input dataset for creating (training)
  /// the solution. This must be a GCS URI path i.e. of the form
  /// gs://<bucket_name>/<path to file>. The data file format is JSONL with each
  /// line following the format below (also see examples for Board Inspection
  /// and Cosmetic Inspection below).
  /// ```
  /// {
  ///   # Note: Only needed for Board inspection.
  ///   "golden_images": [
  ///     {
  ///        "template_image_gcs_uri": "GCS path to template image.",
  ///        "inspection_area_and_regions": [
  ///          {
  ///            "inspection_area": {
  ///              "inspection_area_id": "<unique id for inspection area.",
  ///              "bounding_poly": {
  ///                "normalized_vertices": [
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                ]
  ///              }
  ///            },
  ///            "regions": [
  ///              "bounding_poly": {
  ///                "normalized_vertices": [
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                ]
  ///              },
  ///              "region_metadata": {
  ///                "region_id": "<region id>",
  ///                "region_name": "<region name>",
  ///                "component_id": "<component id>",
  ///                "component_name": "<component name>"
  ///                "other_keywords": {
  ///                  "keyword1": "value1",
  ///                  "keyword2": "value2"
  ///                }
  ///              }
  ///            ]
  ///          }
  ///        ]
  ///      }
  ///   ]
  ///   # finetune_from_solution_id can be omitted.
  ///   "finetune_from_solution_id": "<id of existing solution>",
  ///
  ///
  ///   "image_and_annotations": [
  ///     {
  ///       "image_gcs_uri": "<path to the image.",
  ///       "image_properties": {
  ///         "image_property1": "value1",
  ///         "image_property2": "value2"
  ///       },
  ///       "inspection_state":
  ///
  /// "INSPECTION_STATE_UNLABELED|INSPECTION_STATE_NON_DEFECTIVE|INSPECTION_STATE_DEFECTIVE",
  ///
  ///       # Note: Only needed for Board inspection.
  ///       "region_id_and_defective_labels": [
  ///         {
  ///           "inspection_area_id": "<inspection area id>",
  ///           "region_id": "<region id>",
  ///           "inspection_state":
  ///
  /// "INSPECTION_STATE_UNLABELED|INSPECTION_STATE_NON_DEFECTIVE|INSPECTION_STATE_DEFECTIVE",
  ///           "defect_label_name": "defect label name."
  ///         }
  ///       ],
  ///       # Note: Only needed for Cosmetic Inspection.
  ///       "localized_region": [
  ///         {
  ///           "bounding_poly": {
  ///             "normalized_vertices": [
  ///               { "x": 0.1,  "y": 0.2 },
  ///               { "x": 0.1,  "y": 0.2 },
  ///               { "x": 0.1,  "y": 0.2 },
  ///               { "x": 0.1,  "y": 0.2 },
  ///             ]
  ///           },
  ///           "region_metadata": {
  ///             "region_id": "<region id>",
  ///             "region_name": "<region name>",
  ///             "component_id": "<component id>",
  ///             "component_name": "<component name>"
  ///             "other_keywords": {
  ///               "keyword1": "value1",
  ///               "keyword2": "value2"
  ///             }
  ///           }
  ///         }
  ///       ],
  ///       # Note: Only needed for Cosmetic Inspection.
  ///       "segmentation_annotation": {
  ///         "mask": {
  ///           "mask": {
  ///             "gcs_uri": "<gcs path to the image.>",
  ///             "class_map": {
  ///               1: "scratch",
  ///               2: "glue"
  ///             }
  ///           }
  ///         }
  ///       }
  ///     }
  ///   ]
  /// }
  ///
  /// ```
  /// Here's an example for Board Inspection.
  /// {
  ///   # Note: Only needed for Board inspection.
  ///   "golden_images": [
  ///     {
  ///        "template_image_gcs_uri": "GCS path to template image.",
  ///        "inspection_area_and_regions": [
  ///          {
  ///            "inspection_area": {
  ///              "inspection_area_id": "<unique id for inspection area.",
  ///              "bounding_poly": {
  ///                "normalized_vertices": [
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                ]
  ///              }
  ///            },
  ///            "regions": [
  ///              "bounding_poly": {
  ///                "normalized_vertices": [
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                  { "x": 0.1,  "y": 0.2 },
  ///                ]
  ///              },
  ///              "region_metadata": {
  ///                "region_id": "<region id>",
  ///                "region_name": "<region name>",
  ///                "component_id": "<component id>",
  ///                "component_name": "<component name>"
  ///                "other_keywords": {
  ///                  "keyword1": "value1",
  ///                  "keyword2": "value2"
  ///                }
  ///              }
  ///            ]
  ///          }
  ///        ]
  ///      }
  ///   ]
  ///   # finetune_from_solution_id can be omitted.
  ///   "finetune_from_solution_id": "<id of existing solution>",
  ///
  ///
  ///   "image_and_annotations": [
  ///     {
  ///       "image_gcs_uri": "<path to the image.",
  ///       "image_properties": {
  ///         "image_property1": "value1",
  ///         "image_property2": "value2"
  ///       },
  ///       "inspection_state":
  ///
  /// "INSPECTION_STATE_UNLABELED|INSPECTION_STATE_NON_DEFECTIVE|INSPECTION_STATE_DEFECTIVE",
  ///
  ///       # Note: Only needed for Board inspection.
  ///       "region_id_and_defective_labels": [
  ///         {
  ///           "inspection_area_id": "<inspection area id>",
  ///           "region_id": "<region id>",
  ///           "inspection_state":
  ///
  /// "INSPECTION_STATE_UNLABELED|INSPECTION_STATE_NON_DEFECTIVE|INSPECTION_STATE_DEFECTIVE",
  ///           "defect_label_name": "defect label name."
  ///         }
  ///       ],
  ///     }
  ///   ]
  /// }
  ///
  /// ```
  /// Here's an example for Cosmetic Inspection.
  /// /```
  /// {
  ///   # finetune_from_solution_id can be omitted.
  ///   "finetune_from_solution_id": "<id of existing solution>",
  ///   "image_and_annotations": [
  ///     {
  ///       "image_gcs_uri": "<path to the image.",
  ///       "image_properties": {
  ///         "image_property1": "value1",
  ///         "image_property2": "value2"
  ///       },
  ///       "inspection_state":
  ///
  /// "INSPECTION_STATE_UNLABELED|INSPECTION_STATE_NON_DEFECTIVE|INSPECTION_STATE_DEFECTIVE",
  ///
  ///       # Note: Only needed for Cosmetic Inspection.
  ///       "localized_region": [
  ///         {
  ///           "bounding_poly": {
  ///             "normalized_vertices": [
  ///               { "x": 0.1,  "y": 0.2 },
  ///               { "x": 0.1,  "y": 0.2 },
  ///               { "x": 0.1,  "y": 0.2 },
  ///               { "x": 0.1,  "y": 0.2 },
  ///             ]
  ///           },
  ///           "region_metadata": {
  ///             "region_id": "<region id>",
  ///             "region_name": "<region name>",
  ///             "component_id": "<component id>",
  ///             "component_name": "<component name>"
  ///             "other_keywords": {
  ///               "keyword1": "value1",
  ///               "keyword2": "value2"
  ///             }
  ///           }
  ///         }
  ///       ],
  ///       # Note: Only needed for Cosmetic Inspection.
  ///       "segmentation_annotation": {
  ///         "mask": {
  ///           "mask": {
  ///             "gcs_uri": "<gcs path to the image.>",
  ///             "class_map": {
  ///               1: "scratch",
  ///               2: "glue"
  ///             }
  ///           }
  ///         }
  ///       }
  ///     }
  ///   ]
  /// }
  /// ```
  public var gcsDataInputUri: String = String()

  /// Optional. Type of the solution. Valid values are:
  /// *    `assembly`: Solution for finding defects in PCB like components. This
  ///                  is the default value.
  /// *    `cosmetic`: Solution for finding cosmetic defects on a device.
  ///                  Examples include finding scratches or dust particles on
  ///                  a device.
  public var type: String = String()

  /// Optional. Solution creation train configuration.
  public var trainingConfig: Google_Cloud_Visualinspection_V1beta1_Solution.TrainingConfig {
    get {return _trainingConfig ?? Google_Cloud_Visualinspection_V1beta1_Solution.TrainingConfig()}
    set {_trainingConfig = newValue}
  }
  /// Returns true if `trainingConfig` has been explicitly set.
  public var hasTrainingConfig: Bool {return self._trainingConfig != nil}
  /// Clears the value of `trainingConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTrainingConfig() {self._trainingConfig = nil}

  /// Output only. Timestamp when the all the models in the solution were trained
  /// and evaluated.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this solution was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Optional. A description for this Solution.
  public var description_p: String = String()

  /// Required. The Dataset of this Solution.
  public var datasetID: String = String()

  /// Optional. The labels with user-defined metadata to organize your Solutions.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label keys must start with a letter.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  public var labels: Dictionary<String,String> = [:]

  /// Required. The SolutionType of this Solution. This restricts the allowable
  /// Modules and the linkage between them according to predefined solution
  /// schema.
  public var solutionType: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType {
    get {return _solutionType ?? Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType()}
    set {_solutionType = newValue}
  }
  /// Returns true if `solutionType` has been explicitly set.
  public var hasSolutionType: Bool {return self._solutionType != nil}
  /// Clears the value of `solutionType`. Subsequent reads from it will return its default value.
  public mutating func clearSolutionType() {self._solutionType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Configuration specific to training parameters.
  public struct TrainingConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional. Training time for each individual artifacts.
    public var trainingDuration: SwiftProtobuf.Google_Protobuf_Duration {
      get {return _trainingDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
      set {_trainingDuration = newValue}
    }
    /// Returns true if `trainingDuration` has been explicitly set.
    public var hasTrainingDuration: Bool {return self._trainingDuration != nil}
    /// Clears the value of `trainingDuration`. Subsequent reads from it will return its default value.
    public mutating func clearTrainingDuration() {self._trainingDuration = nil}

    /// Optional. Structured object containing parameters to fine tune the
    /// training behavior.
    public var parameters: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _parameters ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_parameters = newValue}
    }
    /// Returns true if `parameters` has been explicitly set.
    public var hasParameters: Bool {return self._parameters != nil}
    /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
    public mutating func clearParameters() {self._parameters = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _trainingDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    fileprivate var _parameters: SwiftProtobuf.Google_Protobuf_Struct? = nil
  }

  /// A predefined SolutionType.
  public struct SolutionType {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The predefined type of this Solution.
    public var type: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.OneOf_Type? = nil

    /// Predefined solution for assembly inspection.
    public var assemblyInspection: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions {
      get {
        if case .assemblyInspection(let v)? = type {return v}
        return Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions()
      }
      set {type = .assemblyInspection(newValue)}
    }

    /// Predefined solution for cosmetic inspection.
    public var cosmeticInspection: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions {
      get {
        if case .cosmeticInspection(let v)? = type {return v}
        return Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions()
      }
      set {type = .cosmeticInspection(newValue)}
    }

    /// Customized solution for inspection.
    public var customInspection: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions {
      get {
        if case .customInspection(let v)? = type {return v}
        return Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions()
      }
      set {type = .customInspection(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The predefined type of this Solution.
    public enum OneOf_Type: Equatable {
      /// Predefined solution for assembly inspection.
      case assemblyInspection(Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions)
      /// Predefined solution for cosmetic inspection.
      case cosmeticInspection(Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions)
      /// Customized solution for inspection.
      case customInspection(Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.OneOf_Type, rhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.OneOf_Type) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.assemblyInspection, .assemblyInspection): return {
          guard case .assemblyInspection(let l) = lhs, case .assemblyInspection(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.cosmeticInspection, .cosmeticInspection): return {
          guard case .cosmeticInspection(let l) = lhs, case .cosmeticInspection(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.customInspection, .customInspection): return {
          guard case .customInspection(let l) = lhs, case .customInspection(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    /// Options for an assembly inspection Solution.
    public struct AssemblyInspectionOptions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Options for cosmetic inspection Solution.
    public struct CosmeticInspectionOptions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Options for a custom inspection Solution.
    public struct CustomInspectionOptions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _trainingConfig: Google_Cloud_Visualinspection_V1beta1_Solution.TrainingConfig? = nil
  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _solutionType: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType? = nil
}

/// Solution operation metadata.
public struct Google_Cloud_Visualinspection_V1beta1_SolutionOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for creating a solution.
public struct Google_Cloud_Visualinspection_V1beta1_CreateSolutionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// Required. Solution to create.
  public var solution: Google_Cloud_Visualinspection_V1beta1_Solution {
    get {return _solution ?? Google_Cloud_Visualinspection_V1beta1_Solution()}
    set {_solution = newValue}
  }
  /// Returns true if `solution` has been explicitly set.
  public var hasSolution: Bool {return self._solution != nil}
  /// Clears the value of `solution`. Subsequent reads from it will return its default value.
  public mutating func clearSolution() {self._solution = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _solution: Google_Cloud_Visualinspection_V1beta1_Solution? = nil
}

/// Request method for listing solutions.
public struct Google_Cloud_Visualinspection_V1beta1_ListSolutionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The maximum number of solutions to return. The service may return fewer
  /// than this value. If unspecified, at moast 50 solutions will be returned.
  /// The maximum value is 100; values above 100 will be coerced to 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListSolutions` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListSolutions` must
  /// match the call that provided the page token.
  public var pageToken: String = String()

  /// The standard list filter.
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response method for listing solutions.
public struct Google_Cloud_Visualinspection_V1beta1_ListSolutionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The solutions for this project.
  public var solutions: [Google_Cloud_Visualinspection_V1beta1_Solution] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// For requesting details about a particular solution.
public struct Google_Cloud_Visualinspection_V1beta1_GetSolutionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Solution identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Export solution metadata to distinguish that the operation is an export
/// solution operation.
public struct Google_Cloud_Visualinspection_V1beta1_ExportSolutionOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Deploy solution metadata to distinguish that the operation is an export
/// solution operation.
public struct Google_Cloud_Visualinspection_V1beta1_DeploySolutionOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Undeploy solution metadata to distinguish that the operation is an export
/// solution operation.
public struct Google_Cloud_Visualinspection_V1beta1_UndeploySolutionOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for creating a SolutionArtifact.
public struct Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// Required. SolutionArtifact to create.
  public var solutionArtifact: Google_Cloud_Visualinspection_V1beta1_SolutionArtifact {
    get {return _solutionArtifact ?? Google_Cloud_Visualinspection_V1beta1_SolutionArtifact()}
    set {_solutionArtifact = newValue}
  }
  /// Returns true if `solutionArtifact` has been explicitly set.
  public var hasSolutionArtifact: Bool {return self._solutionArtifact != nil}
  /// Clears the value of `solutionArtifact`. Subsequent reads from it will return its default value.
  public mutating func clearSolutionArtifact() {self._solutionArtifact = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _solutionArtifact: Google_Cloud_Visualinspection_V1beta1_SolutionArtifact? = nil
}

/// CreateSolutionArtifact operation metadata.
public struct Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for listing SolutionArtifacts.
public struct Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of SolutionArtifacts to return. The service may return
  /// fewer than this value. If unspecified, at most 20 Modules will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListSolutionArtifacts` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListSolutionArtifacts`
  /// must match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListSolutionArtifacts.
public struct Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The SolutionArtifact.
  public var solutionArtifacts: [Google_Cloud_Visualinspection_V1beta1_SolutionArtifact] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for getting a SolutionArtifact.
public struct Google_Cloud_Visualinspection_V1beta1_GetSolutionArtifactRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. SolutionArtifact identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for deleting a SolutionArtifact.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. SolutionArtifact identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for DeleteSolutionArtifact.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for updating a SolutionArtifact.
public struct Google_Cloud_Visualinspection_V1beta1_UpdateSolutionArtifactRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The SolutionArtifact which replaces the resource on the server.
  public var solutionArtifact: Google_Cloud_Visualinspection_V1beta1_SolutionArtifact {
    get {return _solutionArtifact ?? Google_Cloud_Visualinspection_V1beta1_SolutionArtifact()}
    set {_solutionArtifact = newValue}
  }
  /// Returns true if `solutionArtifact` has been explicitly set.
  public var hasSolutionArtifact: Bool {return self._solutionArtifact != nil}
  /// Clears the value of `solutionArtifact`. Subsequent reads from it will return its default value.
  public mutating func clearSolutionArtifact() {self._solutionArtifact = nil}

  /// Required. The update mask applies to the resource.
  /// For the `FieldMask` definition, see
  ///
  /// [FieldMask](https:
  /// //developers.google.com/protocol-buffers
  /// // /docs/reference/google.protobuf#fieldmask).
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _solutionArtifact: Google_Cloud_Visualinspection_V1beta1_SolutionArtifact? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// CreateDataset operation metadata.
public struct Google_Cloud_Visualinspection_V1beta1_CreateDatasetOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for getting a Dataset.
public struct Google_Cloud_Visualinspection_V1beta1_GetDatasetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Dataset identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for deleting a Dataset.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteDatasetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Dataset identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for listing Datasets.
public struct Google_Cloud_Visualinspection_V1beta1_ListDatasetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of Dataset to return. The service may return fewer
  /// than this value. If unspecified, at most 20 Datasets will be returned.
  /// The maximum value is 100; values above 100 will be coerced to 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListDatasets` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListDatasets` must
  /// match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListDatasets.
public struct Google_Cloud_Visualinspection_V1beta1_ListDatasetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The datasets for this project.
  public var datasets: [Google_Cloud_Visualinspection_V1beta1_Dataset] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for importing a Dataset.
public struct Google_Cloud_Visualinspection_V1beta1_ImportDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Dataset identifier.
  public var name: String = String()

  /// Required. The desired input locations. The contents of all input locations
  /// will be imported in one batch.
  public var importConfigs: [Google_Cloud_Visualinspection_V1beta1_ImportDataConfig] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ImportData operation metadata.
public struct Google_Cloud_Visualinspection_V1beta1_ImportDataOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for exporting a Dataset.
public struct Google_Cloud_Visualinspection_V1beta1_ExportDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Dataset identifier.
  public var name: String = String()

  /// Required. The desired output location.
  public var exportConfig: Google_Cloud_Visualinspection_V1beta1_ExportDataConfig {
    get {return _exportConfig ?? Google_Cloud_Visualinspection_V1beta1_ExportDataConfig()}
    set {_exportConfig = newValue}
  }
  /// Returns true if `exportConfig` has been explicitly set.
  public var hasExportConfig: Bool {return self._exportConfig != nil}
  /// Clears the value of `exportConfig`. Subsequent reads from it will return its default value.
  public mutating func clearExportConfig() {self._exportConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _exportConfig: Google_Cloud_Visualinspection_V1beta1_ExportDataConfig? = nil
}

/// ExportData operation metadata.
public struct Google_Cloud_Visualinspection_V1beta1_ExportDataOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// DeleteDataset operation metadata.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteDatasetOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for getting an Image.
public struct Google_Cloud_Visualinspection_V1beta1_GetImageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Image identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for listing Images.
public struct Google_Cloud_Visualinspection_V1beta1_ListImagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of images to return. The service may return fewer
  /// than this value. If unspecified, at most 20 images will be returned.
  /// The maximum value is 200; values above 200 will be coerced to 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListImages` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListImages` must
  /// match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListImages.
public struct Google_Cloud_Visualinspection_V1beta1_ListImagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The images for this dataset.
  public var images: [Google_Cloud_Visualinspection_V1beta1_Image] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for creating a AnnotationSet.
public struct Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// Required. AnnotationSet to create.
  public var annotationSet: Google_Cloud_Visualinspection_V1beta1_AnnotationSet {
    get {return _annotationSet ?? Google_Cloud_Visualinspection_V1beta1_AnnotationSet()}
    set {_annotationSet = newValue}
  }
  /// Returns true if `annotationSet` has been explicitly set.
  public var hasAnnotationSet: Bool {return self._annotationSet != nil}
  /// Clears the value of `annotationSet`. Subsequent reads from it will return its default value.
  public mutating func clearAnnotationSet() {self._annotationSet = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _annotationSet: Google_Cloud_Visualinspection_V1beta1_AnnotationSet? = nil
}

/// Request for listing AnnotationSets.
public struct Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of AnnotationSets to return. The service may return
  /// fewer than this value. If unspecified, at most 20 AnnotationSets will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListAnnotationSets` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListAnnotationSets` must
  /// match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListAnnotationSets.
public struct Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The annotationsets for this project.
  public var annotationSets: [Google_Cloud_Visualinspection_V1beta1_AnnotationSet] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for DeleteAnnotationSet.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSetOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for creating a AnnotationSpec.
public struct Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSpecRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// Required. AnnotationSpec to create.
  public var annotationSpec: Google_Cloud_Visualinspection_V1beta1_AnnotationSpec {
    get {return _annotationSpec ?? Google_Cloud_Visualinspection_V1beta1_AnnotationSpec()}
    set {_annotationSpec = newValue}
  }
  /// Returns true if `annotationSpec` has been explicitly set.
  public var hasAnnotationSpec: Bool {return self._annotationSpec != nil}
  /// Clears the value of `annotationSpec`. Subsequent reads from it will return its default value.
  public mutating func clearAnnotationSpec() {self._annotationSpec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _annotationSpec: Google_Cloud_Visualinspection_V1beta1_AnnotationSpec? = nil
}

/// Request for listing AnnotationSpecs.
public struct Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of AnnotationSpecs to return. The service may return
  /// fewer than this value. If unspecified, at most 20 AnnotationSpecs will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListAnnotationSpecs` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListAnnotationSpecs`
  /// must match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListAnnotationSpecs.
public struct Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The annotationspecs for this project.
  public var annotationSpecs: [Google_Cloud_Visualinspection_V1beta1_AnnotationSpec] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation Metadata for DeleteAnnotationSpec.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSpecOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for listing Annotations.
public struct Google_Cloud_Visualinspection_V1beta1_ListAnnotationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of annotations to return. The service may return
  /// fewer than this value. If unspecified, at most 20 annotations will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListAnnotations` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListAnnotations`
  /// must match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListAnnotations.
public struct Google_Cloud_Visualinspection_V1beta1_ListAnnotationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The annotations for this image.
  public var annotations: [Google_Cloud_Visualinspection_V1beta1_Annotation] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for DeleteAnnotation.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for creating a Module.
public struct Google_Cloud_Visualinspection_V1beta1_CreateModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// Required. Module to create.
  public var module: Google_Cloud_Visualinspection_V1beta1_Module {
    get {return _module ?? Google_Cloud_Visualinspection_V1beta1_Module()}
    set {_module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  public var hasModule: Bool {return self._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  public mutating func clearModule() {self._module = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _module: Google_Cloud_Visualinspection_V1beta1_Module? = nil
}

/// Request for listing Modules.
public struct Google_Cloud_Visualinspection_V1beta1_ListModulesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of Modules to return. The service may return
  /// fewer than this value. If unspecified, at most 20 Modules will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListModules` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListModules`
  /// must match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListModules.
public struct Google_Cloud_Visualinspection_V1beta1_ListModulesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Modules.
  public var modules: [Google_Cloud_Visualinspection_V1beta1_Module] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for getting a Module.
public struct Google_Cloud_Visualinspection_V1beta1_GetModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Module identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for deleting a Module.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Module identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for DeleteModule.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteModuleOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for updating a Module.
public struct Google_Cloud_Visualinspection_V1beta1_UpdateModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Module which replaces the resource on the server.
  public var module: Google_Cloud_Visualinspection_V1beta1_Module {
    get {return _module ?? Google_Cloud_Visualinspection_V1beta1_Module()}
    set {_module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  public var hasModule: Bool {return self._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  public mutating func clearModule() {self._module = nil}

  /// Required. The update mask applies to the resource.
  /// For the `FieldMask` definition, see
  ///
  /// [FieldMask](https:
  /// //developers.google.com/protocol-buffers
  /// // /docs/reference/google.protobuf#fieldmask).
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _module: Google_Cloud_Visualinspection_V1beta1_Module? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request for creating a Model. This invokes the training process for
/// the parent Module.
public struct Google_Cloud_Visualinspection_V1beta1_CreateModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// Optional. Model to create.
  public var model: Google_Cloud_Visualinspection_V1beta1_Model {
    get {return _model ?? Google_Cloud_Visualinspection_V1beta1_Model()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {self._model = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _model: Google_Cloud_Visualinspection_V1beta1_Model? = nil
}

/// Operation metadata for CreateModel.
public struct Google_Cloud_Visualinspection_V1beta1_CreateModelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for listing Models.
public struct Google_Cloud_Visualinspection_V1beta1_ListModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of Models to return. The service may return
  /// fewer than this value. If unspecified, at most 20 Models will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListModels` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ListModels`
  /// must match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListModels.
public struct Google_Cloud_Visualinspection_V1beta1_ListModelsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Model.
  public var models: [Google_Cloud_Visualinspection_V1beta1_Model] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for getting a Model.
public struct Google_Cloud_Visualinspection_V1beta1_GetModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Model identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for deleting a Model.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Model identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for DeleteModel.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteModelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for updating a Model.
public struct Google_Cloud_Visualinspection_V1beta1_UpdateModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Model which replaces the resource on the server.
  public var model: Google_Cloud_Visualinspection_V1beta1_Model {
    get {return _model ?? Google_Cloud_Visualinspection_V1beta1_Model()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {self._model = nil}

  /// Required. The update mask applies to the resource.
  /// For the `FieldMask` definition, see
  ///
  /// [FieldMask](https:
  /// //developers.google.com/protocol-buffers
  /// // /docs/reference/google.protobuf#fieldmask).
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _model: Google_Cloud_Visualinspection_V1beta1_Model? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request for listing ModelEvaluations.
public struct Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Parent identifier.
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The maximum number of ModelEvaluations to return. The service may return
  /// fewer than this value. If unspecified, at most 20 ModelEvaluations will be
  /// returned. The maximum value is 100; values above 100 will be coerced to
  /// 100.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ModelEvaluations` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to `ModelEvaluations`
  /// must match the call that provided the page token.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for ListModelEvaluations.
public struct Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ModelEvaluation.
  public var modelEvaluations: [Google_Cloud_Visualinspection_V1beta1_ModelEvaluation] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for getting a ModelEvaluation.
public struct Google_Cloud_Visualinspection_V1beta1_GetModelEvaluationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. ModelEvaluation identifier.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for enriching the Dataset with predicted Annotations from a
/// Model.
public struct Google_Cloud_Visualinspection_V1beta1_WritePredictionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Model identifier.
  public var model: String = String()

  /// A score threshold in the range [0, 1] to filter output Annotations. If set,
  /// only Annotations with at least this score will be saved in the output
  /// AnnotationSet. Otherwise a default value will be used based on the Module.
  public var outputScoreThreshold: Float = 0

  /// An IOU (intersection over union) threshold in the range [0, 1] to use for
  /// matching Annotations for some Module types. New Annotations must have at
  /// least this IOU in in relation to an old Anotation to be considered
  /// matching. If not provided, a default value will be used based on the
  /// Module.
  public var outputMatchingIouThreshold: Float = 0

  /// By default WritePredictions copies all Annotation labels from old
  /// Annotations to new Annotations. These fields give finer control over which
  /// label keys to copy. If provided, only keys in this list will be copied.
  public var labelKeysCopyAllowlist: [String] = []

  /// If provided, no keys in this list will be copied, even if they appear
  /// in the allowlist.
  public var labelKeysCopyDenylist: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for WritePredictions.
public struct Google_Cloud_Visualinspection_V1beta1_WritePredictionsOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for creating a SpecialistPool.
public struct Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent Project name for the new SpecialistPool.
  /// The form is `projects/{project}/locations/{location}`.
  public var parent: String = String()

  /// Required. The SpecialistPool to create.
  public var specialistPool: Google_Cloud_Visualinspection_V1beta1_SpecialistPool {
    get {return _specialistPool ?? Google_Cloud_Visualinspection_V1beta1_SpecialistPool()}
    set {_specialistPool = newValue}
  }
  /// Returns true if `specialistPool` has been explicitly set.
  public var hasSpecialistPool: Bool {return self._specialistPool != nil}
  /// Clears the value of `specialistPool`. Subsequent reads from it will return its default value.
  public mutating func clearSpecialistPool() {self._specialistPool = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _specialistPool: Google_Cloud_Visualinspection_V1beta1_SpecialistPool? = nil
}

/// Operation metadata for CreateSpecialistPool.
public struct Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for getting a SpecialistPool.
public struct Google_Cloud_Visualinspection_V1beta1_GetSpecialistPoolRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the SpecialistPool resource.
  /// The form is
  ///
  /// `projects/{project}/locations/{location}/specialistPools/{specialist_pool}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for updating a SpecialistPool.
public struct Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The SpecialistPool which replaces the resource on the server.
  public var specialistPool: Google_Cloud_Visualinspection_V1beta1_SpecialistPool {
    get {return _specialistPool ?? Google_Cloud_Visualinspection_V1beta1_SpecialistPool()}
    set {_specialistPool = newValue}
  }
  /// Returns true if `specialistPool` has been explicitly set.
  public var hasSpecialistPool: Bool {return self._specialistPool != nil}
  /// Clears the value of `specialistPool`. Subsequent reads from it will return its default value.
  public mutating func clearSpecialistPool() {self._specialistPool = nil}

  /// Required. The update mask applies to the resource.
  /// For the `FieldMask` definition, see
  ///
  /// [FieldMask](https:
  /// //developers.google.com/protocol-buffers
  /// // /docs/reference/google.protobuf#fieldmask).
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _specialistPool: Google_Cloud_Visualinspection_V1beta1_SpecialistPool? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Operation metadata for UpdateSpecialistPool.
public struct Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request message for listing SpecialistPools.
public struct Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the SpecialistPool's parent resource.
  /// Format: `projects/{project}/locations/{location}`
  public var parent: String = String()

  /// The number of SpecialistPools to return.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListSpecialistPoolsRequest` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to
  /// `ListSpecialistPoolsRequest` must match the call that provided the page
  /// token.
  public var pageToken: String = String()

  /// The standard list filter.
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for ListSpecialistPools.
public struct Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of SpecialistPools that matches the specified filter in the request.
  public var specialistPools: [Google_Cloud_Visualinspection_V1beta1_SpecialistPool] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for deleting a specialist pool.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the SpecialistPool to delete. Format:
  ///
  /// `projects/{project}/locations/{location}/specialistPools/{specialist_pool}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for DeleteSpecialistPool.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request for creating a labeling job.
public struct Google_Cloud_Visualinspection_V1beta1_CreateLabelingJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent of the LabelingJob.
  /// Format: `projects/{project}/locations/{location}`
  public var parent: String {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  /// Required. The LabelingJob to create.
  public var labelingJob: Google_Cloud_Visualinspection_V1beta1_LabelingJob {
    get {return _storage._labelingJob ?? Google_Cloud_Visualinspection_V1beta1_LabelingJob()}
    set {_uniqueStorage()._labelingJob = newValue}
  }
  /// Returns true if `labelingJob` has been explicitly set.
  public var hasLabelingJob: Bool {return _storage._labelingJob != nil}
  /// Clears the value of `labelingJob`. Subsequent reads from it will return its default value.
  public mutating func clearLabelingJob() {_uniqueStorage()._labelingJob = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request for getting a labeling job.
public struct Google_Cloud_Visualinspection_V1beta1_GetLabelingJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the LabelingJob.
  /// Format:
  /// `projects/{project}/locations/{location}/labelingJobs/{labeling_job}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for listing labeling jobs.
public struct Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the LabelingJob's parent resource.
  /// Format: `projects/{project}/locations/{location}`
  public var parent: String = String()

  /// The number of labeling jobs to return.
  public var pageSize: Int32 = 0

  /// A page token, received from a previous `ListLabelingJobsRequest` call.
  /// Provide this to retrieve the subsequent page.
  ///
  /// When paginating, all other parameters provided to
  /// `ListLabelingJobsRequest` must match the call that provided the page
  /// token.
  public var pageToken: String = String()

  /// The standard list filter.
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for listing labeling jobs.
public struct Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of SpecialistPools that matches the specified filter in the request.
  public var labelingJobs: [Google_Cloud_Visualinspection_V1beta1_LabelingJob] = []

  /// A token that can be sent as `page_token` to retrieve the next page.
  /// If this field is omitted, there are no subsequent pages.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for deleting a labeling job.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the labeling job to delete. Format:
  /// `projects/{project}/locations/{location}/labelingJobs/{labeling_job}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Operation metadata for deleting a labeling job.
public struct Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

/// Request message for cancelling a labeling job.
public struct Google_Cloud_Visualinspection_V1beta1_CancelLabelingJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the labeling job to cancel. Format:
  /// `projects/{project}/locations/{location}/labelingJobs/{labeling_job}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for BatchPredict.
public struct Google_Cloud_Visualinspection_V1beta1_BatchPredictRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. SolutionArtifact identifier.
  public var solutionArtifact: String = String()

  /// Required. The input configuration for batch prediction.
  /// The Cloud Storage path of input file. Accepted forms:
  /// * Full object path, e.g. gs://bucket/directory/object.csv in which each
  /// line is the full path to a image file.
  public var inputUri: String = String()

  /// Required. The Cloud Storage location of the directory where the output is
  /// to be written to. Output directory will contain:
  /// 1. output.jsonl
  /// # Each line is a JSON format of PredictionResult.
  ///
  /// 2. category_masks (for MaskAnnotation)
  /// # Directory of masks - referenced via annotation in output.jsonl.
  ///
  /// 3. confidence_masks (for MaskAnnotation)
  /// # Directory of masks - referenced via annotation in output.jsonl.
  public var outputGcsDir: Google_Cloud_Visualinspection_V1beta1_GcsDestination {
    get {return _outputGcsDir ?? Google_Cloud_Visualinspection_V1beta1_GcsDestination()}
    set {_outputGcsDir = newValue}
  }
  /// Returns true if `outputGcsDir` has been explicitly set.
  public var hasOutputGcsDir: Bool {return self._outputGcsDir != nil}
  /// Clears the value of `outputGcsDir`. Subsequent reads from it will return its default value.
  public mutating func clearOutputGcsDir() {self._outputGcsDir = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _outputGcsDir: Google_Cloud_Visualinspection_V1beta1_GcsDestination? = nil
}

/// Operation metadata for BatchPreidct.
public struct Google_Cloud_Visualinspection_V1beta1_BatchPredictOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Common operation metadata.
  public var commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata {
    get {return _commonOperationMetadata ?? Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata()}
    set {_commonOperationMetadata = newValue}
  }
  /// Returns true if `commonOperationMetadata` has been explicitly set.
  public var hasCommonOperationMetadata: Bool {return self._commonOperationMetadata != nil}
  /// Clears the value of `commonOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCommonOperationMetadata() {self._commonOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonOperationMetadata: Google_Cloud_Visualinspection_V1beta1_CommonOperationMetadata? = nil
}

public struct Google_Cloud_Visualinspection_V1beta1_BatchPredictResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloud_Visualinspection_V1beta1_ExportDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloud_Visualinspection_V1beta1_ImportDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloud_Visualinspection_V1beta1_WritePredictionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.visualinspection.v1beta1"

extension Google_Cloud_Visualinspection_V1beta1_Solution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Solution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "gcs_data_input_uri"),
    7: .same(proto: "type"),
    9: .standard(proto: "training_config"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "update_time"),
    10: .same(proto: "description"),
    11: .standard(proto: "dataset_id"),
    12: .same(proto: "labels"),
    13: .standard(proto: "solution_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.gcsDataInputUri) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._trainingConfig) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.datasetID) }()
      case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._solutionType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.gcsDataInputUri.isEmpty {
      try visitor.visitSingularStringField(value: self.gcsDataInputUri, fieldNumber: 3)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 7)
    }
    if let v = self._trainingConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 10)
    }
    if !self.datasetID.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetID, fieldNumber: 11)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 12)
    }
    if let v = self._solutionType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution, rhs: Google_Cloud_Visualinspection_V1beta1_Solution) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.gcsDataInputUri != rhs.gcsDataInputUri {return false}
    if lhs.type != rhs.type {return false}
    if lhs._trainingConfig != rhs._trainingConfig {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.datasetID != rhs.datasetID {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._solutionType != rhs._solutionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Solution.TrainingConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_Solution.protoMessageName + ".TrainingConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "training_duration"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._trainingDuration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trainingDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution.TrainingConfig, rhs: Google_Cloud_Visualinspection_V1beta1_Solution.TrainingConfig) -> Bool {
    if lhs._trainingDuration != rhs._trainingDuration {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_Solution.protoMessageName + ".SolutionType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "assembly_inspection"),
    2: .standard(proto: "cosmetic_inspection"),
    3: .standard(proto: "custom_inspection"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .assemblyInspection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .assemblyInspection(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .cosmeticInspection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .cosmeticInspection(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .customInspection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .customInspection(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .assemblyInspection?: try {
      guard case .assemblyInspection(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .cosmeticInspection?: try {
      guard case .cosmeticInspection(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .customInspection?: try {
      guard case .customInspection(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType, rhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.protoMessageName + ".AssemblyInspectionOptions"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions, rhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.AssemblyInspectionOptions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.protoMessageName + ".CosmeticInspectionOptions"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions, rhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CosmeticInspectionOptions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.protoMessageName + ".CustomInspectionOptions"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions, rhs: Google_Cloud_Visualinspection_V1beta1_Solution.SolutionType.CustomInspectionOptions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_SolutionOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolutionOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_SolutionOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_SolutionOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateSolutionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSolutionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "solution"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._solution) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._solution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateSolutionRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateSolutionRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._solution != rhs._solution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListSolutionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSolutionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListSolutionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSolutionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "solutions"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.solutions) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.solutions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.solutions, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionsResponse) -> Bool {
    if lhs.solutions != rhs.solutions {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetSolutionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSolutionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetSolutionRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetSolutionRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ExportSolutionOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportSolutionOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ExportSolutionOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_ExportSolutionOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeploySolutionOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeploySolutionOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeploySolutionOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeploySolutionOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_UndeploySolutionOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UndeploySolutionOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_UndeploySolutionOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_UndeploySolutionOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSolutionArtifactRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "solution_artifact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._solutionArtifact) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._solutionArtifact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._solutionArtifact != rhs._solutionArtifact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSolutionArtifactOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_CreateSolutionArtifactOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSolutionArtifactsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSolutionArtifactsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "solution_artifacts"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.solutionArtifacts) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.solutionArtifacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.solutionArtifacts, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListSolutionArtifactsResponse) -> Bool {
    if lhs.solutionArtifacts != rhs.solutionArtifacts {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetSolutionArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSolutionArtifactRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetSolutionArtifactRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetSolutionArtifactRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteSolutionArtifactRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactRequest, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteSolutionArtifactOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteSolutionArtifactOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_UpdateSolutionArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSolutionArtifactRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "solution_artifact"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._solutionArtifact) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._solutionArtifact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_UpdateSolutionArtifactRequest, rhs: Google_Cloud_Visualinspection_V1beta1_UpdateSolutionArtifactRequest) -> Bool {
    if lhs._solutionArtifact != rhs._solutionArtifact {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateDatasetOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateDatasetOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateDatasetOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_CreateDatasetOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetDatasetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDatasetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetDatasetRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetDatasetRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteDatasetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteDatasetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteDatasetRequest, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteDatasetRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListDatasetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListDatasetsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListDatasetsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListDatasetsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListDatasetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListDatasetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "datasets"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.datasets) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.datasets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datasets, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListDatasetsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListDatasetsResponse) -> Bool {
    if lhs.datasets != rhs.datasets {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ImportDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "import_configs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.importConfigs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.importConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.importConfigs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ImportDataRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ImportDataRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.importConfigs != rhs.importConfigs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ImportDataOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ImportDataOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_ImportDataOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ExportDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "export_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._exportConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._exportConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ExportDataRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ExportDataRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._exportConfig != rhs._exportConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ExportDataOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ExportDataOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_ExportDataOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteDatasetOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteDatasetOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteDatasetOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteDatasetOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetImageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetImageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetImageRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetImageRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListImagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListImagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListImagesRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListImagesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListImagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListImagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "images"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.images) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.images.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.images, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListImagesResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListImagesResponse) -> Bool {
    if lhs.images != rhs.images {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAnnotationSetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "annotation_set"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._annotationSet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._annotationSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSetRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSetRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._annotationSet != rhs._annotationSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationSetsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationSetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_sets"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.annotationSets) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationSets, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSetsResponse) -> Bool {
    if lhs.annotationSets != rhs.annotationSets {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSetOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAnnotationSetOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSetOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSetOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSpecRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAnnotationSpecRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "annotation_spec"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._annotationSpec) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._annotationSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSpecRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateAnnotationSpecRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._annotationSpec != rhs._annotationSpec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationSpecsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationSpecsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_specs"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.annotationSpecs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationSpecs, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationSpecsResponse) -> Bool {
    if lhs.annotationSpecs != rhs.annotationSpecs {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSpecOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAnnotationSpecOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSpecOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationSpecOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListAnnotationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListAnnotationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "annotations"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.annotations) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotations, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListAnnotationsResponse) -> Bool {
    if lhs.annotations != rhs.annotations {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAnnotationOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteAnnotationOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateModuleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "module"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._module) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._module {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateModuleRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateModuleRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._module != rhs._module {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListModulesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModulesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListModulesRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListModulesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListModulesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModulesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "modules"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.modules) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.modules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modules, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListModulesResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListModulesResponse) -> Bool {
    if lhs.modules != rhs.modules {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModuleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetModuleRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetModuleRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModuleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteModuleRequest, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteModuleRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteModuleOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModuleOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteModuleOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteModuleOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_UpdateModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateModuleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._module) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._module {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_UpdateModuleRequest, rhs: Google_Cloud_Visualinspection_V1beta1_UpdateModuleRequest) -> Bool {
    if lhs._module != rhs._module {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._model) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._model {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateModelRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateModelRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._model != rhs._model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateModelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateModelOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateModelOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_CreateModelOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListModelsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListModelsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListModelsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "models"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.models) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListModelsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListModelsResponse) -> Bool {
    if lhs.models != rhs.models {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetModelRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetModelRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteModelRequest, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteModelRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteModelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModelOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteModelOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteModelOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_UpdateModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._model) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._model {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_UpdateModelRequest, rhs: Google_Cloud_Visualinspection_V1beta1_UpdateModelRequest) -> Bool {
    if lhs._model != rhs._model {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelEvaluationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelEvaluationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "model_evaluations"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.modelEvaluations) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.modelEvaluations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modelEvaluations, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListModelEvaluationsResponse) -> Bool {
    if lhs.modelEvaluations != rhs.modelEvaluations {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetModelEvaluationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelEvaluationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetModelEvaluationRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetModelEvaluationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_WritePredictionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WritePredictionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    2: .standard(proto: "output_score_threshold"),
    3: .standard(proto: "output_matching_iou_threshold"),
    4: .standard(proto: "label_keys_copy_allowlist"),
    5: .standard(proto: "label_keys_copy_denylist"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.outputScoreThreshold) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.outputMatchingIouThreshold) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.labelKeysCopyAllowlist) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.labelKeysCopyDenylist) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 1)
    }
    if self.outputScoreThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.outputScoreThreshold, fieldNumber: 2)
    }
    if self.outputMatchingIouThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.outputMatchingIouThreshold, fieldNumber: 3)
    }
    if !self.labelKeysCopyAllowlist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.labelKeysCopyAllowlist, fieldNumber: 4)
    }
    if !self.labelKeysCopyDenylist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.labelKeysCopyDenylist, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_WritePredictionsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_WritePredictionsRequest) -> Bool {
    if lhs.model != rhs.model {return false}
    if lhs.outputScoreThreshold != rhs.outputScoreThreshold {return false}
    if lhs.outputMatchingIouThreshold != rhs.outputMatchingIouThreshold {return false}
    if lhs.labelKeysCopyAllowlist != rhs.labelKeysCopyAllowlist {return false}
    if lhs.labelKeysCopyDenylist != rhs.labelKeysCopyDenylist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_WritePredictionsOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WritePredictionsOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_WritePredictionsOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_WritePredictionsOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSpecialistPoolRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "specialist_pool"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._specialistPool) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._specialistPool {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._specialistPool != rhs._specialistPool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSpecialistPoolOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_CreateSpecialistPoolOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetSpecialistPoolRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSpecialistPoolRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetSpecialistPoolRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetSpecialistPoolRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSpecialistPoolRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "specialist_pool"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._specialistPool) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specialistPool {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolRequest, rhs: Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolRequest) -> Bool {
    if lhs._specialistPool != rhs._specialistPool {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSpecialistPoolOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_UpdateSpecialistPoolOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSpecialistPoolsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSpecialistPoolsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "specialist_pools"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.specialistPools) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.specialistPools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.specialistPools, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListSpecialistPoolsResponse) -> Bool {
    if lhs.specialistPools != rhs.specialistPools {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteSpecialistPoolRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolRequest, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteSpecialistPoolOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteSpecialistPoolOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CreateLabelingJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateLabelingJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "labeling_job"),
  ]

  fileprivate class _StorageClass {
    var _parent: String = String()
    var _labelingJob: Google_Cloud_Visualinspection_V1beta1_LabelingJob? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _parent = source._parent
      _labelingJob = source._labelingJob
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._parent) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._labelingJob) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 1)
      }
      if let v = _storage._labelingJob {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CreateLabelingJobRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CreateLabelingJobRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._labelingJob != rhs_storage._labelingJob {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_GetLabelingJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetLabelingJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_GetLabelingJobRequest, rhs: Google_Cloud_Visualinspection_V1beta1_GetLabelingJobRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLabelingJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsRequest, rhs: Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLabelingJobsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "labeling_jobs"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.labelingJobs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labelingJobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.labelingJobs, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ListLabelingJobsResponse) -> Bool {
    if lhs.labelingJobs != rhs.labelingJobs {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteLabelingJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobRequest, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteLabelingJobOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_DeleteLabelingJobOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_CancelLabelingJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelLabelingJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_CancelLabelingJobRequest, rhs: Google_Cloud_Visualinspection_V1beta1_CancelLabelingJobRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_BatchPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "solution_artifact"),
    2: .standard(proto: "input_uri"),
    3: .standard(proto: "output_gcs_dir"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.solutionArtifact) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.inputUri) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._outputGcsDir) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.solutionArtifact.isEmpty {
      try visitor.visitSingularStringField(value: self.solutionArtifact, fieldNumber: 1)
    }
    if !self.inputUri.isEmpty {
      try visitor.visitSingularStringField(value: self.inputUri, fieldNumber: 2)
    }
    if let v = self._outputGcsDir {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_BatchPredictRequest, rhs: Google_Cloud_Visualinspection_V1beta1_BatchPredictRequest) -> Bool {
    if lhs.solutionArtifact != rhs.solutionArtifact {return false}
    if lhs.inputUri != rhs.inputUri {return false}
    if lhs._outputGcsDir != rhs._outputGcsDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_BatchPredictOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchPredictOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_BatchPredictOperationMetadata, rhs: Google_Cloud_Visualinspection_V1beta1_BatchPredictOperationMetadata) -> Bool {
    if lhs._commonOperationMetadata != rhs._commonOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_BatchPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchPredictResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_BatchPredictResponse, rhs: Google_Cloud_Visualinspection_V1beta1_BatchPredictResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ExportDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ExportDataResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ExportDataResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_ImportDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_ImportDataResponse, rhs: Google_Cloud_Visualinspection_V1beta1_ImportDataResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Visualinspection_V1beta1_WritePredictionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WritePredictionsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Visualinspection_V1beta1_WritePredictionsResponse, rhs: Google_Cloud_Visualinspection_V1beta1_WritePredictionsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
