// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/billing/v1/cloud_catalog.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Encapsulates a single service in Google Cloud Platform.
public struct Google_Cloud_Billing_V1_Service {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name for the service.
  /// Example: "services/DA34-426B-A397"
  public var name: String = String()

  /// The identifier for the service.
  /// Example: "DA34-426B-A397"
  public var serviceID: String = String()

  /// A human readable display name for this service.
  public var displayName: String = String()

  /// The business under which the service is offered.
  /// Ex. "businessEntities/GCP", "businessEntities/Maps"
  public var businessEntityName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Encapsulates a single SKU in Google Cloud Platform
public struct Google_Cloud_Billing_V1_Sku {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name for the SKU.
  /// Example: "services/DA34-426B-A397/skus/AA95-CD31-42FE"
  public var name: String = String()

  /// The identifier for the SKU.
  /// Example: "AA95-CD31-42FE"
  public var skuID: String = String()

  /// A human readable description of the SKU, has a maximum length of 256
  /// characters.
  public var description_p: String = String()

  /// The category hierarchy of this SKU, purely for organizational purpose.
  public var category: Google_Cloud_Billing_V1_Category {
    get {return _category ?? Google_Cloud_Billing_V1_Category()}
    set {_category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  public var hasCategory: Bool {return self._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  public mutating func clearCategory() {self._category = nil}

  /// List of service regions this SKU is offered at.
  /// Example: "asia-east1"
  /// Service regions can be found at https://cloud.google.com/about/locations/
  public var serviceRegions: [String] = []

  /// A timeline of pricing info for this SKU in chronological order.
  public var pricingInfo: [Google_Cloud_Billing_V1_PricingInfo] = []

  /// Identifies the service provider.
  /// This is 'Google' for first party services in Google Cloud Platform.
  public var serviceProviderName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _category: Google_Cloud_Billing_V1_Category? = nil
}

/// Represents the category hierarchy of a SKU.
public struct Google_Cloud_Billing_V1_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The display name of the service this SKU belongs to.
  public var serviceDisplayName: String = String()

  /// The type of product the SKU refers to.
  /// Example: "Compute", "Storage", "Network", "ApplicationServices" etc.
  public var resourceFamily: String = String()

  /// A group classification for related SKUs.
  /// Example: "RAM", "GPU", "Prediction", "Ops", "GoogleEgress" etc.
  public var resourceGroup: String = String()

  /// Represents how the SKU is consumed.
  /// Example: "OnDemand", "Preemptible", "Commit1Mo", "Commit1Yr" etc.
  public var usageType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents the pricing information for a SKU at a single point of time.
public struct Google_Cloud_Billing_V1_PricingInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The timestamp from which this pricing was effective within the requested
  /// time range. This is guaranteed to be greater than or equal to the
  /// start_time field in the request and less than the end_time field in the
  /// request. If a time range was not specified in the request this field will
  /// be equivalent to a time within the last 12 hours, indicating the latest
  /// pricing info.
  public var effectiveTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _effectiveTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_effectiveTime = newValue}
  }
  /// Returns true if `effectiveTime` has been explicitly set.
  public var hasEffectiveTime: Bool {return self._effectiveTime != nil}
  /// Clears the value of `effectiveTime`. Subsequent reads from it will return its default value.
  public mutating func clearEffectiveTime() {self._effectiveTime = nil}

  /// An optional human readable summary of the pricing information, has a
  /// maximum length of 256 characters.
  public var summary: String = String()

  /// Expresses the pricing formula. See `PricingExpression` for an example.
  public var pricingExpression: Google_Cloud_Billing_V1_PricingExpression {
    get {return _pricingExpression ?? Google_Cloud_Billing_V1_PricingExpression()}
    set {_pricingExpression = newValue}
  }
  /// Returns true if `pricingExpression` has been explicitly set.
  public var hasPricingExpression: Bool {return self._pricingExpression != nil}
  /// Clears the value of `pricingExpression`. Subsequent reads from it will return its default value.
  public mutating func clearPricingExpression() {self._pricingExpression = nil}

  /// Aggregation Info. This can be left unspecified if the pricing expression
  /// doesn't require aggregation.
  public var aggregationInfo: Google_Cloud_Billing_V1_AggregationInfo {
    get {return _aggregationInfo ?? Google_Cloud_Billing_V1_AggregationInfo()}
    set {_aggregationInfo = newValue}
  }
  /// Returns true if `aggregationInfo` has been explicitly set.
  public var hasAggregationInfo: Bool {return self._aggregationInfo != nil}
  /// Clears the value of `aggregationInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAggregationInfo() {self._aggregationInfo = nil}

  /// Conversion rate used for currency conversion, from USD to the currency
  /// specified in the request. This includes any surcharge collected for billing
  /// in non USD currency. If a currency is not specified in the request this
  /// defaults to 1.0.
  /// Example: USD * currency_conversion_rate = JPY
  public var currencyConversionRate: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _effectiveTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _pricingExpression: Google_Cloud_Billing_V1_PricingExpression? = nil
  fileprivate var _aggregationInfo: Google_Cloud_Billing_V1_AggregationInfo? = nil
}

/// Expresses a mathematical pricing formula. For Example:-
///
/// `usage_unit: GBy`
/// `tiered_rates:`
///    `[start_usage_amount: 20, unit_price: $10]`
///    `[start_usage_amount: 100, unit_price: $5]`
///
/// The above expresses a pricing formula where the first 20GB is free, the
/// next 80GB is priced at $10 per GB followed by $5 per GB for additional
/// usage.
public struct Google_Cloud_Billing_V1_PricingExpression {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The short hand for unit of usage this pricing is specified in.
  /// Example: usage_unit of "GiBy" means that usage is specified in "Gibi Byte".
  public var usageUnit: String = String()

  /// The unit of usage in human readable form.
  /// Example: "gibi byte".
  public var usageUnitDescription: String = String()

  /// The base unit for the SKU which is the unit used in usage exports.
  /// Example: "By"
  public var baseUnit: String = String()

  /// The base unit in human readable form.
  /// Example: "byte".
  public var baseUnitDescription: String = String()

  /// Conversion factor for converting from price per usage_unit to price per
  /// base_unit, and start_usage_amount to start_usage_amount in base_unit.
  /// unit_price / base_unit_conversion_factor = price per base_unit.
  /// start_usage_amount * base_unit_conversion_factor = start_usage_amount in
  /// base_unit.
  public var baseUnitConversionFactor: Double = 0

  /// The recommended quantity of units for displaying pricing info. When
  /// displaying pricing info it is recommended to display:
  /// (unit_price * display_quantity) per display_quantity usage_unit.
  /// This field does not affect the pricing formula and is for display purposes
  /// only.
  /// Example: If the unit_price is "0.0001 USD", the usage_unit is "GB" and
  /// the display_quantity is "1000" then the recommended way of displaying the
  /// pricing info is "0.10 USD per 1000 GB"
  public var displayQuantity: Double = 0

  /// The list of tiered rates for this pricing. The total cost is computed by
  /// applying each of the tiered rates on usage. This repeated list is sorted
  /// by ascending order of start_usage_amount.
  public var tieredRates: [Google_Cloud_Billing_V1_PricingExpression.TierRate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The price rate indicating starting usage and its corresponding price.
  public struct TierRate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Usage is priced at this rate only after this amount.
    /// Example: start_usage_amount of 10 indicates that the usage will be priced
    /// at the unit_price after the first 10 usage_units.
    public var startUsageAmount: Double = 0

    /// The price per unit of usage.
    /// Example: unit_price of amount $10 indicates that each unit will cost $10.
    public var unitPrice: Google_Type_Money {
      get {return _unitPrice ?? Google_Type_Money()}
      set {_unitPrice = newValue}
    }
    /// Returns true if `unitPrice` has been explicitly set.
    public var hasUnitPrice: Bool {return self._unitPrice != nil}
    /// Clears the value of `unitPrice`. Subsequent reads from it will return its default value.
    public mutating func clearUnitPrice() {self._unitPrice = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _unitPrice: Google_Type_Money? = nil
  }

  public init() {}
}

/// Represents the aggregation level and interval for pricing of a single SKU.
public struct Google_Cloud_Billing_V1_AggregationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var aggregationLevel: Google_Cloud_Billing_V1_AggregationInfo.AggregationLevel = .unspecified

  public var aggregationInterval: Google_Cloud_Billing_V1_AggregationInfo.AggregationInterval = .unspecified

  /// The number of intervals to aggregate over.
  /// Example: If aggregation_level is "DAILY" and aggregation_count is 14,
  /// aggregation will be over 14 days.
  public var aggregationCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The level at which usage is aggregated to compute cost.
  /// Example: "ACCOUNT" aggregation level indicates that usage for tiered
  /// pricing is aggregated across all projects in a single account.
  public enum AggregationLevel: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case account // = 1
    case project // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .account
      case 2: self = .project
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .account: return 1
      case .project: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The interval at which usage is aggregated to compute cost.
  /// Example: "MONTHLY" aggregation interval indicates that usage for tiered
  /// pricing is aggregated every month.
  public enum AggregationInterval: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case daily // = 1
    case monthly // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .daily
      case 2: self = .monthly
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .daily: return 1
      case .monthly: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Billing_V1_AggregationInfo.AggregationLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Billing_V1_AggregationInfo.AggregationLevel] = [
    .unspecified,
    .account,
    .project,
  ]
}

extension Google_Cloud_Billing_V1_AggregationInfo.AggregationInterval: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Billing_V1_AggregationInfo.AggregationInterval] = [
    .unspecified,
    .daily,
    .monthly,
  ]
}

#endif  // swift(>=4.2)

/// Request message for `ListServices`.
public struct Google_Cloud_Billing_V1_ListServicesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Requested page size. Defaults to 5000.
  public var pageSize: Int32 = 0

  /// A token identifying a page of results to return. This should be a
  /// `next_page_token` value returned from a previous `ListServices`
  /// call. If unspecified, the first page of results is returned.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for `ListServices`.
public struct Google_Cloud_Billing_V1_ListServicesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of services.
  public var services: [Google_Cloud_Billing_V1_Service] = []

  /// A token to retrieve the next page of results. To retrieve the next page,
  /// call `ListServices` again with the `page_token` field set to this
  /// value. This field is empty if there are no more results to retrieve.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for `ListSkus`.
public struct Google_Cloud_Billing_V1_ListSkusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the service.
  /// Example: "services/DA34-426B-A397"
  public var parent: String = String()

  /// Optional inclusive start time of the time range for which the pricing
  /// versions will be returned. Timestamps in the future are not allowed.
  /// The time range has to be within a single calendar month in
  /// America/Los_Angeles timezone. Time range as a whole is optional. If not
  /// specified, the latest pricing will be returned (up to 12 hours old at
  /// most).
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Optional exclusive end time of the time range for which the pricing
  /// versions will be returned. Timestamps in the future are not allowed.
  /// The time range has to be within a single calendar month in
  /// America/Los_Angeles timezone. Time range as a whole is optional. If not
  /// specified, the latest pricing will be returned (up to 12 hours old at
  /// most).
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// The ISO 4217 currency code for the pricing info in the response proto.
  /// Will use the conversion rate as of start_time.
  /// Optional. If not specified USD will be used.
  public var currencyCode: String = String()

  /// Requested page size. Defaults to 5000.
  public var pageSize: Int32 = 0

  /// A token identifying a page of results to return. This should be a
  /// `next_page_token` value returned from a previous `ListSkus`
  /// call. If unspecified, the first page of results is returned.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response message for `ListSkus`.
public struct Google_Cloud_Billing_V1_ListSkusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of public SKUs of the given service.
  public var skus: [Google_Cloud_Billing_V1_Sku] = []

  /// A token to retrieve the next page of results. To retrieve the next page,
  /// call `ListSkus` again with the `page_token` field set to this
  /// value. This field is empty if there are no more results to retrieve.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.billing.v1"

extension Google_Cloud_Billing_V1_Service: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Service"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "service_id"),
    3: .standard(proto: "display_name"),
    4: .standard(proto: "business_entity_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serviceID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.businessEntityName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.serviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceID, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    if !self.businessEntityName.isEmpty {
      try visitor.visitSingularStringField(value: self.businessEntityName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_Service, rhs: Google_Cloud_Billing_V1_Service) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.serviceID != rhs.serviceID {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.businessEntityName != rhs.businessEntityName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_Sku: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sku"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "sku_id"),
    3: .same(proto: "description"),
    4: .same(proto: "category"),
    5: .standard(proto: "service_regions"),
    6: .standard(proto: "pricing_info"),
    7: .standard(proto: "service_provider_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.skuID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._category) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.serviceRegions) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.pricingInfo) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.serviceProviderName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.skuID.isEmpty {
      try visitor.visitSingularStringField(value: self.skuID, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if let v = self._category {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.serviceRegions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.serviceRegions, fieldNumber: 5)
    }
    if !self.pricingInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pricingInfo, fieldNumber: 6)
    }
    if !self.serviceProviderName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceProviderName, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_Sku, rhs: Google_Cloud_Billing_V1_Sku) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._category != rhs._category {return false}
    if lhs.serviceRegions != rhs.serviceRegions {return false}
    if lhs.pricingInfo != rhs.pricingInfo {return false}
    if lhs.serviceProviderName != rhs.serviceProviderName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_display_name"),
    2: .standard(proto: "resource_family"),
    3: .standard(proto: "resource_group"),
    4: .standard(proto: "usage_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceDisplayName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceFamily) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.resourceGroup) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.usageType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceDisplayName, fieldNumber: 1)
    }
    if !self.resourceFamily.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceFamily, fieldNumber: 2)
    }
    if !self.resourceGroup.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceGroup, fieldNumber: 3)
    }
    if !self.usageType.isEmpty {
      try visitor.visitSingularStringField(value: self.usageType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_Category, rhs: Google_Cloud_Billing_V1_Category) -> Bool {
    if lhs.serviceDisplayName != rhs.serviceDisplayName {return false}
    if lhs.resourceFamily != rhs.resourceFamily {return false}
    if lhs.resourceGroup != rhs.resourceGroup {return false}
    if lhs.usageType != rhs.usageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_PricingInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PricingInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "effective_time"),
    2: .same(proto: "summary"),
    3: .standard(proto: "pricing_expression"),
    4: .standard(proto: "aggregation_info"),
    5: .standard(proto: "currency_conversion_rate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._effectiveTime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.summary) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._pricingExpression) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._aggregationInfo) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.currencyConversionRate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._effectiveTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularStringField(value: self.summary, fieldNumber: 2)
    }
    if let v = self._pricingExpression {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._aggregationInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.currencyConversionRate != 0 {
      try visitor.visitSingularDoubleField(value: self.currencyConversionRate, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_PricingInfo, rhs: Google_Cloud_Billing_V1_PricingInfo) -> Bool {
    if lhs._effectiveTime != rhs._effectiveTime {return false}
    if lhs.summary != rhs.summary {return false}
    if lhs._pricingExpression != rhs._pricingExpression {return false}
    if lhs._aggregationInfo != rhs._aggregationInfo {return false}
    if lhs.currencyConversionRate != rhs.currencyConversionRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_PricingExpression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PricingExpression"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "usage_unit"),
    4: .standard(proto: "usage_unit_description"),
    5: .standard(proto: "base_unit"),
    6: .standard(proto: "base_unit_description"),
    7: .standard(proto: "base_unit_conversion_factor"),
    2: .standard(proto: "display_quantity"),
    3: .standard(proto: "tiered_rates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.usageUnit) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.displayQuantity) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tieredRates) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.usageUnitDescription) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.baseUnit) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.baseUnitDescription) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.baseUnitConversionFactor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.usageUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.usageUnit, fieldNumber: 1)
    }
    if self.displayQuantity != 0 {
      try visitor.visitSingularDoubleField(value: self.displayQuantity, fieldNumber: 2)
    }
    if !self.tieredRates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tieredRates, fieldNumber: 3)
    }
    if !self.usageUnitDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.usageUnitDescription, fieldNumber: 4)
    }
    if !self.baseUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.baseUnit, fieldNumber: 5)
    }
    if !self.baseUnitDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.baseUnitDescription, fieldNumber: 6)
    }
    if self.baseUnitConversionFactor != 0 {
      try visitor.visitSingularDoubleField(value: self.baseUnitConversionFactor, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_PricingExpression, rhs: Google_Cloud_Billing_V1_PricingExpression) -> Bool {
    if lhs.usageUnit != rhs.usageUnit {return false}
    if lhs.usageUnitDescription != rhs.usageUnitDescription {return false}
    if lhs.baseUnit != rhs.baseUnit {return false}
    if lhs.baseUnitDescription != rhs.baseUnitDescription {return false}
    if lhs.baseUnitConversionFactor != rhs.baseUnitConversionFactor {return false}
    if lhs.displayQuantity != rhs.displayQuantity {return false}
    if lhs.tieredRates != rhs.tieredRates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_PricingExpression.TierRate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Billing_V1_PricingExpression.protoMessageName + ".TierRate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_usage_amount"),
    2: .standard(proto: "unit_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.startUsageAmount) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._unitPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startUsageAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.startUsageAmount, fieldNumber: 1)
    }
    if let v = self._unitPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_PricingExpression.TierRate, rhs: Google_Cloud_Billing_V1_PricingExpression.TierRate) -> Bool {
    if lhs.startUsageAmount != rhs.startUsageAmount {return false}
    if lhs._unitPrice != rhs._unitPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_AggregationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AggregationInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aggregation_level"),
    2: .standard(proto: "aggregation_interval"),
    3: .standard(proto: "aggregation_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.aggregationLevel) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.aggregationInterval) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.aggregationCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.aggregationLevel != .unspecified {
      try visitor.visitSingularEnumField(value: self.aggregationLevel, fieldNumber: 1)
    }
    if self.aggregationInterval != .unspecified {
      try visitor.visitSingularEnumField(value: self.aggregationInterval, fieldNumber: 2)
    }
    if self.aggregationCount != 0 {
      try visitor.visitSingularInt32Field(value: self.aggregationCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_AggregationInfo, rhs: Google_Cloud_Billing_V1_AggregationInfo) -> Bool {
    if lhs.aggregationLevel != rhs.aggregationLevel {return false}
    if lhs.aggregationInterval != rhs.aggregationInterval {return false}
    if lhs.aggregationCount != rhs.aggregationCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_AggregationInfo.AggregationLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AGGREGATION_LEVEL_UNSPECIFIED"),
    1: .same(proto: "ACCOUNT"),
    2: .same(proto: "PROJECT"),
  ]
}

extension Google_Cloud_Billing_V1_AggregationInfo.AggregationInterval: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AGGREGATION_INTERVAL_UNSPECIFIED"),
    1: .same(proto: "DAILY"),
    2: .same(proto: "MONTHLY"),
  ]
}

extension Google_Cloud_Billing_V1_ListServicesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServicesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_size"),
    2: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_ListServicesRequest, rhs: Google_Cloud_Billing_V1_ListServicesRequest) -> Bool {
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_ListServicesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServicesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "services"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.services) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.services.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.services, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_ListServicesResponse, rhs: Google_Cloud_Billing_V1_ListServicesResponse) -> Bool {
    if lhs.services != rhs.services {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_ListSkusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSkusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
    4: .standard(proto: "currency_code"),
    5: .standard(proto: "page_size"),
    6: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.currencyCode) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 5)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_ListSkusRequest, rhs: Google_Cloud_Billing_V1_ListSkusRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Billing_V1_ListSkusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSkusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "skus"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.skus) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.skus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.skus, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Billing_V1_ListSkusResponse, rhs: Google_Cloud_Billing_V1_ListSkusResponse) -> Bool {
    if lhs.skus != rhs.skus {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
