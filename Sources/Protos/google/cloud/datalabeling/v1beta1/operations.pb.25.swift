// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/datalabeling/v1beta1/operations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Response used for ImportData longrunning operation.
public struct Google_Cloud_Datalabeling_V1beta1_ImportDataOperationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ouptut only. The name of imported dataset.
  public var dataset: String = String()

  /// Output only. Total number of examples requested to import
  public var totalCount: Int32 = 0

  /// Output only. Number of examples imported successfully.
  public var importCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response used for ExportDataset longrunning operation.
public struct Google_Cloud_Datalabeling_V1beta1_ExportDataOperationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ouptut only. The name of dataset.
  /// "projects/*/datasets/*"
  public var dataset: String = String()

  /// Output only. Total number of examples requested to export
  public var totalCount: Int32 = 0

  /// Output only. Number of examples exported successfully.
  public var exportCount: Int32 = 0

  /// Output only. Statistic infos of labels in the exported dataset.
  public var labelStats: Google_Cloud_Datalabeling_V1beta1_LabelStats {
    get {return _labelStats ?? Google_Cloud_Datalabeling_V1beta1_LabelStats()}
    set {_labelStats = newValue}
  }
  /// Returns true if `labelStats` has been explicitly set.
  public var hasLabelStats: Bool {return self._labelStats != nil}
  /// Clears the value of `labelStats`. Subsequent reads from it will return its default value.
  public mutating func clearLabelStats() {self._labelStats = nil}

  /// Output only. output_config in the ExportData request.
  public var outputConfig: Google_Cloud_Datalabeling_V1beta1_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Datalabeling_V1beta1_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _labelStats: Google_Cloud_Datalabeling_V1beta1_LabelStats? = nil
  fileprivate var _outputConfig: Google_Cloud_Datalabeling_V1beta1_OutputConfig? = nil
}

/// Metadata of an ImportData operation.
public struct Google_Cloud_Datalabeling_V1beta1_ImportDataOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The name of imported dataset.
  /// "projects/*/datasets/*"
  public var dataset: String = String()

  /// Output only. Partial failures encountered.
  /// E.g. single files that couldn't be read.
  /// Status details field will contain standard GCP error details.
  public var partialFailures: [Google_Rpc_Status] = []

  /// Output only. Timestamp when import dataset request was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Metadata of an ExportData operation.
public struct Google_Cloud_Datalabeling_V1beta1_ExportDataOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The name of dataset to be exported.
  /// "projects/*/datasets/*"
  public var dataset: String = String()

  /// Output only. Partial failures encountered.
  /// E.g. single files that couldn't be read.
  /// Status details field will contain standard GCP error details.
  public var partialFailures: [Google_Rpc_Status] = []

  /// Output only. Timestamp when export dataset request was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Metadata of a labeling operation, such as LabelImage or LabelVideo.
/// Next tag: 20
public struct Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ouptut only. Details of specific label operation.
  public var details: Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata.OneOf_Details? = nil

  /// Details of label image classification operation.
  public var imageClassificationDetails: Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata {
    get {
      if case .imageClassificationDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata()
    }
    set {details = .imageClassificationDetails(newValue)}
  }

  /// Details of label image bounding box operation.
  public var imageBoundingBoxDetails: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata {
    get {
      if case .imageBoundingBoxDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata()
    }
    set {details = .imageBoundingBoxDetails(newValue)}
  }

  /// Details of label image bounding poly operation.
  public var imageBoundingPolyDetails: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata {
    get {
      if case .imageBoundingPolyDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata()
    }
    set {details = .imageBoundingPolyDetails(newValue)}
  }

  /// Details of label image oriented bounding box operation.
  public var imageOrientedBoundingBoxDetails: Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata {
    get {
      if case .imageOrientedBoundingBoxDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata()
    }
    set {details = .imageOrientedBoundingBoxDetails(newValue)}
  }

  /// Details of label image polyline operation.
  public var imagePolylineDetails: Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata {
    get {
      if case .imagePolylineDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata()
    }
    set {details = .imagePolylineDetails(newValue)}
  }

  /// Details of label image segmentation operation.
  public var imageSegmentationDetails: Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata {
    get {
      if case .imageSegmentationDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata()
    }
    set {details = .imageSegmentationDetails(newValue)}
  }

  /// Details of label video classification operation.
  public var videoClassificationDetails: Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata {
    get {
      if case .videoClassificationDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata()
    }
    set {details = .videoClassificationDetails(newValue)}
  }

  /// Details of label video object detection operation.
  public var videoObjectDetectionDetails: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata {
    get {
      if case .videoObjectDetectionDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata()
    }
    set {details = .videoObjectDetectionDetails(newValue)}
  }

  /// Details of label video object tracking operation.
  public var videoObjectTrackingDetails: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata {
    get {
      if case .videoObjectTrackingDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata()
    }
    set {details = .videoObjectTrackingDetails(newValue)}
  }

  /// Details of label video event operation.
  public var videoEventDetails: Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata {
    get {
      if case .videoEventDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata()
    }
    set {details = .videoEventDetails(newValue)}
  }

  /// Details of label text classification operation.
  public var textClassificationDetails: Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata {
    get {
      if case .textClassificationDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata()
    }
    set {details = .textClassificationDetails(newValue)}
  }

  /// Details of label text entity extraction operation.
  public var textEntityExtractionDetails: Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata {
    get {
      if case .textEntityExtractionDetails(let v)? = details {return v}
      return Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata()
    }
    set {details = .textEntityExtractionDetails(newValue)}
  }

  /// Output only. Progress of label operation. Range: [0, 100].
  public var progressPercent: Int32 = 0

  /// Output only. Partial failures encountered.
  /// E.g. single files that couldn't be read.
  /// Status details field will contain standard GCP error details.
  public var partialFailures: [Google_Rpc_Status] = []

  /// Output only. Timestamp when labeling request was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Ouptut only. Details of specific label operation.
  public enum OneOf_Details: Equatable {
    /// Details of label image classification operation.
    case imageClassificationDetails(Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata)
    /// Details of label image bounding box operation.
    case imageBoundingBoxDetails(Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata)
    /// Details of label image bounding poly operation.
    case imageBoundingPolyDetails(Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata)
    /// Details of label image oriented bounding box operation.
    case imageOrientedBoundingBoxDetails(Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata)
    /// Details of label image polyline operation.
    case imagePolylineDetails(Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata)
    /// Details of label image segmentation operation.
    case imageSegmentationDetails(Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata)
    /// Details of label video classification operation.
    case videoClassificationDetails(Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata)
    /// Details of label video object detection operation.
    case videoObjectDetectionDetails(Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata)
    /// Details of label video object tracking operation.
    case videoObjectTrackingDetails(Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata)
    /// Details of label video event operation.
    case videoEventDetails(Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata)
    /// Details of label text classification operation.
    case textClassificationDetails(Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata)
    /// Details of label text entity extraction operation.
    case textEntityExtractionDetails(Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata.OneOf_Details, rhs: Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata.OneOf_Details) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.imageClassificationDetails, .imageClassificationDetails): return {
        guard case .imageClassificationDetails(let l) = lhs, case .imageClassificationDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageBoundingBoxDetails, .imageBoundingBoxDetails): return {
        guard case .imageBoundingBoxDetails(let l) = lhs, case .imageBoundingBoxDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageBoundingPolyDetails, .imageBoundingPolyDetails): return {
        guard case .imageBoundingPolyDetails(let l) = lhs, case .imageBoundingPolyDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageOrientedBoundingBoxDetails, .imageOrientedBoundingBoxDetails): return {
        guard case .imageOrientedBoundingBoxDetails(let l) = lhs, case .imageOrientedBoundingBoxDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imagePolylineDetails, .imagePolylineDetails): return {
        guard case .imagePolylineDetails(let l) = lhs, case .imagePolylineDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageSegmentationDetails, .imageSegmentationDetails): return {
        guard case .imageSegmentationDetails(let l) = lhs, case .imageSegmentationDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.videoClassificationDetails, .videoClassificationDetails): return {
        guard case .videoClassificationDetails(let l) = lhs, case .videoClassificationDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.videoObjectDetectionDetails, .videoObjectDetectionDetails): return {
        guard case .videoObjectDetectionDetails(let l) = lhs, case .videoObjectDetectionDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.videoObjectTrackingDetails, .videoObjectTrackingDetails): return {
        guard case .videoObjectTrackingDetails(let l) = lhs, case .videoObjectTrackingDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.videoEventDetails, .videoEventDetails): return {
        guard case .videoEventDetails(let l) = lhs, case .videoEventDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textClassificationDetails, .textClassificationDetails): return {
        guard case .textClassificationDetails(let l) = lhs, case .textClassificationDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textEntityExtractionDetails, .textEntityExtractionDetails): return {
        guard case .textEntityExtractionDetails(let l) = lhs, case .textEntityExtractionDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Metadata of a LabelImageClassification operation.
public struct Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelImageBoundingBox operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelImageOrientedBoundingBox operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of LabelImageBoundingPoly operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of LabelImagePolyline operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelImageSegmentation operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelVideoClassification operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelVideoObjectDetection operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelVideoObjectTracking operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelVideoEvent operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelTextClassification operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Details of a LabelTextEntityExtraction operation metadata.
public struct Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic human annotation config used in labeling request.
  public var basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig {
    get {return _basicConfig ?? Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig()}
    set {_basicConfig = newValue}
  }
  /// Returns true if `basicConfig` has been explicitly set.
  public var hasBasicConfig: Bool {return self._basicConfig != nil}
  /// Clears the value of `basicConfig`. Subsequent reads from it will return its default value.
  public mutating func clearBasicConfig() {self._basicConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _basicConfig: Google_Cloud_Datalabeling_V1beta1_HumanAnnotationConfig? = nil
}

/// Metadata of a CreateInstruction operation.
public struct Google_Cloud_Datalabeling_V1beta1_CreateInstructionMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the created Instruction.
  /// projects/{project_id}/instructions/{instruction_id}
  public var instruction: String = String()

  /// Partial failures encountered.
  /// E.g. single files that couldn't be read.
  /// Status details field will contain standard GCP error details.
  public var partialFailures: [Google_Rpc_Status] = []

  /// Timestamp when create instruction request was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.datalabeling.v1beta1"

extension Google_Cloud_Datalabeling_V1beta1_ImportDataOperationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataOperationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    2: .standard(proto: "total_count"),
    3: .standard(proto: "import_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.importCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 2)
    }
    if self.importCount != 0 {
      try visitor.visitSingularInt32Field(value: self.importCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_ImportDataOperationResponse, rhs: Google_Cloud_Datalabeling_V1beta1_ImportDataOperationResponse) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.importCount != rhs.importCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_ExportDataOperationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataOperationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    2: .standard(proto: "total_count"),
    3: .standard(proto: "export_count"),
    4: .standard(proto: "label_stats"),
    5: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.exportCount) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._labelStats) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 2)
    }
    if self.exportCount != 0 {
      try visitor.visitSingularInt32Field(value: self.exportCount, fieldNumber: 3)
    }
    if let v = self._labelStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_ExportDataOperationResponse, rhs: Google_Cloud_Datalabeling_V1beta1_ExportDataOperationResponse) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.exportCount != rhs.exportCount {return false}
    if lhs._labelStats != rhs._labelStats {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_ImportDataOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    2: .standard(proto: "partial_failures"),
    3: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.partialFailures) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if !self.partialFailures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialFailures, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_ImportDataOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_ImportDataOperationMetadata) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.partialFailures != rhs.partialFailures {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_ExportDataOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    2: .standard(proto: "partial_failures"),
    3: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.partialFailures) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if !self.partialFailures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialFailures, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_ExportDataOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_ExportDataOperationMetadata) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.partialFailures != rhs.partialFailures {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "image_classification_details"),
    4: .standard(proto: "image_bounding_box_details"),
    11: .standard(proto: "image_bounding_poly_details"),
    14: .standard(proto: "image_oriented_bounding_box_details"),
    12: .standard(proto: "image_polyline_details"),
    15: .standard(proto: "image_segmentation_details"),
    5: .standard(proto: "video_classification_details"),
    6: .standard(proto: "video_object_detection_details"),
    7: .standard(proto: "video_object_tracking_details"),
    8: .standard(proto: "video_event_details"),
    9: .standard(proto: "text_classification_details"),
    13: .standard(proto: "text_entity_extraction_details"),
    1: .standard(proto: "progress_percent"),
    2: .standard(proto: "partial_failures"),
    16: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.progressPercent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.partialFailures) }()
      case 3: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .imageClassificationDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .imageClassificationDetails(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .imageBoundingBoxDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .imageBoundingBoxDetails(v)}
      }()
      case 5: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .videoClassificationDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .videoClassificationDetails(v)}
      }()
      case 6: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .videoObjectDetectionDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .videoObjectDetectionDetails(v)}
      }()
      case 7: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .videoObjectTrackingDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .videoObjectTrackingDetails(v)}
      }()
      case 8: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .videoEventDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .videoEventDetails(v)}
      }()
      case 9: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .textClassificationDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .textClassificationDetails(v)}
      }()
      case 11: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .imageBoundingPolyDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .imageBoundingPolyDetails(v)}
      }()
      case 12: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .imagePolylineDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .imagePolylineDetails(v)}
      }()
      case 13: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .textEntityExtractionDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .textEntityExtractionDetails(v)}
      }()
      case 14: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .imageOrientedBoundingBoxDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .imageOrientedBoundingBoxDetails(v)}
      }()
      case 15: try {
        var v: Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .imageSegmentationDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .imageSegmentationDetails(v)}
      }()
      case 16: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.progressPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.progressPercent, fieldNumber: 1)
    }
    if !self.partialFailures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialFailures, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.details {
    case .imageClassificationDetails?: try {
      guard case .imageClassificationDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .imageBoundingBoxDetails?: try {
      guard case .imageBoundingBoxDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .videoClassificationDetails?: try {
      guard case .videoClassificationDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .videoObjectDetectionDetails?: try {
      guard case .videoObjectDetectionDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .videoObjectTrackingDetails?: try {
      guard case .videoObjectTrackingDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .videoEventDetails?: try {
      guard case .videoEventDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .textClassificationDetails?: try {
      guard case .textClassificationDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .imageBoundingPolyDetails?: try {
      guard case .imageBoundingPolyDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .imagePolylineDetails?: try {
      guard case .imagePolylineDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .textEntityExtractionDetails?: try {
      guard case .textEntityExtractionDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .imageOrientedBoundingBoxDetails?: try {
      guard case .imageOrientedBoundingBoxDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .imageSegmentationDetails?: try {
      guard case .imageSegmentationDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case nil: break
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelOperationMetadata) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.progressPercent != rhs.progressPercent {return false}
    if lhs.partialFailures != rhs.partialFailures {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelImageClassificationOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelImageClassificationOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelImageBoundingBoxOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingBoxOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelImageOrientedBoundingBoxOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelImageOrientedBoundingBoxOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelImageBoundingPolyOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelImageBoundingPolyOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelImagePolylineOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelImagePolylineOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelImageSegmentationOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelImageSegmentationOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelVideoClassificationOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoClassificationOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelVideoObjectDetectionOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectDetectionOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelVideoObjectTrackingOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoObjectTrackingOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelVideoEventOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelVideoEventOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelTextClassificationOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelTextClassificationOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelTextEntityExtractionOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._basicConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._basicConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_LabelTextEntityExtractionOperationMetadata) -> Bool {
    if lhs._basicConfig != rhs._basicConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Datalabeling_V1beta1_CreateInstructionMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateInstructionMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruction"),
    2: .standard(proto: "partial_failures"),
    3: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instruction) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.partialFailures) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruction.isEmpty {
      try visitor.visitSingularStringField(value: self.instruction, fieldNumber: 1)
    }
    if !self.partialFailures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialFailures, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Datalabeling_V1beta1_CreateInstructionMetadata, rhs: Google_Cloud_Datalabeling_V1beta1_CreateInstructionMetadata) -> Bool {
    if lhs.instruction != rhs.instruction {return false}
    if lhs.partialFailures != rhs.partialFailures {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
