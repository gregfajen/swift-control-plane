//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/pubsublite/v1/subscriber.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Pubsublite_V1_SubscriberServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Pubsublite_V1_SubscriberServiceClientProtocol: GRPCClient {
  func subscribe(
    callOptions: CallOptions?,
    handler: @escaping (Google_Cloud_Pubsublite_V1_SubscribeResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Cloud_Pubsublite_V1_SubscribeRequest, Google_Cloud_Pubsublite_V1_SubscribeResponse>

}

extension Google_Cloud_Pubsublite_V1_SubscriberServiceClientProtocol {

  /// Establishes a stream with the server for receiving messages.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func subscribe(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Cloud_Pubsublite_V1_SubscribeResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Cloud_Pubsublite_V1_SubscribeRequest, Google_Cloud_Pubsublite_V1_SubscribeResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/google.cloud.pubsublite.v1.SubscriberService/Subscribe",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

public final class Google_Cloud_Pubsublite_V1_SubscriberServiceClient: Google_Cloud_Pubsublite_V1_SubscriberServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.pubsublite.v1.SubscriberService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceClientProtocol: GRPCClient {
  func assignPartitions(
    callOptions: CallOptions?,
    handler: @escaping (Google_Cloud_Pubsublite_V1_PartitionAssignment) -> Void
  ) -> BidirectionalStreamingCall<Google_Cloud_Pubsublite_V1_PartitionAssignmentRequest, Google_Cloud_Pubsublite_V1_PartitionAssignment>

}

extension Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceClientProtocol {

  /// Assign partitions for this client to handle for the specified subscription.
  ///
  /// The client must send an InitialPartitionAssignmentRequest first.
  /// The server will then send at most one unacknowledged PartitionAssignment
  /// outstanding on the stream at a time.
  /// The client should send a PartitionAssignmentAck after updating the
  /// partitions it is connected to to reflect the new assignment.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func assignPartitions(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Cloud_Pubsublite_V1_PartitionAssignment) -> Void
  ) -> BidirectionalStreamingCall<Google_Cloud_Pubsublite_V1_PartitionAssignmentRequest, Google_Cloud_Pubsublite_V1_PartitionAssignment> {
    return self.makeBidirectionalStreamingCall(
      path: "/google.cloud.pubsublite.v1.PartitionAssignmentService/AssignPartitions",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

public final class Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceClient: Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.pubsublite.v1.PartitionAssignmentService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Pubsublite_V1_SubscriberServiceProvider: CallHandlerProvider {
  /// Establishes a stream with the server for receiving messages.
  func subscribe(context: StreamingResponseCallContext<Google_Cloud_Pubsublite_V1_SubscribeResponse>) -> EventLoopFuture<(StreamEvent<Google_Cloud_Pubsublite_V1_SubscribeRequest>) -> Void>
}

extension Google_Cloud_Pubsublite_V1_SubscriberServiceProvider {
  public var serviceName: Substring { return "google.cloud.pubsublite.v1.SubscriberService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Subscribe":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.subscribe(context: context)
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceProvider: CallHandlerProvider {
  /// Assign partitions for this client to handle for the specified subscription.
  ///
  /// The client must send an InitialPartitionAssignmentRequest first.
  /// The server will then send at most one unacknowledged PartitionAssignment
  /// outstanding on the stream at a time.
  /// The client should send a PartitionAssignmentAck after updating the
  /// partitions it is connected to to reflect the new assignment.
  func assignPartitions(context: StreamingResponseCallContext<Google_Cloud_Pubsublite_V1_PartitionAssignment>) -> EventLoopFuture<(StreamEvent<Google_Cloud_Pubsublite_V1_PartitionAssignmentRequest>) -> Void>
}

extension Google_Cloud_Pubsublite_V1_PartitionAssignmentServiceProvider {
  public var serviceName: Substring { return "google.cloud.pubsublite.v1.PartitionAssignmentService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "AssignPartitions":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.assignPartitions(context: context)
      }

    default: return nil
    }
  }
}

