// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/pubsublite/v1/topic_stats.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Compute statistics about a range of messages in a given topic and partition.
public struct Google_Cloud_Pubsublite_V1_ComputeMessageStatsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The topic for which we should compute message stats.
  public var topic: String = String()

  /// Required. The partition for which we should compute message stats.
  public var partition: Int64 = 0

  /// The inclusive start of the range.
  public var startCursor: Google_Cloud_Pubsublite_V1_Cursor {
    get {return _startCursor ?? Google_Cloud_Pubsublite_V1_Cursor()}
    set {_startCursor = newValue}
  }
  /// Returns true if `startCursor` has been explicitly set.
  public var hasStartCursor: Bool {return self._startCursor != nil}
  /// Clears the value of `startCursor`. Subsequent reads from it will return its default value.
  public mutating func clearStartCursor() {self._startCursor = nil}

  /// The exclusive end of the range. The range is empty if end_cursor <=
  /// start_cursor. Specifying a start_cursor before the first message and an
  /// end_cursor after the last message will retrieve all messages.
  public var endCursor: Google_Cloud_Pubsublite_V1_Cursor {
    get {return _endCursor ?? Google_Cloud_Pubsublite_V1_Cursor()}
    set {_endCursor = newValue}
  }
  /// Returns true if `endCursor` has been explicitly set.
  public var hasEndCursor: Bool {return self._endCursor != nil}
  /// Clears the value of `endCursor`. Subsequent reads from it will return its default value.
  public mutating func clearEndCursor() {self._endCursor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startCursor: Google_Cloud_Pubsublite_V1_Cursor? = nil
  fileprivate var _endCursor: Google_Cloud_Pubsublite_V1_Cursor? = nil
}

/// Response containing stats for messages in the requested topic and partition.
public struct Google_Cloud_Pubsublite_V1_ComputeMessageStatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The count of messages.
  public var messageCount: Int64 = 0

  /// The number of quota bytes accounted to these messages.
  public var messageBytes: Int64 = 0

  /// The minimum publish timestamp across these messages. Note that publish
  /// timestamps within a partition are non-decreasing. The timestamp will be
  /// unset if there are no messages.
  public var minimumPublishTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _minimumPublishTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_minimumPublishTime = newValue}
  }
  /// Returns true if `minimumPublishTime` has been explicitly set.
  public var hasMinimumPublishTime: Bool {return self._minimumPublishTime != nil}
  /// Clears the value of `minimumPublishTime`. Subsequent reads from it will return its default value.
  public mutating func clearMinimumPublishTime() {self._minimumPublishTime = nil}

  /// The minimum event timestamp across these messages. For the purposes of this
  /// computation, if a message does not have an event time, we use the publish
  /// time. The timestamp will be unset if there are no messages.
  public var minimumEventTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _minimumEventTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_minimumEventTime = newValue}
  }
  /// Returns true if `minimumEventTime` has been explicitly set.
  public var hasMinimumEventTime: Bool {return self._minimumEventTime != nil}
  /// Clears the value of `minimumEventTime`. Subsequent reads from it will return its default value.
  public mutating func clearMinimumEventTime() {self._minimumEventTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _minimumPublishTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _minimumEventTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.pubsublite.v1"

extension Google_Cloud_Pubsublite_V1_ComputeMessageStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputeMessageStatsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topic"),
    2: .same(proto: "partition"),
    3: .standard(proto: "start_cursor"),
    4: .standard(proto: "end_cursor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.topic) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.partition) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startCursor) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._endCursor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.topic.isEmpty {
      try visitor.visitSingularStringField(value: self.topic, fieldNumber: 1)
    }
    if self.partition != 0 {
      try visitor.visitSingularInt64Field(value: self.partition, fieldNumber: 2)
    }
    if let v = self._startCursor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._endCursor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Pubsublite_V1_ComputeMessageStatsRequest, rhs: Google_Cloud_Pubsublite_V1_ComputeMessageStatsRequest) -> Bool {
    if lhs.topic != rhs.topic {return false}
    if lhs.partition != rhs.partition {return false}
    if lhs._startCursor != rhs._startCursor {return false}
    if lhs._endCursor != rhs._endCursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Pubsublite_V1_ComputeMessageStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputeMessageStatsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_count"),
    2: .standard(proto: "message_bytes"),
    3: .standard(proto: "minimum_publish_time"),
    4: .standard(proto: "minimum_event_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.messageCount) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.messageBytes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._minimumPublishTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._minimumEventTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.messageCount != 0 {
      try visitor.visitSingularInt64Field(value: self.messageCount, fieldNumber: 1)
    }
    if self.messageBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.messageBytes, fieldNumber: 2)
    }
    if let v = self._minimumPublishTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._minimumEventTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Pubsublite_V1_ComputeMessageStatsResponse, rhs: Google_Cloud_Pubsublite_V1_ComputeMessageStatsResponse) -> Bool {
    if lhs.messageCount != rhs.messageCount {return false}
    if lhs.messageBytes != rhs.messageBytes {return false}
    if lhs._minimumPublishTime != rhs._minimumPublishTime {return false}
    if lhs._minimumEventTime != rhs._minimumEventTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
