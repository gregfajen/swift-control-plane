// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/securitycenter/v1beta1/securitycenter_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for creating a finding.
public struct Google_Cloud_Securitycenter_V1beta1_CreateFindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the new finding's parent. Its format should be
  /// "organizations/[organization_id]/sources/[source_id]".
  public var parent: String = String()

  /// Required. Unique identifier provided by the client within the parent scope.
  /// It must be alphanumeric and less than or equal to 32 characters and
  /// greater than 0 characters in length.
  public var findingID: String = String()

  /// Required. The Finding being created. The name and security_marks will be ignored as
  /// they are both output only fields on this resource.
  public var finding: Google_Cloud_Securitycenter_V1beta1_Finding {
    get {return _finding ?? Google_Cloud_Securitycenter_V1beta1_Finding()}
    set {_finding = newValue}
  }
  /// Returns true if `finding` has been explicitly set.
  public var hasFinding: Bool {return self._finding != nil}
  /// Clears the value of `finding`. Subsequent reads from it will return its default value.
  public mutating func clearFinding() {self._finding = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _finding: Google_Cloud_Securitycenter_V1beta1_Finding? = nil
}

/// Request message for creating a source.
public struct Google_Cloud_Securitycenter_V1beta1_CreateSourceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the new source's parent. Its format should be
  /// "organizations/[organization_id]".
  public var parent: String = String()

  /// Required. The Source being created, only the display_name and description will be
  /// used. All other fields will be ignored.
  public var source: Google_Cloud_Securitycenter_V1beta1_Source {
    get {return _source ?? Google_Cloud_Securitycenter_V1beta1_Source()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _source: Google_Cloud_Securitycenter_V1beta1_Source? = nil
}

/// Request message for getting organization settings.
public struct Google_Cloud_Securitycenter_V1beta1_GetOrganizationSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the organization to get organization settings for. Its format is
  /// "organizations/[organization_id]/organizationSettings".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for getting a source.
public struct Google_Cloud_Securitycenter_V1beta1_GetSourceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Relative resource name of the source. Its format is
  /// "organizations/[organization_id]/source/[source_id]".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for grouping by assets.
public struct Google_Cloud_Securitycenter_V1beta1_GroupAssetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the organization to groupBy. Its format is
  /// "organizations/[organization_id]".
  public var parent: String = String()

  /// Expression that defines the filter to apply across assets.
  /// The expression is a list of zero or more restrictions combined via logical
  /// operators `AND` and `OR`.
  /// Parentheses are not supported, and `OR` has higher precedence than `AND`.
  ///
  /// Restrictions have the form `<field> <operator> <value>` and may have a `-`
  /// character in front of them to indicate negation. The fields map to those
  /// defined in the Asset resource. Examples include:
  ///
  /// * name
  /// * security_center_properties.resource_name
  /// * resource_properties.a_property
  /// * security_marks.marks.marka
  ///
  /// The supported operators are:
  ///
  /// * `=` for all value types.
  /// * `>`, `<`, `>=`, `<=` for integer values.
  /// * `:`, meaning substring matching, for strings.
  ///
  /// The supported value types are:
  ///
  /// * string literals in quotes.
  /// * integer literals without quotes.
  /// * boolean literals `true` and `false` without quotes.
  ///
  /// For example, `resource_properties.size = 100` is a valid filter string.
  public var filter: String = String()

  /// Required. Expression that defines what assets fields to use for grouping. The string
  /// value should follow SQL syntax: comma separated list of fields. For
  /// example:
  /// "security_center_properties.resource_project,security_center_properties.project".
  ///
  /// The following fields are supported when compare_duration is not set:
  ///
  /// * security_center_properties.resource_project
  /// * security_center_properties.resource_type
  /// * security_center_properties.resource_parent
  ///
  /// The following fields are supported when compare_duration is set:
  ///
  /// * security_center_properties.resource_type
  public var groupBy: String = String()

  /// When compare_duration is set, the Asset's "state" property is updated to
  /// indicate whether the asset was added, removed, or remained present during
  /// the compare_duration period of time that precedes the read_time. This is
  /// the time between (read_time - compare_duration) and read_time.
  ///
  /// The state value is derived based on the presence of the asset at the two
  /// points in time. Intermediate state changes between the two times don't
  /// affect the result. For example, the results aren't affected if the asset is
  /// removed and re-created again.
  ///
  /// Possible "state" values when compare_duration is specified:
  ///
  /// * "ADDED": indicates that the asset was not present before
  ///              compare_duration, but present at reference_time.
  /// * "REMOVED": indicates that the asset was present at the start of
  ///              compare_duration, but not present at reference_time.
  /// * "ACTIVE": indicates that the asset was present at both the
  ///              start and the end of the time period defined by
  ///              compare_duration and reference_time.
  ///
  /// This field is ignored if `state` is not a field in `group_by`.
  public var compareDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _compareDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_compareDuration = newValue}
  }
  /// Returns true if `compareDuration` has been explicitly set.
  public var hasCompareDuration: Bool {return self._compareDuration != nil}
  /// Clears the value of `compareDuration`. Subsequent reads from it will return its default value.
  public mutating func clearCompareDuration() {self._compareDuration = nil}

  /// Time used as a reference point when filtering assets. The filter is limited
  /// to assets existing at the supplied time and their values are those at that
  /// specific time. Absence of this field will default to the API's version of
  /// NOW.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// The value returned by the last `GroupAssetsResponse`; indicates
  /// that this is a continuation of a prior `GroupAssets` call, and that the
  /// system should return the next page of data.
  public var pageToken: String = String()

  /// The maximum number of results to return in a single response. Default is
  /// 10, minimum is 1, maximum is 1000.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _compareDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response message for grouping by assets.
public struct Google_Cloud_Securitycenter_V1beta1_GroupAssetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Group results. There exists an element for each existing unique
  /// combination of property/values. The element contains a count for the number
  /// of times those specific property/values appear.
  public var groupByResults: [Google_Cloud_Securitycenter_V1beta1_GroupResult] = []

  /// Time used for executing the groupBy request.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request message for grouping by findings.
public struct Google_Cloud_Securitycenter_V1beta1_GroupFindingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the source to groupBy. Its format is
  /// "organizations/[organization_id]/sources/[source_id]". To groupBy across
  /// all sources provide a source_id of `-`. For example:
  /// organizations/{organization_id}/sources/-
  public var parent: String = String()

  /// Expression that defines the filter to apply across findings.
  /// The expression is a list of one or more restrictions combined via logical
  /// operators `AND` and `OR`.
  /// Parentheses are not supported, and `OR` has higher precedence than `AND`.
  ///
  /// Restrictions have the form `<field> <operator> <value>` and may have a `-`
  /// character in front of them to indicate negation. Examples include:
  ///
  ///  * name
  ///  * source_properties.a_property
  ///  * security_marks.marks.marka
  ///
  /// The supported operators are:
  ///
  /// * `=` for all value types.
  /// * `>`, `<`, `>=`, `<=` for integer values.
  /// * `:`, meaning substring matching, for strings.
  ///
  /// The supported value types are:
  ///
  /// * string literals in quotes.
  /// * integer literals without quotes.
  /// * boolean literals `true` and `false` without quotes.
  ///
  /// For example, `source_properties.size = 100` is a valid filter string.
  public var filter: String = String()

  /// Required. Expression that defines what assets fields to use for grouping (including
  /// `state`). The string value should follow SQL syntax: comma separated list
  /// of fields. For example:
  /// "parent,resource_name".
  ///
  /// The following fields are supported:
  ///
  /// * resource_name
  /// * category
  /// * state
  /// * parent
  public var groupBy: String = String()

  /// Time used as a reference point when filtering findings. The filter is
  /// limited to findings existing at the supplied time and their values are
  /// those at that specific time. Absence of this field will default to the
  /// API's version of NOW.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// The value returned by the last `GroupFindingsResponse`; indicates
  /// that this is a continuation of a prior `GroupFindings` call, and
  /// that the system should return the next page of data.
  public var pageToken: String = String()

  /// The maximum number of results to return in a single response. Default is
  /// 10, minimum is 1, maximum is 1000.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response message for group by findings.
public struct Google_Cloud_Securitycenter_V1beta1_GroupFindingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Group results. There exists an element for each existing unique
  /// combination of property/values. The element contains a count for the number
  /// of times those specific property/values appear.
  public var groupByResults: [Google_Cloud_Securitycenter_V1beta1_GroupResult] = []

  /// Time used for executing the groupBy request.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Result containing the properties and count of a groupBy request.
public struct Google_Cloud_Securitycenter_V1beta1_GroupResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Properties matching the groupBy fields in the request.
  public var properties: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

  /// Total count of resources for the given properties.
  public var count: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for listing sources.
public struct Google_Cloud_Securitycenter_V1beta1_ListSourcesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the parent of sources to list. Its format should be
  /// "organizations/[organization_id]".
  public var parent: String = String()

  /// The value returned by the last `ListSourcesResponse`; indicates
  /// that this is a continuation of a prior `ListSources` call, and
  /// that the system should return the next page of data.
  public var pageToken: String = String()

  /// The maximum number of results to return in a single response. Default is
  /// 10, minimum is 1, maximum is 1000.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for listing sources.
public struct Google_Cloud_Securitycenter_V1beta1_ListSourcesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sources belonging to the requested parent.
  public var sources: [Google_Cloud_Securitycenter_V1beta1_Source] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for listing assets.
public struct Google_Cloud_Securitycenter_V1beta1_ListAssetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the organization assets should belong to. Its format is
  /// "organizations/[organization_id]".
  public var parent: String = String()

  /// Expression that defines the filter to apply across assets.
  /// The expression is a list of zero or more restrictions combined via logical
  /// operators `AND` and `OR`.
  /// Parentheses are not supported, and `OR` has higher precedence than `AND`.
  ///
  /// Restrictions have the form `<field> <operator> <value>` and may have a `-`
  /// character in front of them to indicate negation. The fields map to those
  /// defined in the Asset resource. Examples include:
  ///
  /// * name
  /// * security_center_properties.resource_name
  /// * resource_properties.a_property
  /// * security_marks.marks.marka
  ///
  /// The supported operators are:
  ///
  /// * `=` for all value types.
  /// * `>`, `<`, `>=`, `<=` for integer values.
  /// * `:`, meaning substring matching, for strings.
  ///
  /// The supported value types are:
  ///
  /// * string literals in quotes.
  /// * integer literals without quotes.
  /// * boolean literals `true` and `false` without quotes.
  ///
  /// For example, `resource_properties.size = 100` is a valid filter string.
  public var filter: String = String()

  /// Expression that defines what fields and order to use for sorting. The
  /// string value should follow SQL syntax: comma separated list of fields. For
  /// example: "name,resource_properties.a_property". The default sorting order
  /// is ascending. To specify descending order for a field, a suffix " desc"
  /// should be appended to the field name. For example: "name
  /// desc,resource_properties.a_property". Redundant space characters in the
  /// syntax are insignificant. "name desc,resource_properties.a_property" and "
  /// name     desc  ,   resource_properties.a_property  " are equivalent.
  public var orderBy: String = String()

  /// Time used as a reference point when filtering assets. The filter is limited
  /// to assets existing at the supplied time and their values are those at that
  /// specific time. Absence of this field will default to the API's version of
  /// NOW.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// When compare_duration is set, the ListAssetResult's "state" attribute is
  /// updated to indicate whether the asset was added, removed, or remained
  /// present during the compare_duration period of time that precedes the
  /// read_time. This is the time between (read_time -
  /// compare_duration) and read_time.
  ///
  /// The state value is derived based on the presence of the asset at the two
  /// points in time. Intermediate state changes between the two times don't
  /// affect the result. For example, the results aren't affected if the asset is
  /// removed and re-created again.
  ///
  /// Possible "state" values when compare_duration is specified:
  ///
  /// * "ADDED": indicates that the asset was not present before
  ///              compare_duration, but present at read_time.
  /// * "REMOVED": indicates that the asset was present at the start of
  ///              compare_duration, but not present at read_time.
  /// * "ACTIVE": indicates that the asset was present at both the
  ///              start and the end of the time period defined by
  ///              compare_duration and read_time.
  ///
  /// If compare_duration is not specified, then the only possible state is
  /// "UNUSED", which indicates that the asset is present at read_time.
  public var compareDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _compareDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_compareDuration = newValue}
  }
  /// Returns true if `compareDuration` has been explicitly set.
  public var hasCompareDuration: Bool {return self._compareDuration != nil}
  /// Clears the value of `compareDuration`. Subsequent reads from it will return its default value.
  public mutating func clearCompareDuration() {self._compareDuration = nil}

  /// Optional. A field mask to specify the ListAssetsResult fields to be listed in the
  /// response.
  /// An empty field mask will list all fields.
  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  /// The value returned by the last `ListAssetsResponse`; indicates
  /// that this is a continuation of a prior `ListAssets` call, and
  /// that the system should return the next page of data.
  public var pageToken: String = String()

  /// The maximum number of results to return in a single response. Default is
  /// 10, minimum is 1, maximum is 1000.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _compareDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Response message for listing assets.
public struct Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Assets matching the list request.
  public var listAssetsResults: [Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult] = []

  /// Time used for executing the list request.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results.
  public var nextPageToken: String = String()

  /// The total number of assets matching the query.
  public var totalSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Result containing the Asset and its State.
  public struct ListAssetsResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Asset matching the search request.
    public var asset: Google_Cloud_Securitycenter_V1beta1_Asset {
      get {return _asset ?? Google_Cloud_Securitycenter_V1beta1_Asset()}
      set {_asset = newValue}
    }
    /// Returns true if `asset` has been explicitly set.
    public var hasAsset: Bool {return self._asset != nil}
    /// Clears the value of `asset`. Subsequent reads from it will return its default value.
    public mutating func clearAsset() {self._asset = nil}

    /// State of the asset.
    public var state: Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult.State = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// State of the asset.
    ///
    /// When querying across two points in time this describes
    /// the change between the two points: ADDED, REMOVED, or ACTIVE.
    /// If there was no compare_duration supplied in the request the state should
    /// be: UNUSED
    public enum State: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Unspecified state.
      case unspecified // = 0

      /// Request did not specify use of this field in the result.
      case unused // = 1

      /// Asset was added between the points in time.
      case added // = 2

      /// Asset was removed between the points in time.
      case removed // = 3

      /// Asset was active at both point(s) in time.
      case active // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .unused
        case 2: self = .added
        case 3: self = .removed
        case 4: self = .active
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .unused: return 1
        case .added: return 2
        case .removed: return 3
        case .active: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}

    fileprivate var _asset: Google_Cloud_Securitycenter_V1beta1_Asset? = nil
  }

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult.State] = [
    .unspecified,
    .unused,
    .added,
    .removed,
    .active,
  ]
}

#endif  // swift(>=4.2)

/// Request message for listing findings.
public struct Google_Cloud_Securitycenter_V1beta1_ListFindingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the source the findings belong to. Its format is
  /// "organizations/[organization_id]/sources/[source_id]". To list across all
  /// sources provide a source_id of `-`. For example:
  /// organizations/{organization_id}/sources/-
  public var parent: String = String()

  /// Expression that defines the filter to apply across findings.
  /// The expression is a list of one or more restrictions combined via logical
  /// operators `AND` and `OR`.
  /// Parentheses are not supported, and `OR` has higher precedence than `AND`.
  ///
  /// Restrictions have the form `<field> <operator> <value>` and may have a `-`
  /// character in front of them to indicate negation. Examples include:
  ///
  ///  * name
  ///  * source_properties.a_property
  ///  * security_marks.marks.marka
  ///
  /// The supported operators are:
  ///
  /// * `=` for all value types.
  /// * `>`, `<`, `>=`, `<=` for integer values.
  /// * `:`, meaning substring matching, for strings.
  ///
  /// The supported value types are:
  ///
  /// * string literals in quotes.
  /// * integer literals without quotes.
  /// * boolean literals `true` and `false` without quotes.
  ///
  /// For example, `source_properties.size = 100` is a valid filter string.
  public var filter: String = String()

  /// Expression that defines what fields and order to use for sorting. The
  /// string value should follow SQL syntax: comma separated list of fields. For
  /// example: "name,resource_properties.a_property". The default sorting order
  /// is ascending. To specify descending order for a field, a suffix " desc"
  /// should be appended to the field name. For example: "name
  /// desc,source_properties.a_property". Redundant space characters in the
  /// syntax are insignificant. "name desc,source_properties.a_property" and "
  /// name     desc  ,   source_properties.a_property  " are equivalent.
  public var orderBy: String = String()

  /// Time used as a reference point when filtering findings. The filter is
  /// limited to findings existing at the supplied time and their values are
  /// those at that specific time. Absence of this field will default to the
  /// API's version of NOW.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// Optional. A field mask to specify the Finding fields to be listed in the response.
  /// An empty field mask will list all fields.
  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  /// The value returned by the last `ListFindingsResponse`; indicates
  /// that this is a continuation of a prior `ListFindings` call, and
  /// that the system should return the next page of data.
  public var pageToken: String = String()

  /// The maximum number of results to return in a single response. Default is
  /// 10, minimum is 1, maximum is 1000.
  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Response message for listing findings.
public struct Google_Cloud_Securitycenter_V1beta1_ListFindingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Findings matching the list request.
  public var findings: [Google_Cloud_Securitycenter_V1beta1_Finding] = []

  /// Time used for executing the list request.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results.
  public var nextPageToken: String = String()

  /// The total number of findings matching the query.
  public var totalSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request message for updating a finding's state.
public struct Google_Cloud_Securitycenter_V1beta1_SetFindingStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The relative resource name of the finding. See:
  /// https://cloud.google.com/apis/design/resource_names#relative_resource_name
  /// Example:
  /// "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
  public var name: String = String()

  /// Required. The desired State of the finding.
  public var state: Google_Cloud_Securitycenter_V1beta1_Finding.State = .unspecified

  /// Required. The time at which the updated state takes effect.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request message for running asset discovery for an organization.
public struct Google_Cloud_Securitycenter_V1beta1_RunAssetDiscoveryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the organization to run asset discovery for. Its format is
  /// "organizations/[organization_id]".
  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for updating or creating a finding.
public struct Google_Cloud_Securitycenter_V1beta1_UpdateFindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The finding resource to update or create if it does not already exist.
  /// parent, security_marks, and update_time will be ignored.
  ///
  /// In the case of creation, the finding id portion of the name must
  /// alphanumeric and less than or equal to 32 characters and greater than 0
  /// characters in length.
  public var finding: Google_Cloud_Securitycenter_V1beta1_Finding {
    get {return _finding ?? Google_Cloud_Securitycenter_V1beta1_Finding()}
    set {_finding = newValue}
  }
  /// Returns true if `finding` has been explicitly set.
  public var hasFinding: Bool {return self._finding != nil}
  /// Clears the value of `finding`. Subsequent reads from it will return its default value.
  public mutating func clearFinding() {self._finding = nil}

  /// The FieldMask to use when updating the finding resource. This field should
  /// not be specified when creating a finding.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _finding: Google_Cloud_Securitycenter_V1beta1_Finding? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request message for updating an organization's settings.
public struct Google_Cloud_Securitycenter_V1beta1_UpdateOrganizationSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The organization settings resource to update.
  public var organizationSettings: Google_Cloud_Securitycenter_V1beta1_OrganizationSettings {
    get {return _organizationSettings ?? Google_Cloud_Securitycenter_V1beta1_OrganizationSettings()}
    set {_organizationSettings = newValue}
  }
  /// Returns true if `organizationSettings` has been explicitly set.
  public var hasOrganizationSettings: Bool {return self._organizationSettings != nil}
  /// Clears the value of `organizationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearOrganizationSettings() {self._organizationSettings = nil}

  /// The FieldMask to use when updating the settings resource.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _organizationSettings: Google_Cloud_Securitycenter_V1beta1_OrganizationSettings? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request message for updating a source.
public struct Google_Cloud_Securitycenter_V1beta1_UpdateSourceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The source resource to update.
  public var source: Google_Cloud_Securitycenter_V1beta1_Source {
    get {return _source ?? Google_Cloud_Securitycenter_V1beta1_Source()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  /// The FieldMask to use when updating the source resource.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _source: Google_Cloud_Securitycenter_V1beta1_Source? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request message for updating a SecurityMarks resource.
public struct Google_Cloud_Securitycenter_V1beta1_UpdateSecurityMarksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The security marks resource to update.
  public var securityMarks: Google_Cloud_Securitycenter_V1beta1_SecurityMarks {
    get {return _securityMarks ?? Google_Cloud_Securitycenter_V1beta1_SecurityMarks()}
    set {_securityMarks = newValue}
  }
  /// Returns true if `securityMarks` has been explicitly set.
  public var hasSecurityMarks: Bool {return self._securityMarks != nil}
  /// Clears the value of `securityMarks`. Subsequent reads from it will return its default value.
  public mutating func clearSecurityMarks() {self._securityMarks = nil}

  /// The FieldMask to use when updating the security marks resource.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// The time at which the updated SecurityMarks take effect.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _securityMarks: Google_Cloud_Securitycenter_V1beta1_SecurityMarks? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.securitycenter.v1beta1"

extension Google_Cloud_Securitycenter_V1beta1_CreateFindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateFindingRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "finding_id"),
    3: .same(proto: "finding"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.findingID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._finding) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.findingID.isEmpty {
      try visitor.visitSingularStringField(value: self.findingID, fieldNumber: 2)
    }
    if let v = self._finding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_CreateFindingRequest, rhs: Google_Cloud_Securitycenter_V1beta1_CreateFindingRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.findingID != rhs.findingID {return false}
    if lhs._finding != rhs._finding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_CreateSourceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateSourceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._source) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_CreateSourceRequest, rhs: Google_Cloud_Securitycenter_V1beta1_CreateSourceRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._source != rhs._source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GetOrganizationSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrganizationSettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GetOrganizationSettingsRequest, rhs: Google_Cloud_Securitycenter_V1beta1_GetOrganizationSettingsRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GetSourceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSourceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GetSourceRequest, rhs: Google_Cloud_Securitycenter_V1beta1_GetSourceRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GroupAssetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupAssetsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "group_by"),
    4: .standard(proto: "compare_duration"),
    5: .standard(proto: "read_time"),
    7: .standard(proto: "page_token"),
    8: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupBy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._compareDuration) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if !self.groupBy.isEmpty {
      try visitor.visitSingularStringField(value: self.groupBy, fieldNumber: 3)
    }
    if let v = self._compareDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 7)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GroupAssetsRequest, rhs: Google_Cloud_Securitycenter_V1beta1_GroupAssetsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.groupBy != rhs.groupBy {return false}
    if lhs._compareDuration != rhs._compareDuration {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GroupAssetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupAssetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_by_results"),
    2: .standard(proto: "read_time"),
    3: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groupByResults) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupByResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupByResults, fieldNumber: 1)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GroupAssetsResponse, rhs: Google_Cloud_Securitycenter_V1beta1_GroupAssetsResponse) -> Bool {
    if lhs.groupByResults != rhs.groupByResults {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GroupFindingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupFindingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "group_by"),
    4: .standard(proto: "read_time"),
    5: .standard(proto: "page_token"),
    6: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupBy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if !self.groupBy.isEmpty {
      try visitor.visitSingularStringField(value: self.groupBy, fieldNumber: 3)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 5)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GroupFindingsRequest, rhs: Google_Cloud_Securitycenter_V1beta1_GroupFindingsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.groupBy != rhs.groupBy {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GroupFindingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupFindingsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_by_results"),
    2: .standard(proto: "read_time"),
    3: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groupByResults) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupByResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupByResults, fieldNumber: 1)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GroupFindingsResponse, rhs: Google_Cloud_Securitycenter_V1beta1_GroupFindingsResponse) -> Bool {
    if lhs.groupByResults != rhs.groupByResults {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_GroupResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "properties"),
    2: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &self.properties) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: self.properties, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_GroupResult, rhs: Google_Cloud_Securitycenter_V1beta1_GroupResult) -> Bool {
    if lhs.properties != rhs.properties {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListSourcesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSourcesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_token"),
    7: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListSourcesRequest, rhs: Google_Cloud_Securitycenter_V1beta1_ListSourcesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListSourcesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSourcesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sources"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sources) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sources, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListSourcesResponse, rhs: Google_Cloud_Securitycenter_V1beta1_ListSourcesResponse) -> Bool {
    if lhs.sources != rhs.sources {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListAssetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAssetsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "order_by"),
    4: .standard(proto: "read_time"),
    5: .standard(proto: "compare_duration"),
    7: .standard(proto: "field_mask"),
    8: .standard(proto: "page_token"),
    9: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.orderBy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._compareDuration) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._fieldMask) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if !self.orderBy.isEmpty {
      try visitor.visitSingularStringField(value: self.orderBy, fieldNumber: 3)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._compareDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 8)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListAssetsRequest, rhs: Google_Cloud_Securitycenter_V1beta1_ListAssetsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.orderBy != rhs.orderBy {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs._compareDuration != rhs._compareDuration {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAssetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "list_assets_results"),
    2: .standard(proto: "read_time"),
    3: .standard(proto: "next_page_token"),
    4: .standard(proto: "total_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.listAssetsResults) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.totalSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.listAssetsResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listAssetsResults, fieldNumber: 1)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    if self.totalSize != 0 {
      try visitor.visitSingularInt32Field(value: self.totalSize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse, rhs: Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse) -> Bool {
    if lhs.listAssetsResults != rhs.listAssetsResults {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.protoMessageName + ".ListAssetsResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult, rhs: Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult) -> Bool {
    if lhs._asset != rhs._asset {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListAssetsResponse.ListAssetsResult.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "UNUSED"),
    2: .same(proto: "ADDED"),
    3: .same(proto: "REMOVED"),
    4: .same(proto: "ACTIVE"),
  ]
}

extension Google_Cloud_Securitycenter_V1beta1_ListFindingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListFindingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "order_by"),
    4: .standard(proto: "read_time"),
    5: .standard(proto: "field_mask"),
    6: .standard(proto: "page_token"),
    7: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.orderBy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._fieldMask) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if !self.orderBy.isEmpty {
      try visitor.visitSingularStringField(value: self.orderBy, fieldNumber: 3)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 6)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListFindingsRequest, rhs: Google_Cloud_Securitycenter_V1beta1_ListFindingsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.orderBy != rhs.orderBy {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_ListFindingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListFindingsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "findings"),
    2: .standard(proto: "read_time"),
    3: .standard(proto: "next_page_token"),
    4: .standard(proto: "total_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.findings) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.totalSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.findings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.findings, fieldNumber: 1)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    if self.totalSize != 0 {
      try visitor.visitSingularInt32Field(value: self.totalSize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_ListFindingsResponse, rhs: Google_Cloud_Securitycenter_V1beta1_ListFindingsResponse) -> Bool {
    if lhs.findings != rhs.findings {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_SetFindingStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetFindingStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "state"),
    3: .standard(proto: "start_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_SetFindingStateRequest, rhs: Google_Cloud_Securitycenter_V1beta1_SetFindingStateRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.state != rhs.state {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_RunAssetDiscoveryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunAssetDiscoveryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_RunAssetDiscoveryRequest, rhs: Google_Cloud_Securitycenter_V1beta1_RunAssetDiscoveryRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_UpdateFindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateFindingRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "finding"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._finding) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._finding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_UpdateFindingRequest, rhs: Google_Cloud_Securitycenter_V1beta1_UpdateFindingRequest) -> Bool {
    if lhs._finding != rhs._finding {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_UpdateOrganizationSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateOrganizationSettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_settings"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._organizationSettings) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._organizationSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_UpdateOrganizationSettingsRequest, rhs: Google_Cloud_Securitycenter_V1beta1_UpdateOrganizationSettingsRequest) -> Bool {
    if lhs._organizationSettings != rhs._organizationSettings {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_UpdateSourceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSourceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._source) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_UpdateSourceRequest, rhs: Google_Cloud_Securitycenter_V1beta1_UpdateSourceRequest) -> Bool {
    if lhs._source != rhs._source {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1beta1_UpdateSecurityMarksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSecurityMarksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "security_marks"),
    2: .standard(proto: "update_mask"),
    3: .standard(proto: "start_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._securityMarks) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._securityMarks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1beta1_UpdateSecurityMarksRequest, rhs: Google_Cloud_Securitycenter_V1beta1_UpdateSecurityMarksRequest) -> Bool {
    if lhs._securityMarks != rhs._securityMarks {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
