// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/securitycenter/v1p1beta1/notification_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Security Command Center notification configs.
///
/// A notification config is a Security Command Center resource that contains the
/// configuration to send notifications for create/update events of findings,
/// assets and etc.
public struct Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The relative resource name of this notification config. See:
  /// https://cloud.google.com/apis/design/resource_names#relative_resource_name
  /// Example:
  /// "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
  public var name: String = String()

  /// The description of the notification config (max of 1024 characters).
  public var description_p: String = String()

  /// The type of events the config is for, e.g. FINDING.
  public var eventType: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.EventType = .unspecified

  /// The Pub/Sub topic to send notifications to. Its format is
  /// "projects/[project_id]/topics/[topic]".
  public var pubsubTopic: String = String()

  /// Output only. The service account that needs "pubsub.topics.publish"
  /// permission to publish to the Pub/Sub topic.
  public var serviceAccount: String = String()

  /// The config for triggering notifications.
  public var notifyConfig: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.OneOf_NotifyConfig? = nil

  /// The config for triggering streaming-based notifications.
  public var streamingConfig: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig {
    get {
      if case .streamingConfig(let v)? = notifyConfig {return v}
      return Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig()
    }
    set {notifyConfig = .streamingConfig(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The config for triggering notifications.
  public enum OneOf_NotifyConfig: Equatable {
    /// The config for triggering streaming-based notifications.
    case streamingConfig(Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.OneOf_NotifyConfig, rhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.OneOf_NotifyConfig) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.streamingConfig, .streamingConfig): return {
        guard case .streamingConfig(let l) = lhs, case .streamingConfig(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// The type of events.
  public enum EventType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified event type.
    case unspecified // = 0

    /// Events for findings.
    case finding // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .finding
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .finding: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The config for streaming-based notifications, which send each event as soon
  /// as it is detected.
  public struct StreamingConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Expression that defines the filter to apply across create/update events
    /// of assets or findings as specified by the event type. The expression is a
    /// list of zero or more restrictions combined via logical operators `AND`
    /// and `OR`. Parentheses are supported, and `OR` has higher precedence than
    /// `AND`.
    ///
    /// Restrictions have the form `<field> <operator> <value>` and may have a
    /// `-` character in front of them to indicate negation. The fields map to
    /// those defined in the corresponding resource.
    ///
    /// The supported operators are:
    ///
    /// * `=` for all value types.
    /// * `>`, `<`, `>=`, `<=` for integer values.
    /// * `:`, meaning substring matching, for strings.
    ///
    /// The supported value types are:
    ///
    /// * string literals in quotes.
    /// * integer literals without quotes.
    /// * boolean literals `true` and `false` without quotes.
    public var filter: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.EventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.EventType] = [
    .unspecified,
    .finding,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.securitycenter.v1p1beta1"

extension Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NotificationConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "event_type"),
    4: .standard(proto: "pubsub_topic"),
    5: .standard(proto: "service_account"),
    6: .standard(proto: "streaming_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.eventType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pubsubTopic) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.serviceAccount) }()
      case 6: try {
        var v: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig?
        if let current = self.notifyConfig {
          try decoder.handleConflictingOneOf()
          if case .streamingConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.notifyConfig = .streamingConfig(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.eventType != .unspecified {
      try visitor.visitSingularEnumField(value: self.eventType, fieldNumber: 3)
    }
    if !self.pubsubTopic.isEmpty {
      try visitor.visitSingularStringField(value: self.pubsubTopic, fieldNumber: 4)
    }
    if !self.serviceAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccount, fieldNumber: 5)
    }
    if case .streamingConfig(let v)? = self.notifyConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig, rhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.eventType != rhs.eventType {return false}
    if lhs.pubsubTopic != rhs.pubsubTopic {return false}
    if lhs.serviceAccount != rhs.serviceAccount {return false}
    if lhs.notifyConfig != rhs.notifyConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.EventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVENT_TYPE_UNSPECIFIED"),
    1: .same(proto: "FINDING"),
  ]
}

extension Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.protoMessageName + ".StreamingConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig, rhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationConfig.StreamingConfig) -> Bool {
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
