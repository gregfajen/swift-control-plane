// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/securitycenter/v1p1beta1/notification_message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Security Command Center's Notification
public struct Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the notification config that generated current notification.
  public var notificationConfigName: String {
    get {return _storage._notificationConfigName}
    set {_uniqueStorage()._notificationConfigName = newValue}
  }

  /// Notification Event.
  public var event: OneOf_Event? {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  /// If it's a Finding based notification config, this field will be
  /// populated.
  public var finding: Google_Cloud_Securitycenter_V1p1beta1_Finding {
    get {
      if case .finding(let v)? = _storage._event {return v}
      return Google_Cloud_Securitycenter_V1p1beta1_Finding()
    }
    set {_uniqueStorage()._event = .finding(newValue)}
  }

  /// The Cloud resource tied to the notification.
  public var resource: Google_Cloud_Securitycenter_V1p1beta1_Resource {
    get {return _storage._resource ?? Google_Cloud_Securitycenter_V1p1beta1_Resource()}
    set {_uniqueStorage()._resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {_uniqueStorage()._resource = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Notification Event.
  public enum OneOf_Event: Equatable {
    /// If it's a Finding based notification config, this field will be
    /// populated.
    case finding(Google_Cloud_Securitycenter_V1p1beta1_Finding)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage.OneOf_Event, rhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.finding, .finding): return {
        guard case .finding(let l) = lhs, case .finding(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.securitycenter.v1p1beta1"

extension Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NotificationMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "notification_config_name"),
    2: .same(proto: "finding"),
    3: .same(proto: "resource"),
  ]

  fileprivate class _StorageClass {
    var _notificationConfigName: String = String()
    var _event: Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage.OneOf_Event?
    var _resource: Google_Cloud_Securitycenter_V1p1beta1_Resource? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _notificationConfigName = source._notificationConfigName
      _event = source._event
      _resource = source._resource
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._notificationConfigName) }()
        case 2: try {
          var v: Google_Cloud_Securitycenter_V1p1beta1_Finding?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .finding(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .finding(v)}
        }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._resource) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._notificationConfigName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._notificationConfigName, fieldNumber: 1)
      }
      if case .finding(let v)? = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._resource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage, rhs: Google_Cloud_Securitycenter_V1p1beta1_NotificationMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._notificationConfigName != rhs_storage._notificationConfigName {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._resource != rhs_storage._resource {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
