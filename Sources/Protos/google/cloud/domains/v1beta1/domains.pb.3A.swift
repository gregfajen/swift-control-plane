// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/domains/v1beta1/domains.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Defines a set of possible contact privacy settings for a `Registration`.
///
/// [ICANN](https://icann.org/) maintains the WHOIS database, a publicly
/// accessible mapping from domain name to contact information, and requires that
/// each domain name have an entry. Choose from these options to control how much
/// information in your `ContactSettings` is published.
public enum Google_Cloud_Domains_V1beta1_ContactPrivacy: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The contact privacy settings are undefined.
  case unspecified // = 0

  /// All the data from `ContactSettings` is publicly available. When setting
  /// this option, you must also provide a
  /// `PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT` in the `contact_notices` field of the
  /// request.
  case publicContactData // = 1

  /// None of the data from `ContactSettings` is publicly available. Instead,
  /// proxy contact data is published for your domain. Email sent to the proxy
  /// email address is forwarded to the registrant's email address. Cloud Domains
  /// provides this privacy proxy service at no additional cost.
  case privateContactData // = 2

  /// Some data from `ContactSettings` is publicly available. The actual
  /// information redacted depends on the domain. For details, see [the
  /// registration privacy
  /// article](https://support.google.com/domains/answer/3251242).
  case redactedContactData // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .publicContactData
    case 2: self = .privateContactData
    case 3: self = .redactedContactData
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .publicContactData: return 1
    case .privateContactData: return 2
    case .redactedContactData: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_ContactPrivacy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_ContactPrivacy] = [
    .unspecified,
    .publicContactData,
    .privateContactData,
    .redactedContactData,
  ]
}

#endif  // swift(>=4.2)

/// Notices about special properties of certain domains.
public enum Google_Cloud_Domains_V1beta1_DomainNotice: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The notice is undefined.
  case unspecified // = 0

  /// Indicates that the domain is preloaded on the HTTP Strict Transport
  /// Security list in browsers. Serving a website on such domain requires
  /// an SSL certificate. For details, see
  /// [how to get an SSL
  /// certificate](https://support.google.com/domains/answer/7638036).
  case hstsPreloaded // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .hstsPreloaded
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .hstsPreloaded: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_DomainNotice: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_DomainNotice] = [
    .unspecified,
    .hstsPreloaded,
  ]
}

#endif  // swift(>=4.2)

/// Notices related to contact information.
public enum Google_Cloud_Domains_V1beta1_ContactNotice: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The notice is undefined.
  case unspecified // = 0

  /// Required when setting the `privacy` field of `ContactSettings` to
  /// `PUBLIC_CONTACT_DATA`, which exposes contact data publicly.
  case publicContactDataAcknowledgement // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .publicContactDataAcknowledgement
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .publicContactDataAcknowledgement: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_ContactNotice: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_ContactNotice] = [
    .unspecified,
    .publicContactDataAcknowledgement,
  ]
}

#endif  // swift(>=4.2)

/// Possible states of a `Registration`'s transfer lock.
public enum Google_Cloud_Domains_V1beta1_TransferLockState: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The state is unspecified.
  case unspecified // = 0

  /// The domain is unlocked and can be transferred to another registrar.
  case unlocked // = 1

  /// The domain is locked and cannot be transferred to another registrar.
  case locked // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .unlocked
    case 2: self = .locked
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .unlocked: return 1
    case .locked: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_TransferLockState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_TransferLockState] = [
    .unspecified,
    .unlocked,
    .locked,
  ]
}

#endif  // swift(>=4.2)

/// The `Registration` resource facilitates managing and configuring domain name
/// registrations.
///
///
/// To create a new `Registration` resource, find a suitable domain name by
/// calling the `SearchDomains` method with a query to see available domain name
/// options. After choosing a name, call `RetrieveRegisterParameters` to
/// ensure availability and obtain information like pricing, which is needed to
/// build a call to `RegisterDomain`.
public struct Google_Cloud_Domains_V1beta1_Registration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of the `Registration` resource, in the format
  /// `projects/*/locations/*/registrations/<domain_name>`.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
  public var domainName: String {
    get {return _storage._domainName}
    set {_uniqueStorage()._domainName = newValue}
  }

  /// Output only. The creation timestamp of the `Registration` resource.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. The expiration timestamp of the `Registration`.
  public var expireTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._expireTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._expireTime = newValue}
  }
  /// Returns true if `expireTime` has been explicitly set.
  public var hasExpireTime: Bool {return _storage._expireTime != nil}
  /// Clears the value of `expireTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpireTime() {_uniqueStorage()._expireTime = nil}

  /// Output only. The state of the `Registration`
  public var state: Google_Cloud_Domains_V1beta1_Registration.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Output only. The set of issues with the `Registration` that require attention.
  public var issues: [Google_Cloud_Domains_V1beta1_Registration.Issue] {
    get {return _storage._issues}
    set {_uniqueStorage()._issues = newValue}
  }

  /// Set of labels associated with the `Registration`.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// Settings for management of the `Registration`, including renewal, billing,
  /// and transfer. You cannot update these with the `UpdateRegistration`
  /// method. To update these settings, use the `ConfigureManagementSettings`
  /// method.
  public var managementSettings: Google_Cloud_Domains_V1beta1_ManagementSettings {
    get {return _storage._managementSettings ?? Google_Cloud_Domains_V1beta1_ManagementSettings()}
    set {_uniqueStorage()._managementSettings = newValue}
  }
  /// Returns true if `managementSettings` has been explicitly set.
  public var hasManagementSettings: Bool {return _storage._managementSettings != nil}
  /// Clears the value of `managementSettings`. Subsequent reads from it will return its default value.
  public mutating func clearManagementSettings() {_uniqueStorage()._managementSettings = nil}

  /// Settings controlling the DNS configuration of the `Registration`. You
  /// cannot update these with the `UpdateRegistration` method. To update these
  /// settings, use the `ConfigureDnsSettings` method.
  public var dnsSettings: Google_Cloud_Domains_V1beta1_DnsSettings {
    get {return _storage._dnsSettings ?? Google_Cloud_Domains_V1beta1_DnsSettings()}
    set {_uniqueStorage()._dnsSettings = newValue}
  }
  /// Returns true if `dnsSettings` has been explicitly set.
  public var hasDnsSettings: Bool {return _storage._dnsSettings != nil}
  /// Clears the value of `dnsSettings`. Subsequent reads from it will return its default value.
  public mutating func clearDnsSettings() {_uniqueStorage()._dnsSettings = nil}

  /// Required. Settings for contact information linked to the `Registration`. You cannot
  /// update these with the `UpdateRegistration` method. To update these
  /// settings, use the `ConfigureContactSettings` method.
  public var contactSettings: Google_Cloud_Domains_V1beta1_ContactSettings {
    get {return _storage._contactSettings ?? Google_Cloud_Domains_V1beta1_ContactSettings()}
    set {_uniqueStorage()._contactSettings = newValue}
  }
  /// Returns true if `contactSettings` has been explicitly set.
  public var hasContactSettings: Bool {return _storage._contactSettings != nil}
  /// Clears the value of `contactSettings`. Subsequent reads from it will return its default value.
  public mutating func clearContactSettings() {_uniqueStorage()._contactSettings = nil}

  /// Output only. Pending contact settings for the `Registration`. Updates to the
  /// `contact_settings` field that change its `registrant_contact` or `privacy`
  /// fields require email confirmation by the `registrant_contact`
  /// before taking effect. This field is set only if there are pending updates
  /// to the `contact_settings` that have not yet been confirmed. To confirm the
  /// changes, the `registrant_contact` must follow the instructions in the
  /// email they receive.
  public var pendingContactSettings: Google_Cloud_Domains_V1beta1_ContactSettings {
    get {return _storage._pendingContactSettings ?? Google_Cloud_Domains_V1beta1_ContactSettings()}
    set {_uniqueStorage()._pendingContactSettings = newValue}
  }
  /// Returns true if `pendingContactSettings` has been explicitly set.
  public var hasPendingContactSettings: Bool {return _storage._pendingContactSettings != nil}
  /// Clears the value of `pendingContactSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPendingContactSettings() {_uniqueStorage()._pendingContactSettings = nil}

  /// Output only. Set of options for the `contact_settings.privacy` field that this
  /// `Registration` supports.
  public var supportedPrivacy: [Google_Cloud_Domains_V1beta1_ContactPrivacy] {
    get {return _storage._supportedPrivacy}
    set {_uniqueStorage()._supportedPrivacy = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible states of a `Registration`.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The state is undefined.
    case unspecified // = 0

    /// The domain is being registered.
    case registrationPending // = 1

    /// The domain registration failed. You can delete resources in this state
    /// to allow registration to be retried.
    case registrationFailed // = 2

    /// The domain is registered and operational. The domain renews automatically
    /// as long as it remains in this state.
    case active // = 6

    /// The domain is suspended and inoperative. For more details, see the
    /// `issues` field.
    case suspended // = 7

    /// The domain has been exported from Cloud Domains to
    /// [Google Domains](https://domains.google/). You can no longer update it
    /// with this API, and information shown about it may be stale. Without further action, domains in this
    /// state expire at their `expire_time`. You can delete the resource
    /// after the `expire_time` has passed.
    case exported // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .registrationPending
      case 2: self = .registrationFailed
      case 6: self = .active
      case 7: self = .suspended
      case 8: self = .exported
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .registrationPending: return 1
      case .registrationFailed: return 2
      case .active: return 6
      case .suspended: return 7
      case .exported: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Possible issues with a `Registration` that require attention.
  public enum Issue: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The issue is undefined.
    case unspecified // = 0

    /// Contact the Cloud Support team to resolve a problem with this domain.
    case contactSupport // = 1

    /// [ICANN](https://icann.org/) requires verification of the email address
    /// in the `Registration`'s `contact_settings.registrant_contact` field. To
    /// verify the email address, follow the
    /// instructions in the email the `registrant_contact` receives following
    /// registration. If you do not complete email verification within
    /// 14 days of registration, the domain is suspended. To resend the
    /// verification email, call ConfigureContactSettings and provide the current
    /// `registrant_contact.email`.
    case unverifiedEmail // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .contactSupport
      case 2: self = .unverifiedEmail
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .contactSupport: return 1
      case .unverifiedEmail: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_Registration.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_Registration.State] = [
    .unspecified,
    .registrationPending,
    .registrationFailed,
    .active,
    .suspended,
    .exported,
  ]
}

extension Google_Cloud_Domains_V1beta1_Registration.Issue: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_Registration.Issue] = [
    .unspecified,
    .contactSupport,
    .unverifiedEmail,
  ]
}

#endif  // swift(>=4.2)

/// Defines renewal, billing, and transfer settings for a `Registration`.
public struct Google_Cloud_Domains_V1beta1_ManagementSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The renewal method for this `Registration`.
  public var renewalMethod: Google_Cloud_Domains_V1beta1_ManagementSettings.RenewalMethod = .unspecified

  /// Controls whether the domain can be transferred to another registrar.
  public var transferLockState: Google_Cloud_Domains_V1beta1_TransferLockState = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Defines how the `Registration` is renewed.
  public enum RenewalMethod: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The renewal method is undefined.
    case unspecified // = 0

    /// The domain is automatically renewed each year .
    ///
    /// To disable automatic renewals, export the domain by calling
    /// `ExportRegistration` .
    case automaticRenewal // = 1

    /// The domain must be explicitly renewed each year before its
    /// `expire_time`. This option is only available when the `Registration`
    /// is in state `EXPORTED`.
    ///
    /// To manage the domain's current billing and
    /// renewal settings, go to [Google Domains](https://domains.google/).
    case manualRenewal // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .automaticRenewal
      case 2: self = .manualRenewal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .automaticRenewal: return 1
      case .manualRenewal: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_ManagementSettings.RenewalMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_ManagementSettings.RenewalMethod] = [
    .unspecified,
    .automaticRenewal,
    .manualRenewal,
  ]
}

#endif  // swift(>=4.2)

/// Defines the DNS configuration of a `Registration`, including name servers,
/// DNSSEC, and glue records.
public struct Google_Cloud_Domains_V1beta1_DnsSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The DNS provider of the registration.
  public var dnsProvider: Google_Cloud_Domains_V1beta1_DnsSettings.OneOf_DnsProvider? = nil

  /// An arbitrary DNS provider identified by its name servers.
  public var customDns: Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns {
    get {
      if case .customDns(let v)? = dnsProvider {return v}
      return Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns()
    }
    set {dnsProvider = .customDns(newValue)}
  }

  /// The free DNS zone provided by
  /// [Google Domains](https://domains.google/).
  public var googleDomainsDns: Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns {
    get {
      if case .googleDomainsDns(let v)? = dnsProvider {return v}
      return Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns()
    }
    set {dnsProvider = .googleDomainsDns(newValue)}
  }

  /// The list of glue records for this `Registration`. Commonly empty.
  public var glueRecords: [Google_Cloud_Domains_V1beta1_DnsSettings.GlueRecord] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The DNS provider of the registration.
  public enum OneOf_DnsProvider: Equatable {
    /// An arbitrary DNS provider identified by its name servers.
    case customDns(Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns)
    /// The free DNS zone provided by
    /// [Google Domains](https://domains.google/).
    case googleDomainsDns(Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Domains_V1beta1_DnsSettings.OneOf_DnsProvider, rhs: Google_Cloud_Domains_V1beta1_DnsSettings.OneOf_DnsProvider) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.customDns, .customDns): return {
        guard case .customDns(let l) = lhs, case .customDns(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.googleDomainsDns, .googleDomainsDns): return {
        guard case .googleDomainsDns(let l) = lhs, case .googleDomainsDns(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// The publication state of DS records for a `Registration`.
  public enum DsState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// DS state is unspecified.
    case unspecified // = 0

    /// DNSSEC is disabled for this domain. No DS records for this domain are
    /// published in the parent DNS zone.
    case dsRecordsUnpublished // = 1

    /// DNSSEC is enabled for this domain. Appropriate DS records for this domain
    /// are published in the parent DNS zone. This option is valid only if the
    /// DNS zone referenced in the `Registration`'s `dns_provider` field is
    /// already DNSSEC-signed.
    case dsRecordsPublished // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .dsRecordsUnpublished
      case 2: self = .dsRecordsPublished
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .dsRecordsUnpublished: return 1
      case .dsRecordsPublished: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Configuration for an arbitrary DNS provider.
  public struct CustomDns {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. A list of name servers that store the DNS zone for this domain. Each name
    /// server is a domain name, with Unicode domain names expressed in
    /// Punycode format.
    public var nameServers: [String] = []

    /// The list of DS records for this domain, which are used to enable DNSSEC.
    /// The domain's DNS provider can provide the values to set here. If this
    /// field is empty, DNSSEC is disabled.
    public var dsRecords: [Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Configuration for using the free DNS zone provided by Google Domains as a
  /// `Registration`'s `dns_provider`. You cannot configure the DNS zone itself
  /// using the API. To configure the DNS zone, go to
  /// [Google Domains](https://domains.google/).
  public struct GoogleDomainsDns {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. A list of name servers that store the DNS zone for this domain. Each name
    /// server is a domain name, with Unicode domain names expressed in
    /// Punycode format. This field is automatically populated with the name
    /// servers assigned to the Google Domains DNS zone.
    public var nameServers: [String] = []

    /// Required. The state of DS records for this domain. Used to enable or disable
    /// automatic DNSSEC.
    public var dsState: Google_Cloud_Domains_V1beta1_DnsSettings.DsState = .unspecified

    /// Output only. The list of DS records published for this domain. The list is
    /// automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`,
    /// otherwise it remains empty.
    public var dsRecords: [Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC
  /// for a domain. It contains a digest (hash) of a DNSKEY record that must be
  /// present in the domain's DNS zone.
  public struct DsRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The key tag of the record. Must be set in range 0 -- 65535.
    public var keyTag: Int32 = 0

    /// The algorithm used to generate the referenced DNSKEY.
    public var algorithm: Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.Algorithm = .unspecified

    /// The hash function used to generate the digest of the referenced DNSKEY.
    public var digestType: Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.DigestType = .unspecified

    /// The digest generated from the referenced DNSKEY.
    public var digest: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// List of algorithms used to create a DNSKEY. Certain
    /// algorithms are not supported for particular domains.
    public enum Algorithm: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// The algorithm is unspecified.
      case unspecified // = 0

      /// DSA/SHA1. Not recommended for new deployments.
      case dsa // = 3

      /// ECC. Not recommended for new deployments.
      case ecc // = 4

      /// RSA/SHA-1. Not recommended for new deployments.
      case rsasha1 // = 5

      /// DSA-NSEC3-SHA1. Not recommended for new deployments.
      case dsansec3Sha1 // = 6

      /// RSA/SHA1-NSEC3-SHA1. Not recommended for new deployments.
      case rsasha1Nsec3Sha1 // = 7

      /// RSA/SHA-256.
      case rsasha256 // = 8

      /// RSA/SHA-512.
      case rsasha512 // = 10

      /// GOST R 34.10-2001.
      case eccgost // = 12

      /// ECDSA Curve P-256 with SHA-256.
      case ecdsap256Sha256 // = 13

      /// ECDSA Curve P-384 with SHA-384.
      case ecdsap384Sha384 // = 14

      /// Ed25519.
      case ed25519 // = 15

      /// Ed448.
      case ed448 // = 16
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 3: self = .dsa
        case 4: self = .ecc
        case 5: self = .rsasha1
        case 6: self = .dsansec3Sha1
        case 7: self = .rsasha1Nsec3Sha1
        case 8: self = .rsasha256
        case 10: self = .rsasha512
        case 12: self = .eccgost
        case 13: self = .ecdsap256Sha256
        case 14: self = .ecdsap384Sha384
        case 15: self = .ed25519
        case 16: self = .ed448
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .dsa: return 3
        case .ecc: return 4
        case .rsasha1: return 5
        case .dsansec3Sha1: return 6
        case .rsasha1Nsec3Sha1: return 7
        case .rsasha256: return 8
        case .rsasha512: return 10
        case .eccgost: return 12
        case .ecdsap256Sha256: return 13
        case .ecdsap384Sha384: return 14
        case .ed25519: return 15
        case .ed448: return 16
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// List of hash functions that may have been used to generate a digest of a
    /// DNSKEY.
    public enum DigestType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// The DigestType is unspecified.
      case unspecified // = 0

      /// SHA-1. Not recommended for new deployments.
      case sha1 // = 1

      /// SHA-256.
      case sha256 // = 2

      /// GOST R 34.11-94.
      case gost3411 // = 3

      /// SHA-384.
      case sha384 // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .sha1
        case 2: self = .sha256
        case 3: self = .gost3411
        case 4: self = .sha384
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .sha1: return 1
        case .sha256: return 2
        case .gost3411: return 3
        case .sha384: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  /// Defines a host on your domain that is a DNS name server for your domain
  /// and/or other domains. Glue records are a way of making the IP address of a
  /// name server known, even when it serves DNS queries for its parent domain.
  /// For example, when `ns.example.com` is a name server for `example.com`, the
  /// host `ns.example.com` must have a glue record to break the circular DNS
  /// reference.
  public struct GlueRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. Domain name of the host in Punycode format.
    public var hostName: String = String()

    /// List of IPv4 addresses corresponding to this host in the standard decimal
    /// format (e.g. `198.51.100.1`). At least one of `ipv4_address` and
    /// `ipv6_address` must be set.
    public var ipv4Addresses: [String] = []

    /// List of IPv6 addresses corresponding to this host in the standard
    /// hexadecimal format (e.g. `2001:db8::`). At least one of
    /// `ipv4_address` and `ipv6_address` must be set.
    public var ipv6Addresses: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_DnsSettings.DsState] = [
    .unspecified,
    .dsRecordsUnpublished,
    .dsRecordsPublished,
  ]
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.Algorithm: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.Algorithm] = [
    .unspecified,
    .dsa,
    .ecc,
    .rsasha1,
    .dsansec3Sha1,
    .rsasha1Nsec3Sha1,
    .rsasha256,
    .rsasha512,
    .eccgost,
    .ecdsap256Sha256,
    .ecdsap384Sha384,
    .ed25519,
    .ed448,
  ]
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.DigestType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.DigestType] = [
    .unspecified,
    .sha1,
    .sha256,
    .gost3411,
    .sha384,
  ]
}

#endif  // swift(>=4.2)

/// Defines the contact information associated with a `Registration`.
///
/// [ICANN](https://icann.org/) requires all domain names to have associated
/// contact information. The `registrant_contact` is considered the
/// domain's legal owner, and often the other contacts are identical.
public struct Google_Cloud_Domains_V1beta1_ContactSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Privacy setting for the contacts associated with the `Registration`.
  public var privacy: Google_Cloud_Domains_V1beta1_ContactPrivacy {
    get {return _storage._privacy}
    set {_uniqueStorage()._privacy = newValue}
  }

  /// Required. The registrant contact for the `Registration`.
  ///
  /// *Caution: Anyone with access to this email address, phone number,
  /// and/or postal address can take control of the domain.*
  ///
  /// *Warning: For new `Registration`s, the registrant will receive an email
  /// confirmation that they must complete within 14 days to avoid domain
  /// suspension.*
  public var registrantContact: Google_Cloud_Domains_V1beta1_ContactSettings.Contact {
    get {return _storage._registrantContact ?? Google_Cloud_Domains_V1beta1_ContactSettings.Contact()}
    set {_uniqueStorage()._registrantContact = newValue}
  }
  /// Returns true if `registrantContact` has been explicitly set.
  public var hasRegistrantContact: Bool {return _storage._registrantContact != nil}
  /// Clears the value of `registrantContact`. Subsequent reads from it will return its default value.
  public mutating func clearRegistrantContact() {_uniqueStorage()._registrantContact = nil}

  /// Required. The administrative contact for the `Registration`.
  public var adminContact: Google_Cloud_Domains_V1beta1_ContactSettings.Contact {
    get {return _storage._adminContact ?? Google_Cloud_Domains_V1beta1_ContactSettings.Contact()}
    set {_uniqueStorage()._adminContact = newValue}
  }
  /// Returns true if `adminContact` has been explicitly set.
  public var hasAdminContact: Bool {return _storage._adminContact != nil}
  /// Clears the value of `adminContact`. Subsequent reads from it will return its default value.
  public mutating func clearAdminContact() {_uniqueStorage()._adminContact = nil}

  /// Required. The technical contact for the `Registration`.
  public var technicalContact: Google_Cloud_Domains_V1beta1_ContactSettings.Contact {
    get {return _storage._technicalContact ?? Google_Cloud_Domains_V1beta1_ContactSettings.Contact()}
    set {_uniqueStorage()._technicalContact = newValue}
  }
  /// Returns true if `technicalContact` has been explicitly set.
  public var hasTechnicalContact: Bool {return _storage._technicalContact != nil}
  /// Clears the value of `technicalContact`. Subsequent reads from it will return its default value.
  public mutating func clearTechnicalContact() {_uniqueStorage()._technicalContact = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Details required for a contact associated with a `Registration`.
  public struct Contact {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. Postal address of the contact.
    public var postalAddress: Google_Type_PostalAddress {
      get {return _postalAddress ?? Google_Type_PostalAddress()}
      set {_postalAddress = newValue}
    }
    /// Returns true if `postalAddress` has been explicitly set.
    public var hasPostalAddress: Bool {return self._postalAddress != nil}
    /// Clears the value of `postalAddress`. Subsequent reads from it will return its default value.
    public mutating func clearPostalAddress() {self._postalAddress = nil}

    /// Required. Email address of the contact.
    public var email: String = String()

    /// Required. Phone number of the contact in international format. For example,
    /// `"+1-800-555-0123"`.
    public var phoneNumber: String = String()

    /// Fax number of the contact in international format. For example,
    /// `"+1-800-555-0123"`.
    public var faxNumber: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _postalAddress: Google_Type_PostalAddress? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request for the `SearchDomains` method.
public struct Google_Cloud_Domains_V1beta1_SearchDomainsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. String used to search for available domain names.
  public var query: String = String()

  /// Required. The location. Must be in the format `projects/*/locations/*`.
  public var location: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for the `SearchDomains` method.
public struct Google_Cloud_Domains_V1beta1_SearchDomainsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Results of the domain name search.
  public var registerParameters: [Google_Cloud_Domains_V1beta1_RegisterParameters] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the `RetrieveRegisterParameters` method.
public struct Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The domain name. Unicode domain names must be expressed in Punycode format.
  public var domainName: String = String()

  /// Required. The location. Must be in the format `projects/*/locations/*`.
  public var location: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for the `RetrieveRegisterParameters` method.
public struct Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Parameters to use when calling the `RegisterDomain` method.
  public var registerParameters: Google_Cloud_Domains_V1beta1_RegisterParameters {
    get {return _registerParameters ?? Google_Cloud_Domains_V1beta1_RegisterParameters()}
    set {_registerParameters = newValue}
  }
  /// Returns true if `registerParameters` has been explicitly set.
  public var hasRegisterParameters: Bool {return self._registerParameters != nil}
  /// Clears the value of `registerParameters`. Subsequent reads from it will return its default value.
  public mutating func clearRegisterParameters() {self._registerParameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _registerParameters: Google_Cloud_Domains_V1beta1_RegisterParameters? = nil
}

/// Request for the `RegisterDomain` method.
public struct Google_Cloud_Domains_V1beta1_RegisterDomainRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource of the `Registration`. Must be in the
  /// format `projects/*/locations/*`.
  public var parent: String = String()

  /// Required. The complete `Registration` resource to be created.
  public var registration: Google_Cloud_Domains_V1beta1_Registration {
    get {return _registration ?? Google_Cloud_Domains_V1beta1_Registration()}
    set {_registration = newValue}
  }
  /// Returns true if `registration` has been explicitly set.
  public var hasRegistration: Bool {return self._registration != nil}
  /// Clears the value of `registration`. Subsequent reads from it will return its default value.
  public mutating func clearRegistration() {self._registration = nil}

  /// The list of domain notices that you acknowledge. Call
  /// `RetrieveRegisterParameters` to see the notices that need acknowledgement.
  public var domainNotices: [Google_Cloud_Domains_V1beta1_DomainNotice] = []

  /// The list of contact notices that the caller acknowledges. The notices
  /// required here depend on the values specified in
  /// `registration.contact_settings`.
  public var contactNotices: [Google_Cloud_Domains_V1beta1_ContactNotice] = []

  /// Required. Yearly price to register or renew the domain.
  /// The value that should be put here can be obtained from
  /// RetrieveRegisterParameters or SearchDomains calls.
  public var yearlyPrice: Google_Type_Money {
    get {return _yearlyPrice ?? Google_Type_Money()}
    set {_yearlyPrice = newValue}
  }
  /// Returns true if `yearlyPrice` has been explicitly set.
  public var hasYearlyPrice: Bool {return self._yearlyPrice != nil}
  /// Clears the value of `yearlyPrice`. Subsequent reads from it will return its default value.
  public mutating func clearYearlyPrice() {self._yearlyPrice = nil}

  /// When true, only validation will be performed, without actually registering
  /// the domain. Follows:
  /// https://cloud.google.com/apis/design/design_patterns#request_validation
  public var validateOnly: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _registration: Google_Cloud_Domains_V1beta1_Registration? = nil
  fileprivate var _yearlyPrice: Google_Type_Money? = nil
}

/// Request for the `ListRegistrations` method.
public struct Google_Cloud_Domains_V1beta1_ListRegistrationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project and location from which to list `Registration`s, specified in
  /// the format `projects/*/locations/*`.
  public var parent: String = String()

  /// Maximum number of results to return.
  public var pageSize: Int32 = 0

  /// When set to the `next_page_token` from a prior response, provides the next
  /// page of results.
  public var pageToken: String = String()

  /// Filter expression to restrict the `Registration`s returned.
  ///
  /// The expression must specify the field name, a comparison operator, and the
  /// value that you want to use for filtering. The value must be a string, a
  /// number, a boolean, or an enum value. The comparison operator should be one
  /// of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
  ///
  /// For example, to filter to a specific domain name, use an expression like
  /// `domainName="example.com"`. You can also check for the existence of a
  /// field; for example, to find domains using custom DNS settings, use an
  /// expression like `dnsSettings.customDns:*`.
  ///
  /// You can also create compound filters by combining expressions with the
  /// `AND` and `OR` operators. For example, to find domains that are suspended
  /// or have specific issues flagged, use an expression like
  /// `(state=SUSPENDED) OR (issue:*)`.
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response for the `ListRegistrations` method.
public struct Google_Cloud_Domains_V1beta1_ListRegistrationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of `Registration`s.
  public var registrations: [Google_Cloud_Domains_V1beta1_Registration] = []

  /// When present, there are more results to retrieve. Set `page_token` to this
  /// value on a subsequent call to get the next page of results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the `GetRegistration` method.
public struct Google_Cloud_Domains_V1beta1_GetRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` to get, in the format
  /// `projects/*/locations/*/registrations/*`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the `UpdateRegistration` method.
public struct Google_Cloud_Domains_V1beta1_UpdateRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Fields of the `Registration` to update.
  public var registration: Google_Cloud_Domains_V1beta1_Registration {
    get {return _registration ?? Google_Cloud_Domains_V1beta1_Registration()}
    set {_registration = newValue}
  }
  /// Returns true if `registration` has been explicitly set.
  public var hasRegistration: Bool {return self._registration != nil}
  /// Clears the value of `registration`. Subsequent reads from it will return its default value.
  public mutating func clearRegistration() {self._registration = nil}

  /// Required. The field mask describing which fields to update as a comma-separated list.
  /// For example, if only the labels are being updated, the `update_mask` would
  /// be `"labels"`.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _registration: Google_Cloud_Domains_V1beta1_Registration? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request for the `ConfigureManagementSettings` method.
public struct Google_Cloud_Domains_V1beta1_ConfigureManagementSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` whose management settings are being updated,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var registration: String = String()

  /// Fields of the `ManagementSettings` to update.
  public var managementSettings: Google_Cloud_Domains_V1beta1_ManagementSettings {
    get {return _managementSettings ?? Google_Cloud_Domains_V1beta1_ManagementSettings()}
    set {_managementSettings = newValue}
  }
  /// Returns true if `managementSettings` has been explicitly set.
  public var hasManagementSettings: Bool {return self._managementSettings != nil}
  /// Clears the value of `managementSettings`. Subsequent reads from it will return its default value.
  public mutating func clearManagementSettings() {self._managementSettings = nil}

  /// Required. The field mask describing which fields to update as a comma-separated list.
  /// For example, if only the transfer lock is being updated, the `update_mask`
  /// would be `"transfer_lock_state"`.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _managementSettings: Google_Cloud_Domains_V1beta1_ManagementSettings? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request for the `ConfigureDnsSettings` method.
public struct Google_Cloud_Domains_V1beta1_ConfigureDnsSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` whose DNS settings are being updated,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var registration: String = String()

  /// Fields of the `DnsSettings` to update.
  public var dnsSettings: Google_Cloud_Domains_V1beta1_DnsSettings {
    get {return _dnsSettings ?? Google_Cloud_Domains_V1beta1_DnsSettings()}
    set {_dnsSettings = newValue}
  }
  /// Returns true if `dnsSettings` has been explicitly set.
  public var hasDnsSettings: Bool {return self._dnsSettings != nil}
  /// Clears the value of `dnsSettings`. Subsequent reads from it will return its default value.
  public mutating func clearDnsSettings() {self._dnsSettings = nil}

  /// Required. The field mask describing which fields to update as a comma-separated list.
  /// For example, if only the name servers are being updated for an existing
  /// Custom DNS configuration, the `update_mask` would be
  /// `"custom_dns.name_servers"`.
  ///
  /// When changing the DNS provider from one type to another, pass the new
  /// provider's field name as part of the field mask. For example, when changing
  /// from a Google Domains DNS configuration to a Custom DNS configuration, the
  /// `update_mask` would be `"custom_dns"`. //
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// Validate the request without actually updating the DNS settings.
  public var validateOnly: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dnsSettings: Google_Cloud_Domains_V1beta1_DnsSettings? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request for the `ConfigureContactSettings` method.
public struct Google_Cloud_Domains_V1beta1_ConfigureContactSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` whose contact settings are being updated,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var registration: String = String()

  /// Fields of the `ContactSettings` to update.
  public var contactSettings: Google_Cloud_Domains_V1beta1_ContactSettings {
    get {return _contactSettings ?? Google_Cloud_Domains_V1beta1_ContactSettings()}
    set {_contactSettings = newValue}
  }
  /// Returns true if `contactSettings` has been explicitly set.
  public var hasContactSettings: Bool {return self._contactSettings != nil}
  /// Clears the value of `contactSettings`. Subsequent reads from it will return its default value.
  public mutating func clearContactSettings() {self._contactSettings = nil}

  /// Required. The field mask describing which fields to update as a comma-separated list.
  /// For example, if only the registrant contact is being updated, the
  /// `update_mask` would be `"registrant_contact"`.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// The list of contact notices that the caller acknowledges. The notices
  /// required here depend on the values specified in `contact_settings`.
  public var contactNotices: [Google_Cloud_Domains_V1beta1_ContactNotice] = []

  /// Validate the request without actually updating the contact settings.
  public var validateOnly: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contactSettings: Google_Cloud_Domains_V1beta1_ContactSettings? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request for the `ExportRegistration` method.
public struct Google_Cloud_Domains_V1beta1_ExportRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` to export,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the `DeleteRegistration` method.
public struct Google_Cloud_Domains_V1beta1_DeleteRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` to delete,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the `RetrieveAuthorizationCode` method.
public struct Google_Cloud_Domains_V1beta1_RetrieveAuthorizationCodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` whose authorization code is being retrieved,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var registration: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request for the `ResetAuthorizationCode` method.
public struct Google_Cloud_Domains_V1beta1_ResetAuthorizationCodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the `Registration` whose authorization code is being reset,
  /// in the format `projects/*/locations/*/registrations/*`.
  public var registration: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Parameters required to register a new domain.
public struct Google_Cloud_Domains_V1beta1_RegisterParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The domain name. Unicode domain names are expressed in Punycode format.
  public var domainName: String = String()

  /// Indicates whether the domain is available for registration. This value is
  /// accurate when obtained by calling `RetrieveRegisterParameters`, but is
  /// approximate when obtained by calling `SearchDomains`.
  public var availability: Google_Cloud_Domains_V1beta1_RegisterParameters.Availability = .unspecified

  /// Contact privacy options that the domain supports.
  public var supportedPrivacy: [Google_Cloud_Domains_V1beta1_ContactPrivacy] = []

  /// Notices about special properties of the domain.
  public var domainNotices: [Google_Cloud_Domains_V1beta1_DomainNotice] = []

  /// Price to register or renew the domain for one year.
  public var yearlyPrice: Google_Type_Money {
    get {return _yearlyPrice ?? Google_Type_Money()}
    set {_yearlyPrice = newValue}
  }
  /// Returns true if `yearlyPrice` has been explicitly set.
  public var hasYearlyPrice: Bool {return self._yearlyPrice != nil}
  /// Clears the value of `yearlyPrice`. Subsequent reads from it will return its default value.
  public mutating func clearYearlyPrice() {self._yearlyPrice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible availability states of a domain name.
  public enum Availability: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The availability is unspecified.
    case unspecified // = 0

    /// The domain is available for registration.
    case available // = 1

    /// The domain is not available for registration. Generally this means it is
    /// already registered to another party.
    case unavailable // = 2

    /// The domain is not currently supported by Cloud Domains, but may
    /// be available elsewhere.
    case unsupported // = 3

    /// Cloud Domains is unable to determine domain availability, generally
    /// due to system maintenance at the domain name registry.
    case unknown // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .available
      case 2: self = .unavailable
      case 3: self = .unsupported
      case 4: self = .unknown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .available: return 1
      case .unavailable: return 2
      case .unsupported: return 3
      case .unknown: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _yearlyPrice: Google_Type_Money? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Domains_V1beta1_RegisterParameters.Availability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Domains_V1beta1_RegisterParameters.Availability] = [
    .unspecified,
    .available,
    .unavailable,
    .unsupported,
    .unknown,
  ]
}

#endif  // swift(>=4.2)

/// Defines an authorization code.
public struct Google_Cloud_Domains_V1beta1_AuthorizationCode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Authorization Code in ASCII. It can be used to transfer the domain
  /// to or from another registrar.
  public var code: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents the metadata of the long-running operation. Output only.
public struct Google_Cloud_Domains_V1beta1_OperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The time the operation was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The time the operation finished running.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// Server-defined resource path for the target of the operation.
  public var target: String = String()

  /// Name of the verb executed by the operation.
  public var verb: String = String()

  /// Human-readable status of the operation, if any.
  public var statusDetail: String = String()

  /// API version used to start the operation.
  public var apiVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.domains.v1beta1"

extension Google_Cloud_Domains_V1beta1_ContactPrivacy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTACT_PRIVACY_UNSPECIFIED"),
    1: .same(proto: "PUBLIC_CONTACT_DATA"),
    2: .same(proto: "PRIVATE_CONTACT_DATA"),
    3: .same(proto: "REDACTED_CONTACT_DATA"),
  ]
}

extension Google_Cloud_Domains_V1beta1_DomainNotice: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DOMAIN_NOTICE_UNSPECIFIED"),
    1: .same(proto: "HSTS_PRELOADED"),
  ]
}

extension Google_Cloud_Domains_V1beta1_ContactNotice: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTACT_NOTICE_UNSPECIFIED"),
    1: .same(proto: "PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT"),
  ]
}

extension Google_Cloud_Domains_V1beta1_TransferLockState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRANSFER_LOCK_STATE_UNSPECIFIED"),
    1: .same(proto: "UNLOCKED"),
    2: .same(proto: "LOCKED"),
  ]
}

extension Google_Cloud_Domains_V1beta1_Registration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Registration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "domain_name"),
    3: .standard(proto: "create_time"),
    6: .standard(proto: "expire_time"),
    7: .same(proto: "state"),
    8: .same(proto: "issues"),
    9: .same(proto: "labels"),
    10: .standard(proto: "management_settings"),
    11: .standard(proto: "dns_settings"),
    12: .standard(proto: "contact_settings"),
    13: .standard(proto: "pending_contact_settings"),
    14: .standard(proto: "supported_privacy"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _domainName: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _expireTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _state: Google_Cloud_Domains_V1beta1_Registration.State = .unspecified
    var _issues: [Google_Cloud_Domains_V1beta1_Registration.Issue] = []
    var _labels: Dictionary<String,String> = [:]
    var _managementSettings: Google_Cloud_Domains_V1beta1_ManagementSettings? = nil
    var _dnsSettings: Google_Cloud_Domains_V1beta1_DnsSettings? = nil
    var _contactSettings: Google_Cloud_Domains_V1beta1_ContactSettings? = nil
    var _pendingContactSettings: Google_Cloud_Domains_V1beta1_ContactSettings? = nil
    var _supportedPrivacy: [Google_Cloud_Domains_V1beta1_ContactPrivacy] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _domainName = source._domainName
      _createTime = source._createTime
      _expireTime = source._expireTime
      _state = source._state
      _issues = source._issues
      _labels = source._labels
      _managementSettings = source._managementSettings
      _dnsSettings = source._dnsSettings
      _contactSettings = source._contactSettings
      _pendingContactSettings = source._pendingContactSettings
      _supportedPrivacy = source._supportedPrivacy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._domainName) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._expireTime) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 8: try { try decoder.decodeRepeatedEnumField(value: &_storage._issues) }()
        case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._managementSettings) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._dnsSettings) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._contactSettings) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._pendingContactSettings) }()
        case 14: try { try decoder.decodeRepeatedEnumField(value: &_storage._supportedPrivacy) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._domainName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._domainName, fieldNumber: 2)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._expireTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 7)
      }
      if !_storage._issues.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._issues, fieldNumber: 8)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 9)
      }
      if let v = _storage._managementSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._dnsSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._contactSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._pendingContactSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._supportedPrivacy.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._supportedPrivacy, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_Registration, rhs: Google_Cloud_Domains_V1beta1_Registration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._domainName != rhs_storage._domainName {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._expireTime != rhs_storage._expireTime {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._issues != rhs_storage._issues {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._managementSettings != rhs_storage._managementSettings {return false}
        if _storage._dnsSettings != rhs_storage._dnsSettings {return false}
        if _storage._contactSettings != rhs_storage._contactSettings {return false}
        if _storage._pendingContactSettings != rhs_storage._pendingContactSettings {return false}
        if _storage._supportedPrivacy != rhs_storage._supportedPrivacy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_Registration.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "REGISTRATION_PENDING"),
    2: .same(proto: "REGISTRATION_FAILED"),
    6: .same(proto: "ACTIVE"),
    7: .same(proto: "SUSPENDED"),
    8: .same(proto: "EXPORTED"),
  ]
}

extension Google_Cloud_Domains_V1beta1_Registration.Issue: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ISSUE_UNSPECIFIED"),
    1: .same(proto: "CONTACT_SUPPORT"),
    2: .same(proto: "UNVERIFIED_EMAIL"),
  ]
}

extension Google_Cloud_Domains_V1beta1_ManagementSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ManagementSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "renewal_method"),
    4: .standard(proto: "transfer_lock_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularEnumField(value: &self.renewalMethod) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.transferLockState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.renewalMethod != .unspecified {
      try visitor.visitSingularEnumField(value: self.renewalMethod, fieldNumber: 3)
    }
    if self.transferLockState != .unspecified {
      try visitor.visitSingularEnumField(value: self.transferLockState, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ManagementSettings, rhs: Google_Cloud_Domains_V1beta1_ManagementSettings) -> Bool {
    if lhs.renewalMethod != rhs.renewalMethod {return false}
    if lhs.transferLockState != rhs.transferLockState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ManagementSettings.RenewalMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RENEWAL_METHOD_UNSPECIFIED"),
    1: .same(proto: "AUTOMATIC_RENEWAL"),
    2: .same(proto: "MANUAL_RENEWAL"),
  ]
}

extension Google_Cloud_Domains_V1beta1_DnsSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "custom_dns"),
    2: .standard(proto: "google_domains_dns"),
    4: .standard(proto: "glue_records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns?
        if let current = self.dnsProvider {
          try decoder.handleConflictingOneOf()
          if case .customDns(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.dnsProvider = .customDns(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns?
        if let current = self.dnsProvider {
          try decoder.handleConflictingOneOf()
          if case .googleDomainsDns(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.dnsProvider = .googleDomainsDns(v)}
      }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.glueRecords) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.dnsProvider {
    case .customDns?: try {
      guard case .customDns(let v)? = self.dnsProvider else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .googleDomainsDns?: try {
      guard case .googleDomainsDns(let v)? = self.dnsProvider else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.glueRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.glueRecords, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_DnsSettings, rhs: Google_Cloud_Domains_V1beta1_DnsSettings) -> Bool {
    if lhs.dnsProvider != rhs.dnsProvider {return false}
    if lhs.glueRecords != rhs.glueRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DS_STATE_UNSPECIFIED"),
    1: .same(proto: "DS_RECORDS_UNPUBLISHED"),
    2: .same(proto: "DS_RECORDS_PUBLISHED"),
  ]
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Domains_V1beta1_DnsSettings.protoMessageName + ".CustomDns"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "name_servers"),
    2: .standard(proto: "ds_records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nameServers) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.dsRecords) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nameServers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nameServers, fieldNumber: 1)
    }
    if !self.dsRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dsRecords, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns, rhs: Google_Cloud_Domains_V1beta1_DnsSettings.CustomDns) -> Bool {
    if lhs.nameServers != rhs.nameServers {return false}
    if lhs.dsRecords != rhs.dsRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Domains_V1beta1_DnsSettings.protoMessageName + ".GoogleDomainsDns"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "name_servers"),
    2: .standard(proto: "ds_state"),
    3: .standard(proto: "ds_records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nameServers) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.dsState) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.dsRecords) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nameServers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nameServers, fieldNumber: 1)
    }
    if self.dsState != .unspecified {
      try visitor.visitSingularEnumField(value: self.dsState, fieldNumber: 2)
    }
    if !self.dsRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dsRecords, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns, rhs: Google_Cloud_Domains_V1beta1_DnsSettings.GoogleDomainsDns) -> Bool {
    if lhs.nameServers != rhs.nameServers {return false}
    if lhs.dsState != rhs.dsState {return false}
    if lhs.dsRecords != rhs.dsRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Domains_V1beta1_DnsSettings.protoMessageName + ".DsRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_tag"),
    2: .same(proto: "algorithm"),
    3: .standard(proto: "digest_type"),
    4: .same(proto: "digest"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.keyTag) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.algorithm) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.digestType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.digest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyTag != 0 {
      try visitor.visitSingularInt32Field(value: self.keyTag, fieldNumber: 1)
    }
    if self.algorithm != .unspecified {
      try visitor.visitSingularEnumField(value: self.algorithm, fieldNumber: 2)
    }
    if self.digestType != .unspecified {
      try visitor.visitSingularEnumField(value: self.digestType, fieldNumber: 3)
    }
    if !self.digest.isEmpty {
      try visitor.visitSingularStringField(value: self.digest, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord, rhs: Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord) -> Bool {
    if lhs.keyTag != rhs.keyTag {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.digestType != rhs.digestType {return false}
    if lhs.digest != rhs.digest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.Algorithm: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALGORITHM_UNSPECIFIED"),
    3: .same(proto: "DSA"),
    4: .same(proto: "ECC"),
    5: .same(proto: "RSASHA1"),
    6: .same(proto: "DSANSEC3SHA1"),
    7: .same(proto: "RSASHA1NSEC3SHA1"),
    8: .same(proto: "RSASHA256"),
    10: .same(proto: "RSASHA512"),
    12: .same(proto: "ECCGOST"),
    13: .same(proto: "ECDSAP256SHA256"),
    14: .same(proto: "ECDSAP384SHA384"),
    15: .same(proto: "ED25519"),
    16: .same(proto: "ED448"),
  ]
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.DsRecord.DigestType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIGEST_TYPE_UNSPECIFIED"),
    1: .same(proto: "SHA1"),
    2: .same(proto: "SHA256"),
    3: .same(proto: "GOST3411"),
    4: .same(proto: "SHA384"),
  ]
}

extension Google_Cloud_Domains_V1beta1_DnsSettings.GlueRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Domains_V1beta1_DnsSettings.protoMessageName + ".GlueRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_name"),
    2: .standard(proto: "ipv4_addresses"),
    3: .standard(proto: "ipv6_addresses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hostName) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ipv4Addresses) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.ipv6Addresses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostName.isEmpty {
      try visitor.visitSingularStringField(value: self.hostName, fieldNumber: 1)
    }
    if !self.ipv4Addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ipv4Addresses, fieldNumber: 2)
    }
    if !self.ipv6Addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ipv6Addresses, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_DnsSettings.GlueRecord, rhs: Google_Cloud_Domains_V1beta1_DnsSettings.GlueRecord) -> Bool {
    if lhs.hostName != rhs.hostName {return false}
    if lhs.ipv4Addresses != rhs.ipv4Addresses {return false}
    if lhs.ipv6Addresses != rhs.ipv6Addresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ContactSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContactSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "privacy"),
    2: .standard(proto: "registrant_contact"),
    3: .standard(proto: "admin_contact"),
    4: .standard(proto: "technical_contact"),
  ]

  fileprivate class _StorageClass {
    var _privacy: Google_Cloud_Domains_V1beta1_ContactPrivacy = .unspecified
    var _registrantContact: Google_Cloud_Domains_V1beta1_ContactSettings.Contact? = nil
    var _adminContact: Google_Cloud_Domains_V1beta1_ContactSettings.Contact? = nil
    var _technicalContact: Google_Cloud_Domains_V1beta1_ContactSettings.Contact? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _privacy = source._privacy
      _registrantContact = source._registrantContact
      _adminContact = source._adminContact
      _technicalContact = source._technicalContact
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._privacy) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._registrantContact) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._adminContact) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._technicalContact) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._privacy != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._privacy, fieldNumber: 1)
      }
      if let v = _storage._registrantContact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._adminContact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._technicalContact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ContactSettings, rhs: Google_Cloud_Domains_V1beta1_ContactSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._privacy != rhs_storage._privacy {return false}
        if _storage._registrantContact != rhs_storage._registrantContact {return false}
        if _storage._adminContact != rhs_storage._adminContact {return false}
        if _storage._technicalContact != rhs_storage._technicalContact {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ContactSettings.Contact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Domains_V1beta1_ContactSettings.protoMessageName + ".Contact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "postal_address"),
    2: .same(proto: "email"),
    3: .standard(proto: "phone_number"),
    4: .standard(proto: "fax_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._postalAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.faxNumber) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._postalAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 3)
    }
    if !self.faxNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.faxNumber, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ContactSettings.Contact, rhs: Google_Cloud_Domains_V1beta1_ContactSettings.Contact) -> Bool {
    if lhs._postalAddress != rhs._postalAddress {return false}
    if lhs.email != rhs.email {return false}
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.faxNumber != rhs.faxNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_SearchDomainsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchDomainsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "query"),
    2: .same(proto: "location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.location) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_SearchDomainsRequest, rhs: Google_Cloud_Domains_V1beta1_SearchDomainsRequest) -> Bool {
    if lhs.query != rhs.query {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_SearchDomainsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchDomainsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "register_parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.registerParameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registerParameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.registerParameters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_SearchDomainsResponse, rhs: Google_Cloud_Domains_V1beta1_SearchDomainsResponse) -> Bool {
    if lhs.registerParameters != rhs.registerParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveRegisterParametersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "domain_name"),
    2: .same(proto: "location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domainName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.location) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domainName.isEmpty {
      try visitor.visitSingularStringField(value: self.domainName, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersRequest, rhs: Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersRequest) -> Bool {
    if lhs.domainName != rhs.domainName {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveRegisterParametersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "register_parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registerParameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._registerParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersResponse, rhs: Google_Cloud_Domains_V1beta1_RetrieveRegisterParametersResponse) -> Bool {
    if lhs._registerParameters != rhs._registerParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_RegisterDomainRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterDomainRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "registration"),
    3: .standard(proto: "domain_notices"),
    4: .standard(proto: "contact_notices"),
    5: .standard(proto: "yearly_price"),
    6: .standard(proto: "validate_only"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._registration) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.domainNotices) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.contactNotices) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._yearlyPrice) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.validateOnly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._registration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.domainNotices.isEmpty {
      try visitor.visitPackedEnumField(value: self.domainNotices, fieldNumber: 3)
    }
    if !self.contactNotices.isEmpty {
      try visitor.visitPackedEnumField(value: self.contactNotices, fieldNumber: 4)
    }
    if let v = self._yearlyPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.validateOnly != false {
      try visitor.visitSingularBoolField(value: self.validateOnly, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_RegisterDomainRequest, rhs: Google_Cloud_Domains_V1beta1_RegisterDomainRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._registration != rhs._registration {return false}
    if lhs.domainNotices != rhs.domainNotices {return false}
    if lhs.contactNotices != rhs.contactNotices {return false}
    if lhs._yearlyPrice != rhs._yearlyPrice {return false}
    if lhs.validateOnly != rhs.validateOnly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ListRegistrationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListRegistrationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ListRegistrationsRequest, rhs: Google_Cloud_Domains_V1beta1_ListRegistrationsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ListRegistrationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListRegistrationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registrations"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.registrations) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registrations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.registrations, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ListRegistrationsResponse, rhs: Google_Cloud_Domains_V1beta1_ListRegistrationsResponse) -> Bool {
    if lhs.registrations != rhs.registrations {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_GetRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_GetRegistrationRequest, rhs: Google_Cloud_Domains_V1beta1_GetRegistrationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_UpdateRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._registration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_UpdateRegistrationRequest, rhs: Google_Cloud_Domains_V1beta1_UpdateRegistrationRequest) -> Bool {
    if lhs._registration != rhs._registration {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ConfigureManagementSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigureManagementSettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .standard(proto: "management_settings"),
    3: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.registration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._managementSettings) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registration.isEmpty {
      try visitor.visitSingularStringField(value: self.registration, fieldNumber: 1)
    }
    if let v = self._managementSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ConfigureManagementSettingsRequest, rhs: Google_Cloud_Domains_V1beta1_ConfigureManagementSettingsRequest) -> Bool {
    if lhs.registration != rhs.registration {return false}
    if lhs._managementSettings != rhs._managementSettings {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ConfigureDnsSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigureDnsSettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .standard(proto: "dns_settings"),
    3: .standard(proto: "update_mask"),
    4: .standard(proto: "validate_only"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.registration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dnsSettings) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.validateOnly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registration.isEmpty {
      try visitor.visitSingularStringField(value: self.registration, fieldNumber: 1)
    }
    if let v = self._dnsSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.validateOnly != false {
      try visitor.visitSingularBoolField(value: self.validateOnly, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ConfigureDnsSettingsRequest, rhs: Google_Cloud_Domains_V1beta1_ConfigureDnsSettingsRequest) -> Bool {
    if lhs.registration != rhs.registration {return false}
    if lhs._dnsSettings != rhs._dnsSettings {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.validateOnly != rhs.validateOnly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ConfigureContactSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigureContactSettingsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .standard(proto: "contact_settings"),
    3: .standard(proto: "update_mask"),
    4: .standard(proto: "contact_notices"),
    5: .standard(proto: "validate_only"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.registration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._contactSettings) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.contactNotices) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.validateOnly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registration.isEmpty {
      try visitor.visitSingularStringField(value: self.registration, fieldNumber: 1)
    }
    if let v = self._contactSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.contactNotices.isEmpty {
      try visitor.visitPackedEnumField(value: self.contactNotices, fieldNumber: 4)
    }
    if self.validateOnly != false {
      try visitor.visitSingularBoolField(value: self.validateOnly, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ConfigureContactSettingsRequest, rhs: Google_Cloud_Domains_V1beta1_ConfigureContactSettingsRequest) -> Bool {
    if lhs.registration != rhs.registration {return false}
    if lhs._contactSettings != rhs._contactSettings {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.contactNotices != rhs.contactNotices {return false}
    if lhs.validateOnly != rhs.validateOnly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ExportRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ExportRegistrationRequest, rhs: Google_Cloud_Domains_V1beta1_ExportRegistrationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_DeleteRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_DeleteRegistrationRequest, rhs: Google_Cloud_Domains_V1beta1_DeleteRegistrationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_RetrieveAuthorizationCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveAuthorizationCodeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.registration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registration.isEmpty {
      try visitor.visitSingularStringField(value: self.registration, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_RetrieveAuthorizationCodeRequest, rhs: Google_Cloud_Domains_V1beta1_RetrieveAuthorizationCodeRequest) -> Bool {
    if lhs.registration != rhs.registration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_ResetAuthorizationCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResetAuthorizationCodeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.registration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registration.isEmpty {
      try visitor.visitSingularStringField(value: self.registration, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_ResetAuthorizationCodeRequest, rhs: Google_Cloud_Domains_V1beta1_ResetAuthorizationCodeRequest) -> Bool {
    if lhs.registration != rhs.registration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_RegisterParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "domain_name"),
    2: .same(proto: "availability"),
    3: .standard(proto: "supported_privacy"),
    4: .standard(proto: "domain_notices"),
    5: .standard(proto: "yearly_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domainName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.availability) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.supportedPrivacy) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.domainNotices) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._yearlyPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domainName.isEmpty {
      try visitor.visitSingularStringField(value: self.domainName, fieldNumber: 1)
    }
    if self.availability != .unspecified {
      try visitor.visitSingularEnumField(value: self.availability, fieldNumber: 2)
    }
    if !self.supportedPrivacy.isEmpty {
      try visitor.visitPackedEnumField(value: self.supportedPrivacy, fieldNumber: 3)
    }
    if !self.domainNotices.isEmpty {
      try visitor.visitPackedEnumField(value: self.domainNotices, fieldNumber: 4)
    }
    if let v = self._yearlyPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_RegisterParameters, rhs: Google_Cloud_Domains_V1beta1_RegisterParameters) -> Bool {
    if lhs.domainName != rhs.domainName {return false}
    if lhs.availability != rhs.availability {return false}
    if lhs.supportedPrivacy != rhs.supportedPrivacy {return false}
    if lhs.domainNotices != rhs.domainNotices {return false}
    if lhs._yearlyPrice != rhs._yearlyPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_RegisterParameters.Availability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AVAILABILITY_UNSPECIFIED"),
    1: .same(proto: "AVAILABLE"),
    2: .same(proto: "UNAVAILABLE"),
    3: .same(proto: "UNSUPPORTED"),
    4: .same(proto: "UNKNOWN"),
  ]
}

extension Google_Cloud_Domains_V1beta1_AuthorizationCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthorizationCode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.code) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_AuthorizationCode, rhs: Google_Cloud_Domains_V1beta1_AuthorizationCode) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Domains_V1beta1_OperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "create_time"),
    2: .standard(proto: "end_time"),
    3: .same(proto: "target"),
    4: .same(proto: "verb"),
    5: .standard(proto: "status_detail"),
    6: .standard(proto: "api_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.target) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.verb) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.statusDetail) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.apiVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.target.isEmpty {
      try visitor.visitSingularStringField(value: self.target, fieldNumber: 3)
    }
    if !self.verb.isEmpty {
      try visitor.visitSingularStringField(value: self.verb, fieldNumber: 4)
    }
    if !self.statusDetail.isEmpty {
      try visitor.visitSingularStringField(value: self.statusDetail, fieldNumber: 5)
    }
    if !self.apiVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.apiVersion, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Domains_V1beta1_OperationMetadata, rhs: Google_Cloud_Domains_V1beta1_OperationMetadata) -> Bool {
    if lhs._createTime != rhs._createTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.target != rhs.target {return false}
    if lhs.verb != rhs.verb {return false}
    if lhs.statusDetail != rhs.statusDetail {return false}
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
