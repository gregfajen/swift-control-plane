// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/notebooks/v1beta1/instance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The definition of a notebook instance.
public struct Google_Cloud_Notebooks_V1beta1_Instance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The name of this notebook instance. Format:
  /// `projects/{project_id}/locations/{location}/instances/{instance_id}`
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Type of the environment; can be one of VM image, or container image.
  public var environment: OneOf_Environment? {
    get {return _storage._environment}
    set {_uniqueStorage()._environment = newValue}
  }

  /// Use a Compute Engine VM image to start the notebook instance.
  public var vmImage: Google_Cloud_Notebooks_V1beta1_VmImage {
    get {
      if case .vmImage(let v)? = _storage._environment {return v}
      return Google_Cloud_Notebooks_V1beta1_VmImage()
    }
    set {_uniqueStorage()._environment = .vmImage(newValue)}
  }

  /// Use a container image to start the notebook instance.
  public var containerImage: Google_Cloud_Notebooks_V1beta1_ContainerImage {
    get {
      if case .containerImage(let v)? = _storage._environment {return v}
      return Google_Cloud_Notebooks_V1beta1_ContainerImage()
    }
    set {_uniqueStorage()._environment = .containerImage(newValue)}
  }

  /// Path to a Bash script that automatically runs after a notebook instance
  /// fully boots up. The path must be a URL or
  /// Cloud Storage path (`gs://path-to-file/file-name`).
  public var postStartupScript: String {
    get {return _storage._postStartupScript}
    set {_uniqueStorage()._postStartupScript = newValue}
  }

  /// Output only. The proxy endpoint that is used to access the Jupyter notebook.
  public var proxyUri: String {
    get {return _storage._proxyUri}
    set {_uniqueStorage()._proxyUri = newValue}
  }

  /// Input only. The owner of this instance after creation. Format: `alias@example.com`
  ///
  /// Currently supports one owner only. If not specified, all of the service
  /// account users of your VM instance's service account can use
  /// the instance.
  public var instanceOwners: [String] {
    get {return _storage._instanceOwners}
    set {_uniqueStorage()._instanceOwners = newValue}
  }

  /// The service account on this instance, giving access to other Google
  /// Cloud services.
  /// You can use any service account within the same project, but you
  /// must have the service account user permission to use the instance.
  ///
  /// If not specified, the [Compute Engine default service
  /// account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
  /// is used.
  public var serviceAccount: String {
    get {return _storage._serviceAccount}
    set {_uniqueStorage()._serviceAccount = newValue}
  }

  /// Required. The [Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types) of this
  /// instance.
  public var machineType: String {
    get {return _storage._machineType}
    set {_uniqueStorage()._machineType = newValue}
  }

  /// The hardware accelerator used on this instance. If you use
  /// accelerators, make sure that your configuration has
  /// [enough vCPUs and memory to support the `machine_type` you
  /// have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list).
  public var acceleratorConfig: Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorConfig {
    get {return _storage._acceleratorConfig ?? Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorConfig()}
    set {_uniqueStorage()._acceleratorConfig = newValue}
  }
  /// Returns true if `acceleratorConfig` has been explicitly set.
  public var hasAcceleratorConfig: Bool {return _storage._acceleratorConfig != nil}
  /// Clears the value of `acceleratorConfig`. Subsequent reads from it will return its default value.
  public mutating func clearAcceleratorConfig() {_uniqueStorage()._acceleratorConfig = nil}

  /// Output only. The state of this instance.
  public var state: Google_Cloud_Notebooks_V1beta1_Instance.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Whether the end user authorizes Google Cloud to install GPU driver
  /// on this instance.
  /// If this field is empty or set to false, the GPU driver won't be installed.
  /// Only applicable to instances with GPUs.
  public var installGpuDriver: Bool {
    get {return _storage._installGpuDriver}
    set {_uniqueStorage()._installGpuDriver = newValue}
  }

  /// Specify a custom Cloud Storage path where the GPU driver is stored.
  /// If not specified, we'll automatically choose from official GPU drivers.
  public var customGpuDriverPath: String {
    get {return _storage._customGpuDriverPath}
    set {_uniqueStorage()._customGpuDriverPath = newValue}
  }

  /// Input only. The type of the boot disk attached to this instance, defaults to
  /// standard persistent disk (`PD_STANDARD`).
  public var bootDiskType: Google_Cloud_Notebooks_V1beta1_Instance.DiskType {
    get {return _storage._bootDiskType}
    set {_uniqueStorage()._bootDiskType = newValue}
  }

  /// Input only. The size of the boot disk in GB attached to this instance, up to a maximum
  /// of 64000&nbsp;GB (64&nbsp;TB). The minimum recommended value is
  /// 100&nbsp;GB. If not specified, this defaults to 100.
  public var bootDiskSizeGb: Int64 {
    get {return _storage._bootDiskSizeGb}
    set {_uniqueStorage()._bootDiskSizeGb = newValue}
  }

  /// Input only. The type of the data disk attached to this instance, defaults to
  /// standard persistent disk (`PD_STANDARD`).
  public var dataDiskType: Google_Cloud_Notebooks_V1beta1_Instance.DiskType {
    get {return _storage._dataDiskType}
    set {_uniqueStorage()._dataDiskType = newValue}
  }

  /// Input only. The size of the data disk in GB attached to this instance, up to a maximum
  /// of 64000&nbsp;GB (64&nbsp;TB). You can choose the size of the data disk
  /// based on how big your notebooks and data are. If not specified, this
  /// defaults to 100.
  public var dataDiskSizeGb: Int64 {
    get {return _storage._dataDiskSizeGb}
    set {_uniqueStorage()._dataDiskSizeGb = newValue}
  }

  /// Input only. If true, the data disk will not be auto deleted when deleting the instance.
  public var noRemoveDataDisk: Bool {
    get {return _storage._noRemoveDataDisk}
    set {_uniqueStorage()._noRemoveDataDisk = newValue}
  }

  /// Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
  public var diskEncryption: Google_Cloud_Notebooks_V1beta1_Instance.DiskEncryption {
    get {return _storage._diskEncryption}
    set {_uniqueStorage()._diskEncryption = newValue}
  }

  /// Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption
  /// is CMEK.
  /// Format:
  /// `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}`
  ///
  /// Learn more about [using your own encryption keys]( https://cloud.google.com/kms/docs/quickstart).
  public var kmsKey: String {
    get {return _storage._kmsKey}
    set {_uniqueStorage()._kmsKey = newValue}
  }

  /// If true, no public IP will be assigned to this instance.
  public var noPublicIp: Bool {
    get {return _storage._noPublicIp}
    set {_uniqueStorage()._noPublicIp = newValue}
  }

  /// If true, the notebook instance will not register with the proxy.
  public var noProxyAccess: Bool {
    get {return _storage._noProxyAccess}
    set {_uniqueStorage()._noProxyAccess = newValue}
  }

  /// The name of the VPC that this instance is in.
  /// Format:
  /// `projects/{project_id}/global/networks/{network_id}`
  public var network: String {
    get {return _storage._network}
    set {_uniqueStorage()._network = newValue}
  }

  /// The name of the subnet that this instance is in.
  /// Format:
  /// `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
  public var subnet: String {
    get {return _storage._subnet}
    set {_uniqueStorage()._subnet = newValue}
  }

  /// Labels to apply to this instance.
  /// These can be later modified by the setLabels method.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// Custom metadata to apply to this instance.
  public var metadata: Dictionary<String,String> {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  /// Output only. Instance creation time.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Instance update time.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Type of the environment; can be one of VM image, or container image.
  public enum OneOf_Environment: Equatable {
    /// Use a Compute Engine VM image to start the notebook instance.
    case vmImage(Google_Cloud_Notebooks_V1beta1_VmImage)
    /// Use a container image to start the notebook instance.
    case containerImage(Google_Cloud_Notebooks_V1beta1_ContainerImage)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_Instance.OneOf_Environment, rhs: Google_Cloud_Notebooks_V1beta1_Instance.OneOf_Environment) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.vmImage, .vmImage): return {
        guard case .vmImage(let l) = lhs, case .vmImage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.containerImage, .containerImage): return {
        guard case .containerImage(let l) = lhs, case .containerImage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Definition of the types of hardware accelerators that can be used on this
  /// instance.
  public enum AcceleratorType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Accelerator type is not specified.
    case unspecified // = 0

    /// Accelerator type is Nvidia Tesla K80.
    case nvidiaTeslaK80 // = 1

    /// Accelerator type is Nvidia Tesla P100.
    case nvidiaTeslaP100 // = 2

    /// Accelerator type is Nvidia Tesla V100.
    case nvidiaTeslaV100 // = 3

    /// Accelerator type is Nvidia Tesla P_4.
    case nvidiaTeslaP4 // = 4

    /// Accelerator type is Nvidia Tesla T4.
    case nvidiaTeslaT4 // = 5

    /// Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
    case nvidiaTeslaT4Vws // = 8

    /// Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
    case nvidiaTeslaP100Vws // = 9

    /// Accelerator type is NVIDIA Tesla P_4 Virtual Workstations.
    case nvidiaTeslaP4Vws // = 10

    /// (Coming soon) Accelerator type is TPU V2.
    case tpuV2 // = 6

    /// (Coming soon) Accelerator type is TPU V3.
    case tpuV3 // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .nvidiaTeslaK80
      case 2: self = .nvidiaTeslaP100
      case 3: self = .nvidiaTeslaV100
      case 4: self = .nvidiaTeslaP4
      case 5: self = .nvidiaTeslaT4
      case 6: self = .tpuV2
      case 7: self = .tpuV3
      case 8: self = .nvidiaTeslaT4Vws
      case 9: self = .nvidiaTeslaP100Vws
      case 10: self = .nvidiaTeslaP4Vws
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .nvidiaTeslaK80: return 1
      case .nvidiaTeslaP100: return 2
      case .nvidiaTeslaV100: return 3
      case .nvidiaTeslaP4: return 4
      case .nvidiaTeslaT4: return 5
      case .tpuV2: return 6
      case .tpuV3: return 7
      case .nvidiaTeslaT4Vws: return 8
      case .nvidiaTeslaP100Vws: return 9
      case .nvidiaTeslaP4Vws: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The definition of the states of this instance.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// State is not specified.
    case unspecified // = 0

    /// The control logic is starting the instance.
    case starting // = 1

    /// The control logic is installing required frameworks and registering the
    /// instance with notebook proxy
    case provisioning // = 2

    /// The instance is running.
    case active // = 3

    /// The control logic is stopping the instance.
    case stopping // = 4

    /// The instance is stopped.
    case stopped // = 5

    /// The instance is deleted.
    case deleted // = 6

    /// The instance is upgrading.
    case upgrading // = 7

    /// The instance is being created.
    case initializing // = 8

    /// The instance is getting registered.
    case registering // = 9
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .starting
      case 2: self = .provisioning
      case 3: self = .active
      case 4: self = .stopping
      case 5: self = .stopped
      case 6: self = .deleted
      case 7: self = .upgrading
      case 8: self = .initializing
      case 9: self = .registering
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .starting: return 1
      case .provisioning: return 2
      case .active: return 3
      case .stopping: return 4
      case .stopped: return 5
      case .deleted: return 6
      case .upgrading: return 7
      case .initializing: return 8
      case .registering: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Possible disk types for notebook instances.
  public enum DiskType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Disk type not set.
    case unspecified // = 0

    /// Standard persistent disk type.
    case pdStandard // = 1

    /// SSD persistent disk type.
    case pdSsd // = 2

    /// Balanced persistent disk type.
    case pdBalanced // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pdStandard
      case 2: self = .pdSsd
      case 3: self = .pdBalanced
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pdStandard: return 1
      case .pdSsd: return 2
      case .pdBalanced: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Definition of the disk encryption options.
  public enum DiskEncryption: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Disk encryption is not specified.
    case unspecified // = 0

    /// Use Google managed encryption keys to encrypt the boot disk.
    case gmek // = 1

    /// Use customer managed encryption keys to encrypt the boot disk.
    case cmek // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .gmek
      case 2: self = .cmek
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .gmek: return 1
      case .cmek: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Definition of a hardware accelerator. Note that not all combinations
  /// of `type` and `core_count` are valid. Check [GPUs on
  /// Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid
  /// combination. TPUs are not supported.
  public struct AcceleratorConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type of this accelerator.
    public var type: Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorType = .unspecified

    /// Count of cores of this accelerator.
    public var coreCount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorType] = [
    .unspecified,
    .nvidiaTeslaK80,
    .nvidiaTeslaP100,
    .nvidiaTeslaV100,
    .nvidiaTeslaP4,
    .nvidiaTeslaT4,
    .nvidiaTeslaT4Vws,
    .nvidiaTeslaP100Vws,
    .nvidiaTeslaP4Vws,
    .tpuV2,
    .tpuV3,
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Notebooks_V1beta1_Instance.State] = [
    .unspecified,
    .starting,
    .provisioning,
    .active,
    .stopping,
    .stopped,
    .deleted,
    .upgrading,
    .initializing,
    .registering,
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.DiskType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Notebooks_V1beta1_Instance.DiskType] = [
    .unspecified,
    .pdStandard,
    .pdSsd,
    .pdBalanced,
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.DiskEncryption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Notebooks_V1beta1_Instance.DiskEncryption] = [
    .unspecified,
    .gmek,
    .cmek,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.notebooks.v1beta1"

extension Google_Cloud_Notebooks_V1beta1_Instance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Instance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "vm_image"),
    3: .standard(proto: "container_image"),
    4: .standard(proto: "post_startup_script"),
    5: .standard(proto: "proxy_uri"),
    6: .standard(proto: "instance_owners"),
    7: .standard(proto: "service_account"),
    8: .standard(proto: "machine_type"),
    9: .standard(proto: "accelerator_config"),
    10: .same(proto: "state"),
    11: .standard(proto: "install_gpu_driver"),
    12: .standard(proto: "custom_gpu_driver_path"),
    13: .standard(proto: "boot_disk_type"),
    14: .standard(proto: "boot_disk_size_gb"),
    25: .standard(proto: "data_disk_type"),
    26: .standard(proto: "data_disk_size_gb"),
    27: .standard(proto: "no_remove_data_disk"),
    15: .standard(proto: "disk_encryption"),
    16: .standard(proto: "kms_key"),
    17: .standard(proto: "no_public_ip"),
    18: .standard(proto: "no_proxy_access"),
    19: .same(proto: "network"),
    20: .same(proto: "subnet"),
    21: .same(proto: "labels"),
    22: .same(proto: "metadata"),
    23: .standard(proto: "create_time"),
    24: .standard(proto: "update_time"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _environment: Google_Cloud_Notebooks_V1beta1_Instance.OneOf_Environment?
    var _postStartupScript: String = String()
    var _proxyUri: String = String()
    var _instanceOwners: [String] = []
    var _serviceAccount: String = String()
    var _machineType: String = String()
    var _acceleratorConfig: Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorConfig? = nil
    var _state: Google_Cloud_Notebooks_V1beta1_Instance.State = .unspecified
    var _installGpuDriver: Bool = false
    var _customGpuDriverPath: String = String()
    var _bootDiskType: Google_Cloud_Notebooks_V1beta1_Instance.DiskType = .unspecified
    var _bootDiskSizeGb: Int64 = 0
    var _dataDiskType: Google_Cloud_Notebooks_V1beta1_Instance.DiskType = .unspecified
    var _dataDiskSizeGb: Int64 = 0
    var _noRemoveDataDisk: Bool = false
    var _diskEncryption: Google_Cloud_Notebooks_V1beta1_Instance.DiskEncryption = .unspecified
    var _kmsKey: String = String()
    var _noPublicIp: Bool = false
    var _noProxyAccess: Bool = false
    var _network: String = String()
    var _subnet: String = String()
    var _labels: Dictionary<String,String> = [:]
    var _metadata: Dictionary<String,String> = [:]
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _environment = source._environment
      _postStartupScript = source._postStartupScript
      _proxyUri = source._proxyUri
      _instanceOwners = source._instanceOwners
      _serviceAccount = source._serviceAccount
      _machineType = source._machineType
      _acceleratorConfig = source._acceleratorConfig
      _state = source._state
      _installGpuDriver = source._installGpuDriver
      _customGpuDriverPath = source._customGpuDriverPath
      _bootDiskType = source._bootDiskType
      _bootDiskSizeGb = source._bootDiskSizeGb
      _dataDiskType = source._dataDiskType
      _dataDiskSizeGb = source._dataDiskSizeGb
      _noRemoveDataDisk = source._noRemoveDataDisk
      _diskEncryption = source._diskEncryption
      _kmsKey = source._kmsKey
      _noPublicIp = source._noPublicIp
      _noProxyAccess = source._noProxyAccess
      _network = source._network
      _subnet = source._subnet
      _labels = source._labels
      _metadata = source._metadata
      _createTime = source._createTime
      _updateTime = source._updateTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try {
          var v: Google_Cloud_Notebooks_V1beta1_VmImage?
          if let current = _storage._environment {
            try decoder.handleConflictingOneOf()
            if case .vmImage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._environment = .vmImage(v)}
        }()
        case 3: try {
          var v: Google_Cloud_Notebooks_V1beta1_ContainerImage?
          if let current = _storage._environment {
            try decoder.handleConflictingOneOf()
            if case .containerImage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._environment = .containerImage(v)}
        }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._postStartupScript) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._proxyUri) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._instanceOwners) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._serviceAccount) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._machineType) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._acceleratorConfig) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._installGpuDriver) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._customGpuDriverPath) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._bootDiskType) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._bootDiskSizeGb) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._diskEncryption) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._kmsKey) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._noPublicIp) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._noProxyAccess) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._network) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._subnet) }()
        case 21: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 22: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._metadata) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._dataDiskType) }()
        case 26: try { try decoder.decodeSingularInt64Field(value: &_storage._dataDiskSizeGb) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._noRemoveDataDisk) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._environment {
      case .vmImage?: try {
        guard case .vmImage(let v)? = _storage._environment else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .containerImage?: try {
        guard case .containerImage(let v)? = _storage._environment else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case nil: break
      }
      if !_storage._postStartupScript.isEmpty {
        try visitor.visitSingularStringField(value: _storage._postStartupScript, fieldNumber: 4)
      }
      if !_storage._proxyUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proxyUri, fieldNumber: 5)
      }
      if !_storage._instanceOwners.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._instanceOwners, fieldNumber: 6)
      }
      if !_storage._serviceAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceAccount, fieldNumber: 7)
      }
      if !_storage._machineType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._machineType, fieldNumber: 8)
      }
      if let v = _storage._acceleratorConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 10)
      }
      if _storage._installGpuDriver != false {
        try visitor.visitSingularBoolField(value: _storage._installGpuDriver, fieldNumber: 11)
      }
      if !_storage._customGpuDriverPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._customGpuDriverPath, fieldNumber: 12)
      }
      if _storage._bootDiskType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._bootDiskType, fieldNumber: 13)
      }
      if _storage._bootDiskSizeGb != 0 {
        try visitor.visitSingularInt64Field(value: _storage._bootDiskSizeGb, fieldNumber: 14)
      }
      if _storage._diskEncryption != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._diskEncryption, fieldNumber: 15)
      }
      if !_storage._kmsKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kmsKey, fieldNumber: 16)
      }
      if _storage._noPublicIp != false {
        try visitor.visitSingularBoolField(value: _storage._noPublicIp, fieldNumber: 17)
      }
      if _storage._noProxyAccess != false {
        try visitor.visitSingularBoolField(value: _storage._noProxyAccess, fieldNumber: 18)
      }
      if !_storage._network.isEmpty {
        try visitor.visitSingularStringField(value: _storage._network, fieldNumber: 19)
      }
      if !_storage._subnet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subnet, fieldNumber: 20)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 21)
      }
      if !_storage._metadata.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._metadata, fieldNumber: 22)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if _storage._dataDiskType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._dataDiskType, fieldNumber: 25)
      }
      if _storage._dataDiskSizeGb != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dataDiskSizeGb, fieldNumber: 26)
      }
      if _storage._noRemoveDataDisk != false {
        try visitor.visitSingularBoolField(value: _storage._noRemoveDataDisk, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_Instance, rhs: Google_Cloud_Notebooks_V1beta1_Instance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._environment != rhs_storage._environment {return false}
        if _storage._postStartupScript != rhs_storage._postStartupScript {return false}
        if _storage._proxyUri != rhs_storage._proxyUri {return false}
        if _storage._instanceOwners != rhs_storage._instanceOwners {return false}
        if _storage._serviceAccount != rhs_storage._serviceAccount {return false}
        if _storage._machineType != rhs_storage._machineType {return false}
        if _storage._acceleratorConfig != rhs_storage._acceleratorConfig {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._installGpuDriver != rhs_storage._installGpuDriver {return false}
        if _storage._customGpuDriverPath != rhs_storage._customGpuDriverPath {return false}
        if _storage._bootDiskType != rhs_storage._bootDiskType {return false}
        if _storage._bootDiskSizeGb != rhs_storage._bootDiskSizeGb {return false}
        if _storage._dataDiskType != rhs_storage._dataDiskType {return false}
        if _storage._dataDiskSizeGb != rhs_storage._dataDiskSizeGb {return false}
        if _storage._noRemoveDataDisk != rhs_storage._noRemoveDataDisk {return false}
        if _storage._diskEncryption != rhs_storage._diskEncryption {return false}
        if _storage._kmsKey != rhs_storage._kmsKey {return false}
        if _storage._noPublicIp != rhs_storage._noPublicIp {return false}
        if _storage._noProxyAccess != rhs_storage._noProxyAccess {return false}
        if _storage._network != rhs_storage._network {return false}
        if _storage._subnet != rhs_storage._subnet {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACCELERATOR_TYPE_UNSPECIFIED"),
    1: .same(proto: "NVIDIA_TESLA_K80"),
    2: .same(proto: "NVIDIA_TESLA_P100"),
    3: .same(proto: "NVIDIA_TESLA_V100"),
    4: .same(proto: "NVIDIA_TESLA_P4"),
    5: .same(proto: "NVIDIA_TESLA_T4"),
    6: .same(proto: "TPU_V2"),
    7: .same(proto: "TPU_V3"),
    8: .same(proto: "NVIDIA_TESLA_T4_VWS"),
    9: .same(proto: "NVIDIA_TESLA_P100_VWS"),
    10: .same(proto: "NVIDIA_TESLA_P4_VWS"),
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "STARTING"),
    2: .same(proto: "PROVISIONING"),
    3: .same(proto: "ACTIVE"),
    4: .same(proto: "STOPPING"),
    5: .same(proto: "STOPPED"),
    6: .same(proto: "DELETED"),
    7: .same(proto: "UPGRADING"),
    8: .same(proto: "INITIALIZING"),
    9: .same(proto: "REGISTERING"),
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.DiskType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISK_TYPE_UNSPECIFIED"),
    1: .same(proto: "PD_STANDARD"),
    2: .same(proto: "PD_SSD"),
    3: .same(proto: "PD_BALANCED"),
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.DiskEncryption: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISK_ENCRYPTION_UNSPECIFIED"),
    1: .same(proto: "GMEK"),
    2: .same(proto: "CMEK"),
  ]
}

extension Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Notebooks_V1beta1_Instance.protoMessageName + ".AcceleratorConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "core_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.coreCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.coreCount != 0 {
      try visitor.visitSingularInt64Field(value: self.coreCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorConfig, rhs: Google_Cloud_Notebooks_V1beta1_Instance.AcceleratorConfig) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.coreCount != rhs.coreCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
