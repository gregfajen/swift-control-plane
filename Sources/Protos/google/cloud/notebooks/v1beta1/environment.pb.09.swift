// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/notebooks/v1beta1/environment.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Definition of a software environment that is used to start a notebook
/// instance.
public struct Google_Cloud_Notebooks_V1beta1_Environment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of this environment.
  /// Format:
  /// `projects/{project_id}/locations/{location}/environments/{environment_id}`
  public var name: String = String()

  /// Display name of this environment for the UI.
  public var displayName: String = String()

  /// A brief description of this environment.
  public var description_p: String = String()

  /// Type of the environment; can be one of VM image, or container image.
  public var imageType: Google_Cloud_Notebooks_V1beta1_Environment.OneOf_ImageType? = nil

  /// Use a Compute Engine VM image to start the notebook instance.
  public var vmImage: Google_Cloud_Notebooks_V1beta1_VmImage {
    get {
      if case .vmImage(let v)? = imageType {return v}
      return Google_Cloud_Notebooks_V1beta1_VmImage()
    }
    set {imageType = .vmImage(newValue)}
  }

  /// Use a container image to start the notebook instance.
  public var containerImage: Google_Cloud_Notebooks_V1beta1_ContainerImage {
    get {
      if case .containerImage(let v)? = imageType {return v}
      return Google_Cloud_Notebooks_V1beta1_ContainerImage()
    }
    set {imageType = .containerImage(newValue)}
  }

  /// Path to a Bash script that automatically runs after a notebook instance
  /// fully boots up. The path must be a URL or
  /// Cloud Storage path. Example: `"gs://path-to-file/file-name"`
  public var postStartupScript: String = String()

  /// Output only. The time at which this environment was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Type of the environment; can be one of VM image, or container image.
  public enum OneOf_ImageType: Equatable {
    /// Use a Compute Engine VM image to start the notebook instance.
    case vmImage(Google_Cloud_Notebooks_V1beta1_VmImage)
    /// Use a container image to start the notebook instance.
    case containerImage(Google_Cloud_Notebooks_V1beta1_ContainerImage)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_Environment.OneOf_ImageType, rhs: Google_Cloud_Notebooks_V1beta1_Environment.OneOf_ImageType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.vmImage, .vmImage): return {
        guard case .vmImage(let l) = lhs, case .vmImage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.containerImage, .containerImage): return {
        guard case .containerImage(let l) = lhs, case .containerImage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Definition of a custom Compute Engine virtual machine image for starting a
/// notebook instance with the environment installed directly on the VM.
public struct Google_Cloud_Notebooks_V1beta1_VmImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Google Cloud project that this VM image belongs to.
  /// Format: `projects/{project_id}`
  public var project: String = String()

  /// The reference to an external Compute Engine VM image.
  public var image: Google_Cloud_Notebooks_V1beta1_VmImage.OneOf_Image? = nil

  /// Use VM image name to find the image.
  public var imageName: String {
    get {
      if case .imageName(let v)? = image {return v}
      return String()
    }
    set {image = .imageName(newValue)}
  }

  /// Use this VM image family to find the image; the newest image in this
  /// family will be used.
  public var imageFamily: String {
    get {
      if case .imageFamily(let v)? = image {return v}
      return String()
    }
    set {image = .imageFamily(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The reference to an external Compute Engine VM image.
  public enum OneOf_Image: Equatable {
    /// Use VM image name to find the image.
    case imageName(String)
    /// Use this VM image family to find the image; the newest image in this
    /// family will be used.
    case imageFamily(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_VmImage.OneOf_Image, rhs: Google_Cloud_Notebooks_V1beta1_VmImage.OneOf_Image) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.imageName, .imageName): return {
        guard case .imageName(let l) = lhs, case .imageName(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageFamily, .imageFamily): return {
        guard case .imageFamily(let l) = lhs, case .imageFamily(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Definition of a container image for starting a notebook instance with the
/// environment installed in a container.
public struct Google_Cloud_Notebooks_V1beta1_ContainerImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The path to the container image repository. For example:
  /// `gcr.io/{project_id}/{image_name}`
  public var repository: String = String()

  /// The tag of the container image. If not specified, this defaults
  /// to the latest tag.
  public var tag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.notebooks.v1beta1"

extension Google_Cloud_Notebooks_V1beta1_Environment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Environment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "description"),
    6: .standard(proto: "vm_image"),
    7: .standard(proto: "container_image"),
    8: .standard(proto: "post_startup_script"),
    9: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try {
        var v: Google_Cloud_Notebooks_V1beta1_VmImage?
        if let current = self.imageType {
          try decoder.handleConflictingOneOf()
          if case .vmImage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.imageType = .vmImage(v)}
      }()
      case 7: try {
        var v: Google_Cloud_Notebooks_V1beta1_ContainerImage?
        if let current = self.imageType {
          try decoder.handleConflictingOneOf()
          if case .containerImage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.imageType = .containerImage(v)}
      }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.postStartupScript) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.imageType {
    case .vmImage?: try {
      guard case .vmImage(let v)? = self.imageType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .containerImage?: try {
      guard case .containerImage(let v)? = self.imageType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    if !self.postStartupScript.isEmpty {
      try visitor.visitSingularStringField(value: self.postStartupScript, fieldNumber: 8)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_Environment, rhs: Google_Cloud_Notebooks_V1beta1_Environment) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.imageType != rhs.imageType {return false}
    if lhs.postStartupScript != rhs.postStartupScript {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Notebooks_V1beta1_VmImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "project"),
    2: .standard(proto: "image_name"),
    3: .standard(proto: "image_family"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.project) }()
      case 2: try {
        if self.image != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.image = .imageName(v)}
      }()
      case 3: try {
        if self.image != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.image = .imageFamily(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.project.isEmpty {
      try visitor.visitSingularStringField(value: self.project, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.image {
    case .imageName?: try {
      guard case .imageName(let v)? = self.image else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .imageFamily?: try {
      guard case .imageFamily(let v)? = self.image else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_VmImage, rhs: Google_Cloud_Notebooks_V1beta1_VmImage) -> Bool {
    if lhs.project != rhs.project {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Notebooks_V1beta1_ContainerImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContainerImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "repository"),
    2: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.repository) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.repository.isEmpty {
      try visitor.visitSingularStringField(value: self.repository, fieldNumber: 1)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Notebooks_V1beta1_ContainerImage, rhs: Google_Cloud_Notebooks_V1beta1_ContainerImage) -> Bool {
    if lhs.repository != rhs.repository {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
