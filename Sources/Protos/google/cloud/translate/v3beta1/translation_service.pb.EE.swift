// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/translate/v3beta1/translation_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configures which glossary should be used for a specific target language,
/// and defines options for applying that glossary.
public struct Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Specifies the glossary used for this translation. Use
  /// this format: projects/*/locations/*/glossaries/*
  public var glossary: String = String()

  /// Optional. Indicates match is case-insensitive.
  /// Default value is false if missing.
  public var ignoreCase: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for synchronous translation.
public struct Google_Cloud_Translation_V3beta1_TranslateTextRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The content of the input in string format.
  /// We recommend the total content be less than 30k codepoints.
  /// Use BatchTranslateText for larger text.
  public var contents: [String] = []

  /// Optional. The format of the source text, for example, "text/html",
  ///  "text/plain". If left blank, the MIME type defaults to "text/html".
  public var mimeType: String = String()

  /// Optional. The BCP-47 language code of the input text if
  /// known, for example, "en-US" or "sr-Latn". Supported language codes are
  /// listed in Language Support. If the source language isn't specified, the API
  /// attempts to identify the source language automatically and returns the
  /// source language within the response.
  public var sourceLanguageCode: String = String()

  /// Required. The BCP-47 language code to use for translation of the input
  /// text, set to one of the language codes listed in Language Support.
  public var targetLanguageCode: String = String()

  /// Required. Project or location to make a call. Must refer to a caller's
  /// project.
  ///
  /// Format: `projects/{project-id}` or
  /// `projects/{project-id}/locations/{location-id}`.
  ///
  /// For global calls, use `projects/{project-id}/locations/global` or
  /// `projects/{project-id}`.
  ///
  /// Non-global location is required for requests using AutoML models or
  /// custom glossaries.
  ///
  /// Models and glossaries must be within the same region (have same
  /// location-id), otherwise an INVALID_ARGUMENT (400) error is returned.
  public var parent: String = String()

  /// Optional. The `model` type requested for this translation.
  ///
  /// The format depends on model type:
  ///
  /// - AutoML Translation models:
  ///   `projects/{project-id}/locations/{location-id}/models/{model-id}`
  ///
  /// - General (built-in) models:
  ///   `projects/{project-id}/locations/{location-id}/models/general/nmt`,
  ///   `projects/{project-id}/locations/{location-id}/models/general/base`
  ///
  ///
  /// For global (non-regionalized) requests, use `location-id` `global`.
  /// For example,
  /// `projects/{project-id}/locations/global/models/general/nmt`.
  ///
  /// If missing, the system decides which google base model to use.
  public var model: String = String()

  /// Optional. Glossary to be applied. The glossary must be
  /// within the same region (have the same location-id) as the model, otherwise
  /// an INVALID_ARGUMENT (400) error is returned.
  public var glossaryConfig: Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig {
    get {return _glossaryConfig ?? Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig()}
    set {_glossaryConfig = newValue}
  }
  /// Returns true if `glossaryConfig` has been explicitly set.
  public var hasGlossaryConfig: Bool {return self._glossaryConfig != nil}
  /// Clears the value of `glossaryConfig`. Subsequent reads from it will return its default value.
  public mutating func clearGlossaryConfig() {self._glossaryConfig = nil}

  /// Optional. The labels with user-defined metadata for the request.
  ///
  /// Label keys and values can be no longer than 63 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label values are optional. Label keys must start with a letter.
  ///
  /// See https://cloud.google.com/translate/docs/labels for more information.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _glossaryConfig: Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig? = nil
}

public struct Google_Cloud_Translation_V3beta1_TranslateTextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Text translation responses with no glossary applied.
  /// This field has the same length as
  /// [`contents`][google.cloud.translation.v3beta1.TranslateTextRequest.contents].
  public var translations: [Google_Cloud_Translation_V3beta1_Translation] = []

  /// Text translation responses if a glossary is provided in the request.
  /// This can be the same as
  /// [`translations`][google.cloud.translation.v3beta1.TranslateTextResponse.translations] if no terms apply.
  /// This field has the same length as
  /// [`contents`][google.cloud.translation.v3beta1.TranslateTextRequest.contents].
  public var glossaryTranslations: [Google_Cloud_Translation_V3beta1_Translation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A single translation response.
public struct Google_Cloud_Translation_V3beta1_Translation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Text translated into the target language.
  public var translatedText: String = String()

  /// Only present when `model` is present in the request.
  /// This is same as `model` provided in the request.
  public var model: String = String()

  /// The BCP-47 language code of source text in the initial request, detected
  /// automatically, if no source language was passed within the initial
  /// request. If the source language was passed, auto-detection of the language
  /// does not occur and this field is empty.
  public var detectedLanguageCode: String = String()

  /// The `glossary_config` used for this translation.
  public var glossaryConfig: Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig {
    get {return _glossaryConfig ?? Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig()}
    set {_glossaryConfig = newValue}
  }
  /// Returns true if `glossaryConfig` has been explicitly set.
  public var hasGlossaryConfig: Bool {return self._glossaryConfig != nil}
  /// Clears the value of `glossaryConfig`. Subsequent reads from it will return its default value.
  public mutating func clearGlossaryConfig() {self._glossaryConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _glossaryConfig: Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig? = nil
}

/// The request message for language detection.
public struct Google_Cloud_Translation_V3beta1_DetectLanguageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project or location to make a call. Must refer to a caller's
  /// project.
  ///
  /// Format: `projects/{project-id}/locations/{location-id}` or
  /// `projects/{project-id}`.
  ///
  /// For global calls, use `projects/{project-id}/locations/global` or
  /// `projects/{project-id}`.
  ///
  /// Only models within the same region (has same location-id) can be used.
  /// Otherwise an INVALID_ARGUMENT (400) error is returned.
  public var parent: String = String()

  /// Optional. The language detection model to be used.
  ///
  /// Format:
  /// `projects/{project-id}/locations/{location-id}/models/language-detection/{model-id}`
  ///
  /// Only one language detection model is currently supported:
  /// `projects/{project-id}/locations/{location-id}/models/language-detection/default`.
  ///
  /// If not specified, the default model is used.
  public var model: String = String()

  /// Required. The source of the document from which to detect the language.
  public var source: Google_Cloud_Translation_V3beta1_DetectLanguageRequest.OneOf_Source? = nil

  /// The content of the input stored as a string.
  public var content: String {
    get {
      if case .content(let v)? = source {return v}
      return String()
    }
    set {source = .content(newValue)}
  }

  /// Optional. The format of the source text, for example, "text/html",
  /// "text/plain". If left blank, the MIME type defaults to "text/html".
  public var mimeType: String = String()

  /// Optional. The labels with user-defined metadata for the request.
  ///
  /// Label keys and values can be no longer than 63 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label values are optional. Label keys must start with a letter.
  ///
  /// See https://cloud.google.com/translate/docs/labels for more information.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The source of the document from which to detect the language.
  public enum OneOf_Source: Equatable {
    /// The content of the input stored as a string.
    case content(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Translation_V3beta1_DetectLanguageRequest.OneOf_Source, rhs: Google_Cloud_Translation_V3beta1_DetectLanguageRequest.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.content, .content): return {
        guard case .content(let l) = lhs, case .content(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// The response message for language detection.
public struct Google_Cloud_Translation_V3beta1_DetectedLanguage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The BCP-47 language code of source content in the request, detected
  /// automatically.
  public var languageCode: String = String()

  /// The confidence of the detection result for this language.
  public var confidence: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for language detection.
public struct Google_Cloud_Translation_V3beta1_DetectLanguageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of detected languages sorted by detection confidence in descending
  /// order. The most probable language first.
  public var languages: [Google_Cloud_Translation_V3beta1_DetectedLanguage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for discovering supported languages.
public struct Google_Cloud_Translation_V3beta1_GetSupportedLanguagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project or location to make a call. Must refer to a caller's
  /// project.
  ///
  /// Format: `projects/{project-id}` or
  /// `projects/{project-id}/locations/{location-id}`.
  ///
  /// For global calls, use `projects/{project-id}/locations/global` or
  /// `projects/{project-id}`.
  ///
  /// Non-global location is required for AutoML models.
  ///
  /// Only models within the same region (have same location-id) can be used,
  /// otherwise an INVALID_ARGUMENT (400) error is returned.
  public var parent: String = String()

  /// Optional. The language to use to return localized, human readable names
  /// of supported languages. If missing, then display names are not returned
  /// in a response.
  public var displayLanguageCode: String = String()

  /// Optional. Get supported languages of this model.
  ///
  /// The format depends on model type:
  ///
  /// - AutoML Translation models:
  ///   `projects/{project-id}/locations/{location-id}/models/{model-id}`
  ///
  /// - General (built-in) models:
  ///   `projects/{project-id}/locations/{location-id}/models/general/nmt`,
  ///   `projects/{project-id}/locations/{location-id}/models/general/base`
  ///
  ///
  /// Returns languages supported by the specified model.
  /// If missing, we get supported languages of Google general base (PBMT) model.
  public var model: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message for discovering supported languages.
public struct Google_Cloud_Translation_V3beta1_SupportedLanguages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of supported language responses. This list contains an entry
  /// for each language the Translation API supports.
  public var languages: [Google_Cloud_Translation_V3beta1_SupportedLanguage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A single supported language response corresponds to information related
/// to one supported language.
public struct Google_Cloud_Translation_V3beta1_SupportedLanguage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Supported language code, generally consisting of its ISO 639-1
  /// identifier, for example, 'en', 'ja'. In certain cases, BCP-47 codes
  /// including language and region identifiers are returned (for example,
  /// 'zh-TW' and 'zh-CN')
  public var languageCode: String = String()

  /// Human readable name of the language localized in the display language
  /// specified in the request.
  public var displayName: String = String()

  /// Can be used as source language.
  public var supportSource: Bool = false

  /// Can be used as target language.
  public var supportTarget: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The Google Cloud Storage location for the input content.
public struct Google_Cloud_Translation_V3beta1_GcsSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Source data URI. For example, `gs://my_bucket/my_object`.
  public var inputUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input configuration for BatchTranslateText request.
public struct Google_Cloud_Translation_V3beta1_InputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Can be "text/plain" or "text/html".
  /// For `.tsv`, "text/html" is used if mime_type is missing.
  /// For `.html`, this field must be "text/html" or empty.
  /// For `.txt`, this field must be "text/plain" or empty.
  public var mimeType: String = String()

  /// Required. Specify the input.
  public var source: Google_Cloud_Translation_V3beta1_InputConfig.OneOf_Source? = nil

  /// Required. Google Cloud Storage location for the source input.
  /// This can be a single file (for example,
  /// `gs://translation-test/input.tsv`) or a wildcard (for example,
  /// `gs://translation-test/*`). If a file extension is `.tsv`, it can
  /// contain either one or two columns. The first column (optional) is the id
  /// of the text request. If the first column is missing, we use the row
  /// number (0-based) from the input file as the ID in the output file. The
  /// second column is the actual text to be
  ///  translated. We recommend each row be <= 10K Unicode codepoints,
  /// otherwise an error might be returned.
  /// Note that the input tsv must be RFC 4180 compliant.
  ///
  /// You could use https://github.com/Clever/csvlint to check potential
  /// formatting errors in your tsv file.
  /// csvlint --delimiter='\t' your_input_file.tsv
  ///
  /// The other supported file extensions are `.txt` or `.html`, which is
  /// treated as a single large chunk of text.
  public var gcsSource: Google_Cloud_Translation_V3beta1_GcsSource {
    get {
      if case .gcsSource(let v)? = source {return v}
      return Google_Cloud_Translation_V3beta1_GcsSource()
    }
    set {source = .gcsSource(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Specify the input.
  public enum OneOf_Source: Equatable {
    /// Required. Google Cloud Storage location for the source input.
    /// This can be a single file (for example,
    /// `gs://translation-test/input.tsv`) or a wildcard (for example,
    /// `gs://translation-test/*`). If a file extension is `.tsv`, it can
    /// contain either one or two columns. The first column (optional) is the id
    /// of the text request. If the first column is missing, we use the row
    /// number (0-based) from the input file as the ID in the output file. The
    /// second column is the actual text to be
    ///  translated. We recommend each row be <= 10K Unicode codepoints,
    /// otherwise an error might be returned.
    /// Note that the input tsv must be RFC 4180 compliant.
    ///
    /// You could use https://github.com/Clever/csvlint to check potential
    /// formatting errors in your tsv file.
    /// csvlint --delimiter='\t' your_input_file.tsv
    ///
    /// The other supported file extensions are `.txt` or `.html`, which is
    /// treated as a single large chunk of text.
    case gcsSource(Google_Cloud_Translation_V3beta1_GcsSource)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Translation_V3beta1_InputConfig.OneOf_Source, rhs: Google_Cloud_Translation_V3beta1_InputConfig.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsSource, .gcsSource): return {
        guard case .gcsSource(let l) = lhs, case .gcsSource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// The Google Cloud Storage location for the output content.
public struct Google_Cloud_Translation_V3beta1_GcsDestination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. There must be no files under 'output_uri_prefix'.
  /// 'output_uri_prefix' must end with "/" and start with "gs://", otherwise an
  /// INVALID_ARGUMENT (400) error is returned.
  public var outputUriPrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Output configuration for BatchTranslateText request.
public struct Google_Cloud_Translation_V3beta1_OutputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The destination of output.
  public var destination: Google_Cloud_Translation_V3beta1_OutputConfig.OneOf_Destination? = nil

  /// Google Cloud Storage destination for output content.
  /// For every single input file (for example, gs://a/b/c.[extension]), we
  /// generate at most 2 * n output files. (n is the # of target_language_codes
  /// in the BatchTranslateTextRequest).
  ///
  /// Output files (tsv) generated are compliant with RFC 4180 except that
  /// record delimiters are '\n' instead of '\r\n'. We don't provide any way to
  /// change record delimiters.
  ///
  /// While the input files are being processed, we write/update an index file
  /// 'index.csv'  under 'output_uri_prefix' (for example,
  /// gs://translation-test/index.csv) The index file is generated/updated as
  /// new files are being translated. The format is:
  ///
  /// input_file,target_language_code,translations_file,errors_file,
  /// glossary_translations_file,glossary_errors_file
  ///
  /// input_file is one file we matched using gcs_source.input_uri.
  /// target_language_code is provided in the request.
  /// translations_file contains the translations. (details provided below)
  /// errors_file contains the errors during processing of the file. (details
  /// below). Both translations_file and errors_file could be empty
  /// strings if we have no content to output.
  /// glossary_translations_file and glossary_errors_file are always empty
  /// strings if the input_file is tsv. They could also be empty if we have no
  /// content to output.
  ///
  /// Once a row is present in index.csv, the input/output matching never
  /// changes. Callers should also expect all the content in input_file are
  /// processed and ready to be consumed (that is, no partial output file is
  /// written).
  ///
  /// The format of translations_file (for target language code 'trg') is:
  /// `gs://translation_test/a_b_c_'trg'_translations.[extension]`
  ///
  /// If the input file extension is tsv, the output has the following
  /// columns:
  /// Column 1: ID of the request provided in the input, if it's not
  /// provided in the input, then the input row number is used (0-based).
  /// Column 2: source sentence.
  /// Column 3: translation without applying a glossary. Empty string if there
  /// is an error.
  /// Column 4 (only present if a glossary is provided in the request):
  /// translation after applying the glossary. Empty string if there is an
  /// error applying the glossary. Could be same string as column 3 if there is
  /// no glossary applied.
  ///
  /// If input file extension is a txt or html, the translation is directly
  /// written to the output file. If glossary is requested, a separate
  /// glossary_translations_file has format of
  /// `gs://translation_test/a_b_c_'trg'_glossary_translations.[extension]`
  ///
  /// The format of errors file (for target language code 'trg') is:
  /// `gs://translation_test/a_b_c_'trg'_errors.[extension]`
  ///
  /// If the input file extension is tsv, errors_file contains the following:
  /// Column 1: ID of the request provided in the input, if it's not
  /// provided in the input, then the input row number is used (0-based).
  /// Column 2: source sentence.
  /// Column 3: Error detail for the translation. Could be empty.
  /// Column 4 (only present if a glossary is provided in the request):
  /// Error when applying the glossary.
  ///
  /// If the input file extension is txt or html, glossary_error_file will be
  /// generated that contains error details. glossary_error_file has format of
  /// `gs://translation_test/a_b_c_'trg'_glossary_errors.[extension]`
  public var gcsDestination: Google_Cloud_Translation_V3beta1_GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Translation_V3beta1_GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The destination of output.
  public enum OneOf_Destination: Equatable {
    /// Google Cloud Storage destination for output content.
    /// For every single input file (for example, gs://a/b/c.[extension]), we
    /// generate at most 2 * n output files. (n is the # of target_language_codes
    /// in the BatchTranslateTextRequest).
    ///
    /// Output files (tsv) generated are compliant with RFC 4180 except that
    /// record delimiters are '\n' instead of '\r\n'. We don't provide any way to
    /// change record delimiters.
    ///
    /// While the input files are being processed, we write/update an index file
    /// 'index.csv'  under 'output_uri_prefix' (for example,
    /// gs://translation-test/index.csv) The index file is generated/updated as
    /// new files are being translated. The format is:
    ///
    /// input_file,target_language_code,translations_file,errors_file,
    /// glossary_translations_file,glossary_errors_file
    ///
    /// input_file is one file we matched using gcs_source.input_uri.
    /// target_language_code is provided in the request.
    /// translations_file contains the translations. (details provided below)
    /// errors_file contains the errors during processing of the file. (details
    /// below). Both translations_file and errors_file could be empty
    /// strings if we have no content to output.
    /// glossary_translations_file and glossary_errors_file are always empty
    /// strings if the input_file is tsv. They could also be empty if we have no
    /// content to output.
    ///
    /// Once a row is present in index.csv, the input/output matching never
    /// changes. Callers should also expect all the content in input_file are
    /// processed and ready to be consumed (that is, no partial output file is
    /// written).
    ///
    /// The format of translations_file (for target language code 'trg') is:
    /// `gs://translation_test/a_b_c_'trg'_translations.[extension]`
    ///
    /// If the input file extension is tsv, the output has the following
    /// columns:
    /// Column 1: ID of the request provided in the input, if it's not
    /// provided in the input, then the input row number is used (0-based).
    /// Column 2: source sentence.
    /// Column 3: translation without applying a glossary. Empty string if there
    /// is an error.
    /// Column 4 (only present if a glossary is provided in the request):
    /// translation after applying the glossary. Empty string if there is an
    /// error applying the glossary. Could be same string as column 3 if there is
    /// no glossary applied.
    ///
    /// If input file extension is a txt or html, the translation is directly
    /// written to the output file. If glossary is requested, a separate
    /// glossary_translations_file has format of
    /// `gs://translation_test/a_b_c_'trg'_glossary_translations.[extension]`
    ///
    /// The format of errors file (for target language code 'trg') is:
    /// `gs://translation_test/a_b_c_'trg'_errors.[extension]`
    ///
    /// If the input file extension is tsv, errors_file contains the following:
    /// Column 1: ID of the request provided in the input, if it's not
    /// provided in the input, then the input row number is used (0-based).
    /// Column 2: source sentence.
    /// Column 3: Error detail for the translation. Could be empty.
    /// Column 4 (only present if a glossary is provided in the request):
    /// Error when applying the glossary.
    ///
    /// If the input file extension is txt or html, glossary_error_file will be
    /// generated that contains error details. glossary_error_file has format of
    /// `gs://translation_test/a_b_c_'trg'_glossary_errors.[extension]`
    case gcsDestination(Google_Cloud_Translation_V3beta1_GcsDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Translation_V3beta1_OutputConfig.OneOf_Destination, rhs: Google_Cloud_Translation_V3beta1_OutputConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// The batch translation request.
public struct Google_Cloud_Translation_V3beta1_BatchTranslateTextRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Location to make a call. Must refer to a caller's project.
  ///
  /// Format: `projects/{project-id}/locations/{location-id}`.
  ///
  /// The `global` location is not supported for batch translation.
  ///
  /// Only AutoML Translation models or glossaries within the same region (have
  /// the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)
  /// error is returned.
  public var parent: String = String()

  /// Required. Source language code.
  public var sourceLanguageCode: String = String()

  /// Required. Specify up to 10 language codes here.
  public var targetLanguageCodes: [String] = []

  /// Optional. The models to use for translation. Map's key is target language
  /// code. Map's value is model name. Value can be a built-in general model,
  /// or an AutoML Translation model.
  ///
  /// The value format depends on model type:
  ///
  /// - AutoML Translation models:
  ///   `projects/{project-id}/locations/{location-id}/models/{model-id}`
  ///
  /// - General (built-in) models:
  ///   `projects/{project-id}/locations/{location-id}/models/general/nmt`,
  ///   `projects/{project-id}/locations/{location-id}/models/general/base`
  ///
  ///
  /// If the map is empty or a specific model is
  /// not requested for a language pair, then default google model (nmt) is used.
  public var models: Dictionary<String,String> = [:]

  /// Required. Input configurations.
  /// The total number of files matched should be <= 1000.
  /// The total content size should be <= 100M Unicode codepoints.
  /// The files must use UTF-8 encoding.
  public var inputConfigs: [Google_Cloud_Translation_V3beta1_InputConfig] = []

  /// Required. Output configuration.
  /// If 2 input configs match to the same file (that is, same input path),
  /// we don't generate output for duplicate inputs.
  public var outputConfig: Google_Cloud_Translation_V3beta1_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Translation_V3beta1_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  /// Optional. Glossaries to be applied for translation.
  /// It's keyed by target language code.
  public var glossaries: Dictionary<String,Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig> = [:]

  /// Optional. The labels with user-defined metadata for the request.
  ///
  /// Label keys and values can be no longer than 63 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label values are optional. Label keys must start with a letter.
  ///
  /// See https://cloud.google.com/translate/docs/labels for more information.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _outputConfig: Google_Cloud_Translation_V3beta1_OutputConfig? = nil
}

/// State metadata for the batch translation operation.
public struct Google_Cloud_Translation_V3beta1_BatchTranslateMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The state of the operation.
  public var state: Google_Cloud_Translation_V3beta1_BatchTranslateMetadata.State = .unspecified

  /// Number of successfully translated characters so far (Unicode codepoints).
  public var translatedCharacters: Int64 = 0

  /// Number of characters that have failed to process so far (Unicode
  /// codepoints).
  public var failedCharacters: Int64 = 0

  /// Total number of characters (Unicode codepoints).
  /// This is the total number of codepoints from input files times the number of
  /// target languages and appears here shortly after the call is submitted.
  public var totalCharacters: Int64 = 0

  /// Time when the operation was submitted.
  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {self._submitTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// State of the job.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid.
    case unspecified // = 0

    /// Request is being processed.
    case running // = 1

    /// The batch is processed, and at least one item was successfully
    /// processed.
    case succeeded // = 2

    /// The batch is done and no item was successfully processed.
    case failed // = 3

    /// Request is in the process of being canceled after caller invoked
    /// longrunning.Operations.CancelOperation on the request id.
    case cancelling // = 4

    /// The batch is done after the user has called the
    /// longrunning.Operations.CancelOperation. Any records processed before the
    /// cancel command are output as specified in the request.
    case cancelled // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .running
      case 2: self = .succeeded
      case 3: self = .failed
      case 4: self = .cancelling
      case 5: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .running: return 1
      case .succeeded: return 2
      case .failed: return 3
      case .cancelling: return 4
      case .cancelled: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Translation_V3beta1_BatchTranslateMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Translation_V3beta1_BatchTranslateMetadata.State] = [
    .unspecified,
    .running,
    .succeeded,
    .failed,
    .cancelling,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

/// Stored in the [google.longrunning.Operation.response][google.longrunning.Operation.response] field returned by
/// BatchTranslateText if at least one sentence is translated successfully.
public struct Google_Cloud_Translation_V3beta1_BatchTranslateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total number of characters (Unicode codepoints).
  public var totalCharacters: Int64 = 0

  /// Number of successfully translated characters (Unicode codepoints).
  public var translatedCharacters: Int64 = 0

  /// Number of characters that have failed to process (Unicode codepoints).
  public var failedCharacters: Int64 = 0

  /// Time when the operation was submitted.
  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {self._submitTime = nil}

  /// The time when the operation is finished and
  /// [google.longrunning.Operation.done][google.longrunning.Operation.done] is set to true.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Input configuration for glossaries.
public struct Google_Cloud_Translation_V3beta1_GlossaryInputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Specify the input.
  public var source: Google_Cloud_Translation_V3beta1_GlossaryInputConfig.OneOf_Source? = nil

  /// Required. Google Cloud Storage location of glossary data.
  /// File format is determined based on the filename extension. API returns
  /// [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file
  /// formats. Wildcards are not allowed. This must be a single file in one of
  /// the following formats:
  ///
  /// For unidirectional glossaries:
  ///
  /// - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated.
  ///   The first column is source text. The second column is target text.
  ///   The file must not contain headers. That is, the first row is data, not
  ///   column names.
  ///
  /// - TMX (`.tmx`): TMX file with parallel data defining source/target term
  /// pairs.
  ///
  /// For equivalent term sets glossaries:
  ///
  /// - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms
  ///   in multiple languages. The format is defined for Google Translation
  ///   Toolkit and documented in [Use a
  ///   glossary](https://support.google.com/translatortoolkit/answer/6306379?hl=en).
  public var gcsSource: Google_Cloud_Translation_V3beta1_GcsSource {
    get {
      if case .gcsSource(let v)? = source {return v}
      return Google_Cloud_Translation_V3beta1_GcsSource()
    }
    set {source = .gcsSource(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Specify the input.
  public enum OneOf_Source: Equatable {
    /// Required. Google Cloud Storage location of glossary data.
    /// File format is determined based on the filename extension. API returns
    /// [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file
    /// formats. Wildcards are not allowed. This must be a single file in one of
    /// the following formats:
    ///
    /// For unidirectional glossaries:
    ///
    /// - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated.
    ///   The first column is source text. The second column is target text.
    ///   The file must not contain headers. That is, the first row is data, not
    ///   column names.
    ///
    /// - TMX (`.tmx`): TMX file with parallel data defining source/target term
    /// pairs.
    ///
    /// For equivalent term sets glossaries:
    ///
    /// - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms
    ///   in multiple languages. The format is defined for Google Translation
    ///   Toolkit and documented in [Use a
    ///   glossary](https://support.google.com/translatortoolkit/answer/6306379?hl=en).
    case gcsSource(Google_Cloud_Translation_V3beta1_GcsSource)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Translation_V3beta1_GlossaryInputConfig.OneOf_Source, rhs: Google_Cloud_Translation_V3beta1_GlossaryInputConfig.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsSource, .gcsSource): return {
        guard case .gcsSource(let l) = lhs, case .gcsSource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Represents a glossary built from user provided data.
public struct Google_Cloud_Translation_V3beta1_Glossary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the glossary. Glossary names have the form
  /// `projects/{project-id}/locations/{location-id}/glossaries/{glossary-id}`.
  public var name: String = String()

  /// Languages supported by the glossary.
  public var languages: Google_Cloud_Translation_V3beta1_Glossary.OneOf_Languages? = nil

  /// Used with unidirectional glossaries.
  public var languagePair: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair {
    get {
      if case .languagePair(let v)? = languages {return v}
      return Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair()
    }
    set {languages = .languagePair(newValue)}
  }

  /// Used with equivalent term set glossaries.
  public var languageCodesSet: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet {
    get {
      if case .languageCodesSet(let v)? = languages {return v}
      return Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet()
    }
    set {languages = .languageCodesSet(newValue)}
  }

  /// Required. Provides examples to build the glossary from.
  /// Total glossary must not exceed 10M Unicode codepoints.
  public var inputConfig: Google_Cloud_Translation_V3beta1_GlossaryInputConfig {
    get {return _inputConfig ?? Google_Cloud_Translation_V3beta1_GlossaryInputConfig()}
    set {_inputConfig = newValue}
  }
  /// Returns true if `inputConfig` has been explicitly set.
  public var hasInputConfig: Bool {return self._inputConfig != nil}
  /// Clears the value of `inputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearInputConfig() {self._inputConfig = nil}

  /// Output only. The number of entries defined in the glossary.
  public var entryCount: Int32 = 0

  /// Output only. When CreateGlossary was called.
  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {self._submitTime = nil}

  /// Output only. When the glossary creation was finished.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Languages supported by the glossary.
  public enum OneOf_Languages: Equatable {
    /// Used with unidirectional glossaries.
    case languagePair(Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair)
    /// Used with equivalent term set glossaries.
    case languageCodesSet(Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Translation_V3beta1_Glossary.OneOf_Languages, rhs: Google_Cloud_Translation_V3beta1_Glossary.OneOf_Languages) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.languagePair, .languagePair): return {
        guard case .languagePair(let l) = lhs, case .languagePair(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.languageCodesSet, .languageCodesSet): return {
        guard case .languageCodesSet(let l) = lhs, case .languageCodesSet(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Used with unidirectional glossaries.
  public struct LanguageCodePair {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The BCP-47 language code of the input text, for example,
    /// "en-US". Expected to be an exact match for GlossaryTerm.language_code.
    public var sourceLanguageCode: String = String()

    /// Required. The BCP-47 language code for translation output, for example,
    /// "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
    public var targetLanguageCode: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Used with equivalent term set glossaries.
  public struct LanguageCodesSet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The BCP-47 language code(s) for terms defined in the glossary.
    /// All entries are unique. The list contains at least two entries.
    /// Expected to be an exact match for GlossaryTerm.language_code.
    public var languageCodes: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _inputConfig: Google_Cloud_Translation_V3beta1_GlossaryInputConfig? = nil
  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request message for CreateGlossary.
public struct Google_Cloud_Translation_V3beta1_CreateGlossaryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project name.
  public var parent: String = String()

  /// Required. The glossary to create.
  public var glossary: Google_Cloud_Translation_V3beta1_Glossary {
    get {return _glossary ?? Google_Cloud_Translation_V3beta1_Glossary()}
    set {_glossary = newValue}
  }
  /// Returns true if `glossary` has been explicitly set.
  public var hasGlossary: Bool {return self._glossary != nil}
  /// Clears the value of `glossary`. Subsequent reads from it will return its default value.
  public mutating func clearGlossary() {self._glossary = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _glossary: Google_Cloud_Translation_V3beta1_Glossary? = nil
}

/// Request message for GetGlossary.
public struct Google_Cloud_Translation_V3beta1_GetGlossaryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the glossary to retrieve.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for DeleteGlossary.
public struct Google_Cloud_Translation_V3beta1_DeleteGlossaryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the glossary to delete.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for ListGlossaries.
public struct Google_Cloud_Translation_V3beta1_ListGlossariesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the project from which to list all of the glossaries.
  public var parent: String = String()

  /// Optional. Requested page size. The server may return fewer glossaries than
  /// requested. If unspecified, the server picks an appropriate default.
  public var pageSize: Int32 = 0

  /// Optional. A token identifying a page of results the server should return.
  /// Typically, this is the value of [ListGlossariesResponse.next_page_token]
  /// returned from the previous call to `ListGlossaries` method.
  /// The first page is returned if `page_token`is empty or missing.
  public var pageToken: String = String()

  /// Optional. Filter specifying constraints of a list operation.
  /// Filtering is not supported yet, and the parameter currently has no effect.
  /// If missing, no filtering is performed.
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for ListGlossaries.
public struct Google_Cloud_Translation_V3beta1_ListGlossariesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of glossaries for a project.
  public var glossaries: [Google_Cloud_Translation_V3beta1_Glossary] = []

  /// A token to retrieve a page of results. Pass this value in the
  /// [ListGlossariesRequest.page_token] field in the subsequent call to
  /// `ListGlossaries` method to retrieve the next page of results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Stored in the [google.longrunning.Operation.metadata][google.longrunning.Operation.metadata] field returned by
/// CreateGlossary.
public struct Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the glossary that is being created.
  public var name: String = String()

  /// The current state of the glossary creation operation.
  public var state: Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata.State = .unspecified

  /// The time when the operation was submitted to the server.
  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {self._submitTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enumerates the possible states that the creation request can be in.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid.
    case unspecified // = 0

    /// Request is being processed.
    case running // = 1

    /// The glossary was successfully created.
    case succeeded // = 2

    /// Failed to create the glossary.
    case failed // = 3

    /// Request is in the process of being canceled after caller invoked
    /// longrunning.Operations.CancelOperation on the request id.
    case cancelling // = 4

    /// The glossary creation request was successfully canceled.
    case cancelled // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .running
      case 2: self = .succeeded
      case 3: self = .failed
      case 4: self = .cancelling
      case 5: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .running: return 1
      case .succeeded: return 2
      case .failed: return 3
      case .cancelling: return 4
      case .cancelled: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata.State] = [
    .unspecified,
    .running,
    .succeeded,
    .failed,
    .cancelling,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

/// Stored in the [google.longrunning.Operation.metadata][google.longrunning.Operation.metadata] field returned by
/// DeleteGlossary.
public struct Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the glossary that is being deleted.
  public var name: String = String()

  /// The current state of the glossary deletion operation.
  public var state: Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata.State = .unspecified

  /// The time when the operation was submitted to the server.
  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {self._submitTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enumerates the possible states that the creation request can be in.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid.
    case unspecified // = 0

    /// Request is being processed.
    case running // = 1

    /// The glossary was successfully deleted.
    case succeeded // = 2

    /// Failed to delete the glossary.
    case failed // = 3

    /// Request is in the process of being canceled after caller invoked
    /// longrunning.Operations.CancelOperation on the request id.
    case cancelling // = 4

    /// The glossary deletion request was successfully canceled.
    case cancelled // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .running
      case 2: self = .succeeded
      case 3: self = .failed
      case 4: self = .cancelling
      case 5: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .running: return 1
      case .succeeded: return 2
      case .failed: return 3
      case .cancelling: return 4
      case .cancelled: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata.State] = [
    .unspecified,
    .running,
    .succeeded,
    .failed,
    .cancelling,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

/// Stored in the [google.longrunning.Operation.response][google.longrunning.Operation.response] field returned by
/// DeleteGlossary.
public struct Google_Cloud_Translation_V3beta1_DeleteGlossaryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the deleted glossary.
  public var name: String = String()

  /// The time when the operation was submitted to the server.
  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {self._submitTime = nil}

  /// The time when the glossary deletion is finished and
  /// [google.longrunning.Operation.done][google.longrunning.Operation.done] is set to true.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.translation.v3beta1"

extension Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranslateTextGlossaryConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "glossary"),
    2: .standard(proto: "ignore_case"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.glossary) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.ignoreCase) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.glossary.isEmpty {
      try visitor.visitSingularStringField(value: self.glossary, fieldNumber: 1)
    }
    if self.ignoreCase != false {
      try visitor.visitSingularBoolField(value: self.ignoreCase, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig, rhs: Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig) -> Bool {
    if lhs.glossary != rhs.glossary {return false}
    if lhs.ignoreCase != rhs.ignoreCase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_TranslateTextRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranslateTextRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contents"),
    3: .standard(proto: "mime_type"),
    4: .standard(proto: "source_language_code"),
    5: .standard(proto: "target_language_code"),
    8: .same(proto: "parent"),
    6: .same(proto: "model"),
    7: .standard(proto: "glossary_config"),
    10: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.contents) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sourceLanguageCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.targetLanguageCode) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._glossaryConfig) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 10: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contents.isEmpty {
      try visitor.visitRepeatedStringField(value: self.contents, fieldNumber: 1)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 3)
    }
    if !self.sourceLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceLanguageCode, fieldNumber: 4)
    }
    if !self.targetLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.targetLanguageCode, fieldNumber: 5)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 6)
    }
    if let v = self._glossaryConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 8)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_TranslateTextRequest, rhs: Google_Cloud_Translation_V3beta1_TranslateTextRequest) -> Bool {
    if lhs.contents != rhs.contents {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.sourceLanguageCode != rhs.sourceLanguageCode {return false}
    if lhs.targetLanguageCode != rhs.targetLanguageCode {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs.model != rhs.model {return false}
    if lhs._glossaryConfig != rhs._glossaryConfig {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_TranslateTextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranslateTextResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "translations"),
    3: .standard(proto: "glossary_translations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.translations) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.glossaryTranslations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.translations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.translations, fieldNumber: 1)
    }
    if !self.glossaryTranslations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.glossaryTranslations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_TranslateTextResponse, rhs: Google_Cloud_Translation_V3beta1_TranslateTextResponse) -> Bool {
    if lhs.translations != rhs.translations {return false}
    if lhs.glossaryTranslations != rhs.glossaryTranslations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_Translation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Translation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "translated_text"),
    2: .same(proto: "model"),
    4: .standard(proto: "detected_language_code"),
    3: .standard(proto: "glossary_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.translatedText) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._glossaryConfig) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.detectedLanguageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.translatedText.isEmpty {
      try visitor.visitSingularStringField(value: self.translatedText, fieldNumber: 1)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 2)
    }
    if let v = self._glossaryConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.detectedLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.detectedLanguageCode, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_Translation, rhs: Google_Cloud_Translation_V3beta1_Translation) -> Bool {
    if lhs.translatedText != rhs.translatedText {return false}
    if lhs.model != rhs.model {return false}
    if lhs.detectedLanguageCode != rhs.detectedLanguageCode {return false}
    if lhs._glossaryConfig != rhs._glossaryConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_DetectLanguageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetectLanguageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "parent"),
    4: .same(proto: "model"),
    1: .same(proto: "content"),
    3: .standard(proto: "mime_type"),
    6: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.source = .content(v)}
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .content(let v)? = self.source {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 3)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 4)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 5)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_DetectLanguageRequest, rhs: Google_Cloud_Translation_V3beta1_DetectLanguageRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.model != rhs.model {return false}
    if lhs.source != rhs.source {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_DetectedLanguage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetectedLanguage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_code"),
    2: .same(proto: "confidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidence) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_DetectedLanguage, rhs: Google_Cloud_Translation_V3beta1_DetectedLanguage) -> Bool {
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_DetectLanguageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetectLanguageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.languages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.languages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_DetectLanguageResponse, rhs: Google_Cloud_Translation_V3beta1_DetectLanguageResponse) -> Bool {
    if lhs.languages != rhs.languages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_GetSupportedLanguagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSupportedLanguagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "parent"),
    1: .standard(proto: "display_language_code"),
    2: .same(proto: "model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayLanguageCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.displayLanguageCode, fieldNumber: 1)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 2)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_GetSupportedLanguagesRequest, rhs: Google_Cloud_Translation_V3beta1_GetSupportedLanguagesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.displayLanguageCode != rhs.displayLanguageCode {return false}
    if lhs.model != rhs.model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_SupportedLanguages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SupportedLanguages"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.languages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.languages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_SupportedLanguages, rhs: Google_Cloud_Translation_V3beta1_SupportedLanguages) -> Bool {
    if lhs.languages != rhs.languages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_SupportedLanguage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SupportedLanguage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_code"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "support_source"),
    4: .standard(proto: "support_target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.supportSource) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.supportTarget) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if self.supportSource != false {
      try visitor.visitSingularBoolField(value: self.supportSource, fieldNumber: 3)
    }
    if self.supportTarget != false {
      try visitor.visitSingularBoolField(value: self.supportTarget, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_SupportedLanguage, rhs: Google_Cloud_Translation_V3beta1_SupportedLanguage) -> Bool {
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.supportSource != rhs.supportSource {return false}
    if lhs.supportTarget != rhs.supportTarget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_GcsSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inputUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputUri.isEmpty {
      try visitor.visitSingularStringField(value: self.inputUri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_GcsSource, rhs: Google_Cloud_Translation_V3beta1_GcsSource) -> Bool {
    if lhs.inputUri != rhs.inputUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_InputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mime_type"),
    2: .standard(proto: "gcs_source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 2: try {
        var v: Google_Cloud_Translation_V3beta1_GcsSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .gcsSource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .gcsSource(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 1)
    }
    if case .gcsSource(let v)? = self.source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_InputConfig, rhs: Google_Cloud_Translation_V3beta1_InputConfig) -> Bool {
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_GcsDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_uri_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.outputUriPrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputUriPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.outputUriPrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_GcsDestination, rhs: Google_Cloud_Translation_V3beta1_GcsDestination) -> Bool {
    if lhs.outputUriPrefix != rhs.outputUriPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_OutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Translation_V3beta1_GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsDestination(let v)? = self.destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_OutputConfig, rhs: Google_Cloud_Translation_V3beta1_OutputConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_BatchTranslateTextRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchTranslateTextRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "source_language_code"),
    3: .standard(proto: "target_language_codes"),
    4: .same(proto: "models"),
    5: .standard(proto: "input_configs"),
    6: .standard(proto: "output_config"),
    7: .same(proto: "glossaries"),
    9: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceLanguageCode) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.targetLanguageCodes) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.models) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.inputConfigs) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig>.self, value: &self.glossaries) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.sourceLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceLanguageCode, fieldNumber: 2)
    }
    if !self.targetLanguageCodes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.targetLanguageCodes, fieldNumber: 3)
    }
    if !self.models.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.models, fieldNumber: 4)
    }
    if !self.inputConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputConfigs, fieldNumber: 5)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.glossaries.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Translation_V3beta1_TranslateTextGlossaryConfig>.self, value: self.glossaries, fieldNumber: 7)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_BatchTranslateTextRequest, rhs: Google_Cloud_Translation_V3beta1_BatchTranslateTextRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.sourceLanguageCode != rhs.sourceLanguageCode {return false}
    if lhs.targetLanguageCodes != rhs.targetLanguageCodes {return false}
    if lhs.models != rhs.models {return false}
    if lhs.inputConfigs != rhs.inputConfigs {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.glossaries != rhs.glossaries {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_BatchTranslateMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchTranslateMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "translated_characters"),
    3: .standard(proto: "failed_characters"),
    4: .standard(proto: "total_characters"),
    5: .standard(proto: "submit_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.translatedCharacters) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.failedCharacters) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalCharacters) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._submitTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if self.translatedCharacters != 0 {
      try visitor.visitSingularInt64Field(value: self.translatedCharacters, fieldNumber: 2)
    }
    if self.failedCharacters != 0 {
      try visitor.visitSingularInt64Field(value: self.failedCharacters, fieldNumber: 3)
    }
    if self.totalCharacters != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCharacters, fieldNumber: 4)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_BatchTranslateMetadata, rhs: Google_Cloud_Translation_V3beta1_BatchTranslateMetadata) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.translatedCharacters != rhs.translatedCharacters {return false}
    if lhs.failedCharacters != rhs.failedCharacters {return false}
    if lhs.totalCharacters != rhs.totalCharacters {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_BatchTranslateMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "RUNNING"),
    2: .same(proto: "SUCCEEDED"),
    3: .same(proto: "FAILED"),
    4: .same(proto: "CANCELLING"),
    5: .same(proto: "CANCELLED"),
  ]
}

extension Google_Cloud_Translation_V3beta1_BatchTranslateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchTranslateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_characters"),
    2: .standard(proto: "translated_characters"),
    3: .standard(proto: "failed_characters"),
    4: .standard(proto: "submit_time"),
    5: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.totalCharacters) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.translatedCharacters) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.failedCharacters) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._submitTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalCharacters != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCharacters, fieldNumber: 1)
    }
    if self.translatedCharacters != 0 {
      try visitor.visitSingularInt64Field(value: self.translatedCharacters, fieldNumber: 2)
    }
    if self.failedCharacters != 0 {
      try visitor.visitSingularInt64Field(value: self.failedCharacters, fieldNumber: 3)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_BatchTranslateResponse, rhs: Google_Cloud_Translation_V3beta1_BatchTranslateResponse) -> Bool {
    if lhs.totalCharacters != rhs.totalCharacters {return false}
    if lhs.translatedCharacters != rhs.translatedCharacters {return false}
    if lhs.failedCharacters != rhs.failedCharacters {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_GlossaryInputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GlossaryInputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Translation_V3beta1_GcsSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .gcsSource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .gcsSource(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsSource(let v)? = self.source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_GlossaryInputConfig, rhs: Google_Cloud_Translation_V3beta1_GlossaryInputConfig) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_Glossary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Glossary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "language_pair"),
    4: .standard(proto: "language_codes_set"),
    5: .standard(proto: "input_config"),
    6: .standard(proto: "entry_count"),
    7: .standard(proto: "submit_time"),
    8: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try {
        var v: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair?
        if let current = self.languages {
          try decoder.handleConflictingOneOf()
          if case .languagePair(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.languages = .languagePair(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet?
        if let current = self.languages {
          try decoder.handleConflictingOneOf()
          if case .languageCodesSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.languages = .languageCodesSet(v)}
      }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._inputConfig) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.entryCount) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._submitTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.languages {
    case .languagePair?: try {
      guard case .languagePair(let v)? = self.languages else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .languageCodesSet?: try {
      guard case .languageCodesSet(let v)? = self.languages else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if let v = self._inputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.entryCount != 0 {
      try visitor.visitSingularInt32Field(value: self.entryCount, fieldNumber: 6)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_Glossary, rhs: Google_Cloud_Translation_V3beta1_Glossary) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.languages != rhs.languages {return false}
    if lhs._inputConfig != rhs._inputConfig {return false}
    if lhs.entryCount != rhs.entryCount {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Translation_V3beta1_Glossary.protoMessageName + ".LanguageCodePair"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_language_code"),
    2: .standard(proto: "target_language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourceLanguageCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.targetLanguageCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceLanguageCode, fieldNumber: 1)
    }
    if !self.targetLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.targetLanguageCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair, rhs: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodePair) -> Bool {
    if lhs.sourceLanguageCode != rhs.sourceLanguageCode {return false}
    if lhs.targetLanguageCode != rhs.targetLanguageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Translation_V3beta1_Glossary.protoMessageName + ".LanguageCodesSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_codes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.languageCodes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageCodes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.languageCodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet, rhs: Google_Cloud_Translation_V3beta1_Glossary.LanguageCodesSet) -> Bool {
    if lhs.languageCodes != rhs.languageCodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_CreateGlossaryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGlossaryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "glossary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._glossary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._glossary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_CreateGlossaryRequest, rhs: Google_Cloud_Translation_V3beta1_CreateGlossaryRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._glossary != rhs._glossary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_GetGlossaryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGlossaryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_GetGlossaryRequest, rhs: Google_Cloud_Translation_V3beta1_GetGlossaryRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_DeleteGlossaryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteGlossaryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_DeleteGlossaryRequest, rhs: Google_Cloud_Translation_V3beta1_DeleteGlossaryRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_ListGlossariesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGlossariesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_ListGlossariesRequest, rhs: Google_Cloud_Translation_V3beta1_ListGlossariesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_ListGlossariesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGlossariesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "glossaries"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.glossaries) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.glossaries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.glossaries, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_ListGlossariesResponse, rhs: Google_Cloud_Translation_V3beta1_ListGlossariesResponse) -> Bool {
    if lhs.glossaries != rhs.glossaries {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGlossaryMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "state"),
    3: .standard(proto: "submit_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._submitTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata, rhs: Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.state != rhs.state {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_CreateGlossaryMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "RUNNING"),
    2: .same(proto: "SUCCEEDED"),
    3: .same(proto: "FAILED"),
    4: .same(proto: "CANCELLING"),
    5: .same(proto: "CANCELLED"),
  ]
}

extension Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteGlossaryMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "state"),
    3: .standard(proto: "submit_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._submitTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata, rhs: Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.state != rhs.state {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3beta1_DeleteGlossaryMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "RUNNING"),
    2: .same(proto: "SUCCEEDED"),
    3: .same(proto: "FAILED"),
    4: .same(proto: "CANCELLING"),
    5: .same(proto: "CANCELLED"),
  ]
}

extension Google_Cloud_Translation_V3beta1_DeleteGlossaryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteGlossaryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "submit_time"),
    3: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._submitTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Translation_V3beta1_DeleteGlossaryResponse, rhs: Google_Cloud_Translation_V3beta1_DeleteGlossaryResponse) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
