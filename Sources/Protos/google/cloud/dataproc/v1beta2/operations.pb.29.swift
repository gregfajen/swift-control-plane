// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/dataproc/v1beta2/operations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The status of the operation.
public struct Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. A message containing the operation state.
  public var state: Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus.State = .unknown

  /// Output only. A message containing the detailed operation state.
  public var innerState: String = String()

  /// Output only. A message containing any operation metadata details.
  public var details: String = String()

  /// Output only. The time this state was entered.
  public var stateStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _stateStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_stateStartTime = newValue}
  }
  /// Returns true if `stateStartTime` has been explicitly set.
  public var hasStateStartTime: Bool {return self._stateStartTime != nil}
  /// Clears the value of `stateStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearStateStartTime() {self._stateStartTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The operation state.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unused.
    case unknown // = 0

    /// The operation has been created.
    case pending // = 1

    /// The operation is running.
    case running // = 2

    /// The operation is done; either cancelled or completed.
    case done // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .pending
      case 2: self = .running
      case 3: self = .done
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .pending: return 1
      case .running: return 2
      case .done: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _stateStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus.State] = [
    .unknown,
    .pending,
    .running,
    .done,
  ]
}

#endif  // swift(>=4.2)

/// Metadata describing the operation.
public struct Google_Cloud_Dataproc_V1beta2_ClusterOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of the cluster for the operation.
  public var clusterName: String = String()

  /// Output only. Cluster UUID for the operation.
  public var clusterUuid: String = String()

  /// Output only. Current operation status.
  public var status: Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus {
    get {return _status ?? Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// Output only. The previous operation status.
  public var statusHistory: [Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus] = []

  /// Output only. The operation type.
  public var operationType: String = String()

  /// Output only. Short description of operation.
  public var description_p: String = String()

  /// Output only. Labels associated with the operation
  public var labels: Dictionary<String,String> = [:]

  /// Output only. Errors encountered during operation execution.
  public var warnings: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.dataproc.v1beta2"

extension Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClusterOperationStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "inner_state"),
    3: .same(proto: "details"),
    4: .standard(proto: "state_start_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.innerState) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.details) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._stateStartTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.innerState.isEmpty {
      try visitor.visitSingularStringField(value: self.innerState, fieldNumber: 2)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 3)
    }
    if let v = self._stateStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus, rhs: Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.innerState != rhs.innerState {return false}
    if lhs.details != rhs.details {return false}
    if lhs._stateStartTime != rhs._stateStartTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Dataproc_V1beta2_ClusterOperationStatus.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "PENDING"),
    2: .same(proto: "RUNNING"),
    3: .same(proto: "DONE"),
  ]
}

extension Google_Cloud_Dataproc_V1beta2_ClusterOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClusterOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "cluster_name"),
    8: .standard(proto: "cluster_uuid"),
    9: .same(proto: "status"),
    10: .standard(proto: "status_history"),
    11: .standard(proto: "operation_type"),
    12: .same(proto: "description"),
    13: .same(proto: "labels"),
    14: .same(proto: "warnings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 7: try { try decoder.decodeSingularStringField(value: &self.clusterName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.clusterUuid) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.statusHistory) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.operationType) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 14: try { try decoder.decodeRepeatedStringField(value: &self.warnings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusterName.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterName, fieldNumber: 7)
    }
    if !self.clusterUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterUuid, fieldNumber: 8)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if !self.statusHistory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statusHistory, fieldNumber: 10)
    }
    if !self.operationType.isEmpty {
      try visitor.visitSingularStringField(value: self.operationType, fieldNumber: 11)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 12)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 13)
    }
    if !self.warnings.isEmpty {
      try visitor.visitRepeatedStringField(value: self.warnings, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Dataproc_V1beta2_ClusterOperationMetadata, rhs: Google_Cloud_Dataproc_V1beta2_ClusterOperationMetadata) -> Bool {
    if lhs.clusterName != rhs.clusterName {return false}
    if lhs.clusterUuid != rhs.clusterUuid {return false}
    if lhs._status != rhs._status {return false}
    if lhs.statusHistory != rhs.statusHistory {return false}
    if lhs.operationType != rhs.operationType {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.warnings != rhs.warnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
