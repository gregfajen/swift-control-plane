//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/workflows/v1beta/workflows.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Workflows_V1beta_WorkflowsClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Workflows_V1beta_WorkflowsClientProtocol: GRPCClient {
  func listWorkflows(
    _ request: Google_Cloud_Workflows_V1beta_ListWorkflowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_ListWorkflowsRequest, Google_Cloud_Workflows_V1beta_ListWorkflowsResponse>

  func getWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_GetWorkflowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_GetWorkflowRequest, Google_Cloud_Workflows_V1beta_Workflow>

  func createWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_CreateWorkflowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_CreateWorkflowRequest, Google_Longrunning_Operation>

  func deleteWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_DeleteWorkflowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_DeleteWorkflowRequest, Google_Longrunning_Operation>

  func updateWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_UpdateWorkflowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_UpdateWorkflowRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Workflows_V1beta_WorkflowsClientProtocol {

  /// Lists Workflows in a given project and location.
  /// The default order is not specified.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWorkflows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listWorkflows(
    _ request: Google_Cloud_Workflows_V1beta_ListWorkflowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_ListWorkflowsRequest, Google_Cloud_Workflows_V1beta_ListWorkflowsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.workflows.v1beta.Workflows/ListWorkflows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets details of a single Workflow.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_GetWorkflowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_GetWorkflowRequest, Google_Cloud_Workflows_V1beta_Workflow> {
    return self.makeUnaryCall(
      path: "/google.cloud.workflows.v1beta.Workflows/GetWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new workflow. If a workflow with the specified name already
  /// exists in the specified project and location, the long running operation
  /// will return [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_CreateWorkflowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_CreateWorkflowRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.workflows.v1beta.Workflows/CreateWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a workflow with the specified name.
  /// This method also cancels and deletes all running executions of the
  /// workflow.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_DeleteWorkflowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_DeleteWorkflowRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.workflows.v1beta.Workflows/DeleteWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an existing workflow.
  /// Running this method has no impact on already running executions of the
  /// workflow. A new revision of the workflow may be created as a result of a
  /// successful update operation. In that case, such revision will be used
  /// in new workflow executions.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateWorkflow(
    _ request: Google_Cloud_Workflows_V1beta_UpdateWorkflowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Workflows_V1beta_UpdateWorkflowRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.workflows.v1beta.Workflows/UpdateWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Workflows_V1beta_WorkflowsClient: Google_Cloud_Workflows_V1beta_WorkflowsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.workflows.v1beta.Workflows service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Workflows_V1beta_WorkflowsProvider: CallHandlerProvider {
  /// Lists Workflows in a given project and location.
  /// The default order is not specified.
  func listWorkflows(request: Google_Cloud_Workflows_V1beta_ListWorkflowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Workflows_V1beta_ListWorkflowsResponse>
  /// Gets details of a single Workflow.
  func getWorkflow(request: Google_Cloud_Workflows_V1beta_GetWorkflowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Workflows_V1beta_Workflow>
  /// Creates a new workflow. If a workflow with the specified name already
  /// exists in the specified project and location, the long running operation
  /// will return [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
  func createWorkflow(request: Google_Cloud_Workflows_V1beta_CreateWorkflowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a workflow with the specified name.
  /// This method also cancels and deletes all running executions of the
  /// workflow.
  func deleteWorkflow(request: Google_Cloud_Workflows_V1beta_DeleteWorkflowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates an existing workflow.
  /// Running this method has no impact on already running executions of the
  /// workflow. A new revision of the workflow may be created as a result of a
  /// successful update operation. In that case, such revision will be used
  /// in new workflow executions.
  func updateWorkflow(request: Google_Cloud_Workflows_V1beta_UpdateWorkflowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Workflows_V1beta_WorkflowsProvider {
  public var serviceName: Substring { return "google.cloud.workflows.v1beta.Workflows" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListWorkflows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listWorkflows(request: request, context: context)
        }
      }

    case "GetWorkflow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getWorkflow(request: request, context: context)
        }
      }

    case "CreateWorkflow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createWorkflow(request: request, context: context)
        }
      }

    case "DeleteWorkflow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteWorkflow(request: request, context: context)
        }
      }

    case "UpdateWorkflow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateWorkflow(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

