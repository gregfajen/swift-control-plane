// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/documentai/v1beta2/document_understanding.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request to batch process documents as an asynchronous operation. The output
/// is written to Cloud Storage as JSON in the [Document] format.
public struct Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Individual requests for each document.
  public var requests: [Google_Cloud_Documentai_V1beta2_ProcessDocumentRequest] = []

  /// Target project and location to make a call.
  ///
  /// Format: `projects/{project-id}/locations/{location-id}`.
  ///
  /// If no location is specified, a region will be chosen automatically.
  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request to process one document.
public struct Google_Cloud_Documentai_V1beta2_ProcessDocumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Target project and location to make a call.
  ///
  /// Format: `projects/{project-id}/locations/{location-id}`.
  ///
  /// If no location is specified, a region will be chosen automatically.
  /// This field is only populated when used in ProcessDocument method.
  public var parent: String {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  /// Required. Information about the input file.
  public var inputConfig: Google_Cloud_Documentai_V1beta2_InputConfig {
    get {return _storage._inputConfig ?? Google_Cloud_Documentai_V1beta2_InputConfig()}
    set {_uniqueStorage()._inputConfig = newValue}
  }
  /// Returns true if `inputConfig` has been explicitly set.
  public var hasInputConfig: Bool {return _storage._inputConfig != nil}
  /// Clears the value of `inputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearInputConfig() {_uniqueStorage()._inputConfig = nil}

  /// Optional. The desired output location. This field is only needed in
  /// BatchProcessDocumentsRequest.
  public var outputConfig: Google_Cloud_Documentai_V1beta2_OutputConfig {
    get {return _storage._outputConfig ?? Google_Cloud_Documentai_V1beta2_OutputConfig()}
    set {_uniqueStorage()._outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return _storage._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {_uniqueStorage()._outputConfig = nil}

  /// Specifies a known document type for deeper structure detection. Valid
  /// values are currently "general" and "invoice". If not provided, "general"\
  /// is used as default. If any other value is given, the request is rejected.
  public var documentType: String {
    get {return _storage._documentType}
    set {_uniqueStorage()._documentType = newValue}
  }

  /// Controls table extraction behavior. If not specified, the system will
  /// decide reasonable defaults.
  public var tableExtractionParams: Google_Cloud_Documentai_V1beta2_TableExtractionParams {
    get {return _storage._tableExtractionParams ?? Google_Cloud_Documentai_V1beta2_TableExtractionParams()}
    set {_uniqueStorage()._tableExtractionParams = newValue}
  }
  /// Returns true if `tableExtractionParams` has been explicitly set.
  public var hasTableExtractionParams: Bool {return _storage._tableExtractionParams != nil}
  /// Clears the value of `tableExtractionParams`. Subsequent reads from it will return its default value.
  public mutating func clearTableExtractionParams() {_uniqueStorage()._tableExtractionParams = nil}

  /// Controls form extraction behavior. If not specified, the system will
  /// decide reasonable defaults.
  public var formExtractionParams: Google_Cloud_Documentai_V1beta2_FormExtractionParams {
    get {return _storage._formExtractionParams ?? Google_Cloud_Documentai_V1beta2_FormExtractionParams()}
    set {_uniqueStorage()._formExtractionParams = newValue}
  }
  /// Returns true if `formExtractionParams` has been explicitly set.
  public var hasFormExtractionParams: Bool {return _storage._formExtractionParams != nil}
  /// Clears the value of `formExtractionParams`. Subsequent reads from it will return its default value.
  public mutating func clearFormExtractionParams() {_uniqueStorage()._formExtractionParams = nil}

  /// Controls entity extraction behavior. If not specified, the system will
  /// decide reasonable defaults.
  public var entityExtractionParams: Google_Cloud_Documentai_V1beta2_EntityExtractionParams {
    get {return _storage._entityExtractionParams ?? Google_Cloud_Documentai_V1beta2_EntityExtractionParams()}
    set {_uniqueStorage()._entityExtractionParams = newValue}
  }
  /// Returns true if `entityExtractionParams` has been explicitly set.
  public var hasEntityExtractionParams: Bool {return _storage._entityExtractionParams != nil}
  /// Clears the value of `entityExtractionParams`. Subsequent reads from it will return its default value.
  public mutating func clearEntityExtractionParams() {_uniqueStorage()._entityExtractionParams = nil}

  /// Controls OCR behavior. If not specified, the system will decide reasonable
  /// defaults.
  public var ocrParams: Google_Cloud_Documentai_V1beta2_OcrParams {
    get {return _storage._ocrParams ?? Google_Cloud_Documentai_V1beta2_OcrParams()}
    set {_uniqueStorage()._ocrParams = newValue}
  }
  /// Returns true if `ocrParams` has been explicitly set.
  public var hasOcrParams: Bool {return _storage._ocrParams != nil}
  /// Clears the value of `ocrParams`. Subsequent reads from it will return its default value.
  public mutating func clearOcrParams() {_uniqueStorage()._ocrParams = nil}

  /// Controls AutoML model prediction behavior. AutoMlParams cannot be used
  /// together with other Params.
  public var automlParams: Google_Cloud_Documentai_V1beta2_AutoMlParams {
    get {return _storage._automlParams ?? Google_Cloud_Documentai_V1beta2_AutoMlParams()}
    set {_uniqueStorage()._automlParams = newValue}
  }
  /// Returns true if `automlParams` has been explicitly set.
  public var hasAutomlParams: Bool {return _storage._automlParams != nil}
  /// Clears the value of `automlParams`. Subsequent reads from it will return its default value.
  public mutating func clearAutomlParams() {_uniqueStorage()._automlParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response to an batch document processing request. This is returned in
/// the LRO Operation after the operation is complete.
public struct Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Responses for each individual document.
  public var responses: [Google_Cloud_Documentai_V1beta2_ProcessDocumentResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response to a single document processing request.
public struct Google_Cloud_Documentai_V1beta2_ProcessDocumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Information about the input file. This is the same as the corresponding
  /// input config in the request.
  public var inputConfig: Google_Cloud_Documentai_V1beta2_InputConfig {
    get {return _inputConfig ?? Google_Cloud_Documentai_V1beta2_InputConfig()}
    set {_inputConfig = newValue}
  }
  /// Returns true if `inputConfig` has been explicitly set.
  public var hasInputConfig: Bool {return self._inputConfig != nil}
  /// Clears the value of `inputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearInputConfig() {self._inputConfig = nil}

  /// The output location of the parsed responses. The responses are written to
  /// this location as JSON-serialized `Document` objects.
  public var outputConfig: Google_Cloud_Documentai_V1beta2_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Documentai_V1beta2_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _inputConfig: Google_Cloud_Documentai_V1beta2_InputConfig? = nil
  fileprivate var _outputConfig: Google_Cloud_Documentai_V1beta2_OutputConfig? = nil
}

/// Parameters to control Optical Character Recognition (OCR) behavior.
public struct Google_Cloud_Documentai_V1beta2_OcrParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of languages to use for OCR. In most cases, an empty value
  /// yields the best results since it enables automatic language detection. For
  /// languages based on the Latin alphabet, setting `language_hints` is not
  /// needed. In rare cases, when the language of the text in the image is known,
  /// setting a hint will help get better results (although it will be a
  /// significant hindrance if the hint is wrong). Document processing returns an
  /// error if one or more of the specified languages is not one of the
  /// supported languages.
  public var languageHints: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Parameters to control table extraction behavior.
public struct Google_Cloud_Documentai_V1beta2_TableExtractionParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether to enable table extraction.
  public var enabled: Bool = false

  /// Optional. Table bounding box hints that can be provided to complex cases
  /// which our algorithm cannot locate the table(s) in.
  public var tableBoundHints: [Google_Cloud_Documentai_V1beta2_TableBoundHint] = []

  /// Optional. Table header hints. The extraction will bias towards producing
  /// these terms as table headers, which may improve accuracy.
  public var headerHints: [String] = []

  /// Model version of the table extraction system. Default is "builtin/stable".
  /// Specify "builtin/latest" for the latest model.
  public var modelVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A hint for a table bounding box on the page for table parsing.
public struct Google_Cloud_Documentai_V1beta2_TableBoundHint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Page number for multi-paged inputs this hint applies to. If not
  /// provided, this hint will apply to all pages by default. This value is
  /// 1-based.
  public var pageNumber: Int32 = 0

  /// Bounding box hint for a table on this page. The coordinates must be
  /// normalized to [0,1] and the bounding box must be an axis-aligned rectangle.
  public var boundingBox: Google_Cloud_Documentai_V1beta2_BoundingPoly {
    get {return _boundingBox ?? Google_Cloud_Documentai_V1beta2_BoundingPoly()}
    set {_boundingBox = newValue}
  }
  /// Returns true if `boundingBox` has been explicitly set.
  public var hasBoundingBox: Bool {return self._boundingBox != nil}
  /// Clears the value of `boundingBox`. Subsequent reads from it will return its default value.
  public mutating func clearBoundingBox() {self._boundingBox = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _boundingBox: Google_Cloud_Documentai_V1beta2_BoundingPoly? = nil
}

/// Parameters to control form extraction behavior.
public struct Google_Cloud_Documentai_V1beta2_FormExtractionParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether to enable form extraction.
  public var enabled: Bool = false

  /// User can provide pairs of (key text, value type) to improve the parsing
  /// result.
  ///
  /// For example, if a document has a field called "Date" that holds a date
  /// value and a field called "Amount" that may hold either a currency value
  /// (e.g., "$500.00") or a simple number value (e.g., "20"), you could use the
  /// following hints: [ {"key": "Date", value_types: [ "DATE"]}, {"key":
  /// "Amount", "value_types": [ "PRICE", "NUMBER" ]} ]
  ///
  /// If the value type is unknown, but you want to provide hints for the keys,
  /// you can leave the value_types field blank. e.g. {"key": "Date",
  /// "value_types": []}
  public var keyValuePairHints: [Google_Cloud_Documentai_V1beta2_KeyValuePairHint] = []

  /// Model version of the form extraction system. Default is
  /// "builtin/stable". Specify "builtin/latest" for the latest model.
  /// For custom form models, specify: “custom/{model_name}". Model name
  /// format is "bucket_name/path/to/modeldir" corresponding to
  /// "gs://bucket_name/path/to/modeldir" where annotated examples are stored.
  public var modelVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// User-provided hint for key value pair.
public struct Google_Cloud_Documentai_V1beta2_KeyValuePairHint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The key text for the hint.
  public var key: String = String()

  /// Type of the value. This is case-insensitive, and could be one of:
  /// ADDRESS, LOCATION, ORGANIZATION, PERSON, PHONE_NUMBER,
  /// ID, NUMBER, EMAIL, PRICE, TERMS, DATE, NAME. Types not in this list will
  /// be ignored.
  public var valueTypes: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Parameters to control entity extraction behavior.
public struct Google_Cloud_Documentai_V1beta2_EntityExtractionParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether to enable entity extraction.
  public var enabled: Bool = false

  /// Model version of the entity extraction. Default is
  /// "builtin/stable". Specify "builtin/latest" for the latest model.
  public var modelVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Parameters to control AutoML model prediction behavior.
public struct Google_Cloud_Documentai_V1beta2_AutoMlParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource name of the AutoML model.
  ///
  /// Format: `projects/{project-id}/locations/{location-id}/models/{model-id}`.
  public var model: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The desired input location and metadata.
public struct Google_Cloud_Documentai_V1beta2_InputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required.
  public var source: Google_Cloud_Documentai_V1beta2_InputConfig.OneOf_Source? = nil

  /// The Google Cloud Storage location to read the input from. This must be a
  /// single file.
  public var gcsSource: Google_Cloud_Documentai_V1beta2_GcsSource {
    get {
      if case .gcsSource(let v)? = source {return v}
      return Google_Cloud_Documentai_V1beta2_GcsSource()
    }
    set {source = .gcsSource(newValue)}
  }

  /// Content in bytes, represented as a stream of bytes.
  /// Note: As with all `bytes` fields, proto buffer messages use a pure binary
  /// representation, whereas JSON representations use base64.
  ///
  /// This field only works for synchronous ProcessDocument method.
  public var contents: Data {
    get {
      if case .contents(let v)? = source {return v}
      return Data()
    }
    set {source = .contents(newValue)}
  }

  /// Required. Mimetype of the input. Current supported mimetypes are application/pdf,
  /// image/tiff, and image/gif.
  /// In addition, application/json type is supported for requests with
  /// [ProcessDocumentRequest.automl_params][google.cloud.documentai.v1beta2.ProcessDocumentRequest.automl_params] field set. The JSON file needs to
  /// be in [Document][google.cloud.documentai.v1beta2.Document] format.
  public var mimeType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required.
  public enum OneOf_Source: Equatable {
    /// The Google Cloud Storage location to read the input from. This must be a
    /// single file.
    case gcsSource(Google_Cloud_Documentai_V1beta2_GcsSource)
    /// Content in bytes, represented as a stream of bytes.
    /// Note: As with all `bytes` fields, proto buffer messages use a pure binary
    /// representation, whereas JSON representations use base64.
    ///
    /// This field only works for synchronous ProcessDocument method.
    case contents(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Documentai_V1beta2_InputConfig.OneOf_Source, rhs: Google_Cloud_Documentai_V1beta2_InputConfig.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsSource, .gcsSource): return {
        guard case .gcsSource(let l) = lhs, case .gcsSource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contents, .contents): return {
        guard case .contents(let l) = lhs, case .contents(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The desired output location and metadata.
public struct Google_Cloud_Documentai_V1beta2_OutputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required.
  public var destination: Google_Cloud_Documentai_V1beta2_OutputConfig.OneOf_Destination? = nil

  /// The Google Cloud Storage location to write the output to.
  public var gcsDestination: Google_Cloud_Documentai_V1beta2_GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Documentai_V1beta2_GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  /// The max number of pages to include into each output Document shard JSON on
  /// Google Cloud Storage.
  ///
  /// The valid range is [1, 100]. If not specified, the default value is 20.
  ///
  /// For example, for one pdf file with 100 pages, 100 parsed pages will be
  /// produced. If `pages_per_shard` = 20, then 5 Document shard JSON files each
  /// containing 20 parsed pages will be written under the prefix
  /// [OutputConfig.gcs_destination.uri][] and suffix pages-x-to-y.json where
  /// x and y are 1-indexed page numbers.
  ///
  /// Example GCS outputs with 157 pages and pages_per_shard = 50:
  ///
  /// <prefix>pages-001-to-050.json
  /// <prefix>pages-051-to-100.json
  /// <prefix>pages-101-to-150.json
  /// <prefix>pages-151-to-157.json
  public var pagesPerShard: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required.
  public enum OneOf_Destination: Equatable {
    /// The Google Cloud Storage location to write the output to.
    case gcsDestination(Google_Cloud_Documentai_V1beta2_GcsDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Documentai_V1beta2_OutputConfig.OneOf_Destination, rhs: Google_Cloud_Documentai_V1beta2_OutputConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// The Google Cloud Storage location where the input file will be read from.
public struct Google_Cloud_Documentai_V1beta2_GcsSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The Google Cloud Storage location where the output file will be written to.
public struct Google_Cloud_Documentai_V1beta2_GcsDestination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains metadata for the BatchProcessDocuments operation.
public struct Google_Cloud_Documentai_V1beta2_OperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The state of the current batch processing.
  public var state: Google_Cloud_Documentai_V1beta2_OperationMetadata.State = .unspecified

  /// A message providing more details about the current state of processing.
  public var stateMessage: String = String()

  /// The creation time of the operation.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The last update time of the operation.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The default value. This value is used if the state is omitted.
    case unspecified // = 0

    /// Request is received.
    case accepted // = 1

    /// Request operation is waiting for scheduling.
    case waiting // = 2

    /// Request is being processed.
    case running // = 3

    /// The batch processing completed successfully.
    case succeeded // = 4

    /// The batch processing was cancelled.
    case cancelled // = 5

    /// The batch processing has failed.
    case failed // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .accepted
      case 2: self = .waiting
      case 3: self = .running
      case 4: self = .succeeded
      case 5: self = .cancelled
      case 6: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .accepted: return 1
      case .waiting: return 2
      case .running: return 3
      case .succeeded: return 4
      case .cancelled: return 5
      case .failed: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Documentai_V1beta2_OperationMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta2_OperationMetadata.State] = [
    .unspecified,
    .accepted,
    .waiting,
    .running,
    .succeeded,
    .cancelled,
    .failed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.documentai.v1beta2"

extension Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchProcessDocumentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
    2: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.requests) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsRequest, rhs: Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsRequest) -> Bool {
    if lhs.requests != rhs.requests {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_ProcessDocumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessDocumentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9: .same(proto: "parent"),
    1: .standard(proto: "input_config"),
    2: .standard(proto: "output_config"),
    3: .standard(proto: "document_type"),
    4: .standard(proto: "table_extraction_params"),
    5: .standard(proto: "form_extraction_params"),
    6: .standard(proto: "entity_extraction_params"),
    7: .standard(proto: "ocr_params"),
    8: .standard(proto: "automl_params"),
  ]

  fileprivate class _StorageClass {
    var _parent: String = String()
    var _inputConfig: Google_Cloud_Documentai_V1beta2_InputConfig? = nil
    var _outputConfig: Google_Cloud_Documentai_V1beta2_OutputConfig? = nil
    var _documentType: String = String()
    var _tableExtractionParams: Google_Cloud_Documentai_V1beta2_TableExtractionParams? = nil
    var _formExtractionParams: Google_Cloud_Documentai_V1beta2_FormExtractionParams? = nil
    var _entityExtractionParams: Google_Cloud_Documentai_V1beta2_EntityExtractionParams? = nil
    var _ocrParams: Google_Cloud_Documentai_V1beta2_OcrParams? = nil
    var _automlParams: Google_Cloud_Documentai_V1beta2_AutoMlParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _parent = source._parent
      _inputConfig = source._inputConfig
      _outputConfig = source._outputConfig
      _documentType = source._documentType
      _tableExtractionParams = source._tableExtractionParams
      _formExtractionParams = source._formExtractionParams
      _entityExtractionParams = source._entityExtractionParams
      _ocrParams = source._ocrParams
      _automlParams = source._automlParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._inputConfig) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._outputConfig) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._documentType) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._tableExtractionParams) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._formExtractionParams) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._entityExtractionParams) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._ocrParams) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._automlParams) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._parent) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._inputConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._outputConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._documentType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._documentType, fieldNumber: 3)
      }
      if let v = _storage._tableExtractionParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._formExtractionParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._entityExtractionParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._ocrParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._automlParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_ProcessDocumentRequest, rhs: Google_Cloud_Documentai_V1beta2_ProcessDocumentRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._inputConfig != rhs_storage._inputConfig {return false}
        if _storage._outputConfig != rhs_storage._outputConfig {return false}
        if _storage._documentType != rhs_storage._documentType {return false}
        if _storage._tableExtractionParams != rhs_storage._tableExtractionParams {return false}
        if _storage._formExtractionParams != rhs_storage._formExtractionParams {return false}
        if _storage._entityExtractionParams != rhs_storage._entityExtractionParams {return false}
        if _storage._ocrParams != rhs_storage._ocrParams {return false}
        if _storage._automlParams != rhs_storage._automlParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchProcessDocumentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsResponse, rhs: Google_Cloud_Documentai_V1beta2_BatchProcessDocumentsResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_ProcessDocumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessDocumentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_config"),
    2: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._inputConfig) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._inputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_ProcessDocumentResponse, rhs: Google_Cloud_Documentai_V1beta2_ProcessDocumentResponse) -> Bool {
    if lhs._inputConfig != rhs._inputConfig {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_OcrParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OcrParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_hints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.languageHints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageHints.isEmpty {
      try visitor.visitRepeatedStringField(value: self.languageHints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_OcrParams, rhs: Google_Cloud_Documentai_V1beta2_OcrParams) -> Bool {
    if lhs.languageHints != rhs.languageHints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_TableExtractionParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableExtractionParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "table_bound_hints"),
    3: .standard(proto: "header_hints"),
    4: .standard(proto: "model_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tableBoundHints) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.headerHints) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.modelVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.tableBoundHints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tableBoundHints, fieldNumber: 2)
    }
    if !self.headerHints.isEmpty {
      try visitor.visitRepeatedStringField(value: self.headerHints, fieldNumber: 3)
    }
    if !self.modelVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.modelVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_TableExtractionParams, rhs: Google_Cloud_Documentai_V1beta2_TableExtractionParams) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.tableBoundHints != rhs.tableBoundHints {return false}
    if lhs.headerHints != rhs.headerHints {return false}
    if lhs.modelVersion != rhs.modelVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_TableBoundHint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableBoundHint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_number"),
    2: .standard(proto: "bounding_box"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pageNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._boundingBox) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNumber, fieldNumber: 1)
    }
    if let v = self._boundingBox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_TableBoundHint, rhs: Google_Cloud_Documentai_V1beta2_TableBoundHint) -> Bool {
    if lhs.pageNumber != rhs.pageNumber {return false}
    if lhs._boundingBox != rhs._boundingBox {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_FormExtractionParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FormExtractionParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "key_value_pair_hints"),
    3: .standard(proto: "model_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keyValuePairHints) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.modelVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.keyValuePairHints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyValuePairHints, fieldNumber: 2)
    }
    if !self.modelVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.modelVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_FormExtractionParams, rhs: Google_Cloud_Documentai_V1beta2_FormExtractionParams) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.keyValuePairHints != rhs.keyValuePairHints {return false}
    if lhs.modelVersion != rhs.modelVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_KeyValuePairHint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeyValuePairHint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "value_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.valueTypes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.valueTypes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.valueTypes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_KeyValuePairHint, rhs: Google_Cloud_Documentai_V1beta2_KeyValuePairHint) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.valueTypes != rhs.valueTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_EntityExtractionParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EntityExtractionParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "model_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.modelVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.modelVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.modelVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_EntityExtractionParams, rhs: Google_Cloud_Documentai_V1beta2_EntityExtractionParams) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.modelVersion != rhs.modelVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_AutoMlParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AutoMlParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.model) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_AutoMlParams, rhs: Google_Cloud_Documentai_V1beta2_AutoMlParams) -> Bool {
    if lhs.model != rhs.model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_InputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_source"),
    3: .same(proto: "contents"),
    2: .standard(proto: "mime_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Documentai_V1beta2_GcsSource?
        if let current = self.source {
          try decoder.handleConflictingOneOf()
          if case .gcsSource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.source = .gcsSource(v)}
      }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 3: try {
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.source = .contents(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsSource(let v)? = self.source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 2)
    }
    if case .contents(let v)? = self.source {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_InputConfig, rhs: Google_Cloud_Documentai_V1beta2_InputConfig) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_OutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
    2: .standard(proto: "pages_per_shard"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Documentai_V1beta2_GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pagesPerShard) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsDestination(let v)? = self.destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.pagesPerShard != 0 {
      try visitor.visitSingularInt32Field(value: self.pagesPerShard, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_OutputConfig, rhs: Google_Cloud_Documentai_V1beta2_OutputConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.pagesPerShard != rhs.pagesPerShard {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_GcsSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_GcsSource, rhs: Google_Cloud_Documentai_V1beta2_GcsSource) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_GcsDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_GcsDestination, rhs: Google_Cloud_Documentai_V1beta2_GcsDestination) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_OperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "state_message"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stateMessage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.stateMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.stateMessage, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta2_OperationMetadata, rhs: Google_Cloud_Documentai_V1beta2_OperationMetadata) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.stateMessage != rhs.stateMessage {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta2_OperationMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "ACCEPTED"),
    2: .same(proto: "WAITING"),
    3: .same(proto: "RUNNING"),
    4: .same(proto: "SUCCEEDED"),
    5: .same(proto: "CANCELLED"),
    6: .same(proto: "FAILED"),
  ]
}
