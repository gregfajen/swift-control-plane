// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/documentai/v1beta3/document_processor_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for the process document method.
public struct Google_Cloud_Documentai_V1beta3_ProcessRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The processor resource name.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// The document payload, the [content] and [mime_type] fields must be set.
  public var document: Google_Cloud_Documentai_V1beta3_Document {
    get {return _storage._document ?? Google_Cloud_Documentai_V1beta3_Document()}
    set {_uniqueStorage()._document = newValue}
  }
  /// Returns true if `document` has been explicitly set.
  public var hasDocument: Bool {return _storage._document != nil}
  /// Clears the value of `document`. Subsequent reads from it will return its default value.
  public mutating func clearDocument() {_uniqueStorage()._document = nil}

  /// Whether Human Review feature should be skipped for this request. Default to
  /// false.
  public var skipHumanReview: Bool {
    get {return _storage._skipHumanReview}
    set {_uniqueStorage()._skipHumanReview = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response message for the process document method.
public struct Google_Cloud_Documentai_V1beta3_ProcessResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The document payload, will populate fields based on the processor's
  /// behavior.
  public var document: Google_Cloud_Documentai_V1beta3_Document {
    get {return _storage._document ?? Google_Cloud_Documentai_V1beta3_Document()}
    set {_uniqueStorage()._document = newValue}
  }
  /// Returns true if `document` has been explicitly set.
  public var hasDocument: Bool {return _storage._document != nil}
  /// Clears the value of `document`. Subsequent reads from it will return its default value.
  public mutating func clearDocument() {_uniqueStorage()._document = nil}

  /// The name of the operation triggered by the processed document. If the human
  /// review process is not triggered, this field will be empty. It has the same
  /// response type and metadata as the long running operation returned by
  /// ReviewDocument method.
  public var humanReviewOperation: String {
    get {return _storage._humanReviewOperation}
    set {_uniqueStorage()._humanReviewOperation = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for batch process document method.
public struct Google_Cloud_Documentai_V1beta3_BatchProcessRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The processor resource name.
  public var name: String = String()

  /// The input config for each single document in the batch process.
  public var inputConfigs: [Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchInputConfig] = []

  /// The overall output config for batch process.
  public var outputConfig: Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchOutputConfig {
    get {return _outputConfig ?? Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchOutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The message for input config in batch process.
  public struct BatchInputConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The Cloud Storage location as the source of the document.
    public var gcsSource: String = String()

    /// Mimetype of the input. If the input is a raw document, the supported
    /// mimetypes are application/pdf, image/tiff, and image/gif.
    /// If the input is a [Document] proto, the type should be application/json.
    public var mimeType: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// The message for output config in batch process.
  public struct BatchOutputConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The output Cloud Storage directory to put the processed documents.
    public var gcsDestination: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _outputConfig: Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchOutputConfig? = nil
}

/// Response message for batch process document method.
public struct Google_Cloud_Documentai_V1beta3_BatchProcessResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The long running operation metadata for batch process method.
public struct Google_Cloud_Documentai_V1beta3_BatchProcessMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The state of the current batch processing.
  public var state: Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.State = .unspecified

  /// A message providing more details about the current state of processing.
  /// For example, the error message if the operation is failed.
  public var stateMessage: String = String()

  /// The creation time of the operation.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The last update time of the operation.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// The list of response details of each document.
  public var individualProcessStatuses: [Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.IndividualProcessStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible states of the batch processing operation.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The default value. This value is used if the state is omitted.
    case unspecified // = 0

    /// Request operation is waiting for scheduling.
    case waiting // = 1

    /// Request is being processed.
    case running // = 2

    /// The batch processing completed successfully.
    case succeeded // = 3

    /// The batch processing was being cancelled.
    case cancelling // = 4

    /// The batch processing was cancelled.
    case cancelled // = 5

    /// The batch processing has failed.
    case failed // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .waiting
      case 2: self = .running
      case 3: self = .succeeded
      case 4: self = .cancelling
      case 5: self = .cancelled
      case 6: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .waiting: return 1
      case .running: return 2
      case .succeeded: return 3
      case .cancelling: return 4
      case .cancelled: return 5
      case .failed: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The status of a each individual document in the batch process.
  public struct IndividualProcessStatus {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The source of the document, same as the [input_gcs_source] field in the
    /// request when the batch process started. The batch process is started by
    /// take snapshot of that document, since a user can move or change that
    /// document during the process.
    public var inputGcsSource: String = String()

    /// The status of the processing of the document.
    public var status: Google_Rpc_Status {
      get {return _status ?? Google_Rpc_Status()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    /// The output_gcs_destination (in the request as 'output_gcs_destination')
    /// of the processed document if it was successful, otherwise empty.
    public var outputGcsDestination: String = String()

    /// The name of the operation triggered by the processed document. If the
    /// human review process is not triggered, this field will be empty. It has
    /// the same response type and metadata as the long running operation
    /// returned by ReviewDocument method.
    public var humanReviewOperation: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _status: Google_Rpc_Status? = nil
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.State] = [
    .unspecified,
    .waiting,
    .running,
    .succeeded,
    .cancelling,
    .cancelled,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// Request message for review document method.
public struct Google_Cloud_Documentai_V1beta3_ReviewDocumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the HumanReviewConfig that the document will be
  /// reviewed with.
  public var humanReviewConfig: String {
    get {return _storage._humanReviewConfig}
    set {_uniqueStorage()._humanReviewConfig = newValue}
  }

  /// The document that needs human review.
  public var document: Google_Cloud_Documentai_V1beta3_Document {
    get {return _storage._document ?? Google_Cloud_Documentai_V1beta3_Document()}
    set {_uniqueStorage()._document = newValue}
  }
  /// Returns true if `document` has been explicitly set.
  public var hasDocument: Bool {return _storage._document != nil}
  /// Clears the value of `document`. Subsequent reads from it will return its default value.
  public mutating func clearDocument() {_uniqueStorage()._document = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response message for review document method.
public struct Google_Cloud_Documentai_V1beta3_ReviewDocumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Cloud Storage uri for the human reviewed document.
  public var gcsDestination: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The long running operation metadata for review document method.
public struct Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Used only when Operation.done is false.
  public var state: Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata.State = .unspecified

  /// A message providing more details about the current state of processing.
  /// For example, the error message if the operation is failed.
  public var stateMessage: String = String()

  /// The creation time of the operation.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The last update time of the operation.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// State of the longrunning operation.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified state.
    case unspecified // = 0

    /// Operation is still running.
    case running // = 1

    /// Operation is being cancelled.
    case cancelling // = 2

    /// Operation succeeded.
    case succeeded // = 3

    /// Operation failed.
    case failed // = 4

    /// Operation is cancelled.
    case cancelled // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .running
      case 2: self = .cancelling
      case 3: self = .succeeded
      case 4: self = .failed
      case 5: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .running: return 1
      case .cancelling: return 2
      case .succeeded: return 3
      case .failed: return 4
      case .cancelled: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata.State] = [
    .unspecified,
    .running,
    .cancelling,
    .succeeded,
    .failed,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.documentai.v1beta3"

extension Google_Cloud_Documentai_V1beta3_ProcessRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "document"),
    3: .standard(proto: "skip_human_review"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _document: Google_Cloud_Documentai_V1beta3_Document? = nil
    var _skipHumanReview: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _document = source._document
      _skipHumanReview = source._skipHumanReview
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._document) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._skipHumanReview) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._document {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._skipHumanReview != false {
        try visitor.visitSingularBoolField(value: _storage._skipHumanReview, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_ProcessRequest, rhs: Google_Cloud_Documentai_V1beta3_ProcessRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._document != rhs_storage._document {return false}
        if _storage._skipHumanReview != rhs_storage._skipHumanReview {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_ProcessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "document"),
    2: .standard(proto: "human_review_operation"),
  ]

  fileprivate class _StorageClass {
    var _document: Google_Cloud_Documentai_V1beta3_Document? = nil
    var _humanReviewOperation: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _document = source._document
      _humanReviewOperation = source._humanReviewOperation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._document) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._humanReviewOperation) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._document {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._humanReviewOperation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._humanReviewOperation, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_ProcessResponse, rhs: Google_Cloud_Documentai_V1beta3_ProcessResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._document != rhs_storage._document {return false}
        if _storage._humanReviewOperation != rhs_storage._humanReviewOperation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchProcessRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "input_configs"),
    3: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputConfigs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.inputConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputConfigs, fieldNumber: 2)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_BatchProcessRequest, rhs: Google_Cloud_Documentai_V1beta3_BatchProcessRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.inputConfigs != rhs.inputConfigs {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchInputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_BatchProcessRequest.protoMessageName + ".BatchInputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_source"),
    2: .standard(proto: "mime_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcsSource) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcsSource.isEmpty {
      try visitor.visitSingularStringField(value: self.gcsSource, fieldNumber: 1)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchInputConfig, rhs: Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchInputConfig) -> Bool {
    if lhs.gcsSource != rhs.gcsSource {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchOutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_BatchProcessRequest.protoMessageName + ".BatchOutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcsDestination) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcsDestination.isEmpty {
      try visitor.visitSingularStringField(value: self.gcsDestination, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchOutputConfig, rhs: Google_Cloud_Documentai_V1beta3_BatchProcessRequest.BatchOutputConfig) -> Bool {
    if lhs.gcsDestination != rhs.gcsDestination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchProcessResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_BatchProcessResponse, rhs: Google_Cloud_Documentai_V1beta3_BatchProcessResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchProcessMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "state_message"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .standard(proto: "individual_process_statuses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stateMessage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.individualProcessStatuses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.stateMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.stateMessage, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.individualProcessStatuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.individualProcessStatuses, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_BatchProcessMetadata, rhs: Google_Cloud_Documentai_V1beta3_BatchProcessMetadata) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.stateMessage != rhs.stateMessage {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.individualProcessStatuses != rhs.individualProcessStatuses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "WAITING"),
    2: .same(proto: "RUNNING"),
    3: .same(proto: "SUCCEEDED"),
    4: .same(proto: "CANCELLING"),
    5: .same(proto: "CANCELLED"),
    6: .same(proto: "FAILED"),
  ]
}

extension Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.IndividualProcessStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.protoMessageName + ".IndividualProcessStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_gcs_source"),
    2: .same(proto: "status"),
    3: .standard(proto: "output_gcs_destination"),
    4: .standard(proto: "human_review_operation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inputGcsSource) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.outputGcsDestination) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.humanReviewOperation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputGcsSource.isEmpty {
      try visitor.visitSingularStringField(value: self.inputGcsSource, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.outputGcsDestination.isEmpty {
      try visitor.visitSingularStringField(value: self.outputGcsDestination, fieldNumber: 3)
    }
    if !self.humanReviewOperation.isEmpty {
      try visitor.visitSingularStringField(value: self.humanReviewOperation, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.IndividualProcessStatus, rhs: Google_Cloud_Documentai_V1beta3_BatchProcessMetadata.IndividualProcessStatus) -> Bool {
    if lhs.inputGcsSource != rhs.inputGcsSource {return false}
    if lhs._status != rhs._status {return false}
    if lhs.outputGcsDestination != rhs.outputGcsDestination {return false}
    if lhs.humanReviewOperation != rhs.humanReviewOperation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_ReviewDocumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewDocumentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "human_review_config"),
    2: .same(proto: "document"),
  ]

  fileprivate class _StorageClass {
    var _humanReviewConfig: String = String()
    var _document: Google_Cloud_Documentai_V1beta3_Document? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _humanReviewConfig = source._humanReviewConfig
      _document = source._document
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._humanReviewConfig) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._document) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._humanReviewConfig.isEmpty {
        try visitor.visitSingularStringField(value: _storage._humanReviewConfig, fieldNumber: 1)
      }
      if let v = _storage._document {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_ReviewDocumentRequest, rhs: Google_Cloud_Documentai_V1beta3_ReviewDocumentRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._humanReviewConfig != rhs_storage._humanReviewConfig {return false}
        if _storage._document != rhs_storage._document {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_ReviewDocumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewDocumentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcsDestination) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcsDestination.isEmpty {
      try visitor.visitSingularStringField(value: self.gcsDestination, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_ReviewDocumentResponse, rhs: Google_Cloud_Documentai_V1beta3_ReviewDocumentResponse) -> Bool {
    if lhs.gcsDestination != rhs.gcsDestination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewDocumentOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "state_message"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stateMessage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.stateMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.stateMessage, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata, rhs: Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.stateMessage != rhs.stateMessage {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_ReviewDocumentOperationMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "RUNNING"),
    2: .same(proto: "CANCELLING"),
    3: .same(proto: "SUCCEEDED"),
    4: .same(proto: "FAILED"),
    5: .same(proto: "CANCELLED"),
  ]
}
