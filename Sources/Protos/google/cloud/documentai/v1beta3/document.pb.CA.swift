// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/documentai/v1beta3/document.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Document represents the canonical document resource in Document Understanding
/// AI.
/// It is an interchange format that provides insights into documents and allows
/// for collaboration between users and Document Understanding AI to iterate and
/// optimize for quality.
public struct Google_Cloud_Documentai_V1beta3_Document {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Original source document from the user.
  public var source: Google_Cloud_Documentai_V1beta3_Document.OneOf_Source? = nil

  /// Currently supports Google Cloud Storage URI of the form
  ///    `gs://bucket_name/object_name`. Object versioning is not supported.
  ///    See [Google Cloud Storage Request
  ///    URIs](https://cloud.google.com/storage/docs/reference-uris) for more
  ///    info.
  public var uri: String {
    get {
      if case .uri(let v)? = source {return v}
      return String()
    }
    set {source = .uri(newValue)}
  }

  /// Inline document content, represented as a stream of bytes.
  /// Note: As with all `bytes` fields, protobuffers use a pure binary
  /// representation, whereas JSON representations use base64.
  public var content: Data {
    get {
      if case .content(let v)? = source {return v}
      return Data()
    }
    set {source = .content(newValue)}
  }

  /// An IANA published MIME type (also referred to as media type). For more
  /// information, see
  /// https://www.iana.org/assignments/media-types/media-types.xhtml.
  public var mimeType: String = String()

  /// UTF-8 encoded text in reading order from the document.
  public var text: String = String()

  /// Styles for the [Document.text][google.cloud.documentai.v1beta3.Document.text].
  public var textStyles: [Google_Cloud_Documentai_V1beta3_Document.Style] = []

  /// Visual page layout for the [Document][google.cloud.documentai.v1beta3.Document].
  public var pages: [Google_Cloud_Documentai_V1beta3_Document.Page] = []

  /// A list of entities detected on [Document.text][google.cloud.documentai.v1beta3.Document.text]. For document shards,
  /// entities in this list may cross shard boundaries.
  public var entities: [Google_Cloud_Documentai_V1beta3_Document.Entity] = []

  /// Relationship among [Document.entities][google.cloud.documentai.v1beta3.Document.entities].
  public var entityRelations: [Google_Cloud_Documentai_V1beta3_Document.EntityRelation] = []

  /// A list of translations on [Document.text][google.cloud.documentai.v1beta3.Document.text]. For document shards,
  /// translations in this list may cross shard boundaries.
  public var translations: [Google_Cloud_Documentai_V1beta3_Document.Translation] = []

  /// A list of text corrections made to [Document.text].  This is usually
  /// used for annotating corrections to OCR mistakes.  Text changes for a given
  /// revision may not overlap with each other.
  public var textChanges: [Google_Cloud_Documentai_V1beta3_Document.TextChange] = []

  /// Information about the sharding if this document is sharded part of a larger
  /// document. If the document is not sharded, this message is not specified.
  public var shardInfo: Google_Cloud_Documentai_V1beta3_Document.ShardInfo {
    get {return _shardInfo ?? Google_Cloud_Documentai_V1beta3_Document.ShardInfo()}
    set {_shardInfo = newValue}
  }
  /// Returns true if `shardInfo` has been explicitly set.
  public var hasShardInfo: Bool {return self._shardInfo != nil}
  /// Clears the value of `shardInfo`. Subsequent reads from it will return its default value.
  public mutating func clearShardInfo() {self._shardInfo = nil}

  /// Any error that occurred while processing this document.
  public var error: Google_Rpc_Status {
    get {return _error ?? Google_Rpc_Status()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  /// Revision history of this document.
  public var revisions: [Google_Cloud_Documentai_V1beta3_Document.Revision] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Original source document from the user.
  public enum OneOf_Source: Equatable {
    /// Currently supports Google Cloud Storage URI of the form
    ///    `gs://bucket_name/object_name`. Object versioning is not supported.
    ///    See [Google Cloud Storage Request
    ///    URIs](https://cloud.google.com/storage/docs/reference-uris) for more
    ///    info.
    case uri(String)
    /// Inline document content, represented as a stream of bytes.
    /// Note: As with all `bytes` fields, protobuffers use a pure binary
    /// representation, whereas JSON representations use base64.
    case content(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.OneOf_Source, rhs: Google_Cloud_Documentai_V1beta3_Document.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.uri, .uri): return {
        guard case .uri(let l) = lhs, case .uri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.content, .content): return {
        guard case .content(let l) = lhs, case .content(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// For a large document, sharding may be performed to produce several
  /// document shards. Each document shard contains this field to detail which
  /// shard it is.
  public struct ShardInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The 0-based index of this shard.
    public var shardIndex: Int64 = 0

    /// Total number of shards.
    public var shardCount: Int64 = 0

    /// The index of the first character in [Document.text][google.cloud.documentai.v1beta3.Document.text] in the overall
    /// document global text.
    public var textOffset: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Annotation for common text style attributes. This adheres to CSS
  /// conventions as much as possible.
  public struct Style {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Text anchor indexing into the [Document.text][google.cloud.documentai.v1beta3.Document.text].
    public var textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor {
      get {return _textAnchor ?? Google_Cloud_Documentai_V1beta3_Document.TextAnchor()}
      set {_textAnchor = newValue}
    }
    /// Returns true if `textAnchor` has been explicitly set.
    public var hasTextAnchor: Bool {return self._textAnchor != nil}
    /// Clears the value of `textAnchor`. Subsequent reads from it will return its default value.
    public mutating func clearTextAnchor() {self._textAnchor = nil}

    /// Text color.
    public var color: Google_Type_Color {
      get {return _color ?? Google_Type_Color()}
      set {_color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    public var hasColor: Bool {return self._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    public mutating func clearColor() {self._color = nil}

    /// Text background color.
    public var backgroundColor: Google_Type_Color {
      get {return _backgroundColor ?? Google_Type_Color()}
      set {_backgroundColor = newValue}
    }
    /// Returns true if `backgroundColor` has been explicitly set.
    public var hasBackgroundColor: Bool {return self._backgroundColor != nil}
    /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
    public mutating func clearBackgroundColor() {self._backgroundColor = nil}

    /// Font weight. Possible values are normal, bold, bolder, and lighter.
    /// https://www.w3schools.com/cssref/pr_font_weight.asp
    public var fontWeight: String = String()

    /// Text style. Possible values are normal, italic, and oblique.
    /// https://www.w3schools.com/cssref/pr_font_font-style.asp
    public var textStyle: String = String()

    /// Text decoration. Follows CSS standard.
    /// <text-decoration-line> <text-decoration-color> <text-decoration-style>
    /// https://www.w3schools.com/cssref/pr_text_text-decoration.asp
    public var textDecoration: String = String()

    /// Font size.
    public var fontSize: Google_Cloud_Documentai_V1beta3_Document.Style.FontSize {
      get {return _fontSize ?? Google_Cloud_Documentai_V1beta3_Document.Style.FontSize()}
      set {_fontSize = newValue}
    }
    /// Returns true if `fontSize` has been explicitly set.
    public var hasFontSize: Bool {return self._fontSize != nil}
    /// Clears the value of `fontSize`. Subsequent reads from it will return its default value.
    public mutating func clearFontSize() {self._fontSize = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Font size with unit.
    public struct FontSize {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Font size for the text.
      public var size: Float = 0

      /// Unit for the font size. Follows CSS naming (in, px, pt, etc.).
      public var unit: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor? = nil
    fileprivate var _color: Google_Type_Color? = nil
    fileprivate var _backgroundColor: Google_Type_Color? = nil
    fileprivate var _fontSize: Google_Cloud_Documentai_V1beta3_Document.Style.FontSize? = nil
  }

  /// A page in a [Document][google.cloud.documentai.v1beta3.Document].
  public struct Page {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 1-based index for current [Page][google.cloud.documentai.v1beta3.Document.Page] in a parent [Document][google.cloud.documentai.v1beta3.Document].
    /// Useful when a page is taken out of a [Document][google.cloud.documentai.v1beta3.Document] for individual
    /// processing.
    public var pageNumber: Int32 {
      get {return _storage._pageNumber}
      set {_uniqueStorage()._pageNumber = newValue}
    }

    /// Rendered image for this page. This image is preprocessed to remove any
    /// skew, rotation, and distortions such that the annotation bounding boxes
    /// can be upright and axis-aligned.
    public var image: Google_Cloud_Documentai_V1beta3_Document.Page.Image {
      get {return _storage._image ?? Google_Cloud_Documentai_V1beta3_Document.Page.Image()}
      set {_uniqueStorage()._image = newValue}
    }
    /// Returns true if `image` has been explicitly set.
    public var hasImage: Bool {return _storage._image != nil}
    /// Clears the value of `image`. Subsequent reads from it will return its default value.
    public mutating func clearImage() {_uniqueStorage()._image = nil}

    /// Transformation matrices that were applied to the original document image
    /// to produce [Page.image][google.cloud.documentai.v1beta3.Document.Page.image].
    public var transforms: [Google_Cloud_Documentai_V1beta3_Document.Page.Matrix] {
      get {return _storage._transforms}
      set {_uniqueStorage()._transforms = newValue}
    }

    /// Physical dimension of the page.
    public var dimension: Google_Cloud_Documentai_V1beta3_Document.Page.Dimension {
      get {return _storage._dimension ?? Google_Cloud_Documentai_V1beta3_Document.Page.Dimension()}
      set {_uniqueStorage()._dimension = newValue}
    }
    /// Returns true if `dimension` has been explicitly set.
    public var hasDimension: Bool {return _storage._dimension != nil}
    /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
    public mutating func clearDimension() {_uniqueStorage()._dimension = nil}

    /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for the page.
    public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
      get {return _storage._layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
      set {_uniqueStorage()._layout = newValue}
    }
    /// Returns true if `layout` has been explicitly set.
    public var hasLayout: Bool {return _storage._layout != nil}
    /// Clears the value of `layout`. Subsequent reads from it will return its default value.
    public mutating func clearLayout() {_uniqueStorage()._layout = nil}

    /// A list of detected languages together with confidence.
    public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] {
      get {return _storage._detectedLanguages}
      set {_uniqueStorage()._detectedLanguages = newValue}
    }

    /// A list of visually detected text blocks on the page.
    /// A block has a set of lines (collected into paragraphs) that have a common
    /// line-spacing and orientation.
    public var blocks: [Google_Cloud_Documentai_V1beta3_Document.Page.Block] {
      get {return _storage._blocks}
      set {_uniqueStorage()._blocks = newValue}
    }

    /// A list of visually detected text paragraphs on the page.
    /// A collection of lines that a human would perceive as a paragraph.
    public var paragraphs: [Google_Cloud_Documentai_V1beta3_Document.Page.Paragraph] {
      get {return _storage._paragraphs}
      set {_uniqueStorage()._paragraphs = newValue}
    }

    /// A list of visually detected text lines on the page.
    /// A collection of tokens that a human would perceive as a line.
    public var lines: [Google_Cloud_Documentai_V1beta3_Document.Page.Line] {
      get {return _storage._lines}
      set {_uniqueStorage()._lines = newValue}
    }

    /// A list of visually detected tokens on the page.
    public var tokens: [Google_Cloud_Documentai_V1beta3_Document.Page.Token] {
      get {return _storage._tokens}
      set {_uniqueStorage()._tokens = newValue}
    }

    /// A list of detected non-text visual elements e.g. checkbox,
    /// signature etc. on the page.
    public var visualElements: [Google_Cloud_Documentai_V1beta3_Document.Page.VisualElement] {
      get {return _storage._visualElements}
      set {_uniqueStorage()._visualElements = newValue}
    }

    /// A list of visually detected tables on the page.
    public var tables: [Google_Cloud_Documentai_V1beta3_Document.Page.Table] {
      get {return _storage._tables}
      set {_uniqueStorage()._tables = newValue}
    }

    /// A list of visually detected form fields on the page.
    public var formFields: [Google_Cloud_Documentai_V1beta3_Document.Page.FormField] {
      get {return _storage._formFields}
      set {_uniqueStorage()._formFields = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Dimension for the page.
    public struct Dimension {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Page width.
      public var width: Float = 0

      /// Page height.
      public var height: Float = 0

      /// Dimension unit.
      public var unit: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Rendered image contents for this page.
    public struct Image {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Raw byte content of the image.
      public var content: Data = Data()

      /// Encoding mime type for the image.
      public var mimeType: String = String()

      /// Width of the image in pixels.
      public var width: Int32 = 0

      /// Height of the image in pixels.
      public var height: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Representation for transformation matrix, intended to be compatible and
    /// used with OpenCV format for image manipulation.
    public struct Matrix {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Number of rows in the matrix.
      public var rows: Int32 = 0

      /// Number of columns in the matrix.
      public var cols: Int32 = 0

      /// This encodes information about what data type the matrix uses.
      /// For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list
      /// of OpenCV primitive data types, please refer to
      /// https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html
      public var type: Int32 = 0

      /// The matrix data.
      public var data: Data = Data()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Visual element describing a layout unit on a page.
    public struct Layout {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Text anchor indexing into the [Document.text][google.cloud.documentai.v1beta3.Document.text].
      public var textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor {
        get {return _textAnchor ?? Google_Cloud_Documentai_V1beta3_Document.TextAnchor()}
        set {_textAnchor = newValue}
      }
      /// Returns true if `textAnchor` has been explicitly set.
      public var hasTextAnchor: Bool {return self._textAnchor != nil}
      /// Clears the value of `textAnchor`. Subsequent reads from it will return its default value.
      public mutating func clearTextAnchor() {self._textAnchor = nil}

      /// Confidence of the current [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] within context of the object this
      /// layout is for. e.g. confidence can be for a single token, a table,
      /// a visual element, etc. depending on context. Range [0, 1].
      public var confidence: Float = 0

      /// The bounding polygon for the [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout].
      public var boundingPoly: Google_Cloud_Documentai_V1beta3_BoundingPoly {
        get {return _boundingPoly ?? Google_Cloud_Documentai_V1beta3_BoundingPoly()}
        set {_boundingPoly = newValue}
      }
      /// Returns true if `boundingPoly` has been explicitly set.
      public var hasBoundingPoly: Bool {return self._boundingPoly != nil}
      /// Clears the value of `boundingPoly`. Subsequent reads from it will return its default value.
      public mutating func clearBoundingPoly() {self._boundingPoly = nil}

      /// Detected orientation for the [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout].
      public var orientation: Google_Cloud_Documentai_V1beta3_Document.Page.Layout.Orientation = .unspecified

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Detected human reading orientation.
      public enum Orientation: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Unspecified orientation.
        case unspecified // = 0

        /// Orientation is aligned with page up.
        case pageUp // = 1

        /// Orientation is aligned with page right.
        /// Turn the head 90 degrees clockwise from upright to read.
        case pageRight // = 2

        /// Orientation is aligned with page down.
        /// Turn the head 180 degrees from upright to read.
        case pageDown // = 3

        /// Orientation is aligned with page left.
        /// Turn the head 90 degrees counterclockwise from upright to read.
        case pageLeft // = 4
        case UNRECOGNIZED(Int)

        public init() {
          self = .unspecified
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unspecified
          case 1: self = .pageUp
          case 2: self = .pageRight
          case 3: self = .pageDown
          case 4: self = .pageLeft
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unspecified: return 0
          case .pageUp: return 1
          case .pageRight: return 2
          case .pageDown: return 3
          case .pageLeft: return 4
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}

      fileprivate var _textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor? = nil
      fileprivate var _boundingPoly: Google_Cloud_Documentai_V1beta3_BoundingPoly? = nil
    }

    /// A block has a set of lines (collected into paragraphs) that have a
    /// common line-spacing and orientation.
    public struct Block {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [Block][google.cloud.documentai.v1beta3.Document.Page.Block].
      public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_layout = newValue}
      }
      /// Returns true if `layout` has been explicitly set.
      public var hasLayout: Bool {return self._layout != nil}
      /// Clears the value of `layout`. Subsequent reads from it will return its default value.
      public mutating func clearLayout() {self._layout = nil}

      /// A list of detected languages together with confidence.
      public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      /// The history of this annotation.
      public var provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance {
        get {return _provenance ?? Google_Cloud_Documentai_V1beta3_Document.Provenance()}
        set {_provenance = newValue}
      }
      /// Returns true if `provenance` has been explicitly set.
      public var hasProvenance: Bool {return self._provenance != nil}
      /// Clears the value of `provenance`. Subsequent reads from it will return its default value.
      public mutating func clearProvenance() {self._provenance = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
      fileprivate var _provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance? = nil
    }

    /// A collection of lines that a human would perceive as a paragraph.
    public struct Paragraph {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [Paragraph][google.cloud.documentai.v1beta3.Document.Page.Paragraph].
      public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_layout = newValue}
      }
      /// Returns true if `layout` has been explicitly set.
      public var hasLayout: Bool {return self._layout != nil}
      /// Clears the value of `layout`. Subsequent reads from it will return its default value.
      public mutating func clearLayout() {self._layout = nil}

      /// A list of detected languages together with confidence.
      public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      /// The  history of this annotation.
      public var provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance {
        get {return _provenance ?? Google_Cloud_Documentai_V1beta3_Document.Provenance()}
        set {_provenance = newValue}
      }
      /// Returns true if `provenance` has been explicitly set.
      public var hasProvenance: Bool {return self._provenance != nil}
      /// Clears the value of `provenance`. Subsequent reads from it will return its default value.
      public mutating func clearProvenance() {self._provenance = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
      fileprivate var _provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance? = nil
    }

    /// A collection of tokens that a human would perceive as a line.
    /// Does not cross column boundaries, can be horizontal, vertical, etc.
    public struct Line {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [Line][google.cloud.documentai.v1beta3.Document.Page.Line].
      public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_layout = newValue}
      }
      /// Returns true if `layout` has been explicitly set.
      public var hasLayout: Bool {return self._layout != nil}
      /// Clears the value of `layout`. Subsequent reads from it will return its default value.
      public mutating func clearLayout() {self._layout = nil}

      /// A list of detected languages together with confidence.
      public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      /// The  history of this annotation.
      public var provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance {
        get {return _provenance ?? Google_Cloud_Documentai_V1beta3_Document.Provenance()}
        set {_provenance = newValue}
      }
      /// Returns true if `provenance` has been explicitly set.
      public var hasProvenance: Bool {return self._provenance != nil}
      /// Clears the value of `provenance`. Subsequent reads from it will return its default value.
      public mutating func clearProvenance() {self._provenance = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
      fileprivate var _provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance? = nil
    }

    /// A detected token.
    public struct Token {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [Token][google.cloud.documentai.v1beta3.Document.Page.Token].
      public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_layout = newValue}
      }
      /// Returns true if `layout` has been explicitly set.
      public var hasLayout: Bool {return self._layout != nil}
      /// Clears the value of `layout`. Subsequent reads from it will return its default value.
      public mutating func clearLayout() {self._layout = nil}

      /// Detected break at the end of a [Token][google.cloud.documentai.v1beta3.Document.Page.Token].
      public var detectedBreak: Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak {
        get {return _detectedBreak ?? Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak()}
        set {_detectedBreak = newValue}
      }
      /// Returns true if `detectedBreak` has been explicitly set.
      public var hasDetectedBreak: Bool {return self._detectedBreak != nil}
      /// Clears the value of `detectedBreak`. Subsequent reads from it will return its default value.
      public mutating func clearDetectedBreak() {self._detectedBreak = nil}

      /// A list of detected languages together with confidence.
      public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      /// The  history of this annotation.
      public var provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance {
        get {return _provenance ?? Google_Cloud_Documentai_V1beta3_Document.Provenance()}
        set {_provenance = newValue}
      }
      /// Returns true if `provenance` has been explicitly set.
      public var hasProvenance: Bool {return self._provenance != nil}
      /// Clears the value of `provenance`. Subsequent reads from it will return its default value.
      public mutating func clearProvenance() {self._provenance = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Detected break at the end of a [Token][google.cloud.documentai.v1beta3.Document.Page.Token].
      public struct DetectedBreak {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Detected break type.
        public var type: Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak.TypeEnum = .unspecified

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Enum to denote the type of break found.
        public enum TypeEnum: SwiftProtobuf.Enum {
          public typealias RawValue = Int

          /// Unspecified break type.
          case unspecified // = 0

          /// A single whitespace.
          case space // = 1

          /// A wider whitespace.
          case wideSpace // = 2

          /// A hyphen that indicates that a token has been split across lines.
          case hyphen // = 3
          case UNRECOGNIZED(Int)

          public init() {
            self = .unspecified
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unspecified
            case 1: self = .space
            case 2: self = .wideSpace
            case 3: self = .hyphen
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .unspecified: return 0
            case .space: return 1
            case .wideSpace: return 2
            case .hyphen: return 3
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        public init() {}
      }

      public init() {}

      fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
      fileprivate var _detectedBreak: Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak? = nil
      fileprivate var _provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance? = nil
    }

    /// Detected non-text visual elements e.g. checkbox, signature etc. on the
    /// page.
    public struct VisualElement {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [VisualElement][google.cloud.documentai.v1beta3.Document.Page.VisualElement].
      public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_layout = newValue}
      }
      /// Returns true if `layout` has been explicitly set.
      public var hasLayout: Bool {return self._layout != nil}
      /// Clears the value of `layout`. Subsequent reads from it will return its default value.
      public mutating func clearLayout() {self._layout = nil}

      /// Type of the [VisualElement][google.cloud.documentai.v1beta3.Document.Page.VisualElement].
      public var type: String = String()

      /// A list of detected languages together with confidence.
      public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
    }

    /// A table representation similar to HTML table structure.
    public struct Table {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [Table][google.cloud.documentai.v1beta3.Document.Page.Table].
      public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_layout = newValue}
      }
      /// Returns true if `layout` has been explicitly set.
      public var hasLayout: Bool {return self._layout != nil}
      /// Clears the value of `layout`. Subsequent reads from it will return its default value.
      public mutating func clearLayout() {self._layout = nil}

      /// Header rows of the table.
      public var headerRows: [Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableRow] = []

      /// Body rows of the table.
      public var bodyRows: [Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableRow] = []

      /// A list of detected languages together with confidence.
      public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// A row of table cells.
      public struct TableRow {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Cells that make up this row.
        public var cells: [Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableCell] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// A cell representation inside the table.
      public struct TableCell {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for [TableCell][google.cloud.documentai.v1beta3.Document.Page.Table.TableCell].
        public var layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
          get {return _layout ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
          set {_layout = newValue}
        }
        /// Returns true if `layout` has been explicitly set.
        public var hasLayout: Bool {return self._layout != nil}
        /// Clears the value of `layout`. Subsequent reads from it will return its default value.
        public mutating func clearLayout() {self._layout = nil}

        /// How many rows this cell spans.
        public var rowSpan: Int32 = 0

        /// How many columns this cell spans.
        public var colSpan: Int32 = 0

        /// A list of detected languages together with confidence.
        public var detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
      }

      public init() {}

      fileprivate var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
    }

    /// A form field detected on the page.
    public struct FormField {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for the [FormField][google.cloud.documentai.v1beta3.Document.Page.FormField] name. e.g. `Address`, `Email`,
      /// `Grand total`, `Phone number`, etc.
      public var fieldName: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _fieldName ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_fieldName = newValue}
      }
      /// Returns true if `fieldName` has been explicitly set.
      public var hasFieldName: Bool {return self._fieldName != nil}
      /// Clears the value of `fieldName`. Subsequent reads from it will return its default value.
      public mutating func clearFieldName() {self._fieldName = nil}

      /// [Layout][google.cloud.documentai.v1beta3.Document.Page.Layout] for the [FormField][google.cloud.documentai.v1beta3.Document.Page.FormField] value.
      public var fieldValue: Google_Cloud_Documentai_V1beta3_Document.Page.Layout {
        get {return _fieldValue ?? Google_Cloud_Documentai_V1beta3_Document.Page.Layout()}
        set {_fieldValue = newValue}
      }
      /// Returns true if `fieldValue` has been explicitly set.
      public var hasFieldValue: Bool {return self._fieldValue != nil}
      /// Clears the value of `fieldValue`. Subsequent reads from it will return its default value.
      public mutating func clearFieldValue() {self._fieldValue = nil}

      /// A list of detected languages for name together with confidence.
      public var nameDetectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      /// A list of detected languages for value together with confidence.
      public var valueDetectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []

      /// If the value is non-textual, this field represents the type. Current
      /// valid values are:
      /// - blank (this indicates the field_value is normal text)
      /// - "unfilled_checkbox"
      /// - "filled_checkbox"
      public var valueType: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _fieldName: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
      fileprivate var _fieldValue: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
    }

    /// Detected language for a structural component.
    public struct DetectedLanguage {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The BCP-47 language code, such as "en-US" or "sr-Latn". For more
      /// information, see
      /// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
      public var languageCode: String = String()

      /// Confidence of detected language. Range [0, 1].
      public var confidence: Float = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// A phrase in the text that is a known entity type, such as a person, an
  /// organization, or location.
  public struct Entity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Provenance of the entity.
    /// Text anchor indexing into the [Document.text][google.cloud.documentai.v1beta3.Document.text].
    public var textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor {
      get {return _storage._textAnchor ?? Google_Cloud_Documentai_V1beta3_Document.TextAnchor()}
      set {_uniqueStorage()._textAnchor = newValue}
    }
    /// Returns true if `textAnchor` has been explicitly set.
    public var hasTextAnchor: Bool {return _storage._textAnchor != nil}
    /// Clears the value of `textAnchor`. Subsequent reads from it will return its default value.
    public mutating func clearTextAnchor() {_uniqueStorage()._textAnchor = nil}

    /// Entity type from a schema e.g. `Address`.
    public var type: String {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    /// Text value in the document e.g. `1600 Amphitheatre Pkwy`.
    public var mentionText: String {
      get {return _storage._mentionText}
      set {_uniqueStorage()._mentionText = newValue}
    }

    /// Deprecated.  Use `id` field instead.
    public var mentionID: String {
      get {return _storage._mentionID}
      set {_uniqueStorage()._mentionID = newValue}
    }

    /// Optional. Confidence of detected Schema entity. Range [0, 1].
    public var confidence: Float {
      get {return _storage._confidence}
      set {_uniqueStorage()._confidence = newValue}
    }

    /// Optional. Represents the provenance of this entity wrt. the location on the
    /// page where it was found.
    public var pageAnchor: Google_Cloud_Documentai_V1beta3_Document.PageAnchor {
      get {return _storage._pageAnchor ?? Google_Cloud_Documentai_V1beta3_Document.PageAnchor()}
      set {_uniqueStorage()._pageAnchor = newValue}
    }
    /// Returns true if `pageAnchor` has been explicitly set.
    public var hasPageAnchor: Bool {return _storage._pageAnchor != nil}
    /// Clears the value of `pageAnchor`. Subsequent reads from it will return its default value.
    public mutating func clearPageAnchor() {_uniqueStorage()._pageAnchor = nil}

    /// Canonical id. This will be a unique value in the entity list
    /// for this document.
    public var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    /// Optional. Normalized entity value. Absent if the extracted value could not be
    /// converted or the type (e.g. address) is not supported for certain
    /// parsers. This field is also only populated for certain supported document
    /// types.
    public var normalizedValue: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue {
      get {return _storage._normalizedValue ?? Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue()}
      set {_uniqueStorage()._normalizedValue = newValue}
    }
    /// Returns true if `normalizedValue` has been explicitly set.
    public var hasNormalizedValue: Bool {return _storage._normalizedValue != nil}
    /// Clears the value of `normalizedValue`. Subsequent reads from it will return its default value.
    public mutating func clearNormalizedValue() {_uniqueStorage()._normalizedValue = nil}

    /// Optional. Entities can be nested to form a hierarchical data structure representing
    /// the content in the document.
    public var properties: [Google_Cloud_Documentai_V1beta3_Document.Entity] {
      get {return _storage._properties}
      set {_uniqueStorage()._properties = newValue}
    }

    /// Optional. The history of this annotation.
    public var provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance {
      get {return _storage._provenance ?? Google_Cloud_Documentai_V1beta3_Document.Provenance()}
      set {_uniqueStorage()._provenance = newValue}
    }
    /// Returns true if `provenance` has been explicitly set.
    public var hasProvenance: Bool {return _storage._provenance != nil}
    /// Clears the value of `provenance`. Subsequent reads from it will return its default value.
    public mutating func clearProvenance() {_uniqueStorage()._provenance = nil}

    /// Optional. Whether the entity will be redacted for de-identification purposes.
    public var redacted: Bool {
      get {return _storage._redacted}
      set {_uniqueStorage()._redacted = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Parsed and normalized entity value.
    public struct NormalizedValue {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Structured entity value. Must match entity type defined in schema if
      /// known. If this field is present, the 'text' field is still populated.
      public var structuredValue: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue.OneOf_StructuredValue? = nil

      /// Money value. See also:
      ///
      /// https:
      /// github.com/googleapis/googleapis/blob/master/google/type/money.proto
      public var moneyValue: Google_Type_Money {
        get {
          if case .moneyValue(let v)? = structuredValue {return v}
          return Google_Type_Money()
        }
        set {structuredValue = .moneyValue(newValue)}
      }

      /// Date value. Includes year, month, day. See also:
      ///
      /// https:
      /// github.com/googleapis/googleapis/blob/master/google/type/date.proto
      public var dateValue: Google_Type_Date {
        get {
          if case .dateValue(let v)? = structuredValue {return v}
          return Google_Type_Date()
        }
        set {structuredValue = .dateValue(newValue)}
      }

      /// DateTime value. Includes date, time, and timezone. See also:
      ///
      /// https:
      /// github.com/googleapis/googleapis/blob/master/google/type/datetime.proto
      public var datetimeValue: Google_Type_DateTime {
        get {
          if case .datetimeValue(let v)? = structuredValue {return v}
          return Google_Type_DateTime()
        }
        set {structuredValue = .datetimeValue(newValue)}
      }

      /// Postal address. See also:
      ///
      /// https:
      /// github.com/googleapis/googleapis/blob/master/google/type/postal_address.proto
      public var addressValue: Google_Type_PostalAddress {
        get {
          if case .addressValue(let v)? = structuredValue {return v}
          return Google_Type_PostalAddress()
        }
        set {structuredValue = .addressValue(newValue)}
      }

      /// Required. Normalized entity value stored as a string. This field is populated for
      /// supported document type (e.g. Invoice). For some entity types, one of
      /// respective 'structured_value' fields may also be populated.
      ///
      /// - Money/Currency type (`money_value`) is in the ISO 4217 text format.
      /// - Date type (`date_value`) is in the ISO 8601 text format.
      /// - Datetime type (`datetime_value`) is in the ISO 8601 text format.
      public var text: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Structured entity value. Must match entity type defined in schema if
      /// known. If this field is present, the 'text' field is still populated.
      public enum OneOf_StructuredValue: Equatable {
        /// Money value. See also:
        ///
        /// https:
        /// github.com/googleapis/googleapis/blob/master/google/type/money.proto
        case moneyValue(Google_Type_Money)
        /// Date value. Includes year, month, day. See also:
        ///
        /// https:
        /// github.com/googleapis/googleapis/blob/master/google/type/date.proto
        case dateValue(Google_Type_Date)
        /// DateTime value. Includes date, time, and timezone. See also:
        ///
        /// https:
        /// github.com/googleapis/googleapis/blob/master/google/type/datetime.proto
        case datetimeValue(Google_Type_DateTime)
        /// Postal address. See also:
        ///
        /// https:
        /// github.com/googleapis/googleapis/blob/master/google/type/postal_address.proto
        case addressValue(Google_Type_PostalAddress)

      #if !swift(>=4.1)
        public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue.OneOf_StructuredValue, rhs: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue.OneOf_StructuredValue) -> Bool {
          // The use of inline closures is to circumvent an issue where the compiler
          // allocates stack space for every case branch when no optimizations are
          // enabled. https://github.com/apple/swift-protobuf/issues/1034
          switch (lhs, rhs) {
          case (.moneyValue, .moneyValue): return {
            guard case .moneyValue(let l) = lhs, case .moneyValue(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.dateValue, .dateValue): return {
            guard case .dateValue(let l) = lhs, case .dateValue(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.datetimeValue, .datetimeValue): return {
            guard case .datetimeValue(let l) = lhs, case .datetimeValue(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.addressValue, .addressValue): return {
            guard case .addressValue(let l) = lhs, case .addressValue(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          default: return false
          }
        }
      #endif
      }

      public init() {}
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Relationship between [Entities][google.cloud.documentai.v1beta3.Document.Entity].
  public struct EntityRelation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Subject entity id.
    public var subjectID: String = String()

    /// Object entity id.
    public var objectID: String = String()

    /// Relationship description.
    public var relation: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// A translation of the text segment.
  public struct Translation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Provenance of the translation.
    /// Text anchor indexing into the [Document.text][google.cloud.documentai.v1beta3.Document.text].  There can only be a
    /// single `TextAnchor.text_segments` element.  If the start and
    /// end index of the text segment are the same, the text change is inserted
    /// before that index.
    public var textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor {
      get {return _textAnchor ?? Google_Cloud_Documentai_V1beta3_Document.TextAnchor()}
      set {_textAnchor = newValue}
    }
    /// Returns true if `textAnchor` has been explicitly set.
    public var hasTextAnchor: Bool {return self._textAnchor != nil}
    /// Clears the value of `textAnchor`. Subsequent reads from it will return its default value.
    public mutating func clearTextAnchor() {self._textAnchor = nil}

    /// The BCP-47 language code, such as "en-US" or "sr-Latn". For more
    /// information, see
    /// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
    public var languageCode: String = String()

    /// Text translated into the target language.
    public var translatedText: String = String()

    /// The history of this annotation.
    public var provenance: [Google_Cloud_Documentai_V1beta3_Document.Provenance] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor? = nil
  }

  /// Text reference indexing into the [Document.text][google.cloud.documentai.v1beta3.Document.text].
  public struct TextAnchor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The text segments from the [Document.text][google.cloud.documentai.v1beta3.Document.text].
    public var textSegments: [Google_Cloud_Documentai_V1beta3_Document.TextAnchor.TextSegment] = []

    /// Contains the content of the text span so that users do
    /// not have to look it up in the text_segments.
    public var content: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// A text segment in the [Document.text][google.cloud.documentai.v1beta3.Document.text]. The indices may be out of bounds
    /// which indicate that the text extends into another document shard for
    /// large sharded documents. See [ShardInfo.text_offset][google.cloud.documentai.v1beta3.Document.ShardInfo.text_offset]
    public struct TextSegment {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// [TextSegment][google.cloud.documentai.v1beta3.Document.TextAnchor.TextSegment] start UTF-8 char index in the [Document.text][google.cloud.documentai.v1beta3.Document.text].
      public var startIndex: Int64 = 0

      /// [TextSegment][google.cloud.documentai.v1beta3.Document.TextAnchor.TextSegment] half open end UTF-8 char index in the
      /// [Document.text][google.cloud.documentai.v1beta3.Document.text].
      public var endIndex: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  /// Referencing the visual context of the entity in the [Document.pages][google.cloud.documentai.v1beta3.Document.pages].
  /// Page anchors can be cross-page, consist of multiple bounding polygons and
  /// optionally reference specific layout element types.
  public struct PageAnchor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// One or more references to visual page elements
    public var pageRefs: [Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Represents a weak reference to a page element within a document.
    public struct PageRef {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. Index into the [Document.pages][google.cloud.documentai.v1beta3.Document.pages] element
      public var page: Int64 = 0

      /// Optional. The type of the layout element that is being referenced if any.
      public var layoutType: Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef.LayoutType = .unspecified

      /// Optional. Deprecated.  Use [PageRef.bounding_poly][google.cloud.documentai.v1beta3.Document.PageAnchor.PageRef.bounding_poly] instead.
      public var layoutID: String = String()

      /// Optional. Identifies the bounding polygon of a layout element on the page.
      public var boundingPoly: Google_Cloud_Documentai_V1beta3_BoundingPoly {
        get {return _boundingPoly ?? Google_Cloud_Documentai_V1beta3_BoundingPoly()}
        set {_boundingPoly = newValue}
      }
      /// Returns true if `boundingPoly` has been explicitly set.
      public var hasBoundingPoly: Bool {return self._boundingPoly != nil}
      /// Clears the value of `boundingPoly`. Subsequent reads from it will return its default value.
      public mutating func clearBoundingPoly() {self._boundingPoly = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// The type of layout that is being referenced.
      public enum LayoutType: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Layout Unspecified.
        case unspecified // = 0

        /// References a [Page.blocks][google.cloud.documentai.v1beta3.Document.Page.blocks] element.
        case block // = 1

        /// References a [Page.paragraphs][google.cloud.documentai.v1beta3.Document.Page.paragraphs] element.
        case paragraph // = 2

        /// References a [Page.lines][google.cloud.documentai.v1beta3.Document.Page.lines] element.
        case line // = 3

        /// References a [Page.tokens][google.cloud.documentai.v1beta3.Document.Page.tokens] element.
        case token // = 4

        /// References a [Page.visual_elements][google.cloud.documentai.v1beta3.Document.Page.visual_elements] element.
        case visualElement // = 5

        /// Refrrences a [Page.tables][google.cloud.documentai.v1beta3.Document.Page.tables] element.
        case table // = 6

        /// References a [Page.form_fields][google.cloud.documentai.v1beta3.Document.Page.form_fields] element.
        case formField // = 7
        case UNRECOGNIZED(Int)

        public init() {
          self = .unspecified
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unspecified
          case 1: self = .block
          case 2: self = .paragraph
          case 3: self = .line
          case 4: self = .token
          case 5: self = .visualElement
          case 6: self = .table
          case 7: self = .formField
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unspecified: return 0
          case .block: return 1
          case .paragraph: return 2
          case .line: return 3
          case .token: return 4
          case .visualElement: return 5
          case .table: return 6
          case .formField: return 7
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}

      fileprivate var _boundingPoly: Google_Cloud_Documentai_V1beta3_BoundingPoly? = nil
    }

    public init() {}
  }

  /// Structure to identify provenance relationships between annotations in
  /// different revisions.
  public struct Provenance {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The index of the revision that produced this element.
    public var revision: Int32 = 0

    /// The Id of this operation.  Needs to be unique within the scope of the
    /// revision.
    public var id: Int32 = 0

    /// References to the original elements that are replaced.
    public var parents: [Google_Cloud_Documentai_V1beta3_Document.Provenance.Parent] = []

    /// The type of provenance operation.
    public var type: Google_Cloud_Documentai_V1beta3_Document.Provenance.OperationType = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// If a processor or agent does an explicit operation on existing elements.
    public enum OperationType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Operation type unspecified.
      case unspecified // = 0

      /// Add an element.  Implicit if no `parents` are set for the provenance.
      case add // = 1

      /// The element is removed.  No `parents` should be set.
      case remove // = 2

      /// Explicitly replaces the element(s) identified by `parents`.
      case replace // = 3

      /// Element is requested for human review.
      case evalRequested // = 4

      /// Element is review and approved at human review, confidence will be set
      /// to 1.0
      case evalApproved // = 5
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .add
        case 2: self = .remove
        case 3: self = .replace
        case 4: self = .evalRequested
        case 5: self = .evalApproved
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .add: return 1
        case .remove: return 2
        case .replace: return 3
        case .evalRequested: return 4
        case .evalApproved: return 5
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// Structure for referencing parent provenances.  When an element replaces
    /// one of more other elements parent references identify the elements that
    /// are replaced.
    public struct Parent {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The index of the [Document.revisions] identifying the parent revision.
      public var revision: Int32 = 0

      /// The id of the parent provenance.
      public var id: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  /// Contains past or forward revisions of this document.
  public struct Revision {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Who/what made the change
    public var source: Google_Cloud_Documentai_V1beta3_Document.Revision.OneOf_Source? = nil

    /// If the change was made by a person specify the name or id of that
    /// person.
    public var agent: String {
      get {
        if case .agent(let v)? = source {return v}
        return String()
      }
      set {source = .agent(newValue)}
    }

    /// If the annotation was made by processor identify the processor by its
    /// resource name.
    public var processor: String {
      get {
        if case .processor(let v)? = source {return v}
        return String()
      }
      set {source = .processor(newValue)}
    }

    /// Id of the revision.  Unique within the context of the document.
    public var id: String = String()

    /// The revisions that this revision is based on.  This can include one or
    /// more parent (when documents are merged.)  This field represents the
    /// index into the `revisions` field.
    public var parent: [Int32] = []

    /// The time that the revision was created.
    public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createTime = newValue}
    }
    /// Returns true if `createTime` has been explicitly set.
    public var hasCreateTime: Bool {return self._createTime != nil}
    /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
    public mutating func clearCreateTime() {self._createTime = nil}

    /// Human Review information of this revision.
    public var humanReview: Google_Cloud_Documentai_V1beta3_Document.Revision.HumanReview {
      get {return _humanReview ?? Google_Cloud_Documentai_V1beta3_Document.Revision.HumanReview()}
      set {_humanReview = newValue}
    }
    /// Returns true if `humanReview` has been explicitly set.
    public var hasHumanReview: Bool {return self._humanReview != nil}
    /// Clears the value of `humanReview`. Subsequent reads from it will return its default value.
    public mutating func clearHumanReview() {self._humanReview = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Who/what made the change
    public enum OneOf_Source: Equatable {
      /// If the change was made by a person specify the name or id of that
      /// person.
      case agent(String)
      /// If the annotation was made by processor identify the processor by its
      /// resource name.
      case processor(String)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Revision.OneOf_Source, rhs: Google_Cloud_Documentai_V1beta3_Document.Revision.OneOf_Source) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.agent, .agent): return {
          guard case .agent(let l) = lhs, case .agent(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processor, .processor): return {
          guard case .processor(let l) = lhs, case .processor(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    /// Human Review information of the document.
    public struct HumanReview {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Human review state. e.g. `requested`, `succeeded`, `rejected`.
      public var state: String = String()

      /// A message providing more details about the current state of processing.
      /// For example, the rejection reason when the state is `rejected`.
      public var stateMessage: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _humanReview: Google_Cloud_Documentai_V1beta3_Document.Revision.HumanReview? = nil
  }

  /// This message is used for text changes aka. OCR corrections.
  public struct TextChange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Provenance of the correction.
    /// Text anchor indexing into the [Document.text][google.cloud.documentai.v1beta3.Document.text].  There can only be a
    /// single `TextAnchor.text_segments` element.  If the start and
    /// end index of the text segment are the same, the text change is inserted
    /// before that index.
    public var textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor {
      get {return _textAnchor ?? Google_Cloud_Documentai_V1beta3_Document.TextAnchor()}
      set {_textAnchor = newValue}
    }
    /// Returns true if `textAnchor` has been explicitly set.
    public var hasTextAnchor: Bool {return self._textAnchor != nil}
    /// Clears the value of `textAnchor`. Subsequent reads from it will return its default value.
    public mutating func clearTextAnchor() {self._textAnchor = nil}

    /// The text that replaces the text identified in the `text_anchor`.
    public var changedText: String = String()

    /// The history of this annotation.
    public var provenance: [Google_Cloud_Documentai_V1beta3_Document.Provenance] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor? = nil
  }

  public init() {}

  fileprivate var _shardInfo: Google_Cloud_Documentai_V1beta3_Document.ShardInfo? = nil
  fileprivate var _error: Google_Rpc_Status? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Documentai_V1beta3_Document.Page.Layout.Orientation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta3_Document.Page.Layout.Orientation] = [
    .unspecified,
    .pageUp,
    .pageRight,
    .pageDown,
    .pageLeft,
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak.TypeEnum] = [
    .unspecified,
    .space,
    .wideSpace,
    .hyphen,
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef.LayoutType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef.LayoutType] = [
    .unspecified,
    .block,
    .paragraph,
    .line,
    .token,
    .visualElement,
    .table,
    .formField,
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.Provenance.OperationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Documentai_V1beta3_Document.Provenance.OperationType] = [
    .unspecified,
    .add,
    .remove,
    .replace,
    .evalRequested,
    .evalApproved,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.documentai.v1beta3"

extension Google_Cloud_Documentai_V1beta3_Document: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Document"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "content"),
    3: .standard(proto: "mime_type"),
    4: .same(proto: "text"),
    5: .standard(proto: "text_styles"),
    6: .same(proto: "pages"),
    7: .same(proto: "entities"),
    8: .standard(proto: "entity_relations"),
    12: .same(proto: "translations"),
    14: .standard(proto: "text_changes"),
    9: .standard(proto: "shard_info"),
    10: .same(proto: "error"),
    13: .same(proto: "revisions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.source = .uri(v)}
      }()
      case 2: try {
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.source = .content(v)}
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.textStyles) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.pages) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.entities) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.entityRelations) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._shardInfo) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.translations) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.revisions) }()
      case 14: try { try decoder.decodeRepeatedMessageField(value: &self.textChanges) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.source {
    case .uri?: try {
      guard case .uri(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .content?: try {
      guard case .content(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if !self.textStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textStyles, fieldNumber: 5)
    }
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 6)
    }
    if !self.entities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entities, fieldNumber: 7)
    }
    if !self.entityRelations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entityRelations, fieldNumber: 8)
    }
    if let v = self._shardInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if !self.translations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.translations, fieldNumber: 12)
    }
    if !self.revisions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revisions, fieldNumber: 13)
    }
    if !self.textChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textChanges, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document, rhs: Google_Cloud_Documentai_V1beta3_Document) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.text != rhs.text {return false}
    if lhs.textStyles != rhs.textStyles {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.entities != rhs.entities {return false}
    if lhs.entityRelations != rhs.entityRelations {return false}
    if lhs.translations != rhs.translations {return false}
    if lhs.textChanges != rhs.textChanges {return false}
    if lhs._shardInfo != rhs._shardInfo {return false}
    if lhs._error != rhs._error {return false}
    if lhs.revisions != rhs.revisions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.ShardInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".ShardInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shard_index"),
    2: .standard(proto: "shard_count"),
    3: .standard(proto: "text_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shardIndex) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shardCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.textOffset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shardIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.shardIndex, fieldNumber: 1)
    }
    if self.shardCount != 0 {
      try visitor.visitSingularInt64Field(value: self.shardCount, fieldNumber: 2)
    }
    if self.textOffset != 0 {
      try visitor.visitSingularInt64Field(value: self.textOffset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.ShardInfo, rhs: Google_Cloud_Documentai_V1beta3_Document.ShardInfo) -> Bool {
    if lhs.shardIndex != rhs.shardIndex {return false}
    if lhs.shardCount != rhs.shardCount {return false}
    if lhs.textOffset != rhs.textOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_anchor"),
    2: .same(proto: "color"),
    3: .standard(proto: "background_color"),
    4: .standard(proto: "font_weight"),
    5: .standard(proto: "text_style"),
    6: .standard(proto: "text_decoration"),
    7: .standard(proto: "font_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._textAnchor) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._backgroundColor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fontWeight) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.textStyle) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.textDecoration) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._fontSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._textAnchor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._backgroundColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.fontWeight.isEmpty {
      try visitor.visitSingularStringField(value: self.fontWeight, fieldNumber: 4)
    }
    if !self.textStyle.isEmpty {
      try visitor.visitSingularStringField(value: self.textStyle, fieldNumber: 5)
    }
    if !self.textDecoration.isEmpty {
      try visitor.visitSingularStringField(value: self.textDecoration, fieldNumber: 6)
    }
    if let v = self._fontSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Style, rhs: Google_Cloud_Documentai_V1beta3_Document.Style) -> Bool {
    if lhs._textAnchor != rhs._textAnchor {return false}
    if lhs._color != rhs._color {return false}
    if lhs._backgroundColor != rhs._backgroundColor {return false}
    if lhs.fontWeight != rhs.fontWeight {return false}
    if lhs.textStyle != rhs.textStyle {return false}
    if lhs.textDecoration != rhs.textDecoration {return false}
    if lhs._fontSize != rhs._fontSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Style.FontSize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Style.protoMessageName + ".FontSize"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
    2: .same(proto: "unit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.size) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.unit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.size != 0 {
      try visitor.visitSingularFloatField(value: self.size, fieldNumber: 1)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Style.FontSize, rhs: Google_Cloud_Documentai_V1beta3_Document.Style.FontSize) -> Bool {
    if lhs.size != rhs.size {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_number"),
    13: .same(proto: "image"),
    14: .same(proto: "transforms"),
    2: .same(proto: "dimension"),
    3: .same(proto: "layout"),
    4: .standard(proto: "detected_languages"),
    5: .same(proto: "blocks"),
    6: .same(proto: "paragraphs"),
    7: .same(proto: "lines"),
    8: .same(proto: "tokens"),
    9: .standard(proto: "visual_elements"),
    10: .same(proto: "tables"),
    11: .standard(proto: "form_fields"),
  ]

  fileprivate class _StorageClass {
    var _pageNumber: Int32 = 0
    var _image: Google_Cloud_Documentai_V1beta3_Document.Page.Image? = nil
    var _transforms: [Google_Cloud_Documentai_V1beta3_Document.Page.Matrix] = []
    var _dimension: Google_Cloud_Documentai_V1beta3_Document.Page.Dimension? = nil
    var _layout: Google_Cloud_Documentai_V1beta3_Document.Page.Layout? = nil
    var _detectedLanguages: [Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage] = []
    var _blocks: [Google_Cloud_Documentai_V1beta3_Document.Page.Block] = []
    var _paragraphs: [Google_Cloud_Documentai_V1beta3_Document.Page.Paragraph] = []
    var _lines: [Google_Cloud_Documentai_V1beta3_Document.Page.Line] = []
    var _tokens: [Google_Cloud_Documentai_V1beta3_Document.Page.Token] = []
    var _visualElements: [Google_Cloud_Documentai_V1beta3_Document.Page.VisualElement] = []
    var _tables: [Google_Cloud_Documentai_V1beta3_Document.Page.Table] = []
    var _formFields: [Google_Cloud_Documentai_V1beta3_Document.Page.FormField] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pageNumber = source._pageNumber
      _image = source._image
      _transforms = source._transforms
      _dimension = source._dimension
      _layout = source._layout
      _detectedLanguages = source._detectedLanguages
      _blocks = source._blocks
      _paragraphs = source._paragraphs
      _lines = source._lines
      _tokens = source._tokens
      _visualElements = source._visualElements
      _tables = source._tables
      _formFields = source._formFields
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._pageNumber) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._dimension) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._layout) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._detectedLanguages) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._blocks) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._paragraphs) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._lines) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._tokens) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._visualElements) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._tables) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._formFields) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._image) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._transforms) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._pageNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageNumber, fieldNumber: 1)
      }
      if let v = _storage._dimension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._layout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._detectedLanguages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._detectedLanguages, fieldNumber: 4)
      }
      if !_storage._blocks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._blocks, fieldNumber: 5)
      }
      if !_storage._paragraphs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._paragraphs, fieldNumber: 6)
      }
      if !_storage._lines.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._lines, fieldNumber: 7)
      }
      if !_storage._tokens.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tokens, fieldNumber: 8)
      }
      if !_storage._visualElements.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._visualElements, fieldNumber: 9)
      }
      if !_storage._tables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tables, fieldNumber: 10)
      }
      if !_storage._formFields.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._formFields, fieldNumber: 11)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._transforms.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._transforms, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page, rhs: Google_Cloud_Documentai_V1beta3_Document.Page) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pageNumber != rhs_storage._pageNumber {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._transforms != rhs_storage._transforms {return false}
        if _storage._dimension != rhs_storage._dimension {return false}
        if _storage._layout != rhs_storage._layout {return false}
        if _storage._detectedLanguages != rhs_storage._detectedLanguages {return false}
        if _storage._blocks != rhs_storage._blocks {return false}
        if _storage._paragraphs != rhs_storage._paragraphs {return false}
        if _storage._lines != rhs_storage._lines {return false}
        if _storage._tokens != rhs_storage._tokens {return false}
        if _storage._visualElements != rhs_storage._visualElements {return false}
        if _storage._tables != rhs_storage._tables {return false}
        if _storage._formFields != rhs_storage._formFields {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Dimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Dimension"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
    3: .same(proto: "unit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.width) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.height) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.unit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularFloatField(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularFloatField(value: self.height, fieldNumber: 2)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Dimension, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Dimension) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "mime_type"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 1)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Image, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Image) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Matrix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Matrix"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rows"),
    2: .same(proto: "cols"),
    3: .same(proto: "type"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rows) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.cols) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rows != 0 {
      try visitor.visitSingularInt32Field(value: self.rows, fieldNumber: 1)
    }
    if self.cols != 0 {
      try visitor.visitSingularInt32Field(value: self.cols, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Matrix, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Matrix) -> Bool {
    if lhs.rows != rhs.rows {return false}
    if lhs.cols != rhs.cols {return false}
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Layout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Layout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_anchor"),
    2: .same(proto: "confidence"),
    3: .standard(proto: "bounding_poly"),
    4: .same(proto: "orientation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._textAnchor) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidence) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._boundingPoly) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.orientation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._textAnchor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
    }
    if let v = self._boundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.orientation != .unspecified {
      try visitor.visitSingularEnumField(value: self.orientation, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Layout, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Layout) -> Bool {
    if lhs._textAnchor != rhs._textAnchor {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs._boundingPoly != rhs._boundingPoly {return false}
    if lhs.orientation != rhs.orientation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Layout.Orientation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORIENTATION_UNSPECIFIED"),
    1: .same(proto: "PAGE_UP"),
    2: .same(proto: "PAGE_RIGHT"),
    3: .same(proto: "PAGE_DOWN"),
    4: .same(proto: "PAGE_LEFT"),
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Block"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "detected_languages"),
    3: .same(proto: "provenance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._provenance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 2)
    }
    if let v = self._provenance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Block, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Block) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs._provenance != rhs._provenance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Paragraph: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Paragraph"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "detected_languages"),
    3: .same(proto: "provenance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._provenance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 2)
    }
    if let v = self._provenance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Paragraph, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Paragraph) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs._provenance != rhs._provenance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Line: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Line"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "detected_languages"),
    3: .same(proto: "provenance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._provenance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 2)
    }
    if let v = self._provenance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Line, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Line) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs._provenance != rhs._provenance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "detected_break"),
    3: .standard(proto: "detected_languages"),
    4: .same(proto: "provenance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._detectedBreak) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._provenance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._detectedBreak {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 3)
    }
    if let v = self._provenance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Token, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Token) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs._detectedBreak != rhs._detectedBreak {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs._provenance != rhs._provenance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.Token.protoMessageName + ".DetectedBreak"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Token.DetectedBreak.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "SPACE"),
    2: .same(proto: "WIDE_SPACE"),
    3: .same(proto: "HYPHEN"),
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.VisualElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".VisualElement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .same(proto: "type"),
    3: .standard(proto: "detected_languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.VisualElement, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.VisualElement) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs.type != rhs.type {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Table: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".Table"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "header_rows"),
    3: .standard(proto: "body_rows"),
    4: .standard(proto: "detected_languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.headerRows) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.bodyRows) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.headerRows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headerRows, fieldNumber: 2)
    }
    if !self.bodyRows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bodyRows, fieldNumber: 3)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Table, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Table) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs.headerRows != rhs.headerRows {return false}
    if lhs.bodyRows != rhs.bodyRows {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.Table.protoMessageName + ".TableRow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cells"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cells) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cells.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cells, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableRow, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableRow) -> Bool {
    if lhs.cells != rhs.cells {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableCell: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.Table.protoMessageName + ".TableCell"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "row_span"),
    3: .standard(proto: "col_span"),
    4: .standard(proto: "detected_languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.rowSpan) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.colSpan) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.detectedLanguages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.rowSpan != 0 {
      try visitor.visitSingularInt32Field(value: self.rowSpan, fieldNumber: 2)
    }
    if self.colSpan != 0 {
      try visitor.visitSingularInt32Field(value: self.colSpan, fieldNumber: 3)
    }
    if !self.detectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detectedLanguages, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableCell, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.Table.TableCell) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs.rowSpan != rhs.rowSpan {return false}
    if lhs.colSpan != rhs.colSpan {return false}
    if lhs.detectedLanguages != rhs.detectedLanguages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.FormField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".FormField"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name"),
    2: .standard(proto: "field_value"),
    3: .standard(proto: "name_detected_languages"),
    4: .standard(proto: "value_detected_languages"),
    5: .standard(proto: "value_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fieldName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fieldValue) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.nameDetectedLanguages) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.valueDetectedLanguages) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.valueType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fieldName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fieldValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nameDetectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nameDetectedLanguages, fieldNumber: 3)
    }
    if !self.valueDetectedLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.valueDetectedLanguages, fieldNumber: 4)
    }
    if !self.valueType.isEmpty {
      try visitor.visitSingularStringField(value: self.valueType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.FormField, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.FormField) -> Bool {
    if lhs._fieldName != rhs._fieldName {return false}
    if lhs._fieldValue != rhs._fieldValue {return false}
    if lhs.nameDetectedLanguages != rhs.nameDetectedLanguages {return false}
    if lhs.valueDetectedLanguages != rhs.valueDetectedLanguages {return false}
    if lhs.valueType != rhs.valueType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Page.protoMessageName + ".DetectedLanguage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_code"),
    2: .same(proto: "confidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.confidence) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage, rhs: Google_Cloud_Documentai_V1beta3_Document.Page.DetectedLanguage) -> Bool {
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Entity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".Entity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_anchor"),
    2: .same(proto: "type"),
    3: .standard(proto: "mention_text"),
    4: .standard(proto: "mention_id"),
    5: .same(proto: "confidence"),
    6: .standard(proto: "page_anchor"),
    7: .same(proto: "id"),
    9: .standard(proto: "normalized_value"),
    10: .same(proto: "properties"),
    11: .same(proto: "provenance"),
    12: .same(proto: "redacted"),
  ]

  fileprivate class _StorageClass {
    var _textAnchor: Google_Cloud_Documentai_V1beta3_Document.TextAnchor? = nil
    var _type: String = String()
    var _mentionText: String = String()
    var _mentionID: String = String()
    var _confidence: Float = 0
    var _pageAnchor: Google_Cloud_Documentai_V1beta3_Document.PageAnchor? = nil
    var _id: String = String()
    var _normalizedValue: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue? = nil
    var _properties: [Google_Cloud_Documentai_V1beta3_Document.Entity] = []
    var _provenance: Google_Cloud_Documentai_V1beta3_Document.Provenance? = nil
    var _redacted: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _textAnchor = source._textAnchor
      _type = source._type
      _mentionText = source._mentionText
      _mentionID = source._mentionID
      _confidence = source._confidence
      _pageAnchor = source._pageAnchor
      _id = source._id
      _normalizedValue = source._normalizedValue
      _properties = source._properties
      _provenance = source._provenance
      _redacted = source._redacted
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._textAnchor) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._mentionText) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._mentionID) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._confidence) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._pageAnchor) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._normalizedValue) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._properties) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._provenance) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._redacted) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._textAnchor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._mentionText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mentionText, fieldNumber: 3)
      }
      if !_storage._mentionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mentionID, fieldNumber: 4)
      }
      if _storage._confidence != 0 {
        try visitor.visitSingularFloatField(value: _storage._confidence, fieldNumber: 5)
      }
      if let v = _storage._pageAnchor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 7)
      }
      if let v = _storage._normalizedValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._properties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._properties, fieldNumber: 10)
      }
      if let v = _storage._provenance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._redacted != false {
        try visitor.visitSingularBoolField(value: _storage._redacted, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Entity, rhs: Google_Cloud_Documentai_V1beta3_Document.Entity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._textAnchor != rhs_storage._textAnchor {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._mentionText != rhs_storage._mentionText {return false}
        if _storage._mentionID != rhs_storage._mentionID {return false}
        if _storage._confidence != rhs_storage._confidence {return false}
        if _storage._pageAnchor != rhs_storage._pageAnchor {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._normalizedValue != rhs_storage._normalizedValue {return false}
        if _storage._properties != rhs_storage._properties {return false}
        if _storage._provenance != rhs_storage._provenance {return false}
        if _storage._redacted != rhs_storage._redacted {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Entity.protoMessageName + ".NormalizedValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "money_value"),
    3: .standard(proto: "date_value"),
    4: .standard(proto: "datetime_value"),
    5: .standard(proto: "address_value"),
    1: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try {
        var v: Google_Type_Money?
        if let current = self.structuredValue {
          try decoder.handleConflictingOneOf()
          if case .moneyValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.structuredValue = .moneyValue(v)}
      }()
      case 3: try {
        var v: Google_Type_Date?
        if let current = self.structuredValue {
          try decoder.handleConflictingOneOf()
          if case .dateValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.structuredValue = .dateValue(v)}
      }()
      case 4: try {
        var v: Google_Type_DateTime?
        if let current = self.structuredValue {
          try decoder.handleConflictingOneOf()
          if case .datetimeValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.structuredValue = .datetimeValue(v)}
      }()
      case 5: try {
        var v: Google_Type_PostalAddress?
        if let current = self.structuredValue {
          try decoder.handleConflictingOneOf()
          if case .addressValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.structuredValue = .addressValue(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.structuredValue {
    case .moneyValue?: try {
      guard case .moneyValue(let v)? = self.structuredValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .dateValue?: try {
      guard case .dateValue(let v)? = self.structuredValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .datetimeValue?: try {
      guard case .datetimeValue(let v)? = self.structuredValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .addressValue?: try {
      guard case .addressValue(let v)? = self.structuredValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue, rhs: Google_Cloud_Documentai_V1beta3_Document.Entity.NormalizedValue) -> Bool {
    if lhs.structuredValue != rhs.structuredValue {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.EntityRelation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".EntityRelation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subject_id"),
    2: .standard(proto: "object_id"),
    3: .same(proto: "relation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subjectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.objectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.relation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.subjectID, fieldNumber: 1)
    }
    if !self.objectID.isEmpty {
      try visitor.visitSingularStringField(value: self.objectID, fieldNumber: 2)
    }
    if !self.relation.isEmpty {
      try visitor.visitSingularStringField(value: self.relation, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.EntityRelation, rhs: Google_Cloud_Documentai_V1beta3_Document.EntityRelation) -> Bool {
    if lhs.subjectID != rhs.subjectID {return false}
    if lhs.objectID != rhs.objectID {return false}
    if lhs.relation != rhs.relation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Translation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".Translation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_anchor"),
    2: .standard(proto: "language_code"),
    3: .standard(proto: "translated_text"),
    4: .same(proto: "provenance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._textAnchor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.translatedText) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.provenance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._textAnchor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if !self.translatedText.isEmpty {
      try visitor.visitSingularStringField(value: self.translatedText, fieldNumber: 3)
    }
    if !self.provenance.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.provenance, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Translation, rhs: Google_Cloud_Documentai_V1beta3_Document.Translation) -> Bool {
    if lhs._textAnchor != rhs._textAnchor {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.translatedText != rhs.translatedText {return false}
    if lhs.provenance != rhs.provenance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.TextAnchor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".TextAnchor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_segments"),
    2: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.textSegments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.textSegments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textSegments, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.TextAnchor, rhs: Google_Cloud_Documentai_V1beta3_Document.TextAnchor) -> Bool {
    if lhs.textSegments != rhs.textSegments {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.TextAnchor.TextSegment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.TextAnchor.protoMessageName + ".TextSegment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_index"),
    2: .standard(proto: "end_index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.startIndex) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.endIndex) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.startIndex, fieldNumber: 1)
    }
    if self.endIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.endIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.TextAnchor.TextSegment, rhs: Google_Cloud_Documentai_V1beta3_Document.TextAnchor.TextSegment) -> Bool {
    if lhs.startIndex != rhs.startIndex {return false}
    if lhs.endIndex != rhs.endIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.PageAnchor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".PageAnchor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_refs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pageRefs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pageRefs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageRefs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.PageAnchor, rhs: Google_Cloud_Documentai_V1beta3_Document.PageAnchor) -> Bool {
    if lhs.pageRefs != rhs.pageRefs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.PageAnchor.protoMessageName + ".PageRef"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .standard(proto: "layout_type"),
    3: .standard(proto: "layout_id"),
    4: .standard(proto: "bounding_poly"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.page) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.layoutType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.layoutID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._boundingPoly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 1)
    }
    if self.layoutType != .unspecified {
      try visitor.visitSingularEnumField(value: self.layoutType, fieldNumber: 2)
    }
    if !self.layoutID.isEmpty {
      try visitor.visitSingularStringField(value: self.layoutID, fieldNumber: 3)
    }
    if let v = self._boundingPoly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef, rhs: Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef) -> Bool {
    if lhs.page != rhs.page {return false}
    if lhs.layoutType != rhs.layoutType {return false}
    if lhs.layoutID != rhs.layoutID {return false}
    if lhs._boundingPoly != rhs._boundingPoly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.PageAnchor.PageRef.LayoutType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LAYOUT_TYPE_UNSPECIFIED"),
    1: .same(proto: "BLOCK"),
    2: .same(proto: "PARAGRAPH"),
    3: .same(proto: "LINE"),
    4: .same(proto: "TOKEN"),
    5: .same(proto: "VISUAL_ELEMENT"),
    6: .same(proto: "TABLE"),
    7: .same(proto: "FORM_FIELD"),
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.Provenance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".Provenance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revision"),
    2: .same(proto: "id"),
    3: .same(proto: "parents"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.revision) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.parents) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.revision != 0 {
      try visitor.visitSingularInt32Field(value: self.revision, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 2)
    }
    if !self.parents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parents, fieldNumber: 3)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Provenance, rhs: Google_Cloud_Documentai_V1beta3_Document.Provenance) -> Bool {
    if lhs.revision != rhs.revision {return false}
    if lhs.id != rhs.id {return false}
    if lhs.parents != rhs.parents {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Provenance.OperationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "ADD"),
    2: .same(proto: "REMOVE"),
    3: .same(proto: "REPLACE"),
    4: .same(proto: "EVAL_REQUESTED"),
    5: .same(proto: "EVAL_APPROVED"),
  ]
}

extension Google_Cloud_Documentai_V1beta3_Document.Provenance.Parent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Provenance.protoMessageName + ".Parent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revision"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.revision) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.revision != 0 {
      try visitor.visitSingularInt32Field(value: self.revision, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Provenance.Parent, rhs: Google_Cloud_Documentai_V1beta3_Document.Provenance.Parent) -> Bool {
    if lhs.revision != rhs.revision {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Revision: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".Revision"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "agent"),
    5: .same(proto: "processor"),
    1: .same(proto: "id"),
    2: .same(proto: "parent"),
    3: .standard(proto: "create_time"),
    6: .standard(proto: "human_review"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.parent) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try {
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.source = .agent(v)}
      }()
      case 5: try {
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.source = .processor(v)}
      }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._humanReview) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.parent.isEmpty {
      try visitor.visitPackedInt32Field(value: self.parent, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.source {
    case .agent?: try {
      guard case .agent(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .processor?: try {
      guard case .processor(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if let v = self._humanReview {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Revision, rhs: Google_Cloud_Documentai_V1beta3_Document.Revision) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.id != rhs.id {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._humanReview != rhs._humanReview {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.Revision.HumanReview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.Revision.protoMessageName + ".HumanReview"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "state_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stateMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 1)
    }
    if !self.stateMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.stateMessage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.Revision.HumanReview, rhs: Google_Cloud_Documentai_V1beta3_Document.Revision.HumanReview) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.stateMessage != rhs.stateMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Documentai_V1beta3_Document.TextChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Documentai_V1beta3_Document.protoMessageName + ".TextChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_anchor"),
    2: .standard(proto: "changed_text"),
    3: .same(proto: "provenance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._textAnchor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.changedText) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.provenance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._textAnchor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.changedText.isEmpty {
      try visitor.visitSingularStringField(value: self.changedText, fieldNumber: 2)
    }
    if !self.provenance.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.provenance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Documentai_V1beta3_Document.TextChange, rhs: Google_Cloud_Documentai_V1beta3_Document.TextChange) -> Bool {
    if lhs._textAnchor != rhs._textAnchor {return false}
    if lhs.changedText != rhs.changedText {return false}
    if lhs.provenance != rhs.provenance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
