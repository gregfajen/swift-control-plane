//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/managedidentities/v1beta1/managed_identities_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceClientProtocol: GRPCClient {
  func createMicrosoftAdDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_CreateMicrosoftAdDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_CreateMicrosoftAdDomainRequest, Google_Longrunning_Operation>

  func resetAdminPassword(
    _ request: Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordRequest, Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordResponse>

  func listDomains(
    _ request: Google_Cloud_Managedidentities_V1beta1_ListDomainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ListDomainsRequest, Google_Cloud_Managedidentities_V1beta1_ListDomainsResponse>

  func getDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_GetDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_GetDomainRequest, Google_Cloud_Managedidentities_V1beta1_Domain>

  func updateDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_UpdateDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_UpdateDomainRequest, Google_Longrunning_Operation>

  func deleteDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_DeleteDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_DeleteDomainRequest, Google_Longrunning_Operation>

  func attachTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_AttachTrustRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_AttachTrustRequest, Google_Longrunning_Operation>

  func reconfigureTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_ReconfigureTrustRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ReconfigureTrustRequest, Google_Longrunning_Operation>

  func detachTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_DetachTrustRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_DetachTrustRequest, Google_Longrunning_Operation>

  func validateTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_ValidateTrustRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ValidateTrustRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceClientProtocol {

  /// Creates a Microsoft AD domain.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateMicrosoftAdDomain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createMicrosoftAdDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_CreateMicrosoftAdDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_CreateMicrosoftAdDomainRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/CreateMicrosoftAdDomain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Resets a domain's administrator password.
  ///
  /// - Parameters:
  ///   - request: Request to send to ResetAdminPassword.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resetAdminPassword(
    _ request: Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordRequest, Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/ResetAdminPassword",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists domains in a project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDomains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDomains(
    _ request: Google_Cloud_Managedidentities_V1beta1_ListDomainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ListDomainsRequest, Google_Cloud_Managedidentities_V1beta1_ListDomainsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/ListDomains",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets information about a domain.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDomain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_GetDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_GetDomainRequest, Google_Cloud_Managedidentities_V1beta1_Domain> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/GetDomain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the metadata and configuration of a domain.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDomain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_UpdateDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_UpdateDomainRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/UpdateDomain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a domain.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDomain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDomain(
    _ request: Google_Cloud_Managedidentities_V1beta1_DeleteDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_DeleteDomainRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/DeleteDomain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Adds an AD trust to a domain.
  ///
  /// - Parameters:
  ///   - request: Request to send to AttachTrust.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func attachTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_AttachTrustRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_AttachTrustRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/AttachTrust",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the DNS conditional forwarder.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReconfigureTrust.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func reconfigureTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_ReconfigureTrustRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ReconfigureTrustRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/ReconfigureTrust",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Removes an AD trust.
  ///
  /// - Parameters:
  ///   - request: Request to send to DetachTrust.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func detachTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_DetachTrustRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_DetachTrustRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/DetachTrust",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Validates a trust state, that the target domain is reachable, and that the
  /// target domain is able to accept incoming trust requests.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidateTrust.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validateTrust(
    _ request: Google_Cloud_Managedidentities_V1beta1_ValidateTrustRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Managedidentities_V1beta1_ValidateTrustRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.managedidentities.v1beta1.ManagedIdentitiesService/ValidateTrust",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceClient: Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.managedidentities.v1beta1.ManagedIdentitiesService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceProvider: CallHandlerProvider {
  /// Creates a Microsoft AD domain.
  func createMicrosoftAdDomain(request: Google_Cloud_Managedidentities_V1beta1_CreateMicrosoftAdDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Resets a domain's administrator password.
  func resetAdminPassword(request: Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Managedidentities_V1beta1_ResetAdminPasswordResponse>
  /// Lists domains in a project.
  func listDomains(request: Google_Cloud_Managedidentities_V1beta1_ListDomainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Managedidentities_V1beta1_ListDomainsResponse>
  /// Gets information about a domain.
  func getDomain(request: Google_Cloud_Managedidentities_V1beta1_GetDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Managedidentities_V1beta1_Domain>
  /// Updates the metadata and configuration of a domain.
  func updateDomain(request: Google_Cloud_Managedidentities_V1beta1_UpdateDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a domain.
  func deleteDomain(request: Google_Cloud_Managedidentities_V1beta1_DeleteDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Adds an AD trust to a domain.
  func attachTrust(request: Google_Cloud_Managedidentities_V1beta1_AttachTrustRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates the DNS conditional forwarder.
  func reconfigureTrust(request: Google_Cloud_Managedidentities_V1beta1_ReconfigureTrustRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Removes an AD trust.
  func detachTrust(request: Google_Cloud_Managedidentities_V1beta1_DetachTrustRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Validates a trust state, that the target domain is reachable, and that the
  /// target domain is able to accept incoming trust requests.
  func validateTrust(request: Google_Cloud_Managedidentities_V1beta1_ValidateTrustRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Managedidentities_V1beta1_ManagedIdentitiesServiceProvider {
  public var serviceName: Substring { return "google.cloud.managedidentities.v1beta1.ManagedIdentitiesService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateMicrosoftAdDomain":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createMicrosoftAdDomain(request: request, context: context)
        }
      }

    case "ResetAdminPassword":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.resetAdminPassword(request: request, context: context)
        }
      }

    case "ListDomains":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDomains(request: request, context: context)
        }
      }

    case "GetDomain":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getDomain(request: request, context: context)
        }
      }

    case "UpdateDomain":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateDomain(request: request, context: context)
        }
      }

    case "DeleteDomain":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteDomain(request: request, context: context)
        }
      }

    case "AttachTrust":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.attachTrust(request: request, context: context)
        }
      }

    case "ReconfigureTrust":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.reconfigureTrust(request: request, context: context)
        }
      }

    case "DetachTrust":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.detachTrust(request: request, context: context)
        }
      }

    case "ValidateTrust":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.validateTrust(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

