// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4beta1/profile_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// List profiles request.
public struct Google_Cloud_Talent_V4beta1_ListProfilesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant under which the profile is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenants/bar".
  public var parent: String = String()

  /// The filter string specifies the profiles to be enumerated.
  ///
  /// Supported operator: =, AND
  ///
  /// The field(s) eligible for filtering are:
  ///
  /// * `externalId`
  /// * `groupId`
  ///
  /// externalId and groupId cannot be specified at the same time. If both
  /// externalId and groupId are provided, the API will return a bad request
  /// error.
  ///
  /// Sample Query:
  ///
  /// * externalId = "externalId-1"
  /// * groupId = "groupId-1"
  public var filter: String = String()

  /// The token that specifies the current offset (that is, starting result).
  ///
  /// Please set the value to [ListProfilesResponse.next_page_token][google.cloud.talent.v4beta1.ListProfilesResponse.next_page_token] to
  /// continue the list.
  public var pageToken: String = String()

  /// The maximum number of profiles to be returned, at most 100.
  ///
  /// Default is 100 unless a positive number smaller than 100 is specified.
  public var pageSize: Int32 = 0

  /// A field mask to specify the profile fields to be listed in response.
  /// All fields are listed if it is unset.
  ///
  /// Valid values are:
  ///
  /// * name
  public var readMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _readMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_readMask = newValue}
  }
  /// Returns true if `readMask` has been explicitly set.
  public var hasReadMask: Bool {return self._readMask != nil}
  /// Clears the value of `readMask`. Subsequent reads from it will return its default value.
  public mutating func clearReadMask() {self._readMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The List profiles response object.
public struct Google_Cloud_Talent_V4beta1_ListProfilesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Profiles for the specific tenant.
  public var profiles: [Google_Cloud_Talent_V4beta1_Profile] = []

  /// A token to retrieve the next page of results. This is empty if there are no
  /// more results.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Create profile request.
public struct Google_Cloud_Talent_V4beta1_CreateProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the tenant this profile belongs to.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenants/bar".
  public var parent: String = String()

  /// Required. The profile to be created.
  public var profile: Google_Cloud_Talent_V4beta1_Profile {
    get {return _profile ?? Google_Cloud_Talent_V4beta1_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  public var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  public mutating func clearProfile() {self._profile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _profile: Google_Cloud_Talent_V4beta1_Profile? = nil
}

/// Get profile request.
public struct Google_Cloud_Talent_V4beta1_GetProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the profile to get.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/profiles/{profile_id}". For
  /// example, "projects/foo/tenants/bar/profiles/baz".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Update profile request
public struct Google_Cloud_Talent_V4beta1_UpdateProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Profile to be updated.
  public var profile: Google_Cloud_Talent_V4beta1_Profile {
    get {return _profile ?? Google_Cloud_Talent_V4beta1_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  public var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  public mutating func clearProfile() {self._profile = nil}

  /// A field mask to specify the profile fields to update.
  ///
  /// A full update is performed if it is unset.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _profile: Google_Cloud_Talent_V4beta1_Profile? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Delete profile request.
public struct Google_Cloud_Talent_V4beta1_DeleteProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of the profile to be deleted.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/profiles/{profile_id}". For
  /// example, "projects/foo/tenants/bar/profiles/baz".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request body of the `SearchProfiles` call.
public struct Google_Cloud_Talent_V4beta1_SearchProfilesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant to search within.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenants/bar".
  public var parent: String {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  /// Required. The meta information collected about the profile search user. This is used
  /// to improve the search quality of the service. These values are provided by
  /// users, and must be precise and consistent.
  public var requestMetadata: Google_Cloud_Talent_V4beta1_RequestMetadata {
    get {return _storage._requestMetadata ?? Google_Cloud_Talent_V4beta1_RequestMetadata()}
    set {_uniqueStorage()._requestMetadata = newValue}
  }
  /// Returns true if `requestMetadata` has been explicitly set.
  public var hasRequestMetadata: Bool {return _storage._requestMetadata != nil}
  /// Clears the value of `requestMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearRequestMetadata() {_uniqueStorage()._requestMetadata = nil}

  /// Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
  public var profileQuery: Google_Cloud_Talent_V4beta1_ProfileQuery {
    get {return _storage._profileQuery ?? Google_Cloud_Talent_V4beta1_ProfileQuery()}
    set {_uniqueStorage()._profileQuery = newValue}
  }
  /// Returns true if `profileQuery` has been explicitly set.
  public var hasProfileQuery: Bool {return _storage._profileQuery != nil}
  /// Clears the value of `profileQuery`. Subsequent reads from it will return its default value.
  public mutating func clearProfileQuery() {_uniqueStorage()._profileQuery = nil}

  /// A limit on the number of profiles returned in the search results.
  /// A value above the default value 10 can increase search response time.
  ///
  /// The maximum value allowed is 100. Otherwise an error is thrown.
  public var pageSize: Int32 {
    get {return _storage._pageSize}
    set {_uniqueStorage()._pageSize = newValue}
  }

  /// The pageToken, similar to offset enables users of the API to paginate
  /// through the search results. To retrieve the first page of results, set the
  /// pageToken to empty. The search response includes a
  /// [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
  /// used to populate the pageToken field for the next page of results. Using
  /// pageToken instead of offset increases the performance of the API,
  /// especially compared to larger offset values.
  public var pageToken: String {
    get {return _storage._pageToken}
    set {_uniqueStorage()._pageToken = newValue}
  }

  /// An integer that specifies the current offset (that is, starting result) in
  /// search results. This field is only considered if [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token] is unset.
  ///
  /// The maximum allowed value is 5000. Otherwise an error is thrown.
  ///
  /// For example, 0 means to search from the first profile, and 10 means to
  /// search from the 11th profile. This can be used for pagination, for example
  /// pageSize = 10 and offset = 10 means to search from the second page.
  public var offset: Int32 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  /// This flag controls the spell-check feature. If `false`, the
  /// service attempts to correct a misspelled query.
  ///
  /// For example, "enginee" is corrected to "engineer".
  public var disableSpellCheck: Bool {
    get {return _storage._disableSpellCheck}
    set {_uniqueStorage()._disableSpellCheck = newValue}
  }

  /// The criteria that determines how search results are sorted.
  /// Defaults is "relevance desc" if no value is specified.
  ///
  /// Supported options are:
  ///
  /// * "relevance desc": By descending relevance, as determined by the API
  ///    algorithms.
  /// * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
  ///   (recently updated profiles first).
  /// * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
  ///   (recently created profiles first).
  /// * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
  ///   ascending order.
  /// * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
  ///   in descending order.
  /// * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
  ///   ascending order.
  /// * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
  ///   in ascending order.
  public var orderBy: String {
    get {return _storage._orderBy}
    set {_uniqueStorage()._orderBy = newValue}
  }

  /// When sort by field is based on alphabetical order, sort values case
  /// sensitively (based on ASCII) when the value is set to true. Default value
  /// is case in-sensitive sort (false).
  public var caseSensitiveSort: Bool {
    get {return _storage._caseSensitiveSort}
    set {_uniqueStorage()._caseSensitiveSort = newValue}
  }

  /// A list of expressions specifies histogram requests against matching
  /// profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
  ///
  /// The expression syntax looks like a function definition with parameters.
  ///
  /// Function syntax: function_name(histogram_facet[, list of buckets])
  ///
  /// Data types:
  ///
  /// * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
  /// * String: string like "any string with backslash escape for quote(\")."
  /// * Number: whole number and floating point number like 10, -1 and -0.01.
  /// * List: list of elements with comma(,) separator surrounded by square
  /// brackets. For example, [1, 2, 3] and ["one", "two", "three"].
  ///
  /// Built-in constants:
  ///
  /// * MIN (minimum number similar to java Double.MIN_VALUE)
  /// * MAX (maximum number similar to java Double.MAX_VALUE)
  ///
  /// Built-in functions:
  ///
  /// * bucket(start, end[, label])
  /// Bucket build-in function creates a bucket with range of [start, end). Note
  /// that the end is exclusive.
  /// For example, bucket(1, MAX, "positive number") or bucket(1, 10).
  ///
  /// Histogram Facets:
  ///
  /// * admin1: Admin1 is a global placeholder for referring to state, province,
  /// or the particular term a country uses to define the geographic structure
  /// below the country level. Examples include states codes such as "CA", "IL",
  /// "NY", and provinces, such as "BC".
  /// * locality: Locality is a global placeholder for referring to city, town,
  /// or the particular term a country uses to define the geographic structure
  /// below the admin1 level. Examples include city names such as
  /// "Mountain View" and "New York".
  /// * extended_locality: Extended locality is concatenated version of admin1
  /// and locality with comma separator. For example, "Mountain View, CA" and
  /// "New York, NY".
  /// * postal_code: Postal code of profile which follows locale code.
  /// * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
  ///  JP, GB.
  /// * job_title: Normalized job titles specified in EmploymentHistory.
  /// * company_name: Normalized company name of profiles to match on.
  /// * institution: The school name. For example, "MIT",
  /// "University of California, Berkeley"
  /// * degree: Highest education degree in ISCED code. Each value in degree
  /// covers a specific level of education, without any expansion to upper nor
  /// lower levels of education degree.
  /// * experience_in_months: experience in months. 0 means 0 month to 1 month
  /// (exclusive).
  /// * application_date: The application date specifies application start dates.
  /// See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
  /// * application_outcome_notes: The application outcome reason specifies the
  /// reasons behind the outcome of the job application.
  /// See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
  /// * application_job_title: The application job title specifies the job
  /// applied for in the application.
  /// See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
  /// * hirable_status: Hirable status specifies the profile's hirable status.
  /// * string_custom_attribute: String custom attributes. Values can be accessed
  /// via square bracket notation like string_custom_attribute["key1"].
  /// * numeric_custom_attribute: Numeric custom attributes. Values can be
  /// accessed via square bracket notation like numeric_custom_attribute["key1"].
  ///
  /// Example expressions:
  ///
  /// * count(admin1)
  /// * count(experience_in_months, [bucket(0, 12, "1 year"),
  /// bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
  /// * count(string_custom_attribute["assigned_recruiter"])
  /// * count(numeric_custom_attribute["favorite_number"],
  /// [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
  public var histogramQueries: [Google_Cloud_Talent_V4beta1_HistogramQuery] {
    get {return _storage._histogramQueries}
    set {_uniqueStorage()._histogramQueries = newValue}
  }

  /// An id that uniquely identifies the result set of a
  /// [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
  /// retrieved from the
  /// [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
  /// invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
  ///
  /// A result set is an ordered list of search results.
  ///
  /// If this field is not set, a new result set is computed based on the
  /// [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
  /// access this result set.
  ///
  /// If this field is set, the service will ignore the resource and
  /// [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
  /// corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
  /// or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
  ///
  /// A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
  /// field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
  /// [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
  public var resultSetID: String {
    get {return _storage._resultSetID}
    set {_uniqueStorage()._resultSetID = newValue}
  }

  /// This flag is used to indicate whether the service will attempt to
  /// understand synonyms and terms related to the search query or treat the
  /// query "as is" when it generates a set of results. By default this flag is
  /// set to false, thus allowing expanded results to also be returned. For
  /// example a search for "software engineer" might also return candidates who
  /// have experience in jobs similar to software engineer positions. By setting
  /// this flag to true, the service will only attempt to deliver candidates has
  /// software engineer in his/her global fields by treating "software engineer"
  /// as a keyword.
  ///
  /// It is recommended to provide a feature in the UI (such as a checkbox) to
  /// allow recruiters to set this flag to true if they intend to search for
  /// longer boolean strings.
  public var strictKeywordsSearch: Bool {
    get {return _storage._strictKeywordsSearch}
    set {_uniqueStorage()._strictKeywordsSearch = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response of SearchProfiles method.
public struct Google_Cloud_Talent_V4beta1_SearchProfilesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An estimation of the number of profiles that match the specified query.
  ///
  /// This number isn't guaranteed to be accurate.
  public var estimatedTotalSize: Int64 = 0

  /// The spell checking result, and correction.
  public var spellCorrection: Google_Cloud_Talent_V4beta1_SpellingCorrection {
    get {return _spellCorrection ?? Google_Cloud_Talent_V4beta1_SpellingCorrection()}
    set {_spellCorrection = newValue}
  }
  /// Returns true if `spellCorrection` has been explicitly set.
  public var hasSpellCorrection: Bool {return self._spellCorrection != nil}
  /// Clears the value of `spellCorrection`. Subsequent reads from it will return its default value.
  public mutating func clearSpellCorrection() {self._spellCorrection = nil}

  /// Additional information for the API invocation, such as the request
  /// tracking id.
  public var metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata {
    get {return _metadata ?? Google_Cloud_Talent_V4beta1_ResponseMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// A token to retrieve the next page of results. This is empty if there are no
  /// more results.
  public var nextPageToken: String = String()

  /// The histogram results that match with specified
  /// [SearchProfilesRequest.histogram_queries][google.cloud.talent.v4beta1.SearchProfilesRequest.histogram_queries].
  public var histogramQueryResults: [Google_Cloud_Talent_V4beta1_HistogramQueryResult] = []

  /// The profile entities that match the specified [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
  public var summarizedProfiles: [Google_Cloud_Talent_V4beta1_SummarizedProfile] = []

  /// An id that uniquely identifies the result set of a
  /// [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call for consistent
  /// results.
  public var resultSetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _spellCorrection: Google_Cloud_Talent_V4beta1_SpellingCorrection? = nil
  fileprivate var _metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata? = nil
}

/// Profile entry with metadata inside [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse].
public struct Google_Cloud_Talent_V4beta1_SummarizedProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of profiles that are linked by [Profile.group_id][google.cloud.talent.v4beta1.Profile.group_id].
  public var profiles: [Google_Cloud_Talent_V4beta1_Profile] = []

  /// A profile summary shows the profile summary and how the profile matches the
  /// search query.
  ///
  /// In profile summary, the profiles with the same [Profile.group_id][google.cloud.talent.v4beta1.Profile.group_id] are
  /// merged together. Among profiles, same education/employment records may be
  /// slightly different but they are merged into one with best efforts.
  ///
  /// For example, in one profile the school name is "UC Berkeley" and the field
  /// study is "Computer Science" and in another one the school name is
  /// "University of California at Berkeley" and the field study is "CS". The API
  /// merges these two inputs into one and selects one value for each field. For
  /// example, the school name in summary is set to "University of California at
  /// Berkeley" and the field of study is set to "Computer Science".
  public var summary: Google_Cloud_Talent_V4beta1_Profile {
    get {return _summary ?? Google_Cloud_Talent_V4beta1_Profile()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _summary: Google_Cloud_Talent_V4beta1_Profile? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4beta1"

extension Google_Cloud_Talent_V4beta1_ListProfilesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListProfilesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    5: .same(proto: "filter"),
    2: .standard(proto: "page_token"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "read_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._readMask) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if let v = self._readMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_ListProfilesRequest, rhs: Google_Cloud_Talent_V4beta1_ListProfilesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs._readMask != rhs._readMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_ListProfilesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListProfilesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profiles"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_ListProfilesResponse, rhs: Google_Cloud_Talent_V4beta1_ListProfilesResponse) -> Bool {
    if lhs.profiles != rhs.profiles {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_CreateProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "profile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_CreateProfileRequest, rhs: Google_Cloud_Talent_V4beta1_CreateProfileRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_GetProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_GetProfileRequest, rhs: Google_Cloud_Talent_V4beta1_GetProfileRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_UpdateProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_UpdateProfileRequest, rhs: Google_Cloud_Talent_V4beta1_UpdateProfileRequest) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_DeleteProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_DeleteProfileRequest, rhs: Google_Cloud_Talent_V4beta1_DeleteProfileRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchProfilesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchProfilesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "request_metadata"),
    3: .standard(proto: "profile_query"),
    4: .standard(proto: "page_size"),
    5: .standard(proto: "page_token"),
    6: .same(proto: "offset"),
    7: .standard(proto: "disable_spell_check"),
    8: .standard(proto: "order_by"),
    9: .standard(proto: "case_sensitive_sort"),
    10: .standard(proto: "histogram_queries"),
    12: .standard(proto: "result_set_id"),
    13: .standard(proto: "strict_keywords_search"),
  ]

  fileprivate class _StorageClass {
    var _parent: String = String()
    var _requestMetadata: Google_Cloud_Talent_V4beta1_RequestMetadata? = nil
    var _profileQuery: Google_Cloud_Talent_V4beta1_ProfileQuery? = nil
    var _pageSize: Int32 = 0
    var _pageToken: String = String()
    var _offset: Int32 = 0
    var _disableSpellCheck: Bool = false
    var _orderBy: String = String()
    var _caseSensitiveSort: Bool = false
    var _histogramQueries: [Google_Cloud_Talent_V4beta1_HistogramQuery] = []
    var _resultSetID: String = String()
    var _strictKeywordsSearch: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _parent = source._parent
      _requestMetadata = source._requestMetadata
      _profileQuery = source._profileQuery
      _pageSize = source._pageSize
      _pageToken = source._pageToken
      _offset = source._offset
      _disableSpellCheck = source._disableSpellCheck
      _orderBy = source._orderBy
      _caseSensitiveSort = source._caseSensitiveSort
      _histogramQueries = source._histogramQueries
      _resultSetID = source._resultSetID
      _strictKeywordsSearch = source._strictKeywordsSearch
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._parent) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._requestMetadata) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._profileQuery) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._pageSize) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._pageToken) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._offset) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._disableSpellCheck) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._orderBy) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._caseSensitiveSort) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._histogramQueries) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._resultSetID) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._strictKeywordsSearch) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 1)
      }
      if let v = _storage._requestMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._profileQuery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._pageSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageSize, fieldNumber: 4)
      }
      if !_storage._pageToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pageToken, fieldNumber: 5)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt32Field(value: _storage._offset, fieldNumber: 6)
      }
      if _storage._disableSpellCheck != false {
        try visitor.visitSingularBoolField(value: _storage._disableSpellCheck, fieldNumber: 7)
      }
      if !_storage._orderBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderBy, fieldNumber: 8)
      }
      if _storage._caseSensitiveSort != false {
        try visitor.visitSingularBoolField(value: _storage._caseSensitiveSort, fieldNumber: 9)
      }
      if !_storage._histogramQueries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._histogramQueries, fieldNumber: 10)
      }
      if !_storage._resultSetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resultSetID, fieldNumber: 12)
      }
      if _storage._strictKeywordsSearch != false {
        try visitor.visitSingularBoolField(value: _storage._strictKeywordsSearch, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchProfilesRequest, rhs: Google_Cloud_Talent_V4beta1_SearchProfilesRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._requestMetadata != rhs_storage._requestMetadata {return false}
        if _storage._profileQuery != rhs_storage._profileQuery {return false}
        if _storage._pageSize != rhs_storage._pageSize {return false}
        if _storage._pageToken != rhs_storage._pageToken {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._disableSpellCheck != rhs_storage._disableSpellCheck {return false}
        if _storage._orderBy != rhs_storage._orderBy {return false}
        if _storage._caseSensitiveSort != rhs_storage._caseSensitiveSort {return false}
        if _storage._histogramQueries != rhs_storage._histogramQueries {return false}
        if _storage._resultSetID != rhs_storage._resultSetID {return false}
        if _storage._strictKeywordsSearch != rhs_storage._strictKeywordsSearch {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchProfilesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchProfilesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "estimated_total_size"),
    2: .standard(proto: "spell_correction"),
    3: .same(proto: "metadata"),
    4: .standard(proto: "next_page_token"),
    5: .standard(proto: "histogram_query_results"),
    6: .standard(proto: "summarized_profiles"),
    7: .standard(proto: "result_set_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.estimatedTotalSize) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spellCorrection) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.histogramQueryResults) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.summarizedProfiles) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.resultSetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.estimatedTotalSize != 0 {
      try visitor.visitSingularInt64Field(value: self.estimatedTotalSize, fieldNumber: 1)
    }
    if let v = self._spellCorrection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 4)
    }
    if !self.histogramQueryResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.histogramQueryResults, fieldNumber: 5)
    }
    if !self.summarizedProfiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.summarizedProfiles, fieldNumber: 6)
    }
    if !self.resultSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.resultSetID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchProfilesResponse, rhs: Google_Cloud_Talent_V4beta1_SearchProfilesResponse) -> Bool {
    if lhs.estimatedTotalSize != rhs.estimatedTotalSize {return false}
    if lhs._spellCorrection != rhs._spellCorrection {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.histogramQueryResults != rhs.histogramQueryResults {return false}
    if lhs.summarizedProfiles != rhs.summarizedProfiles {return false}
    if lhs.resultSetID != rhs.resultSetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SummarizedProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SummarizedProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profiles"),
    2: .same(proto: "summary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._summary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 1)
    }
    if let v = self._summary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SummarizedProfile, rhs: Google_Cloud_Talent_V4beta1_SummarizedProfile) -> Bool {
    if lhs.profiles != rhs.profiles {return false}
    if lhs._summary != rhs._summary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
