// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4beta1/tenant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Tenant resource represents a tenant in the service. A tenant is a group or
/// entity that shares common access with specific privileges for resources like
/// profiles. Customer may create multiple tenants to provide data isolation for
/// different groups.
public struct Google_Cloud_Talent_V4beta1_Tenant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required during tenant update.
  ///
  /// The resource name for a tenant. This is generated by the service when a
  /// tenant is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
  /// "projects/foo/tenants/bar".
  public var name: String = String()

  /// Required. Client side tenant identifier, used to uniquely identify the tenant.
  ///
  /// The maximum number of allowed characters is 255.
  public var externalID: String = String()

  /// Indicates whether data owned by this tenant may be used to provide product
  /// improvements across other tenants.
  ///
  /// Defaults behavior is [DataUsageType.ISOLATED][google.cloud.talent.v4beta1.Tenant.DataUsageType.ISOLATED] if it's unset.
  public var usageType: Google_Cloud_Talent_V4beta1_Tenant.DataUsageType = .unspecified

  /// A list of keys of filterable [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes], whose
  /// corresponding `string_values` are used in keyword searches. Profiles with
  /// `string_values` under these specified field keys are returned if any
  /// of the values match the search keyword. Custom field values with
  /// parenthesis, brackets and special symbols are not searchable as-is,
  /// and must be surrounded by quotes.
  public var keywordSearchableProfileCustomAttributes: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enum that represents how user data owned by the tenant is used.
  public enum DataUsageType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// Data owned by this tenant is used to improve search/recommendation
    /// quality across tenants.
    case aggregated // = 1

    /// Data owned by this tenant is used to improve search/recommendation
    /// quality for this tenant only.
    case isolated // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .aggregated
      case 2: self = .isolated
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .aggregated: return 1
      case .isolated: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_Tenant.DataUsageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_Tenant.DataUsageType] = [
    .unspecified,
    .aggregated,
    .isolated,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4beta1"

extension Google_Cloud_Talent_V4beta1_Tenant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tenant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "external_id"),
    3: .standard(proto: "usage_type"),
    4: .standard(proto: "keyword_searchable_profile_custom_attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.usageType) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.keywordSearchableProfileCustomAttributes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 2)
    }
    if self.usageType != .unspecified {
      try visitor.visitSingularEnumField(value: self.usageType, fieldNumber: 3)
    }
    if !self.keywordSearchableProfileCustomAttributes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keywordSearchableProfileCustomAttributes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Tenant, rhs: Google_Cloud_Talent_V4beta1_Tenant) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.usageType != rhs.usageType {return false}
    if lhs.keywordSearchableProfileCustomAttributes != rhs.keywordSearchableProfileCustomAttributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Tenant.DataUsageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_USAGE_TYPE_UNSPECIFIED"),
    1: .same(proto: "AGGREGATED"),
    2: .same(proto: "ISOLATED"),
  ]
}
