// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4beta1/application.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Resource that represents a job application record of a candidate.
public struct Google_Cloud_Talent_V4beta1_Application {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required during application update.
  ///
  /// Resource name assigned to an application by the API.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/profiles/{profile_id}/applications/{application_id}".
  /// For example, "projects/foo/tenants/bar/profiles/baz/applications/qux".
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. Client side application identifier, used to uniquely identify the
  /// application.
  ///
  /// The maximum number of allowed characters is 255.
  public var externalID: String {
    get {return _storage._externalID}
    set {_uniqueStorage()._externalID = newValue}
  }

  /// Output only. Resource name of the candidate of this application.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/profiles/{profile_id}".
  /// For example, "projects/foo/tenants/bar/profiles/baz".
  public var profile: String {
    get {return _storage._profile}
    set {_uniqueStorage()._profile = newValue}
  }

  /// Required. Resource name of the job which the candidate applied for.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For example,
  /// "projects/foo/tenants/bar/jobs/baz".
  public var job: String {
    get {return _storage._job}
    set {_uniqueStorage()._job = newValue}
  }

  /// Resource name of the company which the candidate applied for.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}".
  /// For example, "projects/foo/tenants/bar/companies/baz".
  public var company: String {
    get {return _storage._company}
    set {_uniqueStorage()._company = newValue}
  }

  /// The application date.
  public var applicationDate: Google_Type_Date {
    get {return _storage._applicationDate ?? Google_Type_Date()}
    set {_uniqueStorage()._applicationDate = newValue}
  }
  /// Returns true if `applicationDate` has been explicitly set.
  public var hasApplicationDate: Bool {return _storage._applicationDate != nil}
  /// Clears the value of `applicationDate`. Subsequent reads from it will return its default value.
  public mutating func clearApplicationDate() {_uniqueStorage()._applicationDate = nil}

  /// Required. What is the most recent stage of the application (that is, new,
  /// screen, send cv, hired, finished work)?  This field is intentionally not
  /// comprehensive of every possible status, but instead, represents statuses
  /// that would be used to indicate to the ML models good / bad matches.
  public var stage: Google_Cloud_Talent_V4beta1_Application.ApplicationStage {
    get {return _storage._stage}
    set {_uniqueStorage()._stage = newValue}
  }

  /// The application state.
  public var state: Google_Cloud_Talent_V4beta1_Application.ApplicationState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// All interviews (screen, onsite, and so on) conducted as part of this
  /// application (includes details such as user conducting the interview,
  /// timestamp, feedback, and so on).
  public var interviews: [Google_Cloud_Talent_V4beta1_Interview] {
    get {return _storage._interviews}
    set {_uniqueStorage()._interviews = newValue}
  }

  /// If the candidate is referred by a employee.
  public var referral: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._referral ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._referral = newValue}
  }
  /// Returns true if `referral` has been explicitly set.
  public var hasReferral: Bool {return _storage._referral != nil}
  /// Clears the value of `referral`. Subsequent reads from it will return its default value.
  public mutating func clearReferral() {_uniqueStorage()._referral = nil}

  /// Required. Reflects the time that the application was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// The last update timestamp.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Free text reason behind the recruitement outcome (for example, reason for
  /// withdraw / reject, reason for an unsuccessful finish, and so on).
  ///
  /// Number of characters allowed is 100.
  public var outcomeNotes: String {
    get {return _storage._outcomeNotes}
    set {_uniqueStorage()._outcomeNotes = newValue}
  }

  /// Outcome positiveness shows how positive the outcome is.
  public var outcome: Google_Cloud_Talent_V4beta1_Outcome {
    get {return _storage._outcome}
    set {_uniqueStorage()._outcome = newValue}
  }

  /// Output only. Indicates whether this job application is a match to
  /// application related filters. This value is only applicable in profile
  /// search response.
  public var isMatch: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isMatch ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isMatch = newValue}
  }
  /// Returns true if `isMatch` has been explicitly set.
  public var hasIsMatch: Bool {return _storage._isMatch != nil}
  /// Clears the value of `isMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIsMatch() {_uniqueStorage()._isMatch = nil}

  /// Output only. Job title snippet shows how the job title is related to a
  /// search query. It's empty if the job title isn't related to the search
  /// query.
  public var jobTitleSnippet: String {
    get {return _storage._jobTitleSnippet}
    set {_uniqueStorage()._jobTitleSnippet = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enum that represents the application status.
  public enum ApplicationState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// The current stage is in progress or pending, for example, interviews in
    /// progress.
    case inProgress // = 1

    /// The current stage was terminated by a candidate decision.
    case candidateWithdrew // = 2

    /// The current stage was terminated by an employer or agency decision.
    case employerWithdrew // = 3

    /// The current stage is successfully completed, but the next stage (if
    /// applicable) has not begun.
    case completed // = 4

    /// The current stage was closed without an exception, or terminated for
    /// reasons unrealated to the candidate.
    case closed // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .inProgress
      case 2: self = .candidateWithdrew
      case 3: self = .employerWithdrew
      case 4: self = .completed
      case 5: self = .closed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .inProgress: return 1
      case .candidateWithdrew: return 2
      case .employerWithdrew: return 3
      case .completed: return 4
      case .closed: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The stage of the application.
  public enum ApplicationStage: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// Candidate has applied or a recruiter put candidate into consideration but
    /// candidate is not yet screened / no decision has been made to move or not
    /// move the candidate to the next stage.
    case new // = 1

    /// A recruiter decided to screen the candidate for this role.
    case screen // = 2

    /// Candidate is being / was sent to the customer / hiring manager for
    /// detailed review.
    case hiringManagerReview // = 3

    /// Candidate was approved by the client / hiring manager and is being / was
    /// interviewed for the role.
    case interview // = 4

    /// Candidate will be / has been given an offer of employment.
    case offerExtended // = 5

    /// Candidate has accepted their offer of employment.
    case offerAccepted // = 6

    /// Candidate has begun (or completed) their employment or assignment with
    /// the employer.
    case started // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .new
      case 2: self = .screen
      case 3: self = .hiringManagerReview
      case 4: self = .interview
      case 5: self = .offerExtended
      case 6: self = .offerAccepted
      case 7: self = .started
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .new: return 1
      case .screen: return 2
      case .hiringManagerReview: return 3
      case .interview: return 4
      case .offerExtended: return 5
      case .offerAccepted: return 6
      case .started: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_Application.ApplicationState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_Application.ApplicationState] = [
    .unspecified,
    .inProgress,
    .candidateWithdrew,
    .employerWithdrew,
    .completed,
    .closed,
  ]
}

extension Google_Cloud_Talent_V4beta1_Application.ApplicationStage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_Application.ApplicationStage] = [
    .unspecified,
    .new,
    .screen,
    .hiringManagerReview,
    .interview,
    .offerExtended,
    .offerAccepted,
    .started,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4beta1"

extension Google_Cloud_Talent_V4beta1_Application: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Application"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    31: .standard(proto: "external_id"),
    2: .same(proto: "profile"),
    4: .same(proto: "job"),
    5: .same(proto: "company"),
    7: .standard(proto: "application_date"),
    11: .same(proto: "stage"),
    13: .same(proto: "state"),
    16: .same(proto: "interviews"),
    18: .same(proto: "referral"),
    19: .standard(proto: "create_time"),
    20: .standard(proto: "update_time"),
    21: .standard(proto: "outcome_notes"),
    22: .same(proto: "outcome"),
    28: .standard(proto: "is_match"),
    29: .standard(proto: "job_title_snippet"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _externalID: String = String()
    var _profile: String = String()
    var _job: String = String()
    var _company: String = String()
    var _applicationDate: Google_Type_Date? = nil
    var _stage: Google_Cloud_Talent_V4beta1_Application.ApplicationStage = .unspecified
    var _state: Google_Cloud_Talent_V4beta1_Application.ApplicationState = .unspecified
    var _interviews: [Google_Cloud_Talent_V4beta1_Interview] = []
    var _referral: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _outcomeNotes: String = String()
    var _outcome: Google_Cloud_Talent_V4beta1_Outcome = .unspecified
    var _isMatch: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _jobTitleSnippet: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _externalID = source._externalID
      _profile = source._profile
      _job = source._job
      _company = source._company
      _applicationDate = source._applicationDate
      _stage = source._stage
      _state = source._state
      _interviews = source._interviews
      _referral = source._referral
      _createTime = source._createTime
      _updateTime = source._updateTime
      _outcomeNotes = source._outcomeNotes
      _outcome = source._outcome
      _isMatch = source._isMatch
      _jobTitleSnippet = source._jobTitleSnippet
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._profile) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._job) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._company) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._applicationDate) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._stage) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._interviews) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._referral) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._outcomeNotes) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._outcome) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._isMatch) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._jobTitleSnippet) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._externalID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._profile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profile, fieldNumber: 2)
      }
      if !_storage._job.isEmpty {
        try visitor.visitSingularStringField(value: _storage._job, fieldNumber: 4)
      }
      if !_storage._company.isEmpty {
        try visitor.visitSingularStringField(value: _storage._company, fieldNumber: 5)
      }
      if let v = _storage._applicationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._stage != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._stage, fieldNumber: 11)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 13)
      }
      if !_storage._interviews.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._interviews, fieldNumber: 16)
      }
      if let v = _storage._referral {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._outcomeNotes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._outcomeNotes, fieldNumber: 21)
      }
      if _storage._outcome != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._outcome, fieldNumber: 22)
      }
      if let v = _storage._isMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if !_storage._jobTitleSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobTitleSnippet, fieldNumber: 29)
      }
      if !_storage._externalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalID, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Application, rhs: Google_Cloud_Talent_V4beta1_Application) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._externalID != rhs_storage._externalID {return false}
        if _storage._profile != rhs_storage._profile {return false}
        if _storage._job != rhs_storage._job {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._applicationDate != rhs_storage._applicationDate {return false}
        if _storage._stage != rhs_storage._stage {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._interviews != rhs_storage._interviews {return false}
        if _storage._referral != rhs_storage._referral {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._outcomeNotes != rhs_storage._outcomeNotes {return false}
        if _storage._outcome != rhs_storage._outcome {return false}
        if _storage._isMatch != rhs_storage._isMatch {return false}
        if _storage._jobTitleSnippet != rhs_storage._jobTitleSnippet {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Application.ApplicationState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "APPLICATION_STATE_UNSPECIFIED"),
    1: .same(proto: "IN_PROGRESS"),
    2: .same(proto: "CANDIDATE_WITHDREW"),
    3: .same(proto: "EMPLOYER_WITHDREW"),
    4: .same(proto: "COMPLETED"),
    5: .same(proto: "CLOSED"),
  ]
}

extension Google_Cloud_Talent_V4beta1_Application.ApplicationStage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "APPLICATION_STAGE_UNSPECIFIED"),
    1: .same(proto: "NEW"),
    2: .same(proto: "SCREEN"),
    3: .same(proto: "HIRING_MANAGER_REVIEW"),
    4: .same(proto: "INTERVIEW"),
    5: .same(proto: "OFFER_EXTENDED"),
    6: .same(proto: "OFFER_ACCEPTED"),
    7: .same(proto: "STARTED"),
  ]
}
