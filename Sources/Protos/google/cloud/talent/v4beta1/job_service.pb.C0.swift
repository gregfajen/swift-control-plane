// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4beta1/job_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An enum that specifies the job attributes that are returned in the
/// [MatchingJob.job][google.cloud.talent.v4beta1.SearchJobsResponse.MatchingJob.job] or
/// [ListJobsResponse.jobs][google.cloud.talent.v4beta1.ListJobsResponse.jobs] fields.
public enum Google_Cloud_Talent_V4beta1_JobView: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value.
  case unspecified // = 0

  /// A ID only view of job, with following attributes:
  /// [Job.name][google.cloud.talent.v4beta1.Job.name], [Job.requisition_id][google.cloud.talent.v4beta1.Job.requisition_id], [Job.language_code][google.cloud.talent.v4beta1.Job.language_code].
  case idOnly // = 1

  /// A minimal view of the job, with the following attributes:
  /// [Job.name][google.cloud.talent.v4beta1.Job.name], [Job.requisition_id][google.cloud.talent.v4beta1.Job.requisition_id], [Job.title][google.cloud.talent.v4beta1.Job.title],
  /// [Job.company][google.cloud.talent.v4beta1.Job.company], [Job.DerivedInfo.locations][google.cloud.talent.v4beta1.Job.DerivedInfo.locations], [Job.language_code][google.cloud.talent.v4beta1.Job.language_code].
  case minimal // = 2

  /// A small view of the job, with the following attributes in the search
  /// results: [Job.name][google.cloud.talent.v4beta1.Job.name], [Job.requisition_id][google.cloud.talent.v4beta1.Job.requisition_id], [Job.title][google.cloud.talent.v4beta1.Job.title],
  /// [Job.company][google.cloud.talent.v4beta1.Job.company], [Job.DerivedInfo.locations][google.cloud.talent.v4beta1.Job.DerivedInfo.locations], [Job.visibility][google.cloud.talent.v4beta1.Job.visibility],
  /// [Job.language_code][google.cloud.talent.v4beta1.Job.language_code], [Job.description][google.cloud.talent.v4beta1.Job.description].
  case small // = 3

  /// All available attributes are included in the search results.
  case full // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .idOnly
    case 2: self = .minimal
    case 3: self = .small
    case 4: self = .full
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .idOnly: return 1
    case .minimal: return 2
    case .small: return 3
    case .full: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_JobView: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_JobView] = [
    .unspecified,
    .idOnly,
    .minimal,
    .small,
    .full,
  ]
}

#endif  // swift(>=4.2)

/// Create job request.
public struct Google_Cloud_Talent_V4beta1_CreateJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant under which the job is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenant/bar". If tenant id is unspecified a default tenant
  /// is created. For example, "projects/foo".
  public var parent: String = String()

  /// Required. The Job to be created.
  public var job: Google_Cloud_Talent_V4beta1_Job {
    get {return _job ?? Google_Cloud_Talent_V4beta1_Job()}
    set {_job = newValue}
  }
  /// Returns true if `job` has been explicitly set.
  public var hasJob: Bool {return self._job != nil}
  /// Clears the value of `job`. Subsequent reads from it will return its default value.
  public mutating func clearJob() {self._job = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _job: Google_Cloud_Talent_V4beta1_Job? = nil
}

/// Get job request.
public struct Google_Cloud_Talent_V4beta1_GetJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the job to retrieve.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
  /// example, "projects/foo/tenants/bar/jobs/baz".
  ///
  /// If tenant id is unspecified, the default tenant is used. For
  /// example, "projects/foo/jobs/bar".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Update job request.
public struct Google_Cloud_Talent_V4beta1_UpdateJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Job to be updated.
  public var job: Google_Cloud_Talent_V4beta1_Job {
    get {return _job ?? Google_Cloud_Talent_V4beta1_Job()}
    set {_job = newValue}
  }
  /// Returns true if `job` has been explicitly set.
  public var hasJob: Bool {return self._job != nil}
  /// Clears the value of `job`. Subsequent reads from it will return its default value.
  public mutating func clearJob() {self._job = nil}

  /// Strongly recommended for the best service experience.
  ///
  /// If [update_mask][google.cloud.talent.v4beta1.UpdateJobRequest.update_mask] is provided, only the specified fields in
  /// [job][google.cloud.talent.v4beta1.UpdateJobRequest.job] are updated. Otherwise all the fields are updated.
  ///
  /// A field mask to restrict the fields that are updated. Only
  /// top level fields of [Job][google.cloud.talent.v4beta1.Job] are supported.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _job: Google_Cloud_Talent_V4beta1_Job? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Delete job request.
public struct Google_Cloud_Talent_V4beta1_DeleteJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the job to be deleted.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
  /// example, "projects/foo/tenants/bar/jobs/baz".
  ///
  /// If tenant id is unspecified, the default tenant is used. For
  /// example, "projects/foo/jobs/bar".
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Batch delete jobs request.
public struct Google_Cloud_Talent_V4beta1_BatchDeleteJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant under which the job is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
  /// is created. For example, "projects/foo".
  public var parent: String = String()

  /// Required. The filter string specifies the jobs to be deleted.
  ///
  /// Supported operator: =, AND
  ///
  /// The fields eligible for filtering are:
  ///
  /// * `companyName` (Required)
  /// * `requisitionId` (Required)
  ///
  /// Sample Query: companyName = "projects/foo/companies/bar" AND
  /// requisitionId = "req-1"
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// List jobs request.
public struct Google_Cloud_Talent_V4beta1_ListJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant under which the job is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
  /// is created. For example, "projects/foo".
  public var parent: String = String()

  /// Required. The filter string specifies the jobs to be enumerated.
  ///
  /// Supported operator: =, AND
  ///
  /// The fields eligible for filtering are:
  ///
  /// * `companyName` (Required)
  /// * `requisitionId`
  /// * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
  /// OPEN if no value is specified.
  ///
  /// Sample Query:
  ///
  /// * companyName = "projects/foo/tenants/bar/companies/baz"
  /// * companyName = "projects/foo/tenants/bar/companies/baz" AND
  /// requisitionId = "req-1"
  /// * companyName = "projects/foo/tenants/bar/companies/baz" AND
  /// status = "EXPIRED"
  public var filter: String = String()

  /// The starting point of a query result.
  public var pageToken: String = String()

  /// The maximum number of jobs to be returned per page of results.
  ///
  /// If [job_view][google.cloud.talent.v4beta1.ListJobsRequest.job_view] is set to [JobView.JOB_VIEW_ID_ONLY][google.cloud.talent.v4beta1.JobView.JOB_VIEW_ID_ONLY], the maximum allowed
  /// page size is 1000. Otherwise, the maximum allowed page size is 100.
  ///
  /// Default is 100 if empty or a number < 1 is specified.
  public var pageSize: Int32 = 0

  /// The desired job attributes returned for jobs in the
  /// search response. Defaults to [JobView.JOB_VIEW_FULL][google.cloud.talent.v4beta1.JobView.JOB_VIEW_FULL] if no value is
  /// specified.
  public var jobView: Google_Cloud_Talent_V4beta1_JobView = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// List jobs response.
public struct Google_Cloud_Talent_V4beta1_ListJobsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Jobs for a given company.
  ///
  /// The maximum number of items returned is based on the limit field
  /// provided in the request.
  public var jobs: [Google_Cloud_Talent_V4beta1_Job] = []

  /// A token to retrieve the next page of results.
  public var nextPageToken: String = String()

  /// Additional information for the API invocation, such as the request
  /// tracking id.
  public var metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata {
    get {return _metadata ?? Google_Cloud_Talent_V4beta1_ResponseMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata? = nil
}

/// The Request body of the `SearchJobs` call.
public struct Google_Cloud_Talent_V4beta1_SearchJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant to search within.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
  /// is created. For example, "projects/foo".
  public var parent: String {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  /// Mode of a search.
  ///
  /// Defaults to [SearchMode.JOB_SEARCH][google.cloud.talent.v4beta1.SearchJobsRequest.SearchMode.JOB_SEARCH].
  public var searchMode: Google_Cloud_Talent_V4beta1_SearchJobsRequest.SearchMode {
    get {return _storage._searchMode}
    set {_uniqueStorage()._searchMode = newValue}
  }

  /// Required. The meta information collected about the job searcher, used to improve the
  /// search quality of the service. The identifiers (such as `user_id`) are
  /// provided by users, and must be unique and consistent.
  public var requestMetadata: Google_Cloud_Talent_V4beta1_RequestMetadata {
    get {return _storage._requestMetadata ?? Google_Cloud_Talent_V4beta1_RequestMetadata()}
    set {_uniqueStorage()._requestMetadata = newValue}
  }
  /// Returns true if `requestMetadata` has been explicitly set.
  public var hasRequestMetadata: Bool {return _storage._requestMetadata != nil}
  /// Clears the value of `requestMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearRequestMetadata() {_uniqueStorage()._requestMetadata = nil}

  /// Query used to search against jobs, such as keyword, location filters, etc.
  public var jobQuery: Google_Cloud_Talent_V4beta1_JobQuery {
    get {return _storage._jobQuery ?? Google_Cloud_Talent_V4beta1_JobQuery()}
    set {_uniqueStorage()._jobQuery = newValue}
  }
  /// Returns true if `jobQuery` has been explicitly set.
  public var hasJobQuery: Bool {return _storage._jobQuery != nil}
  /// Clears the value of `jobQuery`. Subsequent reads from it will return its default value.
  public mutating func clearJobQuery() {_uniqueStorage()._jobQuery = nil}

  /// Controls whether to broaden the search when it produces sparse results.
  /// Broadened queries append results to the end of the matching results
  /// list.
  ///
  /// Defaults to false.
  public var enableBroadening: Bool {
    get {return _storage._enableBroadening}
    set {_uniqueStorage()._enableBroadening = newValue}
  }

  /// Controls if the search job request requires the return of a precise
  /// count of the first 300 results. Setting this to `true` ensures
  /// consistency in the number of results per page. Best practice is to set this
  /// value to true if a client allows users to jump directly to a
  /// non-sequential search results page.
  ///
  /// Enabling this flag may adversely impact performance.
  ///
  /// Defaults to false.
  public var requirePreciseResultSize: Bool {
    get {return _storage._requirePreciseResultSize}
    set {_uniqueStorage()._requirePreciseResultSize = newValue}
  }

  /// An expression specifies a histogram request against matching jobs.
  ///
  /// Expression syntax is an aggregation function call with histogram facets and
  /// other options.
  ///
  /// Available aggregation function calls are:
  /// * `count(string_histogram_facet)`: Count the number of matching entities,
  /// for each distinct attribute value.
  /// * `count(numeric_histogram_facet, list of buckets)`: Count the number of
  /// matching entities within each bucket.
  ///
  /// Data types:
  ///
  /// * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
  /// * String: string like "any string with backslash escape for quote(\")."
  /// * Number: whole number and floating point number like 10, -1 and -0.01.
  /// * List: list of elements with comma(,) separator surrounded by square
  /// brackets, for example, [1, 2, 3] and ["one", "two", "three"].
  ///
  /// Built-in constants:
  ///
  /// * MIN (minimum number similar to java Double.MIN_VALUE)
  /// * MAX (maximum number similar to java Double.MAX_VALUE)
  ///
  /// Built-in functions:
  ///
  /// * bucket(start, end[, label]): bucket built-in function creates a bucket
  /// with range of [start, end). Note that the end is exclusive, for example,
  /// bucket(1, MAX, "positive number") or bucket(1, 10).
  ///
  /// Job histogram facets:
  ///
  /// * company_display_name: histogram by [Job.company_display_name][google.cloud.talent.v4beta1.Job.company_display_name].
  /// * employment_type: histogram by [Job.employment_types][google.cloud.talent.v4beta1.Job.employment_types], for example,
  ///   "FULL_TIME", "PART_TIME".
  /// * company_size: histogram by [CompanySize][google.cloud.talent.v4beta1.CompanySize], for example, "SMALL",
  /// "MEDIUM", "BIG".
  /// * publish_time_in_month: histogram by the [Job.posting_publish_time][google.cloud.talent.v4beta1.Job.posting_publish_time]
  ///   in months.
  ///   Must specify list of numeric buckets in spec.
  /// * publish_time_in_year: histogram by the [Job.posting_publish_time][google.cloud.talent.v4beta1.Job.posting_publish_time]
  ///   in years.
  ///   Must specify list of numeric buckets in spec.
  /// * degree_types: histogram by the [Job.degree_types][google.cloud.talent.v4beta1.Job.degree_types], for example,
  ///   "Bachelors", "Masters".
  /// * job_level: histogram by the [Job.job_level][google.cloud.talent.v4beta1.Job.job_level], for example, "Entry
  ///   Level".
  /// * country: histogram by the country code of jobs, for example, "US", "FR".
  /// * admin1: histogram by the admin1 code of jobs, which is a global
  ///   placeholder referring to the state, province, or the particular term a
  ///   country uses to define the geographic structure below the country level,
  ///   for example, "CA", "IL".
  /// * city: histogram by a combination of the "city name, admin1 code". For
  ///   example,  "Mountain View, CA", "New York, NY".
  /// * admin1_country: histogram by a combination of the "admin1 code, country",
  ///   for example, "CA, US", "IL, US".
  /// * city_coordinate: histogram by the city center's GPS coordinates (latitude
  ///   and longitude), for example, 37.4038522,-122.0987765. Since the
  ///   coordinates of a city center can change, customers may need to refresh
  ///   them periodically.
  /// * locale: histogram by the [Job.language_code][google.cloud.talent.v4beta1.Job.language_code], for example, "en-US",
  ///   "fr-FR".
  /// * language: histogram by the language subtag of the [Job.language_code][google.cloud.talent.v4beta1.Job.language_code],
  ///   for example, "en", "fr".
  /// * category: histogram by the [JobCategory][google.cloud.talent.v4beta1.JobCategory], for example,
  ///   "COMPUTER_AND_IT", "HEALTHCARE".
  /// * base_compensation_unit: histogram by the
  ///   [CompensationInfo.CompensationUnit][google.cloud.talent.v4beta1.CompensationInfo.CompensationUnit] of base
  ///   salary, for example, "WEEKLY", "MONTHLY".
  /// * base_compensation: histogram by the base salary. Must specify list of
  ///   numeric buckets to group results by.
  /// * annualized_base_compensation: histogram by the base annualized salary.
  ///   Must specify list of numeric buckets to group results by.
  /// * annualized_total_compensation: histogram by the total annualized salary.
  ///   Must specify list of numeric buckets to group results by.
  /// * string_custom_attribute: histogram by string [Job.custom_attributes][google.cloud.talent.v4beta1.Job.custom_attributes].
  ///   Values can be accessed via square bracket notations like
  ///   string_custom_attribute["key1"].
  /// * numeric_custom_attribute: histogram by numeric [Job.custom_attributes][google.cloud.talent.v4beta1.Job.custom_attributes].
  ///   Values can be accessed via square bracket notations like
  ///   numeric_custom_attribute["key1"]. Must specify list of numeric buckets to
  ///   group results by.
  ///
  /// Example expressions:
  ///
  /// * `count(admin1)`
  /// * `count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000),
  /// bucket(100000, MAX)])`
  /// * `count(string_custom_attribute["some-string-custom-attribute"])`
  /// * `count(numeric_custom_attribute["some-numeric-custom-attribute"],
  ///   [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative"])`
  public var histogramQueries: [Google_Cloud_Talent_V4beta1_HistogramQuery] {
    get {return _storage._histogramQueries}
    set {_uniqueStorage()._histogramQueries = newValue}
  }

  /// The desired job attributes returned for jobs in the search response.
  /// Defaults to [JobView.JOB_VIEW_SMALL][google.cloud.talent.v4beta1.JobView.JOB_VIEW_SMALL] if no value is specified.
  public var jobView: Google_Cloud_Talent_V4beta1_JobView {
    get {return _storage._jobView}
    set {_uniqueStorage()._jobView = newValue}
  }

  /// An integer that specifies the current offset (that is, starting result
  /// location, amongst the jobs deemed by the API as relevant) in search
  /// results. This field is only considered if [page_token][google.cloud.talent.v4beta1.SearchJobsRequest.page_token] is unset.
  ///
  /// The maximum allowed value is 5000. Otherwise an error is thrown.
  ///
  /// For example, 0 means to  return results starting from the first matching
  /// job, and 10 means to return from the 11th job. This can be used for
  /// pagination, (for example, pageSize = 10 and offset = 10 means to return
  /// from the second page).
  public var offset: Int32 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  /// A limit on the number of jobs returned in the search results.
  /// Increasing this value above the default value of 10 can increase search
  /// response time. The value can be between 1 and 100.
  public var pageSize: Int32 {
    get {return _storage._pageSize}
    set {_uniqueStorage()._pageSize = newValue}
  }

  /// The token specifying the current offset within
  /// search results. See [SearchJobsResponse.next_page_token][google.cloud.talent.v4beta1.SearchJobsResponse.next_page_token] for
  /// an explanation of how to obtain the next set of query results.
  public var pageToken: String {
    get {return _storage._pageToken}
    set {_uniqueStorage()._pageToken = newValue}
  }

  /// The criteria determining how search results are sorted. Default is
  /// `"relevance desc"`.
  ///
  /// Supported options are:
  ///
  /// * `"relevance desc"`: By relevance descending, as determined by the API
  ///   algorithms. Relevance thresholding of query results is only available
  ///   with this ordering.
  /// * `"posting_publish_time desc"`: By [Job.posting_publish_time][google.cloud.talent.v4beta1.Job.posting_publish_time]
  ///   descending.
  /// * `"posting_update_time desc"`: By [Job.posting_update_time][google.cloud.talent.v4beta1.Job.posting_update_time]
  ///   descending.
  /// * `"title"`: By [Job.title][google.cloud.talent.v4beta1.Job.title] ascending.
  /// * `"title desc"`: By [Job.title][google.cloud.talent.v4beta1.Job.title] descending.
  /// * `"annualized_base_compensation"`: By job's
  ///   [CompensationInfo.annualized_base_compensation_range][google.cloud.talent.v4beta1.CompensationInfo.annualized_base_compensation_range] ascending. Jobs
  ///   whose annualized base compensation is unspecified are put at the end of
  ///   search results.
  /// * `"annualized_base_compensation desc"`: By job's
  ///   [CompensationInfo.annualized_base_compensation_range][google.cloud.talent.v4beta1.CompensationInfo.annualized_base_compensation_range] descending. Jobs
  ///   whose annualized base compensation is unspecified are put at the end of
  ///   search results.
  /// * `"annualized_total_compensation"`: By job's
  ///   [CompensationInfo.annualized_total_compensation_range][google.cloud.talent.v4beta1.CompensationInfo.annualized_total_compensation_range] ascending. Jobs
  ///   whose annualized base compensation is unspecified are put at the end of
  ///   search results.
  /// * `"annualized_total_compensation desc"`: By job's
  ///   [CompensationInfo.annualized_total_compensation_range][google.cloud.talent.v4beta1.CompensationInfo.annualized_total_compensation_range] descending. Jobs
  ///   whose annualized base compensation is unspecified are put at the end of
  ///   search results.
  /// * `"custom_ranking desc"`: By the relevance score adjusted to the
  ///   [SearchJobsRequest.CustomRankingInfo.ranking_expression][google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.ranking_expression] with weight
  ///   factor assigned by
  ///   [SearchJobsRequest.CustomRankingInfo.importance_level][google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.importance_level] in descending
  ///   order.
  /// * Location sorting: Use the special syntax to order jobs by distance:<br>
  ///   `"distance_from('Hawaii')"`: Order by distance from Hawaii.<br>
  ///   `"distance_from(19.89, 155.5)"`: Order by distance from a coordinate.<br>
  ///   `"distance_from('Hawaii'), distance_from('Puerto Rico')"`: Order by
  ///   multiple locations. See details below.<br>
  ///   `"distance_from('Hawaii'), distance_from(19.89, 155.5)"`: Order by
  ///   multiple locations. See details below.<br>
  ///   The string can have a maximum of 256 characters. When multiple distance
  ///   centers are provided, a job that is close to any of the distance centers
  ///   would have a high rank. When a job has multiple locations, the job
  ///   location closest to one of the distance centers will be used. Jobs that
  ///   don't have locations will be ranked at the bottom. Distance is calculated
  ///   with a precision of 11.3 meters (37.4 feet). Diversification strategy is
  ///   still applied unless explicitly disabled in
  ///   [diversification_level][google.cloud.talent.v4beta1.SearchJobsRequest.diversification_level].
  public var orderBy: String {
    get {return _storage._orderBy}
    set {_uniqueStorage()._orderBy = newValue}
  }

  /// Controls whether highly similar jobs are returned next to each other in
  /// the search results. Jobs are identified as highly similar based on
  /// their titles, job categories, and locations. Highly similar results are
  /// clustered so that only one representative job of the cluster is
  /// displayed to the job seeker higher up in the results, with the other jobs
  /// being displayed lower down in the results.
  ///
  /// Defaults to [DiversificationLevel.SIMPLE][google.cloud.talent.v4beta1.SearchJobsRequest.DiversificationLevel.SIMPLE] if no value
  /// is specified.
  public var diversificationLevel: Google_Cloud_Talent_V4beta1_SearchJobsRequest.DiversificationLevel {
    get {return _storage._diversificationLevel}
    set {_uniqueStorage()._diversificationLevel = newValue}
  }

  /// Controls over how job documents get ranked on top of existing relevance
  /// score (determined by API algorithm).
  public var customRankingInfo: Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo {
    get {return _storage._customRankingInfo ?? Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo()}
    set {_uniqueStorage()._customRankingInfo = newValue}
  }
  /// Returns true if `customRankingInfo` has been explicitly set.
  public var hasCustomRankingInfo: Bool {return _storage._customRankingInfo != nil}
  /// Clears the value of `customRankingInfo`. Subsequent reads from it will return its default value.
  public mutating func clearCustomRankingInfo() {_uniqueStorage()._customRankingInfo = nil}

  /// Controls whether to disable exact keyword match on [Job.title][google.cloud.talent.v4beta1.Job.title],
  /// [Job.description][google.cloud.talent.v4beta1.Job.description], [Job.company_display_name][google.cloud.talent.v4beta1.Job.company_display_name], [Job.addresses][google.cloud.talent.v4beta1.Job.addresses],
  /// [Job.qualifications][google.cloud.talent.v4beta1.Job.qualifications]. When disable keyword match is turned off, a
  /// keyword match returns jobs that do not match given category filters when
  /// there are matching keywords. For example, for the query "program manager,"
  /// a result is returned even if the job posting has the title "software
  /// developer," which doesn't fall into "program manager" ontology, but does
  /// have "program manager" appearing in its description.
  ///
  /// For queries like "cloud" that don't contain title or
  /// location specific ontology, jobs with "cloud" keyword matches are returned
  /// regardless of this flag's value.
  ///
  /// Use [Company.keyword_searchable_job_custom_attributes][google.cloud.talent.v4beta1.Company.keyword_searchable_job_custom_attributes] if
  /// company-specific globally matched custom field/attribute string values are
  /// needed. Enabling keyword match improves recall of subsequent search
  /// requests.
  ///
  /// Defaults to false.
  public var disableKeywordMatch: Bool {
    get {return _storage._disableKeywordMatch}
    set {_uniqueStorage()._disableKeywordMatch = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A string-represented enumeration of the job search mode. The service
  /// operate differently for different modes of service.
  public enum SearchMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The mode of the search method isn't specified. The default search
    /// behavior is identical to JOB_SEARCH search behavior.
    case unspecified // = 0

    /// The job search matches against all jobs, and featured jobs
    /// (jobs with promotionValue > 0) are not specially handled.
    case jobSearch // = 1

    /// The job search matches only against featured jobs (jobs with a
    /// promotionValue > 0). This method doesn't return any jobs having a
    /// promotionValue <= 0. The search results order is determined by the
    /// promotionValue (jobs with a higher promotionValue are returned higher up
    /// in the search results), with relevance being used as a tiebreaker.
    case featuredJobSearch // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .jobSearch
      case 2: self = .featuredJobSearch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .jobSearch: return 1
      case .featuredJobSearch: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Controls whether highly similar jobs are returned next to each other in
  /// the search results. Jobs are identified as highly similar based on
  /// their titles, job categories, and locations. Highly similar results are
  /// clustered so that only one representative job of the cluster is
  /// displayed to the job seeker higher up in the results, with the other jobs
  /// being displayed lower down in the results.
  public enum DiversificationLevel: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The diversification level isn't specified.
    case unspecified // = 0

    /// Disables diversification. Jobs that would normally be pushed to the last
    /// page would not have their positions altered. This may result in highly
    /// similar jobs appearing in sequence in the search results.
    case disabled // = 1

    /// Default diversifying behavior. The result list is ordered so that
    /// highly similar results are pushed to the end of the last page of search
    /// results. If you are using pageToken to page through the result set,
    /// latency might be lower but we can't guarantee that all results are
    /// returned. If you are using page offset, latency might be higher but all
    /// results are returned.
    case simple // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .disabled
      case 2: self = .simple
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .disabled: return 1
      case .simple: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Custom ranking information for [SearchJobsRequest][google.cloud.talent.v4beta1.SearchJobsRequest].
  public struct CustomRankingInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. Controls over how important the score of
    /// [CustomRankingInfo.ranking_expression][google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.ranking_expression] gets applied to job's final
    /// ranking position.
    ///
    /// An error is thrown if not specified.
    public var importanceLevel: Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo.ImportanceLevel = .unspecified

    /// Required. Controls over how job documents get ranked on top of existing relevance
    /// score (determined by API algorithm). A combination of the ranking
    /// expression and relevance score is used to determine job's final ranking
    /// position.
    ///
    /// The syntax for this expression is a subset of Google SQL syntax.
    ///
    /// Supported operators are: +, -, *, /, where the left and right side of
    /// the operator is either a numeric [Job.custom_attributes][google.cloud.talent.v4beta1.Job.custom_attributes] key,
    /// integer/double value or an expression that can be evaluated to a number.
    ///
    /// Parenthesis are supported to adjust calculation precedence. The
    /// expression must be < 100 characters in length.
    ///
    /// The expression is considered invalid for a job if the expression
    /// references custom attributes that are not populated on the job or if the
    /// expression results in a divide by zero. If an expression is invalid for a
    /// job, that job is demoted to the end of the results.
    ///
    /// Sample ranking expression
    /// (year + 25) * 0.25 - (freshness / 0.5)
    public var rankingExpression: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The importance level for [CustomRankingInfo.ranking_expression][google.cloud.talent.v4beta1.SearchJobsRequest.CustomRankingInfo.ranking_expression].
    public enum ImportanceLevel: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Default value if the importance level isn't specified.
      case unspecified // = 0

      /// The given ranking expression is of None importance, existing relevance
      /// score (determined by API algorithm) dominates job's final ranking
      /// position.
      case none // = 1

      /// The given ranking expression is of Low importance in terms of job's
      /// final ranking position compared to existing relevance
      /// score (determined by API algorithm).
      case low // = 2

      /// The given ranking expression is of Mild importance in terms of job's
      /// final ranking position compared to existing relevance
      /// score (determined by API algorithm).
      case mild // = 3

      /// The given ranking expression is of Medium importance in terms of job's
      /// final ranking position compared to existing relevance
      /// score (determined by API algorithm).
      case medium // = 4

      /// The given ranking expression is of High importance in terms of job's
      /// final ranking position compared to existing relevance
      /// score (determined by API algorithm).
      case high // = 5

      /// The given ranking expression is of Extreme importance, and dominates
      /// job's final ranking position with existing relevance
      /// score (determined by API algorithm) ignored.
      case extreme // = 6
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .none
        case 2: self = .low
        case 3: self = .mild
        case 4: self = .medium
        case 5: self = .high
        case 6: self = .extreme
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .none: return 1
        case .low: return 2
        case .mild: return 3
        case .medium: return 4
        case .high: return 5
        case .extreme: return 6
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.SearchMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_SearchJobsRequest.SearchMode] = [
    .unspecified,
    .jobSearch,
    .featuredJobSearch,
  ]
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.DiversificationLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_SearchJobsRequest.DiversificationLevel] = [
    .unspecified,
    .disabled,
    .simple,
  ]
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo.ImportanceLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo.ImportanceLevel] = [
    .unspecified,
    .none,
    .low,
    .mild,
    .medium,
    .high,
    .extreme,
  ]
}

#endif  // swift(>=4.2)

/// Response for SearchJob method.
public struct Google_Cloud_Talent_V4beta1_SearchJobsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Job entities that match the specified [SearchJobsRequest][google.cloud.talent.v4beta1.SearchJobsRequest].
  public var matchingJobs: [Google_Cloud_Talent_V4beta1_SearchJobsResponse.MatchingJob] = []

  /// The histogram results that match with specified
  /// [SearchJobsRequest.histogram_queries][google.cloud.talent.v4beta1.SearchJobsRequest.histogram_queries].
  public var histogramQueryResults: [Google_Cloud_Talent_V4beta1_HistogramQueryResult] = []

  /// The token that specifies the starting position of the next page of results.
  /// This field is empty if there are no more results.
  public var nextPageToken: String = String()

  /// The location filters that the service applied to the specified query. If
  /// any filters are lat-lng based, the [Location.location_type][google.cloud.talent.v4beta1.Location.location_type] is
  /// [Location.LocationType.LOCATION_TYPE_UNSPECIFIED][google.cloud.talent.v4beta1.Location.LocationType.LOCATION_TYPE_UNSPECIFIED].
  public var locationFilters: [Google_Cloud_Talent_V4beta1_Location] = []

  /// An estimation of the number of jobs that match the specified query.
  ///
  /// This number isn't guaranteed to be accurate. For accurate results,
  /// see [SearchJobsRequest.require_precise_result_size][google.cloud.talent.v4beta1.SearchJobsRequest.require_precise_result_size].
  public var estimatedTotalSize: Int32 = 0

  /// The precise result count, which is available only if the client set
  /// [SearchJobsRequest.require_precise_result_size][google.cloud.talent.v4beta1.SearchJobsRequest.require_precise_result_size] to `true`, or if the
  /// response is the last page of results. Otherwise, the value is `-1`.
  public var totalSize: Int32 = 0

  /// Additional information for the API invocation, such as the request
  /// tracking id.
  public var metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata {
    get {return _metadata ?? Google_Cloud_Talent_V4beta1_ResponseMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// If query broadening is enabled, we may append additional results from the
  /// broadened query. This number indicates how many of the jobs returned in the
  /// jobs field are from the broadened query. These results are always at the
  /// end of the jobs list. In particular, a value of 0, or if the field isn't
  /// set, all the jobs in the jobs list are from the original
  /// (without broadening) query. If this field is non-zero, subsequent requests
  /// with offset after this result set should contain all broadened results.
  public var broadenedQueryJobsCount: Int32 = 0

  /// The spell checking result, and correction.
  public var spellCorrection: Google_Cloud_Talent_V4beta1_SpellingCorrection {
    get {return _spellCorrection ?? Google_Cloud_Talent_V4beta1_SpellingCorrection()}
    set {_spellCorrection = newValue}
  }
  /// Returns true if `spellCorrection` has been explicitly set.
  public var hasSpellCorrection: Bool {return self._spellCorrection != nil}
  /// Clears the value of `spellCorrection`. Subsequent reads from it will return its default value.
  public mutating func clearSpellCorrection() {self._spellCorrection = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Job entry with metadata inside [SearchJobsResponse][google.cloud.talent.v4beta1.SearchJobsResponse].
  public struct MatchingJob {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Job resource that matches the specified [SearchJobsRequest][google.cloud.talent.v4beta1.SearchJobsRequest].
    public var job: Google_Cloud_Talent_V4beta1_Job {
      get {return _job ?? Google_Cloud_Talent_V4beta1_Job()}
      set {_job = newValue}
    }
    /// Returns true if `job` has been explicitly set.
    public var hasJob: Bool {return self._job != nil}
    /// Clears the value of `job`. Subsequent reads from it will return its default value.
    public mutating func clearJob() {self._job = nil}

    /// A summary of the job with core information that's displayed on the search
    /// results listing page.
    public var jobSummary: String = String()

    /// Contains snippets of text from the [Job.title][google.cloud.talent.v4beta1.Job.title] field most
    /// closely matching a search query's keywords, if available. The matching
    /// query keywords are enclosed in HTML bold tags.
    public var jobTitleSnippet: String = String()

    /// Contains snippets of text from the [Job.description][google.cloud.talent.v4beta1.Job.description] and similar
    /// fields that most closely match a search query's keywords, if available.
    /// All HTML tags in the original fields are stripped when returned in this
    /// field, and matching query keywords are enclosed in HTML bold tags.
    public var searchTextSnippet: String = String()

    /// Commute information which is generated based on specified
    ///  [CommuteFilter][google.cloud.talent.v4beta1.CommuteFilter].
    public var commuteInfo: Google_Cloud_Talent_V4beta1_SearchJobsResponse.CommuteInfo {
      get {return _commuteInfo ?? Google_Cloud_Talent_V4beta1_SearchJobsResponse.CommuteInfo()}
      set {_commuteInfo = newValue}
    }
    /// Returns true if `commuteInfo` has been explicitly set.
    public var hasCommuteInfo: Bool {return self._commuteInfo != nil}
    /// Clears the value of `commuteInfo`. Subsequent reads from it will return its default value.
    public mutating func clearCommuteInfo() {self._commuteInfo = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _job: Google_Cloud_Talent_V4beta1_Job? = nil
    fileprivate var _commuteInfo: Google_Cloud_Talent_V4beta1_SearchJobsResponse.CommuteInfo? = nil
  }

  /// Commute details related to this job.
  public struct CommuteInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Location used as the destination in the commute calculation.
    public var jobLocation: Google_Cloud_Talent_V4beta1_Location {
      get {return _storage._jobLocation ?? Google_Cloud_Talent_V4beta1_Location()}
      set {_uniqueStorage()._jobLocation = newValue}
    }
    /// Returns true if `jobLocation` has been explicitly set.
    public var hasJobLocation: Bool {return _storage._jobLocation != nil}
    /// Clears the value of `jobLocation`. Subsequent reads from it will return its default value.
    public mutating func clearJobLocation() {_uniqueStorage()._jobLocation = nil}

    /// The number of seconds required to travel to the job location from the
    /// query location. A duration of 0 seconds indicates that the job isn't
    /// reachable within the requested duration, but was returned as part of an
    /// expanded query.
    public var travelDuration: SwiftProtobuf.Google_Protobuf_Duration {
      get {return _storage._travelDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
      set {_uniqueStorage()._travelDuration = newValue}
    }
    /// Returns true if `travelDuration` has been explicitly set.
    public var hasTravelDuration: Bool {return _storage._travelDuration != nil}
    /// Clears the value of `travelDuration`. Subsequent reads from it will return its default value.
    public mutating func clearTravelDuration() {_uniqueStorage()._travelDuration = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata? = nil
  fileprivate var _spellCorrection: Google_Cloud_Talent_V4beta1_SpellingCorrection? = nil
}

/// Request to create a batch of jobs.
public struct Google_Cloud_Talent_V4beta1_BatchCreateJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant under which the job is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
  /// is created. For example, "projects/foo".
  public var parent: String = String()

  /// Required. The jobs to be created.
  public var jobs: [Google_Cloud_Talent_V4beta1_Job] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request to update a batch of jobs.
public struct Google_Cloud_Talent_V4beta1_BatchUpdateJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the tenant under which the job is created.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
  /// "projects/foo/tenant/bar". If tenant id is unspecified, a default tenant
  /// is created. For example, "projects/foo".
  public var parent: String = String()

  /// Required. The jobs to be updated.
  public var jobs: [Google_Cloud_Talent_V4beta1_Job] = []

  /// Strongly recommended for the best service experience. Be aware that it will
  /// also increase latency when checking the status of a batch operation.
  ///
  /// If [update_mask][google.cloud.talent.v4beta1.BatchUpdateJobsRequest.update_mask] is provided, only the specified fields in
  /// [Job][google.cloud.talent.v4beta1.Job] are updated. Otherwise all the fields are updated.
  ///
  /// A field mask to restrict the fields that are updated. Only
  /// top level fields of [Job][google.cloud.talent.v4beta1.Job] are supported.
  ///
  /// If [update_mask][google.cloud.talent.v4beta1.BatchUpdateJobsRequest.update_mask] is provided, The [Job][google.cloud.talent.v4beta1.Job] inside
  /// [JobResult][google.cloud.talent.v4beta1.JobOperationResult.JobResult]
  /// will only contains fields that is updated, plus the Id of the Job.
  /// Otherwise,  [Job][google.cloud.talent.v4beta1.Job] will include all fields, which can yield a very
  /// large response.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// The result of [JobService.BatchCreateJobs][google.cloud.talent.v4beta1.JobService.BatchCreateJobs] or
/// [JobService.BatchUpdateJobs][google.cloud.talent.v4beta1.JobService.BatchUpdateJobs] APIs. It's used to
/// replace [google.longrunning.Operation.response][google.longrunning.Operation.response] in case of success.
public struct Google_Cloud_Talent_V4beta1_JobOperationResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of job mutation results from a batch mutate operation. It can change
  /// until operation status is FINISHED, FAILED or CANCELLED.
  public var jobResults: [Google_Cloud_Talent_V4beta1_JobOperationResult.JobResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Mutation result of a job.
  public struct JobResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Here [Job][google.cloud.talent.v4beta1.Job] only contains basic information including [name][google.cloud.talent.v4beta1.Job.name],
    /// [company][google.cloud.talent.v4beta1.Job.company], [language_code][google.cloud.talent.v4beta1.Job.language_code]
    /// and [requisition_id][google.cloud.talent.v4beta1.Job.requisition_id], use getJob method to retrieve
    /// detailed information of the created/updated job.
    public var job: Google_Cloud_Talent_V4beta1_Job {
      get {return _job ?? Google_Cloud_Talent_V4beta1_Job()}
      set {_job = newValue}
    }
    /// Returns true if `job` has been explicitly set.
    public var hasJob: Bool {return self._job != nil}
    /// Clears the value of `job`. Subsequent reads from it will return its default value.
    public mutating func clearJob() {self._job = nil}

    /// The status of the job processed. This field is populated if the
    /// processing of the [job][google.cloud.talent.v4beta1.JobOperationResult.JobResult.job] fails.
    public var status: Google_Rpc_Status {
      get {return _status ?? Google_Rpc_Status()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _job: Google_Cloud_Talent_V4beta1_Job? = nil
    fileprivate var _status: Google_Rpc_Status? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4beta1"

extension Google_Cloud_Talent_V4beta1_JobView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_VIEW_UNSPECIFIED"),
    1: .same(proto: "JOB_VIEW_ID_ONLY"),
    2: .same(proto: "JOB_VIEW_MINIMAL"),
    3: .same(proto: "JOB_VIEW_SMALL"),
    4: .same(proto: "JOB_VIEW_FULL"),
  ]
}

extension Google_Cloud_Talent_V4beta1_CreateJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "job"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._job) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._job {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_CreateJobRequest, rhs: Google_Cloud_Talent_V4beta1_CreateJobRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._job != rhs._job {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_GetJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_GetJobRequest, rhs: Google_Cloud_Talent_V4beta1_GetJobRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_UpdateJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "job"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._job) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._job {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_UpdateJobRequest, rhs: Google_Cloud_Talent_V4beta1_UpdateJobRequest) -> Bool {
    if lhs._job != rhs._job {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_DeleteJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteJobRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_DeleteJobRequest, rhs: Google_Cloud_Talent_V4beta1_DeleteJobRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_BatchDeleteJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchDeleteJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_BatchDeleteJobsRequest, rhs: Google_Cloud_Talent_V4beta1_BatchDeleteJobsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_ListJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_token"),
    4: .standard(proto: "page_size"),
    5: .standard(proto: "job_view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.jobView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    if self.jobView != .unspecified {
      try visitor.visitSingularEnumField(value: self.jobView, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_ListJobsRequest, rhs: Google_Cloud_Talent_V4beta1_ListJobsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.jobView != rhs.jobView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_ListJobsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListJobsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jobs"),
    2: .standard(proto: "next_page_token"),
    3: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.jobs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.jobs, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_ListJobsResponse, rhs: Google_Cloud_Talent_V4beta1_ListJobsResponse) -> Bool {
    if lhs.jobs != rhs.jobs {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "search_mode"),
    3: .standard(proto: "request_metadata"),
    4: .standard(proto: "job_query"),
    5: .standard(proto: "enable_broadening"),
    6: .standard(proto: "require_precise_result_size"),
    7: .standard(proto: "histogram_queries"),
    8: .standard(proto: "job_view"),
    9: .same(proto: "offset"),
    10: .standard(proto: "page_size"),
    11: .standard(proto: "page_token"),
    12: .standard(proto: "order_by"),
    13: .standard(proto: "diversification_level"),
    14: .standard(proto: "custom_ranking_info"),
    16: .standard(proto: "disable_keyword_match"),
  ]

  fileprivate class _StorageClass {
    var _parent: String = String()
    var _searchMode: Google_Cloud_Talent_V4beta1_SearchJobsRequest.SearchMode = .unspecified
    var _requestMetadata: Google_Cloud_Talent_V4beta1_RequestMetadata? = nil
    var _jobQuery: Google_Cloud_Talent_V4beta1_JobQuery? = nil
    var _enableBroadening: Bool = false
    var _requirePreciseResultSize: Bool = false
    var _histogramQueries: [Google_Cloud_Talent_V4beta1_HistogramQuery] = []
    var _jobView: Google_Cloud_Talent_V4beta1_JobView = .unspecified
    var _offset: Int32 = 0
    var _pageSize: Int32 = 0
    var _pageToken: String = String()
    var _orderBy: String = String()
    var _diversificationLevel: Google_Cloud_Talent_V4beta1_SearchJobsRequest.DiversificationLevel = .unspecified
    var _customRankingInfo: Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo? = nil
    var _disableKeywordMatch: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _parent = source._parent
      _searchMode = source._searchMode
      _requestMetadata = source._requestMetadata
      _jobQuery = source._jobQuery
      _enableBroadening = source._enableBroadening
      _requirePreciseResultSize = source._requirePreciseResultSize
      _histogramQueries = source._histogramQueries
      _jobView = source._jobView
      _offset = source._offset
      _pageSize = source._pageSize
      _pageToken = source._pageToken
      _orderBy = source._orderBy
      _diversificationLevel = source._diversificationLevel
      _customRankingInfo = source._customRankingInfo
      _disableKeywordMatch = source._disableKeywordMatch
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._parent) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._searchMode) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._requestMetadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._jobQuery) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._enableBroadening) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._requirePreciseResultSize) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._histogramQueries) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._jobView) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._offset) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._pageSize) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._pageToken) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._orderBy) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._diversificationLevel) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._customRankingInfo) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._disableKeywordMatch) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 1)
      }
      if _storage._searchMode != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._searchMode, fieldNumber: 2)
      }
      if let v = _storage._requestMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._jobQuery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._enableBroadening != false {
        try visitor.visitSingularBoolField(value: _storage._enableBroadening, fieldNumber: 5)
      }
      if _storage._requirePreciseResultSize != false {
        try visitor.visitSingularBoolField(value: _storage._requirePreciseResultSize, fieldNumber: 6)
      }
      if !_storage._histogramQueries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._histogramQueries, fieldNumber: 7)
      }
      if _storage._jobView != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._jobView, fieldNumber: 8)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt32Field(value: _storage._offset, fieldNumber: 9)
      }
      if _storage._pageSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageSize, fieldNumber: 10)
      }
      if !_storage._pageToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pageToken, fieldNumber: 11)
      }
      if !_storage._orderBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderBy, fieldNumber: 12)
      }
      if _storage._diversificationLevel != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._diversificationLevel, fieldNumber: 13)
      }
      if let v = _storage._customRankingInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if _storage._disableKeywordMatch != false {
        try visitor.visitSingularBoolField(value: _storage._disableKeywordMatch, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchJobsRequest, rhs: Google_Cloud_Talent_V4beta1_SearchJobsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._searchMode != rhs_storage._searchMode {return false}
        if _storage._requestMetadata != rhs_storage._requestMetadata {return false}
        if _storage._jobQuery != rhs_storage._jobQuery {return false}
        if _storage._enableBroadening != rhs_storage._enableBroadening {return false}
        if _storage._requirePreciseResultSize != rhs_storage._requirePreciseResultSize {return false}
        if _storage._histogramQueries != rhs_storage._histogramQueries {return false}
        if _storage._jobView != rhs_storage._jobView {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._pageSize != rhs_storage._pageSize {return false}
        if _storage._pageToken != rhs_storage._pageToken {return false}
        if _storage._orderBy != rhs_storage._orderBy {return false}
        if _storage._diversificationLevel != rhs_storage._diversificationLevel {return false}
        if _storage._customRankingInfo != rhs_storage._customRankingInfo {return false}
        if _storage._disableKeywordMatch != rhs_storage._disableKeywordMatch {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.SearchMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEARCH_MODE_UNSPECIFIED"),
    1: .same(proto: "JOB_SEARCH"),
    2: .same(proto: "FEATURED_JOB_SEARCH"),
  ]
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.DiversificationLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIVERSIFICATION_LEVEL_UNSPECIFIED"),
    1: .same(proto: "DISABLED"),
    2: .same(proto: "SIMPLE"),
  ]
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4beta1_SearchJobsRequest.protoMessageName + ".CustomRankingInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "importance_level"),
    2: .standard(proto: "ranking_expression"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.importanceLevel) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rankingExpression) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.importanceLevel != .unspecified {
      try visitor.visitSingularEnumField(value: self.importanceLevel, fieldNumber: 1)
    }
    if !self.rankingExpression.isEmpty {
      try visitor.visitSingularStringField(value: self.rankingExpression, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo, rhs: Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo) -> Bool {
    if lhs.importanceLevel != rhs.importanceLevel {return false}
    if lhs.rankingExpression != rhs.rankingExpression {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchJobsRequest.CustomRankingInfo.ImportanceLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMPORTANCE_LEVEL_UNSPECIFIED"),
    1: .same(proto: "NONE"),
    2: .same(proto: "LOW"),
    3: .same(proto: "MILD"),
    4: .same(proto: "MEDIUM"),
    5: .same(proto: "HIGH"),
    6: .same(proto: "EXTREME"),
  ]
}

extension Google_Cloud_Talent_V4beta1_SearchJobsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchJobsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "matching_jobs"),
    2: .standard(proto: "histogram_query_results"),
    3: .standard(proto: "next_page_token"),
    4: .standard(proto: "location_filters"),
    5: .standard(proto: "estimated_total_size"),
    6: .standard(proto: "total_size"),
    7: .same(proto: "metadata"),
    8: .standard(proto: "broadened_query_jobs_count"),
    9: .standard(proto: "spell_correction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.matchingJobs) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.histogramQueryResults) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.locationFilters) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.estimatedTotalSize) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.totalSize) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.broadenedQueryJobsCount) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._spellCorrection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.matchingJobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.matchingJobs, fieldNumber: 1)
    }
    if !self.histogramQueryResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.histogramQueryResults, fieldNumber: 2)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 3)
    }
    if !self.locationFilters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locationFilters, fieldNumber: 4)
    }
    if self.estimatedTotalSize != 0 {
      try visitor.visitSingularInt32Field(value: self.estimatedTotalSize, fieldNumber: 5)
    }
    if self.totalSize != 0 {
      try visitor.visitSingularInt32Field(value: self.totalSize, fieldNumber: 6)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.broadenedQueryJobsCount != 0 {
      try visitor.visitSingularInt32Field(value: self.broadenedQueryJobsCount, fieldNumber: 8)
    }
    if let v = self._spellCorrection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchJobsResponse, rhs: Google_Cloud_Talent_V4beta1_SearchJobsResponse) -> Bool {
    if lhs.matchingJobs != rhs.matchingJobs {return false}
    if lhs.histogramQueryResults != rhs.histogramQueryResults {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.locationFilters != rhs.locationFilters {return false}
    if lhs.estimatedTotalSize != rhs.estimatedTotalSize {return false}
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.broadenedQueryJobsCount != rhs.broadenedQueryJobsCount {return false}
    if lhs._spellCorrection != rhs._spellCorrection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchJobsResponse.MatchingJob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4beta1_SearchJobsResponse.protoMessageName + ".MatchingJob"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "job"),
    2: .standard(proto: "job_summary"),
    3: .standard(proto: "job_title_snippet"),
    4: .standard(proto: "search_text_snippet"),
    5: .standard(proto: "commute_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._job) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.jobSummary) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.jobTitleSnippet) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.searchTextSnippet) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commuteInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._job {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.jobSummary.isEmpty {
      try visitor.visitSingularStringField(value: self.jobSummary, fieldNumber: 2)
    }
    if !self.jobTitleSnippet.isEmpty {
      try visitor.visitSingularStringField(value: self.jobTitleSnippet, fieldNumber: 3)
    }
    if !self.searchTextSnippet.isEmpty {
      try visitor.visitSingularStringField(value: self.searchTextSnippet, fieldNumber: 4)
    }
    if let v = self._commuteInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchJobsResponse.MatchingJob, rhs: Google_Cloud_Talent_V4beta1_SearchJobsResponse.MatchingJob) -> Bool {
    if lhs._job != rhs._job {return false}
    if lhs.jobSummary != rhs.jobSummary {return false}
    if lhs.jobTitleSnippet != rhs.jobTitleSnippet {return false}
    if lhs.searchTextSnippet != rhs.searchTextSnippet {return false}
    if lhs._commuteInfo != rhs._commuteInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_SearchJobsResponse.CommuteInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4beta1_SearchJobsResponse.protoMessageName + ".CommuteInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "job_location"),
    2: .standard(proto: "travel_duration"),
  ]

  fileprivate class _StorageClass {
    var _jobLocation: Google_Cloud_Talent_V4beta1_Location? = nil
    var _travelDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jobLocation = source._jobLocation
      _travelDuration = source._travelDuration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._jobLocation) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._travelDuration) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._jobLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._travelDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_SearchJobsResponse.CommuteInfo, rhs: Google_Cloud_Talent_V4beta1_SearchJobsResponse.CommuteInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jobLocation != rhs_storage._jobLocation {return false}
        if _storage._travelDuration != rhs_storage._travelDuration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_BatchCreateJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchCreateJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "jobs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.jobs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.jobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.jobs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_BatchCreateJobsRequest, rhs: Google_Cloud_Talent_V4beta1_BatchCreateJobsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.jobs != rhs.jobs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_BatchUpdateJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchUpdateJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "jobs"),
    3: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.jobs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.jobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.jobs, fieldNumber: 2)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_BatchUpdateJobsRequest, rhs: Google_Cloud_Talent_V4beta1_BatchUpdateJobsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.jobs != rhs.jobs {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_JobOperationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JobOperationResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "job_results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.jobResults) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jobResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.jobResults, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_JobOperationResult, rhs: Google_Cloud_Talent_V4beta1_JobOperationResult) -> Bool {
    if lhs.jobResults != rhs.jobResults {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_JobOperationResult.JobResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4beta1_JobOperationResult.protoMessageName + ".JobResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "job"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._job) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._job {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_JobOperationResult.JobResult, rhs: Google_Cloud_Talent_V4beta1_JobOperationResult.JobResult) -> Bool {
    if lhs._job != rhs._job {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
