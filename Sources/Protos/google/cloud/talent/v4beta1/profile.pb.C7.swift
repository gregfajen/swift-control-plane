// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4beta1/profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A resource that represents the profile for a job candidate (also referred to
/// as a "single-source profile").
public struct Google_Cloud_Talent_V4beta1_Profile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required during profile update.
  ///
  /// Resource name assigned to a profile by the API.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/profiles/{profile_id}",
  /// for example, "projects/foo/tenants/bar/profiles/baz".
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Profile's id in client system, if available. This value is unique for each
  /// profile inside a tenant. An error is thrown if another profile with the
  /// same external_id is created.
  ///
  /// The maximum number of bytes allowed is 100.
  public var externalID: String {
    get {return _storage._externalID}
    set {_uniqueStorage()._externalID = newValue}
  }

  /// The source description indicating where the profile is acquired.
  ///
  /// For example, if a candidate profile is acquired from a resume, the user can
  /// input "resume" here to indicate the source.
  ///
  /// The maximum number of bytes allowed is 100.
  public var source: String {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  /// The URI set by clients that links to this profile's client-side copy.
  ///
  /// The maximum number of bytes allowed is 4000.
  public var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// The cluster id of the profile to associate with other profile(s) for the
  /// same candidate.
  ///
  /// This field should be generated by the customer. If a value is not provided,
  /// a random UUID is assigned to this field of the profile.
  ///
  /// This is used to link multiple profiles to the same candidate. For example,
  /// a client has a candidate with two profiles, where one was created recently
  /// and the other one was created 5 years ago. These two profiles may be very
  /// different. The clients can create the first profile and get a generated
  /// [group_id][google.cloud.talent.v4beta1.Profile.group_id], and assign it when the second profile is created,
  /// indicating these two profiles are referring to the same candidate.
  public var groupID: String {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  /// Indicates the hirable status of the candidate.
  public var isHirable: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isHirable ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isHirable = newValue}
  }
  /// Returns true if `isHirable` has been explicitly set.
  public var hasIsHirable: Bool {return _storage._isHirable != nil}
  /// Clears the value of `isHirable`. Subsequent reads from it will return its default value.
  public mutating func clearIsHirable() {_uniqueStorage()._isHirable = nil}

  /// The timestamp when the profile was first created at this source.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// The timestamp when the profile was last updated at this source.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// The timestamp when the profile was last updated as a result of a direct or
  /// indirect action by a candidate.
  ///
  /// These actions include:
  ///
  /// * Direct actions such as the candidate submitting a new resume as part of a
  /// job application to the agency, using a self-service tool such as a website
  /// to update their profile, and so on.
  /// * Indirect actions by the candidate such as uploading a resume to a job
  /// board that is collected by the agency through a feed, providing a resume to
  /// a recruiter who then uploads it into the ATS, and so on.
  /// * Updates made to the candidate's profile by the recruiter as a result of
  /// interacting with the candidate (for example adding a skill or work
  /// preference, and so on). Changes to [recruiting_notes][google.cloud.talent.v4beta1.Profile.recruiting_notes] are specifically
  /// excluded from this action type.
  ///
  /// Note: [candidate_update_time][google.cloud.talent.v4beta1.Profile.candidate_update_time] must be greater than or equal to
  /// [resume_update_time][google.cloud.talent.v4beta1.Profile.resume_update_time] or an error is thrown.
  public var candidateUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._candidateUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._candidateUpdateTime = newValue}
  }
  /// Returns true if `candidateUpdateTime` has been explicitly set.
  public var hasCandidateUpdateTime: Bool {return _storage._candidateUpdateTime != nil}
  /// Clears the value of `candidateUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearCandidateUpdateTime() {_uniqueStorage()._candidateUpdateTime = nil}

  /// The timestamp when the candidate's resume was added or updated on the
  /// candidate's profile. Whether that resume was directly uploaded by a
  /// candidate, pulled from a 3rd party job board feed, added by a recruiter,
  /// and so on.
  ///
  /// If this field is updated, it's expected that [resume][google.cloud.talent.v4beta1.Profile.resume] is provided in
  /// the create or update calls.
  public var resumeUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._resumeUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._resumeUpdateTime = newValue}
  }
  /// Returns true if `resumeUpdateTime` has been explicitly set.
  public var hasResumeUpdateTime: Bool {return _storage._resumeUpdateTime != nil}
  /// Clears the value of `resumeUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearResumeUpdateTime() {_uniqueStorage()._resumeUpdateTime = nil}

  /// The resume representing this profile.
  public var resume: Google_Cloud_Talent_V4beta1_Resume {
    get {return _storage._resume ?? Google_Cloud_Talent_V4beta1_Resume()}
    set {_uniqueStorage()._resume = newValue}
  }
  /// Returns true if `resume` has been explicitly set.
  public var hasResume: Bool {return _storage._resume != nil}
  /// Clears the value of `resume`. Subsequent reads from it will return its default value.
  public mutating func clearResume() {_uniqueStorage()._resume = nil}

  /// The names of the candidate this profile references.
  ///
  /// Currently only one person name is supported.
  public var personNames: [Google_Cloud_Talent_V4beta1_PersonName] {
    get {return _storage._personNames}
    set {_uniqueStorage()._personNames = newValue}
  }

  /// The candidate's postal addresses. It's highly recommended to
  /// input this information as accurately as possible to help improve search
  /// quality. Here are some recommendations:
  ///
  /// * Provide [Address.usage][google.cloud.talent.v4beta1.Address.usage] if possible, especially if the address is
  /// PERSONAL. During a search only personal addresses are considered. If there
  /// is no such address, all addresses with unspecified usage are assumed to be
  /// personal.
  /// * Provide [Address.current][google.cloud.talent.v4beta1.Address.current] for the current address if possible. During
  /// a search, only current addresses are considered. If there is no such
  /// address, all addresses are assumed to be current.
  ///
  /// When displaying a candidate's addresses, it is sometimes desirable to limit
  /// the number of addresses shown. In these cases we recommend that you display
  /// the addresses in the following order of priority:
  /// 1. [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
  /// 2. [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is false or not
  /// set.
  /// 3. [Address.usage][google.cloud.talent.v4beta1.Address.usage] is CONTACT_INFO_USAGE_UNSPECIFIED and
  /// [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
  /// 4. [Address.usage][google.cloud.talent.v4beta1.Address.usage] is CONTACT_INFO_USAGE_UNSPECIFIED and
  /// [Address.current][google.cloud.talent.v4beta1.Address.current] is false or not set.
  public var addresses: [Google_Cloud_Talent_V4beta1_Address] {
    get {return _storage._addresses}
    set {_uniqueStorage()._addresses = newValue}
  }

  /// The candidate's email addresses.
  public var emailAddresses: [Google_Cloud_Talent_V4beta1_Email] {
    get {return _storage._emailAddresses}
    set {_uniqueStorage()._emailAddresses = newValue}
  }

  /// The candidate's phone number(s).
  public var phoneNumbers: [Google_Cloud_Talent_V4beta1_Phone] {
    get {return _storage._phoneNumbers}
    set {_uniqueStorage()._phoneNumbers = newValue}
  }

  /// The candidate's personal URIs.
  public var personalUris: [Google_Cloud_Talent_V4beta1_PersonalUri] {
    get {return _storage._personalUris}
    set {_uniqueStorage()._personalUris = newValue}
  }

  /// Available contact information besides [addresses][google.cloud.talent.v4beta1.Profile.addresses], [email_addresses][google.cloud.talent.v4beta1.Profile.email_addresses],
  /// [phone_numbers][google.cloud.talent.v4beta1.Profile.phone_numbers] and [personal_uris][google.cloud.talent.v4beta1.Profile.personal_uris]. For example, Hang-out, Skype.
  public var additionalContactInfo: [Google_Cloud_Talent_V4beta1_AdditionalContactInfo] {
    get {return _storage._additionalContactInfo}
    set {_uniqueStorage()._additionalContactInfo = newValue}
  }

  /// The employment history records of the candidate. It's highly recommended
  /// to input this information as accurately as possible to help improve search
  /// quality. Here are some recommendations:
  ///
  /// * Specify the start and end dates of the employment records.
  /// * List different employment types separately, no matter how minor the
  /// change is.
  /// For example, only job title is changed from "software engineer" to "senior
  /// software engineer".
  /// * Provide [EmploymentRecord.is_current][google.cloud.talent.v4beta1.EmploymentRecord.is_current] for the current employment if
  /// possible. If not, it's inferred from user inputs.
  ///
  /// The limitation for max number of employment records is 100.
  public var employmentRecords: [Google_Cloud_Talent_V4beta1_EmploymentRecord] {
    get {return _storage._employmentRecords}
    set {_uniqueStorage()._employmentRecords = newValue}
  }

  /// The education history record of the candidate. It's highly recommended to
  /// input this information as accurately as possible to help improve search
  /// quality. Here are some recommendations:
  ///
  /// * Specify the start and end dates of the education records.
  /// * List each education type separately, no matter how minor the change is.
  /// For example, the profile contains the education experience from the same
  /// school but different degrees.
  /// * Provide [EducationRecord.is_current][google.cloud.talent.v4beta1.EducationRecord.is_current] for the current education if
  /// possible. If not, it's inferred from user inputs.
  ///
  /// The limitation for max number of education records is 100.
  public var educationRecords: [Google_Cloud_Talent_V4beta1_EducationRecord] {
    get {return _storage._educationRecords}
    set {_uniqueStorage()._educationRecords = newValue}
  }

  /// The skill set of the candidate. It's highly recommended to provide as
  /// much information as possible to help improve the search quality.
  ///
  /// The limitation for max number of skills is 500.
  public var skills: [Google_Cloud_Talent_V4beta1_Skill] {
    get {return _storage._skills}
    set {_uniqueStorage()._skills = newValue}
  }

  /// The individual or collaborative activities which the candidate has
  /// participated in, for example, open-source projects, class assignments that
  /// aren't listed in [employment_records][google.cloud.talent.v4beta1.Profile.employment_records].
  ///
  /// The limitation for max number of activities is 50.
  public var activities: [Google_Cloud_Talent_V4beta1_Activity] {
    get {return _storage._activities}
    set {_uniqueStorage()._activities = newValue}
  }

  /// The publications published by the candidate.
  ///
  /// The limitation for max number of publications is 50.
  public var publications: [Google_Cloud_Talent_V4beta1_Publication] {
    get {return _storage._publications}
    set {_uniqueStorage()._publications = newValue}
  }

  /// The patents acquired by the candidate.
  public var patents: [Google_Cloud_Talent_V4beta1_Patent] {
    get {return _storage._patents}
    set {_uniqueStorage()._patents = newValue}
  }

  /// The certifications acquired by the candidate.
  public var certifications: [Google_Cloud_Talent_V4beta1_Certification] {
    get {return _storage._certifications}
    set {_uniqueStorage()._certifications = newValue}
  }

  /// Output only. The resource names of the candidate's applications.
  public var applications: [String] {
    get {return _storage._applications}
    set {_uniqueStorage()._applications = newValue}
  }

  /// Output only. The resource names of the candidate's assignments.
  public var assignments: [String] {
    get {return _storage._assignments}
    set {_uniqueStorage()._assignments = newValue}
  }

  /// A map of fields to hold both filterable and non-filterable custom profile
  /// attributes that aren't covered by the provided structured fields. See
  /// [CustomAttribute][google.cloud.talent.v4beta1.CustomAttribute] for more details.
  ///
  /// At most 100 filterable and at most 100 unfilterable keys are supported. If
  /// limit is exceeded, an error is thrown. Custom attributes are `unfilterable`
  /// by default. These are filterable when the `filterable` flag is set to
  /// `true`.
  ///
  /// Numeric custom attributes: each key can only map to one numeric value,
  /// otherwise an error is thrown. Client can also filter on numeric custom
  /// attributes using '>', '<' or '=' operators.
  ///
  /// String custom attributes: each key can map up to 50 string values. For
  /// filterable string value, each value has a byte size of no more than 256B.
  /// For unfilterable string values, the maximum byte size of a single key is
  /// 64B. An error is thrown for any request exceeding the limit.
  /// The maximum total byte size is 10KB.
  public var customAttributes: Dictionary<String,Google_Cloud_Talent_V4beta1_CustomAttribute> {
    get {return _storage._customAttributes}
    set {_uniqueStorage()._customAttributes = newValue}
  }

  /// Output only. Indicates if a summarized profile was created as part of the
  /// profile creation API call. This flag does not indicate whether a profile is
  /// searchable or not.
  public var processed: Bool {
    get {return _storage._processed}
    set {_uniqueStorage()._processed = newValue}
  }

  /// Output only. Keyword snippet shows how the search result is related to a
  /// search query.  This is only returned in [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse].
  public var keywordSnippet: String {
    get {return _storage._keywordSnippet}
    set {_uniqueStorage()._keywordSnippet = newValue}
  }

  /// Output only. Candidate's availability signals.
  public var availabilitySignals: [Google_Cloud_Talent_V4beta1_AvailabilitySignal] {
    get {return _storage._availabilitySignals}
    set {_uniqueStorage()._availabilitySignals = newValue}
  }

  /// Output only. Derived locations of the profile, resolved from [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses].
  ///
  /// [derived_addresses][google.cloud.talent.v4beta1.Profile.derived_addresses] are exactly matched to [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] in the
  /// same order.
  public var derivedAddresses: [Google_Cloud_Talent_V4beta1_Location] {
    get {return _storage._derivedAddresses}
    set {_uniqueStorage()._derivedAddresses = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Candidate availability signal.
public struct Google_Cloud_Talent_V4beta1_AvailabilitySignal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of signal.
  public var type: Google_Cloud_Talent_V4beta1_AvailabilitySignalType = .unspecified

  /// Timestamp of when the given availability activity last happened.
  public var lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdateTime = newValue}
  }
  /// Returns true if `lastUpdateTime` has been explicitly set.
  public var hasLastUpdateTime: Bool {return self._lastUpdateTime != nil}
  /// Clears the value of `lastUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdateTime() {self._lastUpdateTime = nil}

  /// Indicates if the [last_update_time][google.cloud.talent.v4beta1.AvailabilitySignal.last_update_time] is within
  /// [AvailabilityFilter.range][google.cloud.talent.v4beta1.AvailabilityFilter.range].
  ///
  /// Returned only in a search response when there is an [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter]
  /// in [ProfileQuery.availability_filters][google.cloud.talent.v4beta1.ProfileQuery.availability_filters] where
  /// [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type] matches [type][google.cloud.talent.v4beta1.AvailabilitySignal.type].
  public var filterSatisfied: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _filterSatisfied ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_filterSatisfied = newValue}
  }
  /// Returns true if `filterSatisfied` has been explicitly set.
  public var hasFilterSatisfied: Bool {return self._filterSatisfied != nil}
  /// Clears the value of `filterSatisfied`. Subsequent reads from it will return its default value.
  public mutating func clearFilterSatisfied() {self._filterSatisfied = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _filterSatisfied: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Resource that represents a resume.
public struct Google_Cloud_Talent_V4beta1_Resume {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Users can create a profile with only this field field, if [resume_type][google.cloud.talent.v4beta1.Resume.resume_type]
  /// is [HRXML][google.cloud.talent.v4beta1.Resume.ResumeType.HRXML]. For example, the API parses this field and
  /// creates a profile
  /// with all structured fields populated. [EmploymentRecord][google.cloud.talent.v4beta1.EmploymentRecord],
  /// [EducationRecord][google.cloud.talent.v4beta1.EducationRecord], and so on. An error is thrown if this field cannot be
  /// parsed.
  ///
  /// Note that the use of the functionality offered by this field to extract
  /// data from resumes is an Alpha feature and as such is not covered by any
  /// SLA.
  public var structuredResume: String = String()

  /// The format of [structured_resume][google.cloud.talent.v4beta1.Resume.structured_resume].
  public var resumeType: Google_Cloud_Talent_V4beta1_Resume.ResumeType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The format of a structured resume.
  public enum ResumeType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// The profile contents in HR-XML format.
    /// See https://schemas.liquid-technologies.com/hr-xml/2007-04-15/ for more
    /// information about Human Resources XML.
    case hrxml // = 1

    /// Resume type not specified.
    case otherResumeType // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .hrxml
      case 2: self = .otherResumeType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .hrxml: return 1
      case .otherResumeType: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_Resume.ResumeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_Resume.ResumeType] = [
    .unspecified,
    .hrxml,
    .otherResumeType,
  ]
}

#endif  // swift(>=4.2)

/// Resource that represents the name of a person.
public struct Google_Cloud_Talent_V4beta1_PersonName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of a person. It can be one of
  /// [formatted_name][google.cloud.talent.v4beta1.PersonName.formatted_name] or
  /// [structured_name][google.cloud.talent.v4beta1.PersonName.structured_name].
  public var personName: Google_Cloud_Talent_V4beta1_PersonName.OneOf_PersonName? = nil

  /// A string represents a person's full name. For example, "Dr. John Smith".
  ///
  /// Number of characters allowed is 100.
  public var formattedName: String {
    get {
      if case .formattedName(let v)? = personName {return v}
      return String()
    }
    set {personName = .formattedName(newValue)}
  }

  /// A person's name in a structured way (last name, first name, suffix, and
  /// so on.)
  public var structuredName: Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName {
    get {
      if case .structuredName(let v)? = personName {return v}
      return Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName()
    }
    set {personName = .structuredName(newValue)}
  }

  /// Preferred name for the person. This field is ignored if [structured_name][google.cloud.talent.v4beta1.PersonName.structured_name]
  /// is provided.
  ///
  /// Number of characters allowed is 100.
  public var preferredName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The name of a person. It can be one of
  /// [formatted_name][google.cloud.talent.v4beta1.PersonName.formatted_name] or
  /// [structured_name][google.cloud.talent.v4beta1.PersonName.structured_name].
  public enum OneOf_PersonName: Equatable {
    /// A string represents a person's full name. For example, "Dr. John Smith".
    ///
    /// Number of characters allowed is 100.
    case formattedName(String)
    /// A person's name in a structured way (last name, first name, suffix, and
    /// so on.)
    case structuredName(Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Talent_V4beta1_PersonName.OneOf_PersonName, rhs: Google_Cloud_Talent_V4beta1_PersonName.OneOf_PersonName) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.formattedName, .formattedName): return {
        guard case .formattedName(let l) = lhs, case .formattedName(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.structuredName, .structuredName): return {
        guard case .structuredName(let l) = lhs, case .structuredName(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Resource that represents a person's structured name.
  public struct PersonStructuredName {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Given/first name.
    ///
    /// It's derived from [formatted_name][google.cloud.talent.v4beta1.PersonName.formatted_name] if not provided.
    ///
    /// Number of characters allowed is 100.
    public var givenName: String = String()

    /// Preferred given/first name or nickname.
    ///
    /// Number of characters allowed is 100.
    public var preferredName: String = String()

    /// Middle initial.
    ///
    /// It's derived from [formatted_name][google.cloud.talent.v4beta1.PersonName.formatted_name] if not provided.
    ///
    /// Number of characters allowed is 20.
    public var middleInitial: String = String()

    /// Family/last name.
    ///
    /// It's derived from [formatted_name][google.cloud.talent.v4beta1.PersonName.formatted_name] if not provided.
    ///
    /// Number of characters allowed is 100.
    public var familyName: String = String()

    /// Suffixes.
    ///
    /// Number of characters allowed is 20.
    public var suffixes: [String] = []

    /// Prefixes.
    ///
    /// Number of characters allowed is 20.
    public var prefixes: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Resource that represents a address.
public struct Google_Cloud_Talent_V4beta1_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The usage of the address. For example, SCHOOL, WORK, PERSONAL.
  public var usage: Google_Cloud_Talent_V4beta1_ContactInfoUsage = .unspecified

  /// The address of a person. It can be one of
  /// [unstructured_address][google.cloud.talent.v4beta1.Address.unstructured_address] or
  /// [structured_address][google.cloud.talent.v4beta1.Address.structured_address].
  public var address: Google_Cloud_Talent_V4beta1_Address.OneOf_Address? = nil

  /// Unstructured address.
  ///
  /// For example, "1600 Amphitheatre Pkwy, Mountain View, CA 94043",
  /// "Sunnyvale, California".
  ///
  /// Number of characters allowed is 100.
  public var unstructuredAddress: String {
    get {
      if case .unstructuredAddress(let v)? = address {return v}
      return String()
    }
    set {address = .unstructuredAddress(newValue)}
  }

  /// Structured address that contains street address, city, state, country,
  /// and so on.
  public var structuredAddress: Google_Type_PostalAddress {
    get {
      if case .structuredAddress(let v)? = address {return v}
      return Google_Type_PostalAddress()
    }
    set {address = .structuredAddress(newValue)}
  }

  /// Indicates if it's the person's current address.
  public var current: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _current ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_current = newValue}
  }
  /// Returns true if `current` has been explicitly set.
  public var hasCurrent: Bool {return self._current != nil}
  /// Clears the value of `current`. Subsequent reads from it will return its default value.
  public mutating func clearCurrent() {self._current = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The address of a person. It can be one of
  /// [unstructured_address][google.cloud.talent.v4beta1.Address.unstructured_address] or
  /// [structured_address][google.cloud.talent.v4beta1.Address.structured_address].
  public enum OneOf_Address: Equatable {
    /// Unstructured address.
    ///
    /// For example, "1600 Amphitheatre Pkwy, Mountain View, CA 94043",
    /// "Sunnyvale, California".
    ///
    /// Number of characters allowed is 100.
    case unstructuredAddress(String)
    /// Structured address that contains street address, city, state, country,
    /// and so on.
    case structuredAddress(Google_Type_PostalAddress)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Talent_V4beta1_Address.OneOf_Address, rhs: Google_Cloud_Talent_V4beta1_Address.OneOf_Address) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.unstructuredAddress, .unstructuredAddress): return {
        guard case .unstructuredAddress(let l) = lhs, case .unstructuredAddress(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.structuredAddress, .structuredAddress): return {
        guard case .structuredAddress(let l) = lhs, case .structuredAddress(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _current: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Resource that represents a person's email address.
public struct Google_Cloud_Talent_V4beta1_Email {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The usage of the email address. For example, SCHOOL, WORK, PERSONAL.
  public var usage: Google_Cloud_Talent_V4beta1_ContactInfoUsage = .unspecified

  /// Email address.
  ///
  /// Number of characters allowed is 4,000.
  public var emailAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Resource that represents a person's telephone number.
public struct Google_Cloud_Talent_V4beta1_Phone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The usage of the phone. For example, SCHOOL, WORK, PERSONAL.
  public var usage: Google_Cloud_Talent_V4beta1_ContactInfoUsage = .unspecified

  /// The phone type. For example, LANDLINE, MOBILE, FAX.
  public var type: Google_Cloud_Talent_V4beta1_Phone.PhoneType = .unspecified

  /// Phone number.
  ///
  /// Any phone formats are supported and only exact matches are performed on
  /// searches. For example, if a phone number in profile is provided in the
  /// format of "(xxx)xxx-xxxx", in profile searches the same phone format
  /// has to be provided.
  ///
  /// Number of characters allowed is 20.
  public var number: String = String()

  /// When this number is available. Any descriptive string is expected.
  ///
  /// Number of characters allowed is 100.
  public var whenAvailable: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enum that represents the type of the telephone.
  public enum PhoneType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// A landline.
    case landline // = 1

    /// A mobile.
    case mobile // = 2

    /// A fax.
    case fax // = 3

    /// A pager.
    case pager // = 4

    /// A TTY (test telephone) or TDD (telecommunication device for the deaf).
    case ttyOrTdd // = 5

    /// A voicemail.
    case voicemail // = 6

    /// A virtual telephone number is a number that can be routed to another
    /// number and managed by the user via Web, SMS, IVR, and so on.  It is
    /// associated with a particular person, and may be routed to either a MOBILE
    /// or LANDLINE number. The [phone usage][google.cloud.talent.v4beta1.ContactInfoUsage] should
    /// be set to PERSONAL for these phone types. Some more information can be
    /// found here: https://en.wikipedia.org/wiki/Personal_Numbers
    case virtual // = 7

    /// Voice over IP numbers. This includes TSoIP (Telephony Service over IP).
    case voip // = 8

    /// In some regions (e.g. the USA), it is impossible to distinguish between
    /// fixed-line and mobile numbers by looking at the phone number itself.
    case mobileOrLandline // = 9
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .landline
      case 2: self = .mobile
      case 3: self = .fax
      case 4: self = .pager
      case 5: self = .ttyOrTdd
      case 6: self = .voicemail
      case 7: self = .virtual
      case 8: self = .voip
      case 9: self = .mobileOrLandline
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .landline: return 1
      case .mobile: return 2
      case .fax: return 3
      case .pager: return 4
      case .ttyOrTdd: return 5
      case .voicemail: return 6
      case .virtual: return 7
      case .voip: return 8
      case .mobileOrLandline: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_Phone.PhoneType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_Phone.PhoneType] = [
    .unspecified,
    .landline,
    .mobile,
    .fax,
    .pager,
    .ttyOrTdd,
    .voicemail,
    .virtual,
    .voip,
    .mobileOrLandline,
  ]
}

#endif  // swift(>=4.2)

/// Resource that represents a valid URI for a personal use.
public struct Google_Cloud_Talent_V4beta1_PersonalUri {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The personal URI.
  ///
  /// Number of characters allowed is 4,000.
  public var uri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Resource that represents contact information other than phone, email,
/// URI and addresses.
public struct Google_Cloud_Talent_V4beta1_AdditionalContactInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The usage of this contact method. For example, SCHOOL, WORK, PERSONAL.
  public var usage: Google_Cloud_Talent_V4beta1_ContactInfoUsage = .unspecified

  /// The name of the contact method.
  ///
  /// For example, "hangout", "skype".
  ///
  /// Number of characters allowed is 100.
  public var name: String = String()

  /// The contact id.
  ///
  /// Number of characters allowed is 100.
  public var contactID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Resource that represents an employment record of a candidate.
public struct Google_Cloud_Talent_V4beta1_EmploymentRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Start date of the employment.
  public var startDate: Google_Type_Date {
    get {return _storage._startDate ?? Google_Type_Date()}
    set {_uniqueStorage()._startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  public var hasStartDate: Bool {return _storage._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  public mutating func clearStartDate() {_uniqueStorage()._startDate = nil}

  /// End date of the employment.
  public var endDate: Google_Type_Date {
    get {return _storage._endDate ?? Google_Type_Date()}
    set {_uniqueStorage()._endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  public var hasEndDate: Bool {return _storage._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  public mutating func clearEndDate() {_uniqueStorage()._endDate = nil}

  /// The name of the employer company/organization.
  ///
  /// For example, "Google", "Alphabet", and so on.
  ///
  /// Number of characters allowed is 250.
  public var employerName: String {
    get {return _storage._employerName}
    set {_uniqueStorage()._employerName = newValue}
  }

  /// The division name of the employment.
  ///
  /// For example, division, department, client, and so on.
  ///
  /// Number of characters allowed is 100.
  public var divisionName: String {
    get {return _storage._divisionName}
    set {_uniqueStorage()._divisionName = newValue}
  }

  /// The physical address of the employer.
  public var address: Google_Cloud_Talent_V4beta1_Address {
    get {return _storage._address ?? Google_Cloud_Talent_V4beta1_Address()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {_uniqueStorage()._address = nil}

  /// The job title of the employment.
  ///
  /// For example, "Software Engineer", "Data Scientist", and so on.
  ///
  /// Number of characters allowed is 250.
  public var jobTitle: String {
    get {return _storage._jobTitle}
    set {_uniqueStorage()._jobTitle = newValue}
  }

  /// The description of job content.
  ///
  /// Number of characters allowed is 100,000.
  public var jobDescription: String {
    get {return _storage._jobDescription}
    set {_uniqueStorage()._jobDescription = newValue}
  }

  /// If the jobs is a supervisor position.
  public var isSupervisor: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isSupervisor ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isSupervisor = newValue}
  }
  /// Returns true if `isSupervisor` has been explicitly set.
  public var hasIsSupervisor: Bool {return _storage._isSupervisor != nil}
  /// Clears the value of `isSupervisor`. Subsequent reads from it will return its default value.
  public mutating func clearIsSupervisor() {_uniqueStorage()._isSupervisor = nil}

  /// If this employment is self-employed.
  public var isSelfEmployed: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isSelfEmployed ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isSelfEmployed = newValue}
  }
  /// Returns true if `isSelfEmployed` has been explicitly set.
  public var hasIsSelfEmployed: Bool {return _storage._isSelfEmployed != nil}
  /// Clears the value of `isSelfEmployed`. Subsequent reads from it will return its default value.
  public mutating func clearIsSelfEmployed() {_uniqueStorage()._isSelfEmployed = nil}

  /// If this employment is current.
  public var isCurrent: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isCurrent ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isCurrent = newValue}
  }
  /// Returns true if `isCurrent` has been explicitly set.
  public var hasIsCurrent: Bool {return _storage._isCurrent != nil}
  /// Clears the value of `isCurrent`. Subsequent reads from it will return its default value.
  public mutating func clearIsCurrent() {_uniqueStorage()._isCurrent = nil}

  /// Output only. The job title snippet shows how the [job_title][google.cloud.talent.v4beta1.EmploymentRecord.job_title] is related
  /// to a search query. It's empty if the [job_title][google.cloud.talent.v4beta1.EmploymentRecord.job_title] isn't related to the
  /// search query.
  public var jobTitleSnippet: String {
    get {return _storage._jobTitleSnippet}
    set {_uniqueStorage()._jobTitleSnippet = newValue}
  }

  /// Output only. The job description snippet shows how the [job_description][google.cloud.talent.v4beta1.EmploymentRecord.job_description]
  /// is related to a search query. It's empty if the [job_description][google.cloud.talent.v4beta1.EmploymentRecord.job_description] isn't
  /// related to the search query.
  public var jobDescriptionSnippet: String {
    get {return _storage._jobDescriptionSnippet}
    set {_uniqueStorage()._jobDescriptionSnippet = newValue}
  }

  /// Output only. The employer name snippet shows how the [employer_name][google.cloud.talent.v4beta1.EmploymentRecord.employer_name] is
  /// related to a search query. It's empty if the [employer_name][google.cloud.talent.v4beta1.EmploymentRecord.employer_name] isn't
  /// related to the search query.
  public var employerNameSnippet: String {
    get {return _storage._employerNameSnippet}
    set {_uniqueStorage()._employerNameSnippet = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Resource that represents an education record of a candidate.
public struct Google_Cloud_Talent_V4beta1_EducationRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The start date of the education.
  public var startDate: Google_Type_Date {
    get {return _storage._startDate ?? Google_Type_Date()}
    set {_uniqueStorage()._startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  public var hasStartDate: Bool {return _storage._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  public mutating func clearStartDate() {_uniqueStorage()._startDate = nil}

  /// The end date of the education.
  public var endDate: Google_Type_Date {
    get {return _storage._endDate ?? Google_Type_Date()}
    set {_uniqueStorage()._endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  public var hasEndDate: Bool {return _storage._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  public mutating func clearEndDate() {_uniqueStorage()._endDate = nil}

  /// The expected graduation date if currently pursuing a degree.
  public var expectedGraduationDate: Google_Type_Date {
    get {return _storage._expectedGraduationDate ?? Google_Type_Date()}
    set {_uniqueStorage()._expectedGraduationDate = newValue}
  }
  /// Returns true if `expectedGraduationDate` has been explicitly set.
  public var hasExpectedGraduationDate: Bool {return _storage._expectedGraduationDate != nil}
  /// Clears the value of `expectedGraduationDate`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedGraduationDate() {_uniqueStorage()._expectedGraduationDate = nil}

  /// The name of the school or institution.
  ///
  /// For example, "Stanford University", "UC Berkeley", and so on.
  ///
  /// Number of characters allowed is 250.
  public var schoolName: String {
    get {return _storage._schoolName}
    set {_uniqueStorage()._schoolName = newValue}
  }

  /// The physical address of the education institution.
  public var address: Google_Cloud_Talent_V4beta1_Address {
    get {return _storage._address ?? Google_Cloud_Talent_V4beta1_Address()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {_uniqueStorage()._address = nil}

  /// The degree information. It can be one of
  /// [degree_description][google.cloud.talent.v4beta1.EducationRecord.degree_description] or
  /// [structured_degree][google.cloud.talent.v4beta1.EducationRecord.structured_degree].
  public var degree: OneOf_Degree? {
    get {return _storage._degree}
    set {_uniqueStorage()._degree = newValue}
  }

  /// The full description of the degree.
  ///
  /// For example, "Master of Science in Computer Science", "B.S in Math".
  ///
  /// Number of characters allowed is 100.
  public var degreeDescription: String {
    get {
      if case .degreeDescription(let v)? = _storage._degree {return v}
      return String()
    }
    set {_uniqueStorage()._degree = .degreeDescription(newValue)}
  }

  /// The structured notation of the degree.
  public var structuredDegree: Google_Cloud_Talent_V4beta1_Degree {
    get {
      if case .structuredDegree(let v)? = _storage._degree {return v}
      return Google_Cloud_Talent_V4beta1_Degree()
    }
    set {_uniqueStorage()._degree = .structuredDegree(newValue)}
  }

  /// The description of the education.
  ///
  /// Number of characters allowed is 100,000.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// If this education is current.
  public var isCurrent: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isCurrent ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isCurrent = newValue}
  }
  /// Returns true if `isCurrent` has been explicitly set.
  public var hasIsCurrent: Bool {return _storage._isCurrent != nil}
  /// Clears the value of `isCurrent`. Subsequent reads from it will return its default value.
  public mutating func clearIsCurrent() {_uniqueStorage()._isCurrent = nil}

  /// Output only. The school name snippet shows how the [school_name][google.cloud.talent.v4beta1.EducationRecord.school_name] is related to a
  /// search query in search result. It's empty if the [school_name][google.cloud.talent.v4beta1.EducationRecord.school_name] isn't
  /// related to the search query.
  public var schoolNameSnippet: String {
    get {return _storage._schoolNameSnippet}
    set {_uniqueStorage()._schoolNameSnippet = newValue}
  }

  /// Output only. The job description snippet shows how the [Degree][google.cloud.talent.v4beta1.Degree] is related to a search
  /// query in search result. It's empty if the [Degree][google.cloud.talent.v4beta1.Degree] isn't related to the
  /// search query.
  public var degreeSnippet: String {
    get {return _storage._degreeSnippet}
    set {_uniqueStorage()._degreeSnippet = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The degree information. It can be one of
  /// [degree_description][google.cloud.talent.v4beta1.EducationRecord.degree_description] or
  /// [structured_degree][google.cloud.talent.v4beta1.EducationRecord.structured_degree].
  public enum OneOf_Degree: Equatable {
    /// The full description of the degree.
    ///
    /// For example, "Master of Science in Computer Science", "B.S in Math".
    ///
    /// Number of characters allowed is 100.
    case degreeDescription(String)
    /// The structured notation of the degree.
    case structuredDegree(Google_Cloud_Talent_V4beta1_Degree)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Talent_V4beta1_EducationRecord.OneOf_Degree, rhs: Google_Cloud_Talent_V4beta1_EducationRecord.OneOf_Degree) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.degreeDescription, .degreeDescription): return {
        guard case .degreeDescription(let l) = lhs, case .degreeDescription(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.structuredDegree, .structuredDegree): return {
        guard case .structuredDegree(let l) = lhs, case .structuredDegree(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Resource that represents a degree pursuing or acquired by a candidate.
public struct Google_Cloud_Talent_V4beta1_Degree {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ISCED degree type.
  public var degreeType: Google_Cloud_Talent_V4beta1_DegreeType = .unspecified

  /// Full Degree name.
  ///
  /// For example, "B.S.", "Master of Arts", and so on.
  ///
  /// Number of characters allowed is 100.
  public var degreeName: String = String()

  /// Fields of study for the degree.
  ///
  /// For example, "Computer science", "engineering".
  ///
  /// Number of characters allowed is 100.
  public var fieldsOfStudy: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Resource that represents an individual or collaborative activity participated
/// in by a candidate, for example, an open-source project, a class assignment,
/// and so on.
public struct Google_Cloud_Talent_V4beta1_Activity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Activity display name.
  ///
  /// Number of characters allowed is 100.
  public var displayName: String = String()

  /// Activity description.
  ///
  /// Number of characters allowed is 100,000.
  public var description_p: String = String()

  /// Activity URI.
  ///
  /// Number of characters allowed is 4,000.
  public var uri: String = String()

  /// The first creation date of the activity.
  public var createDate: Google_Type_Date {
    get {return _createDate ?? Google_Type_Date()}
    set {_createDate = newValue}
  }
  /// Returns true if `createDate` has been explicitly set.
  public var hasCreateDate: Bool {return self._createDate != nil}
  /// Clears the value of `createDate`. Subsequent reads from it will return its default value.
  public mutating func clearCreateDate() {self._createDate = nil}

  /// The last update date of the activity.
  public var updateDate: Google_Type_Date {
    get {return _updateDate ?? Google_Type_Date()}
    set {_updateDate = newValue}
  }
  /// Returns true if `updateDate` has been explicitly set.
  public var hasUpdateDate: Bool {return self._updateDate != nil}
  /// Clears the value of `updateDate`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateDate() {self._updateDate = nil}

  /// A list of team members involved in this activity.
  ///
  /// Number of characters allowed is 100.
  ///
  /// The limitation for max number of team members is 50.
  public var teamMembers: [String] = []

  /// A list of skills used in this activity.
  ///
  /// The limitation for max number of skills used is 50.
  public var skillsUsed: [Google_Cloud_Talent_V4beta1_Skill] = []

  /// Output only. Activity name snippet shows how the [display_name][google.cloud.talent.v4beta1.Activity.display_name] is related to a search
  /// query. It's empty if the [display_name][google.cloud.talent.v4beta1.Activity.display_name] isn't related to the search
  /// query.
  public var activityNameSnippet: String = String()

  /// Output only. Activity description snippet shows how the
  /// [description][google.cloud.talent.v4beta1.Activity.description] is related to a search query. It's empty if the
  /// [description][google.cloud.talent.v4beta1.Activity.description] isn't related to the search query.
  public var activityDescriptionSnippet: String = String()

  /// Output only. Skill used snippet shows how the corresponding
  /// [skills_used][google.cloud.talent.v4beta1.Activity.skills_used] are related to a search query. It's empty if the
  /// corresponding [skills_used][google.cloud.talent.v4beta1.Activity.skills_used] are not related to the search query.
  public var skillsUsedSnippet: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createDate: Google_Type_Date? = nil
  fileprivate var _updateDate: Google_Type_Date? = nil
}

/// Resource that represents a publication resource of a candidate.
public struct Google_Cloud_Talent_V4beta1_Publication {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of author names.
  ///
  /// Number of characters allowed is 100.
  public var authors: [String] = []

  /// The title of the publication.
  ///
  /// Number of characters allowed is 100.
  public var title: String = String()

  /// The description of the publication.
  ///
  /// Number of characters allowed is 100,000.
  public var description_p: String = String()

  /// The journal name of the publication.
  ///
  /// Number of characters allowed is 100.
  public var journal: String = String()

  /// Volume number.
  ///
  /// Number of characters allowed is 100.
  public var volume: String = String()

  /// The publisher of the journal.
  ///
  /// Number of characters allowed is 100.
  public var publisher: String = String()

  /// The publication date.
  public var publicationDate: Google_Type_Date {
    get {return _publicationDate ?? Google_Type_Date()}
    set {_publicationDate = newValue}
  }
  /// Returns true if `publicationDate` has been explicitly set.
  public var hasPublicationDate: Bool {return self._publicationDate != nil}
  /// Clears the value of `publicationDate`. Subsequent reads from it will return its default value.
  public mutating func clearPublicationDate() {self._publicationDate = nil}

  /// The publication type.
  ///
  /// Number of characters allowed is 100.
  public var publicationType: String = String()

  /// ISBN number.
  ///
  /// Number of characters allowed is 100.
  public var isbn: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _publicationDate: Google_Type_Date? = nil
}

/// Resource that represents the patent acquired by a candidate.
public struct Google_Cloud_Talent_V4beta1_Patent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the patent.
  ///
  /// Number of characters allowed is 100.
  public var displayName: String = String()

  /// A list of inventors' names.
  ///
  /// Number of characters allowed for each is 100.
  public var inventors: [String] = []

  /// The status of the patent.
  ///
  /// Number of characters allowed is 100.
  public var patentStatus: String = String()

  /// The date the last time the status of the patent was checked.
  public var patentStatusDate: Google_Type_Date {
    get {return _patentStatusDate ?? Google_Type_Date()}
    set {_patentStatusDate = newValue}
  }
  /// Returns true if `patentStatusDate` has been explicitly set.
  public var hasPatentStatusDate: Bool {return self._patentStatusDate != nil}
  /// Clears the value of `patentStatusDate`. Subsequent reads from it will return its default value.
  public mutating func clearPatentStatusDate() {self._patentStatusDate = nil}

  /// The date that the patent was filed.
  public var patentFilingDate: Google_Type_Date {
    get {return _patentFilingDate ?? Google_Type_Date()}
    set {_patentFilingDate = newValue}
  }
  /// Returns true if `patentFilingDate` has been explicitly set.
  public var hasPatentFilingDate: Bool {return self._patentFilingDate != nil}
  /// Clears the value of `patentFilingDate`. Subsequent reads from it will return its default value.
  public mutating func clearPatentFilingDate() {self._patentFilingDate = nil}

  /// The name of the patent office.
  ///
  /// Number of characters allowed is 100.
  public var patentOffice: String = String()

  /// The number of the patent.
  ///
  /// Number of characters allowed is 100.
  public var patentNumber: String = String()

  /// The description of the patent.
  ///
  /// Number of characters allowed is 100,000.
  public var patentDescription: String = String()

  /// The skills used in this patent.
  public var skillsUsed: [Google_Cloud_Talent_V4beta1_Skill] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _patentStatusDate: Google_Type_Date? = nil
  fileprivate var _patentFilingDate: Google_Type_Date? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4beta1"

extension Google_Cloud_Talent_V4beta1_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Profile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "external_id"),
    3: .same(proto: "source"),
    4: .same(proto: "uri"),
    5: .standard(proto: "group_id"),
    6: .standard(proto: "is_hirable"),
    7: .standard(proto: "create_time"),
    8: .standard(proto: "update_time"),
    67: .standard(proto: "candidate_update_time"),
    68: .standard(proto: "resume_update_time"),
    53: .same(proto: "resume"),
    11: .standard(proto: "person_names"),
    12: .same(proto: "addresses"),
    13: .standard(proto: "email_addresses"),
    14: .standard(proto: "phone_numbers"),
    15: .standard(proto: "personal_uris"),
    16: .standard(proto: "additional_contact_info"),
    17: .standard(proto: "employment_records"),
    18: .standard(proto: "education_records"),
    19: .same(proto: "skills"),
    20: .same(proto: "activities"),
    21: .same(proto: "publications"),
    22: .same(proto: "patents"),
    23: .same(proto: "certifications"),
    47: .same(proto: "applications"),
    48: .same(proto: "assignments"),
    26: .standard(proto: "custom_attributes"),
    27: .same(proto: "processed"),
    28: .standard(proto: "keyword_snippet"),
    70: .standard(proto: "availability_signals"),
    64: .standard(proto: "derived_addresses"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _externalID: String = String()
    var _source: String = String()
    var _uri: String = String()
    var _groupID: String = String()
    var _isHirable: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _candidateUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _resumeUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _resume: Google_Cloud_Talent_V4beta1_Resume? = nil
    var _personNames: [Google_Cloud_Talent_V4beta1_PersonName] = []
    var _addresses: [Google_Cloud_Talent_V4beta1_Address] = []
    var _emailAddresses: [Google_Cloud_Talent_V4beta1_Email] = []
    var _phoneNumbers: [Google_Cloud_Talent_V4beta1_Phone] = []
    var _personalUris: [Google_Cloud_Talent_V4beta1_PersonalUri] = []
    var _additionalContactInfo: [Google_Cloud_Talent_V4beta1_AdditionalContactInfo] = []
    var _employmentRecords: [Google_Cloud_Talent_V4beta1_EmploymentRecord] = []
    var _educationRecords: [Google_Cloud_Talent_V4beta1_EducationRecord] = []
    var _skills: [Google_Cloud_Talent_V4beta1_Skill] = []
    var _activities: [Google_Cloud_Talent_V4beta1_Activity] = []
    var _publications: [Google_Cloud_Talent_V4beta1_Publication] = []
    var _patents: [Google_Cloud_Talent_V4beta1_Patent] = []
    var _certifications: [Google_Cloud_Talent_V4beta1_Certification] = []
    var _applications: [String] = []
    var _assignments: [String] = []
    var _customAttributes: Dictionary<String,Google_Cloud_Talent_V4beta1_CustomAttribute> = [:]
    var _processed: Bool = false
    var _keywordSnippet: String = String()
    var _availabilitySignals: [Google_Cloud_Talent_V4beta1_AvailabilitySignal] = []
    var _derivedAddresses: [Google_Cloud_Talent_V4beta1_Location] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _externalID = source._externalID
      _source = source._source
      _uri = source._uri
      _groupID = source._groupID
      _isHirable = source._isHirable
      _createTime = source._createTime
      _updateTime = source._updateTime
      _candidateUpdateTime = source._candidateUpdateTime
      _resumeUpdateTime = source._resumeUpdateTime
      _resume = source._resume
      _personNames = source._personNames
      _addresses = source._addresses
      _emailAddresses = source._emailAddresses
      _phoneNumbers = source._phoneNumbers
      _personalUris = source._personalUris
      _additionalContactInfo = source._additionalContactInfo
      _employmentRecords = source._employmentRecords
      _educationRecords = source._educationRecords
      _skills = source._skills
      _activities = source._activities
      _publications = source._publications
      _patents = source._patents
      _certifications = source._certifications
      _applications = source._applications
      _assignments = source._assignments
      _customAttributes = source._customAttributes
      _processed = source._processed
      _keywordSnippet = source._keywordSnippet
      _availabilitySignals = source._availabilitySignals
      _derivedAddresses = source._derivedAddresses
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._externalID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._source) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._groupID) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._isHirable) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._personNames) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._addresses) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._emailAddresses) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._phoneNumbers) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._personalUris) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._additionalContactInfo) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._employmentRecords) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._educationRecords) }()
        case 19: try { try decoder.decodeRepeatedMessageField(value: &_storage._skills) }()
        case 20: try { try decoder.decodeRepeatedMessageField(value: &_storage._activities) }()
        case 21: try { try decoder.decodeRepeatedMessageField(value: &_storage._publications) }()
        case 22: try { try decoder.decodeRepeatedMessageField(value: &_storage._patents) }()
        case 23: try { try decoder.decodeRepeatedMessageField(value: &_storage._certifications) }()
        case 26: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Talent_V4beta1_CustomAttribute>.self, value: &_storage._customAttributes) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._processed) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._keywordSnippet) }()
        case 47: try { try decoder.decodeRepeatedStringField(value: &_storage._applications) }()
        case 48: try { try decoder.decodeRepeatedStringField(value: &_storage._assignments) }()
        case 53: try { try decoder.decodeSingularMessageField(value: &_storage._resume) }()
        case 64: try { try decoder.decodeRepeatedMessageField(value: &_storage._derivedAddresses) }()
        case 67: try { try decoder.decodeSingularMessageField(value: &_storage._candidateUpdateTime) }()
        case 68: try { try decoder.decodeSingularMessageField(value: &_storage._resumeUpdateTime) }()
        case 70: try { try decoder.decodeRepeatedMessageField(value: &_storage._availabilitySignals) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._externalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalID, fieldNumber: 2)
      }
      if !_storage._source.isEmpty {
        try visitor.visitSingularStringField(value: _storage._source, fieldNumber: 3)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 4)
      }
      if !_storage._groupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupID, fieldNumber: 5)
      }
      if let v = _storage._isHirable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._personNames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._personNames, fieldNumber: 11)
      }
      if !_storage._addresses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._addresses, fieldNumber: 12)
      }
      if !_storage._emailAddresses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._emailAddresses, fieldNumber: 13)
      }
      if !_storage._phoneNumbers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._phoneNumbers, fieldNumber: 14)
      }
      if !_storage._personalUris.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._personalUris, fieldNumber: 15)
      }
      if !_storage._additionalContactInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._additionalContactInfo, fieldNumber: 16)
      }
      if !_storage._employmentRecords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._employmentRecords, fieldNumber: 17)
      }
      if !_storage._educationRecords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._educationRecords, fieldNumber: 18)
      }
      if !_storage._skills.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._skills, fieldNumber: 19)
      }
      if !_storage._activities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activities, fieldNumber: 20)
      }
      if !_storage._publications.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._publications, fieldNumber: 21)
      }
      if !_storage._patents.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._patents, fieldNumber: 22)
      }
      if !_storage._certifications.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._certifications, fieldNumber: 23)
      }
      if !_storage._customAttributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Talent_V4beta1_CustomAttribute>.self, value: _storage._customAttributes, fieldNumber: 26)
      }
      if _storage._processed != false {
        try visitor.visitSingularBoolField(value: _storage._processed, fieldNumber: 27)
      }
      if !_storage._keywordSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._keywordSnippet, fieldNumber: 28)
      }
      if !_storage._applications.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._applications, fieldNumber: 47)
      }
      if !_storage._assignments.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._assignments, fieldNumber: 48)
      }
      if let v = _storage._resume {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      }
      if !_storage._derivedAddresses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._derivedAddresses, fieldNumber: 64)
      }
      if let v = _storage._candidateUpdateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      }
      if let v = _storage._resumeUpdateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
      }
      if !_storage._availabilitySignals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._availabilitySignals, fieldNumber: 70)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Profile, rhs: Google_Cloud_Talent_V4beta1_Profile) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._externalID != rhs_storage._externalID {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._isHirable != rhs_storage._isHirable {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._candidateUpdateTime != rhs_storage._candidateUpdateTime {return false}
        if _storage._resumeUpdateTime != rhs_storage._resumeUpdateTime {return false}
        if _storage._resume != rhs_storage._resume {return false}
        if _storage._personNames != rhs_storage._personNames {return false}
        if _storage._addresses != rhs_storage._addresses {return false}
        if _storage._emailAddresses != rhs_storage._emailAddresses {return false}
        if _storage._phoneNumbers != rhs_storage._phoneNumbers {return false}
        if _storage._personalUris != rhs_storage._personalUris {return false}
        if _storage._additionalContactInfo != rhs_storage._additionalContactInfo {return false}
        if _storage._employmentRecords != rhs_storage._employmentRecords {return false}
        if _storage._educationRecords != rhs_storage._educationRecords {return false}
        if _storage._skills != rhs_storage._skills {return false}
        if _storage._activities != rhs_storage._activities {return false}
        if _storage._publications != rhs_storage._publications {return false}
        if _storage._patents != rhs_storage._patents {return false}
        if _storage._certifications != rhs_storage._certifications {return false}
        if _storage._applications != rhs_storage._applications {return false}
        if _storage._assignments != rhs_storage._assignments {return false}
        if _storage._customAttributes != rhs_storage._customAttributes {return false}
        if _storage._processed != rhs_storage._processed {return false}
        if _storage._keywordSnippet != rhs_storage._keywordSnippet {return false}
        if _storage._availabilitySignals != rhs_storage._availabilitySignals {return false}
        if _storage._derivedAddresses != rhs_storage._derivedAddresses {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_AvailabilitySignal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AvailabilitySignal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "last_update_time"),
    3: .standard(proto: "filter_satisfied"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastUpdateTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._filterSatisfied) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if let v = self._lastUpdateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._filterSatisfied {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_AvailabilitySignal, rhs: Google_Cloud_Talent_V4beta1_AvailabilitySignal) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._lastUpdateTime != rhs._lastUpdateTime {return false}
    if lhs._filterSatisfied != rhs._filterSatisfied {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Resume: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Resume"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "structured_resume"),
    2: .standard(proto: "resume_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.structuredResume) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.resumeType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.structuredResume.isEmpty {
      try visitor.visitSingularStringField(value: self.structuredResume, fieldNumber: 1)
    }
    if self.resumeType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resumeType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Resume, rhs: Google_Cloud_Talent_V4beta1_Resume) -> Bool {
    if lhs.structuredResume != rhs.structuredResume {return false}
    if lhs.resumeType != rhs.resumeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Resume.ResumeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESUME_TYPE_UNSPECIFIED"),
    1: .same(proto: "HRXML"),
    2: .same(proto: "OTHER_RESUME_TYPE"),
  ]
}

extension Google_Cloud_Talent_V4beta1_PersonName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "formatted_name"),
    2: .standard(proto: "structured_name"),
    3: .standard(proto: "preferred_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.personName != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.personName = .formattedName(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName?
        if let current = self.personName {
          try decoder.handleConflictingOneOf()
          if case .structuredName(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.personName = .structuredName(v)}
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.preferredName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.personName {
    case .formattedName?: try {
      guard case .formattedName(let v)? = self.personName else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .structuredName?: try {
      guard case .structuredName(let v)? = self.personName else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.preferredName.isEmpty {
      try visitor.visitSingularStringField(value: self.preferredName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_PersonName, rhs: Google_Cloud_Talent_V4beta1_PersonName) -> Bool {
    if lhs.personName != rhs.personName {return false}
    if lhs.preferredName != rhs.preferredName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4beta1_PersonName.protoMessageName + ".PersonStructuredName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "given_name"),
    6: .standard(proto: "preferred_name"),
    2: .standard(proto: "middle_initial"),
    3: .standard(proto: "family_name"),
    4: .same(proto: "suffixes"),
    5: .same(proto: "prefixes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.givenName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.middleInitial) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.familyName) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.suffixes) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.prefixes) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.preferredName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.givenName.isEmpty {
      try visitor.visitSingularStringField(value: self.givenName, fieldNumber: 1)
    }
    if !self.middleInitial.isEmpty {
      try visitor.visitSingularStringField(value: self.middleInitial, fieldNumber: 2)
    }
    if !self.familyName.isEmpty {
      try visitor.visitSingularStringField(value: self.familyName, fieldNumber: 3)
    }
    if !self.suffixes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.suffixes, fieldNumber: 4)
    }
    if !self.prefixes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.prefixes, fieldNumber: 5)
    }
    if !self.preferredName.isEmpty {
      try visitor.visitSingularStringField(value: self.preferredName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName, rhs: Google_Cloud_Talent_V4beta1_PersonName.PersonStructuredName) -> Bool {
    if lhs.givenName != rhs.givenName {return false}
    if lhs.preferredName != rhs.preferredName {return false}
    if lhs.middleInitial != rhs.middleInitial {return false}
    if lhs.familyName != rhs.familyName {return false}
    if lhs.suffixes != rhs.suffixes {return false}
    if lhs.prefixes != rhs.prefixes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usage"),
    2: .standard(proto: "unstructured_address"),
    3: .standard(proto: "structured_address"),
    4: .same(proto: "current"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.usage) }()
      case 2: try {
        if self.address != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.address = .unstructuredAddress(v)}
      }()
      case 3: try {
        var v: Google_Type_PostalAddress?
        if let current = self.address {
          try decoder.handleConflictingOneOf()
          if case .structuredAddress(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.address = .structuredAddress(v)}
      }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._current) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.usage != .unspecified {
      try visitor.visitSingularEnumField(value: self.usage, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.address {
    case .unstructuredAddress?: try {
      guard case .unstructuredAddress(let v)? = self.address else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .structuredAddress?: try {
      guard case .structuredAddress(let v)? = self.address else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if let v = self._current {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Address, rhs: Google_Cloud_Talent_V4beta1_Address) -> Bool {
    if lhs.usage != rhs.usage {return false}
    if lhs.address != rhs.address {return false}
    if lhs._current != rhs._current {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Email: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Email"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usage"),
    2: .standard(proto: "email_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.usage) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.usage != .unspecified {
      try visitor.visitSingularEnumField(value: self.usage, fieldNumber: 1)
    }
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Email, rhs: Google_Cloud_Talent_V4beta1_Email) -> Bool {
    if lhs.usage != rhs.usage {return false}
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Phone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Phone"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usage"),
    2: .same(proto: "type"),
    3: .same(proto: "number"),
    4: .standard(proto: "when_available"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.usage) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.number) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.whenAvailable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.usage != .unspecified {
      try visitor.visitSingularEnumField(value: self.usage, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.number.isEmpty {
      try visitor.visitSingularStringField(value: self.number, fieldNumber: 3)
    }
    if !self.whenAvailable.isEmpty {
      try visitor.visitSingularStringField(value: self.whenAvailable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Phone, rhs: Google_Cloud_Talent_V4beta1_Phone) -> Bool {
    if lhs.usage != rhs.usage {return false}
    if lhs.type != rhs.type {return false}
    if lhs.number != rhs.number {return false}
    if lhs.whenAvailable != rhs.whenAvailable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Phone.PhoneType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PHONE_TYPE_UNSPECIFIED"),
    1: .same(proto: "LANDLINE"),
    2: .same(proto: "MOBILE"),
    3: .same(proto: "FAX"),
    4: .same(proto: "PAGER"),
    5: .same(proto: "TTY_OR_TDD"),
    6: .same(proto: "VOICEMAIL"),
    7: .same(proto: "VIRTUAL"),
    8: .same(proto: "VOIP"),
    9: .same(proto: "MOBILE_OR_LANDLINE"),
  ]
}

extension Google_Cloud_Talent_V4beta1_PersonalUri: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonalUri"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_PersonalUri, rhs: Google_Cloud_Talent_V4beta1_PersonalUri) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_AdditionalContactInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdditionalContactInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usage"),
    2: .same(proto: "name"),
    3: .standard(proto: "contact_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.usage) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contactID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.usage != .unspecified {
      try visitor.visitSingularEnumField(value: self.usage, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.contactID.isEmpty {
      try visitor.visitSingularStringField(value: self.contactID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_AdditionalContactInfo, rhs: Google_Cloud_Talent_V4beta1_AdditionalContactInfo) -> Bool {
    if lhs.usage != rhs.usage {return false}
    if lhs.name != rhs.name {return false}
    if lhs.contactID != rhs.contactID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_EmploymentRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmploymentRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_date"),
    2: .standard(proto: "end_date"),
    3: .standard(proto: "employer_name"),
    4: .standard(proto: "division_name"),
    5: .same(proto: "address"),
    6: .standard(proto: "job_title"),
    7: .standard(proto: "job_description"),
    8: .standard(proto: "is_supervisor"),
    9: .standard(proto: "is_self_employed"),
    10: .standard(proto: "is_current"),
    11: .standard(proto: "job_title_snippet"),
    12: .standard(proto: "job_description_snippet"),
    13: .standard(proto: "employer_name_snippet"),
  ]

  fileprivate class _StorageClass {
    var _startDate: Google_Type_Date? = nil
    var _endDate: Google_Type_Date? = nil
    var _employerName: String = String()
    var _divisionName: String = String()
    var _address: Google_Cloud_Talent_V4beta1_Address? = nil
    var _jobTitle: String = String()
    var _jobDescription: String = String()
    var _isSupervisor: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _isSelfEmployed: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _isCurrent: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _jobTitleSnippet: String = String()
    var _jobDescriptionSnippet: String = String()
    var _employerNameSnippet: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startDate = source._startDate
      _endDate = source._endDate
      _employerName = source._employerName
      _divisionName = source._divisionName
      _address = source._address
      _jobTitle = source._jobTitle
      _jobDescription = source._jobDescription
      _isSupervisor = source._isSupervisor
      _isSelfEmployed = source._isSelfEmployed
      _isCurrent = source._isCurrent
      _jobTitleSnippet = source._jobTitleSnippet
      _jobDescriptionSnippet = source._jobDescriptionSnippet
      _employerNameSnippet = source._employerNameSnippet
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._startDate) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._endDate) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._employerName) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._divisionName) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._address) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._jobTitle) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._jobDescription) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._isSupervisor) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._isSelfEmployed) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._isCurrent) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._jobTitleSnippet) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._jobDescriptionSnippet) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._employerNameSnippet) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._startDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._endDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._employerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._employerName, fieldNumber: 3)
      }
      if !_storage._divisionName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._divisionName, fieldNumber: 4)
      }
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._jobTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobTitle, fieldNumber: 6)
      }
      if !_storage._jobDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobDescription, fieldNumber: 7)
      }
      if let v = _storage._isSupervisor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._isSelfEmployed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._isCurrent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._jobTitleSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobTitleSnippet, fieldNumber: 11)
      }
      if !_storage._jobDescriptionSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobDescriptionSnippet, fieldNumber: 12)
      }
      if !_storage._employerNameSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._employerNameSnippet, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_EmploymentRecord, rhs: Google_Cloud_Talent_V4beta1_EmploymentRecord) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._startDate != rhs_storage._startDate {return false}
        if _storage._endDate != rhs_storage._endDate {return false}
        if _storage._employerName != rhs_storage._employerName {return false}
        if _storage._divisionName != rhs_storage._divisionName {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._jobTitle != rhs_storage._jobTitle {return false}
        if _storage._jobDescription != rhs_storage._jobDescription {return false}
        if _storage._isSupervisor != rhs_storage._isSupervisor {return false}
        if _storage._isSelfEmployed != rhs_storage._isSelfEmployed {return false}
        if _storage._isCurrent != rhs_storage._isCurrent {return false}
        if _storage._jobTitleSnippet != rhs_storage._jobTitleSnippet {return false}
        if _storage._jobDescriptionSnippet != rhs_storage._jobDescriptionSnippet {return false}
        if _storage._employerNameSnippet != rhs_storage._employerNameSnippet {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_EducationRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EducationRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_date"),
    2: .standard(proto: "end_date"),
    3: .standard(proto: "expected_graduation_date"),
    4: .standard(proto: "school_name"),
    5: .same(proto: "address"),
    6: .standard(proto: "degree_description"),
    7: .standard(proto: "structured_degree"),
    8: .same(proto: "description"),
    9: .standard(proto: "is_current"),
    10: .standard(proto: "school_name_snippet"),
    11: .standard(proto: "degree_snippet"),
  ]

  fileprivate class _StorageClass {
    var _startDate: Google_Type_Date? = nil
    var _endDate: Google_Type_Date? = nil
    var _expectedGraduationDate: Google_Type_Date? = nil
    var _schoolName: String = String()
    var _address: Google_Cloud_Talent_V4beta1_Address? = nil
    var _degree: Google_Cloud_Talent_V4beta1_EducationRecord.OneOf_Degree?
    var _description_p: String = String()
    var _isCurrent: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _schoolNameSnippet: String = String()
    var _degreeSnippet: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startDate = source._startDate
      _endDate = source._endDate
      _expectedGraduationDate = source._expectedGraduationDate
      _schoolName = source._schoolName
      _address = source._address
      _degree = source._degree
      _description_p = source._description_p
      _isCurrent = source._isCurrent
      _schoolNameSnippet = source._schoolNameSnippet
      _degreeSnippet = source._degreeSnippet
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._startDate) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._endDate) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._expectedGraduationDate) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._schoolName) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._address) }()
        case 6: try {
          if _storage._degree != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._degree = .degreeDescription(v)}
        }()
        case 7: try {
          var v: Google_Cloud_Talent_V4beta1_Degree?
          if let current = _storage._degree {
            try decoder.handleConflictingOneOf()
            if case .structuredDegree(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._degree = .structuredDegree(v)}
        }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._isCurrent) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._schoolNameSnippet) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._degreeSnippet) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._startDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._endDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._expectedGraduationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._schoolName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schoolName, fieldNumber: 4)
      }
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._degree {
      case .degreeDescription?: try {
        guard case .degreeDescription(let v)? = _storage._degree else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }()
      case .structuredDegree?: try {
        guard case .structuredDegree(let v)? = _storage._degree else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case nil: break
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 8)
      }
      if let v = _storage._isCurrent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._schoolNameSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schoolNameSnippet, fieldNumber: 10)
      }
      if !_storage._degreeSnippet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._degreeSnippet, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_EducationRecord, rhs: Google_Cloud_Talent_V4beta1_EducationRecord) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._startDate != rhs_storage._startDate {return false}
        if _storage._endDate != rhs_storage._endDate {return false}
        if _storage._expectedGraduationDate != rhs_storage._expectedGraduationDate {return false}
        if _storage._schoolName != rhs_storage._schoolName {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._degree != rhs_storage._degree {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._isCurrent != rhs_storage._isCurrent {return false}
        if _storage._schoolNameSnippet != rhs_storage._schoolNameSnippet {return false}
        if _storage._degreeSnippet != rhs_storage._degreeSnippet {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Degree: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Degree"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "degree_type"),
    2: .standard(proto: "degree_name"),
    3: .standard(proto: "fields_of_study"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.degreeType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.degreeName) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.fieldsOfStudy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.degreeType != .unspecified {
      try visitor.visitSingularEnumField(value: self.degreeType, fieldNumber: 1)
    }
    if !self.degreeName.isEmpty {
      try visitor.visitSingularStringField(value: self.degreeName, fieldNumber: 2)
    }
    if !self.fieldsOfStudy.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fieldsOfStudy, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Degree, rhs: Google_Cloud_Talent_V4beta1_Degree) -> Bool {
    if lhs.degreeType != rhs.degreeType {return false}
    if lhs.degreeName != rhs.degreeName {return false}
    if lhs.fieldsOfStudy != rhs.fieldsOfStudy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Activity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Activity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "description"),
    3: .same(proto: "uri"),
    4: .standard(proto: "create_date"),
    5: .standard(proto: "update_date"),
    6: .standard(proto: "team_members"),
    7: .standard(proto: "skills_used"),
    8: .standard(proto: "activity_name_snippet"),
    9: .standard(proto: "activity_description_snippet"),
    10: .standard(proto: "skills_used_snippet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createDate) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateDate) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.teamMembers) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.skillsUsed) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.activityNameSnippet) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.activityDescriptionSnippet) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.skillsUsedSnippet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if let v = self._createDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updateDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.teamMembers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.teamMembers, fieldNumber: 6)
    }
    if !self.skillsUsed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.skillsUsed, fieldNumber: 7)
    }
    if !self.activityNameSnippet.isEmpty {
      try visitor.visitSingularStringField(value: self.activityNameSnippet, fieldNumber: 8)
    }
    if !self.activityDescriptionSnippet.isEmpty {
      try visitor.visitSingularStringField(value: self.activityDescriptionSnippet, fieldNumber: 9)
    }
    if !self.skillsUsedSnippet.isEmpty {
      try visitor.visitRepeatedStringField(value: self.skillsUsedSnippet, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Activity, rhs: Google_Cloud_Talent_V4beta1_Activity) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs._createDate != rhs._createDate {return false}
    if lhs._updateDate != rhs._updateDate {return false}
    if lhs.teamMembers != rhs.teamMembers {return false}
    if lhs.skillsUsed != rhs.skillsUsed {return false}
    if lhs.activityNameSnippet != rhs.activityNameSnippet {return false}
    if lhs.activityDescriptionSnippet != rhs.activityDescriptionSnippet {return false}
    if lhs.skillsUsedSnippet != rhs.skillsUsedSnippet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Publication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Publication"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authors"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "journal"),
    5: .same(proto: "volume"),
    6: .same(proto: "publisher"),
    7: .standard(proto: "publication_date"),
    8: .standard(proto: "publication_type"),
    9: .same(proto: "isbn"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.authors) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.journal) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.volume) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.publisher) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._publicationDate) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.publicationType) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.isbn) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authors, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.journal.isEmpty {
      try visitor.visitSingularStringField(value: self.journal, fieldNumber: 4)
    }
    if !self.volume.isEmpty {
      try visitor.visitSingularStringField(value: self.volume, fieldNumber: 5)
    }
    if !self.publisher.isEmpty {
      try visitor.visitSingularStringField(value: self.publisher, fieldNumber: 6)
    }
    if let v = self._publicationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.publicationType.isEmpty {
      try visitor.visitSingularStringField(value: self.publicationType, fieldNumber: 8)
    }
    if !self.isbn.isEmpty {
      try visitor.visitSingularStringField(value: self.isbn, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Publication, rhs: Google_Cloud_Talent_V4beta1_Publication) -> Bool {
    if lhs.authors != rhs.authors {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.journal != rhs.journal {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.publisher != rhs.publisher {return false}
    if lhs._publicationDate != rhs._publicationDate {return false}
    if lhs.publicationType != rhs.publicationType {return false}
    if lhs.isbn != rhs.isbn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_Patent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Patent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "inventors"),
    3: .standard(proto: "patent_status"),
    4: .standard(proto: "patent_status_date"),
    5: .standard(proto: "patent_filing_date"),
    6: .standard(proto: "patent_office"),
    7: .standard(proto: "patent_number"),
    8: .standard(proto: "patent_description"),
    9: .standard(proto: "skills_used"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.inventors) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.patentStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._patentStatusDate) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._patentFilingDate) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.patentOffice) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.patentNumber) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.patentDescription) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.skillsUsed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if !self.inventors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.inventors, fieldNumber: 2)
    }
    if !self.patentStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.patentStatus, fieldNumber: 3)
    }
    if let v = self._patentStatusDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._patentFilingDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.patentOffice.isEmpty {
      try visitor.visitSingularStringField(value: self.patentOffice, fieldNumber: 6)
    }
    if !self.patentNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.patentNumber, fieldNumber: 7)
    }
    if !self.patentDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.patentDescription, fieldNumber: 8)
    }
    if !self.skillsUsed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.skillsUsed, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_Patent, rhs: Google_Cloud_Talent_V4beta1_Patent) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.inventors != rhs.inventors {return false}
    if lhs.patentStatus != rhs.patentStatus {return false}
    if lhs._patentStatusDate != rhs._patentStatusDate {return false}
    if lhs._patentFilingDate != rhs._patentFilingDate {return false}
    if lhs.patentOffice != rhs.patentOffice {return false}
    if lhs.patentNumber != rhs.patentNumber {return false}
    if lhs.patentDescription != rhs.patentDescription {return false}
    if lhs.skillsUsed != rhs.skillsUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
