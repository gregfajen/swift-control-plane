// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4beta1/completion_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Auto-complete parameters.
public struct Google_Cloud_Talent_V4beta1_CompleteQueryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Resource name of tenant the completion is performed within.
  ///
  /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
  /// "projects/foo/tenant/bar".
  ///
  /// If tenant id is unspecified, the default tenant is used, for
  /// example, "projects/foo".
  public var parent: String = String()

  /// Required. The query used to generate suggestions.
  ///
  /// The maximum number of allowed characters is 255.
  public var query: String = String()

  /// The list of languages of the query. This is
  /// the BCP-47 language code, such as "en-US" or "sr-Latn".
  /// For more information, see
  /// [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
  ///
  /// The maximum number of allowed characters is 255.
  public var languageCodes: [String] = []

  /// Required. Completion result count.
  ///
  /// The maximum allowed page size is 10.
  public var pageSize: Int32 = 0

  /// If provided, restricts completion to specified company.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
  /// example, "projects/foo/tenants/bar/companies/baz".
  ///
  /// If tenant id is unspecified, the default tenant is used, for
  /// example, "projects/foo".
  public var company: String = String()

  /// The scope of the completion. The defaults is [CompletionScope.PUBLIC][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionScope.PUBLIC].
  public var scope: Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionScope = .unspecified

  /// The completion topic. The default is [CompletionType.COMBINED][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMBINED].
  public var type: Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enum to specify the scope of completion.
  public enum CompletionScope: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// Suggestions are based only on the data provided by the client.
    case tenant // = 1

    /// Suggestions are based on all jobs data in the system that's visible to
    /// the client
    case `public` // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .tenant
      case 2: self = .public
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .tenant: return 1
      case .public: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Enum to specify auto-completion topics.
  public enum CompletionType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// Suggest job titles for jobs autocomplete.
    ///
    /// For [CompletionType.JOB_TITLE][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.JOB_TITLE] type, only open jobs with the same
    /// [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes] are returned.
    case jobTitle // = 1

    /// Suggest company names for jobs autocomplete.
    ///
    /// For [CompletionType.COMPANY_NAME][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMPANY_NAME] type,
    /// only companies having open jobs with the same [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes] are
    /// returned.
    case companyName // = 2

    /// Suggest both job titles and company names for jobs autocomplete.
    ///
    /// For [CompletionType.COMBINED][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMBINED] type, only open jobs with the same
    /// [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes] or companies having open jobs with the same
    /// [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes] are returned.
    case combined // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .jobTitle
      case 2: self = .companyName
      case 3: self = .combined
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .jobTitle: return 1
      case .companyName: return 2
      case .combined: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionScope: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionScope] = [
    .unspecified,
    .tenant,
    .public,
  ]
}

extension Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionType] = [
    .unspecified,
    .jobTitle,
    .companyName,
    .combined,
  ]
}

#endif  // swift(>=4.2)

/// Response of auto-complete query.
public struct Google_Cloud_Talent_V4beta1_CompleteQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Results of the matching job/company candidates.
  public var completionResults: [Google_Cloud_Talent_V4beta1_CompleteQueryResponse.CompletionResult] = []

  /// Additional information for the API invocation, such as the request
  /// tracking id.
  public var metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata {
    get {return _metadata ?? Google_Cloud_Talent_V4beta1_ResponseMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Resource that represents completion results.
  public struct CompletionResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The suggestion for the query.
    public var suggestion: String = String()

    /// The completion topic.
    public var type: Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionType = .unspecified

    /// The URI of the company image for
    /// [COMPANY_NAME][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMPANY_NAME].
    public var imageUri: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _metadata: Google_Cloud_Talent_V4beta1_ResponseMetadata? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4beta1"

extension Google_Cloud_Talent_V4beta1_CompleteQueryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompleteQueryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "query"),
    3: .standard(proto: "language_codes"),
    4: .standard(proto: "page_size"),
    5: .same(proto: "company"),
    6: .same(proto: "scope"),
    7: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.languageCodes) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.company) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.scope) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 2)
    }
    if !self.languageCodes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.languageCodes, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 5)
    }
    if self.scope != .unspecified {
      try visitor.visitSingularEnumField(value: self.scope, fieldNumber: 6)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_CompleteQueryRequest, rhs: Google_Cloud_Talent_V4beta1_CompleteQueryRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.query != rhs.query {return false}
    if lhs.languageCodes != rhs.languageCodes {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.company != rhs.company {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionScope: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPLETION_SCOPE_UNSPECIFIED"),
    1: .same(proto: "TENANT"),
    2: .same(proto: "PUBLIC"),
  ]
}

extension Google_Cloud_Talent_V4beta1_CompleteQueryRequest.CompletionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPLETION_TYPE_UNSPECIFIED"),
    1: .same(proto: "JOB_TITLE"),
    2: .same(proto: "COMPANY_NAME"),
    3: .same(proto: "COMBINED"),
  ]
}

extension Google_Cloud_Talent_V4beta1_CompleteQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompleteQueryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "completion_results"),
    2: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.completionResults) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.completionResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.completionResults, fieldNumber: 1)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_CompleteQueryResponse, rhs: Google_Cloud_Talent_V4beta1_CompleteQueryResponse) -> Bool {
    if lhs.completionResults != rhs.completionResults {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4beta1_CompleteQueryResponse.CompletionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4beta1_CompleteQueryResponse.protoMessageName + ".CompletionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "suggestion"),
    2: .same(proto: "type"),
    3: .standard(proto: "image_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestion) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestion.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestion, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.imageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.imageUri, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4beta1_CompleteQueryResponse.CompletionResult, rhs: Google_Cloud_Talent_V4beta1_CompleteQueryResponse.CompletionResult) -> Bool {
    if lhs.suggestion != rhs.suggestion {return false}
    if lhs.type != rhs.type {return false}
    if lhs.imageUri != rhs.imageUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
