// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4/company.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Company resource represents a company in the service. A company is the
/// entity that owns job postings, that is, the hiring entity responsible for
/// employing applicants for the job position.
public struct Google_Cloud_Talent_V4_Company {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required during company update.
  ///
  /// The resource name for a company. This is generated by the service when a
  /// company is created.
  ///
  /// The format is
  /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
  /// example, "projects/foo/tenants/bar/companies/baz".
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The display name of the company, for example, "Google LLC".
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// Required. Client side company identifier, used to uniquely identify the
  /// company.
  ///
  /// The maximum number of allowed characters is 255.
  public var externalID: String {
    get {return _storage._externalID}
    set {_uniqueStorage()._externalID = newValue}
  }

  /// The employer's company size.
  public var size: Google_Cloud_Talent_V4_CompanySize {
    get {return _storage._size}
    set {_uniqueStorage()._size = newValue}
  }

  /// The street address of the company's main headquarters, which may be
  /// different from the job location. The service attempts
  /// to geolocate the provided address, and populates a more specific
  /// location wherever possible in [DerivedInfo.headquarters_location][google.cloud.talent.v4.Company.DerivedInfo.headquarters_location].
  public var headquartersAddress: String {
    get {return _storage._headquartersAddress}
    set {_uniqueStorage()._headquartersAddress = newValue}
  }

  /// Set to true if it is the hiring agency that post jobs for other
  /// employers.
  ///
  /// Defaults to false if not provided.
  public var hiringAgency: Bool {
    get {return _storage._hiringAgency}
    set {_uniqueStorage()._hiringAgency = newValue}
  }

  /// Equal Employment Opportunity legal disclaimer text to be
  /// associated with all jobs, and typically to be displayed in all
  /// roles.
  ///
  /// The maximum number of allowed characters is 500.
  public var eeoText: String {
    get {return _storage._eeoText}
    set {_uniqueStorage()._eeoText = newValue}
  }

  /// The URI representing the company's primary web site or home page,
  /// for example, "https://www.google.com".
  ///
  /// The maximum number of allowed characters is 255.
  public var websiteUri: String {
    get {return _storage._websiteUri}
    set {_uniqueStorage()._websiteUri = newValue}
  }

  /// The URI to employer's career site or careers page on the employer's web
  /// site, for example, "https://careers.google.com".
  public var careerSiteUri: String {
    get {return _storage._careerSiteUri}
    set {_uniqueStorage()._careerSiteUri = newValue}
  }

  /// A URI that hosts the employer's company logo.
  public var imageUri: String {
    get {return _storage._imageUri}
    set {_uniqueStorage()._imageUri = newValue}
  }

  /// A list of keys of filterable [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes], whose
  /// corresponding `string_values` are used in keyword searches. Jobs with
  /// `string_values` under these specified field keys are returned if any
  /// of the values match the search keyword. Custom field values with
  /// parenthesis, brackets and special symbols are not searchable as-is,
  /// and those keyword queries must be surrounded by quotes.
  public var keywordSearchableJobCustomAttributes: [String] {
    get {return _storage._keywordSearchableJobCustomAttributes}
    set {_uniqueStorage()._keywordSearchableJobCustomAttributes = newValue}
  }

  /// Output only. Derived details about the company.
  public var derivedInfo: Google_Cloud_Talent_V4_Company.DerivedInfo {
    get {return _storage._derivedInfo ?? Google_Cloud_Talent_V4_Company.DerivedInfo()}
    set {_uniqueStorage()._derivedInfo = newValue}
  }
  /// Returns true if `derivedInfo` has been explicitly set.
  public var hasDerivedInfo: Bool {return _storage._derivedInfo != nil}
  /// Clears the value of `derivedInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDerivedInfo() {_uniqueStorage()._derivedInfo = nil}

  /// Output only. Indicates whether a company is flagged to be suspended from
  /// public availability by the service when job content appears suspicious,
  /// abusive, or spammy.
  public var suspended: Bool {
    get {return _storage._suspended}
    set {_uniqueStorage()._suspended = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Derived details about the company.
  public struct DerivedInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A structured headquarters location of the company, resolved from
    /// [Company.headquarters_address][google.cloud.talent.v4.Company.headquarters_address] if provided.
    public var headquartersLocation: Google_Cloud_Talent_V4_Location {
      get {return _headquartersLocation ?? Google_Cloud_Talent_V4_Location()}
      set {_headquartersLocation = newValue}
    }
    /// Returns true if `headquartersLocation` has been explicitly set.
    public var hasHeadquartersLocation: Bool {return self._headquartersLocation != nil}
    /// Clears the value of `headquartersLocation`. Subsequent reads from it will return its default value.
    public mutating func clearHeadquartersLocation() {self._headquartersLocation = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _headquartersLocation: Google_Cloud_Talent_V4_Location? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4"

extension Google_Cloud_Talent_V4_Company: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Company"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "external_id"),
    4: .same(proto: "size"),
    5: .standard(proto: "headquarters_address"),
    6: .standard(proto: "hiring_agency"),
    7: .standard(proto: "eeo_text"),
    8: .standard(proto: "website_uri"),
    9: .standard(proto: "career_site_uri"),
    10: .standard(proto: "image_uri"),
    11: .standard(proto: "keyword_searchable_job_custom_attributes"),
    12: .standard(proto: "derived_info"),
    13: .same(proto: "suspended"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _externalID: String = String()
    var _size: Google_Cloud_Talent_V4_CompanySize = .unspecified
    var _headquartersAddress: String = String()
    var _hiringAgency: Bool = false
    var _eeoText: String = String()
    var _websiteUri: String = String()
    var _careerSiteUri: String = String()
    var _imageUri: String = String()
    var _keywordSearchableJobCustomAttributes: [String] = []
    var _derivedInfo: Google_Cloud_Talent_V4_Company.DerivedInfo? = nil
    var _suspended: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _externalID = source._externalID
      _size = source._size
      _headquartersAddress = source._headquartersAddress
      _hiringAgency = source._hiringAgency
      _eeoText = source._eeoText
      _websiteUri = source._websiteUri
      _careerSiteUri = source._careerSiteUri
      _imageUri = source._imageUri
      _keywordSearchableJobCustomAttributes = source._keywordSearchableJobCustomAttributes
      _derivedInfo = source._derivedInfo
      _suspended = source._suspended
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._externalID) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._size) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._headquartersAddress) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._hiringAgency) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._eeoText) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._websiteUri) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._careerSiteUri) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._imageUri) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._keywordSearchableJobCustomAttributes) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._derivedInfo) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._suspended) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if !_storage._externalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalID, fieldNumber: 3)
      }
      if _storage._size != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._size, fieldNumber: 4)
      }
      if !_storage._headquartersAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headquartersAddress, fieldNumber: 5)
      }
      if _storage._hiringAgency != false {
        try visitor.visitSingularBoolField(value: _storage._hiringAgency, fieldNumber: 6)
      }
      if !_storage._eeoText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eeoText, fieldNumber: 7)
      }
      if !_storage._websiteUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._websiteUri, fieldNumber: 8)
      }
      if !_storage._careerSiteUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._careerSiteUri, fieldNumber: 9)
      }
      if !_storage._imageUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageUri, fieldNumber: 10)
      }
      if !_storage._keywordSearchableJobCustomAttributes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._keywordSearchableJobCustomAttributes, fieldNumber: 11)
      }
      if let v = _storage._derivedInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._suspended != false {
        try visitor.visitSingularBoolField(value: _storage._suspended, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_Company, rhs: Google_Cloud_Talent_V4_Company) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._externalID != rhs_storage._externalID {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._headquartersAddress != rhs_storage._headquartersAddress {return false}
        if _storage._hiringAgency != rhs_storage._hiringAgency {return false}
        if _storage._eeoText != rhs_storage._eeoText {return false}
        if _storage._websiteUri != rhs_storage._websiteUri {return false}
        if _storage._careerSiteUri != rhs_storage._careerSiteUri {return false}
        if _storage._imageUri != rhs_storage._imageUri {return false}
        if _storage._keywordSearchableJobCustomAttributes != rhs_storage._keywordSearchableJobCustomAttributes {return false}
        if _storage._derivedInfo != rhs_storage._derivedInfo {return false}
        if _storage._suspended != rhs_storage._suspended {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_Company.DerivedInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4_Company.protoMessageName + ".DerivedInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "headquarters_location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._headquartersLocation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._headquartersLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_Company.DerivedInfo, rhs: Google_Cloud_Talent_V4_Company.DerivedInfo) -> Bool {
    if lhs._headquartersLocation != rhs._headquartersLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
