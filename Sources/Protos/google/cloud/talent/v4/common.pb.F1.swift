// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/talent/v4/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An enum that represents the size of the company.
public enum Google_Cloud_Talent_V4_CompanySize: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value if the size isn't specified.
  case unspecified // = 0

  /// The company has less than 50 employees.
  case mini // = 1

  /// The company has between 50 and 99 employees.
  case small // = 2

  /// The company has between 100 and 499 employees.
  case smedium // = 3

  /// The company has between 500 and 999 employees.
  case medium // = 4

  /// The company has between 1,000 and 4,999 employees.
  case big // = 5

  /// The company has between 5,000 and 9,999 employees.
  case bigger // = 6

  /// The company has 10,000 or more employees.
  case giant // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .mini
    case 2: self = .small
    case 3: self = .smedium
    case 4: self = .medium
    case 5: self = .big
    case 6: self = .bigger
    case 7: self = .giant
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .mini: return 1
    case .small: return 2
    case .smedium: return 3
    case .medium: return 4
    case .big: return 5
    case .bigger: return 6
    case .giant: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_CompanySize: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_CompanySize] = [
    .unspecified,
    .mini,
    .small,
    .smedium,
    .medium,
    .big,
    .bigger,
    .giant,
  ]
}

#endif  // swift(>=4.2)

/// An enum that represents employee benefits included with the job.
public enum Google_Cloud_Talent_V4_JobBenefit: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value if the type isn't specified.
  case unspecified // = 0

  /// The job includes access to programs that support child care, such
  /// as daycare.
  case childCare // = 1

  /// The job includes dental services covered by a dental
  /// insurance plan.
  case dental // = 2

  /// The job offers specific benefits to domestic partners.
  case domesticPartner // = 3

  /// The job allows for a flexible work schedule.
  case flexibleHours // = 4

  /// The job includes health services covered by a medical insurance plan.
  case medical // = 5

  /// The job includes a life insurance plan provided by the employer or
  /// available for purchase by the employee.
  case lifeInsurance // = 6

  /// The job allows for a leave of absence to a parent to care for a newborn
  /// child.
  case parentalLeave // = 7

  /// The job includes a workplace retirement plan provided by the
  /// employer or available for purchase by the employee.
  case retirementPlan // = 8

  /// The job allows for paid time off due to illness.
  case sickDays // = 9

  /// The job includes paid time off for vacation.
  case vacation // = 10

  /// The job includes vision services covered by a vision
  /// insurance plan.
  case vision // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .childCare
    case 2: self = .dental
    case 3: self = .domesticPartner
    case 4: self = .flexibleHours
    case 5: self = .medical
    case 6: self = .lifeInsurance
    case 7: self = .parentalLeave
    case 8: self = .retirementPlan
    case 9: self = .sickDays
    case 10: self = .vacation
    case 11: self = .vision
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .childCare: return 1
    case .dental: return 2
    case .domesticPartner: return 3
    case .flexibleHours: return 4
    case .medical: return 5
    case .lifeInsurance: return 6
    case .parentalLeave: return 7
    case .retirementPlan: return 8
    case .sickDays: return 9
    case .vacation: return 10
    case .vision: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_JobBenefit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_JobBenefit] = [
    .unspecified,
    .childCare,
    .dental,
    .domesticPartner,
    .flexibleHours,
    .medical,
    .lifeInsurance,
    .parentalLeave,
    .retirementPlan,
    .sickDays,
    .vacation,
    .vision,
  ]
}

#endif  // swift(>=4.2)

/// Educational degree level defined in International Standard Classification
/// of Education (ISCED).
public enum Google_Cloud_Talent_V4_DegreeType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value. Represents no degree, or early childhood education.
  /// Maps to ISCED code 0.
  /// Ex) Kindergarten
  case unspecified // = 0

  /// Primary education which is typically the first stage of compulsory
  /// education. ISCED code 1.
  /// Ex) Elementary school
  case primaryEducation // = 1

  /// Lower secondary education; First stage of secondary education building on
  /// primary education, typically with a more subject-oriented curriculum.
  /// ISCED code 2.
  /// Ex) Middle school
  case lowerSecondaryEducation // = 2

  /// Middle education; Second/final stage of secondary education preparing for
  /// tertiary education and/or providing skills relevant to employment.
  /// Usually with an increased range of subject options and streams. ISCED
  /// code 3.
  /// Ex) High school
  case upperSecondaryEducation // = 3

  /// Adult Remedial Education; Programmes providing learning experiences that
  /// build on secondary education and prepare for labour market entry and/or
  /// tertiary education. The content is broader than secondary but not as
  /// complex as tertiary education. ISCED code 4.
  case adultRemedialEducation // = 4

  /// Associate's or equivalent; Short first tertiary programmes that are
  /// typically practically-based, occupationally-specific and prepare for
  /// labour market entry. These programmes may also provide a pathway to other
  /// tertiary programmes. ISCED code 5.
  case associatesOrEquivalent // = 5

  /// Bachelor's or equivalent; Programmes designed to provide intermediate
  /// academic and/or professional knowledge, skills and competencies leading
  /// to a first tertiary degree or equivalent qualification. ISCED code 6.
  case bachelorsOrEquivalent // = 6

  /// Master's or equivalent; Programmes designed to provide advanced academic
  /// and/or professional knowledge, skills and competencies leading to a
  /// second tertiary degree or equivalent qualification. ISCED code 7.
  case mastersOrEquivalent // = 7

  /// Doctoral or equivalent; Programmes designed primarily to lead to an
  /// advanced research qualification, usually concluding with the submission
  /// and defense of a substantive dissertation of publishable quality based on
  /// original research. ISCED code 8.
  case doctoralOrEquivalent // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .primaryEducation
    case 2: self = .lowerSecondaryEducation
    case 3: self = .upperSecondaryEducation
    case 4: self = .adultRemedialEducation
    case 5: self = .associatesOrEquivalent
    case 6: self = .bachelorsOrEquivalent
    case 7: self = .mastersOrEquivalent
    case 8: self = .doctoralOrEquivalent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .primaryEducation: return 1
    case .lowerSecondaryEducation: return 2
    case .upperSecondaryEducation: return 3
    case .adultRemedialEducation: return 4
    case .associatesOrEquivalent: return 5
    case .bachelorsOrEquivalent: return 6
    case .mastersOrEquivalent: return 7
    case .doctoralOrEquivalent: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_DegreeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_DegreeType] = [
    .unspecified,
    .primaryEducation,
    .lowerSecondaryEducation,
    .upperSecondaryEducation,
    .adultRemedialEducation,
    .associatesOrEquivalent,
    .bachelorsOrEquivalent,
    .mastersOrEquivalent,
    .doctoralOrEquivalent,
  ]
}

#endif  // swift(>=4.2)

/// An enum that represents the employment type of a job.
public enum Google_Cloud_Talent_V4_EmploymentType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The default value if the employment type isn't specified.
  case unspecified // = 0

  /// The job requires working a number of hours that constitute full
  /// time employment, typically 40 or more hours per week.
  case fullTime // = 1

  /// The job entails working fewer hours than a full time job,
  /// typically less than 40 hours a week.
  case partTime // = 2

  /// The job is offered as a contracted, as opposed to a salaried employee,
  /// position.
  case contractor // = 3

  /// The job is offered as a contracted position with the understanding
  /// that it's converted into a full-time position at the end of the
  /// contract. Jobs of this type are also returned by a search for
  /// [EmploymentType.CONTRACTOR][google.cloud.talent.v4.EmploymentType.CONTRACTOR] jobs.
  case contractToHire // = 4

  /// The job is offered as a temporary employment opportunity, usually
  /// a short-term engagement.
  case temporary // = 5

  /// The job is a fixed-term opportunity for students or entry-level job
  /// seekers to obtain on-the-job training, typically offered as a summer
  /// position.
  case intern // = 6

  /// The is an opportunity for an individual to volunteer, where there's no
  /// expectation of compensation for the provided services.
  case volunteer // = 7

  /// The job requires an employee to work on an as-needed basis with a
  /// flexible schedule.
  case perDiem // = 8

  /// The job involves employing people in remote areas and flying them
  /// temporarily to the work site instead of relocating employees and their
  /// families permanently.
  case flyInFlyOut // = 9

  /// The job does not fit any of the other listed types.
  case otherEmploymentType // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .fullTime
    case 2: self = .partTime
    case 3: self = .contractor
    case 4: self = .contractToHire
    case 5: self = .temporary
    case 6: self = .intern
    case 7: self = .volunteer
    case 8: self = .perDiem
    case 9: self = .flyInFlyOut
    case 10: self = .otherEmploymentType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .fullTime: return 1
    case .partTime: return 2
    case .contractor: return 3
    case .contractToHire: return 4
    case .temporary: return 5
    case .intern: return 6
    case .volunteer: return 7
    case .perDiem: return 8
    case .flyInFlyOut: return 9
    case .otherEmploymentType: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_EmploymentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_EmploymentType] = [
    .unspecified,
    .fullTime,
    .partTime,
    .contractor,
    .contractToHire,
    .temporary,
    .intern,
    .volunteer,
    .perDiem,
    .flyInFlyOut,
    .otherEmploymentType,
  ]
}

#endif  // swift(>=4.2)

/// An enum that represents the required experience level required for the job.
public enum Google_Cloud_Talent_V4_JobLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The default value if the level isn't specified.
  case unspecified // = 0

  /// Entry-level individual contributors, typically with less than 2 years of
  /// experience in a similar role. Includes interns.
  case entryLevel // = 1

  /// Experienced individual contributors, typically with 2+ years of
  /// experience in a similar role.
  case experienced // = 2

  /// Entry- to mid-level managers responsible for managing a team of people.
  case manager // = 3

  /// Senior-level managers responsible for managing teams of managers.
  case director // = 4

  /// Executive-level managers and above, including C-level positions.
  case executive // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .entryLevel
    case 2: self = .experienced
    case 3: self = .manager
    case 4: self = .director
    case 5: self = .executive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .entryLevel: return 1
    case .experienced: return 2
    case .manager: return 3
    case .director: return 4
    case .executive: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_JobLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_JobLevel] = [
    .unspecified,
    .entryLevel,
    .experienced,
    .manager,
    .director,
    .executive,
  ]
}

#endif  // swift(>=4.2)

/// An enum that represents the categorization or primary focus of specific
/// role. This value is different than the "industry" associated with a role,
/// which is related to the categorization of the company listing the job.
public enum Google_Cloud_Talent_V4_JobCategory: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The default value if the category isn't specified.
  case unspecified // = 0

  /// An accounting and finance job, such as an Accountant.
  case accountingAndFinance // = 1

  /// An administrative and office job, such as an Administrative Assistant.
  case administrativeAndOffice // = 2

  /// An advertising and marketing job, such as Marketing Manager.
  case advertisingAndMarketing // = 3

  /// An animal care job, such as Veterinarian.
  case animalCare // = 4

  /// An art, fashion, or design job, such as Designer.
  case artFashionAndDesign // = 5

  /// A business operations job, such as Business Operations Manager.
  case businessOperations // = 6

  /// A cleaning and facilities job, such as Custodial Staff.
  case cleaningAndFacilities // = 7

  /// A computer and IT job, such as Systems Administrator.
  case computerAndIt // = 8

  /// A construction job, such as General Laborer.
  case construction // = 9

  /// A customer service job, such s Cashier.
  case customerService // = 10

  /// An education job, such as School Teacher.
  case education // = 11

  /// An entertainment and travel job, such as Flight Attendant.
  case entertainmentAndTravel // = 12

  /// A farming or outdoor job, such as Park Ranger.
  case farmingAndOutdoors // = 13

  /// A healthcare job, such as Registered Nurse.
  case healthcare // = 14

  /// A human resources job, such as Human Resources Director.
  case humanResources // = 15

  /// An installation, maintenance, or repair job, such as Electrician.
  case installationMaintenanceAndRepair // = 16

  /// A legal job, such as Law Clerk.
  case legal // = 17

  /// A management job, often used in conjunction with another category,
  /// such as Store Manager.
  case management // = 18

  /// A manufacturing or warehouse job, such as Assembly Technician.
  case manufacturingAndWarehouse // = 19

  /// A media, communications, or writing job, such as Media Relations.
  case mediaCommunicationsAndWriting // = 20

  /// An oil, gas or mining job, such as Offshore Driller.
  case oilGasAndMining // = 21

  /// A personal care and services job, such as Hair Stylist.
  case personalCareAndServices // = 22

  /// A protective services job, such as Security Guard.
  case protectiveServices // = 23

  /// A real estate job, such as Buyer's Agent.
  case realEstate // = 24

  /// A restaurant and hospitality job, such as Restaurant Server.
  case restaurantAndHospitality // = 25

  /// A sales and/or retail job, such Sales Associate.
  case salesAndRetail // = 26

  /// A science and engineering job, such as Lab Technician.
  case scienceAndEngineering // = 27

  /// A social services or non-profit job, such as Case Worker.
  case socialServicesAndNonProfit // = 28

  /// A sports, fitness, or recreation job, such as Personal Trainer.
  case sportsFitnessAndRecreation // = 29

  /// A transportation or logistics job, such as Truck Driver.
  case transportationAndLogistics // = 30
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .accountingAndFinance
    case 2: self = .administrativeAndOffice
    case 3: self = .advertisingAndMarketing
    case 4: self = .animalCare
    case 5: self = .artFashionAndDesign
    case 6: self = .businessOperations
    case 7: self = .cleaningAndFacilities
    case 8: self = .computerAndIt
    case 9: self = .construction
    case 10: self = .customerService
    case 11: self = .education
    case 12: self = .entertainmentAndTravel
    case 13: self = .farmingAndOutdoors
    case 14: self = .healthcare
    case 15: self = .humanResources
    case 16: self = .installationMaintenanceAndRepair
    case 17: self = .legal
    case 18: self = .management
    case 19: self = .manufacturingAndWarehouse
    case 20: self = .mediaCommunicationsAndWriting
    case 21: self = .oilGasAndMining
    case 22: self = .personalCareAndServices
    case 23: self = .protectiveServices
    case 24: self = .realEstate
    case 25: self = .restaurantAndHospitality
    case 26: self = .salesAndRetail
    case 27: self = .scienceAndEngineering
    case 28: self = .socialServicesAndNonProfit
    case 29: self = .sportsFitnessAndRecreation
    case 30: self = .transportationAndLogistics
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .accountingAndFinance: return 1
    case .administrativeAndOffice: return 2
    case .advertisingAndMarketing: return 3
    case .animalCare: return 4
    case .artFashionAndDesign: return 5
    case .businessOperations: return 6
    case .cleaningAndFacilities: return 7
    case .computerAndIt: return 8
    case .construction: return 9
    case .customerService: return 10
    case .education: return 11
    case .entertainmentAndTravel: return 12
    case .farmingAndOutdoors: return 13
    case .healthcare: return 14
    case .humanResources: return 15
    case .installationMaintenanceAndRepair: return 16
    case .legal: return 17
    case .management: return 18
    case .manufacturingAndWarehouse: return 19
    case .mediaCommunicationsAndWriting: return 20
    case .oilGasAndMining: return 21
    case .personalCareAndServices: return 22
    case .protectiveServices: return 23
    case .realEstate: return 24
    case .restaurantAndHospitality: return 25
    case .salesAndRetail: return 26
    case .scienceAndEngineering: return 27
    case .socialServicesAndNonProfit: return 28
    case .sportsFitnessAndRecreation: return 29
    case .transportationAndLogistics: return 30
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_JobCategory: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_JobCategory] = [
    .unspecified,
    .accountingAndFinance,
    .administrativeAndOffice,
    .advertisingAndMarketing,
    .animalCare,
    .artFashionAndDesign,
    .businessOperations,
    .cleaningAndFacilities,
    .computerAndIt,
    .construction,
    .customerService,
    .education,
    .entertainmentAndTravel,
    .farmingAndOutdoors,
    .healthcare,
    .humanResources,
    .installationMaintenanceAndRepair,
    .legal,
    .management,
    .manufacturingAndWarehouse,
    .mediaCommunicationsAndWriting,
    .oilGasAndMining,
    .personalCareAndServices,
    .protectiveServices,
    .realEstate,
    .restaurantAndHospitality,
    .salesAndRetail,
    .scienceAndEngineering,
    .socialServicesAndNonProfit,
    .sportsFitnessAndRecreation,
    .transportationAndLogistics,
  ]
}

#endif  // swift(>=4.2)

/// An enum that represents the job posting region. In most cases, job postings
/// don't need to specify a region. If a region is given, jobs are
/// eligible for searches in the specified region.
public enum Google_Cloud_Talent_V4_PostingRegion: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// If the region is unspecified, the job is only returned if it
  /// matches the [LocationFilter][google.cloud.talent.v4.LocationFilter].
  case unspecified // = 0

  /// In addition to exact location matching, job posting is returned when the
  /// [LocationFilter][google.cloud.talent.v4.LocationFilter] in the search query is in the same administrative area
  /// as the returned job posting. For example, if a `ADMINISTRATIVE_AREA` job
  /// is posted in "CA, USA", it's returned if [LocationFilter][google.cloud.talent.v4.LocationFilter] has
  /// "Mountain View".
  ///
  /// Administrative area refers to top-level administrative subdivision of this
  /// country. For example, US state, IT region, UK constituent nation and
  /// JP prefecture.
  case administrativeArea // = 1

  /// In addition to exact location matching, job is returned when
  /// [LocationFilter][google.cloud.talent.v4.LocationFilter] in search query is in the same country as this job.
  /// For example, if a `NATION_WIDE` job is posted in "USA", it's
  /// returned if [LocationFilter][google.cloud.talent.v4.LocationFilter] has 'Mountain View'.
  case nation // = 2

  /// Job allows employees to work remotely (telecommute).
  /// If locations are provided with this value, the job is
  /// considered as having a location, but telecommuting is allowed.
  case telecommute // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .administrativeArea
    case 2: self = .nation
    case 3: self = .telecommute
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .administrativeArea: return 1
    case .nation: return 2
    case .telecommute: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_PostingRegion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_PostingRegion] = [
    .unspecified,
    .administrativeArea,
    .nation,
    .telecommute,
  ]
}

#endif  // swift(>=4.2)

/// Deprecated. All resources are only visible to the owner.
///
/// An enum that represents who has view access to the resource.
public enum Google_Cloud_Talent_V4_Visibility: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value.
  case unspecified // = 0

  /// The resource is only visible to the GCP account who owns it.
  case accountOnly // = 1

  /// The resource is visible to the owner and may be visible to other
  /// applications and processes at Google.
  case sharedWithGoogle // = 2

  /// The resource is visible to the owner and may be visible to all other API
  /// clients.
  case sharedWithPublic // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .accountOnly
    case 2: self = .sharedWithGoogle
    case 3: self = .sharedWithPublic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .accountOnly: return 1
    case .sharedWithGoogle: return 2
    case .sharedWithPublic: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_Visibility: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_Visibility] = [
    .unspecified,
    .accountOnly,
    .sharedWithGoogle,
    .sharedWithPublic,
  ]
}

#endif  // swift(>=4.2)

/// Option for HTML content sanitization on user input fields, for example, job
/// description. By setting this option, user can determine whether and how
/// sanitization is performed on these fields.
public enum Google_Cloud_Talent_V4_HtmlSanitization: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value.
  case unspecified // = 0

  /// Disables sanitization on HTML input.
  case disabled // = 1

  /// Sanitizes HTML input, only accepts bold, italic, ordered list, and
  /// unordered list markup tags.
  case simpleFormattingOnly // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .disabled
    case 2: self = .simpleFormattingOnly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .disabled: return 1
    case .simpleFormattingOnly: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_HtmlSanitization: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_HtmlSanitization] = [
    .unspecified,
    .disabled,
    .simpleFormattingOnly,
  ]
}

#endif  // swift(>=4.2)

/// Method for commute.
public enum Google_Cloud_Talent_V4_CommuteMethod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Commute method isn't specified.
  case unspecified // = 0

  /// Commute time is calculated based on driving time.
  case driving // = 1

  /// Commute time is calculated based on public transit including bus, metro,
  /// subway, and so on.
  case transit // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .driving
    case 2: self = .transit
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .driving: return 1
    case .transit: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_CommuteMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_CommuteMethod] = [
    .unspecified,
    .driving,
    .transit,
  ]
}

#endif  // swift(>=4.2)

/// Message representing a period of time between two timestamps.
public struct Google_Cloud_Talent_V4_TimestampRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Begin of the period (inclusive).
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// End of the period (exclusive).
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A resource that represents a location with full geographic information.
public struct Google_Cloud_Talent_V4_Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of a location, which corresponds to the address lines field of
  /// [google.type.PostalAddress][google.type.PostalAddress]. For example, "Downtown, Atlanta, GA, USA"
  /// has a type of [LocationType.NEIGHBORHOOD][google.cloud.talent.v4.Location.LocationType.NEIGHBORHOOD], and "Kansas City, KS, USA"
  /// has a type of [LocationType.LOCALITY][google.cloud.talent.v4.Location.LocationType.LOCALITY].
  public var locationType: Google_Cloud_Talent_V4_Location.LocationType = .unspecified

  /// Postal address of the location that includes human readable information,
  /// such as postal delivery and payments addresses. Given a postal address,
  /// a postal service can deliver items to a premises, P.O. Box, or other
  /// delivery location.
  public var postalAddress: Google_Type_PostalAddress {
    get {return _postalAddress ?? Google_Type_PostalAddress()}
    set {_postalAddress = newValue}
  }
  /// Returns true if `postalAddress` has been explicitly set.
  public var hasPostalAddress: Bool {return self._postalAddress != nil}
  /// Clears the value of `postalAddress`. Subsequent reads from it will return its default value.
  public mutating func clearPostalAddress() {self._postalAddress = nil}

  /// An object representing a latitude/longitude pair.
  public var latLng: Google_Type_LatLng {
    get {return _latLng ?? Google_Type_LatLng()}
    set {_latLng = newValue}
  }
  /// Returns true if `latLng` has been explicitly set.
  public var hasLatLng: Bool {return self._latLng != nil}
  /// Clears the value of `latLng`. Subsequent reads from it will return its default value.
  public mutating func clearLatLng() {self._latLng = nil}

  /// Radius in miles of the job location. This value is derived from the
  /// location bounding box in which a circle with the specified radius
  /// centered from [google.type.LatLng][google.type.LatLng] covers the area associated with the
  /// job location.
  /// For example, currently, "Mountain View, CA, USA" has a radius of
  /// 6.17 miles.
  public var radiusMiles: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An enum which represents the type of a location.
  public enum LocationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value if the type isn't specified.
    case unspecified // = 0

    /// A country level location.
    case country // = 1

    /// A state or equivalent level location.
    case administrativeArea // = 2

    /// A county or equivalent level location.
    case subAdministrativeArea // = 3

    /// A city or equivalent level location.
    case locality // = 4

    /// A postal code level location.
    case postalCode // = 5

    /// A sublocality is a subdivision of a locality, for example a city borough,
    /// ward, or arrondissement. Sublocalities are usually recognized by a local
    /// political authority. For example, Manhattan and Brooklyn are recognized
    /// as boroughs by the City of New York, and are therefore modeled as
    /// sublocalities.
    case subLocality // = 6

    /// A district or equivalent level location.
    case subLocality1 // = 7

    /// A smaller district or equivalent level display.
    case subLocality2 // = 8

    /// A neighborhood level location.
    case neighborhood // = 9

    /// A street address level location.
    case streetAddress // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .country
      case 2: self = .administrativeArea
      case 3: self = .subAdministrativeArea
      case 4: self = .locality
      case 5: self = .postalCode
      case 6: self = .subLocality
      case 7: self = .subLocality1
      case 8: self = .subLocality2
      case 9: self = .neighborhood
      case 10: self = .streetAddress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .country: return 1
      case .administrativeArea: return 2
      case .subAdministrativeArea: return 3
      case .locality: return 4
      case .postalCode: return 5
      case .subLocality: return 6
      case .subLocality1: return 7
      case .subLocality2: return 8
      case .neighborhood: return 9
      case .streetAddress: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _postalAddress: Google_Type_PostalAddress? = nil
  fileprivate var _latLng: Google_Type_LatLng? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_Location.LocationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_Location.LocationType] = [
    .unspecified,
    .country,
    .administrativeArea,
    .subAdministrativeArea,
    .locality,
    .postalCode,
    .subLocality,
    .subLocality1,
    .subLocality2,
    .neighborhood,
    .streetAddress,
  ]
}

#endif  // swift(>=4.2)

/// Meta information related to the job searcher or entity
/// conducting the job search. This information is used to improve the
/// performance of the service.
public struct Google_Cloud_Talent_V4_RequestMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required if [allow_missing_ids][google.cloud.talent.v4.RequestMetadata.allow_missing_ids] is unset or `false`.
  ///
  /// The client-defined scope or source of the service call, which typically
  /// is the domain on
  /// which the service has been implemented and is currently being run.
  ///
  /// For example, if the service is being run by client <em>Foo, Inc.</em>, on
  /// job board www.foo.com and career site www.bar.com, then this field is
  /// set to "foo.com" for use on the job board, and "bar.com" for use on the
  /// career site.
  ///
  /// Note that any improvements to the model for a particular tenant site rely
  /// on this field being set correctly to a unique domain.
  ///
  /// The maximum number of allowed characters is 255.
  public var domain: String = String()

  /// Required if [allow_missing_ids][google.cloud.talent.v4.RequestMetadata.allow_missing_ids] is unset or `false`.
  ///
  /// A unique session identification string. A session is defined as the
  /// duration of an end user's interaction with the service over a certain
  /// period.
  /// Obfuscate this field for privacy concerns before
  /// providing it to the service.
  ///
  /// Note that any improvements to the model for a particular tenant site rely
  /// on this field being set correctly to a unique session ID.
  ///
  /// The maximum number of allowed characters is 255.
  public var sessionID: String = String()

  /// Required if [allow_missing_ids][google.cloud.talent.v4.RequestMetadata.allow_missing_ids] is unset or `false`.
  ///
  /// A unique user identification string, as determined by the client.
  /// To have the strongest positive impact on search quality
  /// make sure the client-level is unique.
  /// Obfuscate this field for privacy concerns before
  /// providing it to the service.
  ///
  /// Note that any improvements to the model for a particular tenant site rely
  /// on this field being set correctly to a unique user ID.
  ///
  /// The maximum number of allowed characters is 255.
  public var userID: String = String()

  /// Only set when any of [domain][google.cloud.talent.v4.RequestMetadata.domain], [session_id][google.cloud.talent.v4.RequestMetadata.session_id] and [user_id][google.cloud.talent.v4.RequestMetadata.user_id] isn't
  /// available for some reason. It is highly recommended not to set this field
  /// and provide accurate [domain][google.cloud.talent.v4.RequestMetadata.domain], [session_id][google.cloud.talent.v4.RequestMetadata.session_id] and [user_id][google.cloud.talent.v4.RequestMetadata.user_id] for the
  /// best service experience.
  public var allowMissingIds: Bool = false

  /// The type of device used by the job seeker at the time of the call to the
  /// service.
  public var deviceInfo: Google_Cloud_Talent_V4_DeviceInfo {
    get {return _deviceInfo ?? Google_Cloud_Talent_V4_DeviceInfo()}
    set {_deviceInfo = newValue}
  }
  /// Returns true if `deviceInfo` has been explicitly set.
  public var hasDeviceInfo: Bool {return self._deviceInfo != nil}
  /// Clears the value of `deviceInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceInfo() {self._deviceInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _deviceInfo: Google_Cloud_Talent_V4_DeviceInfo? = nil
}

/// Additional information returned to client, such as debugging information.
public struct Google_Cloud_Talent_V4_ResponseMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A unique id associated with this call.
  /// This id is logged for tracking purposes.
  public var requestID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Device information collected from the job seeker, candidate, or
/// other entity conducting the job search. Providing this information improves
/// the quality of the search results across devices.
public struct Google_Cloud_Talent_V4_DeviceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of the device.
  public var deviceType: Google_Cloud_Talent_V4_DeviceInfo.DeviceType = .unspecified

  /// A device-specific ID. The ID must be a unique identifier that
  /// distinguishes the device from other devices.
  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An enumeration describing an API access portal and exposure mechanism.
  public enum DeviceType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The device type isn't specified.
    case unspecified // = 0

    /// A desktop web browser, such as, Chrome, Firefox, Safari, or Internet
    /// Explorer)
    case web // = 1

    /// A mobile device web browser, such as a phone or tablet with a Chrome
    /// browser.
    case mobileWeb // = 2

    /// An Android device native application.
    case android // = 3

    /// An iOS device native application.
    case ios // = 4

    /// A bot, as opposed to a device operated by human beings, such as a web
    /// crawler.
    case bot // = 5

    /// Other devices types.
    case other // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .web
      case 2: self = .mobileWeb
      case 3: self = .android
      case 4: self = .ios
      case 5: self = .bot
      case 6: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .web: return 1
      case .mobileWeb: return 2
      case .android: return 3
      case .ios: return 4
      case .bot: return 5
      case .other: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_DeviceInfo.DeviceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_DeviceInfo.DeviceType] = [
    .unspecified,
    .web,
    .mobileWeb,
    .android,
    .ios,
    .bot,
    .other,
  ]
}

#endif  // swift(>=4.2)

/// Custom attribute values that are either filterable or non-filterable.
public struct Google_Cloud_Talent_V4_CustomAttribute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Exactly one of [string_values][google.cloud.talent.v4.CustomAttribute.string_values] or [long_values][google.cloud.talent.v4.CustomAttribute.long_values] must be specified.
  ///
  /// This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or
  /// `CASE_INSENSITIVE_MATCH`) search.
  /// For filterable `string_value`s, a maximum total number of 200 values
  /// is allowed, with each `string_value` has a byte size of no more than
  /// 500B. For unfilterable `string_values`, the maximum total byte size of
  /// unfilterable `string_values` is 50KB.
  ///
  /// Empty string isn't allowed.
  public var stringValues: [String] = []

  /// Exactly one of [string_values][google.cloud.talent.v4.CustomAttribute.string_values] or [long_values][google.cloud.talent.v4.CustomAttribute.long_values] must be specified.
  ///
  /// This field is used to perform number range search.
  /// (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`.
  ///
  /// Currently at most 1 [long_values][google.cloud.talent.v4.CustomAttribute.long_values] is supported.
  public var longValues: [Int64] = []

  /// If the `filterable` flag is true, the custom field values may be used for
  /// custom attribute filters [JobQuery.custom_attribute_filter][google.cloud.talent.v4.JobQuery.custom_attribute_filter].
  /// If false, these values may not be used for custom attribute filters.
  ///
  /// Default is false.
  public var filterable: Bool = false

  /// If the `keyword_searchable` flag is true, the keywords in custom fields are
  /// searchable by keyword match.
  /// If false, the values are not searchable by keyword match.
  ///
  /// Default is false.
  public var keywordSearchable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Spell check result.
public struct Google_Cloud_Talent_V4_SpellingCorrection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates if the query was corrected by the spell checker.
  public var corrected: Bool = false

  /// Correction output consisting of the corrected keyword string.
  public var correctedText: String = String()

  /// Corrected output with html tags to highlight the corrected words.
  /// Corrected words are called out with the "<b><i>...</i></b>" html tags.
  ///
  /// For example, the user input query is "software enginear", where the second
  /// word, "enginear," is incorrect. It should be "engineer". When spelling
  /// correction is enabled, this value is
  /// "software <b><i>engineer</i></b>".
  public var correctedHtml: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Job compensation details.
public struct Google_Cloud_Talent_V4_CompensationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Job compensation information.
  ///
  /// At most one entry can be of type
  /// [CompensationInfo.CompensationType.BASE][google.cloud.talent.v4.CompensationInfo.CompensationType.BASE], which is
  /// referred as **base compensation entry** for the job.
  public var entries: [Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry] = []

  /// Output only. Annualized base compensation range. Computed as base compensation entry's
  /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount] times
  /// [CompensationEntry.expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year].
  ///
  /// See [CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry] for explanation on compensation annualization.
  public var annualizedBaseCompensationRange: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange {
    get {return _annualizedBaseCompensationRange ?? Google_Cloud_Talent_V4_CompensationInfo.CompensationRange()}
    set {_annualizedBaseCompensationRange = newValue}
  }
  /// Returns true if `annualizedBaseCompensationRange` has been explicitly set.
  public var hasAnnualizedBaseCompensationRange: Bool {return self._annualizedBaseCompensationRange != nil}
  /// Clears the value of `annualizedBaseCompensationRange`. Subsequent reads from it will return its default value.
  public mutating func clearAnnualizedBaseCompensationRange() {self._annualizedBaseCompensationRange = nil}

  /// Output only. Annualized total compensation range. Computed as all compensation entries'
  /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount] times
  /// [CompensationEntry.expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year].
  ///
  /// See [CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry] for explanation on compensation annualization.
  public var annualizedTotalCompensationRange: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange {
    get {return _annualizedTotalCompensationRange ?? Google_Cloud_Talent_V4_CompensationInfo.CompensationRange()}
    set {_annualizedTotalCompensationRange = newValue}
  }
  /// Returns true if `annualizedTotalCompensationRange` has been explicitly set.
  public var hasAnnualizedTotalCompensationRange: Bool {return self._annualizedTotalCompensationRange != nil}
  /// Clears the value of `annualizedTotalCompensationRange`. Subsequent reads from it will return its default value.
  public mutating func clearAnnualizedTotalCompensationRange() {self._annualizedTotalCompensationRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of compensation.
  ///
  /// For compensation amounts specified in non-monetary amounts,
  /// describe the compensation scheme in the [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description].
  ///
  /// For example, tipping format is described in
  /// [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description] (for example, "expect 15-20% tips based
  /// on customer bill.") and an estimate of the tips provided in
  /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount] or [CompensationEntry.range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range] ($10 per hour).
  ///
  /// For example, equity is described in [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description]
  /// (for example, "1% - 2% equity vesting over 4 years, 1 year cliff") and
  /// value estimated in [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount] or
  /// [CompensationEntry.range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range]. If no value estimate is possible, units are
  /// [CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED][google.cloud.talent.v4.CompensationInfo.CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED] and then further
  /// clarified in [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description] field.
  public enum CompensationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// Base compensation: Refers to the fixed amount of money paid to an
    /// employee by an employer in return for work performed. Base compensation
    /// does not include benefits, bonuses or any other potential compensation
    /// from an employer.
    case base // = 1

    /// Bonus.
    case bonus // = 2

    /// Signing bonus.
    case signingBonus // = 3

    /// Equity.
    case equity // = 4

    /// Profit sharing.
    case profitSharing // = 5

    /// Commission.
    case commissions // = 6

    /// Tips.
    case tips // = 7

    /// Other compensation type.
    case otherCompensationType // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .base
      case 2: self = .bonus
      case 3: self = .signingBonus
      case 4: self = .equity
      case 5: self = .profitSharing
      case 6: self = .commissions
      case 7: self = .tips
      case 8: self = .otherCompensationType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .base: return 1
      case .bonus: return 2
      case .signingBonus: return 3
      case .equity: return 4
      case .profitSharing: return 5
      case .commissions: return 6
      case .tips: return 7
      case .otherCompensationType: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Pay frequency.
  public enum CompensationUnit: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// Hourly.
    case hourly // = 1

    /// Daily.
    case daily // = 2

    /// Weekly
    case weekly // = 3

    /// Monthly.
    case monthly // = 4

    /// Yearly.
    case yearly // = 5

    /// One time.
    case oneTime // = 6

    /// Other compensation units.
    case otherCompensationUnit // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .hourly
      case 2: self = .daily
      case 3: self = .weekly
      case 4: self = .monthly
      case 5: self = .yearly
      case 6: self = .oneTime
      case 7: self = .otherCompensationUnit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .hourly: return 1
      case .daily: return 2
      case .weekly: return 3
      case .monthly: return 4
      case .yearly: return 5
      case .oneTime: return 6
      case .otherCompensationUnit: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A compensation entry that represents one component of compensation, such
  /// as base pay, bonus, or other compensation type.
  ///
  /// Annualization: One compensation entry can be annualized if
  /// - it contains valid [amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount] or [range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range].
  /// - and its [expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year] is set or can be derived.
  /// Its annualized range is determined as ([amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount] or [range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range]) times
  /// [expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year].
  public struct CompensationEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Compensation type.
    ///
    /// Default is [CompensationType.COMPENSATION_TYPE_UNSPECIFIED][google.cloud.talent.v4.CompensationInfo.CompensationType.COMPENSATION_TYPE_UNSPECIFIED].
    public var type: Google_Cloud_Talent_V4_CompensationInfo.CompensationType = .unspecified

    /// Frequency of the specified amount.
    ///
    /// Default is [CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED][google.cloud.talent.v4.CompensationInfo.CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED].
    public var unit: Google_Cloud_Talent_V4_CompensationInfo.CompensationUnit = .unspecified

    /// Compensation amount. It could be a fixed amount or a floating range.
    public var compensationAmount: Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry.OneOf_CompensationAmount? = nil

    /// Compensation amount.
    public var amount: Google_Type_Money {
      get {
        if case .amount(let v)? = compensationAmount {return v}
        return Google_Type_Money()
      }
      set {compensationAmount = .amount(newValue)}
    }

    /// Compensation range.
    public var range: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange {
      get {
        if case .range(let v)? = compensationAmount {return v}
        return Google_Cloud_Talent_V4_CompensationInfo.CompensationRange()
      }
      set {compensationAmount = .range(newValue)}
    }

    /// Compensation description.  For example, could
    /// indicate equity terms or provide additional context to an estimated
    /// bonus.
    public var description_p: String = String()

    /// Expected number of units paid each year. If not specified, when
    /// [Job.employment_types][google.cloud.talent.v4.Job.employment_types] is FULLTIME, a default value is inferred
    /// based on [unit][google.cloud.talent.v4.CompensationInfo.CompensationEntry.unit]. Default values:
    /// - HOURLY: 2080
    /// - DAILY: 260
    /// - WEEKLY: 52
    /// - MONTHLY: 12
    /// - ANNUAL: 1
    public var expectedUnitsPerYear: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _expectedUnitsPerYear ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_expectedUnitsPerYear = newValue}
    }
    /// Returns true if `expectedUnitsPerYear` has been explicitly set.
    public var hasExpectedUnitsPerYear: Bool {return self._expectedUnitsPerYear != nil}
    /// Clears the value of `expectedUnitsPerYear`. Subsequent reads from it will return its default value.
    public mutating func clearExpectedUnitsPerYear() {self._expectedUnitsPerYear = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Compensation amount. It could be a fixed amount or a floating range.
    public enum OneOf_CompensationAmount: Equatable {
      /// Compensation amount.
      case amount(Google_Type_Money)
      /// Compensation range.
      case range(Google_Cloud_Talent_V4_CompensationInfo.CompensationRange)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry.OneOf_CompensationAmount, rhs: Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry.OneOf_CompensationAmount) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.amount, .amount): return {
          guard case .amount(let l) = lhs, case .amount(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.range, .range): return {
          guard case .range(let l) = lhs, case .range(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _expectedUnitsPerYear: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  }

  /// Compensation range.
  public struct CompensationRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The maximum amount of compensation. If left empty, the value is set
    /// to a maximal compensation value and the currency code is set to
    /// match the [currency code][google.type.Money.currency_code] of
    /// min_compensation.
    public var maxCompensation: Google_Type_Money {
      get {return _maxCompensation ?? Google_Type_Money()}
      set {_maxCompensation = newValue}
    }
    /// Returns true if `maxCompensation` has been explicitly set.
    public var hasMaxCompensation: Bool {return self._maxCompensation != nil}
    /// Clears the value of `maxCompensation`. Subsequent reads from it will return its default value.
    public mutating func clearMaxCompensation() {self._maxCompensation = nil}

    /// The minimum amount of compensation. If left empty, the value is set
    /// to zero and the currency code is set to match the
    /// [currency code][google.type.Money.currency_code] of max_compensation.
    public var minCompensation: Google_Type_Money {
      get {return _minCompensation ?? Google_Type_Money()}
      set {_minCompensation = newValue}
    }
    /// Returns true if `minCompensation` has been explicitly set.
    public var hasMinCompensation: Bool {return self._minCompensation != nil}
    /// Clears the value of `minCompensation`. Subsequent reads from it will return its default value.
    public mutating func clearMinCompensation() {self._minCompensation = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _maxCompensation: Google_Type_Money? = nil
    fileprivate var _minCompensation: Google_Type_Money? = nil
  }

  public init() {}

  fileprivate var _annualizedBaseCompensationRange: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange? = nil
  fileprivate var _annualizedTotalCompensationRange: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_CompensationInfo.CompensationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_CompensationInfo.CompensationType] = [
    .unspecified,
    .base,
    .bonus,
    .signingBonus,
    .equity,
    .profitSharing,
    .commissions,
    .tips,
    .otherCompensationType,
  ]
}

extension Google_Cloud_Talent_V4_CompensationInfo.CompensationUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_CompensationInfo.CompensationUnit] = [
    .unspecified,
    .hourly,
    .daily,
    .weekly,
    .monthly,
    .yearly,
    .oneTime,
    .otherCompensationUnit,
  ]
}

#endif  // swift(>=4.2)

/// Metadata used for long running operations returned by CTS batch APIs.
/// It's used to replace [google.longrunning.Operation.metadata][google.longrunning.Operation.metadata].
public struct Google_Cloud_Talent_V4_BatchOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The state of a long running operation.
  public var state: Google_Cloud_Talent_V4_BatchOperationMetadata.State = .unspecified

  /// More detailed information about operation state.
  public var stateDescription: String = String()

  /// Count of successful item(s) inside an operation.
  public var successCount: Int32 = 0

  /// Count of failed item(s) inside an operation.
  public var failureCount: Int32 = 0

  /// Count of total item(s) inside an operation.
  public var totalCount: Int32 = 0

  /// The time when the batch operation is created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The time when the batch operation status is updated. The metadata and the
  /// [update_time][google.cloud.talent.v4.BatchOperationMetadata.update_time] is refreshed every minute otherwise cached data is
  /// returned.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// The time when the batch operation is finished and
  /// [google.longrunning.Operation.done][google.longrunning.Operation.done] is set to `true`.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value.
    case unspecified // = 0

    /// The batch operation is being prepared for processing.
    case initializing // = 1

    /// The batch operation is actively being processed.
    case processing // = 2

    /// The batch operation is processed, and at least one item has been
    /// successfully processed.
    case succeeded // = 3

    /// The batch operation is done and no item has been successfully processed.
    case failed // = 4

    /// The batch operation is in the process of cancelling after
    /// [google.longrunning.Operations.CancelOperation][google.longrunning.Operations.CancelOperation] is called.
    case cancelling // = 5

    /// The batch operation is done after
    /// [google.longrunning.Operations.CancelOperation][google.longrunning.Operations.CancelOperation] is called. Any items
    /// processed before cancelling are returned in the response.
    case cancelled // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .initializing
      case 2: self = .processing
      case 3: self = .succeeded
      case 4: self = .failed
      case 5: self = .cancelling
      case 6: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .initializing: return 1
      case .processing: return 2
      case .succeeded: return 3
      case .failed: return 4
      case .cancelling: return 5
      case .cancelled: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Talent_V4_BatchOperationMetadata.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Talent_V4_BatchOperationMetadata.State] = [
    .unspecified,
    .initializing,
    .processing,
    .succeeded,
    .failed,
    .cancelling,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.talent.v4"

extension Google_Cloud_Talent_V4_CompanySize: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPANY_SIZE_UNSPECIFIED"),
    1: .same(proto: "MINI"),
    2: .same(proto: "SMALL"),
    3: .same(proto: "SMEDIUM"),
    4: .same(proto: "MEDIUM"),
    5: .same(proto: "BIG"),
    6: .same(proto: "BIGGER"),
    7: .same(proto: "GIANT"),
  ]
}

extension Google_Cloud_Talent_V4_JobBenefit: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_BENEFIT_UNSPECIFIED"),
    1: .same(proto: "CHILD_CARE"),
    2: .same(proto: "DENTAL"),
    3: .same(proto: "DOMESTIC_PARTNER"),
    4: .same(proto: "FLEXIBLE_HOURS"),
    5: .same(proto: "MEDICAL"),
    6: .same(proto: "LIFE_INSURANCE"),
    7: .same(proto: "PARENTAL_LEAVE"),
    8: .same(proto: "RETIREMENT_PLAN"),
    9: .same(proto: "SICK_DAYS"),
    10: .same(proto: "VACATION"),
    11: .same(proto: "VISION"),
  ]
}

extension Google_Cloud_Talent_V4_DegreeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEGREE_TYPE_UNSPECIFIED"),
    1: .same(proto: "PRIMARY_EDUCATION"),
    2: .same(proto: "LOWER_SECONDARY_EDUCATION"),
    3: .same(proto: "UPPER_SECONDARY_EDUCATION"),
    4: .same(proto: "ADULT_REMEDIAL_EDUCATION"),
    5: .same(proto: "ASSOCIATES_OR_EQUIVALENT"),
    6: .same(proto: "BACHELORS_OR_EQUIVALENT"),
    7: .same(proto: "MASTERS_OR_EQUIVALENT"),
    8: .same(proto: "DOCTORAL_OR_EQUIVALENT"),
  ]
}

extension Google_Cloud_Talent_V4_EmploymentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EMPLOYMENT_TYPE_UNSPECIFIED"),
    1: .same(proto: "FULL_TIME"),
    2: .same(proto: "PART_TIME"),
    3: .same(proto: "CONTRACTOR"),
    4: .same(proto: "CONTRACT_TO_HIRE"),
    5: .same(proto: "TEMPORARY"),
    6: .same(proto: "INTERN"),
    7: .same(proto: "VOLUNTEER"),
    8: .same(proto: "PER_DIEM"),
    9: .same(proto: "FLY_IN_FLY_OUT"),
    10: .same(proto: "OTHER_EMPLOYMENT_TYPE"),
  ]
}

extension Google_Cloud_Talent_V4_JobLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_LEVEL_UNSPECIFIED"),
    1: .same(proto: "ENTRY_LEVEL"),
    2: .same(proto: "EXPERIENCED"),
    3: .same(proto: "MANAGER"),
    4: .same(proto: "DIRECTOR"),
    5: .same(proto: "EXECUTIVE"),
  ]
}

extension Google_Cloud_Talent_V4_JobCategory: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_CATEGORY_UNSPECIFIED"),
    1: .same(proto: "ACCOUNTING_AND_FINANCE"),
    2: .same(proto: "ADMINISTRATIVE_AND_OFFICE"),
    3: .same(proto: "ADVERTISING_AND_MARKETING"),
    4: .same(proto: "ANIMAL_CARE"),
    5: .same(proto: "ART_FASHION_AND_DESIGN"),
    6: .same(proto: "BUSINESS_OPERATIONS"),
    7: .same(proto: "CLEANING_AND_FACILITIES"),
    8: .same(proto: "COMPUTER_AND_IT"),
    9: .same(proto: "CONSTRUCTION"),
    10: .same(proto: "CUSTOMER_SERVICE"),
    11: .same(proto: "EDUCATION"),
    12: .same(proto: "ENTERTAINMENT_AND_TRAVEL"),
    13: .same(proto: "FARMING_AND_OUTDOORS"),
    14: .same(proto: "HEALTHCARE"),
    15: .same(proto: "HUMAN_RESOURCES"),
    16: .same(proto: "INSTALLATION_MAINTENANCE_AND_REPAIR"),
    17: .same(proto: "LEGAL"),
    18: .same(proto: "MANAGEMENT"),
    19: .same(proto: "MANUFACTURING_AND_WAREHOUSE"),
    20: .same(proto: "MEDIA_COMMUNICATIONS_AND_WRITING"),
    21: .same(proto: "OIL_GAS_AND_MINING"),
    22: .same(proto: "PERSONAL_CARE_AND_SERVICES"),
    23: .same(proto: "PROTECTIVE_SERVICES"),
    24: .same(proto: "REAL_ESTATE"),
    25: .same(proto: "RESTAURANT_AND_HOSPITALITY"),
    26: .same(proto: "SALES_AND_RETAIL"),
    27: .same(proto: "SCIENCE_AND_ENGINEERING"),
    28: .same(proto: "SOCIAL_SERVICES_AND_NON_PROFIT"),
    29: .same(proto: "SPORTS_FITNESS_AND_RECREATION"),
    30: .same(proto: "TRANSPORTATION_AND_LOGISTICS"),
  ]
}

extension Google_Cloud_Talent_V4_PostingRegion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POSTING_REGION_UNSPECIFIED"),
    1: .same(proto: "ADMINISTRATIVE_AREA"),
    2: .same(proto: "NATION"),
    3: .same(proto: "TELECOMMUTE"),
  ]
}

extension Google_Cloud_Talent_V4_Visibility: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VISIBILITY_UNSPECIFIED"),
    1: .same(proto: "ACCOUNT_ONLY"),
    2: .same(proto: "SHARED_WITH_GOOGLE"),
    3: .same(proto: "SHARED_WITH_PUBLIC"),
  ]
}

extension Google_Cloud_Talent_V4_HtmlSanitization: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HTML_SANITIZATION_UNSPECIFIED"),
    1: .same(proto: "HTML_SANITIZATION_DISABLED"),
    2: .same(proto: "SIMPLE_FORMATTING_ONLY"),
  ]
}

extension Google_Cloud_Talent_V4_CommuteMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMMUTE_METHOD_UNSPECIFIED"),
    1: .same(proto: "DRIVING"),
    2: .same(proto: "TRANSIT"),
  ]
}

extension Google_Cloud_Talent_V4_TimestampRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimestampRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_TimestampRange, rhs: Google_Cloud_Talent_V4_TimestampRange) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Location"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "location_type"),
    2: .standard(proto: "postal_address"),
    3: .standard(proto: "lat_lng"),
    4: .standard(proto: "radius_miles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.locationType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._postalAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._latLng) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.radiusMiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.locationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.locationType, fieldNumber: 1)
    }
    if let v = self._postalAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._latLng {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.radiusMiles != 0 {
      try visitor.visitSingularDoubleField(value: self.radiusMiles, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_Location, rhs: Google_Cloud_Talent_V4_Location) -> Bool {
    if lhs.locationType != rhs.locationType {return false}
    if lhs._postalAddress != rhs._postalAddress {return false}
    if lhs._latLng != rhs._latLng {return false}
    if lhs.radiusMiles != rhs.radiusMiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_Location.LocationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "COUNTRY"),
    2: .same(proto: "ADMINISTRATIVE_AREA"),
    3: .same(proto: "SUB_ADMINISTRATIVE_AREA"),
    4: .same(proto: "LOCALITY"),
    5: .same(proto: "POSTAL_CODE"),
    6: .same(proto: "SUB_LOCALITY"),
    7: .same(proto: "SUB_LOCALITY_1"),
    8: .same(proto: "SUB_LOCALITY_2"),
    9: .same(proto: "NEIGHBORHOOD"),
    10: .same(proto: "STREET_ADDRESS"),
  ]
}

extension Google_Cloud_Talent_V4_RequestMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "user_id"),
    4: .standard(proto: "allow_missing_ids"),
    5: .standard(proto: "device_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.allowMissingIds) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._deviceInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 3)
    }
    if self.allowMissingIds != false {
      try visitor.visitSingularBoolField(value: self.allowMissingIds, fieldNumber: 4)
    }
    if let v = self._deviceInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_RequestMetadata, rhs: Google_Cloud_Talent_V4_RequestMetadata) -> Bool {
    if lhs.domain != rhs.domain {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.allowMissingIds != rhs.allowMissingIds {return false}
    if lhs._deviceInfo != rhs._deviceInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_ResponseMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_ResponseMetadata, rhs: Google_Cloud_Talent_V4_ResponseMetadata) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_type"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.deviceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deviceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.deviceType, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_DeviceInfo, rhs: Google_Cloud_Talent_V4_DeviceInfo) -> Bool {
    if lhs.deviceType != rhs.deviceType {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_DeviceInfo.DeviceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_TYPE_UNSPECIFIED"),
    1: .same(proto: "WEB"),
    2: .same(proto: "MOBILE_WEB"),
    3: .same(proto: "ANDROID"),
    4: .same(proto: "IOS"),
    5: .same(proto: "BOT"),
    6: .same(proto: "OTHER"),
  ]
}

extension Google_Cloud_Talent_V4_CustomAttribute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomAttribute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "string_values"),
    2: .standard(proto: "long_values"),
    3: .same(proto: "filterable"),
    4: .standard(proto: "keyword_searchable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.stringValues) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.longValues) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.filterable) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.keywordSearchable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stringValues.isEmpty {
      try visitor.visitRepeatedStringField(value: self.stringValues, fieldNumber: 1)
    }
    if !self.longValues.isEmpty {
      try visitor.visitPackedInt64Field(value: self.longValues, fieldNumber: 2)
    }
    if self.filterable != false {
      try visitor.visitSingularBoolField(value: self.filterable, fieldNumber: 3)
    }
    if self.keywordSearchable != false {
      try visitor.visitSingularBoolField(value: self.keywordSearchable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_CustomAttribute, rhs: Google_Cloud_Talent_V4_CustomAttribute) -> Bool {
    if lhs.stringValues != rhs.stringValues {return false}
    if lhs.longValues != rhs.longValues {return false}
    if lhs.filterable != rhs.filterable {return false}
    if lhs.keywordSearchable != rhs.keywordSearchable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_SpellingCorrection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpellingCorrection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "corrected"),
    2: .standard(proto: "corrected_text"),
    3: .standard(proto: "corrected_html"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.corrected) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.correctedText) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.correctedHtml) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.corrected != false {
      try visitor.visitSingularBoolField(value: self.corrected, fieldNumber: 1)
    }
    if !self.correctedText.isEmpty {
      try visitor.visitSingularStringField(value: self.correctedText, fieldNumber: 2)
    }
    if !self.correctedHtml.isEmpty {
      try visitor.visitSingularStringField(value: self.correctedHtml, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_SpellingCorrection, rhs: Google_Cloud_Talent_V4_SpellingCorrection) -> Bool {
    if lhs.corrected != rhs.corrected {return false}
    if lhs.correctedText != rhs.correctedText {return false}
    if lhs.correctedHtml != rhs.correctedHtml {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_CompensationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompensationInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
    2: .standard(proto: "annualized_base_compensation_range"),
    3: .standard(proto: "annualized_total_compensation_range"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._annualizedBaseCompensationRange) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._annualizedTotalCompensationRange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    if let v = self._annualizedBaseCompensationRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._annualizedTotalCompensationRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_CompensationInfo, rhs: Google_Cloud_Talent_V4_CompensationInfo) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs._annualizedBaseCompensationRange != rhs._annualizedBaseCompensationRange {return false}
    if lhs._annualizedTotalCompensationRange != rhs._annualizedTotalCompensationRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_CompensationInfo.CompensationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPENSATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "BASE"),
    2: .same(proto: "BONUS"),
    3: .same(proto: "SIGNING_BONUS"),
    4: .same(proto: "EQUITY"),
    5: .same(proto: "PROFIT_SHARING"),
    6: .same(proto: "COMMISSIONS"),
    7: .same(proto: "TIPS"),
    8: .same(proto: "OTHER_COMPENSATION_TYPE"),
  ]
}

extension Google_Cloud_Talent_V4_CompensationInfo.CompensationUnit: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPENSATION_UNIT_UNSPECIFIED"),
    1: .same(proto: "HOURLY"),
    2: .same(proto: "DAILY"),
    3: .same(proto: "WEEKLY"),
    4: .same(proto: "MONTHLY"),
    5: .same(proto: "YEARLY"),
    6: .same(proto: "ONE_TIME"),
    7: .same(proto: "OTHER_COMPENSATION_UNIT"),
  ]
}

extension Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4_CompensationInfo.protoMessageName + ".CompensationEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "unit"),
    3: .same(proto: "amount"),
    4: .same(proto: "range"),
    5: .same(proto: "description"),
    6: .standard(proto: "expected_units_per_year"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.unit) }()
      case 3: try {
        var v: Google_Type_Money?
        if let current = self.compensationAmount {
          try decoder.handleConflictingOneOf()
          if case .amount(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.compensationAmount = .amount(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange?
        if let current = self.compensationAmount {
          try decoder.handleConflictingOneOf()
          if case .range(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.compensationAmount = .range(v)}
      }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._expectedUnitsPerYear) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.unit != .unspecified {
      try visitor.visitSingularEnumField(value: self.unit, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.compensationAmount {
    case .amount?: try {
      guard case .amount(let v)? = self.compensationAmount else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .range?: try {
      guard case .range(let v)? = self.compensationAmount else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if let v = self._expectedUnitsPerYear {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry, rhs: Google_Cloud_Talent_V4_CompensationInfo.CompensationEntry) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.compensationAmount != rhs.compensationAmount {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._expectedUnitsPerYear != rhs._expectedUnitsPerYear {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_CompensationInfo.CompensationRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Talent_V4_CompensationInfo.protoMessageName + ".CompensationRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "max_compensation"),
    1: .standard(proto: "min_compensation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._minCompensation) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxCompensation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._minCompensation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._maxCompensation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange, rhs: Google_Cloud_Talent_V4_CompensationInfo.CompensationRange) -> Bool {
    if lhs._maxCompensation != rhs._maxCompensation {return false}
    if lhs._minCompensation != rhs._minCompensation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_BatchOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "state_description"),
    3: .standard(proto: "success_count"),
    4: .standard(proto: "failure_count"),
    5: .standard(proto: "total_count"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "update_time"),
    8: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stateDescription) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.successCount) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.failureCount) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.stateDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.stateDescription, fieldNumber: 2)
    }
    if self.successCount != 0 {
      try visitor.visitSingularInt32Field(value: self.successCount, fieldNumber: 3)
    }
    if self.failureCount != 0 {
      try visitor.visitSingularInt32Field(value: self.failureCount, fieldNumber: 4)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 5)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Talent_V4_BatchOperationMetadata, rhs: Google_Cloud_Talent_V4_BatchOperationMetadata) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.stateDescription != rhs.stateDescription {return false}
    if lhs.successCount != rhs.successCount {return false}
    if lhs.failureCount != rhs.failureCount {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Talent_V4_BatchOperationMetadata.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "INITIALIZING"),
    2: .same(proto: "PROCESSING"),
    3: .same(proto: "SUCCEEDED"),
    4: .same(proto: "FAILED"),
    5: .same(proto: "CANCELLING"),
    6: .same(proto: "CANCELLED"),
  ]
}
