// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/asset/v1beta1/asset_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Asset content type.
public enum Google_Cloud_Asset_V1beta1_ContentType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified content type.
  case unspecified // = 0

  /// Resource metadata.
  case resource // = 1

  /// The actual IAM policy set on a resource.
  case iamPolicy // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .resource
    case 2: self = .iamPolicy
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .resource: return 1
    case .iamPolicy: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Asset_V1beta1_ContentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Asset_V1beta1_ContentType] = [
    .unspecified,
    .resource,
    .iamPolicy,
  ]
}

#endif  // swift(>=4.2)

/// Export asset request.
public struct Google_Cloud_Asset_V1beta1_ExportAssetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The relative name of the root asset. This can only be an
  /// organization number (such as "organizations/123"), a project ID (such as
  /// "projects/my-project-id"), a project number (such as "projects/12345"), or
  /// a folder number (such as "folders/123").
  public var parent: String = String()

  /// Timestamp to take an asset snapshot. This can only be set to a timestamp
  /// between 2018-10-02 UTC (inclusive) and the current time. If not specified,
  /// the current time will be used. Due to delays in resource data collection
  /// and indexing, there is a volatile window during which running the same
  /// query may get different results.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// A list of asset types of which to take a snapshot for. For example:
  /// "google.compute.Disk". If specified, only matching assets will be returned.
  /// See [Introduction to Cloud Asset
  /// Inventory](https://cloud.google.com/resource-manager/docs/cloud-asset-inventory/overview)
  /// for all supported asset types.
  public var assetTypes: [String] = []

  /// Asset content type. If not specified, no content but the asset name will be
  /// returned.
  public var contentType: Google_Cloud_Asset_V1beta1_ContentType = .unspecified

  /// Required. Output configuration indicating where the results will be output
  /// to. All results will be in newline delimited JSON format.
  public var outputConfig: Google_Cloud_Asset_V1beta1_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Asset_V1beta1_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _outputConfig: Google_Cloud_Asset_V1beta1_OutputConfig? = nil
}

/// The export asset response. This message is returned by the
/// [google.longrunning.Operations.GetOperation][google.longrunning.Operations.GetOperation]
/// method in the returned
/// [google.longrunning.Operation.response][google.longrunning.Operation.response]
/// field.
public struct Google_Cloud_Asset_V1beta1_ExportAssetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time the snapshot was taken.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  /// Output configuration indicating where the results were output to.
  /// All results are in JSON format.
  public var outputConfig: Google_Cloud_Asset_V1beta1_OutputConfig {
    get {return _outputConfig ?? Google_Cloud_Asset_V1beta1_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _outputConfig: Google_Cloud_Asset_V1beta1_OutputConfig? = nil
}

/// Batch get assets history request.
public struct Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The relative name of the root asset. It can only be an
  /// organization number (such as "organizations/123"), a project ID (such as
  /// "projects/my-project-id")", or a project number (such as "projects/12345").
  public var parent: String = String()

  /// A list of the full names of the assets. For example:
  /// `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
  /// See [Resource
  /// Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
  /// for more info.
  ///
  /// The request becomes a no-op if the asset name list is empty, and the max
  /// size of the asset name list is 100 in one request.
  public var assetNames: [String] = []

  /// Optional. The content type.
  public var contentType: Google_Cloud_Asset_V1beta1_ContentType = .unspecified

  /// Optional. The time window for the asset history. Both start_time and
  /// end_time are optional and if set, it must be after 2018-10-02 UTC. If
  /// end_time is not set, it is default to current timestamp. If start_time is
  /// not set, the snapshot of the assets at end_time will be returned. The
  /// returned results contain all temporal assets whose time window overlap with
  /// read_time_window.
  public var readTimeWindow: Google_Cloud_Asset_V1beta1_TimeWindow {
    get {return _readTimeWindow ?? Google_Cloud_Asset_V1beta1_TimeWindow()}
    set {_readTimeWindow = newValue}
  }
  /// Returns true if `readTimeWindow` has been explicitly set.
  public var hasReadTimeWindow: Bool {return self._readTimeWindow != nil}
  /// Clears the value of `readTimeWindow`. Subsequent reads from it will return its default value.
  public mutating func clearReadTimeWindow() {self._readTimeWindow = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTimeWindow: Google_Cloud_Asset_V1beta1_TimeWindow? = nil
}

/// Batch get assets history response.
public struct Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of assets with valid time windows.
  public var assets: [Google_Cloud_Asset_V1beta1_TemporalAsset] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Output configuration for export assets destination.
public struct Google_Cloud_Asset_V1beta1_OutputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Asset export destination.
  public var destination: Google_Cloud_Asset_V1beta1_OutputConfig.OneOf_Destination? = nil

  /// Destination on Cloud Storage.
  public var gcsDestination: Google_Cloud_Asset_V1beta1_GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Asset_V1beta1_GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Asset export destination.
  public enum OneOf_Destination: Equatable {
    /// Destination on Cloud Storage.
    case gcsDestination(Google_Cloud_Asset_V1beta1_GcsDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Asset_V1beta1_OutputConfig.OneOf_Destination, rhs: Google_Cloud_Asset_V1beta1_OutputConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// A Cloud Storage location.
public struct Google_Cloud_Asset_V1beta1_GcsDestination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required.
  public var objectUri: Google_Cloud_Asset_V1beta1_GcsDestination.OneOf_ObjectUri? = nil

  /// The uri of the Cloud Storage object. It's the same uri that is used by
  /// gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
  /// Editing Object
  /// Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
  /// for more information.
  public var uri: String {
    get {
      if case .uri(let v)? = objectUri {return v}
      return String()
    }
    set {objectUri = .uri(newValue)}
  }

  /// The uri prefix of all generated Cloud Storage objects. For example:
  /// "gs://bucket_name/object_name_prefix". Each object uri is in format:
  /// "gs://bucket_name/object_name_prefix/<asset type>/<shard number> and only
  /// contains assets for that type. <shard number> starts from 0. For example:
  /// "gs://bucket_name/object_name_prefix/google.compute.disk/0" is the first
  /// shard of output objects containing all google.compute.disk assets.
  /// An INVALID_ARGUMENT error will be returned if file with the same name
  /// "gs://bucket_name/object_name_prefix" already exists.
  public var uriPrefix: String {
    get {
      if case .uriPrefix(let v)? = objectUri {return v}
      return String()
    }
    set {objectUri = .uriPrefix(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required.
  public enum OneOf_ObjectUri: Equatable {
    /// The uri of the Cloud Storage object. It's the same uri that is used by
    /// gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
    /// Editing Object
    /// Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
    /// for more information.
    case uri(String)
    /// The uri prefix of all generated Cloud Storage objects. For example:
    /// "gs://bucket_name/object_name_prefix". Each object uri is in format:
    /// "gs://bucket_name/object_name_prefix/<asset type>/<shard number> and only
    /// contains assets for that type. <shard number> starts from 0. For example:
    /// "gs://bucket_name/object_name_prefix/google.compute.disk/0" is the first
    /// shard of output objects containing all google.compute.disk assets.
    /// An INVALID_ARGUMENT error will be returned if file with the same name
    /// "gs://bucket_name/object_name_prefix" already exists.
    case uriPrefix(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Asset_V1beta1_GcsDestination.OneOf_ObjectUri, rhs: Google_Cloud_Asset_V1beta1_GcsDestination.OneOf_ObjectUri) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.uri, .uri): return {
        guard case .uri(let l) = lhs, case .uri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.uriPrefix, .uriPrefix): return {
        guard case .uriPrefix(let l) = lhs, case .uriPrefix(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.asset.v1beta1"

extension Google_Cloud_Asset_V1beta1_ContentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTENT_TYPE_UNSPECIFIED"),
    1: .same(proto: "RESOURCE"),
    2: .same(proto: "IAM_POLICY"),
  ]
}

extension Google_Cloud_Asset_V1beta1_ExportAssetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportAssetsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "read_time"),
    3: .standard(proto: "asset_types"),
    4: .standard(proto: "content_type"),
    5: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.assetTypes) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.contentType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.assetTypes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assetTypes, fieldNumber: 3)
    }
    if self.contentType != .unspecified {
      try visitor.visitSingularEnumField(value: self.contentType, fieldNumber: 4)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1beta1_ExportAssetsRequest, rhs: Google_Cloud_Asset_V1beta1_ExportAssetsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.assetTypes != rhs.assetTypes {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1beta1_ExportAssetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportAssetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "read_time"),
    2: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1beta1_ExportAssetsResponse, rhs: Google_Cloud_Asset_V1beta1_ExportAssetsResponse) -> Bool {
    if lhs._readTime != rhs._readTime {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchGetAssetsHistoryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "asset_names"),
    3: .standard(proto: "content_type"),
    4: .standard(proto: "read_time_window"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.assetNames) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.contentType) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._readTimeWindow) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.assetNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assetNames, fieldNumber: 2)
    }
    if self.contentType != .unspecified {
      try visitor.visitSingularEnumField(value: self.contentType, fieldNumber: 3)
    }
    if let v = self._readTimeWindow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryRequest, rhs: Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.assetNames != rhs.assetNames {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs._readTimeWindow != rhs._readTimeWindow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchGetAssetsHistoryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryResponse, rhs: Google_Cloud_Asset_V1beta1_BatchGetAssetsHistoryResponse) -> Bool {
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1beta1_OutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Asset_V1beta1_GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsDestination(let v)? = self.destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1beta1_OutputConfig, rhs: Google_Cloud_Asset_V1beta1_OutputConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1beta1_GcsDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GcsDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .standard(proto: "uri_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.objectUri != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.objectUri = .uri(v)}
      }()
      case 2: try {
        if self.objectUri != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.objectUri = .uriPrefix(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.objectUri {
    case .uri?: try {
      guard case .uri(let v)? = self.objectUri else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .uriPrefix?: try {
      guard case .uriPrefix(let v)? = self.objectUri else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1beta1_GcsDestination, rhs: Google_Cloud_Asset_V1beta1_GcsDestination) -> Bool {
    if lhs.objectUri != rhs.objectUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
