// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/asset/v1p5beta1/assets.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Cloud asset. This includes all Google Cloud Platform resources,
/// Cloud IAM policies, and other non-GCP assets.
public struct Google_Cloud_Asset_V1p5beta1_Asset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The full name of the asset. For example:
  /// `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
  /// See [Resource
  /// Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
  /// for more information.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Type of the asset. Example: "compute.googleapis.com/Disk".
  public var assetType: String {
    get {return _storage._assetType}
    set {_uniqueStorage()._assetType = newValue}
  }

  /// Representation of the resource.
  public var resource: Google_Cloud_Asset_V1p5beta1_Resource {
    get {return _storage._resource ?? Google_Cloud_Asset_V1p5beta1_Resource()}
    set {_uniqueStorage()._resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {_uniqueStorage()._resource = nil}

  /// Representation of the actual Cloud IAM policy set on a cloud resource. For
  /// each resource, there must be at most one Cloud IAM policy set on it.
  public var iamPolicy: Google_Iam_V1_Policy {
    get {return _storage._iamPolicy ?? Google_Iam_V1_Policy()}
    set {_uniqueStorage()._iamPolicy = newValue}
  }
  /// Returns true if `iamPolicy` has been explicitly set.
  public var hasIamPolicy: Bool {return _storage._iamPolicy != nil}
  /// Clears the value of `iamPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearIamPolicy() {_uniqueStorage()._iamPolicy = nil}

  /// Representation of the Cloud Organization Policy set on an asset. For each
  /// asset, there could be multiple Organization policies with different
  /// constraints.
  public var orgPolicy: [Google_Cloud_Orgpolicy_V1_Policy] {
    get {return _storage._orgPolicy}
    set {_uniqueStorage()._orgPolicy = newValue}
  }

  /// Representation of the Cloud Organization access policy.
  public var accessContextPolicy: OneOf_AccessContextPolicy? {
    get {return _storage._accessContextPolicy}
    set {_uniqueStorage()._accessContextPolicy = newValue}
  }

  public var accessPolicy: Google_Identity_Accesscontextmanager_V1_AccessPolicy {
    get {
      if case .accessPolicy(let v)? = _storage._accessContextPolicy {return v}
      return Google_Identity_Accesscontextmanager_V1_AccessPolicy()
    }
    set {_uniqueStorage()._accessContextPolicy = .accessPolicy(newValue)}
  }

  public var accessLevel: Google_Identity_Accesscontextmanager_V1_AccessLevel {
    get {
      if case .accessLevel(let v)? = _storage._accessContextPolicy {return v}
      return Google_Identity_Accesscontextmanager_V1_AccessLevel()
    }
    set {_uniqueStorage()._accessContextPolicy = .accessLevel(newValue)}
  }

  public var servicePerimeter: Google_Identity_Accesscontextmanager_V1_ServicePerimeter {
    get {
      if case .servicePerimeter(let v)? = _storage._accessContextPolicy {return v}
      return Google_Identity_Accesscontextmanager_V1_ServicePerimeter()
    }
    set {_uniqueStorage()._accessContextPolicy = .servicePerimeter(newValue)}
  }

  /// Asset's ancestry path in Cloud Resource Manager (CRM) hierarchy,
  /// represented as a list of relative resource names. Ancestry path starts with
  /// the closest CRM ancestor and ends at root. If the asset is a CRM
  /// project/folder/organization, this starts from the asset itself.
  ///
  /// Example: ["projects/123456789", "folders/5432", "organizations/1234"]
  public var ancestors: [String] {
    get {return _storage._ancestors}
    set {_uniqueStorage()._ancestors = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Representation of the Cloud Organization access policy.
  public enum OneOf_AccessContextPolicy: Equatable {
    case accessPolicy(Google_Identity_Accesscontextmanager_V1_AccessPolicy)
    case accessLevel(Google_Identity_Accesscontextmanager_V1_AccessLevel)
    case servicePerimeter(Google_Identity_Accesscontextmanager_V1_ServicePerimeter)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Asset_V1p5beta1_Asset.OneOf_AccessContextPolicy, rhs: Google_Cloud_Asset_V1p5beta1_Asset.OneOf_AccessContextPolicy) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.accessPolicy, .accessPolicy): return {
        guard case .accessPolicy(let l) = lhs, case .accessPolicy(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.accessLevel, .accessLevel): return {
        guard case .accessLevel(let l) = lhs, case .accessLevel(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.servicePerimeter, .servicePerimeter): return {
        guard case .servicePerimeter(let l) = lhs, case .servicePerimeter(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Representation of a cloud resource.
public struct Google_Cloud_Asset_V1p5beta1_Resource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The API version. Example: "v1".
  public var version: String = String()

  /// The URL of the discovery document containing the resource's JSON schema.
  /// For example:
  /// `"https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"`.
  /// It will be left unspecified for resources without a discovery-based API,
  /// such as Cloud Bigtable.
  public var discoveryDocumentUri: String = String()

  /// The JSON schema name listed in the discovery document.
  /// Example: "Project". It will be left unspecified for resources (such as
  /// Cloud Bigtable) without a discovery-based API.
  public var discoveryName: String = String()

  /// The REST URL for accessing the resource. An HTTP GET operation using this
  /// URL returns the resource itself.
  /// Example:
  /// `https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123`.
  /// It will be left unspecified for resources without a REST API.
  public var resourceURL: String = String()

  /// The full name of the immediate parent of this resource. See
  /// [Resource
  /// Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
  /// for more information.
  ///
  /// For GCP assets, it is the parent resource defined in the [Cloud IAM policy
  /// hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).
  /// For example:
  /// `"//cloudresourcemanager.googleapis.com/projects/my_project_123"`.
  ///
  /// For third-party assets, it is up to the users to define.
  public var parent: String = String()

  /// The content of the resource, in which some sensitive fields are scrubbed
  /// away and may not be present.
  public var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.asset.v1p5beta1"

extension Google_Cloud_Asset_V1p5beta1_Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Asset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "asset_type"),
    3: .same(proto: "resource"),
    4: .standard(proto: "iam_policy"),
    6: .standard(proto: "org_policy"),
    7: .standard(proto: "access_policy"),
    8: .standard(proto: "access_level"),
    9: .standard(proto: "service_perimeter"),
    10: .same(proto: "ancestors"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _assetType: String = String()
    var _resource: Google_Cloud_Asset_V1p5beta1_Resource? = nil
    var _iamPolicy: Google_Iam_V1_Policy? = nil
    var _orgPolicy: [Google_Cloud_Orgpolicy_V1_Policy] = []
    var _accessContextPolicy: Google_Cloud_Asset_V1p5beta1_Asset.OneOf_AccessContextPolicy?
    var _ancestors: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _assetType = source._assetType
      _resource = source._resource
      _iamPolicy = source._iamPolicy
      _orgPolicy = source._orgPolicy
      _accessContextPolicy = source._accessContextPolicy
      _ancestors = source._ancestors
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._assetType) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._resource) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._iamPolicy) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._orgPolicy) }()
        case 7: try {
          var v: Google_Identity_Accesscontextmanager_V1_AccessPolicy?
          if let current = _storage._accessContextPolicy {
            try decoder.handleConflictingOneOf()
            if case .accessPolicy(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._accessContextPolicy = .accessPolicy(v)}
        }()
        case 8: try {
          var v: Google_Identity_Accesscontextmanager_V1_AccessLevel?
          if let current = _storage._accessContextPolicy {
            try decoder.handleConflictingOneOf()
            if case .accessLevel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._accessContextPolicy = .accessLevel(v)}
        }()
        case 9: try {
          var v: Google_Identity_Accesscontextmanager_V1_ServicePerimeter?
          if let current = _storage._accessContextPolicy {
            try decoder.handleConflictingOneOf()
            if case .servicePerimeter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._accessContextPolicy = .servicePerimeter(v)}
        }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._ancestors) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._assetType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetType, fieldNumber: 2)
      }
      if let v = _storage._resource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._iamPolicy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._orgPolicy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._orgPolicy, fieldNumber: 6)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._accessContextPolicy {
      case .accessPolicy?: try {
        guard case .accessPolicy(let v)? = _storage._accessContextPolicy else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .accessLevel?: try {
        guard case .accessLevel(let v)? = _storage._accessContextPolicy else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .servicePerimeter?: try {
        guard case .servicePerimeter(let v)? = _storage._accessContextPolicy else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case nil: break
      }
      if !_storage._ancestors.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ancestors, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p5beta1_Asset, rhs: Google_Cloud_Asset_V1p5beta1_Asset) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._assetType != rhs_storage._assetType {return false}
        if _storage._resource != rhs_storage._resource {return false}
        if _storage._iamPolicy != rhs_storage._iamPolicy {return false}
        if _storage._orgPolicy != rhs_storage._orgPolicy {return false}
        if _storage._accessContextPolicy != rhs_storage._accessContextPolicy {return false}
        if _storage._ancestors != rhs_storage._ancestors {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p5beta1_Resource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Resource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "discovery_document_uri"),
    3: .standard(proto: "discovery_name"),
    4: .standard(proto: "resource_url"),
    5: .same(proto: "parent"),
    6: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.discoveryDocumentUri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.discoveryName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourceURL) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if !self.discoveryDocumentUri.isEmpty {
      try visitor.visitSingularStringField(value: self.discoveryDocumentUri, fieldNumber: 2)
    }
    if !self.discoveryName.isEmpty {
      try visitor.visitSingularStringField(value: self.discoveryName, fieldNumber: 3)
    }
    if !self.resourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceURL, fieldNumber: 4)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 5)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p5beta1_Resource, rhs: Google_Cloud_Asset_V1p5beta1_Resource) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.discoveryDocumentUri != rhs.discoveryDocumentUri {return false}
    if lhs.discoveryName != rhs.discoveryName {return false}
    if lhs.resourceURL != rhs.resourceURL {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
