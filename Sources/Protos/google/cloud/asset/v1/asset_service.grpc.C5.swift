//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/asset/v1/asset_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Asset_V1_AssetServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Asset_V1_AssetServiceClientProtocol: GRPCClient {
  func exportAssets(
    _ request: Google_Cloud_Asset_V1_ExportAssetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_ExportAssetsRequest, Google_Longrunning_Operation>

  func batchGetAssetsHistory(
    _ request: Google_Cloud_Asset_V1_BatchGetAssetsHistoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_BatchGetAssetsHistoryRequest, Google_Cloud_Asset_V1_BatchGetAssetsHistoryResponse>

  func createFeed(
    _ request: Google_Cloud_Asset_V1_CreateFeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_CreateFeedRequest, Google_Cloud_Asset_V1_Feed>

  func getFeed(
    _ request: Google_Cloud_Asset_V1_GetFeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_GetFeedRequest, Google_Cloud_Asset_V1_Feed>

  func listFeeds(
    _ request: Google_Cloud_Asset_V1_ListFeedsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_ListFeedsRequest, Google_Cloud_Asset_V1_ListFeedsResponse>

  func updateFeed(
    _ request: Google_Cloud_Asset_V1_UpdateFeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_UpdateFeedRequest, Google_Cloud_Asset_V1_Feed>

  func deleteFeed(
    _ request: Google_Cloud_Asset_V1_DeleteFeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_DeleteFeedRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func searchAllResources(
    _ request: Google_Cloud_Asset_V1_SearchAllResourcesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_SearchAllResourcesRequest, Google_Cloud_Asset_V1_SearchAllResourcesResponse>

  func searchAllIamPolicies(
    _ request: Google_Cloud_Asset_V1_SearchAllIamPoliciesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_SearchAllIamPoliciesRequest, Google_Cloud_Asset_V1_SearchAllIamPoliciesResponse>

  func analyzeIamPolicy(
    _ request: Google_Cloud_Asset_V1_AnalyzeIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_AnalyzeIamPolicyRequest, Google_Cloud_Asset_V1_AnalyzeIamPolicyResponse>

  func analyzeIamPolicyLongrunning(
    _ request: Google_Cloud_Asset_V1_AnalyzeIamPolicyLongrunningRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Asset_V1_AnalyzeIamPolicyLongrunningRequest, Google_Longrunning_Operation>

}

extension Google_Cloud_Asset_V1_AssetServiceClientProtocol {

  /// Exports assets with time and resource types to a given Cloud Storage
  /// location/BigQuery table. For Cloud Storage location destinations, the
  /// output format is newline-delimited JSON. Each line represents a
  /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
  /// destinations, the output table stores the fields in asset proto as columns.
  /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
  /// , which allows you to keep track of the export. We recommend intervals of
  /// at least 2 seconds with exponential retry to poll the export operation
  /// result. For regular-size resource parent, the export operation usually
  /// finishes within 5 minutes.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportAssets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportAssets(
    _ request: Google_Cloud_Asset_V1_ExportAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_ExportAssetsRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/ExportAssets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Batch gets the update history of assets that overlap a time window.
  /// For IAM_POLICY content, this API outputs history when the asset and its
  /// attached IAM POLICY both exist. This can create gaps in the output history.
  /// Otherwise, this API outputs history with asset in both non-delete or
  /// deleted status.
  /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
  /// error.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchGetAssetsHistory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchGetAssetsHistory(
    _ request: Google_Cloud_Asset_V1_BatchGetAssetsHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_BatchGetAssetsHistoryRequest, Google_Cloud_Asset_V1_BatchGetAssetsHistoryResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/BatchGetAssetsHistory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a feed in a parent project/folder/organization to listen to its
  /// asset updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFeed(
    _ request: Google_Cloud_Asset_V1_CreateFeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_CreateFeedRequest, Google_Cloud_Asset_V1_Feed> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/CreateFeed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets details about an asset feed.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFeed(
    _ request: Google_Cloud_Asset_V1_GetFeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_GetFeedRequest, Google_Cloud_Asset_V1_Feed> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/GetFeed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all asset feeds in a parent project/folder/organization.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFeeds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listFeeds(
    _ request: Google_Cloud_Asset_V1_ListFeedsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_ListFeedsRequest, Google_Cloud_Asset_V1_ListFeedsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/ListFeeds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an asset feed configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFeed(
    _ request: Google_Cloud_Asset_V1_UpdateFeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_UpdateFeedRequest, Google_Cloud_Asset_V1_Feed> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/UpdateFeed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an asset feed.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFeed(
    _ request: Google_Cloud_Asset_V1_DeleteFeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_DeleteFeedRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/DeleteFeed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Searches all Cloud resources within the specified scope, such as a project,
  /// folder, or organization. The caller must be granted the
  /// `cloudasset.assets.searchAllResources` permission on the desired scope,
  /// otherwise the request will be rejected.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchAllResources.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchAllResources(
    _ request: Google_Cloud_Asset_V1_SearchAllResourcesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_SearchAllResourcesRequest, Google_Cloud_Asset_V1_SearchAllResourcesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/SearchAllResources",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Searches all IAM policies within the specified scope, such as a project,
  /// folder, or organization. The caller must be granted the
  /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
  /// otherwise the request will be rejected.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchAllIamPolicies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchAllIamPolicies(
    _ request: Google_Cloud_Asset_V1_SearchAllIamPoliciesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_SearchAllIamPoliciesRequest, Google_Cloud_Asset_V1_SearchAllIamPoliciesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/SearchAllIamPolicies",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Analyzes IAM policies to answer which identities have what accesses on
  /// which resources.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnalyzeIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func analyzeIamPolicy(
    _ request: Google_Cloud_Asset_V1_AnalyzeIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_AnalyzeIamPolicyRequest, Google_Cloud_Asset_V1_AnalyzeIamPolicyResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/AnalyzeIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Analyzes IAM policies asynchronously to answer which identities have what
  /// accesses on which resources, and writes the analysis results to a Google
  /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
  /// output format is the JSON format that represents a
  /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
  /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
  /// status. We recommend intervals of at least 2 seconds with exponential
  /// backoff retry to poll the operation result. The metadata contains the
  /// request to help callers to map responses to requests.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnalyzeIamPolicyLongrunning.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func analyzeIamPolicyLongrunning(
    _ request: Google_Cloud_Asset_V1_AnalyzeIamPolicyLongrunningRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Asset_V1_AnalyzeIamPolicyLongrunningRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.cloud.asset.v1.AssetService/AnalyzeIamPolicyLongrunning",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Asset_V1_AssetServiceClient: Google_Cloud_Asset_V1_AssetServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.asset.v1.AssetService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Asset_V1_AssetServiceProvider: CallHandlerProvider {
  /// Exports assets with time and resource types to a given Cloud Storage
  /// location/BigQuery table. For Cloud Storage location destinations, the
  /// output format is newline-delimited JSON. Each line represents a
  /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
  /// destinations, the output table stores the fields in asset proto as columns.
  /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
  /// , which allows you to keep track of the export. We recommend intervals of
  /// at least 2 seconds with exponential retry to poll the export operation
  /// result. For regular-size resource parent, the export operation usually
  /// finishes within 5 minutes.
  func exportAssets(request: Google_Cloud_Asset_V1_ExportAssetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Batch gets the update history of assets that overlap a time window.
  /// For IAM_POLICY content, this API outputs history when the asset and its
  /// attached IAM POLICY both exist. This can create gaps in the output history.
  /// Otherwise, this API outputs history with asset in both non-delete or
  /// deleted status.
  /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
  /// error.
  func batchGetAssetsHistory(request: Google_Cloud_Asset_V1_BatchGetAssetsHistoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_BatchGetAssetsHistoryResponse>
  /// Creates a feed in a parent project/folder/organization to listen to its
  /// asset updates.
  func createFeed(request: Google_Cloud_Asset_V1_CreateFeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_Feed>
  /// Gets details about an asset feed.
  func getFeed(request: Google_Cloud_Asset_V1_GetFeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_Feed>
  /// Lists all asset feeds in a parent project/folder/organization.
  func listFeeds(request: Google_Cloud_Asset_V1_ListFeedsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_ListFeedsResponse>
  /// Updates an asset feed configuration.
  func updateFeed(request: Google_Cloud_Asset_V1_UpdateFeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_Feed>
  /// Deletes an asset feed.
  func deleteFeed(request: Google_Cloud_Asset_V1_DeleteFeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Searches all Cloud resources within the specified scope, such as a project,
  /// folder, or organization. The caller must be granted the
  /// `cloudasset.assets.searchAllResources` permission on the desired scope,
  /// otherwise the request will be rejected.
  func searchAllResources(request: Google_Cloud_Asset_V1_SearchAllResourcesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_SearchAllResourcesResponse>
  /// Searches all IAM policies within the specified scope, such as a project,
  /// folder, or organization. The caller must be granted the
  /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
  /// otherwise the request will be rejected.
  func searchAllIamPolicies(request: Google_Cloud_Asset_V1_SearchAllIamPoliciesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_SearchAllIamPoliciesResponse>
  /// Analyzes IAM policies to answer which identities have what accesses on
  /// which resources.
  func analyzeIamPolicy(request: Google_Cloud_Asset_V1_AnalyzeIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Asset_V1_AnalyzeIamPolicyResponse>
  /// Analyzes IAM policies asynchronously to answer which identities have what
  /// accesses on which resources, and writes the analysis results to a Google
  /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
  /// output format is the JSON format that represents a
  /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
  /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
  /// status. We recommend intervals of at least 2 seconds with exponential
  /// backoff retry to poll the operation result. The metadata contains the
  /// request to help callers to map responses to requests.
  func analyzeIamPolicyLongrunning(request: Google_Cloud_Asset_V1_AnalyzeIamPolicyLongrunningRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Cloud_Asset_V1_AssetServiceProvider {
  public var serviceName: Substring { return "google.cloud.asset.v1.AssetService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ExportAssets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.exportAssets(request: request, context: context)
        }
      }

    case "BatchGetAssetsHistory":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchGetAssetsHistory(request: request, context: context)
        }
      }

    case "CreateFeed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createFeed(request: request, context: context)
        }
      }

    case "GetFeed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFeed(request: request, context: context)
        }
      }

    case "ListFeeds":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listFeeds(request: request, context: context)
        }
      }

    case "UpdateFeed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateFeed(request: request, context: context)
        }
      }

    case "DeleteFeed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteFeed(request: request, context: context)
        }
      }

    case "SearchAllResources":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchAllResources(request: request, context: context)
        }
      }

    case "SearchAllIamPolicies":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchAllIamPolicies(request: request, context: context)
        }
      }

    case "AnalyzeIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.analyzeIamPolicy(request: request, context: context)
        }
      }

    case "AnalyzeIamPolicyLongrunning":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.analyzeIamPolicyLongrunning(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

