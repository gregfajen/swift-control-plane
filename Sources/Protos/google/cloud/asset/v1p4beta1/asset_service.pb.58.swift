// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/asset/v1p4beta1/asset_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// IAM policy analysis query message.
public struct Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The relative name of the root asset. Only resources and IAM policies within
  /// the parent will be analyzed. This can only be an organization number (such
  /// as "organizations/123") or a folder number (such as "folders/123").
  public var parent: String = String()

  /// Optional. Specifies a resource for analysis. Leaving it empty means ANY.
  public var resourceSelector: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.ResourceSelector {
    get {return _resourceSelector ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.ResourceSelector()}
    set {_resourceSelector = newValue}
  }
  /// Returns true if `resourceSelector` has been explicitly set.
  public var hasResourceSelector: Bool {return self._resourceSelector != nil}
  /// Clears the value of `resourceSelector`. Subsequent reads from it will return its default value.
  public mutating func clearResourceSelector() {self._resourceSelector = nil}

  /// Optional. Specifies an identity for analysis. Leaving it empty means ANY.
  public var identitySelector: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.IdentitySelector {
    get {return _identitySelector ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.IdentitySelector()}
    set {_identitySelector = newValue}
  }
  /// Returns true if `identitySelector` has been explicitly set.
  public var hasIdentitySelector: Bool {return self._identitySelector != nil}
  /// Clears the value of `identitySelector`. Subsequent reads from it will return its default value.
  public mutating func clearIdentitySelector() {self._identitySelector = nil}

  /// Optional. Specifies roles or permissions for analysis. Leaving it empty
  /// means ANY.
  public var accessSelector: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.AccessSelector {
    get {return _accessSelector ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.AccessSelector()}
    set {_accessSelector = newValue}
  }
  /// Returns true if `accessSelector` has been explicitly set.
  public var hasAccessSelector: Bool {return self._accessSelector != nil}
  /// Clears the value of `accessSelector`. Subsequent reads from it will return its default value.
  public mutating func clearAccessSelector() {self._accessSelector = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies the resource to analyze for access policies, which may be set
  /// directly on the resource, or on ancestors such as organizations, folders or
  /// projects. At least one of [ResourceSelector][google.cloud.asset.v1p4beta1.IamPolicyAnalysisQuery.ResourceSelector], [IdentitySelector][google.cloud.asset.v1p4beta1.IamPolicyAnalysisQuery.IdentitySelector] or
  /// [AccessSelector][google.cloud.asset.v1p4beta1.IamPolicyAnalysisQuery.AccessSelector] must be specified in a request.
  public struct ResourceSelector {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The [full resource
    /// name](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    /// .
    public var fullResourceName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies an identity for which to determine resource access, based on
  /// roles assigned either directly to them or to the groups they belong to,
  /// directly or indirectly.
  public struct IdentitySelector {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The identity appear in the form of members in
    /// [IAM policy
    /// binding](https://cloud.google.com/iam/reference/rest/v1/Binding).
    public var identity: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies roles and/or permissions to analyze, to determine both the
  /// identities possessing them and the resources they control. If multiple
  /// values are specified, results will include identities and resources
  /// matching any of them.
  public struct AccessSelector {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional. The roles to appear in result.
    public var roles: [String] = []

    /// Optional. The permissions to appear in result.
    public var permissions: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _resourceSelector: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.ResourceSelector? = nil
  fileprivate var _identitySelector: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.IdentitySelector? = nil
  fileprivate var _accessSelector: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.AccessSelector? = nil
}

/// A request message for [AssetService.AnalyzeIamPolicy][google.cloud.asset.v1p4beta1.AssetService.AnalyzeIamPolicy].
public struct Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The request query.
  public var analysisQuery: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery {
    get {return _analysisQuery ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery()}
    set {_analysisQuery = newValue}
  }
  /// Returns true if `analysisQuery` has been explicitly set.
  public var hasAnalysisQuery: Bool {return self._analysisQuery != nil}
  /// Clears the value of `analysisQuery`. Subsequent reads from it will return its default value.
  public mutating func clearAnalysisQuery() {self._analysisQuery = nil}

  /// Optional. The request options.
  public var options: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.Options {
    get {return _options ?? Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.Options()}
    set {_options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return self._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {self._options = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Contains request options.
  public struct Options {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional. If true, the identities section of the result will expand any
    /// Google groups appearing in an IAM policy binding.
    ///
    /// If [identity_selector][] is specified, the identity in the result will
    /// be determined by the selector, and this flag will have no effect.
    ///
    /// Default is false.
    public var expandGroups: Bool = false

    /// Optional. If true, the access section of result will expand any roles
    /// appearing in IAM policy bindings to include their permissions.
    ///
    /// If [access_selector][] is specified, the access section of the result
    /// will be determined by the selector, and this flag will have no effect.
    ///
    /// Default is false.
    public var expandRoles: Bool = false

    /// Optional. If true, the resource section of the result will expand any
    /// resource attached to an IAM policy to include resources lower in the
    /// resource hierarchy.
    ///
    /// For example, if the request analyzes for which resources user A has
    /// permission P, and the results include an IAM policy with P on a GCP
    /// folder, the results will also include resources in that folder with
    /// permission P.
    ///
    /// If [resource_selector][] is specified, the resource section of the result
    /// will be determined by the selector, and this flag will have no effect.
    /// Default is false.
    public var expandResources: Bool = false

    /// Optional. If true, the result will output resource edges, starting
    /// from the policy attached resource, to any expanded resources.
    /// Default is false.
    public var outputResourceEdges: Bool = false

    /// Optional. If true, the result will output group identity edges, starting
    /// from the binding's group members, to any expanded identities.
    /// Default is false.
    public var outputGroupEdges: Bool = false

    /// Optional. If true, the response will include access analysis from identities to
    /// resources via service account impersonation. This is a very expensive
    /// operation, because many derived queries will be executed. We highly
    /// recommend you use ExportIamPolicyAnalysis rpc instead.
    ///
    /// For example, if the request analyzes for which resources user A has
    /// permission P, and there's an IAM policy states user A has
    /// iam.serviceAccounts.getAccessToken permission to a service account SA,
    /// and there's another IAM policy states service account SA has permission P
    /// to a GCP folder F, then user A potentially has access to the GCP folder
    /// F. And those advanced analysis results will be included in
    /// [AnalyzeIamPolicyResponse.service_account_impersonation_analysis][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.service_account_impersonation_analysis].
    ///
    /// Another example, if the request analyzes for who has
    /// permission P to a GCP folder F, and there's an IAM policy states user A
    /// has iam.serviceAccounts.actAs permission to a service account SA, and
    /// there's another IAM policy states service account SA has permission P to
    /// the GCP folder F, then user A potentially has access to the GCP folder
    /// F. And those advanced analysis results will be included in
    /// [AnalyzeIamPolicyResponse.service_account_impersonation_analysis][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.service_account_impersonation_analysis].
    ///
    /// Default is false.
    public var analyzeServiceAccountImpersonation: Bool = false

    /// Optional. Amount of time executable has to complete.  See JSON representation of
    /// [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json).
    ///
    /// If this field is set with a value less than the RPC deadline, and the
    /// execution of your query hasn't finished in the specified
    /// execution timeout,  you will get a response with partial result.
    /// Otherwise, your query's execution will continue until the RPC deadline.
    /// If it's not finished until then, you will get a  DEADLINE_EXCEEDED error.
    ///
    /// Default is empty.
    public var executionTimeout: SwiftProtobuf.Google_Protobuf_Duration {
      get {return _executionTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
      set {_executionTimeout = newValue}
    }
    /// Returns true if `executionTimeout` has been explicitly set.
    public var hasExecutionTimeout: Bool {return self._executionTimeout != nil}
    /// Clears the value of `executionTimeout`. Subsequent reads from it will return its default value.
    public mutating func clearExecutionTimeout() {self._executionTimeout = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _executionTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  }

  public init() {}

  fileprivate var _analysisQuery: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery? = nil
  fileprivate var _options: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.Options? = nil
}

/// A response message for [AssetService.AnalyzeIamPolicy][google.cloud.asset.v1p4beta1.AssetService.AnalyzeIamPolicy].
public struct Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The main analysis that matches the original request.
  public var mainAnalysis: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis {
    get {return _mainAnalysis ?? Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis()}
    set {_mainAnalysis = newValue}
  }
  /// Returns true if `mainAnalysis` has been explicitly set.
  public var hasMainAnalysis: Bool {return self._mainAnalysis != nil}
  /// Clears the value of `mainAnalysis`. Subsequent reads from it will return its default value.
  public mutating func clearMainAnalysis() {self._mainAnalysis = nil}

  /// The service account impersonation analysis if
  /// [AnalyzeIamPolicyRequest.analyze_service_account_impersonation][] is
  /// enabled.
  public var serviceAccountImpersonationAnalysis: [Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis] = []

  /// Represents whether all entries in the [main_analysis][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.main_analysis] and
  /// [service_account_impersonation_analysis][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.service_account_impersonation_analysis] have been fully explored to
  /// answer the query in the request.
  public var fullyExplored: Bool = false

  /// A list of non-critical errors happened during the request handling to
  /// explain why `fully_explored` is false, or empty if no error happened.
  public var nonCriticalErrors: [Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisResult.AnalysisState] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An analysis message to group the query and results.
  public struct IamPolicyAnalysis {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The analysis query.
    public var analysisQuery: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery {
      get {return _analysisQuery ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery()}
      set {_analysisQuery = newValue}
    }
    /// Returns true if `analysisQuery` has been explicitly set.
    public var hasAnalysisQuery: Bool {return self._analysisQuery != nil}
    /// Clears the value of `analysisQuery`. Subsequent reads from it will return its default value.
    public mutating func clearAnalysisQuery() {self._analysisQuery = nil}

    /// A list of [IamPolicyAnalysisResult][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult] that matches the analysis query, or
    /// empty if no result is found.
    public var analysisResults: [Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisResult] = []

    /// Represents whether all entries in the [analysis_results][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.IamPolicyAnalysis.analysis_results] have been
    /// fully explored to answer the query.
    public var fullyExplored: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _analysisQuery: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery? = nil
  }

  public init() {}

  fileprivate var _mainAnalysis: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis? = nil
}

/// Output configuration for export IAM policy analysis destination.
public struct Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// IAM policy analysis export destination.
  public var destination: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.OneOf_Destination? = nil

  /// Destination on Cloud Storage.
  public var gcsDestination: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination {
    get {
      if case .gcsDestination(let v)? = destination {return v}
      return Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination()
    }
    set {destination = .gcsDestination(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// IAM policy analysis export destination.
  public enum OneOf_Destination: Equatable {
    /// Destination on Cloud Storage.
    case gcsDestination(Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.OneOf_Destination, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.OneOf_Destination) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gcsDestination, .gcsDestination): return {
        guard case .gcsDestination(let l) = lhs, case .gcsDestination(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// A Cloud Storage location.
  public struct GcsDestination {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The uri of the Cloud Storage object. It's the same uri that is used by
    /// gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
    /// Editing Object
    /// Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
    /// for more information.
    public var uri: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// A request message for [AssetService.ExportIamPolicyAnalysis][google.cloud.asset.v1p4beta1.AssetService.ExportIamPolicyAnalysis].
public struct Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The request query.
  public var analysisQuery: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery {
    get {return _analysisQuery ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery()}
    set {_analysisQuery = newValue}
  }
  /// Returns true if `analysisQuery` has been explicitly set.
  public var hasAnalysisQuery: Bool {return self._analysisQuery != nil}
  /// Clears the value of `analysisQuery`. Subsequent reads from it will return its default value.
  public mutating func clearAnalysisQuery() {self._analysisQuery = nil}

  /// Optional. The request options.
  public var options: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.Options {
    get {return _options ?? Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.Options()}
    set {_options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return self._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {self._options = nil}

  /// Required. Output configuration indicating where the results will be output to.
  public var outputConfig: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig {
    get {return _outputConfig ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Contains request options.
  public struct Options {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional. If true, the identities section of the result will expand any
    /// Google groups appearing in an IAM policy binding.
    ///
    /// If [identity_selector][] is specified, the identity in the result will
    /// be determined by the selector, and this flag will have no effect.
    ///
    /// Default is false.
    public var expandGroups: Bool = false

    /// Optional. If true, the access section of result will expand any roles
    /// appearing in IAM policy bindings to include their permissions.
    ///
    /// If [access_selector][] is specified, the access section of the result
    /// will be determined by the selector, and this flag will have no effect.
    ///
    /// Default is false.
    public var expandRoles: Bool = false

    /// Optional. If true, the resource section of the result will expand any
    /// resource attached to an IAM policy to include resources lower in the
    /// resource hierarchy.
    ///
    /// For example, if the request analyzes for which resources user A has
    /// permission P, and the results include an IAM policy with P on a GCP
    /// folder, the results will also include resources in that folder with
    /// permission P.
    ///
    /// If [resource_selector][] is specified, the resource section of the result
    /// will be determined by the selector, and this flag will have no effect.
    /// Default is false.
    public var expandResources: Bool = false

    /// Optional. If true, the result will output resource edges, starting
    /// from the policy attached resource, to any expanded resources.
    /// Default is false.
    public var outputResourceEdges: Bool = false

    /// Optional. If true, the result will output group identity edges, starting
    /// from the binding's group members, to any expanded identities.
    /// Default is false.
    public var outputGroupEdges: Bool = false

    /// Optional. If true, the response will include access analysis from identities to
    /// resources via service account impersonation. This is a very expensive
    /// operation, because many derived queries will be executed.
    ///
    /// For example, if the request analyzes for which resources user A has
    /// permission P, and there's an IAM policy states user A has
    /// iam.serviceAccounts.getAccessToken permission to a service account SA,
    /// and there's another IAM policy states service account SA has permission P
    /// to a GCP folder F, then user A potentially has access to the GCP folder
    /// F. And those advanced analysis results will be included in
    /// [AnalyzeIamPolicyResponse.service_account_impersonation_analysis][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.service_account_impersonation_analysis].
    ///
    /// Another example, if the request analyzes for who has
    /// permission P to a GCP folder F, and there's an IAM policy states user A
    /// has iam.serviceAccounts.actAs permission to a service account SA, and
    /// there's another IAM policy states service account SA has permission P to
    /// the GCP folder F, then user A potentially has access to the GCP folder
    /// F. And those advanced analysis results will be included in
    /// [AnalyzeIamPolicyResponse.service_account_impersonation_analysis][google.cloud.asset.v1p4beta1.AnalyzeIamPolicyResponse.service_account_impersonation_analysis].
    ///
    /// Default is false.
    public var analyzeServiceAccountImpersonation: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _analysisQuery: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery? = nil
  fileprivate var _options: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.Options? = nil
  fileprivate var _outputConfig: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig? = nil
}

/// The export IAM policy analysis response. This message is returned by the
/// [google.longrunning.Operations.GetOperation][] method in the returned
/// [google.longrunning.Operation.response][] field.
public struct Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output configuration indicating where the results were output to.
  public var outputConfig: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig {
    get {return _outputConfig ?? Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _outputConfig: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.asset.v1p4beta1"

extension Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPolicyAnalysisQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "resource_selector"),
    3: .standard(proto: "identity_selector"),
    4: .standard(proto: "access_selector"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._resourceSelector) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._identitySelector) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._accessSelector) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._resourceSelector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._identitySelector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._accessSelector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._resourceSelector != rhs._resourceSelector {return false}
    if lhs._identitySelector != rhs._identitySelector {return false}
    if lhs._accessSelector != rhs._accessSelector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.ResourceSelector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.protoMessageName + ".ResourceSelector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "full_resource_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fullResourceName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullResourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.fullResourceName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.ResourceSelector, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.ResourceSelector) -> Bool {
    if lhs.fullResourceName != rhs.fullResourceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.IdentitySelector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.protoMessageName + ".IdentitySelector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.IdentitySelector, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.IdentitySelector) -> Bool {
    if lhs.identity != rhs.identity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.AccessSelector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.protoMessageName + ".AccessSelector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "roles"),
    2: .same(proto: "permissions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.roles) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.permissions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.roles, fieldNumber: 1)
    }
    if !self.permissions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.permissions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.AccessSelector, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisQuery.AccessSelector) -> Bool {
    if lhs.roles != rhs.roles {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnalyzeIamPolicyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "analysis_query"),
    2: .same(proto: "options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._analysisQuery) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._options) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._analysisQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._options {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest, rhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest) -> Bool {
    if lhs._analysisQuery != rhs._analysisQuery {return false}
    if lhs._options != rhs._options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.Options: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.protoMessageName + ".Options"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "expand_groups"),
    2: .standard(proto: "expand_roles"),
    3: .standard(proto: "expand_resources"),
    4: .standard(proto: "output_resource_edges"),
    5: .standard(proto: "output_group_edges"),
    6: .standard(proto: "analyze_service_account_impersonation"),
    7: .standard(proto: "execution_timeout"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.expandGroups) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.expandRoles) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.expandResources) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.outputResourceEdges) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.outputGroupEdges) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.analyzeServiceAccountImpersonation) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._executionTimeout) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.expandGroups != false {
      try visitor.visitSingularBoolField(value: self.expandGroups, fieldNumber: 1)
    }
    if self.expandRoles != false {
      try visitor.visitSingularBoolField(value: self.expandRoles, fieldNumber: 2)
    }
    if self.expandResources != false {
      try visitor.visitSingularBoolField(value: self.expandResources, fieldNumber: 3)
    }
    if self.outputResourceEdges != false {
      try visitor.visitSingularBoolField(value: self.outputResourceEdges, fieldNumber: 4)
    }
    if self.outputGroupEdges != false {
      try visitor.visitSingularBoolField(value: self.outputGroupEdges, fieldNumber: 5)
    }
    if self.analyzeServiceAccountImpersonation != false {
      try visitor.visitSingularBoolField(value: self.analyzeServiceAccountImpersonation, fieldNumber: 6)
    }
    if let v = self._executionTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.Options, rhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyRequest.Options) -> Bool {
    if lhs.expandGroups != rhs.expandGroups {return false}
    if lhs.expandRoles != rhs.expandRoles {return false}
    if lhs.expandResources != rhs.expandResources {return false}
    if lhs.outputResourceEdges != rhs.outputResourceEdges {return false}
    if lhs.outputGroupEdges != rhs.outputGroupEdges {return false}
    if lhs.analyzeServiceAccountImpersonation != rhs.analyzeServiceAccountImpersonation {return false}
    if lhs._executionTimeout != rhs._executionTimeout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnalyzeIamPolicyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "main_analysis"),
    2: .standard(proto: "service_account_impersonation_analysis"),
    3: .standard(proto: "fully_explored"),
    4: .standard(proto: "non_critical_errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._mainAnalysis) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.serviceAccountImpersonationAnalysis) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.fullyExplored) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.nonCriticalErrors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mainAnalysis {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.serviceAccountImpersonationAnalysis.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceAccountImpersonationAnalysis, fieldNumber: 2)
    }
    if self.fullyExplored != false {
      try visitor.visitSingularBoolField(value: self.fullyExplored, fieldNumber: 3)
    }
    if !self.nonCriticalErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonCriticalErrors, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse, rhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse) -> Bool {
    if lhs._mainAnalysis != rhs._mainAnalysis {return false}
    if lhs.serviceAccountImpersonationAnalysis != rhs.serviceAccountImpersonationAnalysis {return false}
    if lhs.fullyExplored != rhs.fullyExplored {return false}
    if lhs.nonCriticalErrors != rhs.nonCriticalErrors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.protoMessageName + ".IamPolicyAnalysis"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "analysis_query"),
    2: .standard(proto: "analysis_results"),
    3: .standard(proto: "fully_explored"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._analysisQuery) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.analysisResults) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.fullyExplored) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._analysisQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.analysisResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.analysisResults, fieldNumber: 2)
    }
    if self.fullyExplored != false {
      try visitor.visitSingularBoolField(value: self.fullyExplored, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis, rhs: Google_Cloud_Asset_V1p4beta1_AnalyzeIamPolicyResponse.IamPolicyAnalysis) -> Bool {
    if lhs._analysisQuery != rhs._analysisQuery {return false}
    if lhs.analysisResults != rhs.analysisResults {return false}
    if lhs.fullyExplored != rhs.fullyExplored {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPolicyAnalysisOutputConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination?
        if let current = self.destination {
          try decoder.handleConflictingOneOf()
          if case .gcsDestination(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.destination = .gcsDestination(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsDestination(let v)? = self.destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.protoMessageName + ".GcsDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination, rhs: Google_Cloud_Asset_V1p4beta1_IamPolicyAnalysisOutputConfig.GcsDestination) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportIamPolicyAnalysisRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "analysis_query"),
    2: .same(proto: "options"),
    3: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._analysisQuery) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._options) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._analysisQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._options {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest, rhs: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest) -> Bool {
    if lhs._analysisQuery != rhs._analysisQuery {return false}
    if lhs._options != rhs._options {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.Options: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.protoMessageName + ".Options"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "expand_groups"),
    2: .standard(proto: "expand_roles"),
    3: .standard(proto: "expand_resources"),
    4: .standard(proto: "output_resource_edges"),
    5: .standard(proto: "output_group_edges"),
    6: .standard(proto: "analyze_service_account_impersonation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.expandGroups) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.expandRoles) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.expandResources) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.outputResourceEdges) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.outputGroupEdges) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.analyzeServiceAccountImpersonation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.expandGroups != false {
      try visitor.visitSingularBoolField(value: self.expandGroups, fieldNumber: 1)
    }
    if self.expandRoles != false {
      try visitor.visitSingularBoolField(value: self.expandRoles, fieldNumber: 2)
    }
    if self.expandResources != false {
      try visitor.visitSingularBoolField(value: self.expandResources, fieldNumber: 3)
    }
    if self.outputResourceEdges != false {
      try visitor.visitSingularBoolField(value: self.outputResourceEdges, fieldNumber: 4)
    }
    if self.outputGroupEdges != false {
      try visitor.visitSingularBoolField(value: self.outputGroupEdges, fieldNumber: 5)
    }
    if self.analyzeServiceAccountImpersonation != false {
      try visitor.visitSingularBoolField(value: self.analyzeServiceAccountImpersonation, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.Options, rhs: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisRequest.Options) -> Bool {
    if lhs.expandGroups != rhs.expandGroups {return false}
    if lhs.expandRoles != rhs.expandRoles {return false}
    if lhs.expandResources != rhs.expandResources {return false}
    if lhs.outputResourceEdges != rhs.outputResourceEdges {return false}
    if lhs.outputGroupEdges != rhs.outputGroupEdges {return false}
    if lhs.analyzeServiceAccountImpersonation != rhs.analyzeServiceAccountImpersonation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportIamPolicyAnalysisResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisResponse, rhs: Google_Cloud_Asset_V1p4beta1_ExportIamPolicyAnalysisResponse) -> Bool {
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
