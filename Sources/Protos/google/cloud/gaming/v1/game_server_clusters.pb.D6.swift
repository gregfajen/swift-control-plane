// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/gaming/v1/game_server_clusters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for GameServerClustersService.ListGameServerClusters.
public struct Google_Cloud_Gaming_V1_ListGameServerClustersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource name. Uses the form:
  /// "projects/{project}/locations/{location}/realms/{realm}".
  public var parent: String = String()

  /// Optional. The maximum number of items to return.  If unspecified, the server
  /// will pick an appropriate default. The server may return fewer items than
  /// requested. A caller should only rely on response's
  /// [next_page_token][google.cloud.gaming.v1.ListGameServerClustersResponse.next_page_token] to
  /// determine if there are more GameServerClusters left to be queried.
  public var pageSize: Int32 = 0

  /// Optional. The next_page_token value returned from a previous List request, if any.
  public var pageToken: String = String()

  /// Optional. The filter to apply to list results.
  public var filter: String = String()

  /// Optional. Specifies the ordering of results following syntax at
  /// https://cloud.google.com/apis/design/design_patterns#sorting_order.
  public var orderBy: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for GameServerClustersService.ListGameServerClusters.
public struct Google_Cloud_Gaming_V1_ListGameServerClustersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of game server clusters.
  public var gameServerClusters: [Google_Cloud_Gaming_V1_GameServerCluster] = []

  /// Token to retrieve the next page of results, or empty if there are no more
  /// results in the list.
  public var nextPageToken: String = String()

  /// List of locations that could not be reached.
  public var unreachable: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for GameServerClustersService.GetGameServerCluster.
public struct Google_Cloud_Gaming_V1_GetGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the game server cluster to retrieve. Uses the form:
  ///
  /// `projects/{project}/locations/{location}/realms/{realm-id}/gameServerClusters/{cluster}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for GameServerClustersService.CreateGameServerCluster.
public struct Google_Cloud_Gaming_V1_CreateGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource name. Uses the form:
  /// `projects/{project}/locations/{location}/realms/{realm-id}`.
  public var parent: String = String()

  /// Required. The ID of the game server cluster resource to be created.
  public var gameServerClusterID: String = String()

  /// Required. The game server cluster resource to be created.
  public var gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster {
    get {return _gameServerCluster ?? Google_Cloud_Gaming_V1_GameServerCluster()}
    set {_gameServerCluster = newValue}
  }
  /// Returns true if `gameServerCluster` has been explicitly set.
  public var hasGameServerCluster: Bool {return self._gameServerCluster != nil}
  /// Clears the value of `gameServerCluster`. Subsequent reads from it will return its default value.
  public mutating func clearGameServerCluster() {self._gameServerCluster = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster? = nil
}

/// Request message for GameServerClustersService.PreviewCreateGameServerCluster.
public struct Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource name. Uses the form:
  /// `projects/{project}/locations/{location}/realms/{realm}`.
  public var parent: String = String()

  /// Required. The ID of the game server cluster resource to be created.
  public var gameServerClusterID: String = String()

  /// Required. The game server cluster resource to be created.
  public var gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster {
    get {return _gameServerCluster ?? Google_Cloud_Gaming_V1_GameServerCluster()}
    set {_gameServerCluster = newValue}
  }
  /// Returns true if `gameServerCluster` has been explicitly set.
  public var hasGameServerCluster: Bool {return self._gameServerCluster != nil}
  /// Clears the value of `gameServerCluster`. Subsequent reads from it will return its default value.
  public mutating func clearGameServerCluster() {self._gameServerCluster = nil}

  /// Optional. The target timestamp to compute the preview.
  public var previewTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _previewTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_previewTime = newValue}
  }
  /// Returns true if `previewTime` has been explicitly set.
  public var hasPreviewTime: Bool {return self._previewTime != nil}
  /// Clears the value of `previewTime`. Subsequent reads from it will return its default value.
  public mutating func clearPreviewTime() {self._previewTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster? = nil
  fileprivate var _previewTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response message for
/// GameServerClustersService.PreviewCreateGameServerCluster.
public struct Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ETag of the game server cluster.
  public var etag: String = String()

  /// The target state.
  public var targetState: Google_Cloud_Gaming_V1_TargetState {
    get {return _targetState ?? Google_Cloud_Gaming_V1_TargetState()}
    set {_targetState = newValue}
  }
  /// Returns true if `targetState` has been explicitly set.
  public var hasTargetState: Bool {return self._targetState != nil}
  /// Clears the value of `targetState`. Subsequent reads from it will return its default value.
  public mutating func clearTargetState() {self._targetState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _targetState: Google_Cloud_Gaming_V1_TargetState? = nil
}

/// Request message for GameServerClustersService.DeleteGameServerCluster.
public struct Google_Cloud_Gaming_V1_DeleteGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the game server cluster to delete. Uses the form:
  /// `projects/{project}/locations/{location}/gameServerClusters/{cluster}`.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for GameServerClustersService.PreviewDeleteGameServerCluster.
public struct Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the game server cluster to delete. Uses the form:
  /// `projects/{project}/locations/{location}/gameServerClusters/{cluster}`.
  public var name: String = String()

  /// Optional. The target timestamp to compute the preview.
  public var previewTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _previewTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_previewTime = newValue}
  }
  /// Returns true if `previewTime` has been explicitly set.
  public var hasPreviewTime: Bool {return self._previewTime != nil}
  /// Clears the value of `previewTime`. Subsequent reads from it will return its default value.
  public mutating func clearPreviewTime() {self._previewTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _previewTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response message for
/// GameServerClustersService.PreviewDeleteGameServerCluster.
public struct Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ETag of the game server cluster.
  public var etag: String = String()

  /// The target state.
  public var targetState: Google_Cloud_Gaming_V1_TargetState {
    get {return _targetState ?? Google_Cloud_Gaming_V1_TargetState()}
    set {_targetState = newValue}
  }
  /// Returns true if `targetState` has been explicitly set.
  public var hasTargetState: Bool {return self._targetState != nil}
  /// Clears the value of `targetState`. Subsequent reads from it will return its default value.
  public mutating func clearTargetState() {self._targetState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _targetState: Google_Cloud_Gaming_V1_TargetState? = nil
}

/// Request message for GameServerClustersService.UpdateGameServerCluster.
public struct Google_Cloud_Gaming_V1_UpdateGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The game server cluster to be updated.
  /// Only fields specified in update_mask are updated.
  public var gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster {
    get {return _gameServerCluster ?? Google_Cloud_Gaming_V1_GameServerCluster()}
    set {_gameServerCluster = newValue}
  }
  /// Returns true if `gameServerCluster` has been explicitly set.
  public var hasGameServerCluster: Bool {return self._gameServerCluster != nil}
  /// Clears the value of `gameServerCluster`. Subsequent reads from it will return its default value.
  public mutating func clearGameServerCluster() {self._gameServerCluster = nil}

  /// Required. Mask of fields to update. At least one path must be supplied in
  /// this field. For the `FieldMask` definition, see
  ///
  /// https:
  /// //developers.google.com/protocol-buffers
  /// // /docs/reference/google.protobuf#fieldmask
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Request message for GameServerClustersService.UpdateGameServerCluster.
public struct Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The game server cluster to be updated.
  /// Only fields specified in update_mask are updated.
  public var gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster {
    get {return _gameServerCluster ?? Google_Cloud_Gaming_V1_GameServerCluster()}
    set {_gameServerCluster = newValue}
  }
  /// Returns true if `gameServerCluster` has been explicitly set.
  public var hasGameServerCluster: Bool {return self._gameServerCluster != nil}
  /// Clears the value of `gameServerCluster`. Subsequent reads from it will return its default value.
  public mutating func clearGameServerCluster() {self._gameServerCluster = nil}

  /// Required. Mask of fields to update. At least one path must be supplied in
  /// this field. For the `FieldMask` definition, see
  ///
  /// https:
  /// //developers.google.com/protocol-buffers
  /// // /docs/reference/google.protobuf#fieldmask
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// Optional. The target timestamp to compute the preview.
  public var previewTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _previewTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_previewTime = newValue}
  }
  /// Returns true if `previewTime` has been explicitly set.
  public var hasPreviewTime: Bool {return self._previewTime != nil}
  /// Clears the value of `previewTime`. Subsequent reads from it will return its default value.
  public mutating func clearPreviewTime() {self._previewTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gameServerCluster: Google_Cloud_Gaming_V1_GameServerCluster? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _previewTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response message for GameServerClustersService.PreviewUpdateGameServerCluster
public struct Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ETag of the game server cluster.
  public var etag: String = String()

  /// The target state.
  public var targetState: Google_Cloud_Gaming_V1_TargetState {
    get {return _targetState ?? Google_Cloud_Gaming_V1_TargetState()}
    set {_targetState = newValue}
  }
  /// Returns true if `targetState` has been explicitly set.
  public var hasTargetState: Bool {return self._targetState != nil}
  /// Clears the value of `targetState`. Subsequent reads from it will return its default value.
  public mutating func clearTargetState() {self._targetState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _targetState: Google_Cloud_Gaming_V1_TargetState? = nil
}

/// The game server cluster connection information.
public struct Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The location of the Kubernetes cluster.
  public var clusterReference: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo.OneOf_ClusterReference? = nil

  /// Reference to the GKE cluster where the game servers are installed.
  public var gkeClusterReference: Google_Cloud_Gaming_V1_GkeClusterReference {
    get {
      if case .gkeClusterReference(let v)? = clusterReference {return v}
      return Google_Cloud_Gaming_V1_GkeClusterReference()
    }
    set {clusterReference = .gkeClusterReference(newValue)}
  }

  /// Namespace designated on the game server cluster where the Agones game
  /// server instances will be created. Existence of the namespace will be
  /// validated during creation.
  public var namespace: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The location of the Kubernetes cluster.
  public enum OneOf_ClusterReference: Equatable {
    /// Reference to the GKE cluster where the game servers are installed.
    case gkeClusterReference(Google_Cloud_Gaming_V1_GkeClusterReference)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo.OneOf_ClusterReference, rhs: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo.OneOf_ClusterReference) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.gkeClusterReference, .gkeClusterReference): return {
        guard case .gkeClusterReference(let l) = lhs, case .gkeClusterReference(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// A reference to a GKE cluster.
public struct Google_Cloud_Gaming_V1_GkeClusterReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The full or partial name of a GKE cluster, using one of the following
  /// forms:
  ///  * `projects/{project}/locations/{location}/clusters/{cluster}`
  ///  * `locations/{location}/clusters/{cluster}`
  ///  * `{cluster}`
  /// If project and location are not specified, the project and location of the
  /// GameServerCluster resource are used to generate the full name of the
  /// GKE cluster.
  public var cluster: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A game server cluster resource.
public struct Google_Cloud_Gaming_V1_GameServerCluster {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the game server cluster. Uses the form:
  ///
  /// `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`.
  /// For example,
  ///
  /// `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
  public var name: String = String()

  /// Output only. The creation time.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. The last-modified time.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// The labels associated with this game server cluster. Each label is a
  /// key-value pair.
  public var labels: Dictionary<String,String> = [:]

  /// The game server cluster connection information. This information is used to
  /// manage game server clusters.
  public var connectionInfo: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo {
    get {return _connectionInfo ?? Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo()}
    set {_connectionInfo = newValue}
  }
  /// Returns true if `connectionInfo` has been explicitly set.
  public var hasConnectionInfo: Bool {return self._connectionInfo != nil}
  /// Clears the value of `connectionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearConnectionInfo() {self._connectionInfo = nil}

  /// ETag of the resource.
  public var etag: String = String()

  /// Human readable description of the cluster.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _connectionInfo: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.gaming.v1"

extension Google_Cloud_Gaming_V1_ListGameServerClustersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGameServerClustersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
    5: .standard(proto: "order_by"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.orderBy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    if !self.orderBy.isEmpty {
      try visitor.visitSingularStringField(value: self.orderBy, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_ListGameServerClustersRequest, rhs: Google_Cloud_Gaming_V1_ListGameServerClustersRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.orderBy != rhs.orderBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_ListGameServerClustersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGameServerClustersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_server_clusters"),
    2: .standard(proto: "next_page_token"),
    4: .same(proto: "unreachable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.gameServerClusters) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.unreachable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameServerClusters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameServerClusters, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if !self.unreachable.isEmpty {
      try visitor.visitRepeatedStringField(value: self.unreachable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_ListGameServerClustersResponse, rhs: Google_Cloud_Gaming_V1_ListGameServerClustersResponse) -> Bool {
    if lhs.gameServerClusters != rhs.gameServerClusters {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unreachable != rhs.unreachable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_GetGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_GetGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_GetGameServerClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_CreateGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "game_server_cluster_id"),
    3: .standard(proto: "game_server_cluster"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gameServerClusterID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._gameServerCluster) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.gameServerClusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.gameServerClusterID, fieldNumber: 2)
    }
    if let v = self._gameServerCluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_CreateGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_CreateGameServerClusterRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.gameServerClusterID != rhs.gameServerClusterID {return false}
    if lhs._gameServerCluster != rhs._gameServerCluster {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreviewCreateGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "game_server_cluster_id"),
    3: .standard(proto: "game_server_cluster"),
    4: .standard(proto: "preview_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gameServerClusterID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._gameServerCluster) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._previewTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.gameServerClusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.gameServerClusterID, fieldNumber: 2)
    }
    if let v = self._gameServerCluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._previewTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.gameServerClusterID != rhs.gameServerClusterID {return false}
    if lhs._gameServerCluster != rhs._gameServerCluster {return false}
    if lhs._previewTime != rhs._previewTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreviewCreateGameServerClusterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "etag"),
    3: .standard(proto: "target_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._targetState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 2)
    }
    if let v = self._targetState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterResponse, rhs: Google_Cloud_Gaming_V1_PreviewCreateGameServerClusterResponse) -> Bool {
    if lhs.etag != rhs.etag {return false}
    if lhs._targetState != rhs._targetState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_DeleteGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_DeleteGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_DeleteGameServerClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreviewDeleteGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "preview_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._previewTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._previewTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._previewTime != rhs._previewTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreviewDeleteGameServerClusterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "etag"),
    3: .standard(proto: "target_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._targetState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 2)
    }
    if let v = self._targetState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterResponse, rhs: Google_Cloud_Gaming_V1_PreviewDeleteGameServerClusterResponse) -> Bool {
    if lhs.etag != rhs.etag {return false}
    if lhs._targetState != rhs._targetState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_UpdateGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_server_cluster"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gameServerCluster) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._gameServerCluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_UpdateGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_UpdateGameServerClusterRequest) -> Bool {
    if lhs._gameServerCluster != rhs._gameServerCluster {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreviewUpdateGameServerClusterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_server_cluster"),
    2: .standard(proto: "update_mask"),
    3: .standard(proto: "preview_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gameServerCluster) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._previewTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._gameServerCluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._previewTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterRequest, rhs: Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterRequest) -> Bool {
    if lhs._gameServerCluster != rhs._gameServerCluster {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs._previewTime != rhs._previewTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreviewUpdateGameServerClusterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "etag"),
    3: .standard(proto: "target_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._targetState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 2)
    }
    if let v = self._targetState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterResponse, rhs: Google_Cloud_Gaming_V1_PreviewUpdateGameServerClusterResponse) -> Bool {
    if lhs.etag != rhs.etag {return false}
    if lhs._targetState != rhs._targetState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameServerClusterConnectionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "gke_cluster_reference"),
    5: .same(proto: "namespace"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 7: try {
        var v: Google_Cloud_Gaming_V1_GkeClusterReference?
        if let current = self.clusterReference {
          try decoder.handleConflictingOneOf()
          if case .gkeClusterReference(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.clusterReference = .gkeClusterReference(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 5)
    }
    if case .gkeClusterReference(let v)? = self.clusterReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo, rhs: Google_Cloud_Gaming_V1_GameServerClusterConnectionInfo) -> Bool {
    if lhs.clusterReference != rhs.clusterReference {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_GkeClusterReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GkeClusterReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cluster"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cluster) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cluster.isEmpty {
      try visitor.visitSingularStringField(value: self.cluster, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_GkeClusterReference, rhs: Google_Cloud_Gaming_V1_GkeClusterReference) -> Bool {
    if lhs.cluster != rhs.cluster {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Gaming_V1_GameServerCluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameServerCluster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "update_time"),
    4: .same(proto: "labels"),
    5: .standard(proto: "connection_info"),
    6: .same(proto: "etag"),
    7: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._connectionInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 4)
    }
    if let v = self._connectionInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 6)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Gaming_V1_GameServerCluster, rhs: Google_Cloud_Gaming_V1_GameServerCluster) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._connectionInfo != rhs._connectionInfo {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
