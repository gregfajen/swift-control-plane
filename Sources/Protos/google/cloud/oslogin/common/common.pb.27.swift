// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/oslogin/common/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The operating system options for account entries.
public enum Google_Cloud_Oslogin_Common_OperatingSystemType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The operating system type associated with the user account information is
  /// unspecified.
  case unspecified // = 0

  /// Linux user account information.
  case linux // = 1

  /// Windows user account information.
  case windows // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .linux
    case 2: self = .windows
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .linux: return 1
    case .windows: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Oslogin_Common_OperatingSystemType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Oslogin_Common_OperatingSystemType] = [
    .unspecified,
    .linux,
    .windows,
  ]
}

#endif  // swift(>=4.2)

/// The POSIX account information associated with a Google account.
public struct Google_Cloud_Oslogin_Common_PosixAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Only one POSIX account can be marked as primary.
  public var primary: Bool = false

  /// The username of the POSIX account.
  public var username: String = String()

  /// The user ID.
  public var uid: Int64 = 0

  /// The default group ID.
  public var gid: Int64 = 0

  /// The path to the home directory for this account.
  public var homeDirectory: String = String()

  /// The path to the logic shell for this account.
  public var shell: String = String()

  /// The GECOS (user information) entry for this account.
  public var gecos: String = String()

  /// System identifier for which account the username or uid applies to.
  /// By default, the empty value is used.
  public var systemID: String = String()

  /// Output only. A POSIX account identifier.
  public var accountID: String = String()

  /// The operating system type where this account applies.
  public var operatingSystemType: Google_Cloud_Oslogin_Common_OperatingSystemType = .unspecified

  /// Output only. The canonical resource name.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The SSH public key information associated with a Google account.
public struct Google_Cloud_Oslogin_Common_SshPublicKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Public key text in SSH format, defined by
  /// <a href="https://www.ietf.org/rfc/rfc4253.txt" target="_blank">RFC4253</a>
  /// section 6.6.
  public var key: String = String()

  /// An expiration time in microseconds since epoch.
  public var expirationTimeUsec: Int64 = 0

  /// Output only. The SHA-256 fingerprint of the SSH public key.
  public var fingerprint: String = String()

  /// Output only. The canonical resource name.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.oslogin.common"

extension Google_Cloud_Oslogin_Common_OperatingSystemType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATING_SYSTEM_TYPE_UNSPECIFIED"),
    1: .same(proto: "LINUX"),
    2: .same(proto: "WINDOWS"),
  ]
}

extension Google_Cloud_Oslogin_Common_PosixAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PosixAccount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "primary"),
    2: .same(proto: "username"),
    3: .same(proto: "uid"),
    4: .same(proto: "gid"),
    5: .standard(proto: "home_directory"),
    6: .same(proto: "shell"),
    7: .same(proto: "gecos"),
    8: .standard(proto: "system_id"),
    9: .standard(proto: "account_id"),
    10: .standard(proto: "operating_system_type"),
    11: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.primary) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.gid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.homeDirectory) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.shell) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.gecos) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.systemID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.operatingSystemType) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.primary != false {
      try visitor.visitSingularBoolField(value: self.primary, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 3)
    }
    if self.gid != 0 {
      try visitor.visitSingularInt64Field(value: self.gid, fieldNumber: 4)
    }
    if !self.homeDirectory.isEmpty {
      try visitor.visitSingularStringField(value: self.homeDirectory, fieldNumber: 5)
    }
    if !self.shell.isEmpty {
      try visitor.visitSingularStringField(value: self.shell, fieldNumber: 6)
    }
    if !self.gecos.isEmpty {
      try visitor.visitSingularStringField(value: self.gecos, fieldNumber: 7)
    }
    if !self.systemID.isEmpty {
      try visitor.visitSingularStringField(value: self.systemID, fieldNumber: 8)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 9)
    }
    if self.operatingSystemType != .unspecified {
      try visitor.visitSingularEnumField(value: self.operatingSystemType, fieldNumber: 10)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Oslogin_Common_PosixAccount, rhs: Google_Cloud_Oslogin_Common_PosixAccount) -> Bool {
    if lhs.primary != rhs.primary {return false}
    if lhs.username != rhs.username {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.gid != rhs.gid {return false}
    if lhs.homeDirectory != rhs.homeDirectory {return false}
    if lhs.shell != rhs.shell {return false}
    if lhs.gecos != rhs.gecos {return false}
    if lhs.systemID != rhs.systemID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.operatingSystemType != rhs.operatingSystemType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Oslogin_Common_SshPublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SshPublicKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "expiration_time_usec"),
    3: .same(proto: "fingerprint"),
    4: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.expirationTimeUsec) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fingerprint) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.expirationTimeUsec != 0 {
      try visitor.visitSingularInt64Field(value: self.expirationTimeUsec, fieldNumber: 2)
    }
    if !self.fingerprint.isEmpty {
      try visitor.visitSingularStringField(value: self.fingerprint, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Oslogin_Common_SshPublicKey, rhs: Google_Cloud_Oslogin_Common_SshPublicKey) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.expirationTimeUsec != rhs.expirationTimeUsec {return false}
    if lhs.fingerprint != rhs.fingerprint {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
