// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/websecurityscanner/v1alpha/finding.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Finding resource represents a vulnerability instance identified during a
/// ScanRun.
public struct Google_Cloud_Websecurityscanner_V1alpha_Finding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the Finding. The name follows the format of
  /// 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'.
  /// The finding IDs are generated by the system.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// The type of the Finding.
  public var findingType: Google_Cloud_Websecurityscanner_V1alpha_Finding.FindingType {
    get {return _storage._findingType}
    set {_uniqueStorage()._findingType = newValue}
  }

  /// The http method of the request that triggered the vulnerability, in
  /// uppercase.
  public var httpMethod: String {
    get {return _storage._httpMethod}
    set {_uniqueStorage()._httpMethod = newValue}
  }

  /// The URL produced by the server-side fuzzer and used in the request that
  /// triggered the vulnerability.
  public var fuzzedURL: String {
    get {return _storage._fuzzedURL}
    set {_uniqueStorage()._fuzzedURL = newValue}
  }

  /// The body of the request that triggered the vulnerability.
  public var body: String {
    get {return _storage._body}
    set {_uniqueStorage()._body = newValue}
  }

  /// The description of the vulnerability.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The URL containing human-readable payload that user can leverage to
  /// reproduce the vulnerability.
  public var reproductionURL: String {
    get {return _storage._reproductionURL}
    set {_uniqueStorage()._reproductionURL = newValue}
  }

  /// If the vulnerability was originated from nested IFrame, the immediate
  /// parent IFrame is reported.
  public var frameURL: String {
    get {return _storage._frameURL}
    set {_uniqueStorage()._frameURL = newValue}
  }

  /// The URL where the browser lands when the vulnerability is detected.
  public var finalURL: String {
    get {return _storage._finalURL}
    set {_uniqueStorage()._finalURL = newValue}
  }

  /// The tracking ID uniquely identifies a vulnerability instance across
  /// multiple ScanRuns.
  public var trackingID: String {
    get {return _storage._trackingID}
    set {_uniqueStorage()._trackingID = newValue}
  }

  /// An addon containing information about outdated libraries.
  public var outdatedLibrary: Google_Cloud_Websecurityscanner_V1alpha_OutdatedLibrary {
    get {return _storage._outdatedLibrary ?? Google_Cloud_Websecurityscanner_V1alpha_OutdatedLibrary()}
    set {_uniqueStorage()._outdatedLibrary = newValue}
  }
  /// Returns true if `outdatedLibrary` has been explicitly set.
  public var hasOutdatedLibrary: Bool {return _storage._outdatedLibrary != nil}
  /// Clears the value of `outdatedLibrary`. Subsequent reads from it will return its default value.
  public mutating func clearOutdatedLibrary() {_uniqueStorage()._outdatedLibrary = nil}

  /// An addon containing detailed information regarding any resource causing the
  /// vulnerability such as JavaScript sources, image, audio files, etc.
  public var violatingResource: Google_Cloud_Websecurityscanner_V1alpha_ViolatingResource {
    get {return _storage._violatingResource ?? Google_Cloud_Websecurityscanner_V1alpha_ViolatingResource()}
    set {_uniqueStorage()._violatingResource = newValue}
  }
  /// Returns true if `violatingResource` has been explicitly set.
  public var hasViolatingResource: Bool {return _storage._violatingResource != nil}
  /// Clears the value of `violatingResource`. Subsequent reads from it will return its default value.
  public mutating func clearViolatingResource() {_uniqueStorage()._violatingResource = nil}

  /// An addon containing information about vulnerable or missing HTTP headers.
  public var vulnerableHeaders: Google_Cloud_Websecurityscanner_V1alpha_VulnerableHeaders {
    get {return _storage._vulnerableHeaders ?? Google_Cloud_Websecurityscanner_V1alpha_VulnerableHeaders()}
    set {_uniqueStorage()._vulnerableHeaders = newValue}
  }
  /// Returns true if `vulnerableHeaders` has been explicitly set.
  public var hasVulnerableHeaders: Bool {return _storage._vulnerableHeaders != nil}
  /// Clears the value of `vulnerableHeaders`. Subsequent reads from it will return its default value.
  public mutating func clearVulnerableHeaders() {_uniqueStorage()._vulnerableHeaders = nil}

  /// An addon containing information about request parameters which were found
  /// to be vulnerable.
  public var vulnerableParameters: Google_Cloud_Websecurityscanner_V1alpha_VulnerableParameters {
    get {return _storage._vulnerableParameters ?? Google_Cloud_Websecurityscanner_V1alpha_VulnerableParameters()}
    set {_uniqueStorage()._vulnerableParameters = newValue}
  }
  /// Returns true if `vulnerableParameters` has been explicitly set.
  public var hasVulnerableParameters: Bool {return _storage._vulnerableParameters != nil}
  /// Clears the value of `vulnerableParameters`. Subsequent reads from it will return its default value.
  public mutating func clearVulnerableParameters() {_uniqueStorage()._vulnerableParameters = nil}

  /// An addon containing information reported for an XSS, if any.
  public var xss: Google_Cloud_Websecurityscanner_V1alpha_Xss {
    get {return _storage._xss ?? Google_Cloud_Websecurityscanner_V1alpha_Xss()}
    set {_uniqueStorage()._xss = newValue}
  }
  /// Returns true if `xss` has been explicitly set.
  public var hasXss: Bool {return _storage._xss != nil}
  /// Clears the value of `xss`. Subsequent reads from it will return its default value.
  public mutating func clearXss() {_uniqueStorage()._xss = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Types of Findings.
  public enum FindingType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The invalid finding type.
    case unspecified // = 0

    /// A page that was served over HTTPS also resources over HTTP. A
    /// man-in-the-middle attacker could tamper with the HTTP resource and gain
    /// full access to the website that loads the resource or to monitor the
    /// actions taken by the user.
    case mixedContent // = 1

    /// The version of an included library is known to contain a security issue.
    /// The scanner checks the version of library in use against a known list of
    /// vulnerable libraries. False positives are possible if the version
    /// detection fails or if the library has been manually patched.
    case outdatedLibrary // = 2

    /// This type of vulnerability occurs when the value of a request parameter
    /// is reflected at the beginning of the response, for example, in requests
    /// using JSONP. Under certain circumstances, an attacker may be able to
    /// supply an alphanumeric-only Flash file in the vulnerable parameter
    /// causing the browser to execute the Flash file as if it originated on the
    /// vulnerable server.
    case rosettaFlash // = 5

    /// A cross-site scripting (XSS) bug is found via JavaScript callback. For
    /// detailed explanations on XSS, see
    /// https://www.google.com/about/appsecurity/learning/xss/.
    case xssCallback // = 3

    /// A potential cross-site scripting (XSS) bug due to JavaScript breakage.
    /// In some circumstances, the application under test might modify the test
    /// string before it is parsed by the browser. When the browser attempts to
    /// runs this modified test string, it will likely break and throw a
    /// JavaScript execution error, thus an injection issue is occurring.
    /// However, it may not be exploitable. Manual verification is needed to see
    /// if the test string modifications can be evaded and confirm that the issue
    /// is in fact an XSS vulnerability. For detailed explanations on XSS, see
    /// https://www.google.com/about/appsecurity/learning/xss/.
    case xssError // = 4

    /// An application appears to be transmitting a password field in clear text.
    /// An attacker can eavesdrop network traffic and sniff the password field.
    case clearTextPassword // = 6

    /// An application returns sensitive content with an invalid content type,
    /// or without an 'X-Content-Type-Options: nosniff' header.
    case invalidContentType // = 7

    /// A cross-site scripting (XSS) vulnerability in AngularJS module that
    /// occurs when a user-provided string is interpolated by Angular.
    case xssAngularCallback // = 8

    /// A malformed or invalid valued header.
    case invalidHeader // = 9

    /// Misspelled security header name.
    case misspelledSecurityHeaderName // = 10

    /// Mismatching values in a duplicate security header.
    case mismatchingSecurityHeaderValues // = 11
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .mixedContent
      case 2: self = .outdatedLibrary
      case 3: self = .xssCallback
      case 4: self = .xssError
      case 5: self = .rosettaFlash
      case 6: self = .clearTextPassword
      case 7: self = .invalidContentType
      case 8: self = .xssAngularCallback
      case 9: self = .invalidHeader
      case 10: self = .misspelledSecurityHeaderName
      case 11: self = .mismatchingSecurityHeaderValues
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .mixedContent: return 1
      case .outdatedLibrary: return 2
      case .xssCallback: return 3
      case .xssError: return 4
      case .rosettaFlash: return 5
      case .clearTextPassword: return 6
      case .invalidContentType: return 7
      case .xssAngularCallback: return 8
      case .invalidHeader: return 9
      case .misspelledSecurityHeaderName: return 10
      case .mismatchingSecurityHeaderValues: return 11
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Websecurityscanner_V1alpha_Finding.FindingType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Websecurityscanner_V1alpha_Finding.FindingType] = [
    .unspecified,
    .mixedContent,
    .outdatedLibrary,
    .rosettaFlash,
    .xssCallback,
    .xssError,
    .clearTextPassword,
    .invalidContentType,
    .xssAngularCallback,
    .invalidHeader,
    .misspelledSecurityHeaderName,
    .mismatchingSecurityHeaderValues,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.websecurityscanner.v1alpha"

extension Google_Cloud_Websecurityscanner_V1alpha_Finding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Finding"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "finding_type"),
    3: .standard(proto: "http_method"),
    4: .standard(proto: "fuzzed_url"),
    5: .same(proto: "body"),
    6: .same(proto: "description"),
    7: .standard(proto: "reproduction_url"),
    8: .standard(proto: "frame_url"),
    9: .standard(proto: "final_url"),
    10: .standard(proto: "tracking_id"),
    11: .standard(proto: "outdated_library"),
    12: .standard(proto: "violating_resource"),
    15: .standard(proto: "vulnerable_headers"),
    13: .standard(proto: "vulnerable_parameters"),
    14: .same(proto: "xss"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _findingType: Google_Cloud_Websecurityscanner_V1alpha_Finding.FindingType = .unspecified
    var _httpMethod: String = String()
    var _fuzzedURL: String = String()
    var _body: String = String()
    var _description_p: String = String()
    var _reproductionURL: String = String()
    var _frameURL: String = String()
    var _finalURL: String = String()
    var _trackingID: String = String()
    var _outdatedLibrary: Google_Cloud_Websecurityscanner_V1alpha_OutdatedLibrary? = nil
    var _violatingResource: Google_Cloud_Websecurityscanner_V1alpha_ViolatingResource? = nil
    var _vulnerableHeaders: Google_Cloud_Websecurityscanner_V1alpha_VulnerableHeaders? = nil
    var _vulnerableParameters: Google_Cloud_Websecurityscanner_V1alpha_VulnerableParameters? = nil
    var _xss: Google_Cloud_Websecurityscanner_V1alpha_Xss? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _findingType = source._findingType
      _httpMethod = source._httpMethod
      _fuzzedURL = source._fuzzedURL
      _body = source._body
      _description_p = source._description_p
      _reproductionURL = source._reproductionURL
      _frameURL = source._frameURL
      _finalURL = source._finalURL
      _trackingID = source._trackingID
      _outdatedLibrary = source._outdatedLibrary
      _violatingResource = source._violatingResource
      _vulnerableHeaders = source._vulnerableHeaders
      _vulnerableParameters = source._vulnerableParameters
      _xss = source._xss
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._findingType) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._httpMethod) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._fuzzedURL) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._body) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._reproductionURL) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._frameURL) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._finalURL) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._trackingID) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._outdatedLibrary) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._violatingResource) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._vulnerableParameters) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._xss) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._vulnerableHeaders) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if _storage._findingType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._findingType, fieldNumber: 2)
      }
      if !_storage._httpMethod.isEmpty {
        try visitor.visitSingularStringField(value: _storage._httpMethod, fieldNumber: 3)
      }
      if !_storage._fuzzedURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fuzzedURL, fieldNumber: 4)
      }
      if !_storage._body.isEmpty {
        try visitor.visitSingularStringField(value: _storage._body, fieldNumber: 5)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
      }
      if !_storage._reproductionURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reproductionURL, fieldNumber: 7)
      }
      if !_storage._frameURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._frameURL, fieldNumber: 8)
      }
      if !_storage._finalURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._finalURL, fieldNumber: 9)
      }
      if !_storage._trackingID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._trackingID, fieldNumber: 10)
      }
      if let v = _storage._outdatedLibrary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._violatingResource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._vulnerableParameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._xss {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._vulnerableHeaders {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Websecurityscanner_V1alpha_Finding, rhs: Google_Cloud_Websecurityscanner_V1alpha_Finding) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._findingType != rhs_storage._findingType {return false}
        if _storage._httpMethod != rhs_storage._httpMethod {return false}
        if _storage._fuzzedURL != rhs_storage._fuzzedURL {return false}
        if _storage._body != rhs_storage._body {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._reproductionURL != rhs_storage._reproductionURL {return false}
        if _storage._frameURL != rhs_storage._frameURL {return false}
        if _storage._finalURL != rhs_storage._finalURL {return false}
        if _storage._trackingID != rhs_storage._trackingID {return false}
        if _storage._outdatedLibrary != rhs_storage._outdatedLibrary {return false}
        if _storage._violatingResource != rhs_storage._violatingResource {return false}
        if _storage._vulnerableHeaders != rhs_storage._vulnerableHeaders {return false}
        if _storage._vulnerableParameters != rhs_storage._vulnerableParameters {return false}
        if _storage._xss != rhs_storage._xss {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Websecurityscanner_V1alpha_Finding.FindingType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FINDING_TYPE_UNSPECIFIED"),
    1: .same(proto: "MIXED_CONTENT"),
    2: .same(proto: "OUTDATED_LIBRARY"),
    3: .same(proto: "XSS_CALLBACK"),
    4: .same(proto: "XSS_ERROR"),
    5: .same(proto: "ROSETTA_FLASH"),
    6: .same(proto: "CLEAR_TEXT_PASSWORD"),
    7: .same(proto: "INVALID_CONTENT_TYPE"),
    8: .same(proto: "XSS_ANGULAR_CALLBACK"),
    9: .same(proto: "INVALID_HEADER"),
    10: .same(proto: "MISSPELLED_SECURITY_HEADER_NAME"),
    11: .same(proto: "MISMATCHING_SECURITY_HEADER_VALUES"),
  ]
}
