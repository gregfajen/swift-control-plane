// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/websecurityscanner/v1alpha/scan_run.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A ScanRun is a output-only resource representing an actual run of the scan.
public struct Google_Cloud_Websecurityscanner_V1alpha_ScanRun {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the ScanRun. The name follows the format of
  /// 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
  /// The ScanRun IDs are generated by the system.
  public var name: String = String()

  /// The execution state of the ScanRun.
  public var executionState: Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ExecutionState = .unspecified

  /// The result state of the ScanRun. This field is only available after the
  /// execution state reaches "FINISHED".
  public var resultState: Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ResultState = .unspecified

  /// The time at which the ScanRun started.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// The time at which the ScanRun reached termination state - that the ScanRun
  /// is either finished or stopped by user.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// The number of URLs crawled during this ScanRun. If the scan is in progress,
  /// the value represents the number of URLs crawled up to now.
  public var urlsCrawledCount: Int64 = 0

  /// The number of URLs tested during this ScanRun. If the scan is in progress,
  /// the value represents the number of URLs tested up to now. The number of
  /// URLs tested is usually larger than the number URLS crawled because
  /// typically a crawled URL is tested with multiple test payloads.
  public var urlsTestedCount: Int64 = 0

  /// Whether the scan run has found any vulnerabilities.
  public var hasVulnerabilities_p: Bool = false

  /// The percentage of total completion ranging from 0 to 100.
  /// If the scan is in queue, the value is 0.
  /// If the scan is running, the value ranges from 0 to 100.
  /// If the scan is finished, the value is 100.
  public var progressPercent: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Types of ScanRun execution state.
  public enum ExecutionState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Represents an invalid state caused by internal server error. This value
    /// should never be returned.
    case unspecified // = 0

    /// The scan is waiting in the queue.
    case queued // = 1

    /// The scan is in progress.
    case scanning // = 2

    /// The scan is either finished or stopped by user.
    case finished // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .queued
      case 2: self = .scanning
      case 3: self = .finished
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .queued: return 1
      case .scanning: return 2
      case .finished: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Types of ScanRun result state.
  public enum ResultState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Default value. This value is returned when the ScanRun is not yet
    /// finished.
    case unspecified // = 0

    /// The scan finished without errors.
    case success // = 1

    /// The scan finished with errors.
    case error // = 2

    /// The scan was terminated by user.
    case killed // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .success
      case 2: self = .error
      case 3: self = .killed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .success: return 1
      case .error: return 2
      case .killed: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ExecutionState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ExecutionState] = [
    .unspecified,
    .queued,
    .scanning,
    .finished,
  ]
}

extension Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ResultState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ResultState] = [
    .unspecified,
    .success,
    .error,
    .killed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.websecurityscanner.v1alpha"

extension Google_Cloud_Websecurityscanner_V1alpha_ScanRun: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScanRun"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "execution_state"),
    3: .standard(proto: "result_state"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    6: .standard(proto: "urls_crawled_count"),
    7: .standard(proto: "urls_tested_count"),
    8: .standard(proto: "has_vulnerabilities"),
    9: .standard(proto: "progress_percent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.executionState) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.resultState) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.urlsCrawledCount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.urlsTestedCount) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.hasVulnerabilities_p) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.progressPercent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.executionState != .unspecified {
      try visitor.visitSingularEnumField(value: self.executionState, fieldNumber: 2)
    }
    if self.resultState != .unspecified {
      try visitor.visitSingularEnumField(value: self.resultState, fieldNumber: 3)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.urlsCrawledCount != 0 {
      try visitor.visitSingularInt64Field(value: self.urlsCrawledCount, fieldNumber: 6)
    }
    if self.urlsTestedCount != 0 {
      try visitor.visitSingularInt64Field(value: self.urlsTestedCount, fieldNumber: 7)
    }
    if self.hasVulnerabilities_p != false {
      try visitor.visitSingularBoolField(value: self.hasVulnerabilities_p, fieldNumber: 8)
    }
    if self.progressPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.progressPercent, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Websecurityscanner_V1alpha_ScanRun, rhs: Google_Cloud_Websecurityscanner_V1alpha_ScanRun) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.executionState != rhs.executionState {return false}
    if lhs.resultState != rhs.resultState {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.urlsCrawledCount != rhs.urlsCrawledCount {return false}
    if lhs.urlsTestedCount != rhs.urlsTestedCount {return false}
    if lhs.hasVulnerabilities_p != rhs.hasVulnerabilities_p {return false}
    if lhs.progressPercent != rhs.progressPercent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ExecutionState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXECUTION_STATE_UNSPECIFIED"),
    1: .same(proto: "QUEUED"),
    2: .same(proto: "SCANNING"),
    3: .same(proto: "FINISHED"),
  ]
}

extension Google_Cloud_Websecurityscanner_V1alpha_ScanRun.ResultState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_STATE_UNSPECIFIED"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR"),
    3: .same(proto: "KILLED"),
  ]
}
