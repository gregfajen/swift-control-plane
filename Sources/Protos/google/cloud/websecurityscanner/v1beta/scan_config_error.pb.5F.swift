// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/websecurityscanner/v1beta/scan_config_error.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Defines a custom error message used by CreateScanConfig and UpdateScanConfig
/// APIs when scan configuration validation fails. It is also reported as part of
/// a ScanRunErrorTrace message if scan validation fails due to a scan
/// configuration error.
public struct Google_Cloud_Websecurityscanner_V1beta_ScanConfigError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates the reason code for a configuration failure.
  public var code: Google_Cloud_Websecurityscanner_V1beta_ScanConfigError.Code = .unspecified

  /// Indicates the full name of the ScanConfig field that triggers this error,
  /// for example "scan_config.max_qps". This field is provided for
  /// troubleshooting purposes only and its actual value can change in the
  /// future.
  public var fieldName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Output only.
  /// Defines an error reason code.
  /// Next id: 44
  public enum Code: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// There is no error.
    case unspecified // = 0

    /// There is no error.
    public static let ok = unspecified

    /// Indicates an internal server error.
    /// Please DO NOT USE THIS ERROR CODE unless the root cause is truly unknown.
    case internalError // = 1

    /// One of the seed URLs is an App Engine URL but we cannot validate the scan
    /// settings due to an App Engine API backend error.
    case appengineApiBackendError // = 2

    /// One of the seed URLs is an App Engine URL but we cannot access the
    /// App Engine API to validate scan settings.
    case appengineApiNotAccessible // = 3

    /// One of the seed URLs is an App Engine URL but the Default Host of the
    /// App Engine is not set.
    case appengineDefaultHostMissing // = 4

    /// Google corporate accounts can not be used for scanning.
    case cannotUseGoogleComAccount // = 6

    /// The account of the scan creator can not be used for scanning.
    case cannotUseOwnerAccount // = 7

    /// This scan targets Compute Engine, but we cannot validate scan settings
    /// due to a Compute Engine API backend error.
    case computeApiBackendError // = 8

    /// This scan targets Compute Engine, but we cannot access the Compute Engine
    /// API to validate the scan settings.
    case computeApiNotAccessible // = 9

    /// The Custom Login URL does not belong to the current project.
    case customLoginURLDoesNotBelongToCurrentProject // = 10

    /// The Custom Login URL is malformed (can not be parsed).
    case customLoginURLMalformed // = 11

    /// The Custom Login URL is mapped to a non-routable IP address in DNS.
    case customLoginURLMappedToNonRoutableAddress // = 12

    /// The Custom Login URL is mapped to an IP address which is not reserved for
    /// the current project.
    case customLoginURLMappedToUnreservedAddress // = 13

    /// The Custom Login URL has a non-routable IP address.
    case customLoginURLHasNonRoutableIpAddress // = 14

    /// The Custom Login URL has an IP address which is not reserved for the
    /// current project.
    case customLoginURLHasUnreservedIpAddress // = 15

    /// Another scan with the same name (case-sensitive) already exists.
    case duplicateScanName // = 16

    /// A field is set to an invalid value.
    case invalidFieldValue // = 18

    /// There was an error trying to authenticate to the scan target.
    case failedToAuthenticateToTarget // = 19

    /// Finding type value is not specified in the list findings request.
    case findingTypeUnspecified // = 20

    /// Scan targets Compute Engine, yet current project was not whitelisted for
    /// Google Compute Engine Scanning Alpha access.
    case forbiddenToScanCompute // = 21

    /// User tries to update managed scan
    case forbiddenUpdateToManagedScan // = 43

    /// The supplied filter is malformed. For example, it can not be parsed, does
    /// not have a filter type in expression, or the same filter type appears
    /// more than once.
    case malformedFilter // = 22

    /// The supplied resource name is malformed (can not be parsed).
    case malformedResourceName // = 23

    /// The current project is not in an active state.
    case projectInactive // = 24

    /// A required field is not set.
    case requiredField // = 25

    /// Project id, scanconfig id, scanrun id, or finding id are not consistent
    /// with each other in resource name.
    case resourceNameInconsistent // = 26

    /// The scan being requested to start is already running.
    case scanAlreadyRunning // = 27

    /// The scan that was requested to be stopped is not running.
    case scanNotRunning // = 28

    /// One of the seed URLs does not belong to the current project.
    case seedURLDoesNotBelongToCurrentProject // = 29

    /// One of the seed URLs is malformed (can not be parsed).
    case seedURLMalformed // = 30

    /// One of the seed URLs is mapped to a non-routable IP address in DNS.
    case seedURLMappedToNonRoutableAddress // = 31

    /// One of the seed URLs is mapped to an IP address which is not reserved
    /// for the current project.
    case seedURLMappedToUnreservedAddress // = 32

    /// One of the seed URLs has on-routable IP address.
    case seedURLHasNonRoutableIpAddress // = 33

    /// One of the seed URLs has an IP address that is not reserved
    /// for the current project.
    case seedURLHasUnreservedIpAddress // = 35

    /// The Cloud Security Scanner service account is not configured under the
    /// project.
    case serviceAccountNotConfigured // = 36

    /// A project has reached the maximum number of scans.
    case tooManyScans // = 37

    /// Resolving the details of the current project fails.
    case unableToResolveProjectInfo // = 38

    /// One or more blacklist patterns were in the wrong format.
    case unsupportedBlacklistPatternFormat // = 39

    /// The supplied filter is not supported.
    case unsupportedFilter // = 40

    /// The supplied finding type is not supported. For example, we do not
    /// provide findings of the given finding type.
    case unsupportedFindingType // = 41

    /// The URL scheme of one or more of the supplied URLs is not supported.
    case unsupportedURLScheme // = 42
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .internalError
      case 2: self = .appengineApiBackendError
      case 3: self = .appengineApiNotAccessible
      case 4: self = .appengineDefaultHostMissing
      case 6: self = .cannotUseGoogleComAccount
      case 7: self = .cannotUseOwnerAccount
      case 8: self = .computeApiBackendError
      case 9: self = .computeApiNotAccessible
      case 10: self = .customLoginURLDoesNotBelongToCurrentProject
      case 11: self = .customLoginURLMalformed
      case 12: self = .customLoginURLMappedToNonRoutableAddress
      case 13: self = .customLoginURLMappedToUnreservedAddress
      case 14: self = .customLoginURLHasNonRoutableIpAddress
      case 15: self = .customLoginURLHasUnreservedIpAddress
      case 16: self = .duplicateScanName
      case 18: self = .invalidFieldValue
      case 19: self = .failedToAuthenticateToTarget
      case 20: self = .findingTypeUnspecified
      case 21: self = .forbiddenToScanCompute
      case 22: self = .malformedFilter
      case 23: self = .malformedResourceName
      case 24: self = .projectInactive
      case 25: self = .requiredField
      case 26: self = .resourceNameInconsistent
      case 27: self = .scanAlreadyRunning
      case 28: self = .scanNotRunning
      case 29: self = .seedURLDoesNotBelongToCurrentProject
      case 30: self = .seedURLMalformed
      case 31: self = .seedURLMappedToNonRoutableAddress
      case 32: self = .seedURLMappedToUnreservedAddress
      case 33: self = .seedURLHasNonRoutableIpAddress
      case 35: self = .seedURLHasUnreservedIpAddress
      case 36: self = .serviceAccountNotConfigured
      case 37: self = .tooManyScans
      case 38: self = .unableToResolveProjectInfo
      case 39: self = .unsupportedBlacklistPatternFormat
      case 40: self = .unsupportedFilter
      case 41: self = .unsupportedFindingType
      case 42: self = .unsupportedURLScheme
      case 43: self = .forbiddenUpdateToManagedScan
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .internalError: return 1
      case .appengineApiBackendError: return 2
      case .appengineApiNotAccessible: return 3
      case .appengineDefaultHostMissing: return 4
      case .cannotUseGoogleComAccount: return 6
      case .cannotUseOwnerAccount: return 7
      case .computeApiBackendError: return 8
      case .computeApiNotAccessible: return 9
      case .customLoginURLDoesNotBelongToCurrentProject: return 10
      case .customLoginURLMalformed: return 11
      case .customLoginURLMappedToNonRoutableAddress: return 12
      case .customLoginURLMappedToUnreservedAddress: return 13
      case .customLoginURLHasNonRoutableIpAddress: return 14
      case .customLoginURLHasUnreservedIpAddress: return 15
      case .duplicateScanName: return 16
      case .invalidFieldValue: return 18
      case .failedToAuthenticateToTarget: return 19
      case .findingTypeUnspecified: return 20
      case .forbiddenToScanCompute: return 21
      case .malformedFilter: return 22
      case .malformedResourceName: return 23
      case .projectInactive: return 24
      case .requiredField: return 25
      case .resourceNameInconsistent: return 26
      case .scanAlreadyRunning: return 27
      case .scanNotRunning: return 28
      case .seedURLDoesNotBelongToCurrentProject: return 29
      case .seedURLMalformed: return 30
      case .seedURLMappedToNonRoutableAddress: return 31
      case .seedURLMappedToUnreservedAddress: return 32
      case .seedURLHasNonRoutableIpAddress: return 33
      case .seedURLHasUnreservedIpAddress: return 35
      case .serviceAccountNotConfigured: return 36
      case .tooManyScans: return 37
      case .unableToResolveProjectInfo: return 38
      case .unsupportedBlacklistPatternFormat: return 39
      case .unsupportedFilter: return 40
      case .unsupportedFindingType: return 41
      case .unsupportedURLScheme: return 42
      case .forbiddenUpdateToManagedScan: return 43
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Websecurityscanner_V1beta_ScanConfigError.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Websecurityscanner_V1beta_ScanConfigError.Code] = [
    .unspecified,
    .internalError,
    .appengineApiBackendError,
    .appengineApiNotAccessible,
    .appengineDefaultHostMissing,
    .cannotUseGoogleComAccount,
    .cannotUseOwnerAccount,
    .computeApiBackendError,
    .computeApiNotAccessible,
    .customLoginURLDoesNotBelongToCurrentProject,
    .customLoginURLMalformed,
    .customLoginURLMappedToNonRoutableAddress,
    .customLoginURLMappedToUnreservedAddress,
    .customLoginURLHasNonRoutableIpAddress,
    .customLoginURLHasUnreservedIpAddress,
    .duplicateScanName,
    .invalidFieldValue,
    .failedToAuthenticateToTarget,
    .findingTypeUnspecified,
    .forbiddenToScanCompute,
    .forbiddenUpdateToManagedScan,
    .malformedFilter,
    .malformedResourceName,
    .projectInactive,
    .requiredField,
    .resourceNameInconsistent,
    .scanAlreadyRunning,
    .scanNotRunning,
    .seedURLDoesNotBelongToCurrentProject,
    .seedURLMalformed,
    .seedURLMappedToNonRoutableAddress,
    .seedURLMappedToUnreservedAddress,
    .seedURLHasNonRoutableIpAddress,
    .seedURLHasUnreservedIpAddress,
    .serviceAccountNotConfigured,
    .tooManyScans,
    .unableToResolveProjectInfo,
    .unsupportedBlacklistPatternFormat,
    .unsupportedFilter,
    .unsupportedFindingType,
    .unsupportedURLScheme,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.websecurityscanner.v1beta"

extension Google_Cloud_Websecurityscanner_V1beta_ScanConfigError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScanConfigError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .standard(proto: "field_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fieldName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .unspecified {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.fieldName.isEmpty {
      try visitor.visitSingularStringField(value: self.fieldName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Websecurityscanner_V1beta_ScanConfigError, rhs: Google_Cloud_Websecurityscanner_V1beta_ScanConfigError) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.fieldName != rhs.fieldName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Websecurityscanner_V1beta_ScanConfigError.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .aliased(proto: "CODE_UNSPECIFIED", aliases: ["OK"]),
    1: .same(proto: "INTERNAL_ERROR"),
    2: .same(proto: "APPENGINE_API_BACKEND_ERROR"),
    3: .same(proto: "APPENGINE_API_NOT_ACCESSIBLE"),
    4: .same(proto: "APPENGINE_DEFAULT_HOST_MISSING"),
    6: .same(proto: "CANNOT_USE_GOOGLE_COM_ACCOUNT"),
    7: .same(proto: "CANNOT_USE_OWNER_ACCOUNT"),
    8: .same(proto: "COMPUTE_API_BACKEND_ERROR"),
    9: .same(proto: "COMPUTE_API_NOT_ACCESSIBLE"),
    10: .same(proto: "CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT"),
    11: .same(proto: "CUSTOM_LOGIN_URL_MALFORMED"),
    12: .same(proto: "CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS"),
    13: .same(proto: "CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS"),
    14: .same(proto: "CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS"),
    15: .same(proto: "CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS"),
    16: .same(proto: "DUPLICATE_SCAN_NAME"),
    18: .same(proto: "INVALID_FIELD_VALUE"),
    19: .same(proto: "FAILED_TO_AUTHENTICATE_TO_TARGET"),
    20: .same(proto: "FINDING_TYPE_UNSPECIFIED"),
    21: .same(proto: "FORBIDDEN_TO_SCAN_COMPUTE"),
    22: .same(proto: "MALFORMED_FILTER"),
    23: .same(proto: "MALFORMED_RESOURCE_NAME"),
    24: .same(proto: "PROJECT_INACTIVE"),
    25: .same(proto: "REQUIRED_FIELD"),
    26: .same(proto: "RESOURCE_NAME_INCONSISTENT"),
    27: .same(proto: "SCAN_ALREADY_RUNNING"),
    28: .same(proto: "SCAN_NOT_RUNNING"),
    29: .same(proto: "SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT"),
    30: .same(proto: "SEED_URL_MALFORMED"),
    31: .same(proto: "SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS"),
    32: .same(proto: "SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS"),
    33: .same(proto: "SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS"),
    35: .same(proto: "SEED_URL_HAS_UNRESERVED_IP_ADDRESS"),
    36: .same(proto: "SERVICE_ACCOUNT_NOT_CONFIGURED"),
    37: .same(proto: "TOO_MANY_SCANS"),
    38: .same(proto: "UNABLE_TO_RESOLVE_PROJECT_INFO"),
    39: .same(proto: "UNSUPPORTED_BLACKLIST_PATTERN_FORMAT"),
    40: .same(proto: "UNSUPPORTED_FILTER"),
    41: .same(proto: "UNSUPPORTED_FINDING_TYPE"),
    42: .same(proto: "UNSUPPORTED_URL_SCHEME"),
    43: .same(proto: "FORBIDDEN_UPDATE_TO_MANAGED_SCAN"),
  ]
}
