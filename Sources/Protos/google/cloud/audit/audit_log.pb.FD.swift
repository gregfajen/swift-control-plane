// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/audit/audit_log.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Common audit log format for Google Cloud Platform API operations.
public struct Google_Cloud_Audit_AuditLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the API service performing the operation. For example,
  /// `"datastore.googleapis.com"`.
  public var serviceName: String {
    get {return _storage._serviceName}
    set {_uniqueStorage()._serviceName = newValue}
  }

  /// The name of the service method or operation.
  /// For API calls, this should be the name of the API method.
  /// For example,
  ///
  ///     "google.datastore.v1.Datastore.RunQuery"
  ///     "google.logging.v1.LoggingService.DeleteLog"
  public var methodName: String {
    get {return _storage._methodName}
    set {_uniqueStorage()._methodName = newValue}
  }

  /// The resource or collection that is the target of the operation.
  /// The name is a scheme-less URI, not including the API service name.
  /// For example:
  ///
  ///     "shelves/SHELF_ID/books"
  ///     "shelves/SHELF_ID/books/BOOK_ID"
  public var resourceName: String {
    get {return _storage._resourceName}
    set {_uniqueStorage()._resourceName = newValue}
  }

  /// The resource location information.
  public var resourceLocation: Google_Cloud_Audit_ResourceLocation {
    get {return _storage._resourceLocation ?? Google_Cloud_Audit_ResourceLocation()}
    set {_uniqueStorage()._resourceLocation = newValue}
  }
  /// Returns true if `resourceLocation` has been explicitly set.
  public var hasResourceLocation: Bool {return _storage._resourceLocation != nil}
  /// Clears the value of `resourceLocation`. Subsequent reads from it will return its default value.
  public mutating func clearResourceLocation() {_uniqueStorage()._resourceLocation = nil}

  /// The resource's original state before mutation. Present only for
  /// operations which have successfully modified the targeted resource(s).
  /// In general, this field should contain all changed fields, except those
  /// that are already been included in `request`, `response`, `metadata` or
  /// `service_data` fields.
  /// When the JSON object represented here has a proto equivalent,
  /// the proto name will be indicated in the `@type` property.
  public var resourceOriginalState: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._resourceOriginalState ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._resourceOriginalState = newValue}
  }
  /// Returns true if `resourceOriginalState` has been explicitly set.
  public var hasResourceOriginalState: Bool {return _storage._resourceOriginalState != nil}
  /// Clears the value of `resourceOriginalState`. Subsequent reads from it will return its default value.
  public mutating func clearResourceOriginalState() {_uniqueStorage()._resourceOriginalState = nil}

  /// The number of items returned from a List or Query API method,
  /// if applicable.
  public var numResponseItems: Int64 {
    get {return _storage._numResponseItems}
    set {_uniqueStorage()._numResponseItems = newValue}
  }

  /// The status of the overall operation.
  public var status: Google_Rpc_Status {
    get {return _storage._status ?? Google_Rpc_Status()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  /// Authentication information.
  public var authenticationInfo: Google_Cloud_Audit_AuthenticationInfo {
    get {return _storage._authenticationInfo ?? Google_Cloud_Audit_AuthenticationInfo()}
    set {_uniqueStorage()._authenticationInfo = newValue}
  }
  /// Returns true if `authenticationInfo` has been explicitly set.
  public var hasAuthenticationInfo: Bool {return _storage._authenticationInfo != nil}
  /// Clears the value of `authenticationInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAuthenticationInfo() {_uniqueStorage()._authenticationInfo = nil}

  /// Authorization information. If there are multiple
  /// resources or permissions involved, then there is
  /// one AuthorizationInfo element for each {resource, permission} tuple.
  public var authorizationInfo: [Google_Cloud_Audit_AuthorizationInfo] {
    get {return _storage._authorizationInfo}
    set {_uniqueStorage()._authorizationInfo = newValue}
  }

  /// Metadata about the operation.
  public var requestMetadata: Google_Cloud_Audit_RequestMetadata {
    get {return _storage._requestMetadata ?? Google_Cloud_Audit_RequestMetadata()}
    set {_uniqueStorage()._requestMetadata = newValue}
  }
  /// Returns true if `requestMetadata` has been explicitly set.
  public var hasRequestMetadata: Bool {return _storage._requestMetadata != nil}
  /// Clears the value of `requestMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearRequestMetadata() {_uniqueStorage()._requestMetadata = nil}

  /// The operation request. This may not include all request parameters,
  /// such as those that are too large, privacy-sensitive, or duplicated
  /// elsewhere in the log record.
  /// It should never include user-generated data, such as file contents.
  /// When the JSON object represented here has a proto equivalent, the proto
  /// name will be indicated in the `@type` property.
  public var request: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._request ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  public var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  public mutating func clearRequest() {_uniqueStorage()._request = nil}

  /// The operation response. This may not include all response elements,
  /// such as those that are too large, privacy-sensitive, or duplicated
  /// elsewhere in the log record.
  /// It should never include user-generated data, such as file contents.
  /// When the JSON object represented here has a proto equivalent, the proto
  /// name will be indicated in the `@type` property.
  public var response: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._response ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  public var hasResponse: Bool {return _storage._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  public mutating func clearResponse() {_uniqueStorage()._response = nil}

  /// Other service-specific data about the request, response, and other
  /// information associated with the current audited event.
  public var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Deprecated, use `metadata` field instead.
  /// Other service-specific data about the request, response, and other
  /// activities.
  public var serviceData: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._serviceData ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._serviceData = newValue}
  }
  /// Returns true if `serviceData` has been explicitly set.
  public var hasServiceData: Bool {return _storage._serviceData != nil}
  /// Clears the value of `serviceData`. Subsequent reads from it will return its default value.
  public mutating func clearServiceData() {_uniqueStorage()._serviceData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Authentication information for the operation.
public struct Google_Cloud_Audit_AuthenticationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The email address of the authenticated user (or service account on behalf
  /// of third party principal) making the request. For privacy reasons, the
  /// principal email address is redacted for all read-only operations that fail
  /// with a "permission denied" error.
  public var principalEmail: String = String()

  /// The authority selector specified by the requestor, if any.
  /// It is not guaranteed that the principal was allowed to use this authority.
  public var authoritySelector: String = String()

  /// The third party identification (if any) of the authenticated user making
  /// the request.
  /// When the JSON object represented here has a proto equivalent, the proto
  /// name will be indicated in the `@type` property.
  public var thirdPartyPrincipal: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _thirdPartyPrincipal ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_thirdPartyPrincipal = newValue}
  }
  /// Returns true if `thirdPartyPrincipal` has been explicitly set.
  public var hasThirdPartyPrincipal: Bool {return self._thirdPartyPrincipal != nil}
  /// Clears the value of `thirdPartyPrincipal`. Subsequent reads from it will return its default value.
  public mutating func clearThirdPartyPrincipal() {self._thirdPartyPrincipal = nil}

  /// The name of the service account key used to create or exchange
  /// credentials for authenticating the service account making the request.
  /// This is a scheme-less URI full resource name. For example:
  ///
  /// "//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}"
  public var serviceAccountKeyName: String = String()

  /// Identity delegation history of an authenticated service account that makes
  /// the request. It contains information on the real authorities that try to
  /// access GCP resources by delegating on a service account. When multiple
  /// authorities present, they are guaranteed to be sorted based on the original
  /// ordering of the identity delegation events.
  public var serviceAccountDelegationInfo: [Google_Cloud_Audit_ServiceAccountDelegationInfo] = []

  /// String representation of identity of requesting party.
  /// Populated for both first and third party identities.
  public var principalSubject: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _thirdPartyPrincipal: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

/// Authorization information for the operation.
public struct Google_Cloud_Audit_AuthorizationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource being accessed, as a REST-style string. For example:
  ///
  ///     bigquery.googleapis.com/projects/PROJECTID/datasets/DATASETID
  public var resource: String = String()

  /// The required IAM permission.
  public var permission: String = String()

  /// Whether or not authorization for `resource` and `permission`
  /// was granted.
  public var granted: Bool = false

  /// Resource attributes used in IAM condition evaluation. This field contains
  /// resource attributes like resource type and resource name.
  ///
  /// To get the whole view of the attributes used in IAM
  /// condition evaluation, the user must also look into
  /// `AuditLog.request_metadata.request_attributes`.
  public var resourceAttributes: Google_Rpc_Context_AttributeContext.Resource {
    get {return _resourceAttributes ?? Google_Rpc_Context_AttributeContext.Resource()}
    set {_resourceAttributes = newValue}
  }
  /// Returns true if `resourceAttributes` has been explicitly set.
  public var hasResourceAttributes: Bool {return self._resourceAttributes != nil}
  /// Clears the value of `resourceAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearResourceAttributes() {self._resourceAttributes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _resourceAttributes: Google_Rpc_Context_AttributeContext.Resource? = nil
}

/// Metadata about the request.
public struct Google_Cloud_Audit_RequestMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The IP address of the caller.
  /// For caller from internet, this will be public IPv4 or IPv6 address.
  /// For caller from a Compute Engine VM with external IP address, this
  /// will be the VM's external IP address. For caller from a Compute
  /// Engine VM without external IP address, if the VM is in the same
  /// organization (or project) as the accessed resource, `caller_ip` will
  /// be the VM's internal IPv4 address, otherwise the `caller_ip` will be
  /// redacted to "gce-internal-ip".
  /// See https://cloud.google.com/compute/docs/vpc/ for more information.
  public var callerIp: String = String()

  /// The user agent of the caller.
  /// This information is not authenticated and should be treated accordingly.
  /// For example:
  ///
  /// +   `google-api-python-client/1.4.0`:
  ///     The request was made by the Google API client for Python.
  /// +   `Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62`:
  ///     The request was made by the Google Cloud SDK CLI (gcloud).
  /// +   `AppEngine-Google; (+http://code.google.com/appengine; appid:
  /// s~my-project`:
  ///     The request was made from the `my-project` App Engine app.
  public var callerSuppliedUserAgent: String = String()

  /// The network of the caller.
  /// Set only if the network host project is part of the same GCP organization
  /// (or project) as the accessed resource.
  /// See https://cloud.google.com/compute/docs/vpc/ for more information.
  /// This is a scheme-less URI full resource name. For example:
  ///
  ///     "//compute.googleapis.com/projects/PROJECT_ID/global/networks/NETWORK_ID"
  public var callerNetwork: String = String()

  /// Request attributes used in IAM condition evaluation. This field contains
  /// request attributes like request time and access levels associated with
  /// the request.
  ///
  ///
  /// To get the whole view of the attributes used in IAM
  /// condition evaluation, the user must also look into
  /// `AuditLog.authentication_info.resource_attributes`.
  public var requestAttributes: Google_Rpc_Context_AttributeContext.Request {
    get {return _requestAttributes ?? Google_Rpc_Context_AttributeContext.Request()}
    set {_requestAttributes = newValue}
  }
  /// Returns true if `requestAttributes` has been explicitly set.
  public var hasRequestAttributes: Bool {return self._requestAttributes != nil}
  /// Clears the value of `requestAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearRequestAttributes() {self._requestAttributes = nil}

  /// The destination of a network activity, such as accepting a TCP connection.
  /// In a multi hop network activity, the destination represents the receiver of
  /// the last hop. Only two fields are used in this message, Peer.port and
  /// Peer.ip. These fields are optionally populated by those services utilizing
  /// the IAM condition feature.
  public var destinationAttributes: Google_Rpc_Context_AttributeContext.Peer {
    get {return _destinationAttributes ?? Google_Rpc_Context_AttributeContext.Peer()}
    set {_destinationAttributes = newValue}
  }
  /// Returns true if `destinationAttributes` has been explicitly set.
  public var hasDestinationAttributes: Bool {return self._destinationAttributes != nil}
  /// Clears the value of `destinationAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationAttributes() {self._destinationAttributes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestAttributes: Google_Rpc_Context_AttributeContext.Request? = nil
  fileprivate var _destinationAttributes: Google_Rpc_Context_AttributeContext.Peer? = nil
}

/// Location information about a resource.
public struct Google_Cloud_Audit_ResourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The locations of a resource after the execution of the operation.
  /// Requests to create or delete a location based resource must populate
  /// the 'current_locations' field and not the 'original_locations' field.
  /// For example:
  ///
  ///     "europe-west1-a"
  ///     "us-east1"
  ///     "nam3"
  public var currentLocations: [String] = []

  /// The locations of a resource prior to the execution of the operation.
  /// Requests that mutate the resource's location must populate both the
  /// 'original_locations' as well as the 'current_locations' fields.
  /// For example:
  ///
  ///     "europe-west1-a"
  ///     "us-east1"
  ///     "nam3"
  public var originalLocations: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Identity delegation history of an authenticated service account.
public struct Google_Cloud_Audit_ServiceAccountDelegationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Entity that creates credentials for service account and assumes its
  /// identity for authentication.
  public var authority: Google_Cloud_Audit_ServiceAccountDelegationInfo.OneOf_Authority? = nil

  /// First party (Google) identity as the real authority.
  public var firstPartyPrincipal: Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal {
    get {
      if case .firstPartyPrincipal(let v)? = authority {return v}
      return Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal()
    }
    set {authority = .firstPartyPrincipal(newValue)}
  }

  /// Third party identity as the real authority.
  public var thirdPartyPrincipal: Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal {
    get {
      if case .thirdPartyPrincipal(let v)? = authority {return v}
      return Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal()
    }
    set {authority = .thirdPartyPrincipal(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Entity that creates credentials for service account and assumes its
  /// identity for authentication.
  public enum OneOf_Authority: Equatable {
    /// First party (Google) identity as the real authority.
    case firstPartyPrincipal(Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal)
    /// Third party identity as the real authority.
    case thirdPartyPrincipal(Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Audit_ServiceAccountDelegationInfo.OneOf_Authority, rhs: Google_Cloud_Audit_ServiceAccountDelegationInfo.OneOf_Authority) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.firstPartyPrincipal, .firstPartyPrincipal): return {
        guard case .firstPartyPrincipal(let l) = lhs, case .firstPartyPrincipal(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.thirdPartyPrincipal, .thirdPartyPrincipal): return {
        guard case .thirdPartyPrincipal(let l) = lhs, case .thirdPartyPrincipal(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// First party identity principal.
  public struct FirstPartyPrincipal {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The email address of a Google account.
    public var principalEmail: String = String()

    /// Metadata about the service that uses the service account.
    public var serviceMetadata: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _serviceMetadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_serviceMetadata = newValue}
    }
    /// Returns true if `serviceMetadata` has been explicitly set.
    public var hasServiceMetadata: Bool {return self._serviceMetadata != nil}
    /// Clears the value of `serviceMetadata`. Subsequent reads from it will return its default value.
    public mutating func clearServiceMetadata() {self._serviceMetadata = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _serviceMetadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
  }

  /// Third party identity principal.
  public struct ThirdPartyPrincipal {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Metadata about third party identity.
    public var thirdPartyClaims: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _thirdPartyClaims ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_thirdPartyClaims = newValue}
    }
    /// Returns true if `thirdPartyClaims` has been explicitly set.
    public var hasThirdPartyClaims: Bool {return self._thirdPartyClaims != nil}
    /// Clears the value of `thirdPartyClaims`. Subsequent reads from it will return its default value.
    public mutating func clearThirdPartyClaims() {self._thirdPartyClaims = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _thirdPartyClaims: SwiftProtobuf.Google_Protobuf_Struct? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.audit"

extension Google_Cloud_Audit_AuditLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuditLog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "service_name"),
    8: .standard(proto: "method_name"),
    11: .standard(proto: "resource_name"),
    20: .standard(proto: "resource_location"),
    19: .standard(proto: "resource_original_state"),
    12: .standard(proto: "num_response_items"),
    2: .same(proto: "status"),
    3: .standard(proto: "authentication_info"),
    9: .standard(proto: "authorization_info"),
    4: .standard(proto: "request_metadata"),
    16: .same(proto: "request"),
    17: .same(proto: "response"),
    18: .same(proto: "metadata"),
    15: .standard(proto: "service_data"),
  ]

  fileprivate class _StorageClass {
    var _serviceName: String = String()
    var _methodName: String = String()
    var _resourceName: String = String()
    var _resourceLocation: Google_Cloud_Audit_ResourceLocation? = nil
    var _resourceOriginalState: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _numResponseItems: Int64 = 0
    var _status: Google_Rpc_Status? = nil
    var _authenticationInfo: Google_Cloud_Audit_AuthenticationInfo? = nil
    var _authorizationInfo: [Google_Cloud_Audit_AuthorizationInfo] = []
    var _requestMetadata: Google_Cloud_Audit_RequestMetadata? = nil
    var _request: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _response: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _serviceData: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serviceName = source._serviceName
      _methodName = source._methodName
      _resourceName = source._resourceName
      _resourceLocation = source._resourceLocation
      _resourceOriginalState = source._resourceOriginalState
      _numResponseItems = source._numResponseItems
      _status = source._status
      _authenticationInfo = source._authenticationInfo
      _authorizationInfo = source._authorizationInfo
      _requestMetadata = source._requestMetadata
      _request = source._request
      _response = source._response
      _metadata = source._metadata
      _serviceData = source._serviceData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._authenticationInfo) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._requestMetadata) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._serviceName) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._methodName) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._authorizationInfo) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._resourceName) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._numResponseItems) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._serviceData) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._request) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._response) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._resourceOriginalState) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._resourceLocation) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._authenticationInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._requestMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._serviceName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceName, fieldNumber: 7)
      }
      if !_storage._methodName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._methodName, fieldNumber: 8)
      }
      if !_storage._authorizationInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._authorizationInfo, fieldNumber: 9)
      }
      if !_storage._resourceName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resourceName, fieldNumber: 11)
      }
      if _storage._numResponseItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._numResponseItems, fieldNumber: 12)
      }
      if let v = _storage._serviceData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._resourceOriginalState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._resourceLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_AuditLog, rhs: Google_Cloud_Audit_AuditLog) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serviceName != rhs_storage._serviceName {return false}
        if _storage._methodName != rhs_storage._methodName {return false}
        if _storage._resourceName != rhs_storage._resourceName {return false}
        if _storage._resourceLocation != rhs_storage._resourceLocation {return false}
        if _storage._resourceOriginalState != rhs_storage._resourceOriginalState {return false}
        if _storage._numResponseItems != rhs_storage._numResponseItems {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._authenticationInfo != rhs_storage._authenticationInfo {return false}
        if _storage._authorizationInfo != rhs_storage._authorizationInfo {return false}
        if _storage._requestMetadata != rhs_storage._requestMetadata {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._serviceData != rhs_storage._serviceData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_AuthenticationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthenticationInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "principal_email"),
    2: .standard(proto: "authority_selector"),
    4: .standard(proto: "third_party_principal"),
    5: .standard(proto: "service_account_key_name"),
    6: .standard(proto: "service_account_delegation_info"),
    8: .standard(proto: "principal_subject"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.principalEmail) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authoritySelector) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._thirdPartyPrincipal) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.serviceAccountKeyName) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.serviceAccountDelegationInfo) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.principalSubject) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.principalEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.principalEmail, fieldNumber: 1)
    }
    if !self.authoritySelector.isEmpty {
      try visitor.visitSingularStringField(value: self.authoritySelector, fieldNumber: 2)
    }
    if let v = self._thirdPartyPrincipal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.serviceAccountKeyName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountKeyName, fieldNumber: 5)
    }
    if !self.serviceAccountDelegationInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceAccountDelegationInfo, fieldNumber: 6)
    }
    if !self.principalSubject.isEmpty {
      try visitor.visitSingularStringField(value: self.principalSubject, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_AuthenticationInfo, rhs: Google_Cloud_Audit_AuthenticationInfo) -> Bool {
    if lhs.principalEmail != rhs.principalEmail {return false}
    if lhs.authoritySelector != rhs.authoritySelector {return false}
    if lhs._thirdPartyPrincipal != rhs._thirdPartyPrincipal {return false}
    if lhs.serviceAccountKeyName != rhs.serviceAccountKeyName {return false}
    if lhs.serviceAccountDelegationInfo != rhs.serviceAccountDelegationInfo {return false}
    if lhs.principalSubject != rhs.principalSubject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_AuthorizationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthorizationInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resource"),
    2: .same(proto: "permission"),
    3: .same(proto: "granted"),
    5: .standard(proto: "resource_attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.permission) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.granted) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._resourceAttributes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 1)
    }
    if !self.permission.isEmpty {
      try visitor.visitSingularStringField(value: self.permission, fieldNumber: 2)
    }
    if self.granted != false {
      try visitor.visitSingularBoolField(value: self.granted, fieldNumber: 3)
    }
    if let v = self._resourceAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_AuthorizationInfo, rhs: Google_Cloud_Audit_AuthorizationInfo) -> Bool {
    if lhs.resource != rhs.resource {return false}
    if lhs.permission != rhs.permission {return false}
    if lhs.granted != rhs.granted {return false}
    if lhs._resourceAttributes != rhs._resourceAttributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_RequestMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "caller_ip"),
    2: .standard(proto: "caller_supplied_user_agent"),
    3: .standard(proto: "caller_network"),
    7: .standard(proto: "request_attributes"),
    8: .standard(proto: "destination_attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.callerIp) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.callerSuppliedUserAgent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.callerNetwork) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._requestAttributes) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._destinationAttributes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.callerIp.isEmpty {
      try visitor.visitSingularStringField(value: self.callerIp, fieldNumber: 1)
    }
    if !self.callerSuppliedUserAgent.isEmpty {
      try visitor.visitSingularStringField(value: self.callerSuppliedUserAgent, fieldNumber: 2)
    }
    if !self.callerNetwork.isEmpty {
      try visitor.visitSingularStringField(value: self.callerNetwork, fieldNumber: 3)
    }
    if let v = self._requestAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._destinationAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_RequestMetadata, rhs: Google_Cloud_Audit_RequestMetadata) -> Bool {
    if lhs.callerIp != rhs.callerIp {return false}
    if lhs.callerSuppliedUserAgent != rhs.callerSuppliedUserAgent {return false}
    if lhs.callerNetwork != rhs.callerNetwork {return false}
    if lhs._requestAttributes != rhs._requestAttributes {return false}
    if lhs._destinationAttributes != rhs._destinationAttributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_ResourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_locations"),
    2: .standard(proto: "original_locations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.currentLocations) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.originalLocations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currentLocations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.currentLocations, fieldNumber: 1)
    }
    if !self.originalLocations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.originalLocations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_ResourceLocation, rhs: Google_Cloud_Audit_ResourceLocation) -> Bool {
    if lhs.currentLocations != rhs.currentLocations {return false}
    if lhs.originalLocations != rhs.originalLocations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_ServiceAccountDelegationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceAccountDelegationInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_party_principal"),
    2: .standard(proto: "third_party_principal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal?
        if let current = self.authority {
          try decoder.handleConflictingOneOf()
          if case .firstPartyPrincipal(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.authority = .firstPartyPrincipal(v)}
      }()
      case 2: try {
        var v: Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal?
        if let current = self.authority {
          try decoder.handleConflictingOneOf()
          if case .thirdPartyPrincipal(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.authority = .thirdPartyPrincipal(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.authority {
    case .firstPartyPrincipal?: try {
      guard case .firstPartyPrincipal(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .thirdPartyPrincipal?: try {
      guard case .thirdPartyPrincipal(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_ServiceAccountDelegationInfo, rhs: Google_Cloud_Audit_ServiceAccountDelegationInfo) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Audit_ServiceAccountDelegationInfo.protoMessageName + ".FirstPartyPrincipal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "principal_email"),
    2: .standard(proto: "service_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.principalEmail) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._serviceMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.principalEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.principalEmail, fieldNumber: 1)
    }
    if let v = self._serviceMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal, rhs: Google_Cloud_Audit_ServiceAccountDelegationInfo.FirstPartyPrincipal) -> Bool {
    if lhs.principalEmail != rhs.principalEmail {return false}
    if lhs._serviceMetadata != rhs._serviceMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Audit_ServiceAccountDelegationInfo.protoMessageName + ".ThirdPartyPrincipal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "third_party_claims"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._thirdPartyClaims) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._thirdPartyClaims {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal, rhs: Google_Cloud_Audit_ServiceAccountDelegationInfo.ThirdPartyPrincipal) -> Bool {
    if lhs._thirdPartyClaims != rhs._thirdPartyClaims {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
