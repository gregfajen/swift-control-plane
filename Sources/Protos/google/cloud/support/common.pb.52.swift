// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/support/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Google Cloud Platform account that identifies support eligibility for a
/// Cloud resource. Currently the Cloud resource can only be an Organization
/// but this might change in future.
public struct Google_Cloud_Support_Common_SupportAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name for a support account in format
  /// `supportAccounts/{account_id}`.
  /// Output only.
  public var name: String = String()

  /// Identifier for this entity that gets persisted in storage system. The
  /// resource name is populated using this field in format
  /// `supportAccounts/{account_id}`.
  public var accountID: String = String()

  /// The Cloud resource with which this support account is associated.
  public var cloudResource: String = String()

  /// A user friendly display name assigned to this support account.
  public var displayName: String = String()

  /// Indicates the current state of an account.
  public var state: Google_Cloud_Support_Common_SupportAccount.State = .unspecified

  /// Time when this account was created.
  /// Output only.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The resource name of a billing account associated with this support
  /// account. For example, `billingAccounts/ABCDEF-012345-567890`.
  public var billingAccountName: String = String()

  public var unifyAccountID: String = String()

  /// The PricingModel applicable to this support account.
  public var pricingModel: Google_Cloud_Support_Common_SupportAccount.PricingModel = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The current state of this SupportAccount.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Account is in an unknown state.
    case unspecified // = 0

    /// Account is in an active state.
    case active // = 1

    /// Account has been created but is being provisioned in support systems.
    case pending // = 2

    /// Account deletion has been requested by the user.
    case pendingDeletion // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .active
      case 2: self = .pending
      case 3: self = .pendingDeletion
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .active: return 1
      case .pending: return 2
      case .pendingDeletion: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Pricing model applicable to this support account.
  public enum PricingModel: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// This account is subscribed to an unknown pricing model.
    case unknown // = 0

    /// Package based pricing (Platinum, Gold, Silver, Bronze).
    case packages // = 1

    /// Support charges are calculated based on user seats a.k.a,
    /// "Pick Your Team" model.
    case userRoles // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .packages
      case 2: self = .userRoles
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .packages: return 1
      case .userRoles: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Support_Common_SupportAccount.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Support_Common_SupportAccount.State] = [
    .unspecified,
    .active,
    .pending,
    .pendingDeletion,
  ]
}

extension Google_Cloud_Support_Common_SupportAccount.PricingModel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Support_Common_SupportAccount.PricingModel] = [
    .unknown,
    .packages,
    .userRoles,
  ]
}

#endif  // swift(>=4.2)

/// A support case created by the user.
public struct Google_Cloud_Support_Common_Case {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name for the Case in format
  /// `supportAccounts/{account_id}/cases/{case_id}`
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// The short summary of the issue reported in this case.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// The board description of issue provided with initial summary.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The product component for which this Case is reported.
  public var component: String {
    get {return _storage._component}
    set {_uniqueStorage()._component = newValue}
  }

  /// The product subcomponent for which this Case is reported.
  public var subcomponent: String {
    get {return _storage._subcomponent}
    set {_uniqueStorage()._subcomponent = newValue}
  }

  /// Timezone the client sending this request is in.
  /// It should be in a format IANA recognizes: https://www.iana.org/time-zone
  /// There is no additional validation done by the API.
  public var clientTimezone: String {
    get {return _storage._clientTimezone}
    set {_uniqueStorage()._clientTimezone = newValue}
  }

  /// The email addresses that can be copied to receive updates on this case.
  /// Users can specify a maximum of 10 email addresses.
  public var ccAddresses: [String] {
    get {return _storage._ccAddresses}
    set {_uniqueStorage()._ccAddresses = newValue}
  }

  /// The Google Cloud Platform project ID for which this case is created.
  public var projectID: String {
    get {return _storage._projectID}
    set {_uniqueStorage()._projectID = newValue}
  }

  /// List of customer issues associated with this case.
  public var issues: [Google_Cloud_Support_Common_CustomerIssue] {
    get {return _storage._issues}
    set {_uniqueStorage()._issues = newValue}
  }

  /// The current priority of this case.
  public var priority: Google_Cloud_Support_Common_Case.Priority {
    get {return _storage._priority}
    set {_uniqueStorage()._priority = newValue}
  }

  /// The current state of this case.
  public var state: Google_Cloud_Support_Common_Case.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Time when this case was created.
  /// Output only.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Time when this case was last updated.
  /// Output only.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Email address of user who created this case.
  /// Output only. It is inferred from credentials supplied during case creation.
  public var creatorEmail: String {
    get {return _storage._creatorEmail}
    set {_uniqueStorage()._creatorEmail = newValue}
  }

  /// The issue category applicable to this case.
  public var category: String {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The case priority with P0 being the most urgent and P4 the least.
  public enum Priority: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Priority is undefined or has not been set yet.
    case unspecified // = 0

    /// Extreme impact on a production service - Service is hard down.
    case p0 // = 1

    /// Critical impact on a production service - Service is currently unusable.
    case p1 // = 2

    /// Severe impact on a production service - Service is usable but greatly
    /// impaired.
    case p2 // = 3

    /// Medium impact on a production service - Service is available, but
    /// moderately impaired.
    case p3 // = 4

    /// General questions or minor issues - Production service is fully
    /// available.
    case p4 // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .p0
      case 2: self = .p1
      case 3: self = .p2
      case 4: self = .p3
      case 5: self = .p4
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .p0: return 1
      case .p1: return 2
      case .p2: return 3
      case .p3: return 4
      case .p4: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The state of a case.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Case is in an unknown state.
    case unspecified // = 0

    /// Case has been created but no one is assigned to work on it yet.
    case new // = 1

    /// Case has been assigned to a support agent.
    case assigned // = 2

    /// A support agent is currently investigating the case.
    case inProgressGoogleSupport // = 3

    /// Case has been forwarded to product team for further investigation.
    case inProgressGoogleEng // = 4

    /// Case is under investigation and relates to a known issue.
    case inProgressKnownIssue // = 5

    /// Case is waiting for a response from the customer.
    case waitingForCustomerResponse // = 6

    /// A solution has been offered for the case but it isn't closed yet.
    case solutionOffered // = 7

    /// Cases has been fully resolved and is in a closed state.
    case closed // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .new
      case 2: self = .assigned
      case 3: self = .inProgressGoogleSupport
      case 4: self = .inProgressGoogleEng
      case 5: self = .inProgressKnownIssue
      case 6: self = .waitingForCustomerResponse
      case 7: self = .solutionOffered
      case 8: self = .closed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .new: return 1
      case .assigned: return 2
      case .inProgressGoogleSupport: return 3
      case .inProgressGoogleEng: return 4
      case .inProgressKnownIssue: return 5
      case .waitingForCustomerResponse: return 6
      case .solutionOffered: return 7
      case .closed: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Support_Common_Case.Priority: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Support_Common_Case.Priority] = [
    .unspecified,
    .p0,
    .p1,
    .p2,
    .p3,
    .p4,
  ]
}

extension Google_Cloud_Support_Common_Case.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Support_Common_Case.State] = [
    .unspecified,
    .new,
    .assigned,
    .inProgressGoogleSupport,
    .inProgressGoogleEng,
    .inProgressKnownIssue,
    .waitingForCustomerResponse,
    .solutionOffered,
    .closed,
  ]
}

#endif  // swift(>=4.2)

/// Reference to a Google internal ticket used for investigating a support case.
/// Not every support case will have an internal ticket associated with it.
/// A support case can have multiple tickets linked to it.
public struct Google_Cloud_Support_Common_CustomerIssue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique identifier for the internal issue.
  /// Output only.
  public var issueID: String = String()

  /// Represents current status of the internal ticket.
  /// Output only.
  public var state: Google_Cloud_Support_Common_CustomerIssue.IssueState = .unspecified

  /// Time when the internal issue was created.
  /// Output only.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Time when the internal issue was marked as resolved.
  /// Output only.
  public var resolveTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _resolveTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_resolveTime = newValue}
  }
  /// Returns true if `resolveTime` has been explicitly set.
  public var hasResolveTime: Bool {return self._resolveTime != nil}
  /// Clears the value of `resolveTime`. Subsequent reads from it will return its default value.
  public mutating func clearResolveTime() {self._resolveTime = nil}

  /// Time when the internal issue was last updated.
  /// Output only.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The status of a customer issue.
  public enum IssueState: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Issue in an unknown state.
    case unspecified // = 0

    /// Issue is currently open but the work on it has not been started.
    case `open` // = 1

    /// Issue is currently being worked on.
    case inProgress // = 2

    /// Issue is fixed.
    case fixed // = 3

    /// Issue has been marked as invalid.
    case wontFix // = 4

    /// Issue verified and in production.
    case verified // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .open
      case 2: self = .inProgress
      case 3: self = .fixed
      case 4: self = .wontFix
      case 5: self = .verified
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .open: return 1
      case .inProgress: return 2
      case .fixed: return 3
      case .wontFix: return 4
      case .verified: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _resolveTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Cloud_Support_Common_CustomerIssue.IssueState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Support_Common_CustomerIssue.IssueState] = [
    .unspecified,
    .open,
    .inProgress,
    .fixed,
    .wontFix,
    .verified,
  ]
}

#endif  // swift(>=4.2)

/// A message that contains mapping of a user and their role under a support
/// account.
public struct Google_Cloud_Support_Common_SupportRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Email address of user being added through this Role.
  public var email: String = String()

  /// The type of role assigned to user.
  public var role: Google_Cloud_Support_Common_SupportRole.Role = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A role which determines the support resources and features a user might
  /// get access to.
  public enum Role: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An unknown role.
    case unspecified // = 0

    /// The basic support role.
    case basic // = 1

    /// The developer role.
    case developer // = 2

    /// The operation role.
    case operation // = 3

    /// The site reliability role.
    case siteReliability // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .basic
      case 2: self = .developer
      case 3: self = .operation
      case 4: self = .siteReliability
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .basic: return 1
      case .developer: return 2
      case .operation: return 3
      case .siteReliability: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Support_Common_SupportRole.Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Support_Common_SupportRole.Role] = [
    .unspecified,
    .basic,
    .developer,
    .operation,
    .siteReliability,
  ]
}

#endif  // swift(>=4.2)

/// The comment text associated with a `Case`.
public struct Google_Cloud_Support_Common_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Text containing a maximum of 3000 characters.
  public var text: String = String()

  /// Time when this update was created.
  /// Output only.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// The email address/name of user who created this comment.
  /// Output only.
  public var author: String = String()

  /// The resource name for this comment in format
  /// `supportAccounts/{account_id}/cases/{case_id}/{comment_id}`.
  /// Output only.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Represents the product component taxonomy that is to be used while creating
/// or updating a `Case`. A client should obtain the list of issue categories,
/// component/subcomponent from this object and specify it in `Case.category`,
/// `Case.component` and `Case.subcomponent` fields respectively.
public struct Google_Cloud_Support_Common_IssueTaxonomy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Map of available categories.
  public var categories: Dictionary<String,Google_Cloud_Support_Common_IssueTaxonomy.Category> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The representation of a product component. It is composed of a canonical
  /// name for the product (e.g., Google App Engine), languages in which a
  /// support ticket can be created under this component, a template that
  /// provides hints on important details to be filled out before submitting a
  /// case. It also contains an embedded list of product subcomponents that have
  /// similar attributes as top-level components.
  /// (e.g., Google App Engine > Memcache).
  public struct Component {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// User friendly name of this component.
    public var displayName: String = String()

    /// List of languages in which a support case can be created under this
    /// component. Represented by language codes in ISO_639-1 standard.
    public var languages: [String] = []

    /// Template to be used while filling the description of a support case.
    public var template: String = String()

    /// List of subcomponents under this component.
    public var subcomponents: [Google_Cloud_Support_Common_IssueTaxonomy.Component] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Represents the category of issue (Technical or Non-Technical)
  /// reported through a support case.
  public struct Category {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// User friendly name of this category.
    public var displayName: String = String()

    /// Map of product components under this category.
    public var components: Dictionary<String,Google_Cloud_Support_Common_IssueTaxonomy.Component> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.support.common"

extension Google_Cloud_Support_Common_SupportAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SupportAccount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "account_id"),
    3: .standard(proto: "cloud_resource"),
    4: .standard(proto: "display_name"),
    5: .same(proto: "state"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "billing_account_name"),
    8: .standard(proto: "unify_account_id"),
    9: .standard(proto: "pricing_model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cloudResource) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.billingAccountName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.unifyAccountID) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.pricingModel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 2)
    }
    if !self.cloudResource.isEmpty {
      try visitor.visitSingularStringField(value: self.cloudResource, fieldNumber: 3)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 4)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.billingAccountName.isEmpty {
      try visitor.visitSingularStringField(value: self.billingAccountName, fieldNumber: 7)
    }
    if !self.unifyAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.unifyAccountID, fieldNumber: 8)
    }
    if self.pricingModel != .unknown {
      try visitor.visitSingularEnumField(value: self.pricingModel, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_SupportAccount, rhs: Google_Cloud_Support_Common_SupportAccount) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.cloudResource != rhs.cloudResource {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.state != rhs.state {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.billingAccountName != rhs.billingAccountName {return false}
    if lhs.unifyAccountID != rhs.unifyAccountID {return false}
    if lhs.pricingModel != rhs.pricingModel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_SupportAccount.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "ACTIVE"),
    2: .same(proto: "PENDING"),
    3: .same(proto: "PENDING_DELETION"),
  ]
}

extension Google_Cloud_Support_Common_SupportAccount.PricingModel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRICING_MODEL_UNKNOWN"),
    1: .same(proto: "PACKAGES"),
    2: .same(proto: "USER_ROLES"),
  ]
}

extension Google_Cloud_Support_Common_Case: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Case"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "description"),
    4: .same(proto: "component"),
    5: .same(proto: "subcomponent"),
    6: .standard(proto: "client_timezone"),
    7: .standard(proto: "cc_addresses"),
    8: .standard(proto: "project_id"),
    10: .same(proto: "issues"),
    11: .same(proto: "priority"),
    12: .same(proto: "state"),
    13: .standard(proto: "create_time"),
    14: .standard(proto: "update_time"),
    15: .standard(proto: "creator_email"),
    16: .same(proto: "category"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _description_p: String = String()
    var _component: String = String()
    var _subcomponent: String = String()
    var _clientTimezone: String = String()
    var _ccAddresses: [String] = []
    var _projectID: String = String()
    var _issues: [Google_Cloud_Support_Common_CustomerIssue] = []
    var _priority: Google_Cloud_Support_Common_Case.Priority = .unspecified
    var _state: Google_Cloud_Support_Common_Case.State = .unspecified
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _creatorEmail: String = String()
    var _category: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _description_p = source._description_p
      _component = source._component
      _subcomponent = source._subcomponent
      _clientTimezone = source._clientTimezone
      _ccAddresses = source._ccAddresses
      _projectID = source._projectID
      _issues = source._issues
      _priority = source._priority
      _state = source._state
      _createTime = source._createTime
      _updateTime = source._updateTime
      _creatorEmail = source._creatorEmail
      _category = source._category
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._component) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._subcomponent) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._clientTimezone) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._ccAddresses) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._projectID) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._issues) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._priority) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._creatorEmail) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._category) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._component.isEmpty {
        try visitor.visitSingularStringField(value: _storage._component, fieldNumber: 4)
      }
      if !_storage._subcomponent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subcomponent, fieldNumber: 5)
      }
      if !_storage._clientTimezone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientTimezone, fieldNumber: 6)
      }
      if !_storage._ccAddresses.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ccAddresses, fieldNumber: 7)
      }
      if !_storage._projectID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectID, fieldNumber: 8)
      }
      if !_storage._issues.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._issues, fieldNumber: 10)
      }
      if _storage._priority != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._priority, fieldNumber: 11)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 12)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._creatorEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creatorEmail, fieldNumber: 15)
      }
      if !_storage._category.isEmpty {
        try visitor.visitSingularStringField(value: _storage._category, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_Case, rhs: Google_Cloud_Support_Common_Case) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._component != rhs_storage._component {return false}
        if _storage._subcomponent != rhs_storage._subcomponent {return false}
        if _storage._clientTimezone != rhs_storage._clientTimezone {return false}
        if _storage._ccAddresses != rhs_storage._ccAddresses {return false}
        if _storage._projectID != rhs_storage._projectID {return false}
        if _storage._issues != rhs_storage._issues {return false}
        if _storage._priority != rhs_storage._priority {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._creatorEmail != rhs_storage._creatorEmail {return false}
        if _storage._category != rhs_storage._category {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_Case.Priority: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIORITY_UNSPECIFIED"),
    1: .same(proto: "P0"),
    2: .same(proto: "P1"),
    3: .same(proto: "P2"),
    4: .same(proto: "P3"),
    5: .same(proto: "P4"),
  ]
}

extension Google_Cloud_Support_Common_Case.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "NEW"),
    2: .same(proto: "ASSIGNED"),
    3: .same(proto: "IN_PROGRESS_GOOGLE_SUPPORT"),
    4: .same(proto: "IN_PROGRESS_GOOGLE_ENG"),
    5: .same(proto: "IN_PROGRESS_KNOWN_ISSUE"),
    6: .same(proto: "WAITING_FOR_CUSTOMER_RESPONSE"),
    7: .same(proto: "SOLUTION_OFFERED"),
    8: .same(proto: "CLOSED"),
  ]
}

extension Google_Cloud_Support_Common_CustomerIssue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomerIssue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "issue_id"),
    2: .same(proto: "state"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "resolve_time"),
    5: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.issueID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._resolveTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.issueID.isEmpty {
      try visitor.visitSingularStringField(value: self.issueID, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._resolveTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_CustomerIssue, rhs: Google_Cloud_Support_Common_CustomerIssue) -> Bool {
    if lhs.issueID != rhs.issueID {return false}
    if lhs.state != rhs.state {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._resolveTime != rhs._resolveTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_CustomerIssue.IssueState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ISSUE_STATE_UNSPECIFIED"),
    1: .same(proto: "OPEN"),
    2: .same(proto: "IN_PROGRESS"),
    3: .same(proto: "FIXED"),
    4: .same(proto: "WONT_FIX"),
    5: .same(proto: "VERIFIED"),
  ]
}

extension Google_Cloud_Support_Common_SupportRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SupportRole"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "role"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.role) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if self.role != .unspecified {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_SupportRole, rhs: Google_Cloud_Support_Common_SupportRole) -> Bool {
    if lhs.email != rhs.email {return false}
    if lhs.role != rhs.role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_SupportRole.Role: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLE_UNSPECIFIED"),
    1: .same(proto: "BASIC"),
    2: .same(proto: "DEVELOPER"),
    3: .same(proto: "OPERATION"),
    4: .same(proto: "SITE_RELIABILITY"),
  ]
}

extension Google_Cloud_Support_Common_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "create_time"),
    3: .same(proto: "author"),
    4: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.author) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_Comment, rhs: Google_Cloud_Support_Common_Comment) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.author != rhs.author {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_IssueTaxonomy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IssueTaxonomy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "categories"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Support_Common_IssueTaxonomy.Category>.self, value: &self.categories) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.categories.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Support_Common_IssueTaxonomy.Category>.self, value: self.categories, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_IssueTaxonomy, rhs: Google_Cloud_Support_Common_IssueTaxonomy) -> Bool {
    if lhs.categories != rhs.categories {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_IssueTaxonomy.Component: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Support_Common_IssueTaxonomy.protoMessageName + ".Component"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "languages"),
    3: .same(proto: "template"),
    4: .same(proto: "subcomponents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.languages) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.template) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.subcomponents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if !self.languages.isEmpty {
      try visitor.visitRepeatedStringField(value: self.languages, fieldNumber: 2)
    }
    if !self.template.isEmpty {
      try visitor.visitSingularStringField(value: self.template, fieldNumber: 3)
    }
    if !self.subcomponents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subcomponents, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_IssueTaxonomy.Component, rhs: Google_Cloud_Support_Common_IssueTaxonomy.Component) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.languages != rhs.languages {return false}
    if lhs.template != rhs.template {return false}
    if lhs.subcomponents != rhs.subcomponents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Support_Common_IssueTaxonomy.Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Support_Common_IssueTaxonomy.protoMessageName + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "components"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Support_Common_IssueTaxonomy.Component>.self, value: &self.components) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if !self.components.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Support_Common_IssueTaxonomy.Component>.self, value: self.components, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Support_Common_IssueTaxonomy.Category, rhs: Google_Cloud_Support_Common_IssueTaxonomy.Category) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.components != rhs.components {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
