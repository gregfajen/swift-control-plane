//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/scheduler/v1beta1/cloudscheduler.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Scheduler_V1beta1_CloudSchedulerClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Scheduler_V1beta1_CloudSchedulerClientProtocol: GRPCClient {
  func listJobs(
    _ request: Google_Cloud_Scheduler_V1beta1_ListJobsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_ListJobsRequest, Google_Cloud_Scheduler_V1beta1_ListJobsResponse>

  func getJob(
    _ request: Google_Cloud_Scheduler_V1beta1_GetJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_GetJobRequest, Google_Cloud_Scheduler_V1beta1_Job>

  func createJob(
    _ request: Google_Cloud_Scheduler_V1beta1_CreateJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_CreateJobRequest, Google_Cloud_Scheduler_V1beta1_Job>

  func updateJob(
    _ request: Google_Cloud_Scheduler_V1beta1_UpdateJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_UpdateJobRequest, Google_Cloud_Scheduler_V1beta1_Job>

  func deleteJob(
    _ request: Google_Cloud_Scheduler_V1beta1_DeleteJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_DeleteJobRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func pauseJob(
    _ request: Google_Cloud_Scheduler_V1beta1_PauseJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_PauseJobRequest, Google_Cloud_Scheduler_V1beta1_Job>

  func resumeJob(
    _ request: Google_Cloud_Scheduler_V1beta1_ResumeJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_ResumeJobRequest, Google_Cloud_Scheduler_V1beta1_Job>

  func runJob(
    _ request: Google_Cloud_Scheduler_V1beta1_RunJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_RunJobRequest, Google_Cloud_Scheduler_V1beta1_Job>

}

extension Google_Cloud_Scheduler_V1beta1_CloudSchedulerClientProtocol {

  /// Lists jobs.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListJobs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listJobs(
    _ request: Google_Cloud_Scheduler_V1beta1_ListJobsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_ListJobsRequest, Google_Cloud_Scheduler_V1beta1_ListJobsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/ListJobs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a job.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getJob(
    _ request: Google_Cloud_Scheduler_V1beta1_GetJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_GetJobRequest, Google_Cloud_Scheduler_V1beta1_Job> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/GetJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a job.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createJob(
    _ request: Google_Cloud_Scheduler_V1beta1_CreateJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_CreateJobRequest, Google_Cloud_Scheduler_V1beta1_Job> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/CreateJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a job.
  ///
  /// If successful, the updated [Job][google.cloud.scheduler.v1beta1.Job] is returned. If the job does
  /// not exist, `NOT_FOUND` is returned.
  ///
  /// If UpdateJob does not successfully return, it is possible for the
  /// job to be in an [Job.State.UPDATE_FAILED][google.cloud.scheduler.v1beta1.Job.State.UPDATE_FAILED] state. A job in this state may
  /// not be executed. If this happens, retry the UpdateJob request
  /// until a successful response is received.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateJob(
    _ request: Google_Cloud_Scheduler_V1beta1_UpdateJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_UpdateJobRequest, Google_Cloud_Scheduler_V1beta1_Job> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/UpdateJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a job.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteJob(
    _ request: Google_Cloud_Scheduler_V1beta1_DeleteJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_DeleteJobRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/DeleteJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Pauses a job.
  ///
  /// If a job is paused then the system will stop executing the job
  /// until it is re-enabled via [ResumeJob][google.cloud.scheduler.v1beta1.CloudScheduler.ResumeJob]. The
  /// state of the job is stored in [state][google.cloud.scheduler.v1beta1.Job.state]; if paused it
  /// will be set to [Job.State.PAUSED][google.cloud.scheduler.v1beta1.Job.State.PAUSED]. A job must be in [Job.State.ENABLED][google.cloud.scheduler.v1beta1.Job.State.ENABLED]
  /// to be paused.
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pauseJob(
    _ request: Google_Cloud_Scheduler_V1beta1_PauseJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_PauseJobRequest, Google_Cloud_Scheduler_V1beta1_Job> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/PauseJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Resume a job.
  ///
  /// This method reenables a job after it has been [Job.State.PAUSED][google.cloud.scheduler.v1beta1.Job.State.PAUSED]. The
  /// state of a job is stored in [Job.state][google.cloud.scheduler.v1beta1.Job.state]; after calling this method it
  /// will be set to [Job.State.ENABLED][google.cloud.scheduler.v1beta1.Job.State.ENABLED]. A job must be in
  /// [Job.State.PAUSED][google.cloud.scheduler.v1beta1.Job.State.PAUSED] to be resumed.
  ///
  /// - Parameters:
  ///   - request: Request to send to ResumeJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resumeJob(
    _ request: Google_Cloud_Scheduler_V1beta1_ResumeJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_ResumeJobRequest, Google_Cloud_Scheduler_V1beta1_Job> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/ResumeJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Forces a job to run now.
  ///
  /// When this method is called, Cloud Scheduler will dispatch the job, even
  /// if the job is already running.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func runJob(
    _ request: Google_Cloud_Scheduler_V1beta1_RunJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Scheduler_V1beta1_RunJobRequest, Google_Cloud_Scheduler_V1beta1_Job> {
    return self.makeUnaryCall(
      path: "/google.cloud.scheduler.v1beta1.CloudScheduler/RunJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Scheduler_V1beta1_CloudSchedulerClient: Google_Cloud_Scheduler_V1beta1_CloudSchedulerClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.scheduler.v1beta1.CloudScheduler service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Scheduler_V1beta1_CloudSchedulerProvider: CallHandlerProvider {
  /// Lists jobs.
  func listJobs(request: Google_Cloud_Scheduler_V1beta1_ListJobsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_ListJobsResponse>
  /// Gets a job.
  func getJob(request: Google_Cloud_Scheduler_V1beta1_GetJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_Job>
  /// Creates a job.
  func createJob(request: Google_Cloud_Scheduler_V1beta1_CreateJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_Job>
  /// Updates a job.
  ///
  /// If successful, the updated [Job][google.cloud.scheduler.v1beta1.Job] is returned. If the job does
  /// not exist, `NOT_FOUND` is returned.
  ///
  /// If UpdateJob does not successfully return, it is possible for the
  /// job to be in an [Job.State.UPDATE_FAILED][google.cloud.scheduler.v1beta1.Job.State.UPDATE_FAILED] state. A job in this state may
  /// not be executed. If this happens, retry the UpdateJob request
  /// until a successful response is received.
  func updateJob(request: Google_Cloud_Scheduler_V1beta1_UpdateJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_Job>
  /// Deletes a job.
  func deleteJob(request: Google_Cloud_Scheduler_V1beta1_DeleteJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Pauses a job.
  ///
  /// If a job is paused then the system will stop executing the job
  /// until it is re-enabled via [ResumeJob][google.cloud.scheduler.v1beta1.CloudScheduler.ResumeJob]. The
  /// state of the job is stored in [state][google.cloud.scheduler.v1beta1.Job.state]; if paused it
  /// will be set to [Job.State.PAUSED][google.cloud.scheduler.v1beta1.Job.State.PAUSED]. A job must be in [Job.State.ENABLED][google.cloud.scheduler.v1beta1.Job.State.ENABLED]
  /// to be paused.
  func pauseJob(request: Google_Cloud_Scheduler_V1beta1_PauseJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_Job>
  /// Resume a job.
  ///
  /// This method reenables a job after it has been [Job.State.PAUSED][google.cloud.scheduler.v1beta1.Job.State.PAUSED]. The
  /// state of a job is stored in [Job.state][google.cloud.scheduler.v1beta1.Job.state]; after calling this method it
  /// will be set to [Job.State.ENABLED][google.cloud.scheduler.v1beta1.Job.State.ENABLED]. A job must be in
  /// [Job.State.PAUSED][google.cloud.scheduler.v1beta1.Job.State.PAUSED] to be resumed.
  func resumeJob(request: Google_Cloud_Scheduler_V1beta1_ResumeJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_Job>
  /// Forces a job to run now.
  ///
  /// When this method is called, Cloud Scheduler will dispatch the job, even
  /// if the job is already running.
  func runJob(request: Google_Cloud_Scheduler_V1beta1_RunJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Scheduler_V1beta1_Job>
}

extension Google_Cloud_Scheduler_V1beta1_CloudSchedulerProvider {
  public var serviceName: Substring { return "google.cloud.scheduler.v1beta1.CloudScheduler" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListJobs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listJobs(request: request, context: context)
        }
      }

    case "GetJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getJob(request: request, context: context)
        }
      }

    case "CreateJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createJob(request: request, context: context)
        }
      }

    case "UpdateJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateJob(request: request, context: context)
        }
      }

    case "DeleteJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteJob(request: request, context: context)
        }
      }

    case "PauseJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pauseJob(request: request, context: context)
        }
      }

    case "ResumeJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.resumeJob(request: request, context: context)
        }
      }

    case "RunJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runJob(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

