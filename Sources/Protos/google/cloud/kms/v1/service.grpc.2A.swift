//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/kms/v1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Kms_V1_KeyManagementServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Kms_V1_KeyManagementServiceClientProtocol: GRPCClient {
  func listKeyRings(
    _ request: Google_Cloud_Kms_V1_ListKeyRingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListKeyRingsRequest, Google_Cloud_Kms_V1_ListKeyRingsResponse>

  func listCryptoKeys(
    _ request: Google_Cloud_Kms_V1_ListCryptoKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListCryptoKeysRequest, Google_Cloud_Kms_V1_ListCryptoKeysResponse>

  func listCryptoKeyVersions(
    _ request: Google_Cloud_Kms_V1_ListCryptoKeyVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListCryptoKeyVersionsRequest, Google_Cloud_Kms_V1_ListCryptoKeyVersionsResponse>

  func listImportJobs(
    _ request: Google_Cloud_Kms_V1_ListImportJobsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListImportJobsRequest, Google_Cloud_Kms_V1_ListImportJobsResponse>

  func getKeyRing(
    _ request: Google_Cloud_Kms_V1_GetKeyRingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetKeyRingRequest, Google_Cloud_Kms_V1_KeyRing>

  func getCryptoKey(
    _ request: Google_Cloud_Kms_V1_GetCryptoKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetCryptoKeyRequest, Google_Cloud_Kms_V1_CryptoKey>

  func getCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_GetCryptoKeyVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion>

  func getPublicKey(
    _ request: Google_Cloud_Kms_V1_GetPublicKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetPublicKeyRequest, Google_Cloud_Kms_V1_PublicKey>

  func getImportJob(
    _ request: Google_Cloud_Kms_V1_GetImportJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetImportJobRequest, Google_Cloud_Kms_V1_ImportJob>

  func createKeyRing(
    _ request: Google_Cloud_Kms_V1_CreateKeyRingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateKeyRingRequest, Google_Cloud_Kms_V1_KeyRing>

  func createCryptoKey(
    _ request: Google_Cloud_Kms_V1_CreateCryptoKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateCryptoKeyRequest, Google_Cloud_Kms_V1_CryptoKey>

  func createCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_CreateCryptoKeyVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion>

  func importCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_ImportCryptoKeyVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_ImportCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion>

  func createImportJob(
    _ request: Google_Cloud_Kms_V1_CreateImportJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateImportJobRequest, Google_Cloud_Kms_V1_ImportJob>

  func updateCryptoKey(
    _ request: Google_Cloud_Kms_V1_UpdateCryptoKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_UpdateCryptoKeyRequest, Google_Cloud_Kms_V1_CryptoKey>

  func updateCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_UpdateCryptoKeyVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_UpdateCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion>

  func encrypt(
    _ request: Google_Cloud_Kms_V1_EncryptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_EncryptRequest, Google_Cloud_Kms_V1_EncryptResponse>

  func decrypt(
    _ request: Google_Cloud_Kms_V1_DecryptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_DecryptRequest, Google_Cloud_Kms_V1_DecryptResponse>

  func asymmetricSign(
    _ request: Google_Cloud_Kms_V1_AsymmetricSignRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_AsymmetricSignRequest, Google_Cloud_Kms_V1_AsymmetricSignResponse>

  func asymmetricDecrypt(
    _ request: Google_Cloud_Kms_V1_AsymmetricDecryptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_AsymmetricDecryptRequest, Google_Cloud_Kms_V1_AsymmetricDecryptResponse>

  func updateCryptoKeyPrimaryVersion(
    _ request: Google_Cloud_Kms_V1_UpdateCryptoKeyPrimaryVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_UpdateCryptoKeyPrimaryVersionRequest, Google_Cloud_Kms_V1_CryptoKey>

  func destroyCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_DestroyCryptoKeyVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_DestroyCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion>

  func restoreCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_RestoreCryptoKeyVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Kms_V1_RestoreCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion>

}

extension Google_Cloud_Kms_V1_KeyManagementServiceClientProtocol {

  /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListKeyRings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listKeyRings(
    _ request: Google_Cloud_Kms_V1_ListKeyRingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListKeyRingsRequest, Google_Cloud_Kms_V1_ListKeyRingsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/ListKeyRings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCryptoKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCryptoKeys(
    _ request: Google_Cloud_Kms_V1_ListCryptoKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListCryptoKeysRequest, Google_Cloud_Kms_V1_ListCryptoKeysResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/ListCryptoKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCryptoKeyVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCryptoKeyVersions(
    _ request: Google_Cloud_Kms_V1_ListCryptoKeyVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListCryptoKeyVersionsRequest, Google_Cloud_Kms_V1_ListCryptoKeyVersionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/ListCryptoKeyVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
  ///
  /// - Parameters:
  ///   - request: Request to send to ListImportJobs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listImportJobs(
    _ request: Google_Cloud_Kms_V1_ListImportJobsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_ListImportJobsRequest, Google_Cloud_Kms_V1_ListImportJobsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/ListImportJobs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetKeyRing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getKeyRing(
    _ request: Google_Cloud_Kms_V1_GetKeyRingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetKeyRingRequest, Google_Cloud_Kms_V1_KeyRing> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/GetKeyRing",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
  /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCryptoKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCryptoKey(
    _ request: Google_Cloud_Kms_V1_GetCryptoKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetCryptoKeyRequest, Google_Cloud_Kms_V1_CryptoKey> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/GetCryptoKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCryptoKeyVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_GetCryptoKeyVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/GetCryptoKeyVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
  /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
  /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
  /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPublicKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPublicKey(
    _ request: Google_Cloud_Kms_V1_GetPublicKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetPublicKeyRequest, Google_Cloud_Kms_V1_PublicKey> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/GetPublicKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetImportJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getImportJob(
    _ request: Google_Cloud_Kms_V1_GetImportJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_GetImportJobRequest, Google_Cloud_Kms_V1_ImportJob> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/GetImportJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateKeyRing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createKeyRing(
    _ request: Google_Cloud_Kms_V1_CreateKeyRingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateKeyRingRequest, Google_Cloud_Kms_V1_KeyRing> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/CreateKeyRing",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
  ///
  /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
  /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
  /// are required.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCryptoKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCryptoKey(
    _ request: Google_Cloud_Kms_V1_CreateCryptoKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateCryptoKeyRequest, Google_Cloud_Kms_V1_CryptoKey> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/CreateCryptoKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
  ///
  /// The server will assign the next sequential id. If unset,
  /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
  /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCryptoKeyVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_CreateCryptoKeyVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/CreateCryptoKeyVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
  /// wrapped key material provided in the request.
  ///
  /// The version ID will be assigned the next sequential id within the
  /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportCryptoKeyVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func importCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_ImportCryptoKeyVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_ImportCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/ImportCryptoKeyVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
  ///
  /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateImportJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createImportJob(
    _ request: Google_Cloud_Kms_V1_CreateImportJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_CreateImportJobRequest, Google_Cloud_Kms_V1_ImportJob> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/CreateImportJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCryptoKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCryptoKey(
    _ request: Google_Cloud_Kms_V1_UpdateCryptoKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_UpdateCryptoKeyRequest, Google_Cloud_Kms_V1_CryptoKey> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/UpdateCryptoKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
  ///
  /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
  /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
  /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
  /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
  /// move between other states.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCryptoKeyVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_UpdateCryptoKeyVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_UpdateCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/UpdateCryptoKeyVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
  /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
  /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
  ///
  /// - Parameters:
  ///   - request: Request to send to Encrypt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func encrypt(
    _ request: Google_Cloud_Kms_V1_EncryptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_EncryptRequest, Google_Cloud_Kms_V1_EncryptResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/Encrypt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
  /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
  ///
  /// - Parameters:
  ///   - request: Request to send to Decrypt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func decrypt(
    _ request: Google_Cloud_Kms_V1_DecryptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_DecryptRequest, Google_Cloud_Kms_V1_DecryptResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/Decrypt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
  /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
  /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
  ///
  /// - Parameters:
  ///   - request: Request to send to AsymmetricSign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func asymmetricSign(
    _ request: Google_Cloud_Kms_V1_AsymmetricSignRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_AsymmetricSignRequest, Google_Cloud_Kms_V1_AsymmetricSignResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/AsymmetricSign",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Decrypts data that was encrypted with a public key retrieved from
  /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
  /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
  ///
  /// - Parameters:
  ///   - request: Request to send to AsymmetricDecrypt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func asymmetricDecrypt(
    _ request: Google_Cloud_Kms_V1_AsymmetricDecryptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_AsymmetricDecryptRequest, Google_Cloud_Kms_V1_AsymmetricDecryptResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/AsymmetricDecrypt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
  ///
  /// Returns an error if called on an asymmetric key.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCryptoKeyPrimaryVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCryptoKeyPrimaryVersion(
    _ request: Google_Cloud_Kms_V1_UpdateCryptoKeyPrimaryVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_UpdateCryptoKeyPrimaryVersionRequest, Google_Cloud_Kms_V1_CryptoKey> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/UpdateCryptoKeyPrimaryVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
  ///
  /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
  /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
  /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
  /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
  /// will be changed to
  /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
  /// material will be irrevocably destroyed.
  ///
  /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
  /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
  ///
  /// - Parameters:
  ///   - request: Request to send to DestroyCryptoKeyVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func destroyCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_DestroyCryptoKeyVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_DestroyCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/DestroyCryptoKeyVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
  /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
  /// state.
  ///
  /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
  /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
  /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
  ///
  /// - Parameters:
  ///   - request: Request to send to RestoreCryptoKeyVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func restoreCryptoKeyVersion(
    _ request: Google_Cloud_Kms_V1_RestoreCryptoKeyVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Kms_V1_RestoreCryptoKeyVersionRequest, Google_Cloud_Kms_V1_CryptoKeyVersion> {
    return self.makeUnaryCall(
      path: "/google.cloud.kms.v1.KeyManagementService/RestoreCryptoKeyVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Kms_V1_KeyManagementServiceClient: Google_Cloud_Kms_V1_KeyManagementServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.kms.v1.KeyManagementService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Kms_V1_KeyManagementServiceProvider: CallHandlerProvider {
  /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
  func listKeyRings(request: Google_Cloud_Kms_V1_ListKeyRingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_ListKeyRingsResponse>
  /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
  func listCryptoKeys(request: Google_Cloud_Kms_V1_ListCryptoKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_ListCryptoKeysResponse>
  /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
  func listCryptoKeyVersions(request: Google_Cloud_Kms_V1_ListCryptoKeyVersionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_ListCryptoKeyVersionsResponse>
  /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
  func listImportJobs(request: Google_Cloud_Kms_V1_ListImportJobsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_ListImportJobsResponse>
  /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
  func getKeyRing(request: Google_Cloud_Kms_V1_GetKeyRingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_KeyRing>
  /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
  /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
  func getCryptoKey(request: Google_Cloud_Kms_V1_GetCryptoKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKey>
  /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
  func getCryptoKeyVersion(request: Google_Cloud_Kms_V1_GetCryptoKeyVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKeyVersion>
  /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
  /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
  /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
  /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
  func getPublicKey(request: Google_Cloud_Kms_V1_GetPublicKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_PublicKey>
  /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
  func getImportJob(request: Google_Cloud_Kms_V1_GetImportJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_ImportJob>
  /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
  func createKeyRing(request: Google_Cloud_Kms_V1_CreateKeyRingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_KeyRing>
  /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
  ///
  /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
  /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
  /// are required.
  func createCryptoKey(request: Google_Cloud_Kms_V1_CreateCryptoKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKey>
  /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
  ///
  /// The server will assign the next sequential id. If unset,
  /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
  /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
  func createCryptoKeyVersion(request: Google_Cloud_Kms_V1_CreateCryptoKeyVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKeyVersion>
  /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
  /// wrapped key material provided in the request.
  ///
  /// The version ID will be assigned the next sequential id within the
  /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
  func importCryptoKeyVersion(request: Google_Cloud_Kms_V1_ImportCryptoKeyVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKeyVersion>
  /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
  ///
  /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
  func createImportJob(request: Google_Cloud_Kms_V1_CreateImportJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_ImportJob>
  /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
  func updateCryptoKey(request: Google_Cloud_Kms_V1_UpdateCryptoKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKey>
  /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
  ///
  /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
  /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
  /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
  /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
  /// move between other states.
  func updateCryptoKeyVersion(request: Google_Cloud_Kms_V1_UpdateCryptoKeyVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKeyVersion>
  /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
  /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
  /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
  func encrypt(request: Google_Cloud_Kms_V1_EncryptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_EncryptResponse>
  /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
  /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
  func decrypt(request: Google_Cloud_Kms_V1_DecryptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_DecryptResponse>
  /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
  /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
  /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
  func asymmetricSign(request: Google_Cloud_Kms_V1_AsymmetricSignRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_AsymmetricSignResponse>
  /// Decrypts data that was encrypted with a public key retrieved from
  /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
  /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
  func asymmetricDecrypt(request: Google_Cloud_Kms_V1_AsymmetricDecryptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_AsymmetricDecryptResponse>
  /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
  ///
  /// Returns an error if called on an asymmetric key.
  func updateCryptoKeyPrimaryVersion(request: Google_Cloud_Kms_V1_UpdateCryptoKeyPrimaryVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKey>
  /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
  ///
  /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
  /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
  /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
  /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
  /// will be changed to
  /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
  /// material will be irrevocably destroyed.
  ///
  /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
  /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
  func destroyCryptoKeyVersion(request: Google_Cloud_Kms_V1_DestroyCryptoKeyVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKeyVersion>
  /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
  /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
  /// state.
  ///
  /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
  /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
  /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
  func restoreCryptoKeyVersion(request: Google_Cloud_Kms_V1_RestoreCryptoKeyVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Kms_V1_CryptoKeyVersion>
}

extension Google_Cloud_Kms_V1_KeyManagementServiceProvider {
  public var serviceName: Substring { return "google.cloud.kms.v1.KeyManagementService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListKeyRings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listKeyRings(request: request, context: context)
        }
      }

    case "ListCryptoKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCryptoKeys(request: request, context: context)
        }
      }

    case "ListCryptoKeyVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCryptoKeyVersions(request: request, context: context)
        }
      }

    case "ListImportJobs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listImportJobs(request: request, context: context)
        }
      }

    case "GetKeyRing":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getKeyRing(request: request, context: context)
        }
      }

    case "GetCryptoKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCryptoKey(request: request, context: context)
        }
      }

    case "GetCryptoKeyVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCryptoKeyVersion(request: request, context: context)
        }
      }

    case "GetPublicKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getPublicKey(request: request, context: context)
        }
      }

    case "GetImportJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getImportJob(request: request, context: context)
        }
      }

    case "CreateKeyRing":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createKeyRing(request: request, context: context)
        }
      }

    case "CreateCryptoKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCryptoKey(request: request, context: context)
        }
      }

    case "CreateCryptoKeyVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createCryptoKeyVersion(request: request, context: context)
        }
      }

    case "ImportCryptoKeyVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.importCryptoKeyVersion(request: request, context: context)
        }
      }

    case "CreateImportJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createImportJob(request: request, context: context)
        }
      }

    case "UpdateCryptoKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCryptoKey(request: request, context: context)
        }
      }

    case "UpdateCryptoKeyVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCryptoKeyVersion(request: request, context: context)
        }
      }

    case "Encrypt":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.encrypt(request: request, context: context)
        }
      }

    case "Decrypt":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.decrypt(request: request, context: context)
        }
      }

    case "AsymmetricSign":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.asymmetricSign(request: request, context: context)
        }
      }

    case "AsymmetricDecrypt":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.asymmetricDecrypt(request: request, context: context)
        }
      }

    case "UpdateCryptoKeyPrimaryVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCryptoKeyPrimaryVersion(request: request, context: context)
        }
      }

    case "DestroyCryptoKeyVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.destroyCryptoKeyVersion(request: request, context: context)
        }
      }

    case "RestoreCryptoKeyVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.restoreCryptoKeyVersion(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

