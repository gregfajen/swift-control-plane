//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/language/v1beta1/language_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Language_V1beta1_LanguageServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Language_V1beta1_LanguageServiceClientProtocol: GRPCClient {
  func analyzeSentiment(
    _ request: Google_Cloud_Language_V1beta1_AnalyzeSentimentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnalyzeSentimentRequest, Google_Cloud_Language_V1beta1_AnalyzeSentimentResponse>

  func analyzeEntities(
    _ request: Google_Cloud_Language_V1beta1_AnalyzeEntitiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnalyzeEntitiesRequest, Google_Cloud_Language_V1beta1_AnalyzeEntitiesResponse>

  func analyzeSyntax(
    _ request: Google_Cloud_Language_V1beta1_AnalyzeSyntaxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnalyzeSyntaxRequest, Google_Cloud_Language_V1beta1_AnalyzeSyntaxResponse>

  func annotateText(
    _ request: Google_Cloud_Language_V1beta1_AnnotateTextRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnnotateTextRequest, Google_Cloud_Language_V1beta1_AnnotateTextResponse>

}

extension Google_Cloud_Language_V1beta1_LanguageServiceClientProtocol {

  /// Analyzes the sentiment of the provided text.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnalyzeSentiment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func analyzeSentiment(
    _ request: Google_Cloud_Language_V1beta1_AnalyzeSentimentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnalyzeSentimentRequest, Google_Cloud_Language_V1beta1_AnalyzeSentimentResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.language.v1beta1.LanguageService/AnalyzeSentiment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Finds named entities (currently proper names and common nouns) in the text
  /// along with entity types, salience, mentions for each entity, and
  /// other properties.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnalyzeEntities.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func analyzeEntities(
    _ request: Google_Cloud_Language_V1beta1_AnalyzeEntitiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnalyzeEntitiesRequest, Google_Cloud_Language_V1beta1_AnalyzeEntitiesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.language.v1beta1.LanguageService/AnalyzeEntities",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Analyzes the syntax of the text and provides sentence boundaries and
  /// tokenization along with part of speech tags, dependency trees, and other
  /// properties.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnalyzeSyntax.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func analyzeSyntax(
    _ request: Google_Cloud_Language_V1beta1_AnalyzeSyntaxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnalyzeSyntaxRequest, Google_Cloud_Language_V1beta1_AnalyzeSyntaxResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.language.v1beta1.LanguageService/AnalyzeSyntax",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// A convenience method that provides all the features that analyzeSentiment,
  /// analyzeEntities, and analyzeSyntax provide in one call.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnnotateText.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func annotateText(
    _ request: Google_Cloud_Language_V1beta1_AnnotateTextRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Language_V1beta1_AnnotateTextRequest, Google_Cloud_Language_V1beta1_AnnotateTextResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.language.v1beta1.LanguageService/AnnotateText",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Language_V1beta1_LanguageServiceClient: Google_Cloud_Language_V1beta1_LanguageServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.language.v1beta1.LanguageService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Language_V1beta1_LanguageServiceProvider: CallHandlerProvider {
  /// Analyzes the sentiment of the provided text.
  func analyzeSentiment(request: Google_Cloud_Language_V1beta1_AnalyzeSentimentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Language_V1beta1_AnalyzeSentimentResponse>
  /// Finds named entities (currently proper names and common nouns) in the text
  /// along with entity types, salience, mentions for each entity, and
  /// other properties.
  func analyzeEntities(request: Google_Cloud_Language_V1beta1_AnalyzeEntitiesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Language_V1beta1_AnalyzeEntitiesResponse>
  /// Analyzes the syntax of the text and provides sentence boundaries and
  /// tokenization along with part of speech tags, dependency trees, and other
  /// properties.
  func analyzeSyntax(request: Google_Cloud_Language_V1beta1_AnalyzeSyntaxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Language_V1beta1_AnalyzeSyntaxResponse>
  /// A convenience method that provides all the features that analyzeSentiment,
  /// analyzeEntities, and analyzeSyntax provide in one call.
  func annotateText(request: Google_Cloud_Language_V1beta1_AnnotateTextRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Language_V1beta1_AnnotateTextResponse>
}

extension Google_Cloud_Language_V1beta1_LanguageServiceProvider {
  public var serviceName: Substring { return "google.cloud.language.v1beta1.LanguageService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "AnalyzeSentiment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.analyzeSentiment(request: request, context: context)
        }
      }

    case "AnalyzeEntities":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.analyzeEntities(request: request, context: context)
        }
      }

    case "AnalyzeSyntax":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.analyzeSyntax(request: request, context: context)
        }
      }

    case "AnnotateText":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.annotateText(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

