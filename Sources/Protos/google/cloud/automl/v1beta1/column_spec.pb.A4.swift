// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1beta1/column_spec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were
/// given on import .
/// Used by:
///   *   Tables
public struct Google_Cloud_Automl_V1beta1_ColumnSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The resource name of the column specs.
  /// Form:
  ///
  /// `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`
  public var name: String = String()

  /// The data type of elements stored in the column.
  public var dataType: Google_Cloud_Automl_V1beta1_DataType {
    get {return _dataType ?? Google_Cloud_Automl_V1beta1_DataType()}
    set {_dataType = newValue}
  }
  /// Returns true if `dataType` has been explicitly set.
  public var hasDataType: Bool {return self._dataType != nil}
  /// Clears the value of `dataType`. Subsequent reads from it will return its default value.
  public mutating func clearDataType() {self._dataType = nil}

  /// Output only. The name of the column to show in the interface. The name can
  /// be up to 100 characters long and can consist only of ASCII Latin letters
  /// A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and
  /// must start with a letter or a digit.
  public var displayName: String = String()

  /// Output only. Stats of the series of values in the column.
  /// This field may be stale, see the ancestor's
  /// Dataset.tables_dataset_metadata.stats_update_time field
  /// for the timestamp at which these stats were last updated.
  public var dataStats: Google_Cloud_Automl_V1beta1_DataStats {
    get {return _dataStats ?? Google_Cloud_Automl_V1beta1_DataStats()}
    set {_dataStats = newValue}
  }
  /// Returns true if `dataStats` has been explicitly set.
  public var hasDataStats: Bool {return self._dataStats != nil}
  /// Clears the value of `dataStats`. Subsequent reads from it will return its default value.
  public mutating func clearDataStats() {self._dataStats = nil}

  /// Deprecated.
  public var topCorrelatedColumns: [Google_Cloud_Automl_V1beta1_ColumnSpec.CorrelatedColumn] = []

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Identifies the table's column, and its correlation with the column this
  /// ColumnSpec describes.
  public struct CorrelatedColumn {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The column_spec_id of the correlated column, which belongs to the same
    /// table as the in-context column.
    public var columnSpecID: String = String()

    /// Correlation between this and the in-context column.
    public var correlationStats: Google_Cloud_Automl_V1beta1_CorrelationStats {
      get {return _correlationStats ?? Google_Cloud_Automl_V1beta1_CorrelationStats()}
      set {_correlationStats = newValue}
    }
    /// Returns true if `correlationStats` has been explicitly set.
    public var hasCorrelationStats: Bool {return self._correlationStats != nil}
    /// Clears the value of `correlationStats`. Subsequent reads from it will return its default value.
    public mutating func clearCorrelationStats() {self._correlationStats = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _correlationStats: Google_Cloud_Automl_V1beta1_CorrelationStats? = nil
  }

  public init() {}

  fileprivate var _dataType: Google_Cloud_Automl_V1beta1_DataType? = nil
  fileprivate var _dataStats: Google_Cloud_Automl_V1beta1_DataStats? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1beta1"

extension Google_Cloud_Automl_V1beta1_ColumnSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColumnSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "data_type"),
    3: .standard(proto: "display_name"),
    4: .standard(proto: "data_stats"),
    5: .standard(proto: "top_correlated_columns"),
    6: .same(proto: "etag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dataType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._dataStats) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.topCorrelatedColumns) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._dataType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    if let v = self._dataStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.topCorrelatedColumns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.topCorrelatedColumns, fieldNumber: 5)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1beta1_ColumnSpec, rhs: Google_Cloud_Automl_V1beta1_ColumnSpec) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._dataType != rhs._dataType {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._dataStats != rhs._dataStats {return false}
    if lhs.topCorrelatedColumns != rhs.topCorrelatedColumns {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1beta1_ColumnSpec.CorrelatedColumn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Automl_V1beta1_ColumnSpec.protoMessageName + ".CorrelatedColumn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "column_spec_id"),
    2: .standard(proto: "correlation_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.columnSpecID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._correlationStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.columnSpecID.isEmpty {
      try visitor.visitSingularStringField(value: self.columnSpecID, fieldNumber: 1)
    }
    if let v = self._correlationStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1beta1_ColumnSpec.CorrelatedColumn, rhs: Google_Cloud_Automl_V1beta1_ColumnSpec.CorrelatedColumn) -> Bool {
    if lhs.columnSpecID != rhs.columnSpecID {return false}
    if lhs._correlationStats != rhs._correlationStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
