// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1beta1/regression.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metrics for regression problems.
public struct Google_Cloud_Automl_V1beta1_RegressionEvaluationMetrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Root Mean Squared Error (RMSE).
  public var rootMeanSquaredError: Float = 0

  /// Output only. Mean Absolute Error (MAE).
  public var meanAbsoluteError: Float = 0

  /// Output only. Mean absolute percentage error. Only set if all ground truth
  /// values are are positive.
  public var meanAbsolutePercentageError: Float = 0

  /// Output only. R squared.
  public var rSquared: Float = 0

  /// Output only. Root mean squared log error.
  public var rootMeanSquaredLogError: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1beta1"

extension Google_Cloud_Automl_V1beta1_RegressionEvaluationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegressionEvaluationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "root_mean_squared_error"),
    2: .standard(proto: "mean_absolute_error"),
    3: .standard(proto: "mean_absolute_percentage_error"),
    4: .standard(proto: "r_squared"),
    5: .standard(proto: "root_mean_squared_log_error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.rootMeanSquaredError) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.meanAbsoluteError) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.meanAbsolutePercentageError) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.rSquared) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.rootMeanSquaredLogError) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rootMeanSquaredError != 0 {
      try visitor.visitSingularFloatField(value: self.rootMeanSquaredError, fieldNumber: 1)
    }
    if self.meanAbsoluteError != 0 {
      try visitor.visitSingularFloatField(value: self.meanAbsoluteError, fieldNumber: 2)
    }
    if self.meanAbsolutePercentageError != 0 {
      try visitor.visitSingularFloatField(value: self.meanAbsolutePercentageError, fieldNumber: 3)
    }
    if self.rSquared != 0 {
      try visitor.visitSingularFloatField(value: self.rSquared, fieldNumber: 4)
    }
    if self.rootMeanSquaredLogError != 0 {
      try visitor.visitSingularFloatField(value: self.rootMeanSquaredLogError, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1beta1_RegressionEvaluationMetrics, rhs: Google_Cloud_Automl_V1beta1_RegressionEvaluationMetrics) -> Bool {
    if lhs.rootMeanSquaredError != rhs.rootMeanSquaredError {return false}
    if lhs.meanAbsoluteError != rhs.meanAbsoluteError {return false}
    if lhs.meanAbsolutePercentageError != rhs.meanAbsolutePercentageError {return false}
    if lhs.rSquared != rhs.rSquared {return false}
    if lhs.rootMeanSquaredLogError != rhs.rootMeanSquaredLogError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
