// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1beta1/table_spec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A specification of a relational table.
/// The table's schema is represented via its child column specs. It is
/// pre-populated as part of ImportData by schema inference algorithm, the
/// version of which is a required parameter of ImportData InputConfig.
/// Note: While working with a table, at times the schema may be
/// inconsistent with the data in the table (e.g. string in a FLOAT64 column).
/// The consistency validation is done upon creation of a model.
/// Used by:
///   *   Tables
public struct Google_Cloud_Automl_V1beta1_TableSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The resource name of the table spec.
  /// Form:
  ///
  /// `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`
  public var name: String = String()

  /// column_spec_id of the time column. Only used if the parent dataset's
  /// ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE
  /// and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and
  /// those in between to VALIDATE.
  /// Required type: TIMESTAMP.
  /// If both this column and ml_use_column are not set, then ML use of all rows
  /// will be assigned by AutoML. NOTE: Updates of this field will instantly
  /// affect any other users concurrently working with the dataset.
  public var timeColumnSpecID: String = String()

  /// Output only. The number of rows (i.e. examples) in the table.
  public var rowCount: Int64 = 0

  /// Output only. The number of valid rows (i.e. without values that don't match
  /// DataType-s of their columns).
  public var validRowCount: Int64 = 0

  /// Output only. The number of columns of the table. That is, the number of
  /// child ColumnSpec-s.
  public var columnCount: Int64 = 0

  /// Output only. Input configs via which data currently residing in the table
  /// had been imported.
  public var inputConfigs: [Google_Cloud_Automl_V1beta1_InputConfig] = []

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1beta1"

extension Google_Cloud_Automl_V1beta1_TableSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "time_column_spec_id"),
    3: .standard(proto: "row_count"),
    4: .standard(proto: "valid_row_count"),
    7: .standard(proto: "column_count"),
    5: .standard(proto: "input_configs"),
    6: .same(proto: "etag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.timeColumnSpecID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rowCount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.validRowCount) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.inputConfigs) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.columnCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.timeColumnSpecID.isEmpty {
      try visitor.visitSingularStringField(value: self.timeColumnSpecID, fieldNumber: 2)
    }
    if self.rowCount != 0 {
      try visitor.visitSingularInt64Field(value: self.rowCount, fieldNumber: 3)
    }
    if self.validRowCount != 0 {
      try visitor.visitSingularInt64Field(value: self.validRowCount, fieldNumber: 4)
    }
    if !self.inputConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputConfigs, fieldNumber: 5)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 6)
    }
    if self.columnCount != 0 {
      try visitor.visitSingularInt64Field(value: self.columnCount, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1beta1_TableSpec, rhs: Google_Cloud_Automl_V1beta1_TableSpec) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.timeColumnSpecID != rhs.timeColumnSpecID {return false}
    if lhs.rowCount != rhs.rowCount {return false}
    if lhs.validRowCount != rhs.validRowCount {return false}
    if lhs.columnCount != rhs.columnCount {return false}
    if lhs.inputConfigs != rhs.inputConfigs {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
