// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1/operations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata used across all long running operations returned by AutoML API.
public struct Google_Cloud_Automl_V1_OperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ouptut only. Details of specific operation. Even if this field is empty,
  /// the presence allows to distinguish different types of operations.
  public var details: Google_Cloud_Automl_V1_OperationMetadata.OneOf_Details? = nil

  /// Details of a Delete operation.
  public var deleteDetails: Google_Cloud_Automl_V1_DeleteOperationMetadata {
    get {
      if case .deleteDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_DeleteOperationMetadata()
    }
    set {details = .deleteDetails(newValue)}
  }

  /// Details of a DeployModel operation.
  public var deployModelDetails: Google_Cloud_Automl_V1_DeployModelOperationMetadata {
    get {
      if case .deployModelDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_DeployModelOperationMetadata()
    }
    set {details = .deployModelDetails(newValue)}
  }

  /// Details of an UndeployModel operation.
  public var undeployModelDetails: Google_Cloud_Automl_V1_UndeployModelOperationMetadata {
    get {
      if case .undeployModelDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_UndeployModelOperationMetadata()
    }
    set {details = .undeployModelDetails(newValue)}
  }

  /// Details of CreateModel operation.
  public var createModelDetails: Google_Cloud_Automl_V1_CreateModelOperationMetadata {
    get {
      if case .createModelDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_CreateModelOperationMetadata()
    }
    set {details = .createModelDetails(newValue)}
  }

  /// Details of CreateDataset operation.
  public var createDatasetDetails: Google_Cloud_Automl_V1_CreateDatasetOperationMetadata {
    get {
      if case .createDatasetDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_CreateDatasetOperationMetadata()
    }
    set {details = .createDatasetDetails(newValue)}
  }

  /// Details of ImportData operation.
  public var importDataDetails: Google_Cloud_Automl_V1_ImportDataOperationMetadata {
    get {
      if case .importDataDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_ImportDataOperationMetadata()
    }
    set {details = .importDataDetails(newValue)}
  }

  /// Details of BatchPredict operation.
  public var batchPredictDetails: Google_Cloud_Automl_V1_BatchPredictOperationMetadata {
    get {
      if case .batchPredictDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_BatchPredictOperationMetadata()
    }
    set {details = .batchPredictDetails(newValue)}
  }

  /// Details of ExportData operation.
  public var exportDataDetails: Google_Cloud_Automl_V1_ExportDataOperationMetadata {
    get {
      if case .exportDataDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_ExportDataOperationMetadata()
    }
    set {details = .exportDataDetails(newValue)}
  }

  /// Details of ExportModel operation.
  public var exportModelDetails: Google_Cloud_Automl_V1_ExportModelOperationMetadata {
    get {
      if case .exportModelDetails(let v)? = details {return v}
      return Google_Cloud_Automl_V1_ExportModelOperationMetadata()
    }
    set {details = .exportModelDetails(newValue)}
  }

  /// Output only. Progress of operation. Range: [0, 100].
  /// Not used currently.
  public var progressPercent: Int32 = 0

  /// Output only. Partial failures encountered.
  /// E.g. single files that couldn't be read.
  /// This field should never exceed 20 entries.
  /// Status details field will contain standard GCP error details.
  public var partialFailures: [Google_Rpc_Status] = []

  /// Output only. Time when the operation was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Time when the operation was updated for the last time.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Ouptut only. Details of specific operation. Even if this field is empty,
  /// the presence allows to distinguish different types of operations.
  public enum OneOf_Details: Equatable {
    /// Details of a Delete operation.
    case deleteDetails(Google_Cloud_Automl_V1_DeleteOperationMetadata)
    /// Details of a DeployModel operation.
    case deployModelDetails(Google_Cloud_Automl_V1_DeployModelOperationMetadata)
    /// Details of an UndeployModel operation.
    case undeployModelDetails(Google_Cloud_Automl_V1_UndeployModelOperationMetadata)
    /// Details of CreateModel operation.
    case createModelDetails(Google_Cloud_Automl_V1_CreateModelOperationMetadata)
    /// Details of CreateDataset operation.
    case createDatasetDetails(Google_Cloud_Automl_V1_CreateDatasetOperationMetadata)
    /// Details of ImportData operation.
    case importDataDetails(Google_Cloud_Automl_V1_ImportDataOperationMetadata)
    /// Details of BatchPredict operation.
    case batchPredictDetails(Google_Cloud_Automl_V1_BatchPredictOperationMetadata)
    /// Details of ExportData operation.
    case exportDataDetails(Google_Cloud_Automl_V1_ExportDataOperationMetadata)
    /// Details of ExportModel operation.
    case exportModelDetails(Google_Cloud_Automl_V1_ExportModelOperationMetadata)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Automl_V1_OperationMetadata.OneOf_Details, rhs: Google_Cloud_Automl_V1_OperationMetadata.OneOf_Details) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.deleteDetails, .deleteDetails): return {
        guard case .deleteDetails(let l) = lhs, case .deleteDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deployModelDetails, .deployModelDetails): return {
        guard case .deployModelDetails(let l) = lhs, case .deployModelDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.undeployModelDetails, .undeployModelDetails): return {
        guard case .undeployModelDetails(let l) = lhs, case .undeployModelDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createModelDetails, .createModelDetails): return {
        guard case .createModelDetails(let l) = lhs, case .createModelDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createDatasetDetails, .createDatasetDetails): return {
        guard case .createDatasetDetails(let l) = lhs, case .createDatasetDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.importDataDetails, .importDataDetails): return {
        guard case .importDataDetails(let l) = lhs, case .importDataDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.batchPredictDetails, .batchPredictDetails): return {
        guard case .batchPredictDetails(let l) = lhs, case .batchPredictDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.exportDataDetails, .exportDataDetails): return {
        guard case .exportDataDetails(let l) = lhs, case .exportDataDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.exportModelDetails, .exportModelDetails): return {
        guard case .exportModelDetails(let l) = lhs, case .exportModelDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Details of operations that perform deletes of any entities.
public struct Google_Cloud_Automl_V1_DeleteOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details of DeployModel operation.
public struct Google_Cloud_Automl_V1_DeployModelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details of UndeployModel operation.
public struct Google_Cloud_Automl_V1_UndeployModelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details of CreateDataset operation.
public struct Google_Cloud_Automl_V1_CreateDatasetOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details of CreateModel operation.
public struct Google_Cloud_Automl_V1_CreateModelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details of ImportData operation.
public struct Google_Cloud_Automl_V1_ImportDataOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details of ExportData operation.
public struct Google_Cloud_Automl_V1_ExportDataOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Information further describing this export data's output.
  public var outputInfo: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo {
    get {return _outputInfo ?? Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo()}
    set {_outputInfo = newValue}
  }
  /// Returns true if `outputInfo` has been explicitly set.
  public var hasOutputInfo: Bool {return self._outputInfo != nil}
  /// Clears the value of `outputInfo`. Subsequent reads from it will return its default value.
  public mutating func clearOutputInfo() {self._outputInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Further describes this export data's output.
  /// Supplements
  /// [OutputConfig][google.cloud.automl.v1.OutputConfig].
  public struct ExportDataOutputInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The output location to which the exported data is written.
    public var outputLocation: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo.OneOf_OutputLocation? = nil

    /// The full path of the Google Cloud Storage directory created, into which
    /// the exported data is written.
    public var gcsOutputDirectory: String {
      get {
        if case .gcsOutputDirectory(let v)? = outputLocation {return v}
        return String()
      }
      set {outputLocation = .gcsOutputDirectory(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The output location to which the exported data is written.
    public enum OneOf_OutputLocation: Equatable {
      /// The full path of the Google Cloud Storage directory created, into which
      /// the exported data is written.
      case gcsOutputDirectory(String)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo.OneOf_OutputLocation, rhs: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo.OneOf_OutputLocation) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.gcsOutputDirectory, .gcsOutputDirectory): return {
          guard case .gcsOutputDirectory(let l) = lhs, case .gcsOutputDirectory(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}

  fileprivate var _outputInfo: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo? = nil
}

/// Details of BatchPredict operation.
public struct Google_Cloud_Automl_V1_BatchPredictOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The input config that was given upon starting this
  /// batch predict operation.
  public var inputConfig: Google_Cloud_Automl_V1_BatchPredictInputConfig {
    get {return _inputConfig ?? Google_Cloud_Automl_V1_BatchPredictInputConfig()}
    set {_inputConfig = newValue}
  }
  /// Returns true if `inputConfig` has been explicitly set.
  public var hasInputConfig: Bool {return self._inputConfig != nil}
  /// Clears the value of `inputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearInputConfig() {self._inputConfig = nil}

  /// Output only. Information further describing this batch predict's output.
  public var outputInfo: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo {
    get {return _outputInfo ?? Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo()}
    set {_outputInfo = newValue}
  }
  /// Returns true if `outputInfo` has been explicitly set.
  public var hasOutputInfo: Bool {return self._outputInfo != nil}
  /// Clears the value of `outputInfo`. Subsequent reads from it will return its default value.
  public mutating func clearOutputInfo() {self._outputInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Further describes this batch predict's output.
  /// Supplements
  ///
  /// [BatchPredictOutputConfig][google.cloud.automl.v1.BatchPredictOutputConfig].
  public struct BatchPredictOutputInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The output location into which prediction output is written.
    public var outputLocation: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo.OneOf_OutputLocation? = nil

    /// The full path of the Google Cloud Storage directory created, into which
    /// the prediction output is written.
    public var gcsOutputDirectory: String {
      get {
        if case .gcsOutputDirectory(let v)? = outputLocation {return v}
        return String()
      }
      set {outputLocation = .gcsOutputDirectory(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The output location into which prediction output is written.
    public enum OneOf_OutputLocation: Equatable {
      /// The full path of the Google Cloud Storage directory created, into which
      /// the prediction output is written.
      case gcsOutputDirectory(String)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo.OneOf_OutputLocation, rhs: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo.OneOf_OutputLocation) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.gcsOutputDirectory, .gcsOutputDirectory): return {
          guard case .gcsOutputDirectory(let l) = lhs, case .gcsOutputDirectory(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}

  fileprivate var _inputConfig: Google_Cloud_Automl_V1_BatchPredictInputConfig? = nil
  fileprivate var _outputInfo: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo? = nil
}

/// Details of ExportModel operation.
public struct Google_Cloud_Automl_V1_ExportModelOperationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Information further describing the output of this model
  /// export.
  public var outputInfo: Google_Cloud_Automl_V1_ExportModelOperationMetadata.ExportModelOutputInfo {
    get {return _outputInfo ?? Google_Cloud_Automl_V1_ExportModelOperationMetadata.ExportModelOutputInfo()}
    set {_outputInfo = newValue}
  }
  /// Returns true if `outputInfo` has been explicitly set.
  public var hasOutputInfo: Bool {return self._outputInfo != nil}
  /// Clears the value of `outputInfo`. Subsequent reads from it will return its default value.
  public mutating func clearOutputInfo() {self._outputInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Further describes the output of model export.
  /// Supplements
  /// [ModelExportOutputConfig][google.cloud.automl.v1.ModelExportOutputConfig].
  public struct ExportModelOutputInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The full path of the Google Cloud Storage directory created, into which
    /// the model will be exported.
    public var gcsOutputDirectory: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _outputInfo: Google_Cloud_Automl_V1_ExportModelOperationMetadata.ExportModelOutputInfo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1"

extension Google_Cloud_Automl_V1_OperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .standard(proto: "delete_details"),
    24: .standard(proto: "deploy_model_details"),
    25: .standard(proto: "undeploy_model_details"),
    10: .standard(proto: "create_model_details"),
    30: .standard(proto: "create_dataset_details"),
    15: .standard(proto: "import_data_details"),
    16: .standard(proto: "batch_predict_details"),
    21: .standard(proto: "export_data_details"),
    22: .standard(proto: "export_model_details"),
    13: .standard(proto: "progress_percent"),
    2: .standard(proto: "partial_failures"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.partialFailures) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 8: try {
        var v: Google_Cloud_Automl_V1_DeleteOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .deleteDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .deleteDetails(v)}
      }()
      case 10: try {
        var v: Google_Cloud_Automl_V1_CreateModelOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .createModelDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .createModelDetails(v)}
      }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.progressPercent) }()
      case 15: try {
        var v: Google_Cloud_Automl_V1_ImportDataOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .importDataDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .importDataDetails(v)}
      }()
      case 16: try {
        var v: Google_Cloud_Automl_V1_BatchPredictOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .batchPredictDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .batchPredictDetails(v)}
      }()
      case 21: try {
        var v: Google_Cloud_Automl_V1_ExportDataOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .exportDataDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .exportDataDetails(v)}
      }()
      case 22: try {
        var v: Google_Cloud_Automl_V1_ExportModelOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .exportModelDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .exportModelDetails(v)}
      }()
      case 24: try {
        var v: Google_Cloud_Automl_V1_DeployModelOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .deployModelDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .deployModelDetails(v)}
      }()
      case 25: try {
        var v: Google_Cloud_Automl_V1_UndeployModelOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .undeployModelDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .undeployModelDetails(v)}
      }()
      case 30: try {
        var v: Google_Cloud_Automl_V1_CreateDatasetOperationMetadata?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .createDatasetDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .createDatasetDetails(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partialFailures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialFailures, fieldNumber: 2)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.details {
    case .deleteDetails?: try {
      guard case .deleteDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .createModelDetails?: try {
      guard case .createModelDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    default: break
    }
    if self.progressPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.progressPercent, fieldNumber: 13)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.details {
    case .importDataDetails?: try {
      guard case .importDataDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .batchPredictDetails?: try {
      guard case .batchPredictDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .exportDataDetails?: try {
      guard case .exportDataDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .exportModelDetails?: try {
      guard case .exportModelDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .deployModelDetails?: try {
      guard case .deployModelDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .undeployModelDetails?: try {
      guard case .undeployModelDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case .createDatasetDetails?: try {
      guard case .createDatasetDetails(let v)? = self.details else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_OperationMetadata, rhs: Google_Cloud_Automl_V1_OperationMetadata) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.progressPercent != rhs.progressPercent {return false}
    if lhs.partialFailures != rhs.partialFailures {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_DeleteOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteOperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_DeleteOperationMetadata, rhs: Google_Cloud_Automl_V1_DeleteOperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_DeployModelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeployModelOperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_DeployModelOperationMetadata, rhs: Google_Cloud_Automl_V1_DeployModelOperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_UndeployModelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UndeployModelOperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_UndeployModelOperationMetadata, rhs: Google_Cloud_Automl_V1_UndeployModelOperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_CreateDatasetOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateDatasetOperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_CreateDatasetOperationMetadata, rhs: Google_Cloud_Automl_V1_CreateDatasetOperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_CreateModelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateModelOperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_CreateModelOperationMetadata, rhs: Google_Cloud_Automl_V1_CreateModelOperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_ImportDataOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImportDataOperationMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_ImportDataOperationMetadata, rhs: Google_Cloud_Automl_V1_ImportDataOperationMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_ExportDataOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportDataOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._outputInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._outputInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_ExportDataOperationMetadata, rhs: Google_Cloud_Automl_V1_ExportDataOperationMetadata) -> Bool {
    if lhs._outputInfo != rhs._outputInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Automl_V1_ExportDataOperationMetadata.protoMessageName + ".ExportDataOutputInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_output_directory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.outputLocation != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.outputLocation = .gcsOutputDirectory(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsOutputDirectory(let v)? = self.outputLocation {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo, rhs: Google_Cloud_Automl_V1_ExportDataOperationMetadata.ExportDataOutputInfo) -> Bool {
    if lhs.outputLocation != rhs.outputLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_BatchPredictOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchPredictOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_config"),
    2: .standard(proto: "output_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._inputConfig) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._inputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._outputInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_BatchPredictOperationMetadata, rhs: Google_Cloud_Automl_V1_BatchPredictOperationMetadata) -> Bool {
    if lhs._inputConfig != rhs._inputConfig {return false}
    if lhs._outputInfo != rhs._outputInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Automl_V1_BatchPredictOperationMetadata.protoMessageName + ".BatchPredictOutputInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_output_directory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.outputLocation != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.outputLocation = .gcsOutputDirectory(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .gcsOutputDirectory(let v)? = self.outputLocation {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo, rhs: Google_Cloud_Automl_V1_BatchPredictOperationMetadata.BatchPredictOutputInfo) -> Bool {
    if lhs.outputLocation != rhs.outputLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_ExportModelOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportModelOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "output_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._outputInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_ExportModelOperationMetadata, rhs: Google_Cloud_Automl_V1_ExportModelOperationMetadata) -> Bool {
    if lhs._outputInfo != rhs._outputInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_ExportModelOperationMetadata.ExportModelOutputInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Automl_V1_ExportModelOperationMetadata.protoMessageName + ".ExportModelOutputInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcs_output_directory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcsOutputDirectory) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcsOutputDirectory.isEmpty {
      try visitor.visitSingularStringField(value: self.gcsOutputDirectory, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_ExportModelOperationMetadata.ExportModelOutputInfo, rhs: Google_Cloud_Automl_V1_ExportModelOperationMetadata.ExportModelOutputInfo) -> Bool {
    if lhs.gcsOutputDirectory != rhs.gcsOutputDirectory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
