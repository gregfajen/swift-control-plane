// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1/prediction_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for [PredictionService.Predict][google.cloud.automl.v1.PredictionService.Predict].
public struct Google_Cloud_Automl_V1_PredictRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the model requested to serve the prediction.
  public var name: String = String()

  /// Required. Payload to perform a prediction on. The payload must match the
  /// problem type that the model was trained to solve.
  public var payload: Google_Cloud_Automl_V1_ExamplePayload {
    get {return _payload ?? Google_Cloud_Automl_V1_ExamplePayload()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {self._payload = nil}

  /// Additional domain-specific parameters, any string must be up to 25000
  /// characters long.
  ///
  /// AutoML Vision Classification
  ///
  /// `score_threshold`
  /// : (float) A value from 0.0 to 1.0. When the model
  ///   makes predictions for an image, it will only produce results that have
  ///   at least this confidence score. The default is 0.5.
  ///
  /// AutoML Vision Object Detection
  ///
  /// `score_threshold`
  /// : (float) When Model detects objects on the image,
  ///   it will only produce bounding boxes which have at least this
  ///   confidence score. Value in 0 to 1 range, default is 0.5.
  ///
  /// `max_bounding_box_count`
  /// : (int64) The maximum number of bounding
  ///   boxes returned. The default is 100. The
  ///   number of returned bounding boxes might be limited by the server.
  ///
  /// AutoML Tables
  ///
  /// `feature_importance`
  /// : (boolean) Whether
  ///
  /// [feature_importance][google.cloud.automl.v1.TablesModelColumnInfo.feature_importance]
  ///   is populated in the returned list of
  ///   [TablesAnnotation][google.cloud.automl.v1.TablesAnnotation]
  ///   objects. The default is false.
  public var params: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payload: Google_Cloud_Automl_V1_ExamplePayload? = nil
}

/// Response message for [PredictionService.Predict][google.cloud.automl.v1.PredictionService.Predict].
public struct Google_Cloud_Automl_V1_PredictResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Prediction result.
  /// AutoML Translation and AutoML Natural Language Sentiment Analysis
  /// return precisely one payload.
  public var payload: [Google_Cloud_Automl_V1_AnnotationPayload] = []

  /// The preprocessed example that AutoML actually makes prediction on.
  /// Empty if AutoML does not preprocess the input example.
  ///
  /// For AutoML Natural Language (Classification, Entity Extraction, and
  /// Sentiment Analysis), if the input is a document, the recognized text is
  /// returned in the
  /// [document_text][google.cloud.automl.v1.Document.document_text]
  /// property.
  public var preprocessedInput: Google_Cloud_Automl_V1_ExamplePayload {
    get {return _preprocessedInput ?? Google_Cloud_Automl_V1_ExamplePayload()}
    set {_preprocessedInput = newValue}
  }
  /// Returns true if `preprocessedInput` has been explicitly set.
  public var hasPreprocessedInput: Bool {return self._preprocessedInput != nil}
  /// Clears the value of `preprocessedInput`. Subsequent reads from it will return its default value.
  public mutating func clearPreprocessedInput() {self._preprocessedInput = nil}

  /// Additional domain-specific prediction response metadata.
  ///
  /// AutoML Vision Object Detection
  ///
  /// `max_bounding_box_count`
  /// : (int64) The maximum number of bounding boxes to return per image.
  ///
  /// AutoML Natural Language Sentiment Analysis
  ///
  /// `sentiment_score`
  /// : (float, deprecated) A value between -1 and 1,
  ///   -1 maps to least positive sentiment, while 1 maps to the most positive
  ///   one and the higher the score, the more positive the sentiment in the
  ///   document is. Yet these values are relative to the training data, so
  ///   e.g. if all data was positive then -1 is also positive (though
  ///   the least).
  ///   `sentiment_score` is not the same as "score" and "magnitude"
  ///   from Sentiment Analysis in the Natural Language API.
  public var metadata: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _preprocessedInput: Google_Cloud_Automl_V1_ExamplePayload? = nil
}

/// Request message for [PredictionService.BatchPredict][google.cloud.automl.v1.PredictionService.BatchPredict].
public struct Google_Cloud_Automl_V1_BatchPredictRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the model requested to serve the batch prediction.
  public var name: String = String()

  /// Required. The input configuration for batch prediction.
  public var inputConfig: Google_Cloud_Automl_V1_BatchPredictInputConfig {
    get {return _inputConfig ?? Google_Cloud_Automl_V1_BatchPredictInputConfig()}
    set {_inputConfig = newValue}
  }
  /// Returns true if `inputConfig` has been explicitly set.
  public var hasInputConfig: Bool {return self._inputConfig != nil}
  /// Clears the value of `inputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearInputConfig() {self._inputConfig = nil}

  /// Required. The Configuration specifying where output predictions should
  /// be written.
  public var outputConfig: Google_Cloud_Automl_V1_BatchPredictOutputConfig {
    get {return _outputConfig ?? Google_Cloud_Automl_V1_BatchPredictOutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  /// Additional domain-specific parameters for the predictions, any string must
  /// be up to 25000 characters long.
  ///
  /// AutoML Natural Language Classification
  ///
  /// `score_threshold`
  /// : (float) A value from 0.0 to 1.0. When the model
  ///   makes predictions for a text snippet, it will only produce results
  ///   that have at least this confidence score. The default is 0.5.
  ///
  ///
  /// AutoML Vision Classification
  ///
  /// `score_threshold`
  /// : (float) A value from 0.0 to 1.0. When the model
  ///   makes predictions for an image, it will only produce results that
  ///   have at least this confidence score. The default is 0.5.
  ///
  /// AutoML Vision Object Detection
  ///
  /// `score_threshold`
  /// : (float) When Model detects objects on the image,
  ///   it will only produce bounding boxes which have at least this
  ///   confidence score. Value in 0 to 1 range, default is 0.5.
  ///
  /// `max_bounding_box_count`
  /// : (int64) The maximum number of bounding
  ///   boxes returned per image. The default is 100, the
  ///   number of bounding boxes returned might be limited by the server.
  /// AutoML Video Intelligence Classification
  ///
  /// `score_threshold`
  /// : (float) A value from 0.0 to 1.0. When the model
  ///   makes predictions for a video, it will only produce results that
  ///   have at least this confidence score. The default is 0.5.
  ///
  /// `segment_classification`
  /// : (boolean) Set to true to request
  ///   segment-level classification. AutoML Video Intelligence returns
  ///   labels and their confidence scores for the entire segment of the
  ///   video that user specified in the request configuration.
  ///   The default is true.
  ///
  /// `shot_classification`
  /// : (boolean) Set to true to request shot-level
  ///   classification. AutoML Video Intelligence determines the boundaries
  ///   for each camera shot in the entire segment of the video that user
  ///   specified in the request configuration. AutoML Video Intelligence
  ///   then returns labels and their confidence scores for each detected
  ///   shot, along with the start and end time of the shot.
  ///   The default is false.
  ///
  ///   WARNING: Model evaluation is not done for this classification type,
  ///   the quality of it depends on training data, but there are no metrics
  ///   provided to describe that quality.
  ///
  /// `1s_interval_classification`
  /// : (boolean) Set to true to request
  ///   classification for a video at one-second intervals. AutoML Video
  ///   Intelligence returns labels and their confidence scores for each
  ///   second of the entire segment of the video that user specified in the
  ///   request configuration. The default is false.
  ///
  ///   WARNING: Model evaluation is not done for this classification
  ///   type, the quality of it depends on training data, but there are no
  ///   metrics provided to describe that quality.
  ///
  /// AutoML Video Intelligence Object Tracking
  ///
  /// `score_threshold`
  /// : (float) When Model detects objects on video frames,
  ///   it will only produce bounding boxes which have at least this
  ///   confidence score. Value in 0 to 1 range, default is 0.5.
  ///
  /// `max_bounding_box_count`
  /// : (int64) The maximum number of bounding
  ///   boxes returned per image. The default is 100, the
  ///   number of bounding boxes returned might be limited by the server.
  ///
  /// `min_bounding_box_size`
  /// : (float) Only bounding boxes with shortest edge
  ///   at least that long as a relative value of video frame size are
  ///   returned. Value in 0 to 1 range. Default is 0.
  public var params: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _inputConfig: Google_Cloud_Automl_V1_BatchPredictInputConfig? = nil
  fileprivate var _outputConfig: Google_Cloud_Automl_V1_BatchPredictOutputConfig? = nil
}

/// Result of the Batch Predict. This message is returned in
/// [response][google.longrunning.Operation.response] of the operation returned
/// by the [PredictionService.BatchPredict][google.cloud.automl.v1.PredictionService.BatchPredict].
public struct Google_Cloud_Automl_V1_BatchPredictResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Additional domain-specific prediction response metadata.
  ///
  /// AutoML Vision Object Detection
  ///
  /// `max_bounding_box_count`
  /// : (int64) The maximum number of bounding boxes returned per image.
  ///
  /// AutoML Video Intelligence Object Tracking
  ///
  /// `max_bounding_box_count`
  /// : (int64) The maximum number of bounding boxes returned per frame.
  public var metadata: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1"

extension Google_Cloud_Automl_V1_PredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "payload"),
    3: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.params.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.params, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_PredictRequest, rhs: Google_Cloud_Automl_V1_PredictRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.params != rhs.params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_PredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    3: .standard(proto: "preprocessed_input"),
    2: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.payload) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._preprocessedInput) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payload.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.payload, fieldNumber: 1)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 2)
    }
    if let v = self._preprocessedInput {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_PredictResponse, rhs: Google_Cloud_Automl_V1_PredictResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs._preprocessedInput != rhs._preprocessedInput {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_BatchPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "input_config"),
    4: .standard(proto: "output_config"),
    5: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._inputConfig) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._outputConfig) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._inputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.params.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.params, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_BatchPredictRequest, rhs: Google_Cloud_Automl_V1_BatchPredictRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._inputConfig != rhs._inputConfig {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.params != rhs.params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_BatchPredictResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchPredictResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_BatchPredictResult, rhs: Google_Cloud_Automl_V1_BatchPredictResult) -> Bool {
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
