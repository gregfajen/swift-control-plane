// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1/text_extraction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Annotation for identifying spans of text.
public struct Google_Cloud_Automl_V1_TextExtractionAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Text extraction annotations can either be a text segment or a
  /// text relation.
  public var annotation: Google_Cloud_Automl_V1_TextExtractionAnnotation.OneOf_Annotation? = nil

  /// An entity annotation will set this, which is the part of the original
  /// text to which the annotation pertains.
  public var textSegment: Google_Cloud_Automl_V1_TextSegment {
    get {
      if case .textSegment(let v)? = annotation {return v}
      return Google_Cloud_Automl_V1_TextSegment()
    }
    set {annotation = .textSegment(newValue)}
  }

  /// Output only. A confidence estimate between 0.0 and 1.0. A higher value
  /// means greater confidence in correctness of the annotation.
  public var score: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. Text extraction annotations can either be a text segment or a
  /// text relation.
  public enum OneOf_Annotation: Equatable {
    /// An entity annotation will set this, which is the part of the original
    /// text to which the annotation pertains.
    case textSegment(Google_Cloud_Automl_V1_TextSegment)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Automl_V1_TextExtractionAnnotation.OneOf_Annotation, rhs: Google_Cloud_Automl_V1_TextExtractionAnnotation.OneOf_Annotation) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.textSegment, .textSegment): return {
        guard case .textSegment(let l) = lhs, case .textSegment(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Model evaluation metrics for text extraction problems.
public struct Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The Area under precision recall curve metric.
  public var auPrc: Float = 0

  /// Output only. Metrics that have confidence thresholds.
  /// Precision-recall curve can be derived from it.
  public var confidenceMetricsEntries: [Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics.ConfidenceMetricsEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Metrics for a single confidence threshold.
  public struct ConfidenceMetricsEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The confidence threshold value used to compute the metrics.
    /// Only annotations with score of at least this threshold are considered to
    /// be ones the model would return.
    public var confidenceThreshold: Float = 0

    /// Output only. Recall under the given confidence threshold.
    public var recall: Float = 0

    /// Output only. Precision under the given confidence threshold.
    public var precision: Float = 0

    /// Output only. The harmonic mean of recall and precision.
    public var f1Score: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1"

extension Google_Cloud_Automl_V1_TextExtractionAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextExtractionAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "text_segment"),
    1: .same(proto: "score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      case 3: try {
        var v: Google_Cloud_Automl_V1_TextSegment?
        if let current = self.annotation {
          try decoder.handleConflictingOneOf()
          if case .textSegment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.annotation = .textSegment(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 1)
    }
    if case .textSegment(let v)? = self.annotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_TextExtractionAnnotation, rhs: Google_Cloud_Automl_V1_TextExtractionAnnotation) -> Bool {
    if lhs.annotation != rhs.annotation {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextExtractionEvaluationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "au_prc"),
    2: .standard(proto: "confidence_metrics_entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.auPrc) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.confidenceMetricsEntries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.auPrc != 0 {
      try visitor.visitSingularFloatField(value: self.auPrc, fieldNumber: 1)
    }
    if !self.confidenceMetricsEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.confidenceMetricsEntries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics, rhs: Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics) -> Bool {
    if lhs.auPrc != rhs.auPrc {return false}
    if lhs.confidenceMetricsEntries != rhs.confidenceMetricsEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics.ConfidenceMetricsEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics.protoMessageName + ".ConfidenceMetricsEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "confidence_threshold"),
    3: .same(proto: "recall"),
    4: .same(proto: "precision"),
    5: .standard(proto: "f1_score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.confidenceThreshold) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.recall) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.precision) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.f1Score) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.confidenceThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.confidenceThreshold, fieldNumber: 1)
    }
    if self.recall != 0 {
      try visitor.visitSingularFloatField(value: self.recall, fieldNumber: 3)
    }
    if self.precision != 0 {
      try visitor.visitSingularFloatField(value: self.precision, fieldNumber: 4)
    }
    if self.f1Score != 0 {
      try visitor.visitSingularFloatField(value: self.f1Score, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics.ConfidenceMetricsEntry, rhs: Google_Cloud_Automl_V1_TextExtractionEvaluationMetrics.ConfidenceMetricsEntry) -> Bool {
    if lhs.confidenceThreshold != rhs.confidenceThreshold {return false}
    if lhs.recall != rhs.recall {return false}
    if lhs.precision != rhs.precision {return false}
    if lhs.f1Score != rhs.f1Score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
