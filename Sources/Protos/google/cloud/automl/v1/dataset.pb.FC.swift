// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1/dataset.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A workspace for solving a single, particular machine learning (ML) problem.
/// A workspace contains examples that may be annotated.
public struct Google_Cloud_Automl_V1_Dataset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required.
  /// The dataset metadata that is specific to the problem type.
  public var datasetMetadata: Google_Cloud_Automl_V1_Dataset.OneOf_DatasetMetadata? = nil

  /// Metadata for a dataset used for translation.
  public var translationDatasetMetadata: Google_Cloud_Automl_V1_TranslationDatasetMetadata {
    get {
      if case .translationDatasetMetadata(let v)? = datasetMetadata {return v}
      return Google_Cloud_Automl_V1_TranslationDatasetMetadata()
    }
    set {datasetMetadata = .translationDatasetMetadata(newValue)}
  }

  /// Metadata for a dataset used for image classification.
  public var imageClassificationDatasetMetadata: Google_Cloud_Automl_V1_ImageClassificationDatasetMetadata {
    get {
      if case .imageClassificationDatasetMetadata(let v)? = datasetMetadata {return v}
      return Google_Cloud_Automl_V1_ImageClassificationDatasetMetadata()
    }
    set {datasetMetadata = .imageClassificationDatasetMetadata(newValue)}
  }

  /// Metadata for a dataset used for text classification.
  public var textClassificationDatasetMetadata: Google_Cloud_Automl_V1_TextClassificationDatasetMetadata {
    get {
      if case .textClassificationDatasetMetadata(let v)? = datasetMetadata {return v}
      return Google_Cloud_Automl_V1_TextClassificationDatasetMetadata()
    }
    set {datasetMetadata = .textClassificationDatasetMetadata(newValue)}
  }

  /// Metadata for a dataset used for image object detection.
  public var imageObjectDetectionDatasetMetadata: Google_Cloud_Automl_V1_ImageObjectDetectionDatasetMetadata {
    get {
      if case .imageObjectDetectionDatasetMetadata(let v)? = datasetMetadata {return v}
      return Google_Cloud_Automl_V1_ImageObjectDetectionDatasetMetadata()
    }
    set {datasetMetadata = .imageObjectDetectionDatasetMetadata(newValue)}
  }

  /// Metadata for a dataset used for text extraction.
  public var textExtractionDatasetMetadata: Google_Cloud_Automl_V1_TextExtractionDatasetMetadata {
    get {
      if case .textExtractionDatasetMetadata(let v)? = datasetMetadata {return v}
      return Google_Cloud_Automl_V1_TextExtractionDatasetMetadata()
    }
    set {datasetMetadata = .textExtractionDatasetMetadata(newValue)}
  }

  /// Metadata for a dataset used for text sentiment.
  public var textSentimentDatasetMetadata: Google_Cloud_Automl_V1_TextSentimentDatasetMetadata {
    get {
      if case .textSentimentDatasetMetadata(let v)? = datasetMetadata {return v}
      return Google_Cloud_Automl_V1_TextSentimentDatasetMetadata()
    }
    set {datasetMetadata = .textSentimentDatasetMetadata(newValue)}
  }

  /// Output only. The resource name of the dataset.
  /// Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`
  public var name: String = String()

  /// Required. The name of the dataset to show in the interface. The name can be
  /// up to 32 characters long and can consist only of ASCII Latin letters A-Z
  /// and a-z, underscores
  /// (_), and ASCII digits 0-9.
  public var displayName: String = String()

  /// User-provided description of the dataset. The description can be up to
  /// 25000 characters long.
  public var description_p: String = String()

  /// Output only. The number of examples in the dataset.
  public var exampleCount: Int32 = 0

  /// Output only. Timestamp when this dataset was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  /// Optional. The labels with user-defined metadata to organize your dataset.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// Label values are optional. Label keys must start with a letter.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required.
  /// The dataset metadata that is specific to the problem type.
  public enum OneOf_DatasetMetadata: Equatable {
    /// Metadata for a dataset used for translation.
    case translationDatasetMetadata(Google_Cloud_Automl_V1_TranslationDatasetMetadata)
    /// Metadata for a dataset used for image classification.
    case imageClassificationDatasetMetadata(Google_Cloud_Automl_V1_ImageClassificationDatasetMetadata)
    /// Metadata for a dataset used for text classification.
    case textClassificationDatasetMetadata(Google_Cloud_Automl_V1_TextClassificationDatasetMetadata)
    /// Metadata for a dataset used for image object detection.
    case imageObjectDetectionDatasetMetadata(Google_Cloud_Automl_V1_ImageObjectDetectionDatasetMetadata)
    /// Metadata for a dataset used for text extraction.
    case textExtractionDatasetMetadata(Google_Cloud_Automl_V1_TextExtractionDatasetMetadata)
    /// Metadata for a dataset used for text sentiment.
    case textSentimentDatasetMetadata(Google_Cloud_Automl_V1_TextSentimentDatasetMetadata)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Automl_V1_Dataset.OneOf_DatasetMetadata, rhs: Google_Cloud_Automl_V1_Dataset.OneOf_DatasetMetadata) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.translationDatasetMetadata, .translationDatasetMetadata): return {
        guard case .translationDatasetMetadata(let l) = lhs, case .translationDatasetMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageClassificationDatasetMetadata, .imageClassificationDatasetMetadata): return {
        guard case .imageClassificationDatasetMetadata(let l) = lhs, case .imageClassificationDatasetMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textClassificationDatasetMetadata, .textClassificationDatasetMetadata): return {
        guard case .textClassificationDatasetMetadata(let l) = lhs, case .textClassificationDatasetMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageObjectDetectionDatasetMetadata, .imageObjectDetectionDatasetMetadata): return {
        guard case .imageObjectDetectionDatasetMetadata(let l) = lhs, case .imageObjectDetectionDatasetMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textExtractionDatasetMetadata, .textExtractionDatasetMetadata): return {
        guard case .textExtractionDatasetMetadata(let l) = lhs, case .textExtractionDatasetMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textSentimentDatasetMetadata, .textSentimentDatasetMetadata): return {
        guard case .textSentimentDatasetMetadata(let l) = lhs, case .textSentimentDatasetMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1"

extension Google_Cloud_Automl_V1_Dataset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dataset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    23: .standard(proto: "translation_dataset_metadata"),
    24: .standard(proto: "image_classification_dataset_metadata"),
    25: .standard(proto: "text_classification_dataset_metadata"),
    26: .standard(proto: "image_object_detection_dataset_metadata"),
    28: .standard(proto: "text_extraction_dataset_metadata"),
    30: .standard(proto: "text_sentiment_dataset_metadata"),
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "description"),
    21: .standard(proto: "example_count"),
    14: .standard(proto: "create_time"),
    17: .same(proto: "etag"),
    39: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 17: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 21: try { try decoder.decodeSingularInt32Field(value: &self.exampleCount) }()
      case 23: try {
        var v: Google_Cloud_Automl_V1_TranslationDatasetMetadata?
        if let current = self.datasetMetadata {
          try decoder.handleConflictingOneOf()
          if case .translationDatasetMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datasetMetadata = .translationDatasetMetadata(v)}
      }()
      case 24: try {
        var v: Google_Cloud_Automl_V1_ImageClassificationDatasetMetadata?
        if let current = self.datasetMetadata {
          try decoder.handleConflictingOneOf()
          if case .imageClassificationDatasetMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datasetMetadata = .imageClassificationDatasetMetadata(v)}
      }()
      case 25: try {
        var v: Google_Cloud_Automl_V1_TextClassificationDatasetMetadata?
        if let current = self.datasetMetadata {
          try decoder.handleConflictingOneOf()
          if case .textClassificationDatasetMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datasetMetadata = .textClassificationDatasetMetadata(v)}
      }()
      case 26: try {
        var v: Google_Cloud_Automl_V1_ImageObjectDetectionDatasetMetadata?
        if let current = self.datasetMetadata {
          try decoder.handleConflictingOneOf()
          if case .imageObjectDetectionDatasetMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datasetMetadata = .imageObjectDetectionDatasetMetadata(v)}
      }()
      case 28: try {
        var v: Google_Cloud_Automl_V1_TextExtractionDatasetMetadata?
        if let current = self.datasetMetadata {
          try decoder.handleConflictingOneOf()
          if case .textExtractionDatasetMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datasetMetadata = .textExtractionDatasetMetadata(v)}
      }()
      case 30: try {
        var v: Google_Cloud_Automl_V1_TextSentimentDatasetMetadata?
        if let current = self.datasetMetadata {
          try decoder.handleConflictingOneOf()
          if case .textSentimentDatasetMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datasetMetadata = .textSentimentDatasetMetadata(v)}
      }()
      case 39: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 17)
    }
    if self.exampleCount != 0 {
      try visitor.visitSingularInt32Field(value: self.exampleCount, fieldNumber: 21)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.datasetMetadata {
    case .translationDatasetMetadata?: try {
      guard case .translationDatasetMetadata(let v)? = self.datasetMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .imageClassificationDatasetMetadata?: try {
      guard case .imageClassificationDatasetMetadata(let v)? = self.datasetMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .textClassificationDatasetMetadata?: try {
      guard case .textClassificationDatasetMetadata(let v)? = self.datasetMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case .imageObjectDetectionDatasetMetadata?: try {
      guard case .imageObjectDetectionDatasetMetadata(let v)? = self.datasetMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
    }()
    case .textExtractionDatasetMetadata?: try {
      guard case .textExtractionDatasetMetadata(let v)? = self.datasetMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
    }()
    case .textSentimentDatasetMetadata?: try {
      guard case .textSentimentDatasetMetadata(let v)? = self.datasetMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
    }()
    case nil: break
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 39)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_Dataset, rhs: Google_Cloud_Automl_V1_Dataset) -> Bool {
    if lhs.datasetMetadata != rhs.datasetMetadata {return false}
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.exampleCount != rhs.exampleCount {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
