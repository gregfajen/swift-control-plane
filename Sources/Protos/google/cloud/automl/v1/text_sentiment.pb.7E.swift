// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1/text_sentiment.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Contains annotation details specific to text sentiment.
public struct Google_Cloud_Automl_V1_TextSentimentAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The sentiment with the semantic, as given to the
  /// [AutoMl.ImportData][google.cloud.automl.v1.AutoMl.ImportData] when populating the dataset from which the model used
  /// for the prediction had been trained.
  /// The sentiment values are between 0 and
  /// Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive),
  /// with higher value meaning more positive sentiment. They are completely
  /// relative, i.e. 0 means least positive sentiment and sentiment_max means
  /// the most positive from the sentiments present in the train data. Therefore
  ///  e.g. if train data had only negative sentiment, then sentiment_max, would
  /// be still negative (although least negative).
  /// The sentiment shouldn't be confused with "score" or "magnitude"
  /// from the previous Natural Language Sentiment Analysis API.
  public var sentiment: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Model evaluation metrics for text sentiment problems.
public struct Google_Cloud_Automl_V1_TextSentimentEvaluationMetrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Precision.
  public var precision: Float = 0

  /// Output only. Recall.
  public var recall: Float = 0

  /// Output only. The harmonic mean of recall and precision.
  public var f1Score: Float = 0

  /// Output only. Mean absolute error. Only set for the overall model
  /// evaluation, not for evaluation of a single annotation spec.
  public var meanAbsoluteError: Float = 0

  /// Output only. Mean squared error. Only set for the overall model
  /// evaluation, not for evaluation of a single annotation spec.
  public var meanSquaredError: Float = 0

  /// Output only. Linear weighted kappa. Only set for the overall model
  /// evaluation, not for evaluation of a single annotation spec.
  public var linearKappa: Float = 0

  /// Output only. Quadratic weighted kappa. Only set for the overall model
  /// evaluation, not for evaluation of a single annotation spec.
  public var quadraticKappa: Float = 0

  /// Output only. Confusion matrix of the evaluation.
  /// Only set for the overall model evaluation, not for evaluation of a single
  /// annotation spec.
  public var confusionMatrix: Google_Cloud_Automl_V1_ClassificationEvaluationMetrics.ConfusionMatrix {
    get {return _confusionMatrix ?? Google_Cloud_Automl_V1_ClassificationEvaluationMetrics.ConfusionMatrix()}
    set {_confusionMatrix = newValue}
  }
  /// Returns true if `confusionMatrix` has been explicitly set.
  public var hasConfusionMatrix: Bool {return self._confusionMatrix != nil}
  /// Clears the value of `confusionMatrix`. Subsequent reads from it will return its default value.
  public mutating func clearConfusionMatrix() {self._confusionMatrix = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _confusionMatrix: Google_Cloud_Automl_V1_ClassificationEvaluationMetrics.ConfusionMatrix? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1"

extension Google_Cloud_Automl_V1_TextSentimentAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextSentimentAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sentiment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sentiment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sentiment != 0 {
      try visitor.visitSingularInt32Field(value: self.sentiment, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_TextSentimentAnnotation, rhs: Google_Cloud_Automl_V1_TextSentimentAnnotation) -> Bool {
    if lhs.sentiment != rhs.sentiment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Automl_V1_TextSentimentEvaluationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextSentimentEvaluationMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "precision"),
    2: .same(proto: "recall"),
    3: .standard(proto: "f1_score"),
    4: .standard(proto: "mean_absolute_error"),
    5: .standard(proto: "mean_squared_error"),
    6: .standard(proto: "linear_kappa"),
    7: .standard(proto: "quadratic_kappa"),
    8: .standard(proto: "confusion_matrix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.precision) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.recall) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.f1Score) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.meanAbsoluteError) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.meanSquaredError) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.linearKappa) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.quadraticKappa) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._confusionMatrix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.precision != 0 {
      try visitor.visitSingularFloatField(value: self.precision, fieldNumber: 1)
    }
    if self.recall != 0 {
      try visitor.visitSingularFloatField(value: self.recall, fieldNumber: 2)
    }
    if self.f1Score != 0 {
      try visitor.visitSingularFloatField(value: self.f1Score, fieldNumber: 3)
    }
    if self.meanAbsoluteError != 0 {
      try visitor.visitSingularFloatField(value: self.meanAbsoluteError, fieldNumber: 4)
    }
    if self.meanSquaredError != 0 {
      try visitor.visitSingularFloatField(value: self.meanSquaredError, fieldNumber: 5)
    }
    if self.linearKappa != 0 {
      try visitor.visitSingularFloatField(value: self.linearKappa, fieldNumber: 6)
    }
    if self.quadraticKappa != 0 {
      try visitor.visitSingularFloatField(value: self.quadraticKappa, fieldNumber: 7)
    }
    if let v = self._confusionMatrix {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_TextSentimentEvaluationMetrics, rhs: Google_Cloud_Automl_V1_TextSentimentEvaluationMetrics) -> Bool {
    if lhs.precision != rhs.precision {return false}
    if lhs.recall != rhs.recall {return false}
    if lhs.f1Score != rhs.f1Score {return false}
    if lhs.meanAbsoluteError != rhs.meanAbsoluteError {return false}
    if lhs.meanSquaredError != rhs.meanSquaredError {return false}
    if lhs.linearKappa != rhs.linearKappa {return false}
    if lhs.quadraticKappa != rhs.quadraticKappa {return false}
    if lhs._confusionMatrix != rhs._confusionMatrix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
