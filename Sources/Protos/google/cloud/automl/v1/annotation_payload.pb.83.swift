// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/automl/v1/annotation_payload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Contains annotation information that is relevant to AutoML.
public struct Google_Cloud_Automl_V1_AnnotationPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only . Additional information about the annotation
  /// specific to the AutoML domain.
  public var detail: Google_Cloud_Automl_V1_AnnotationPayload.OneOf_Detail? = nil

  /// Annotation details for translation.
  public var translation: Google_Cloud_Automl_V1_TranslationAnnotation {
    get {
      if case .translation(let v)? = detail {return v}
      return Google_Cloud_Automl_V1_TranslationAnnotation()
    }
    set {detail = .translation(newValue)}
  }

  /// Annotation details for content or image classification.
  public var classification: Google_Cloud_Automl_V1_ClassificationAnnotation {
    get {
      if case .classification(let v)? = detail {return v}
      return Google_Cloud_Automl_V1_ClassificationAnnotation()
    }
    set {detail = .classification(newValue)}
  }

  /// Annotation details for image object detection.
  public var imageObjectDetection: Google_Cloud_Automl_V1_ImageObjectDetectionAnnotation {
    get {
      if case .imageObjectDetection(let v)? = detail {return v}
      return Google_Cloud_Automl_V1_ImageObjectDetectionAnnotation()
    }
    set {detail = .imageObjectDetection(newValue)}
  }

  /// Annotation details for text extraction.
  public var textExtraction: Google_Cloud_Automl_V1_TextExtractionAnnotation {
    get {
      if case .textExtraction(let v)? = detail {return v}
      return Google_Cloud_Automl_V1_TextExtractionAnnotation()
    }
    set {detail = .textExtraction(newValue)}
  }

  /// Annotation details for text sentiment.
  public var textSentiment: Google_Cloud_Automl_V1_TextSentimentAnnotation {
    get {
      if case .textSentiment(let v)? = detail {return v}
      return Google_Cloud_Automl_V1_TextSentimentAnnotation()
    }
    set {detail = .textSentiment(newValue)}
  }

  /// Output only . The resource ID of the annotation spec that
  /// this annotation pertains to. The annotation spec comes from either an
  /// ancestor dataset, or the dataset that was used to train the model in use.
  public var annotationSpecID: String = String()

  /// Output only. The value of
  /// [display_name][google.cloud.automl.v1.AnnotationSpec.display_name]
  /// when the model was trained. Because this field returns a value at model
  /// training time, for different models trained using the same dataset, the
  /// returned value could be different as model owner could update the
  /// `display_name` between any two model training.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Output only . Additional information about the annotation
  /// specific to the AutoML domain.
  public enum OneOf_Detail: Equatable {
    /// Annotation details for translation.
    case translation(Google_Cloud_Automl_V1_TranslationAnnotation)
    /// Annotation details for content or image classification.
    case classification(Google_Cloud_Automl_V1_ClassificationAnnotation)
    /// Annotation details for image object detection.
    case imageObjectDetection(Google_Cloud_Automl_V1_ImageObjectDetectionAnnotation)
    /// Annotation details for text extraction.
    case textExtraction(Google_Cloud_Automl_V1_TextExtractionAnnotation)
    /// Annotation details for text sentiment.
    case textSentiment(Google_Cloud_Automl_V1_TextSentimentAnnotation)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Automl_V1_AnnotationPayload.OneOf_Detail, rhs: Google_Cloud_Automl_V1_AnnotationPayload.OneOf_Detail) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.translation, .translation): return {
        guard case .translation(let l) = lhs, case .translation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.classification, .classification): return {
        guard case .classification(let l) = lhs, case .classification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.imageObjectDetection, .imageObjectDetection): return {
        guard case .imageObjectDetection(let l) = lhs, case .imageObjectDetection(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textExtraction, .textExtraction): return {
        guard case .textExtraction(let l) = lhs, case .textExtraction(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.textSentiment, .textSentiment): return {
        guard case .textSentiment(let l) = lhs, case .textSentiment(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.automl.v1"

extension Google_Cloud_Automl_V1_AnnotationPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnnotationPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "translation"),
    3: .same(proto: "classification"),
    4: .standard(proto: "image_object_detection"),
    6: .standard(proto: "text_extraction"),
    7: .standard(proto: "text_sentiment"),
    1: .standard(proto: "annotation_spec_id"),
    5: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.annotationSpecID) }()
      case 2: try {
        var v: Google_Cloud_Automl_V1_TranslationAnnotation?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .translation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .translation(v)}
      }()
      case 3: try {
        var v: Google_Cloud_Automl_V1_ClassificationAnnotation?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .classification(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .classification(v)}
      }()
      case 4: try {
        var v: Google_Cloud_Automl_V1_ImageObjectDetectionAnnotation?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .imageObjectDetection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .imageObjectDetection(v)}
      }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 6: try {
        var v: Google_Cloud_Automl_V1_TextExtractionAnnotation?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .textExtraction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .textExtraction(v)}
      }()
      case 7: try {
        var v: Google_Cloud_Automl_V1_TextSentimentAnnotation?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .textSentiment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .textSentiment(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationSpecID.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationSpecID, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.detail {
    case .translation?: try {
      guard case .translation(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .classification?: try {
      guard case .classification(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .imageObjectDetection?: try {
      guard case .imageObjectDetection(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    default: break
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 5)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.detail {
    case .textExtraction?: try {
      guard case .textExtraction(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .textSentiment?: try {
      guard case .textSentiment(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Automl_V1_AnnotationPayload, rhs: Google_Cloud_Automl_V1_AnnotationPayload) -> Bool {
    if lhs.detail != rhs.detail {return false}
    if lhs.annotationSpecID != rhs.annotationSpecID {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
