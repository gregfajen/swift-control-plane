// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/osconfig/agentendpoint/v1/agentendpoint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A request message to receive task notifications.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. This is the Compute Engine instance identity token described in
  /// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
  /// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
  public var instanceIDToken: String = String()

  /// Required. The version of the agent making the request.
  public var agentVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The streaming rpc message that notifies the agent when it has a task
/// that it needs to perform on the VM instance.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request message for signaling the start of a task execution.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. This is the Compute Engine instance identity token described in
  /// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
  /// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
  public var instanceIDToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A response message that contains the details of the task to work on.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The details of the task that should be worked on.  Can be empty if there
  /// is no new task to work on.
  public var task: Google_Cloud_Osconfig_Agentendpoint_V1_Task {
    get {return _task ?? Google_Cloud_Osconfig_Agentendpoint_V1_Task()}
    set {_task = newValue}
  }
  /// Returns true if `task` has been explicitly set.
  public var hasTask: Bool {return self._task != nil}
  /// Clears the value of `task`. Subsequent reads from it will return its default value.
  public mutating func clearTask() {self._task = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _task: Google_Cloud_Osconfig_Agentendpoint_V1_Task? = nil
}

/// A request message for reporting the progress of current task.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. This is the Compute Engine instance identity token described in
  /// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
  /// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
  public var instanceIDToken: String = String()

  /// Required. Unique identifier of the task this applies to.
  public var taskID: String = String()

  /// Required. The type of task to report progress on.
  ///
  /// Progress must include the appropriate message based on this enum as
  /// specified below:
  /// APPLY_PATCHES = ApplyPatchesTaskProgress
  /// EXEC_STEP = Progress not supported for this type.
  public var taskType: Google_Cloud_Osconfig_Agentendpoint_V1_TaskType = .unspecified

  /// Intermediate progress of the current task.
  public var progress: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest.OneOf_Progress? = nil

  /// Details about the progress of the apply patches task.
  public var applyPatchesTaskProgress: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress {
    get {
      if case .applyPatchesTaskProgress(let v)? = progress {return v}
      return Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress()
    }
    set {progress = .applyPatchesTaskProgress(newValue)}
  }

  /// Details about the progress of the exec step task.
  public var execStepTaskProgress: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress {
    get {
      if case .execStepTaskProgress(let v)? = progress {return v}
      return Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress()
    }
    set {progress = .execStepTaskProgress(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Intermediate progress of the current task.
  public enum OneOf_Progress: Equatable {
    /// Details about the progress of the apply patches task.
    case applyPatchesTaskProgress(Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress)
    /// Details about the progress of the exec step task.
    case execStepTaskProgress(Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest.OneOf_Progress, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest.OneOf_Progress) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.applyPatchesTaskProgress, .applyPatchesTaskProgress): return {
        guard case .applyPatchesTaskProgress(let l) = lhs, case .applyPatchesTaskProgress(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.execStepTaskProgress, .execStepTaskProgress): return {
        guard case .execStepTaskProgress(let l) = lhs, case .execStepTaskProgress(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The response message after the agent reported the current task progress.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Instructs agent to continue or not.
  public var taskDirective: Google_Cloud_Osconfig_Agentendpoint_V1_TaskDirective = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request message for signaling the completion of a task execution.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. This is the Compute Engine instance identity token described in
  /// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
  /// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
  public var instanceIDToken: String = String()

  /// Required. Unique identifier of the task this applies to.
  public var taskID: String = String()

  /// Required. The type of task to report completed.
  ///
  /// The output must include the appropriate message based on the following
  /// enum values:
  /// APPLY_PATCHES = ApplyPatchesTaskOutput
  /// EXEC_STEP = ExecStepTaskOutput
  public var taskType: Google_Cloud_Osconfig_Agentendpoint_V1_TaskType = .unspecified

  /// Descriptive error message if the task execution ended in error.
  public var errorMessage: String = String()

  /// Final output details of the current task.
  public var output: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest.OneOf_Output? = nil

  /// Final output details of the apply patches task;
  public var applyPatchesTaskOutput: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput {
    get {
      if case .applyPatchesTaskOutput(let v)? = output {return v}
      return Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput()
    }
    set {output = .applyPatchesTaskOutput(newValue)}
  }

  /// Final output details of the exec step task;
  public var execStepTaskOutput: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput {
    get {
      if case .execStepTaskOutput(let v)? = output {return v}
      return Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput()
    }
    set {output = .execStepTaskOutput(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Final output details of the current task.
  public enum OneOf_Output: Equatable {
    /// Final output details of the apply patches task;
    case applyPatchesTaskOutput(Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput)
    /// Final output details of the exec step task;
    case execStepTaskOutput(Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest.OneOf_Output, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest.OneOf_Output) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.applyPatchesTaskOutput, .applyPatchesTaskOutput): return {
        guard case .applyPatchesTaskOutput(let l) = lhs, case .applyPatchesTaskOutput(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.execStepTaskOutput, .execStepTaskOutput): return {
        guard case .execStepTaskOutput(let l) = lhs, case .execStepTaskOutput(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The response message after the agent signaled the current task complete.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for registering the agent.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. This is the Compute Engine instance identity token described in
  /// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
  /// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
  public var instanceIDToken: String = String()

  /// Required. The version of the agent.
  public var agentVersion: String = String()

  /// Required. The capabilities supported by the agent. Supported values are:
  /// PATCH_GA
  /// GUEST_POLICY_BETA
  public var supportedCapabilities: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The response message after the agent registered.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request message for having the agent report inventory.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. This is the Compute Engine instance identity token described in
  /// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
  /// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
  public var instanceIDToken: String = String()

  /// Required. This is a client created checksum that should be generated based on the
  /// contents of the reported inventory.  This will be used by the service to
  /// determine if it has the latest version of inventory.
  public var inventoryChecksum: String = String()

  /// Optional. This is the details of the inventory.  Should only be provided if the
  /// inventory has changed since the last report, or if instructed by the
  /// service to provide full inventory.
  public var inventory: Google_Cloud_Osconfig_Agentendpoint_V1_Inventory {
    get {return _inventory ?? Google_Cloud_Osconfig_Agentendpoint_V1_Inventory()}
    set {_inventory = newValue}
  }
  /// Returns true if `inventory` has been explicitly set.
  public var hasInventory: Bool {return self._inventory != nil}
  /// Clears the value of `inventory`. Subsequent reads from it will return its default value.
  public mutating func clearInventory() {self._inventory = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _inventory: Google_Cloud_Osconfig_Agentendpoint_V1_Inventory? = nil
}

/// The response message after the agent has reported inventory.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If true, the full inventory should be reported back to the server.
  public var reportFullInventory: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.osconfig.agentendpoint.v1"

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReceiveTaskNotificationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instance_id_token"),
    2: .standard(proto: "agent_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instanceIDToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.agentVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instanceIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceIDToken, fieldNumber: 1)
    }
    if !self.agentVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.agentVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationRequest, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationRequest) -> Bool {
    if lhs.instanceIDToken != rhs.instanceIDToken {return false}
    if lhs.agentVersion != rhs.agentVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReceiveTaskNotificationResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationResponse, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReceiveTaskNotificationResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartNextTaskRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instance_id_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instanceIDToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instanceIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceIDToken, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskRequest, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskRequest) -> Bool {
    if lhs.instanceIDToken != rhs.instanceIDToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartNextTaskResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "task"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._task) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._task {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskResponse, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_StartNextTaskResponse) -> Bool {
    if lhs._task != rhs._task {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportTaskProgressRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instance_id_token"),
    2: .standard(proto: "task_id"),
    3: .standard(proto: "task_type"),
    4: .standard(proto: "apply_patches_task_progress"),
    5: .standard(proto: "exec_step_task_progress"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instanceIDToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.taskType) }()
      case 4: try {
        var v: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress?
        if let current = self.progress {
          try decoder.handleConflictingOneOf()
          if case .applyPatchesTaskProgress(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.progress = .applyPatchesTaskProgress(v)}
      }()
      case 5: try {
        var v: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress?
        if let current = self.progress {
          try decoder.handleConflictingOneOf()
          if case .execStepTaskProgress(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.progress = .execStepTaskProgress(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instanceIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceIDToken, fieldNumber: 1)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 2)
    }
    if self.taskType != .unspecified {
      try visitor.visitSingularEnumField(value: self.taskType, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.progress {
    case .applyPatchesTaskProgress?: try {
      guard case .applyPatchesTaskProgress(let v)? = self.progress else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .execStepTaskProgress?: try {
      guard case .execStepTaskProgress(let v)? = self.progress else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressRequest) -> Bool {
    if lhs.instanceIDToken != rhs.instanceIDToken {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.taskType != rhs.taskType {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportTaskProgressResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_directive"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.taskDirective) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskDirective != .unspecified {
      try visitor.visitSingularEnumField(value: self.taskDirective, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressResponse, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskProgressResponse) -> Bool {
    if lhs.taskDirective != rhs.taskDirective {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportTaskCompleteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instance_id_token"),
    2: .standard(proto: "task_id"),
    3: .standard(proto: "task_type"),
    4: .standard(proto: "error_message"),
    5: .standard(proto: "apply_patches_task_output"),
    6: .standard(proto: "exec_step_task_output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instanceIDToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.taskType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 5: try {
        var v: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput?
        if let current = self.output {
          try decoder.handleConflictingOneOf()
          if case .applyPatchesTaskOutput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.output = .applyPatchesTaskOutput(v)}
      }()
      case 6: try {
        var v: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput?
        if let current = self.output {
          try decoder.handleConflictingOneOf()
          if case .execStepTaskOutput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.output = .execStepTaskOutput(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instanceIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceIDToken, fieldNumber: 1)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 2)
    }
    if self.taskType != .unspecified {
      try visitor.visitSingularEnumField(value: self.taskType, fieldNumber: 3)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.output {
    case .applyPatchesTaskOutput?: try {
      guard case .applyPatchesTaskOutput(let v)? = self.output else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .execStepTaskOutput?: try {
      guard case .execStepTaskOutput(let v)? = self.output else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteRequest) -> Bool {
    if lhs.instanceIDToken != rhs.instanceIDToken {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.taskType != rhs.taskType {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportTaskCompleteResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteResponse, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportTaskCompleteResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterAgentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instance_id_token"),
    2: .standard(proto: "agent_version"),
    3: .standard(proto: "supported_capabilities"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instanceIDToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.agentVersion) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.supportedCapabilities) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instanceIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceIDToken, fieldNumber: 1)
    }
    if !self.agentVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.agentVersion, fieldNumber: 2)
    }
    if !self.supportedCapabilities.isEmpty {
      try visitor.visitRepeatedStringField(value: self.supportedCapabilities, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentRequest, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentRequest) -> Bool {
    if lhs.instanceIDToken != rhs.instanceIDToken {return false}
    if lhs.agentVersion != rhs.agentVersion {return false}
    if lhs.supportedCapabilities != rhs.supportedCapabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterAgentResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentResponse, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_RegisterAgentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportInventoryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instance_id_token"),
    2: .standard(proto: "inventory_checksum"),
    3: .same(proto: "inventory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.instanceIDToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.inventoryChecksum) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._inventory) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instanceIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceIDToken, fieldNumber: 1)
    }
    if !self.inventoryChecksum.isEmpty {
      try visitor.visitSingularStringField(value: self.inventoryChecksum, fieldNumber: 2)
    }
    if let v = self._inventory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryRequest, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryRequest) -> Bool {
    if lhs.instanceIDToken != rhs.instanceIDToken {return false}
    if lhs.inventoryChecksum != rhs.inventoryChecksum {return false}
    if lhs._inventory != rhs._inventory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportInventoryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "report_full_inventory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.reportFullInventory) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reportFullInventory != false {
      try visitor.visitSingularBoolField(value: self.reportFullInventory, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryResponse, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ReportInventoryResponse) -> Bool {
    if lhs.reportFullInventory != rhs.reportFullInventory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
