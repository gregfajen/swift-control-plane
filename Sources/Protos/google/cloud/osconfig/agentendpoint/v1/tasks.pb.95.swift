// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/osconfig/agentendpoint/v1/tasks.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies the current agent behavior.
public enum Google_Cloud_Osconfig_Agentendpoint_V1_TaskDirective: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified is invalid.
  case unspecified // = 0

  /// The task should continue to progress.
  case `continue` // = 1

  /// Task should not be started, or if already in progress, should stop
  /// at first safe stopping point.  Task should be considered done and will
  /// never repeat.
  case stop // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .continue
    case 2: self = .stop
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .continue: return 1
    case .stop: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Osconfig_Agentendpoint_V1_TaskDirective: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Osconfig_Agentendpoint_V1_TaskDirective] = [
    .unspecified,
    .continue,
    .stop,
  ]
}

#endif  // swift(>=4.2)

/// Specifies the type of task to perform.
public enum Google_Cloud_Osconfig_Agentendpoint_V1_TaskType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified is invalid.
  case unspecified // = 0

  /// The apply patches task.
  case applyPatches // = 1

  /// The exec step task.
  case execStepTask // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .applyPatches
    case 2: self = .execStepTask
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .applyPatches: return 1
    case .execStepTask: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Osconfig_Agentendpoint_V1_TaskType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Osconfig_Agentendpoint_V1_TaskType] = [
    .unspecified,
    .applyPatches,
    .execStepTask,
  ]
}

#endif  // swift(>=4.2)

/// A unit of work to be performed by the agent.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_Task {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique task id.
  public var taskID: String = String()

  /// The type of task to perform.
  ///
  /// Task details must include the appropriate message based on this enum as
  /// specified below:
  /// APPLY_PATCHES = ApplyPatchesTask
  /// EXEC_STEP = ExecStepTask;
  public var taskType: Google_Cloud_Osconfig_Agentendpoint_V1_TaskType = .unspecified

  /// Current directive to the agent.
  public var taskDirective: Google_Cloud_Osconfig_Agentendpoint_V1_TaskDirective = .unspecified

  /// Specific details about the current task to perform.
  public var taskDetails: Google_Cloud_Osconfig_Agentendpoint_V1_Task.OneOf_TaskDetails? = nil

  /// Details about the apply patches task to perform.
  public var applyPatchesTask: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask {
    get {
      if case .applyPatchesTask(let v)? = taskDetails {return v}
      return Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask()
    }
    set {taskDetails = .applyPatchesTask(newValue)}
  }

  /// Details about the exec step task to perform.
  public var execStepTask: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask {
    get {
      if case .execStepTask(let v)? = taskDetails {return v}
      return Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask()
    }
    set {taskDetails = .execStepTask(newValue)}
  }

  /// Labels describing the task.  Used for logging by the agent.
  public var serviceLabels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specific details about the current task to perform.
  public enum OneOf_TaskDetails: Equatable {
    /// Details about the apply patches task to perform.
    case applyPatchesTask(Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask)
    /// Details about the exec step task to perform.
    case execStepTask(Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_Task.OneOf_TaskDetails, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_Task.OneOf_TaskDetails) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.applyPatchesTask, .applyPatchesTask): return {
        guard case .applyPatchesTask(let l) = lhs, case .applyPatchesTask(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.execStepTask, .execStepTask): return {
        guard case .execStepTask(let l) = lhs, case .execStepTask(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Message which instructs agent to apply patches.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specific information about how patches should be applied.
  public var patchConfig: Google_Cloud_Osconfig_Agentendpoint_V1_PatchConfig {
    get {return _patchConfig ?? Google_Cloud_Osconfig_Agentendpoint_V1_PatchConfig()}
    set {_patchConfig = newValue}
  }
  /// Returns true if `patchConfig` has been explicitly set.
  public var hasPatchConfig: Bool {return self._patchConfig != nil}
  /// Clears the value of `patchConfig`. Subsequent reads from it will return its default value.
  public mutating func clearPatchConfig() {self._patchConfig = nil}

  /// If true, the agent will report its status as it goes through the motions
  /// but won't actually run any updates or perform any reboots.
  public var dryRun: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _patchConfig: Google_Cloud_Osconfig_Agentendpoint_V1_PatchConfig? = nil
}

/// Information reported from the agent about applying patches execution.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The current state of this patch execution.
  public var state: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The intermediate states of applying patches.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified is invalid.
    case unspecified // = 0

    /// The agent has started the patch task.
    case started // = 4

    /// The agent is currently downloading patches.
    case downloadingPatches // = 1

    /// The agent is currently applying patches.
    case applyingPatches // = 2

    /// The agent is currently rebooting the VM instance.
    case rebooting // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .downloadingPatches
      case 2: self = .applyingPatches
      case 3: self = .rebooting
      case 4: self = .started
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .downloadingPatches: return 1
      case .applyingPatches: return 2
      case .rebooting: return 3
      case .started: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress.State] = [
    .unspecified,
    .started,
    .downloadingPatches,
    .applyingPatches,
    .rebooting,
  ]
}

#endif  // swift(>=4.2)

/// Information reported from the agent about applying patches execution.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The final state of this task.
  public var state: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The final states of applying patches.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified is invalid.
    case unspecified // = 0

    /// Applying patches completed successfully.
    case succeeded // = 1

    /// Applying patches completed successfully, but a reboot is required.
    case succeededRebootRequired // = 2

    /// Applying patches failed.
    case failed // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .succeeded
      case 2: self = .succeededRebootRequired
      case 3: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .succeeded: return 1
      case .succeededRebootRequired: return 2
      case .failed: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput.State] = [
    .unspecified,
    .succeeded,
    .succeededRebootRequired,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// Message which instructs agent to execute the following command.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Details of the exec step to run.
  public var execStep: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStep {
    get {return _execStep ?? Google_Cloud_Osconfig_Agentendpoint_V1_ExecStep()}
    set {_execStep = newValue}
  }
  /// Returns true if `execStep` has been explicitly set.
  public var hasExecStep: Bool {return self._execStep != nil}
  /// Clears the value of `execStep`. Subsequent reads from it will return its default value.
  public mutating func clearExecStep() {self._execStep = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _execStep: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStep? = nil
}

/// Information reported from the agent about the exec step execution.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The current state of this exec step.
  public var state: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress.State = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The intermediate states of exec steps.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified is invalid.
    case unspecified // = 0

    /// The agent has started the exec step task.
    case started // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .started
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .started: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress.State] = [
    .unspecified,
    .started,
  ]
}

#endif  // swift(>=4.2)

/// Information reported from the agent about the exec step execution.
public struct Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The final state of the exec step.
  public var state: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput.State = .unspecified

  /// Required. The exit code received from the script which ran as part of the exec step.
  public var exitCode: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The final states of exec steps.
  public enum State: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified is invalid.
    case unspecified // = 0

    /// The exec step completed normally.
    case completed // = 1

    /// The exec step was terminated because it took too long.
    case timedOut // = 2

    /// The exec step task was cancelled before it started.
    case cancelled // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .completed
      case 2: self = .timedOut
      case 3: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .completed: return 1
      case .timedOut: return 2
      case .cancelled: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput.State] = [
    .unspecified,
    .completed,
    .timedOut,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.osconfig.agentendpoint.v1"

extension Google_Cloud_Osconfig_Agentendpoint_V1_TaskDirective: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TASK_DIRECTIVE_UNSPECIFIED"),
    1: .same(proto: "CONTINUE"),
    2: .same(proto: "STOP"),
  ]
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_TaskType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TASK_TYPE_UNSPECIFIED"),
    1: .same(proto: "APPLY_PATCHES"),
    2: .same(proto: "EXEC_STEP_TASK"),
  ]
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_Task: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Task"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .standard(proto: "task_type"),
    3: .standard(proto: "task_directive"),
    4: .standard(proto: "apply_patches_task"),
    5: .standard(proto: "exec_step_task"),
    6: .standard(proto: "service_labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.taskType) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.taskDirective) }()
      case 4: try {
        var v: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask?
        if let current = self.taskDetails {
          try decoder.handleConflictingOneOf()
          if case .applyPatchesTask(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.taskDetails = .applyPatchesTask(v)}
      }()
      case 5: try {
        var v: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask?
        if let current = self.taskDetails {
          try decoder.handleConflictingOneOf()
          if case .execStepTask(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.taskDetails = .execStepTask(v)}
      }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.serviceLabels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 1)
    }
    if self.taskType != .unspecified {
      try visitor.visitSingularEnumField(value: self.taskType, fieldNumber: 2)
    }
    if self.taskDirective != .unspecified {
      try visitor.visitSingularEnumField(value: self.taskDirective, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.taskDetails {
    case .applyPatchesTask?: try {
      guard case .applyPatchesTask(let v)? = self.taskDetails else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .execStepTask?: try {
      guard case .execStepTask(let v)? = self.taskDetails else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if !self.serviceLabels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.serviceLabels, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_Task, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_Task) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.taskType != rhs.taskType {return false}
    if lhs.taskDirective != rhs.taskDirective {return false}
    if lhs.taskDetails != rhs.taskDetails {return false}
    if lhs.serviceLabels != rhs.serviceLabels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplyPatchesTask"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "patch_config"),
    3: .standard(proto: "dry_run"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._patchConfig) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.dryRun) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._patchConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.dryRun != false {
      try visitor.visitSingularBoolField(value: self.dryRun, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTask) -> Bool {
    if lhs._patchConfig != rhs._patchConfig {return false}
    if lhs.dryRun != rhs.dryRun {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplyPatchesTaskProgress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskProgress.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "DOWNLOADING_PATCHES"),
    2: .same(proto: "APPLYING_PATCHES"),
    3: .same(proto: "REBOOTING"),
    4: .same(proto: "STARTED"),
  ]
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplyPatchesTaskOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ApplyPatchesTaskOutput.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "SUCCEEDED"),
    2: .same(proto: "SUCCEEDED_REBOOT_REQUIRED"),
    3: .same(proto: "FAILED"),
  ]
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecStepTask"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "exec_step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._execStep) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._execStep {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTask) -> Bool {
    if lhs._execStep != rhs._execStep {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecStepTaskProgress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskProgress.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "STARTED"),
  ]
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecStepTaskOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "exit_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.exitCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if self.exitCode != 0 {
      try visitor.visitSingularInt32Field(value: self.exitCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput, rhs: Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.exitCode != rhs.exitCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Osconfig_Agentendpoint_V1_ExecStepTaskOutput.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "COMPLETED"),
    2: .same(proto: "TIMED_OUT"),
    3: .same(proto: "CANCELLED"),
  ]
}
