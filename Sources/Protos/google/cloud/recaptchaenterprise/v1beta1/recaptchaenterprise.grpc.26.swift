//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/recaptchaenterprise/v1beta1/recaptchaenterprise.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1Client, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1ClientProtocol: GRPCClient {
  func createAssessment(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_CreateAssessmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_CreateAssessmentRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Assessment>

  func annotateAssessment(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentRequest, Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentResponse>

  func createKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_CreateKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_CreateKeyRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Key>

  func listKeys(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysRequest, Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysResponse>

  func getKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_GetKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_GetKeyRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Key>

  func updateKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_UpdateKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_UpdateKeyRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Key>

  func deleteKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_DeleteKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_DeleteKeyRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1ClientProtocol {

  /// Creates an Assessment of the likelihood an event is legitimate.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAssessment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAssessment(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_CreateAssessmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_CreateAssessmentRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Assessment> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/CreateAssessment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Annotates a previously created Assessment to provide additional information
  /// on whether the event turned out to be authentic or fradulent.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnnotateAssessment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func annotateAssessment(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentRequest, Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/AnnotateAssessment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new reCAPTCHA Enterprise key.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_CreateKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_CreateKeyRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Key> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/CreateKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the list of all keys that belong to a project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listKeys(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysRequest, Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/ListKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the specified key.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_GetKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_GetKeyRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Key> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/GetKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified key.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_UpdateKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_UpdateKeyRequest, Google_Cloud_Recaptchaenterprise_V1beta1_Key> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/UpdateKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the specified key.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteKey(
    _ request: Google_Cloud_Recaptchaenterprise_V1beta1_DeleteKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Recaptchaenterprise_V1beta1_DeleteKeyRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1/DeleteKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1Client: Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1Provider: CallHandlerProvider {
  /// Creates an Assessment of the likelihood an event is legitimate.
  func createAssessment(request: Google_Cloud_Recaptchaenterprise_V1beta1_CreateAssessmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Recaptchaenterprise_V1beta1_Assessment>
  /// Annotates a previously created Assessment to provide additional information
  /// on whether the event turned out to be authentic or fradulent.
  func annotateAssessment(request: Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Recaptchaenterprise_V1beta1_AnnotateAssessmentResponse>
  /// Creates a new reCAPTCHA Enterprise key.
  func createKey(request: Google_Cloud_Recaptchaenterprise_V1beta1_CreateKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Recaptchaenterprise_V1beta1_Key>
  /// Returns the list of all keys that belong to a project.
  func listKeys(request: Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Recaptchaenterprise_V1beta1_ListKeysResponse>
  /// Returns the specified key.
  func getKey(request: Google_Cloud_Recaptchaenterprise_V1beta1_GetKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Recaptchaenterprise_V1beta1_Key>
  /// Updates the specified key.
  func updateKey(request: Google_Cloud_Recaptchaenterprise_V1beta1_UpdateKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Recaptchaenterprise_V1beta1_Key>
  /// Deletes the specified key.
  func deleteKey(request: Google_Cloud_Recaptchaenterprise_V1beta1_DeleteKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Cloud_Recaptchaenterprise_V1beta1_RecaptchaEnterpriseServiceV1Beta1Provider {
  public var serviceName: Substring { return "google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateAssessment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAssessment(request: request, context: context)
        }
      }

    case "AnnotateAssessment":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.annotateAssessment(request: request, context: context)
        }
      }

    case "CreateKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createKey(request: request, context: context)
        }
      }

    case "ListKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listKeys(request: request, context: context)
        }
      }

    case "GetKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getKey(request: request, context: context)
        }
      }

    case "UpdateKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateKey(request: request, context: context)
        }
      }

    case "DeleteKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteKey(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

