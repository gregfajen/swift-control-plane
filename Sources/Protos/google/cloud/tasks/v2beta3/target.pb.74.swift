// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/tasks/v2beta3/target.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The HTTP method used to execute the task.
public enum Google_Cloud_Tasks_V2beta3_HttpMethod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// HTTP method unspecified
  case unspecified // = 0

  /// HTTP POST
  case post // = 1

  /// HTTP GET
  case get // = 2

  /// HTTP HEAD
  case head // = 3

  /// HTTP PUT
  case put // = 4

  /// HTTP DELETE
  case delete // = 5

  /// HTTP PATCH
  case patch // = 6

  /// HTTP OPTIONS
  case options // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .post
    case 2: self = .get
    case 3: self = .head
    case 4: self = .put
    case 5: self = .delete
    case 6: self = .patch
    case 7: self = .options
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .post: return 1
    case .get: return 2
    case .head: return 3
    case .put: return 4
    case .delete: return 5
    case .patch: return 6
    case .options: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Tasks_V2beta3_HttpMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Tasks_V2beta3_HttpMethod] = [
    .unspecified,
    .post,
    .get,
    .head,
    .put,
    .delete,
    .patch,
    .options,
  ]
}

#endif  // swift(>=4.2)

/// HTTP request.
///
/// The task will be pushed to the worker as an HTTP request. If the worker
/// or the redirected worker acknowledges the task by returning a successful HTTP
/// response code ([`200` - `299`]), the task will be removed from the queue. If
/// any other HTTP response code is returned or no response is received, the
/// task will be retried according to the following:
///
/// * User-specified throttling: [retry configuration][google.cloud.tasks.v2beta3.Queue.retry_config],
///   [rate limits][google.cloud.tasks.v2beta3.Queue.rate_limits], and the [queue's state][google.cloud.tasks.v2beta3.Queue.state].
///
/// * System throttling: To prevent the worker from overloading, Cloud Tasks may
///   temporarily reduce the queue's effective rate. User-specified settings
///   will not be changed.
///
///  System throttling happens because:
///
///   * Cloud Tasks backs off on all errors. Normally the backoff specified in
///     [rate limits][google.cloud.tasks.v2beta3.Queue.rate_limits] will be used. But if the worker returns
///     `429` (Too Many Requests), `503` (Service Unavailable), or the rate of
///     errors is high, Cloud Tasks will use a higher backoff rate. The retry
///     specified in the `Retry-After` HTTP response header is considered.
///
///   * To prevent traffic spikes and to smooth sudden increases in traffic,
///     dispatches ramp up slowly when the queue is newly created or idle and
///     if large numbers of tasks suddenly become available to dispatch (due to
///     spikes in create task rates, the queue being unpaused, or many tasks
///     that are scheduled at the same time).
public struct Google_Cloud_Tasks_V2beta3_HttpRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The full url path that the request will be sent to.
  ///
  /// This string must begin with either "http://" or "https://". Some examples
  /// are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will
  /// encode some characters for safety and compatibility. The maximum allowed
  /// URL length is 2083 characters after encoding.
  ///
  /// The `Location` header response from a redirect response [`300` - `399`]
  /// may be followed. The redirect is not counted as a separate attempt.
  public var url: String = String()

  /// The HTTP method to use for the request. The default is POST.
  public var httpMethod: Google_Cloud_Tasks_V2beta3_HttpMethod = .unspecified

  /// HTTP request headers.
  ///
  /// This map contains the header field names and values.
  /// Headers can be set when the
  /// [task is created][google.cloud.tasks.v2beta3.CloudTasks.CreateTask].
  ///
  /// These headers represent a subset of the headers that will accompany the
  /// task's HTTP request. Some HTTP request headers will be ignored or replaced.
  ///
  /// A partial list of headers that will be ignored or replaced is:
  ///
  /// * Host: This will be computed by Cloud Tasks and derived from
  ///   [HttpRequest.url][google.cloud.tasks.v2beta3.HttpRequest.url].
  /// * Content-Length: This will be computed by Cloud Tasks.
  /// * User-Agent: This will be set to `"Google-Cloud-Tasks"`.
  /// * X-Google-*: Google use only.
  /// * X-AppEngine-*: Google use only.
  ///
  /// `Content-Type` won't be set by Cloud Tasks. You can explicitly set
  /// `Content-Type` to a media type when the
  ///  [task is created][google.cloud.tasks.v2beta3.CloudTasks.CreateTask].
  ///  For example, `Content-Type` can be set to `"application/octet-stream"` or
  ///  `"application/json"`.
  ///
  /// Headers which can have multiple values (according to RFC2616) can be
  /// specified using comma-separated values.
  ///
  /// The size of the headers must be less than 80KB.
  public var headers: Dictionary<String,String> = [:]

  /// HTTP request body.
  ///
  /// A request body is allowed only if the
  /// [HTTP method][google.cloud.tasks.v2beta3.HttpRequest.http_method] is POST, PUT, or PATCH. It is an
  /// error to set body on a task with an incompatible [HttpMethod][google.cloud.tasks.v2beta3.HttpMethod].
  public var body: Data = Data()

  /// The mode for generating an `Authorization` header for HTTP requests.
  ///
  /// If specified, all `Authorization` headers in the [HttpRequest.headers][google.cloud.tasks.v2beta3.HttpRequest.headers]
  /// field will be overridden.
  public var authorizationHeader: Google_Cloud_Tasks_V2beta3_HttpRequest.OneOf_AuthorizationHeader? = nil

  /// If specified, an
  /// [OAuth token](https://developers.google.com/identity/protocols/OAuth2)
  /// will be generated and attached as an `Authorization` header in the HTTP
  /// request.
  ///
  /// This type of authorization should generally only be used when calling
  /// Google APIs hosted on *.googleapis.com.
  public var oauthToken: Google_Cloud_Tasks_V2beta3_OAuthToken {
    get {
      if case .oauthToken(let v)? = authorizationHeader {return v}
      return Google_Cloud_Tasks_V2beta3_OAuthToken()
    }
    set {authorizationHeader = .oauthToken(newValue)}
  }

  /// If specified, an
  /// [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect)
  /// token will be generated and attached as an `Authorization` header in the
  /// HTTP request.
  ///
  /// This type of authorization can be used for many scenarios, including
  /// calling Cloud Run, or endpoints where you intend to validate the token
  /// yourself.
  public var oidcToken: Google_Cloud_Tasks_V2beta3_OidcToken {
    get {
      if case .oidcToken(let v)? = authorizationHeader {return v}
      return Google_Cloud_Tasks_V2beta3_OidcToken()
    }
    set {authorizationHeader = .oidcToken(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The mode for generating an `Authorization` header for HTTP requests.
  ///
  /// If specified, all `Authorization` headers in the [HttpRequest.headers][google.cloud.tasks.v2beta3.HttpRequest.headers]
  /// field will be overridden.
  public enum OneOf_AuthorizationHeader: Equatable {
    /// If specified, an
    /// [OAuth token](https://developers.google.com/identity/protocols/OAuth2)
    /// will be generated and attached as an `Authorization` header in the HTTP
    /// request.
    ///
    /// This type of authorization should generally only be used when calling
    /// Google APIs hosted on *.googleapis.com.
    case oauthToken(Google_Cloud_Tasks_V2beta3_OAuthToken)
    /// If specified, an
    /// [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect)
    /// token will be generated and attached as an `Authorization` header in the
    /// HTTP request.
    ///
    /// This type of authorization can be used for many scenarios, including
    /// calling Cloud Run, or endpoints where you intend to validate the token
    /// yourself.
    case oidcToken(Google_Cloud_Tasks_V2beta3_OidcToken)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloud_Tasks_V2beta3_HttpRequest.OneOf_AuthorizationHeader, rhs: Google_Cloud_Tasks_V2beta3_HttpRequest.OneOf_AuthorizationHeader) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.oauthToken, .oauthToken): return {
        guard case .oauthToken(let l) = lhs, case .oauthToken(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oidcToken, .oidcToken): return {
        guard case .oidcToken(let l) = lhs, case .oidcToken(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// App Engine HTTP queue.
///
/// The task will be delivered to the App Engine application hostname
/// specified by its [AppEngineHttpQueue][google.cloud.tasks.v2beta3.AppEngineHttpQueue] and [AppEngineHttpRequest][google.cloud.tasks.v2beta3.AppEngineHttpRequest].
/// The documentation for [AppEngineHttpRequest][google.cloud.tasks.v2beta3.AppEngineHttpRequest] explains how the
/// task's host URL is constructed.
///
/// Using [AppEngineHttpQueue][google.cloud.tasks.v2beta3.AppEngineHttpQueue] requires
/// [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
/// Google IAM permission for the project
/// and the following scope:
///
/// `https://www.googleapis.com/auth/cloud-platform`
public struct Google_Cloud_Tasks_V2beta3_AppEngineHttpQueue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Overrides for the
  /// [task-level app_engine_routing][google.cloud.tasks.v2beta3.AppEngineHttpRequest.app_engine_routing].
  ///
  /// If set, `app_engine_routing_override` is used for all tasks in
  /// the queue, no matter what the setting is for the
  /// [task-level app_engine_routing][google.cloud.tasks.v2beta3.AppEngineHttpRequest.app_engine_routing].
  public var appEngineRoutingOverride: Google_Cloud_Tasks_V2beta3_AppEngineRouting {
    get {return _appEngineRoutingOverride ?? Google_Cloud_Tasks_V2beta3_AppEngineRouting()}
    set {_appEngineRoutingOverride = newValue}
  }
  /// Returns true if `appEngineRoutingOverride` has been explicitly set.
  public var hasAppEngineRoutingOverride: Bool {return self._appEngineRoutingOverride != nil}
  /// Clears the value of `appEngineRoutingOverride`. Subsequent reads from it will return its default value.
  public mutating func clearAppEngineRoutingOverride() {self._appEngineRoutingOverride = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appEngineRoutingOverride: Google_Cloud_Tasks_V2beta3_AppEngineRouting? = nil
}

/// App Engine HTTP request.
///
/// The message defines the HTTP request that is sent to an App Engine app when
/// the task is dispatched.
///
/// Using [AppEngineHttpRequest][google.cloud.tasks.v2beta3.AppEngineHttpRequest] requires
/// [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
/// Google IAM permission for the project
/// and the following scope:
///
/// `https://www.googleapis.com/auth/cloud-platform`
///
/// The task will be delivered to the App Engine app which belongs to the same
/// project as the queue. For more information, see
/// [How Requests are
/// Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
/// and how routing is affected by
/// [dispatch
/// files](https://cloud.google.com/appengine/docs/python/config/dispatchref).
/// Traffic is encrypted during transport and never leaves Google datacenters.
/// Because this traffic is carried over a communication mechanism internal to
/// Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS).
/// The request to the handler, however, will appear to have used the HTTP
/// protocol.
///
/// The [AppEngineRouting][google.cloud.tasks.v2beta3.AppEngineRouting] used to construct the URL that the task is
/// delivered to can be set at the queue-level or task-level:
///
/// * If set,
///   [app_engine_routing_override][google.cloud.tasks.v2beta3.AppEngineHttpQueue.app_engine_routing_override]
///   is used for all tasks in the queue, no matter what the setting
///   is for the
///   [task-level app_engine_routing][google.cloud.tasks.v2beta3.AppEngineHttpRequest.app_engine_routing].
///
///
/// The `url` that the task will be sent to is:
///
/// * `url =` [host][google.cloud.tasks.v2beta3.AppEngineRouting.host] `+`
///   [relative_uri][google.cloud.tasks.v2beta3.AppEngineHttpRequest.relative_uri]
///
/// Tasks can be dispatched to secure app handlers, unsecure app handlers, and
/// URIs restricted with
/// [`login:
/// admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref).
/// Because tasks are not run as any user, they cannot be dispatched to URIs
/// restricted with
/// [`login:
/// required`](https://cloud.google.com/appengine/docs/standard/python/config/appref)
/// Task dispatches also do not follow redirects.
///
/// The task attempt has succeeded if the app's request handler returns an HTTP
/// response code in the range [`200` - `299`]. The task attempt has failed if
/// the app's handler returns a non-2xx response code or Cloud Tasks does
/// not receive response before the [deadline][google.cloud.tasks.v2beta3.Task.dispatch_deadline]. Failed
/// tasks will be retried according to the
/// [retry configuration][google.cloud.tasks.v2beta3.Queue.retry_config]. `503` (Service Unavailable) is
/// considered an App Engine system error instead of an application error and
/// will cause Cloud Tasks' traffic congestion control to temporarily throttle
/// the queue's dispatches. Unlike other types of task targets, a `429` (Too Many
/// Requests) response from an app handler does not cause traffic congestion
/// control to throttle the queue.
public struct Google_Cloud_Tasks_V2beta3_AppEngineHttpRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The HTTP method to use for the request. The default is POST.
  ///
  /// The app's request handler for the task's target URL must be able to handle
  /// HTTP requests with this http_method, otherwise the task attempt fails with
  /// error code 405 (Method Not Allowed). See [Writing a push task request
  /// handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
  /// and the App Engine documentation for your runtime on [How Requests are
  /// Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
  public var httpMethod: Google_Cloud_Tasks_V2beta3_HttpMethod = .unspecified

  /// Task-level setting for App Engine routing.
  ///
  /// If set,
  /// [app_engine_routing_override][google.cloud.tasks.v2beta3.AppEngineHttpQueue.app_engine_routing_override]
  /// is used for all tasks in the queue, no matter what the setting is for the
  /// [task-level app_engine_routing][google.cloud.tasks.v2beta3.AppEngineHttpRequest.app_engine_routing].
  public var appEngineRouting: Google_Cloud_Tasks_V2beta3_AppEngineRouting {
    get {return _appEngineRouting ?? Google_Cloud_Tasks_V2beta3_AppEngineRouting()}
    set {_appEngineRouting = newValue}
  }
  /// Returns true if `appEngineRouting` has been explicitly set.
  public var hasAppEngineRouting: Bool {return self._appEngineRouting != nil}
  /// Clears the value of `appEngineRouting`. Subsequent reads from it will return its default value.
  public mutating func clearAppEngineRouting() {self._appEngineRouting = nil}

  /// The relative URI.
  ///
  /// The relative URI must begin with "/" and must be a valid HTTP relative URI.
  /// It can contain a path and query string arguments.
  /// If the relative URI is empty, then the root path "/" will be used.
  /// No spaces are allowed, and the maximum length allowed is 2083 characters.
  public var relativeUri: String = String()

  /// HTTP request headers.
  ///
  /// This map contains the header field names and values.
  /// Headers can be set when the
  /// [task is created][google.cloud.tasks.v2beta3.CloudTasks.CreateTask].
  /// Repeated headers are not supported but a header value can contain commas.
  ///
  /// Cloud Tasks sets some headers to default values:
  ///
  /// * `User-Agent`: By default, this header is
  ///   `"AppEngine-Google; (+http://code.google.com/appengine)"`.
  ///   This header can be modified, but Cloud Tasks will append
  ///   `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
  ///   modified `User-Agent`.
  ///
  /// If the task has a [body][google.cloud.tasks.v2beta3.AppEngineHttpRequest.body], Cloud
  /// Tasks sets the following headers:
  ///
  /// * `Content-Type`: By default, the `Content-Type` header is set to
  ///   `"application/octet-stream"`. The default can be overridden by explicitly
  ///   setting `Content-Type` to a particular media type when the
  ///   [task is created][google.cloud.tasks.v2beta3.CloudTasks.CreateTask].
  ///   For example, `Content-Type` can be set to `"application/json"`.
  /// * `Content-Length`: This is computed by Cloud Tasks. This value is
  ///   output only.   It cannot be changed.
  ///
  /// The headers below cannot be set or overridden:
  ///
  /// * `Host`
  /// * `X-Google-*`
  /// * `X-AppEngine-*`
  ///
  /// In addition, Cloud Tasks sets some headers when the task is dispatched,
  /// such as headers containing information about the task; see
  /// [request
  /// headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers).
  /// These headers are set only when the task is dispatched, so they are not
  /// visible when the task is returned in a Cloud Tasks response.
  ///
  /// Although there is no specific limit for the maximum number of headers or
  /// the size, there is a limit on the maximum size of the [Task][google.cloud.tasks.v2beta3.Task]. For more
  /// information, see the [CreateTask][google.cloud.tasks.v2beta3.CloudTasks.CreateTask] documentation.
  public var headers: Dictionary<String,String> = [:]

  /// HTTP request body.
  ///
  /// A request body is allowed only if the HTTP method is POST or PUT. It is
  /// an error to set a body on a task with an incompatible [HttpMethod][google.cloud.tasks.v2beta3.HttpMethod].
  public var body: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appEngineRouting: Google_Cloud_Tasks_V2beta3_AppEngineRouting? = nil
}

/// App Engine Routing.
///
/// Defines routing characteristics specific to App Engine - service, version,
/// and instance.
///
/// For more information about services, versions, and instances see
/// [An Overview of App
/// Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
/// [Microservices Architecture on Google App
/// Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
/// [App Engine Standard request
/// routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
/// and [App Engine Flex request
/// routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
public struct Google_Cloud_Tasks_V2beta3_AppEngineRouting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// App service.
  ///
  /// By default, the task is sent to the service which is the default
  /// service when the task is attempted.
  ///
  /// For some queues or tasks which were created using the App Engine
  /// Task Queue API, [host][google.cloud.tasks.v2beta3.AppEngineRouting.host] is not parsable
  /// into [service][google.cloud.tasks.v2beta3.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta3.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta3.AppEngineRouting.instance]. For example, some tasks
  /// which were created using the App Engine SDK use a custom domain
  /// name; custom domains are not parsed by Cloud Tasks. If
  /// [host][google.cloud.tasks.v2beta3.AppEngineRouting.host] is not parsable, then
  /// [service][google.cloud.tasks.v2beta3.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta3.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta3.AppEngineRouting.instance] are the empty string.
  public var service: String = String()

  /// App version.
  ///
  /// By default, the task is sent to the version which is the default
  /// version when the task is attempted.
  ///
  /// For some queues or tasks which were created using the App Engine
  /// Task Queue API, [host][google.cloud.tasks.v2beta3.AppEngineRouting.host] is not parsable
  /// into [service][google.cloud.tasks.v2beta3.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta3.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta3.AppEngineRouting.instance]. For example, some tasks
  /// which were created using the App Engine SDK use a custom domain
  /// name; custom domains are not parsed by Cloud Tasks. If
  /// [host][google.cloud.tasks.v2beta3.AppEngineRouting.host] is not parsable, then
  /// [service][google.cloud.tasks.v2beta3.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta3.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta3.AppEngineRouting.instance] are the empty string.
  public var version: String = String()

  /// App instance.
  ///
  /// By default, the task is sent to an instance which is available when
  /// the task is attempted.
  ///
  /// Requests can only be sent to a specific instance if
  /// [manual scaling is used in App Engine
  /// Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
  /// App Engine Flex does not support instances. For more information, see
  /// [App Engine Standard request
  /// routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
  /// and [App Engine Flex request
  /// routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
  public var instance: String = String()

  /// Output only. The host that the task is sent to.
  ///
  /// The host is constructed from the domain name of the app associated with
  /// the queue's project ID (for example <app-id>.appspot.com), and the
  /// [service][google.cloud.tasks.v2beta3.AppEngineRouting.service], [version][google.cloud.tasks.v2beta3.AppEngineRouting.version],
  /// and [instance][google.cloud.tasks.v2beta3.AppEngineRouting.instance]. Tasks which were created using
  /// the App Engine SDK might have a custom domain name.
  ///
  /// For more information, see
  /// [How Requests are
  /// Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
  public var host: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains information needed for generating an
/// [OAuth token](https://developers.google.com/identity/protocols/OAuth2).
/// This type of authorization should generally only be used when calling Google
/// APIs hosted on *.googleapis.com.
public struct Google_Cloud_Tasks_V2beta3_OAuthToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// [Service account email](https://cloud.google.com/iam/docs/service-accounts)
  /// to be used for generating OAuth token.
  /// The service account must be within the same project as the queue. The
  /// caller must have iam.serviceAccounts.actAs permission for the service
  /// account.
  public var serviceAccountEmail: String = String()

  /// OAuth scope to be used for generating OAuth access token.
  /// If not specified, "https://www.googleapis.com/auth/cloud-platform"
  /// will be used.
  public var scope: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains information needed for generating an
/// [OpenID Connect
/// token](https://developers.google.com/identity/protocols/OpenIDConnect).
/// This type of authorization can be used for many scenarios, including
/// calling Cloud Run, or endpoints where you intend to validate the token
/// yourself.
public struct Google_Cloud_Tasks_V2beta3_OidcToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// [Service account email](https://cloud.google.com/iam/docs/service-accounts)
  /// to be used for generating OIDC token.
  /// The service account must be within the same project as the queue. The
  /// caller must have iam.serviceAccounts.actAs permission for the service
  /// account.
  public var serviceAccountEmail: String = String()

  /// Audience to be used when generating OIDC token. If not specified, the URI
  /// specified in target will be used.
  public var audience: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.tasks.v2beta3"

extension Google_Cloud_Tasks_V2beta3_HttpMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HTTP_METHOD_UNSPECIFIED"),
    1: .same(proto: "POST"),
    2: .same(proto: "GET"),
    3: .same(proto: "HEAD"),
    4: .same(proto: "PUT"),
    5: .same(proto: "DELETE"),
    6: .same(proto: "PATCH"),
    7: .same(proto: "OPTIONS"),
  ]
}

extension Google_Cloud_Tasks_V2beta3_HttpRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HttpRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "http_method"),
    3: .same(proto: "headers"),
    4: .same(proto: "body"),
    5: .standard(proto: "oauth_token"),
    6: .standard(proto: "oidc_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.httpMethod) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.headers) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.body) }()
      case 5: try {
        var v: Google_Cloud_Tasks_V2beta3_OAuthToken?
        if let current = self.authorizationHeader {
          try decoder.handleConflictingOneOf()
          if case .oauthToken(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.authorizationHeader = .oauthToken(v)}
      }()
      case 6: try {
        var v: Google_Cloud_Tasks_V2beta3_OidcToken?
        if let current = self.authorizationHeader {
          try decoder.handleConflictingOneOf()
          if case .oidcToken(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.authorizationHeader = .oidcToken(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.httpMethod != .unspecified {
      try visitor.visitSingularEnumField(value: self.httpMethod, fieldNumber: 2)
    }
    if !self.headers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.headers, fieldNumber: 3)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularBytesField(value: self.body, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.authorizationHeader {
    case .oauthToken?: try {
      guard case .oauthToken(let v)? = self.authorizationHeader else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .oidcToken?: try {
      guard case .oidcToken(let v)? = self.authorizationHeader else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta3_HttpRequest, rhs: Google_Cloud_Tasks_V2beta3_HttpRequest) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.httpMethod != rhs.httpMethod {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.body != rhs.body {return false}
    if lhs.authorizationHeader != rhs.authorizationHeader {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta3_AppEngineHttpQueue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEngineHttpQueue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_engine_routing_override"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._appEngineRoutingOverride) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._appEngineRoutingOverride {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta3_AppEngineHttpQueue, rhs: Google_Cloud_Tasks_V2beta3_AppEngineHttpQueue) -> Bool {
    if lhs._appEngineRoutingOverride != rhs._appEngineRoutingOverride {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta3_AppEngineHttpRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEngineHttpRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "http_method"),
    2: .standard(proto: "app_engine_routing"),
    3: .standard(proto: "relative_uri"),
    4: .same(proto: "headers"),
    5: .same(proto: "body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.httpMethod) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._appEngineRouting) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.relativeUri) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.headers) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.body) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.httpMethod != .unspecified {
      try visitor.visitSingularEnumField(value: self.httpMethod, fieldNumber: 1)
    }
    if let v = self._appEngineRouting {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.relativeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.relativeUri, fieldNumber: 3)
    }
    if !self.headers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.headers, fieldNumber: 4)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularBytesField(value: self.body, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta3_AppEngineHttpRequest, rhs: Google_Cloud_Tasks_V2beta3_AppEngineHttpRequest) -> Bool {
    if lhs.httpMethod != rhs.httpMethod {return false}
    if lhs._appEngineRouting != rhs._appEngineRouting {return false}
    if lhs.relativeUri != rhs.relativeUri {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta3_AppEngineRouting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEngineRouting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "service"),
    2: .same(proto: "version"),
    3: .same(proto: "instance"),
    4: .same(proto: "host"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.instance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.host) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.instance.isEmpty {
      try visitor.visitSingularStringField(value: self.instance, fieldNumber: 3)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta3_AppEngineRouting, rhs: Google_Cloud_Tasks_V2beta3_AppEngineRouting) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.version != rhs.version {return false}
    if lhs.instance != rhs.instance {return false}
    if lhs.host != rhs.host {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta3_OAuthToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OAuthToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_account_email"),
    2: .same(proto: "scope"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceAccountEmail) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.scope) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountEmail, fieldNumber: 1)
    }
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta3_OAuthToken, rhs: Google_Cloud_Tasks_V2beta3_OAuthToken) -> Bool {
    if lhs.serviceAccountEmail != rhs.serviceAccountEmail {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta3_OidcToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OidcToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_account_email"),
    2: .same(proto: "audience"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceAccountEmail) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.audience) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountEmail, fieldNumber: 1)
    }
    if !self.audience.isEmpty {
      try visitor.visitSingularStringField(value: self.audience, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta3_OidcToken, rhs: Google_Cloud_Tasks_V2beta3_OidcToken) -> Bool {
    if lhs.serviceAccountEmail != rhs.serviceAccountEmail {return false}
    if lhs.audience != rhs.audience {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
