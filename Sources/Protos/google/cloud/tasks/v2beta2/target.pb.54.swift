// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/tasks/v2beta2/target.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The HTTP method used to execute the task.
public enum Google_Cloud_Tasks_V2beta2_HttpMethod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// HTTP method unspecified
  case unspecified // = 0

  /// HTTP POST
  case post // = 1

  /// HTTP GET
  case get // = 2

  /// HTTP HEAD
  case head // = 3

  /// HTTP PUT
  case put // = 4

  /// HTTP DELETE
  case delete // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .post
    case 2: self = .get
    case 3: self = .head
    case 4: self = .put
    case 5: self = .delete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .post: return 1
    case .get: return 2
    case .head: return 3
    case .put: return 4
    case .delete: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloud_Tasks_V2beta2_HttpMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Tasks_V2beta2_HttpMethod] = [
    .unspecified,
    .post,
    .get,
    .head,
    .put,
    .delete,
  ]
}

#endif  // swift(>=4.2)

/// Pull target.
public struct Google_Cloud_Tasks_V2beta2_PullTarget {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The pull message contains data that can be used by the caller of
/// [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] to process the task.
///
/// This proto can only be used for tasks in a queue which has
/// [pull_target][google.cloud.tasks.v2beta2.Queue.pull_target] set.
public struct Google_Cloud_Tasks_V2beta2_PullMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A data payload consumed by the worker to execute the task.
  public var payload: Data = Data()

  /// The task's tag.
  ///
  /// Tags allow similar tasks to be processed in a batch. If you label
  /// tasks with a tag, your worker can
  /// [lease tasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] with the same tag using
  /// [filter][google.cloud.tasks.v2beta2.LeaseTasksRequest.filter]. For example, if you want to
  /// aggregate the events associated with a specific user once a day,
  /// you could tag tasks with the user ID.
  ///
  /// The task's tag can only be set when the
  /// [task is created][google.cloud.tasks.v2beta2.CloudTasks.CreateTask].
  ///
  /// The tag must be less than 500 characters.
  ///
  /// SDK compatibility: Although the SDK allows tags to be either
  /// string or
  /// [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-),
  /// only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8
  /// encoded, the tag will be empty when the task is returned by Cloud Tasks.
  public var tag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// App Engine HTTP target.
///
/// The task will be delivered to the App Engine application hostname
/// specified by its [AppEngineHttpTarget][google.cloud.tasks.v2beta2.AppEngineHttpTarget] and [AppEngineHttpRequest][google.cloud.tasks.v2beta2.AppEngineHttpRequest].
/// The documentation for [AppEngineHttpRequest][google.cloud.tasks.v2beta2.AppEngineHttpRequest] explains how the
/// task's host URL is constructed.
///
/// Using [AppEngineHttpTarget][google.cloud.tasks.v2beta2.AppEngineHttpTarget] requires
/// [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
/// Google IAM permission for the project
/// and the following scope:
///
/// `https://www.googleapis.com/auth/cloud-platform`
public struct Google_Cloud_Tasks_V2beta2_AppEngineHttpTarget {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Overrides for the
  /// [task-level app_engine_routing][google.cloud.tasks.v2beta2.AppEngineHttpRequest.app_engine_routing].
  ///
  /// If set, `app_engine_routing_override` is used for all tasks in
  /// the queue, no matter what the setting is for the
  /// [task-level app_engine_routing][google.cloud.tasks.v2beta2.AppEngineHttpRequest.app_engine_routing].
  public var appEngineRoutingOverride: Google_Cloud_Tasks_V2beta2_AppEngineRouting {
    get {return _appEngineRoutingOverride ?? Google_Cloud_Tasks_V2beta2_AppEngineRouting()}
    set {_appEngineRoutingOverride = newValue}
  }
  /// Returns true if `appEngineRoutingOverride` has been explicitly set.
  public var hasAppEngineRoutingOverride: Bool {return self._appEngineRoutingOverride != nil}
  /// Clears the value of `appEngineRoutingOverride`. Subsequent reads from it will return its default value.
  public mutating func clearAppEngineRoutingOverride() {self._appEngineRoutingOverride = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appEngineRoutingOverride: Google_Cloud_Tasks_V2beta2_AppEngineRouting? = nil
}

/// App Engine HTTP request.
///
/// The message defines the HTTP request that is sent to an App Engine app when
/// the task is dispatched.
///
/// This proto can only be used for tasks in a queue which has
/// [app_engine_http_target][google.cloud.tasks.v2beta2.Queue.app_engine_http_target] set.
///
/// Using [AppEngineHttpRequest][google.cloud.tasks.v2beta2.AppEngineHttpRequest] requires
/// [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
/// Google IAM permission for the project
/// and the following scope:
///
/// `https://www.googleapis.com/auth/cloud-platform`
///
/// The task will be delivered to the App Engine app which belongs to the same
/// project as the queue. For more information, see
/// [How Requests are
/// Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
/// and how routing is affected by
/// [dispatch
/// files](https://cloud.google.com/appengine/docs/python/config/dispatchref).
/// Traffic is encrypted during transport and never leaves Google datacenters.
/// Because this traffic is carried over a communication mechanism internal to
/// Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS).
/// The request to the handler, however, will appear to have used the HTTP
/// protocol.
///
/// The [AppEngineRouting][google.cloud.tasks.v2beta2.AppEngineRouting] used to construct the URL that the task is
/// delivered to can be set at the queue-level or task-level:
///
/// * If set,
///    [app_engine_routing_override][google.cloud.tasks.v2beta2.AppEngineHttpTarget.app_engine_routing_override]
///    is used for all tasks in the queue, no matter what the setting
///    is for the
///    [task-level app_engine_routing][google.cloud.tasks.v2beta2.AppEngineHttpRequest.app_engine_routing].
///
///
/// The `url` that the task will be sent to is:
///
/// * `url =` [host][google.cloud.tasks.v2beta2.AppEngineRouting.host] `+`
///   [relative_url][google.cloud.tasks.v2beta2.AppEngineHttpRequest.relative_url]
///
/// Tasks can be dispatched to secure app handlers, unsecure app handlers, and
/// URIs restricted with
/// [`login:
/// admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref).
/// Because tasks are not run as any user, they cannot be dispatched to URIs
/// restricted with
/// [`login:
/// required`](https://cloud.google.com/appengine/docs/standard/python/config/appref)
/// Task dispatches also do not follow redirects.
///
/// The task attempt has succeeded if the app's request handler returns an HTTP
/// response code in the range [`200` - `299`]. The task attempt has failed if
/// the app's handler returns a non-2xx response code or Cloud Tasks does
/// not receive response before the [deadline][Task.dispatch_deadline]. Failed
/// tasks will be retried according to the
/// [retry configuration][google.cloud.tasks.v2beta2.Queue.retry_config]. `503` (Service Unavailable) is
/// considered an App Engine system error instead of an application error and
/// will cause Cloud Tasks' traffic congestion control to temporarily throttle
/// the queue's dispatches. Unlike other types of task targets, a `429` (Too Many
/// Requests) response from an app handler does not cause traffic congestion
/// control to throttle the queue.
public struct Google_Cloud_Tasks_V2beta2_AppEngineHttpRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The HTTP method to use for the request. The default is POST.
  ///
  /// The app's request handler for the task's target URL must be able to handle
  /// HTTP requests with this http_method, otherwise the task attempt will fail
  /// with error code 405 (Method Not Allowed). See
  /// [Writing a push task request
  /// handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
  /// and the documentation for the request handlers in the language your app is
  /// written in e.g.
  /// [Python Request
  /// Handler](https://cloud.google.com/appengine/docs/python/tools/webapp/requesthandlerclass).
  public var httpMethod: Google_Cloud_Tasks_V2beta2_HttpMethod = .unspecified

  /// Task-level setting for App Engine routing.
  ///
  /// If set,
  /// [app_engine_routing_override][google.cloud.tasks.v2beta2.AppEngineHttpTarget.app_engine_routing_override]
  /// is used for all tasks in the queue, no matter what the setting is for the
  /// [task-level app_engine_routing][google.cloud.tasks.v2beta2.AppEngineHttpRequest.app_engine_routing].
  public var appEngineRouting: Google_Cloud_Tasks_V2beta2_AppEngineRouting {
    get {return _appEngineRouting ?? Google_Cloud_Tasks_V2beta2_AppEngineRouting()}
    set {_appEngineRouting = newValue}
  }
  /// Returns true if `appEngineRouting` has been explicitly set.
  public var hasAppEngineRouting: Bool {return self._appEngineRouting != nil}
  /// Clears the value of `appEngineRouting`. Subsequent reads from it will return its default value.
  public mutating func clearAppEngineRouting() {self._appEngineRouting = nil}

  /// The relative URL.
  ///
  /// The relative URL must begin with "/" and must be a valid HTTP relative URL.
  /// It can contain a path and query string arguments.
  /// If the relative URL is empty, then the root path "/" will be used.
  /// No spaces are allowed, and the maximum length allowed is 2083 characters.
  public var relativeURL: String = String()

  /// HTTP request headers.
  ///
  /// This map contains the header field names and values.
  /// Headers can be set when the
  /// [task is created][google.cloud.tasks.v2beta2.CloudTasks.CreateTask].
  /// Repeated headers are not supported but a header value can contain commas.
  ///
  /// Cloud Tasks sets some headers to default values:
  ///
  /// * `User-Agent`: By default, this header is
  ///   `"AppEngine-Google; (+http://code.google.com/appengine)"`.
  ///   This header can be modified, but Cloud Tasks will append
  ///   `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
  ///   modified `User-Agent`.
  ///
  /// If the task has a [payload][google.cloud.tasks.v2beta2.AppEngineHttpRequest.payload], Cloud
  /// Tasks sets the following headers:
  ///
  /// * `Content-Type`: By default, the `Content-Type` header is set to
  ///   `"application/octet-stream"`. The default can be overridden by explicitly
  ///   setting `Content-Type` to a particular media type when the
  ///   [task is created][google.cloud.tasks.v2beta2.CloudTasks.CreateTask].
  ///   For example, `Content-Type` can be set to `"application/json"`.
  /// * `Content-Length`: This is computed by Cloud Tasks. This value is
  ///   output only.   It cannot be changed.
  ///
  /// The headers below cannot be set or overridden:
  ///
  /// * `Host`
  /// * `X-Google-*`
  /// * `X-AppEngine-*`
  ///
  /// In addition, Cloud Tasks sets some headers when the task is dispatched,
  /// such as headers containing information about the task; see
  /// [request
  /// headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers).
  /// These headers are set only when the task is dispatched, so they are not
  /// visible when the task is returned in a Cloud Tasks response.
  ///
  /// Although there is no specific limit for the maximum number of headers or
  /// the size, there is a limit on the maximum size of the [Task][google.cloud.tasks.v2beta2.Task]. For more
  /// information, see the [CreateTask][google.cloud.tasks.v2beta2.CloudTasks.CreateTask] documentation.
  public var headers: Dictionary<String,String> = [:]

  /// Payload.
  ///
  /// The payload will be sent as the HTTP message body. A message
  /// body, and thus a payload, is allowed only if the HTTP method is
  /// POST or PUT. It is an error to set a data payload on a task with
  /// an incompatible [HttpMethod][google.cloud.tasks.v2beta2.HttpMethod].
  public var payload: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appEngineRouting: Google_Cloud_Tasks_V2beta2_AppEngineRouting? = nil
}

/// App Engine Routing.
///
/// Defines routing characteristics specific to App Engine - service, version,
/// and instance.
///
/// For more information about services, versions, and instances see
/// [An Overview of App
/// Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
/// [Microservices Architecture on Google App
/// Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
/// [App Engine Standard request
/// routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
/// and [App Engine Flex request
/// routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
public struct Google_Cloud_Tasks_V2beta2_AppEngineRouting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// App service.
  ///
  /// By default, the task is sent to the service which is the default
  /// service when the task is attempted.
  ///
  /// For some queues or tasks which were created using the App Engine
  /// Task Queue API, [host][google.cloud.tasks.v2beta2.AppEngineRouting.host] is not parsable
  /// into [service][google.cloud.tasks.v2beta2.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta2.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance]. For example, some tasks
  /// which were created using the App Engine SDK use a custom domain
  /// name; custom domains are not parsed by Cloud Tasks. If
  /// [host][google.cloud.tasks.v2beta2.AppEngineRouting.host] is not parsable, then
  /// [service][google.cloud.tasks.v2beta2.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta2.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] are the empty string.
  public var service: String = String()

  /// App version.
  ///
  /// By default, the task is sent to the version which is the default
  /// version when the task is attempted.
  ///
  /// For some queues or tasks which were created using the App Engine
  /// Task Queue API, [host][google.cloud.tasks.v2beta2.AppEngineRouting.host] is not parsable
  /// into [service][google.cloud.tasks.v2beta2.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta2.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance]. For example, some tasks
  /// which were created using the App Engine SDK use a custom domain
  /// name; custom domains are not parsed by Cloud Tasks. If
  /// [host][google.cloud.tasks.v2beta2.AppEngineRouting.host] is not parsable, then
  /// [service][google.cloud.tasks.v2beta2.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta2.AppEngineRouting.version], and
  /// [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] are the empty string.
  public var version: String = String()

  /// App instance.
  ///
  /// By default, the task is sent to an instance which is available when
  /// the task is attempted.
  ///
  /// Requests can only be sent to a specific instance if
  /// [manual scaling is used in App Engine
  /// Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
  /// App Engine Flex does not support instances. For more information, see
  /// [App Engine Standard request
  /// routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
  /// and [App Engine Flex request
  /// routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
  public var instance: String = String()

  /// Output only. The host that the task is sent to.
  ///
  /// For more information, see
  /// [How Requests are
  /// Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
  ///
  /// The host is constructed as:
  ///
  ///
  /// * `host = [application_domain_name]`</br>
  ///   `| [service] + '.' + [application_domain_name]`</br>
  ///   `| [version] + '.' + [application_domain_name]`</br>
  ///   `| [version_dot_service]+ '.' + [application_domain_name]`</br>
  ///   `| [instance] + '.' + [application_domain_name]`</br>
  ///   `| [instance_dot_service] + '.' + [application_domain_name]`</br>
  ///   `| [instance_dot_version] + '.' + [application_domain_name]`</br>
  ///   `| [instance_dot_version_dot_service] + '.' + [application_domain_name]`
  ///
  /// * `application_domain_name` = The domain name of the app, for
  ///   example <app-id>.appspot.com, which is associated with the
  ///   queue's project ID. Some tasks which were created using the App Engine
  ///   SDK use a custom domain name.
  ///
  /// * `service =` [service][google.cloud.tasks.v2beta2.AppEngineRouting.service]
  ///
  /// * `version =` [version][google.cloud.tasks.v2beta2.AppEngineRouting.version]
  ///
  /// * `version_dot_service =`
  ///   [version][google.cloud.tasks.v2beta2.AppEngineRouting.version] `+ '.' +`
  ///   [service][google.cloud.tasks.v2beta2.AppEngineRouting.service]
  ///
  /// * `instance =` [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance]
  ///
  /// * `instance_dot_service =`
  ///   [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] `+ '.' +`
  ///   [service][google.cloud.tasks.v2beta2.AppEngineRouting.service]
  ///
  /// * `instance_dot_version =`
  ///   [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] `+ '.' +`
  ///   [version][google.cloud.tasks.v2beta2.AppEngineRouting.version]
  ///
  /// * `instance_dot_version_dot_service =`
  ///   [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] `+ '.' +`
  ///   [version][google.cloud.tasks.v2beta2.AppEngineRouting.version] `+ '.' +`
  ///   [service][google.cloud.tasks.v2beta2.AppEngineRouting.service]
  ///
  /// If [service][google.cloud.tasks.v2beta2.AppEngineRouting.service] is empty, then the task will be sent
  /// to the service which is the default service when the task is attempted.
  ///
  /// If [version][google.cloud.tasks.v2beta2.AppEngineRouting.version] is empty, then the task will be sent
  /// to the version which is the default version when the task is attempted.
  ///
  /// If [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] is empty, then the task
  /// will be sent to an instance which is available when the task is
  /// attempted.
  ///
  /// If [service][google.cloud.tasks.v2beta2.AppEngineRouting.service],
  /// [version][google.cloud.tasks.v2beta2.AppEngineRouting.version], or
  /// [instance][google.cloud.tasks.v2beta2.AppEngineRouting.instance] is invalid, then the task
  /// will be sent to the default version of the default service when
  /// the task is attempted.
  public var host: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.tasks.v2beta2"

extension Google_Cloud_Tasks_V2beta2_HttpMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HTTP_METHOD_UNSPECIFIED"),
    1: .same(proto: "POST"),
    2: .same(proto: "GET"),
    3: .same(proto: "HEAD"),
    4: .same(proto: "PUT"),
    5: .same(proto: "DELETE"),
  ]
}

extension Google_Cloud_Tasks_V2beta2_PullTarget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PullTarget"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta2_PullTarget, rhs: Google_Cloud_Tasks_V2beta2_PullTarget) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta2_PullMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PullMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 1)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta2_PullMessage, rhs: Google_Cloud_Tasks_V2beta2_PullMessage) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta2_AppEngineHttpTarget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEngineHttpTarget"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_engine_routing_override"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._appEngineRoutingOverride) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._appEngineRoutingOverride {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta2_AppEngineHttpTarget, rhs: Google_Cloud_Tasks_V2beta2_AppEngineHttpTarget) -> Bool {
    if lhs._appEngineRoutingOverride != rhs._appEngineRoutingOverride {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta2_AppEngineHttpRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEngineHttpRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "http_method"),
    2: .standard(proto: "app_engine_routing"),
    3: .standard(proto: "relative_url"),
    4: .same(proto: "headers"),
    5: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.httpMethod) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._appEngineRouting) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.relativeURL) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.headers) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.httpMethod != .unspecified {
      try visitor.visitSingularEnumField(value: self.httpMethod, fieldNumber: 1)
    }
    if let v = self._appEngineRouting {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.relativeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.relativeURL, fieldNumber: 3)
    }
    if !self.headers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.headers, fieldNumber: 4)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta2_AppEngineHttpRequest, rhs: Google_Cloud_Tasks_V2beta2_AppEngineHttpRequest) -> Bool {
    if lhs.httpMethod != rhs.httpMethod {return false}
    if lhs._appEngineRouting != rhs._appEngineRouting {return false}
    if lhs.relativeURL != rhs.relativeURL {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Tasks_V2beta2_AppEngineRouting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEngineRouting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "service"),
    2: .same(proto: "version"),
    3: .same(proto: "instance"),
    4: .same(proto: "host"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.instance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.host) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.instance.isEmpty {
      try visitor.visitSingularStringField(value: self.instance, fieldNumber: 3)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Tasks_V2beta2_AppEngineRouting, rhs: Google_Cloud_Tasks_V2beta2_AppEngineRouting) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.version != rhs.version {return false}
    if lhs.instance != rhs.instance {return false}
    if lhs.host != rhs.host {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
