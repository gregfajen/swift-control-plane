//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/tasks/v2beta2/cloudtasks.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Cloud_Tasks_V2beta2_CloudTasksClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Tasks_V2beta2_CloudTasksClientProtocol: GRPCClient {
  func listQueues(
    _ request: Google_Cloud_Tasks_V2beta2_ListQueuesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_ListQueuesRequest, Google_Cloud_Tasks_V2beta2_ListQueuesResponse>

  func getQueue(
    _ request: Google_Cloud_Tasks_V2beta2_GetQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_GetQueueRequest, Google_Cloud_Tasks_V2beta2_Queue>

  func createQueue(
    _ request: Google_Cloud_Tasks_V2beta2_CreateQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_CreateQueueRequest, Google_Cloud_Tasks_V2beta2_Queue>

  func updateQueue(
    _ request: Google_Cloud_Tasks_V2beta2_UpdateQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_UpdateQueueRequest, Google_Cloud_Tasks_V2beta2_Queue>

  func deleteQueue(
    _ request: Google_Cloud_Tasks_V2beta2_DeleteQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_DeleteQueueRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func purgeQueue(
    _ request: Google_Cloud_Tasks_V2beta2_PurgeQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_PurgeQueueRequest, Google_Cloud_Tasks_V2beta2_Queue>

  func pauseQueue(
    _ request: Google_Cloud_Tasks_V2beta2_PauseQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_PauseQueueRequest, Google_Cloud_Tasks_V2beta2_Queue>

  func resumeQueue(
    _ request: Google_Cloud_Tasks_V2beta2_ResumeQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_ResumeQueueRequest, Google_Cloud_Tasks_V2beta2_Queue>

  func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

  func listTasks(
    _ request: Google_Cloud_Tasks_V2beta2_ListTasksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_ListTasksRequest, Google_Cloud_Tasks_V2beta2_ListTasksResponse>

  func getTask(
    _ request: Google_Cloud_Tasks_V2beta2_GetTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_GetTaskRequest, Google_Cloud_Tasks_V2beta2_Task>

  func createTask(
    _ request: Google_Cloud_Tasks_V2beta2_CreateTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_CreateTaskRequest, Google_Cloud_Tasks_V2beta2_Task>

  func deleteTask(
    _ request: Google_Cloud_Tasks_V2beta2_DeleteTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_DeleteTaskRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func leaseTasks(
    _ request: Google_Cloud_Tasks_V2beta2_LeaseTasksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_LeaseTasksRequest, Google_Cloud_Tasks_V2beta2_LeaseTasksResponse>

  func acknowledgeTask(
    _ request: Google_Cloud_Tasks_V2beta2_AcknowledgeTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_AcknowledgeTaskRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func renewLease(
    _ request: Google_Cloud_Tasks_V2beta2_RenewLeaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_RenewLeaseRequest, Google_Cloud_Tasks_V2beta2_Task>

  func cancelLease(
    _ request: Google_Cloud_Tasks_V2beta2_CancelLeaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_CancelLeaseRequest, Google_Cloud_Tasks_V2beta2_Task>

  func runTask(
    _ request: Google_Cloud_Tasks_V2beta2_RunTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_RunTaskRequest, Google_Cloud_Tasks_V2beta2_Task>

}

extension Google_Cloud_Tasks_V2beta2_CloudTasksClientProtocol {

  /// Lists queues.
  ///
  /// Queues are returned in lexicographical order.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListQueues.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listQueues(
    _ request: Google_Cloud_Tasks_V2beta2_ListQueuesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_ListQueuesRequest, Google_Cloud_Tasks_V2beta2_ListQueuesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/ListQueues",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a queue.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getQueue(
    _ request: Google_Cloud_Tasks_V2beta2_GetQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_GetQueueRequest, Google_Cloud_Tasks_V2beta2_Queue> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/GetQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a queue.
  ///
  /// Queues created with this method allow tasks to live for a maximum of 31
  /// days. After a task is 31 days old, the task will be deleted regardless of whether
  /// it was dispatched or not.
  ///
  /// WARNING: Using this method may have unintended side effects if you are
  /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
  /// Read
  /// [Overview of Queue Management and
  /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
  /// this method.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createQueue(
    _ request: Google_Cloud_Tasks_V2beta2_CreateQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_CreateQueueRequest, Google_Cloud_Tasks_V2beta2_Queue> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/CreateQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a queue.
  ///
  /// This method creates the queue if it does not exist and updates
  /// the queue if it does exist.
  ///
  /// Queues created with this method allow tasks to live for a maximum of 31
  /// days. After a task is 31 days old, the task will be deleted regardless of whether
  /// it was dispatched or not.
  ///
  /// WARNING: Using this method may have unintended side effects if you are
  /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
  /// Read
  /// [Overview of Queue Management and
  /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
  /// this method.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateQueue(
    _ request: Google_Cloud_Tasks_V2beta2_UpdateQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_UpdateQueueRequest, Google_Cloud_Tasks_V2beta2_Queue> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/UpdateQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a queue.
  ///
  /// This command will delete the queue even if it has tasks in it.
  ///
  /// Note: If you delete a queue, a queue with the same name can't be created
  /// for 7 days.
  ///
  /// WARNING: Using this method may have unintended side effects if you are
  /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
  /// Read
  /// [Overview of Queue Management and
  /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
  /// this method.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteQueue(
    _ request: Google_Cloud_Tasks_V2beta2_DeleteQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_DeleteQueueRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/DeleteQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Purges a queue by deleting all of its tasks.
  ///
  /// All tasks created before this method is called are permanently deleted.
  ///
  /// Purge operations can take up to one minute to take effect. Tasks
  /// might be dispatched before the purge takes effect. A purge is irreversible.
  ///
  /// - Parameters:
  ///   - request: Request to send to PurgeQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func purgeQueue(
    _ request: Google_Cloud_Tasks_V2beta2_PurgeQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_PurgeQueueRequest, Google_Cloud_Tasks_V2beta2_Queue> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/PurgeQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Pauses the queue.
  ///
  /// If a queue is paused then the system will stop dispatching tasks
  /// until the queue is resumed via
  /// [ResumeQueue][google.cloud.tasks.v2beta2.CloudTasks.ResumeQueue]. Tasks can still be added
  /// when the queue is paused. A queue is paused if its
  /// [state][google.cloud.tasks.v2beta2.Queue.state] is [PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED].
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pauseQueue(
    _ request: Google_Cloud_Tasks_V2beta2_PauseQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_PauseQueueRequest, Google_Cloud_Tasks_V2beta2_Queue> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/PauseQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Resume a queue.
  ///
  /// This method resumes a queue after it has been
  /// [PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED] or
  /// [DISABLED][google.cloud.tasks.v2beta2.Queue.State.DISABLED]. The state of a queue is stored
  /// in the queue's [state][google.cloud.tasks.v2beta2.Queue.state]; after calling this method it
  /// will be set to [RUNNING][google.cloud.tasks.v2beta2.Queue.State.RUNNING].
  ///
  /// WARNING: Resuming many high-QPS queues at the same time can
  /// lead to target overloading. If you are resuming high-QPS
  /// queues, follow the 500/50/5 pattern described in
  /// [Managing Cloud Tasks Scaling
  /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
  ///
  /// - Parameters:
  ///   - request: Request to send to ResumeQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resumeQueue(
    _ request: Google_Cloud_Tasks_V2beta2_ResumeQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_ResumeQueueRequest, Google_Cloud_Tasks_V2beta2_Queue> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/ResumeQueue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the access control policy for a [Queue][google.cloud.tasks.v2beta2.Queue].
  /// Returns an empty policy if the resource exists and does not have a policy
  /// set.
  ///
  /// Authorization requires the following
  /// [Google IAM](https://cloud.google.com/iam) permission on the specified
  /// resource parent:
  ///
  /// * `cloudtasks.queues.getIamPolicy`
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/GetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the access control policy for a [Queue][google.cloud.tasks.v2beta2.Queue]. Replaces any existing
  /// policy.
  ///
  /// Note: The Cloud Console does not check queue-level IAM permissions yet.
  /// Project-level permissions are required to use the Cloud Console.
  ///
  /// Authorization requires the following
  /// [Google IAM](https://cloud.google.com/iam) permission on the specified
  /// resource parent:
  ///
  /// * `cloudtasks.queues.setIamPolicy`
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/SetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns permissions that a caller has on a [Queue][google.cloud.tasks.v2beta2.Queue].
  /// If the resource does not exist, this will return an empty set of
  /// permissions, not a [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
  ///
  /// Note: This operation is designed to be used for building permission-aware
  /// UIs and command-line tools, not for authorization checking. This operation
  /// may "fail open" without warning.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/TestIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists the tasks in a queue.
  ///
  /// By default, only the [BASIC][google.cloud.tasks.v2beta2.Task.View.BASIC] view is retrieved
  /// due to performance considerations;
  /// [response_view][google.cloud.tasks.v2beta2.ListTasksRequest.response_view] controls the
  /// subset of information which is returned.
  ///
  /// The tasks may be returned in any order. The ordering may change at any
  /// time.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTasks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTasks(
    _ request: Google_Cloud_Tasks_V2beta2_ListTasksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_ListTasksRequest, Google_Cloud_Tasks_V2beta2_ListTasksResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/ListTasks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a task.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTask(
    _ request: Google_Cloud_Tasks_V2beta2_GetTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_GetTaskRequest, Google_Cloud_Tasks_V2beta2_Task> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/GetTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a task and adds it to a queue.
  ///
  /// Tasks cannot be updated after creation; there is no UpdateTask command.
  ///
  /// * For [App Engine queues][google.cloud.tasks.v2beta2.AppEngineHttpTarget], the maximum task size is
  ///   100KB.
  /// * For [pull queues][google.cloud.tasks.v2beta2.PullTarget], the maximum task size is 1MB.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTask(
    _ request: Google_Cloud_Tasks_V2beta2_CreateTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_CreateTaskRequest, Google_Cloud_Tasks_V2beta2_Task> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/CreateTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a task.
  ///
  /// A task can be deleted if it is scheduled or dispatched. A task
  /// cannot be deleted if it has completed successfully or permanently
  /// failed.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteTask(
    _ request: Google_Cloud_Tasks_V2beta2_DeleteTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_DeleteTaskRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/DeleteTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Leases tasks from a pull queue for
  /// [lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration].
  ///
  /// This method is invoked by the worker to obtain a lease. The
  /// worker must acknowledge the task via
  /// [AcknowledgeTask][google.cloud.tasks.v2beta2.CloudTasks.AcknowledgeTask] after they have
  /// performed the work associated with the task.
  ///
  /// The [payload][google.cloud.tasks.v2beta2.PullMessage.payload] is intended to store data that
  /// the worker needs to perform the work associated with the task. To
  /// return the payloads in the [response][google.cloud.tasks.v2beta2.LeaseTasksResponse], set
  /// [response_view][google.cloud.tasks.v2beta2.LeaseTasksRequest.response_view] to
  /// [FULL][google.cloud.tasks.v2beta2.Task.View.FULL].
  ///
  /// A maximum of 10 qps of [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks]
  /// requests are allowed per
  /// queue. [RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
  /// is returned when this limit is
  /// exceeded. [RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
  /// is also returned when
  /// [max_tasks_dispatched_per_second][google.cloud.tasks.v2beta2.RateLimits.max_tasks_dispatched_per_second]
  /// is exceeded.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaseTasks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func leaseTasks(
    _ request: Google_Cloud_Tasks_V2beta2_LeaseTasksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_LeaseTasksRequest, Google_Cloud_Tasks_V2beta2_LeaseTasksResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/LeaseTasks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Acknowledges a pull task.
  ///
  /// The worker, that is, the entity that
  /// [leased][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] this task must call this method
  /// to indicate that the work associated with the task has finished.
  ///
  /// The worker must acknowledge a task within the
  /// [lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration] or the lease
  /// will expire and the task will become available to be leased
  /// again. After the task is acknowledged, it will not be returned
  /// by a later [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks],
  /// [GetTask][google.cloud.tasks.v2beta2.CloudTasks.GetTask], or
  /// [ListTasks][google.cloud.tasks.v2beta2.CloudTasks.ListTasks].
  ///
  /// - Parameters:
  ///   - request: Request to send to AcknowledgeTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func acknowledgeTask(
    _ request: Google_Cloud_Tasks_V2beta2_AcknowledgeTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_AcknowledgeTaskRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/AcknowledgeTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Renew the current lease of a pull task.
  ///
  /// The worker can use this method to extend the lease by a new
  /// duration, starting from now. The new task lease will be
  /// returned in the task's [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time].
  ///
  /// - Parameters:
  ///   - request: Request to send to RenewLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func renewLease(
    _ request: Google_Cloud_Tasks_V2beta2_RenewLeaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_RenewLeaseRequest, Google_Cloud_Tasks_V2beta2_Task> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/RenewLease",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Cancel a pull task's lease.
  ///
  /// The worker can use this method to cancel a task's lease by
  /// setting its [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] to now. This will
  /// make the task available to be leased to the next caller of
  /// [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks].
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelLease(
    _ request: Google_Cloud_Tasks_V2beta2_CancelLeaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_CancelLeaseRequest, Google_Cloud_Tasks_V2beta2_Task> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/CancelLease",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Forces a task to run now.
  ///
  /// When this method is called, Cloud Tasks will dispatch the task, even if
  /// the task is already running, the queue has reached its [RateLimits][google.cloud.tasks.v2beta2.RateLimits] or
  /// is [PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED].
  ///
  /// This command is meant to be used for manual debugging. For
  /// example, [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] can be used to retry a failed
  /// task after a fix has been made or to manually force a task to be
  /// dispatched now.
  ///
  /// The dispatched task is returned. That is, the task that is returned
  /// contains the [status][google.cloud.tasks.v2beta2.Task.status] after the task is dispatched but
  /// before the task is received by its target.
  ///
  /// If Cloud Tasks receives a successful response from the task's
  /// target, then the task will be deleted; otherwise the task's
  /// [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] will be reset to the time that
  /// [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] was called plus the retry delay specified
  /// in the queue's [RetryConfig][google.cloud.tasks.v2beta2.RetryConfig].
  ///
  /// [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] returns
  /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
  /// task that has already succeeded or permanently failed.
  ///
  /// [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] cannot be called on a
  /// [pull task][google.cloud.tasks.v2beta2.PullMessage].
  ///
  /// - Parameters:
  ///   - request: Request to send to RunTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func runTask(
    _ request: Google_Cloud_Tasks_V2beta2_RunTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Tasks_V2beta2_RunTaskRequest, Google_Cloud_Tasks_V2beta2_Task> {
    return self.makeUnaryCall(
      path: "/google.cloud.tasks.v2beta2.CloudTasks/RunTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Cloud_Tasks_V2beta2_CloudTasksClient: Google_Cloud_Tasks_V2beta2_CloudTasksClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.tasks.v2beta2.CloudTasks service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Tasks_V2beta2_CloudTasksProvider: CallHandlerProvider {
  /// Lists queues.
  ///
  /// Queues are returned in lexicographical order.
  func listQueues(request: Google_Cloud_Tasks_V2beta2_ListQueuesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_ListQueuesResponse>
  /// Gets a queue.
  func getQueue(request: Google_Cloud_Tasks_V2beta2_GetQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Queue>
  /// Creates a queue.
  ///
  /// Queues created with this method allow tasks to live for a maximum of 31
  /// days. After a task is 31 days old, the task will be deleted regardless of whether
  /// it was dispatched or not.
  ///
  /// WARNING: Using this method may have unintended side effects if you are
  /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
  /// Read
  /// [Overview of Queue Management and
  /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
  /// this method.
  func createQueue(request: Google_Cloud_Tasks_V2beta2_CreateQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Queue>
  /// Updates a queue.
  ///
  /// This method creates the queue if it does not exist and updates
  /// the queue if it does exist.
  ///
  /// Queues created with this method allow tasks to live for a maximum of 31
  /// days. After a task is 31 days old, the task will be deleted regardless of whether
  /// it was dispatched or not.
  ///
  /// WARNING: Using this method may have unintended side effects if you are
  /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
  /// Read
  /// [Overview of Queue Management and
  /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
  /// this method.
  func updateQueue(request: Google_Cloud_Tasks_V2beta2_UpdateQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Queue>
  /// Deletes a queue.
  ///
  /// This command will delete the queue even if it has tasks in it.
  ///
  /// Note: If you delete a queue, a queue with the same name can't be created
  /// for 7 days.
  ///
  /// WARNING: Using this method may have unintended side effects if you are
  /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
  /// Read
  /// [Overview of Queue Management and
  /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
  /// this method.
  func deleteQueue(request: Google_Cloud_Tasks_V2beta2_DeleteQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Purges a queue by deleting all of its tasks.
  ///
  /// All tasks created before this method is called are permanently deleted.
  ///
  /// Purge operations can take up to one minute to take effect. Tasks
  /// might be dispatched before the purge takes effect. A purge is irreversible.
  func purgeQueue(request: Google_Cloud_Tasks_V2beta2_PurgeQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Queue>
  /// Pauses the queue.
  ///
  /// If a queue is paused then the system will stop dispatching tasks
  /// until the queue is resumed via
  /// [ResumeQueue][google.cloud.tasks.v2beta2.CloudTasks.ResumeQueue]. Tasks can still be added
  /// when the queue is paused. A queue is paused if its
  /// [state][google.cloud.tasks.v2beta2.Queue.state] is [PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED].
  func pauseQueue(request: Google_Cloud_Tasks_V2beta2_PauseQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Queue>
  /// Resume a queue.
  ///
  /// This method resumes a queue after it has been
  /// [PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED] or
  /// [DISABLED][google.cloud.tasks.v2beta2.Queue.State.DISABLED]. The state of a queue is stored
  /// in the queue's [state][google.cloud.tasks.v2beta2.Queue.state]; after calling this method it
  /// will be set to [RUNNING][google.cloud.tasks.v2beta2.Queue.State.RUNNING].
  ///
  /// WARNING: Resuming many high-QPS queues at the same time can
  /// lead to target overloading. If you are resuming high-QPS
  /// queues, follow the 500/50/5 pattern described in
  /// [Managing Cloud Tasks Scaling
  /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
  func resumeQueue(request: Google_Cloud_Tasks_V2beta2_ResumeQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Queue>
  /// Gets the access control policy for a [Queue][google.cloud.tasks.v2beta2.Queue].
  /// Returns an empty policy if the resource exists and does not have a policy
  /// set.
  ///
  /// Authorization requires the following
  /// [Google IAM](https://cloud.google.com/iam) permission on the specified
  /// resource parent:
  ///
  /// * `cloudtasks.queues.getIamPolicy`
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Sets the access control policy for a [Queue][google.cloud.tasks.v2beta2.Queue]. Replaces any existing
  /// policy.
  ///
  /// Note: The Cloud Console does not check queue-level IAM permissions yet.
  /// Project-level permissions are required to use the Cloud Console.
  ///
  /// Authorization requires the following
  /// [Google IAM](https://cloud.google.com/iam) permission on the specified
  /// resource parent:
  ///
  /// * `cloudtasks.queues.setIamPolicy`
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Returns permissions that a caller has on a [Queue][google.cloud.tasks.v2beta2.Queue].
  /// If the resource does not exist, this will return an empty set of
  /// permissions, not a [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
  ///
  /// Note: This operation is designed to be used for building permission-aware
  /// UIs and command-line tools, not for authorization checking. This operation
  /// may "fail open" without warning.
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
  /// Lists the tasks in a queue.
  ///
  /// By default, only the [BASIC][google.cloud.tasks.v2beta2.Task.View.BASIC] view is retrieved
  /// due to performance considerations;
  /// [response_view][google.cloud.tasks.v2beta2.ListTasksRequest.response_view] controls the
  /// subset of information which is returned.
  ///
  /// The tasks may be returned in any order. The ordering may change at any
  /// time.
  func listTasks(request: Google_Cloud_Tasks_V2beta2_ListTasksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_ListTasksResponse>
  /// Gets a task.
  func getTask(request: Google_Cloud_Tasks_V2beta2_GetTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Task>
  /// Creates a task and adds it to a queue.
  ///
  /// Tasks cannot be updated after creation; there is no UpdateTask command.
  ///
  /// * For [App Engine queues][google.cloud.tasks.v2beta2.AppEngineHttpTarget], the maximum task size is
  ///   100KB.
  /// * For [pull queues][google.cloud.tasks.v2beta2.PullTarget], the maximum task size is 1MB.
  func createTask(request: Google_Cloud_Tasks_V2beta2_CreateTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Task>
  /// Deletes a task.
  ///
  /// A task can be deleted if it is scheduled or dispatched. A task
  /// cannot be deleted if it has completed successfully or permanently
  /// failed.
  func deleteTask(request: Google_Cloud_Tasks_V2beta2_DeleteTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Leases tasks from a pull queue for
  /// [lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration].
  ///
  /// This method is invoked by the worker to obtain a lease. The
  /// worker must acknowledge the task via
  /// [AcknowledgeTask][google.cloud.tasks.v2beta2.CloudTasks.AcknowledgeTask] after they have
  /// performed the work associated with the task.
  ///
  /// The [payload][google.cloud.tasks.v2beta2.PullMessage.payload] is intended to store data that
  /// the worker needs to perform the work associated with the task. To
  /// return the payloads in the [response][google.cloud.tasks.v2beta2.LeaseTasksResponse], set
  /// [response_view][google.cloud.tasks.v2beta2.LeaseTasksRequest.response_view] to
  /// [FULL][google.cloud.tasks.v2beta2.Task.View.FULL].
  ///
  /// A maximum of 10 qps of [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks]
  /// requests are allowed per
  /// queue. [RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
  /// is returned when this limit is
  /// exceeded. [RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
  /// is also returned when
  /// [max_tasks_dispatched_per_second][google.cloud.tasks.v2beta2.RateLimits.max_tasks_dispatched_per_second]
  /// is exceeded.
  func leaseTasks(request: Google_Cloud_Tasks_V2beta2_LeaseTasksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_LeaseTasksResponse>
  /// Acknowledges a pull task.
  ///
  /// The worker, that is, the entity that
  /// [leased][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] this task must call this method
  /// to indicate that the work associated with the task has finished.
  ///
  /// The worker must acknowledge a task within the
  /// [lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration] or the lease
  /// will expire and the task will become available to be leased
  /// again. After the task is acknowledged, it will not be returned
  /// by a later [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks],
  /// [GetTask][google.cloud.tasks.v2beta2.CloudTasks.GetTask], or
  /// [ListTasks][google.cloud.tasks.v2beta2.CloudTasks.ListTasks].
  func acknowledgeTask(request: Google_Cloud_Tasks_V2beta2_AcknowledgeTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Renew the current lease of a pull task.
  ///
  /// The worker can use this method to extend the lease by a new
  /// duration, starting from now. The new task lease will be
  /// returned in the task's [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time].
  func renewLease(request: Google_Cloud_Tasks_V2beta2_RenewLeaseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Task>
  /// Cancel a pull task's lease.
  ///
  /// The worker can use this method to cancel a task's lease by
  /// setting its [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] to now. This will
  /// make the task available to be leased to the next caller of
  /// [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks].
  func cancelLease(request: Google_Cloud_Tasks_V2beta2_CancelLeaseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Task>
  /// Forces a task to run now.
  ///
  /// When this method is called, Cloud Tasks will dispatch the task, even if
  /// the task is already running, the queue has reached its [RateLimits][google.cloud.tasks.v2beta2.RateLimits] or
  /// is [PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED].
  ///
  /// This command is meant to be used for manual debugging. For
  /// example, [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] can be used to retry a failed
  /// task after a fix has been made or to manually force a task to be
  /// dispatched now.
  ///
  /// The dispatched task is returned. That is, the task that is returned
  /// contains the [status][google.cloud.tasks.v2beta2.Task.status] after the task is dispatched but
  /// before the task is received by its target.
  ///
  /// If Cloud Tasks receives a successful response from the task's
  /// target, then the task will be deleted; otherwise the task's
  /// [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] will be reset to the time that
  /// [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] was called plus the retry delay specified
  /// in the queue's [RetryConfig][google.cloud.tasks.v2beta2.RetryConfig].
  ///
  /// [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] returns
  /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
  /// task that has already succeeded or permanently failed.
  ///
  /// [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] cannot be called on a
  /// [pull task][google.cloud.tasks.v2beta2.PullMessage].
  func runTask(request: Google_Cloud_Tasks_V2beta2_RunTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Tasks_V2beta2_Task>
}

extension Google_Cloud_Tasks_V2beta2_CloudTasksProvider {
  public var serviceName: Substring { return "google.cloud.tasks.v2beta2.CloudTasks" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListQueues":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listQueues(request: request, context: context)
        }
      }

    case "GetQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getQueue(request: request, context: context)
        }
      }

    case "CreateQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createQueue(request: request, context: context)
        }
      }

    case "UpdateQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateQueue(request: request, context: context)
        }
      }

    case "DeleteQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteQueue(request: request, context: context)
        }
      }

    case "PurgeQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.purgeQueue(request: request, context: context)
        }
      }

    case "PauseQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pauseQueue(request: request, context: context)
        }
      }

    case "ResumeQueue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.resumeQueue(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "SetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    case "ListTasks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTasks(request: request, context: context)
        }
      }

    case "GetTask":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTask(request: request, context: context)
        }
      }

    case "CreateTask":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createTask(request: request, context: context)
        }
      }

    case "DeleteTask":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteTask(request: request, context: context)
        }
      }

    case "LeaseTasks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.leaseTasks(request: request, context: context)
        }
      }

    case "AcknowledgeTask":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.acknowledgeTask(request: request, context: context)
        }
      }

    case "RenewLease":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.renewLease(request: request, context: context)
        }
      }

    case "CancelLease":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cancelLease(request: request, context: context)
        }
      }

    case "RunTask":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.runTask(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

