// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/recommendationengine/v1beta1/user_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UserEvent captures all metadata information recommendation engine needs to
/// know about how end users interact with customers' website.
public struct Google_Cloud_Recommendationengine_V1beta1_UserEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. User event type. Allowed values are:
  ///
  /// * `add-to-cart` Products being added to cart.
  /// * `add-to-list` Items being added to a list (shopping list, favorites
  ///   etc).
  /// * `category-page-view` Special pages such as sale or promotion pages
  ///   viewed.
  /// * `checkout-start` User starting a checkout process.
  /// * `detail-page-view` Products detail page viewed.
  /// * `home-page-view` Homepage viewed.
  /// * `page-visit` Generic page visits not included in the event types above.
  /// * `purchase-complete` User finishing a purchase.
  /// * `refund` Purchased items being refunded or returned.
  /// * `remove-from-cart` Products being removed from cart.
  /// * `remove-from-list` Items being removed from a list.
  /// * `search` Product search.
  /// * `shopping-cart-page-view` User viewing a shopping cart.
  /// * `impression` List of items displayed. Used by Google Tag Manager.
  public var eventType: String {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  /// Required. User information.
  public var userInfo: Google_Cloud_Recommendationengine_V1beta1_UserInfo {
    get {return _storage._userInfo ?? Google_Cloud_Recommendationengine_V1beta1_UserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  public var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  public mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  /// Optional. User event detailed information common across different
  /// recommendation types.
  public var eventDetail: Google_Cloud_Recommendationengine_V1beta1_EventDetail {
    get {return _storage._eventDetail ?? Google_Cloud_Recommendationengine_V1beta1_EventDetail()}
    set {_uniqueStorage()._eventDetail = newValue}
  }
  /// Returns true if `eventDetail` has been explicitly set.
  public var hasEventDetail: Bool {return _storage._eventDetail != nil}
  /// Clears the value of `eventDetail`. Subsequent reads from it will return its default value.
  public mutating func clearEventDetail() {_uniqueStorage()._eventDetail = nil}

  /// Optional. Retail product specific user event metadata.
  ///
  /// This field is required for the following event types:
  ///
  /// * `add-to-cart`
  /// * `add-to-list`
  /// * `category-page-view`
  /// * `checkout-start`
  /// * `detail-page-view`
  /// * `purchase-complete`
  /// * `refund`
  /// * `remove-from-cart`
  /// * `remove-from-list`
  /// * `search`
  ///
  /// This field is optional for the following event types:
  ///
  /// * `page-visit`
  /// * `shopping-cart-page-view` - note that 'product_event_detail' should be
  ///   set for this unless the shopping cart is empty.
  ///
  /// This field is not allowed for the following event types:
  ///
  /// * `home-page-view`
  public var productEventDetail: Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail {
    get {return _storage._productEventDetail ?? Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail()}
    set {_uniqueStorage()._productEventDetail = newValue}
  }
  /// Returns true if `productEventDetail` has been explicitly set.
  public var hasProductEventDetail: Bool {return _storage._productEventDetail != nil}
  /// Clears the value of `productEventDetail`. Subsequent reads from it will return its default value.
  public mutating func clearProductEventDetail() {_uniqueStorage()._productEventDetail = nil}

  /// Optional. Only required for ImportUserEvents method. Timestamp of user
  /// event created.
  public var eventTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eventTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  public var hasEventTime: Bool {return _storage._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  public mutating func clearEventTime() {_uniqueStorage()._eventTime = nil}

  /// Optional. This field should *not* be set when using JavaScript pixel
  /// or the Recommendations AI Tag. Defaults to `EVENT_SOURCE_UNSPECIFIED`.
  public var eventSource: Google_Cloud_Recommendationengine_V1beta1_UserEvent.EventSource {
    get {return _storage._eventSource}
    set {_uniqueStorage()._eventSource = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// User event source.
  public enum EventSource: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified event source.
    case unspecified // = 0

    /// The event is ingested via a javascript pixel or Recommendations AI Tag
    /// through automl datalayer or JS Macros.
    case automl // = 1

    /// The event is ingested via Recommendations AI Tag through Enhanced
    /// Ecommerce datalayer.
    case ecommerce // = 2

    /// The event is ingested via Import user events API.
    case batchUpload // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .automl
      case 2: self = .ecommerce
      case 3: self = .batchUpload
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .automl: return 1
      case .ecommerce: return 2
      case .batchUpload: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloud_Recommendationengine_V1beta1_UserEvent.EventSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloud_Recommendationengine_V1beta1_UserEvent.EventSource] = [
    .unspecified,
    .automl,
    .ecommerce,
    .batchUpload,
  ]
}

#endif  // swift(>=4.2)

/// Information of end users.
public struct Google_Cloud_Recommendationengine_V1beta1_UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. A unique identifier for tracking visitors with a length limit of
  /// 128 bytes.
  ///
  /// For example, this could be implemented with a http cookie, which should be
  /// able to uniquely identify a visitor on a single device. This unique
  /// identifier should not change if the visitor log in/out of the website.
  /// Maximum length 128 bytes. Cannot be empty.
  public var visitorID: String = String()

  /// Optional. Unique identifier for logged-in user with a length limit of 128
  /// bytes. Required only for logged-in users.
  public var userID: String = String()

  /// Optional. IP address of the user. This could be either IPv4 (e.g. 104.133.9.80) or
  /// IPv6 (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334). This should *not* be
  /// set when using the javascript pixel or if `direct_user_request` is set.
  /// Used to extract location information for personalization.
  public var ipAddress: String = String()

  /// Optional. User agent as included in the HTTP header. UTF-8 encoded string
  /// with a length limit of 1 KiB.
  ///
  /// This should *not* be set when using the JavaScript pixel or if
  /// `directUserRequest` is set.
  public var userAgent: String = String()

  /// Optional. Indicates if the request is made directly from the end user
  /// in which case the user_agent and ip_address fields can be populated
  /// from the HTTP request. This should *not* be set when using the javascript
  /// pixel. This flag should be set only if the API request is made directly
  /// from the end user such as a mobile app (and not if a gateway or a server is
  /// processing and pushing the user events).
  public var directUserRequest: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// User event details shared by all recommendation types.
public struct Google_Cloud_Recommendationengine_V1beta1_EventDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Complete url (window.location.href) of the user's current page.
  /// When using the JavaScript pixel, this value is filled in automatically.
  /// Maximum length 5KB.
  public var uri: String = String()

  /// Optional. The referrer url of the current page. When using
  /// the JavaScript pixel, this value is filled in automatically.
  public var referrerUri: String = String()

  /// Optional. A unique id of a web page view.
  /// This should be kept the same for all user events triggered from the same
  /// pageview. For example, an item detail page view could trigger multiple
  /// events as the user is browsing the page.
  /// The `pageViewId` property should be kept the same for all these events so
  /// that they can be grouped together properly. This `pageViewId` will be
  /// automatically generated if using the JavaScript pixel.
  public var pageViewID: String = String()

  /// Optional. A list of identifiers for the independent experiment groups
  /// this user event belongs to. This is used to distinguish between user events
  /// associated with different experiment setups (e.g. using Recommendation
  /// Engine system, using different recommendation models).
  public var experimentIds: [String] = []

  /// Optional. Recommendation token included in the recommendation prediction
  /// response.
  ///
  /// This field enables accurate attribution of recommendation model
  /// performance.
  ///
  /// This token enables us to accurately attribute page view or purchase back to
  /// the event and the particular predict response containing this
  /// clicked/purchased item. If user clicks on product K in the recommendation
  /// results, pass the `PredictResponse.recommendationToken` property as a url
  /// parameter to product K's page. When recording events on product K's page,
  /// log the PredictResponse.recommendation_token to this field.
  ///
  /// Optional, but highly encouraged for user events that are the result of a
  /// recommendation prediction query.
  public var recommendationToken: String = String()

  /// Optional. Extra user event features to include in the recommendation
  /// model.
  ///
  /// For product recommendation, an example of extra user information is
  /// traffic_channel, i.e. how user arrives at the site. Users can arrive
  /// at the site by coming to the site directly, or coming through Google
  /// search, and etc.
  public var eventAttributes: Google_Cloud_Recommendationengine_V1beta1_FeatureMap {
    get {return _eventAttributes ?? Google_Cloud_Recommendationengine_V1beta1_FeatureMap()}
    set {_eventAttributes = newValue}
  }
  /// Returns true if `eventAttributes` has been explicitly set.
  public var hasEventAttributes: Bool {return self._eventAttributes != nil}
  /// Clears the value of `eventAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearEventAttributes() {self._eventAttributes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _eventAttributes: Google_Cloud_Recommendationengine_V1beta1_FeatureMap? = nil
}

/// ProductEventDetail captures user event information specific to retail
/// products.
public struct Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required for `search` events. Other event types should not set this field.
  /// The user's search query as UTF-8 encoded text with a length limit of 5 KiB.
  public var searchQuery: String = String()

  /// Required for `category-page-view` events. Other event types should not set
  /// this field.
  /// The categories associated with a category page.
  /// Category pages include special pages such as sales or promotions. For
  /// instance, a special sale page may have the category hierarchy:
  /// categories : ["Sales", "2017 Black Friday Deals"].
  public var pageCategories: [Google_Cloud_Recommendationengine_V1beta1_CatalogItem.CategoryHierarchy] = []

  /// The main product details related to the event.
  ///
  /// This field is required for the following event types:
  ///
  /// * `add-to-cart`
  /// * `add-to-list`
  /// * `checkout-start`
  /// * `detail-page-view`
  /// * `purchase-complete`
  /// * `refund`
  /// * `remove-from-cart`
  /// * `remove-from-list`
  ///
  /// This field is optional for the following event types:
  ///
  /// * `page-visit`
  /// * `shopping-cart-page-view` - note that 'product_details' should be set for
  ///   this unless the shopping cart is empty.
  ///
  /// This field is not allowed for the following event types:
  ///
  /// * `category-page-view`
  /// * `home-page-view`
  /// * `search`
  public var productDetails: [Google_Cloud_Recommendationengine_V1beta1_ProductDetail] = []

  /// Required for `add-to-list` and `remove-from-list` events. The id or name of
  /// the list that the item is being added to or removed from. Other event types
  /// should not set this field.
  public var listID: String = String()

  /// Optional. The id or name of the associated shopping cart. This id is used
  /// to associate multiple items added or present in the cart before purchase.
  ///
  /// This can only be set for `add-to-cart`, `remove-from-cart`,
  /// `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.
  public var cartID: String = String()

  /// Optional. A transaction represents the entire purchase transaction.
  /// Required for `purchase-complete` events. Optional for `checkout-start`
  /// events. Other event types should not set this field.
  public var purchaseTransaction: Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction {
    get {return _purchaseTransaction ?? Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction()}
    set {_purchaseTransaction = newValue}
  }
  /// Returns true if `purchaseTransaction` has been explicitly set.
  public var hasPurchaseTransaction: Bool {return self._purchaseTransaction != nil}
  /// Clears the value of `purchaseTransaction`. Subsequent reads from it will return its default value.
  public mutating func clearPurchaseTransaction() {self._purchaseTransaction = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _purchaseTransaction: Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction? = nil
}

/// A transaction represents the entire purchase transaction.
public struct Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The transaction ID with a length limit of 128 bytes.
  public var id: String = String()

  /// Required. Total revenue or grand total associated with the transaction.
  /// This value include shipping, tax, or other adjustments to total revenue
  /// that you want to include as part of your revenue calculations. This field
  /// is not required if the event type is `refund`.
  public var revenue: Float = 0

  /// Optional. All the taxes associated with the transaction.
  public var taxes: Dictionary<String,Float> = [:]

  /// Optional. All the costs associated with the product. These can be
  /// manufacturing costs, shipping expenses not borne by the end user, or any
  /// other costs.
  ///
  /// Total product cost such that
  ///   profit = revenue - (sum(taxes) + sum(costs))
  /// If product_cost is not set, then
  ///   profit = revenue - tax - shipping - sum(CatalogItem.costs).
  ///
  /// If CatalogItem.cost is not specified for one of the items, CatalogItem.cost
  /// based profit *cannot* be calculated for this Transaction.
  public var costs: Dictionary<String,Float> = [:]

  /// Required. Currency code. Use three-character ISO-4217 code. This field
  /// is not required if the event type is `refund`.
  public var currencyCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Detailed product information associated with a user event.
public struct Google_Cloud_Recommendationengine_V1beta1_ProductDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Catalog item ID. UTF-8 encoded string with a length limit of 128
  /// characters.
  public var id: String = String()

  /// Optional. Currency code for price/costs. Use three-character ISO-4217
  /// code. Required only if originalPrice or displayPrice is set.
  public var currencyCode: String = String()

  /// Optional. Original price of the product. If provided, this will override
  /// the original price in Catalog for this product.
  public var originalPrice: Float = 0

  /// Optional. Display price of the product (e.g. discounted price). If
  /// provided, this will override the display price in Catalog for this product.
  public var displayPrice: Float = 0

  /// Optional. Item stock state. If provided, this overrides the stock state
  /// in Catalog for items in this event.
  public var stockState: Google_Cloud_Recommendationengine_V1beta1_ProductCatalogItem.StockState = .unspecified

  /// Optional. Quantity of the product associated with the user event. For
  /// example, this field will be 2 if two products are added to the shopping
  /// cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`,
  /// `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event
  /// types.
  public var quantity: Int32 = 0

  /// Optional. Quantity of the products in stock when a user event happens.
  /// Optional. If provided, this overrides the available quantity in Catalog for
  /// this event. and can only be set if `stock_status` is set to `IN_STOCK`.
  ///
  /// Note that if an item is out of stock, you must set the `stock_state` field
  /// to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not
  /// sufficient to mark the item out of stock.
  public var availableQuantity: Int32 = 0

  /// Optional. Extra features associated with a product in the user event.
  public var itemAttributes: Google_Cloud_Recommendationengine_V1beta1_FeatureMap {
    get {return _itemAttributes ?? Google_Cloud_Recommendationengine_V1beta1_FeatureMap()}
    set {_itemAttributes = newValue}
  }
  /// Returns true if `itemAttributes` has been explicitly set.
  public var hasItemAttributes: Bool {return self._itemAttributes != nil}
  /// Clears the value of `itemAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearItemAttributes() {self._itemAttributes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _itemAttributes: Google_Cloud_Recommendationengine_V1beta1_FeatureMap? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.recommendationengine.v1beta1"

extension Google_Cloud_Recommendationengine_V1beta1_UserEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_type"),
    2: .standard(proto: "user_info"),
    3: .standard(proto: "event_detail"),
    4: .standard(proto: "product_event_detail"),
    5: .standard(proto: "event_time"),
    6: .standard(proto: "event_source"),
  ]

  fileprivate class _StorageClass {
    var _eventType: String = String()
    var _userInfo: Google_Cloud_Recommendationengine_V1beta1_UserInfo? = nil
    var _eventDetail: Google_Cloud_Recommendationengine_V1beta1_EventDetail? = nil
    var _productEventDetail: Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail? = nil
    var _eventTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eventSource: Google_Cloud_Recommendationengine_V1beta1_UserEvent.EventSource = .unspecified

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _userInfo = source._userInfo
      _eventDetail = source._eventDetail
      _productEventDetail = source._productEventDetail
      _eventTime = source._eventTime
      _eventSource = source._eventSource
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._eventType) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._userInfo) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._eventDetail) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._productEventDetail) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._eventTime) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._eventSource) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._eventType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventType, fieldNumber: 1)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._eventDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._productEventDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._eventTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._eventSource != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventSource, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_UserEvent, rhs: Google_Cloud_Recommendationengine_V1beta1_UserEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        if _storage._eventDetail != rhs_storage._eventDetail {return false}
        if _storage._productEventDetail != rhs_storage._productEventDetail {return false}
        if _storage._eventTime != rhs_storage._eventTime {return false}
        if _storage._eventSource != rhs_storage._eventSource {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_UserEvent.EventSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVENT_SOURCE_UNSPECIFIED"),
    1: .same(proto: "AUTOML"),
    2: .same(proto: "ECOMMERCE"),
    3: .same(proto: "BATCH_UPLOAD"),
  ]
}

extension Google_Cloud_Recommendationengine_V1beta1_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "visitor_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "ip_address"),
    4: .standard(proto: "user_agent"),
    5: .standard(proto: "direct_user_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.visitorID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ipAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.userAgent) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.directUserRequest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.visitorID.isEmpty {
      try visitor.visitSingularStringField(value: self.visitorID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if !self.ipAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ipAddress, fieldNumber: 3)
    }
    if !self.userAgent.isEmpty {
      try visitor.visitSingularStringField(value: self.userAgent, fieldNumber: 4)
    }
    if self.directUserRequest != false {
      try visitor.visitSingularBoolField(value: self.directUserRequest, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_UserInfo, rhs: Google_Cloud_Recommendationengine_V1beta1_UserInfo) -> Bool {
    if lhs.visitorID != rhs.visitorID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.ipAddress != rhs.ipAddress {return false}
    if lhs.userAgent != rhs.userAgent {return false}
    if lhs.directUserRequest != rhs.directUserRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_EventDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    6: .standard(proto: "referrer_uri"),
    2: .standard(proto: "page_view_id"),
    3: .standard(proto: "experiment_ids"),
    4: .standard(proto: "recommendation_token"),
    5: .standard(proto: "event_attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageViewID) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.experimentIds) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recommendationToken) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._eventAttributes) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.referrerUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.pageViewID.isEmpty {
      try visitor.visitSingularStringField(value: self.pageViewID, fieldNumber: 2)
    }
    if !self.experimentIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.experimentIds, fieldNumber: 3)
    }
    if !self.recommendationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.recommendationToken, fieldNumber: 4)
    }
    if let v = self._eventAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.referrerUri.isEmpty {
      try visitor.visitSingularStringField(value: self.referrerUri, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_EventDetail, rhs: Google_Cloud_Recommendationengine_V1beta1_EventDetail) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.referrerUri != rhs.referrerUri {return false}
    if lhs.pageViewID != rhs.pageViewID {return false}
    if lhs.experimentIds != rhs.experimentIds {return false}
    if lhs.recommendationToken != rhs.recommendationToken {return false}
    if lhs._eventAttributes != rhs._eventAttributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductEventDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "search_query"),
    2: .standard(proto: "page_categories"),
    3: .standard(proto: "product_details"),
    4: .standard(proto: "list_id"),
    5: .standard(proto: "cart_id"),
    6: .standard(proto: "purchase_transaction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.searchQuery) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.pageCategories) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.productDetails) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.listID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cartID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._purchaseTransaction) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.searchQuery.isEmpty {
      try visitor.visitSingularStringField(value: self.searchQuery, fieldNumber: 1)
    }
    if !self.pageCategories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageCategories, fieldNumber: 2)
    }
    if !self.productDetails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productDetails, fieldNumber: 3)
    }
    if !self.listID.isEmpty {
      try visitor.visitSingularStringField(value: self.listID, fieldNumber: 4)
    }
    if !self.cartID.isEmpty {
      try visitor.visitSingularStringField(value: self.cartID, fieldNumber: 5)
    }
    if let v = self._purchaseTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail, rhs: Google_Cloud_Recommendationengine_V1beta1_ProductEventDetail) -> Bool {
    if lhs.searchQuery != rhs.searchQuery {return false}
    if lhs.pageCategories != rhs.pageCategories {return false}
    if lhs.productDetails != rhs.productDetails {return false}
    if lhs.listID != rhs.listID {return false}
    if lhs.cartID != rhs.cartID {return false}
    if lhs._purchaseTransaction != rhs._purchaseTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PurchaseTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "revenue"),
    3: .same(proto: "taxes"),
    4: .same(proto: "costs"),
    6: .standard(proto: "currency_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.revenue) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: &self.taxes) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: &self.costs) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.currencyCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.revenue != 0 {
      try visitor.visitSingularFloatField(value: self.revenue, fieldNumber: 2)
    }
    if !self.taxes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: self.taxes, fieldNumber: 3)
    }
    if !self.costs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: self.costs, fieldNumber: 4)
    }
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction, rhs: Google_Cloud_Recommendationengine_V1beta1_PurchaseTransaction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.revenue != rhs.revenue {return false}
    if lhs.taxes != rhs.taxes {return false}
    if lhs.costs != rhs.costs {return false}
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_ProductDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "currency_code"),
    3: .standard(proto: "original_price"),
    4: .standard(proto: "display_price"),
    5: .standard(proto: "stock_state"),
    6: .same(proto: "quantity"),
    7: .standard(proto: "available_quantity"),
    8: .standard(proto: "item_attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.currencyCode) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.originalPrice) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.displayPrice) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.stockState) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.quantity) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.availableQuantity) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._itemAttributes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 2)
    }
    if self.originalPrice != 0 {
      try visitor.visitSingularFloatField(value: self.originalPrice, fieldNumber: 3)
    }
    if self.displayPrice != 0 {
      try visitor.visitSingularFloatField(value: self.displayPrice, fieldNumber: 4)
    }
    if self.stockState != .unspecified {
      try visitor.visitSingularEnumField(value: self.stockState, fieldNumber: 5)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 6)
    }
    if self.availableQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.availableQuantity, fieldNumber: 7)
    }
    if let v = self._itemAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_ProductDetail, rhs: Google_Cloud_Recommendationengine_V1beta1_ProductDetail) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.originalPrice != rhs.originalPrice {return false}
    if lhs.displayPrice != rhs.displayPrice {return false}
    if lhs.stockState != rhs.stockState {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.availableQuantity != rhs.availableQuantity {return false}
    if lhs._itemAttributes != rhs._itemAttributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
