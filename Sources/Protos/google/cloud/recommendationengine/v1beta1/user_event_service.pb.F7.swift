// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/recommendationengine/v1beta1/user_event_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for PurgeUserEvents method.
public struct Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the event_store under which the events are
  /// created. The format is
  /// "projects/${projectId}/locations/global/catalogs/${catalogId}/eventStores/${eventStoreId}"
  public var parent: String = String()

  /// Required. The filter string to specify the events to be deleted. Empty
  /// string filter is not allowed. This filter can also be used with
  /// ListUserEvents API to list events that will be deleted. The eligible fields
  /// for filtering are:
  /// * eventType - UserEvent.eventType field of type string.
  /// * eventTime - in ISO 8601 "zulu" format.
  /// * visitorId - field of type string. Specifying this will delete all events
  /// associated with a visitor.
  /// * userId - field of type string. Specifying this will delete all events
  /// associated with a user.
  /// Example 1: Deleting all events in a time range.
  /// `eventTime > "2012-04-23T18:25:43.511Z" eventTime <
  /// "2012-04-23T18:30:43.511Z"`
  /// Example 2: Deleting specific eventType in time range.
  /// `eventTime > "2012-04-23T18:25:43.511Z" eventType = "detail-page-view"`
  /// Example 3: Deleting all events for a specific visitor
  /// `visitorId = visitor1024`
  /// The filtering fields are assumed to have an implicit AND.
  public var filter: String = String()

  /// Optional. The default value is false. Override this flag to true to
  /// actually perform the purge. If the field is not set to true, a sampling of
  /// events to be deleted will be returned.
  public var force: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Metadata related to the progress of the PurgeUserEvents operation.
/// This will be returned by the google.longrunning.Operation.metadata field.
public struct Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the request / operation.
  public var operationName: String = String()

  /// Operation create time.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response of the PurgeUserEventsRequest. If the long running operation is
/// successfully done, then this message is returned by the
/// google.longrunning.Operations.response field.
public struct Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The total count of events purged as a result of the operation.
  public var purgedEventsCount: Int64 = 0

  /// A sampling of events deleted (or will be deleted) depending on the `force`
  /// property in the request. Max of 500 items will be returned.
  public var userEventsSample: [Google_Cloud_Recommendationengine_V1beta1_UserEvent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for WriteUserEvent method.
public struct Google_Cloud_Recommendationengine_V1beta1_WriteUserEventRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent eventStore resource name, such as
  /// "projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store".
  public var parent: String = String()

  /// Required. User event to write.
  public var userEvent: Google_Cloud_Recommendationengine_V1beta1_UserEvent {
    get {return _userEvent ?? Google_Cloud_Recommendationengine_V1beta1_UserEvent()}
    set {_userEvent = newValue}
  }
  /// Returns true if `userEvent` has been explicitly set.
  public var hasUserEvent: Bool {return self._userEvent != nil}
  /// Clears the value of `userEvent`. Subsequent reads from it will return its default value.
  public mutating func clearUserEvent() {self._userEvent = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userEvent: Google_Cloud_Recommendationengine_V1beta1_UserEvent? = nil
}

/// Request message for CollectUserEvent method.
public struct Google_Cloud_Recommendationengine_V1beta1_CollectUserEventRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent eventStore name, such as
  /// "projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store".
  public var parent: String = String()

  /// Required. URL encoded UserEvent proto.
  public var userEvent: String = String()

  /// Optional. The url including cgi-parameters but excluding the hash fragment.
  /// The URL must be truncated to 1.5K bytes to conservatively be under the 2K
  /// bytes. This is often more useful than the referer url, because many
  /// browsers only send the domain for 3rd party requests.
  public var uri: String = String()

  /// Optional. The event timestamp in milliseconds. This prevents browser
  /// caching of otherwise identical get requests. The name is abbreviated to
  /// reduce the payload bytes.
  public var ets: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for ListUserEvents method.
public struct Google_Cloud_Recommendationengine_V1beta1_ListUserEventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent eventStore resource name, such as
  /// "projects/*/locations/*/catalogs/default_catalog/eventStores/default_event_store".
  public var parent: String = String()

  /// Optional. Maximum number of results to return per page. If zero, the
  /// service will choose a reasonable default.
  public var pageSize: Int32 = 0

  /// Optional. The previous ListUserEventsResponse.next_page_token.
  public var pageToken: String = String()

  /// Optional. Filtering expression to specify restrictions over
  /// returned events. This is a sequence of terms, where each term applies some
  /// kind of a restriction to the returned user events. Use this expression to
  /// restrict results to a specific time range, or filter events by eventType.
  ///    eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
  ///    eventTime<"2012-04-23T18:25:43.511Z" eventType=search
  ///
  ///   We expect only 3 types of fields:
  ///
  ///    * eventTime: this can be specified a maximum of 2 times, once with a
  ///      less than operator and once with a greater than operator. The
  ///      eventTime restrict should result in one contiguous valid eventTime
  ///      range.
  ///
  ///    * eventType: only 1 eventType restriction can be specified.
  ///
  ///    * eventsMissingCatalogItems: specififying this will restrict results
  ///      to events for which catalog items were not found in the catalog. The
  ///      default behavior is to return only those events for which catalog
  ///      items were found.
  ///
  ///   Some examples of valid filters expressions:
  ///
  ///   * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
  ///             eventTime < "2012-04-23T18:30:43.511Z"
  ///   * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
  ///             eventType = detail-page-view
  ///   * Example 3: eventsMissingCatalogItems
  ///             eventType = search eventTime < "2018-04-23T18:30:43.511Z"
  ///   * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
  ///   * Example 5: eventType = search
  ///   * Example 6: eventsMissingCatalogItems
  public var filter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for ListUserEvents method.
public struct Google_Cloud_Recommendationengine_V1beta1_ListUserEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user events.
  public var userEvents: [Google_Cloud_Recommendationengine_V1beta1_UserEvent] = []

  /// If empty, the list is complete. If nonempty, the token to pass to the next
  /// request's ListUserEvents.page_token.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.recommendationengine.v1beta1"

extension Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PurgeUserEventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .same(proto: "force"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.force) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.force != false {
      try visitor.visitSingularBoolField(value: self.force, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsRequest, rhs: Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.force != rhs.force {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PurgeUserEventsMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operation_name"),
    2: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operationName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operationName.isEmpty {
      try visitor.visitSingularStringField(value: self.operationName, fieldNumber: 1)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsMetadata, rhs: Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsMetadata) -> Bool {
    if lhs.operationName != rhs.operationName {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PurgeUserEventsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "purged_events_count"),
    2: .standard(proto: "user_events_sample"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.purgedEventsCount) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.userEventsSample) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.purgedEventsCount != 0 {
      try visitor.visitSingularInt64Field(value: self.purgedEventsCount, fieldNumber: 1)
    }
    if !self.userEventsSample.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userEventsSample, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsResponse, rhs: Google_Cloud_Recommendationengine_V1beta1_PurgeUserEventsResponse) -> Bool {
    if lhs.purgedEventsCount != rhs.purgedEventsCount {return false}
    if lhs.userEventsSample != rhs.userEventsSample {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_WriteUserEventRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteUserEventRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "user_event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._userEvent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if let v = self._userEvent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_WriteUserEventRequest, rhs: Google_Cloud_Recommendationengine_V1beta1_WriteUserEventRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._userEvent != rhs._userEvent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_CollectUserEventRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectUserEventRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "user_event"),
    3: .same(proto: "uri"),
    4: .same(proto: "ets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userEvent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.ets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.userEvent.isEmpty {
      try visitor.visitSingularStringField(value: self.userEvent, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if self.ets != 0 {
      try visitor.visitSingularInt64Field(value: self.ets, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_CollectUserEventRequest, rhs: Google_Cloud_Recommendationengine_V1beta1_CollectUserEventRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.userEvent != rhs.userEvent {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.ets != rhs.ets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_ListUserEventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListUserEventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .standard(proto: "page_size"),
    3: .standard(proto: "page_token"),
    4: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 3)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_ListUserEventsRequest, rhs: Google_Cloud_Recommendationengine_V1beta1_ListUserEventsRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Recommendationengine_V1beta1_ListUserEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListUserEventsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_events"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.userEvents) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userEvents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userEvents, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Recommendationengine_V1beta1_ListUserEventsResponse, rhs: Google_Cloud_Recommendationengine_V1beta1_ListUserEventsResponse) -> Bool {
    if lhs.userEvents != rhs.userEvents {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
