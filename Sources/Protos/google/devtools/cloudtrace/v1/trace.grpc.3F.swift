//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/cloudtrace/v1/trace.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Devtools_Cloudtrace_V1_TraceServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Cloudtrace_V1_TraceServiceClientProtocol: GRPCClient {
  func listTraces(
    _ request: Google_Devtools_Cloudtrace_V1_ListTracesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V1_ListTracesRequest, Google_Devtools_Cloudtrace_V1_ListTracesResponse>

  func getTrace(
    _ request: Google_Devtools_Cloudtrace_V1_GetTraceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V1_GetTraceRequest, Google_Devtools_Cloudtrace_V1_Trace>

  func patchTraces(
    _ request: Google_Devtools_Cloudtrace_V1_PatchTracesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V1_PatchTracesRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Devtools_Cloudtrace_V1_TraceServiceClientProtocol {

  /// Returns of a list of traces that match the specified filter conditions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTraces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTraces(
    _ request: Google_Devtools_Cloudtrace_V1_ListTracesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V1_ListTracesRequest, Google_Devtools_Cloudtrace_V1_ListTracesResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.cloudtrace.v1.TraceService/ListTraces",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a single trace by its ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTrace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTrace(
    _ request: Google_Devtools_Cloudtrace_V1_GetTraceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V1_GetTraceRequest, Google_Devtools_Cloudtrace_V1_Trace> {
    return self.makeUnaryCall(
      path: "/google.devtools.cloudtrace.v1.TraceService/GetTrace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sends new traces to Stackdriver Trace or updates existing traces. If the ID
  /// of a trace that you send matches that of an existing trace, any fields
  /// in the existing trace and its spans are overwritten by the provided values,
  /// and any new fields provided are merged with the existing trace data. If the
  /// ID does not match, a new trace is created.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchTraces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchTraces(
    _ request: Google_Devtools_Cloudtrace_V1_PatchTracesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V1_PatchTracesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.devtools.cloudtrace.v1.TraceService/PatchTraces",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Devtools_Cloudtrace_V1_TraceServiceClient: Google_Devtools_Cloudtrace_V1_TraceServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.devtools.cloudtrace.v1.TraceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Cloudtrace_V1_TraceServiceProvider: CallHandlerProvider {
  /// Returns of a list of traces that match the specified filter conditions.
  func listTraces(request: Google_Devtools_Cloudtrace_V1_ListTracesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Cloudtrace_V1_ListTracesResponse>
  /// Gets a single trace by its ID.
  func getTrace(request: Google_Devtools_Cloudtrace_V1_GetTraceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Cloudtrace_V1_Trace>
  /// Sends new traces to Stackdriver Trace or updates existing traces. If the ID
  /// of a trace that you send matches that of an existing trace, any fields
  /// in the existing trace and its spans are overwritten by the provided values,
  /// and any new fields provided are merged with the existing trace data. If the
  /// ID does not match, a new trace is created.
  func patchTraces(request: Google_Devtools_Cloudtrace_V1_PatchTracesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Devtools_Cloudtrace_V1_TraceServiceProvider {
  public var serviceName: Substring { return "google.devtools.cloudtrace.v1.TraceService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListTraces":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTraces(request: request, context: context)
        }
      }

    case "GetTrace":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTrace(request: request, context: context)
        }
      }

    case "PatchTraces":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchTraces(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

