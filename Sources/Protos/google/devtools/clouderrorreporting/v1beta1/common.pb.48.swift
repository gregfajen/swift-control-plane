// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/clouderrorreporting/v1beta1/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Description of a group of similar error events.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The group resource name.
  /// Example: <code>projects/my-project-123/groups/my-groupid</code>
  public var name: String = String()

  /// Group IDs are unique for a given project. If the same kind of error
  /// occurs in different service contexts, it will receive the same group ID.
  public var groupID: String = String()

  /// Associated tracking issues.
  public var trackingIssues: [Google_Devtools_Clouderrorreporting_V1beta1_TrackingIssue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information related to tracking the progress on resolving the error.
public struct Google_Devtools_Clouderrorreporting_V1beta1_TrackingIssue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A URL pointing to a related entry in an issue tracking system.
  /// Example: `https://github.com/user/project/issues/4`
  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An error event which is returned by the Error Reporting system.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time when the event occurred as provided in the error report.
  /// If the report did not contain a timestamp, the time the error was received
  /// by the Error Reporting system is used.
  public var eventTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _eventTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  public var hasEventTime: Bool {return self._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  public mutating func clearEventTime() {self._eventTime = nil}

  /// The `ServiceContext` for which this error was reported.
  public var serviceContext: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext {
    get {return _serviceContext ?? Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext()}
    set {_serviceContext = newValue}
  }
  /// Returns true if `serviceContext` has been explicitly set.
  public var hasServiceContext: Bool {return self._serviceContext != nil}
  /// Clears the value of `serviceContext`. Subsequent reads from it will return its default value.
  public mutating func clearServiceContext() {self._serviceContext = nil}

  /// The stack trace that was reported or logged by the service.
  public var message: String = String()

  /// Data about the context in which the error occurred.
  public var context: Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext {
    get {return _context ?? Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {self._context = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _eventTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _serviceContext: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext? = nil
  fileprivate var _context: Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext? = nil
}

/// Describes a running service that sends errors.
/// Its version changes over time and multiple versions can run in parallel.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An identifier of the service, such as the name of the
  /// executable, job, or Google App Engine service name. This field is expected
  /// to have a low number of values that are relatively stable over time, as
  /// opposed to `version`, which can be changed whenever new code is deployed.
  ///
  /// Contains the service name for error reports extracted from Google
  /// App Engine logs or `default` if the App Engine default service is used.
  public var service: String = String()

  /// Represents the source code version that the developer provided,
  /// which could represent a version label or a Git SHA-1 hash, for example.
  /// For App Engine standard environment, the version is set to the version of
  /// the app.
  public var version: String = String()

  /// Type of the MonitoredResource. List of possible values:
  /// https://cloud.google.com/monitoring/api/resources
  ///
  /// Value is set automatically for incoming errors and must not be set when
  /// reporting errors.
  public var resourceType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A description of the context in which an error occurred.
/// This data should be provided by the application when reporting an error,
/// unless the
/// error report has been generated automatically from Google App Engine logs.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The HTTP request which was processed when the error was
  /// triggered.
  public var httpRequest: Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext {
    get {return _httpRequest ?? Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext()}
    set {_httpRequest = newValue}
  }
  /// Returns true if `httpRequest` has been explicitly set.
  public var hasHTTPRequest: Bool {return self._httpRequest != nil}
  /// Clears the value of `httpRequest`. Subsequent reads from it will return its default value.
  public mutating func clearHTTPRequest() {self._httpRequest = nil}

  /// The user who caused or was affected by the crash.
  /// This can be a user ID, an email address, or an arbitrary token that
  /// uniquely identifies the user.
  /// When sending an error report, leave this field empty if the user was not
  /// logged in. In this case the
  /// Error Reporting system will use other data, such as remote IP address, to
  /// distinguish affected users. See `affected_users_count` in
  /// `ErrorGroupStats`.
  public var user: String = String()

  /// The location in the source code where the decision was made to
  /// report the error, usually the place where it was logged.
  /// For a logged exception this would be the source line where the
  /// exception is logged, usually close to the place where it was
  /// caught.
  public var reportLocation: Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation {
    get {return _reportLocation ?? Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation()}
    set {_reportLocation = newValue}
  }
  /// Returns true if `reportLocation` has been explicitly set.
  public var hasReportLocation: Bool {return self._reportLocation != nil}
  /// Clears the value of `reportLocation`. Subsequent reads from it will return its default value.
  public mutating func clearReportLocation() {self._reportLocation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _httpRequest: Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext? = nil
  fileprivate var _reportLocation: Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation? = nil
}

/// HTTP request data that is related to a reported error.
/// This data should be provided by the application when reporting an error,
/// unless the
/// error report has been generated automatically from Google App Engine logs.
public struct Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of HTTP request, such as `GET`, `POST`, etc.
  public var method: String = String()

  /// The URL of the request.
  public var url: String = String()

  /// The user agent information that is provided with the request.
  public var userAgent: String = String()

  /// The referrer information that is provided with the request.
  public var referrer: String = String()

  /// The HTTP response status code for the request.
  public var responseStatusCode: Int32 = 0

  /// The IP address from which the request originated.
  /// This can be IPv4, IPv6, or a token which is derived from the
  /// IP address, depending on the data that has been provided
  /// in the error report.
  public var remoteIp: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Indicates a location in the source code of the service for which errors are
/// reported. `functionName` must be provided by the application when reporting
/// an error, unless the error report contains a `message` with a supported
/// exception stack trace. All fields are optional for the later case.
public struct Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The source code filename, which can include a truncated relative
  /// path, or a full path from a production machine.
  public var filePath: String = String()

  /// 1-based. 0 indicates that the line number is unknown.
  public var lineNumber: Int32 = 0

  /// Human-readable name of a function or method.
  /// The value can include optional context like the class or package name.
  /// For example, `my.package.MyClass.method` in case of Java.
  public var functionName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.clouderrorreporting.v1beta1"

extension Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "tracking_issues"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.trackingIssues) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 2)
    }
    if !self.trackingIssues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trackingIssues, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.trackingIssues != rhs.trackingIssues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_TrackingIssue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrackingIssue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_TrackingIssue, rhs: Google_Devtools_Clouderrorreporting_V1beta1_TrackingIssue) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_time"),
    2: .standard(proto: "service_context"),
    3: .same(proto: "message"),
    5: .same(proto: "context"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._eventTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._serviceContext) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._context) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._eventTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serviceContext {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent) -> Bool {
    if lhs._eventTime != rhs._eventTime {return false}
    if lhs._serviceContext != rhs._serviceContext {return false}
    if lhs.message != rhs.message {return false}
    if lhs._context != rhs._context {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "service"),
    3: .same(proto: "version"),
    4: .standard(proto: "resource_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourceType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 2)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    if !self.resourceType.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.version != rhs.version {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "http_request"),
    2: .same(proto: "user"),
    3: .standard(proto: "report_location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._httpRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.user) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._reportLocation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._httpRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 2)
    }
    if let v = self._reportLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorContext) -> Bool {
    if lhs._httpRequest != rhs._httpRequest {return false}
    if lhs.user != rhs.user {return false}
    if lhs._reportLocation != rhs._reportLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HttpRequestContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "method"),
    2: .same(proto: "url"),
    3: .standard(proto: "user_agent"),
    4: .same(proto: "referrer"),
    5: .standard(proto: "response_status_code"),
    6: .standard(proto: "remote_ip"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.method) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userAgent) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.referrer) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.responseStatusCode) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.remoteIp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.method.isEmpty {
      try visitor.visitSingularStringField(value: self.method, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.userAgent.isEmpty {
      try visitor.visitSingularStringField(value: self.userAgent, fieldNumber: 3)
    }
    if !self.referrer.isEmpty {
      try visitor.visitSingularStringField(value: self.referrer, fieldNumber: 4)
    }
    if self.responseStatusCode != 0 {
      try visitor.visitSingularInt32Field(value: self.responseStatusCode, fieldNumber: 5)
    }
    if !self.remoteIp.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteIp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext, rhs: Google_Devtools_Clouderrorreporting_V1beta1_HttpRequestContext) -> Bool {
    if lhs.method != rhs.method {return false}
    if lhs.url != rhs.url {return false}
    if lhs.userAgent != rhs.userAgent {return false}
    if lhs.referrer != rhs.referrer {return false}
    if lhs.responseStatusCode != rhs.responseStatusCode {return false}
    if lhs.remoteIp != rhs.remoteIp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_path"),
    2: .standard(proto: "line_number"),
    4: .standard(proto: "function_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.filePath) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.lineNumber) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.functionName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filePath.isEmpty {
      try visitor.visitSingularStringField(value: self.filePath, fieldNumber: 1)
    }
    if self.lineNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.lineNumber, fieldNumber: 2)
    }
    if !self.functionName.isEmpty {
      try visitor.visitSingularStringField(value: self.functionName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation, rhs: Google_Devtools_Clouderrorreporting_V1beta1_SourceLocation) -> Bool {
    if lhs.filePath != rhs.filePath {return false}
    if lhs.lineNumber != rhs.lineNumber {return false}
    if lhs.functionName != rhs.functionName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
