// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/clouderrorreporting/v1beta1/error_stats_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies how the time periods of error group counts are aligned.
public enum Google_Devtools_Clouderrorreporting_V1beta1_TimedCountAlignment: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No alignment specified.
  case errorCountAlignmentUnspecified // = 0

  /// The time periods shall be consecutive, have width equal to the
  /// requested duration, and be aligned at the `alignment_time` provided in
  /// the request.
  /// The `alignment_time` does not have to be inside the query period but
  /// even if it is outside, only time periods are returned which overlap
  /// with the query period.
  /// A rounded alignment will typically result in a
  /// different size of the first or the last time period.
  case alignmentEqualRounded // = 1

  /// The time periods shall be consecutive, have width equal to the
  /// requested duration, and be aligned at the end of the requested time
  /// period. This can result in a different size of the
  /// first time period.
  case alignmentEqualAtEnd // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .errorCountAlignmentUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .errorCountAlignmentUnspecified
    case 1: self = .alignmentEqualRounded
    case 2: self = .alignmentEqualAtEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .errorCountAlignmentUnspecified: return 0
    case .alignmentEqualRounded: return 1
    case .alignmentEqualAtEnd: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Devtools_Clouderrorreporting_V1beta1_TimedCountAlignment: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Clouderrorreporting_V1beta1_TimedCountAlignment] = [
    .errorCountAlignmentUnspecified,
    .alignmentEqualRounded,
    .alignmentEqualAtEnd,
  ]
}

#endif  // swift(>=4.2)

/// A sorting order of error groups.
public enum Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupOrder: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No group order specified.
  case groupOrderUnspecified // = 0

  /// Total count of errors in the given time window in descending order.
  case countDesc // = 1

  /// Timestamp when the group was last seen in the given time window
  /// in descending order.
  case lastSeenDesc // = 2

  /// Timestamp when the group was created in descending order.
  case createdDesc // = 3

  /// Number of affected users in the given time window in descending order.
  case affectedUsersDesc // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .groupOrderUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .groupOrderUnspecified
    case 1: self = .countDesc
    case 2: self = .lastSeenDesc
    case 3: self = .createdDesc
    case 4: self = .affectedUsersDesc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .groupOrderUnspecified: return 0
    case .countDesc: return 1
    case .lastSeenDesc: return 2
    case .createdDesc: return 3
    case .affectedUsersDesc: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupOrder: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupOrder] = [
    .groupOrderUnspecified,
    .countDesc,
    .lastSeenDesc,
    .createdDesc,
    .affectedUsersDesc,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a set of `ErrorGroupStats` to return.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the Google Cloud Platform project. Written
  /// as <code>projects/</code> plus the
  /// <a href="https://support.google.com/cloud/answer/6158840">Google Cloud
  /// Platform project ID</a>.
  ///
  /// Example: <code>projects/my-project-123</code>.
  public var projectName: String = String()

  /// Optional. List all <code>ErrorGroupStats</code> with these IDs.
  public var groupID: [String] = []

  /// Optional. List only <code>ErrorGroupStats</code> which belong to a service
  /// context that matches the filter.
  /// Data for all service contexts is returned if this field is not specified.
  public var serviceFilter: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter {
    get {return _serviceFilter ?? Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter()}
    set {_serviceFilter = newValue}
  }
  /// Returns true if `serviceFilter` has been explicitly set.
  public var hasServiceFilter: Bool {return self._serviceFilter != nil}
  /// Clears the value of `serviceFilter`. Subsequent reads from it will return its default value.
  public mutating func clearServiceFilter() {self._serviceFilter = nil}

  /// Optional. List data for the given time range.
  /// If not set, a default time range is used. The field
  /// <code>time_range_begin</code> in the response will specify the beginning
  /// of this time range.
  /// Only <code>ErrorGroupStats</code> with a non-zero count in the given time
  /// range are returned, unless the request contains an explicit
  /// <code>group_id</code> list. If a <code>group_id</code> list is given, also
  /// <code>ErrorGroupStats</code> with zero occurrences are returned.
  public var timeRange: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange {
    get {return _timeRange ?? Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  /// Optional. The preferred duration for a single returned `TimedCount`.
  /// If not set, no timed counts are returned.
  public var timedCountDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _timedCountDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_timedCountDuration = newValue}
  }
  /// Returns true if `timedCountDuration` has been explicitly set.
  public var hasTimedCountDuration: Bool {return self._timedCountDuration != nil}
  /// Clears the value of `timedCountDuration`. Subsequent reads from it will return its default value.
  public mutating func clearTimedCountDuration() {self._timedCountDuration = nil}

  /// Optional. The alignment of the timed counts to be returned.
  /// Default is `ALIGNMENT_EQUAL_AT_END`.
  public var alignment: Google_Devtools_Clouderrorreporting_V1beta1_TimedCountAlignment = .errorCountAlignmentUnspecified

  /// Optional. Time where the timed counts shall be aligned if rounded
  /// alignment is chosen. Default is 00:00 UTC.
  public var alignmentTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _alignmentTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_alignmentTime = newValue}
  }
  /// Returns true if `alignmentTime` has been explicitly set.
  public var hasAlignmentTime: Bool {return self._alignmentTime != nil}
  /// Clears the value of `alignmentTime`. Subsequent reads from it will return its default value.
  public mutating func clearAlignmentTime() {self._alignmentTime = nil}

  /// Optional. The sort order in which the results are returned.
  /// Default is `COUNT_DESC`.
  public var order: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupOrder = .groupOrderUnspecified

  /// Optional. The maximum number of results to return per response.
  /// Default is 20.
  public var pageSize: Int32 = 0

  /// Optional. A `next_page_token` provided by a previous response. To view
  /// additional results, pass this token along with the identical query
  /// parameters as the first request.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _serviceFilter: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter? = nil
  fileprivate var _timeRange: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange? = nil
  fileprivate var _timedCountDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _alignmentTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Contains a set of requested error group stats.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The error group stats which match the given request.
  public var errorGroupStats: [Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupStats] = []

  /// If non-empty, more results are available.
  /// Pass this token, along with the same query parameters as the first
  /// request, to view the next page of results.
  public var nextPageToken: String = String()

  /// The timestamp specifies the start time to which the request was restricted.
  /// The start time is set based on the requested time range. It may be adjusted
  /// to a later time if a project has exceeded the storage quota and older data
  /// has been deleted.
  public var timeRangeBegin: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeRangeBegin ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeRangeBegin = newValue}
  }
  /// Returns true if `timeRangeBegin` has been explicitly set.
  public var hasTimeRangeBegin: Bool {return self._timeRangeBegin != nil}
  /// Clears the value of `timeRangeBegin`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRangeBegin() {self._timeRangeBegin = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRangeBegin: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Data extracted for a specific group based on certain filter criteria,
/// such as a given time period and/or service filter.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Group data that is independent of the filter criteria.
  public var group: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup {
    get {return _storage._group ?? Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup()}
    set {_uniqueStorage()._group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  public var hasGroup: Bool {return _storage._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  public mutating func clearGroup() {_uniqueStorage()._group = nil}

  /// Approximate total number of events in the given group that match
  /// the filter criteria.
  public var count: Int64 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  /// Approximate number of affected users in the given group that
  /// match the filter criteria.
  /// Users are distinguished by data in the `ErrorContext` of the
  /// individual error events, such as their login name or their remote
  /// IP address in case of HTTP requests.
  /// The number of affected users can be zero even if the number of
  /// errors is non-zero if no data was provided from which the
  /// affected user could be deduced.
  /// Users are counted based on data in the request
  /// context that was provided in the error report. If more users are
  /// implicitly affected, such as due to a crash of the whole service,
  /// this is not reflected here.
  public var affectedUsersCount: Int64 {
    get {return _storage._affectedUsersCount}
    set {_uniqueStorage()._affectedUsersCount = newValue}
  }

  /// Approximate number of occurrences over time.
  /// Timed counts returned by ListGroups are guaranteed to be:
  ///
  /// - Inside the requested time interval
  /// - Non-overlapping, and
  /// - Ordered by ascending time.
  public var timedCounts: [Google_Devtools_Clouderrorreporting_V1beta1_TimedCount] {
    get {return _storage._timedCounts}
    set {_uniqueStorage()._timedCounts = newValue}
  }

  /// Approximate first occurrence that was ever seen for this group
  /// and which matches the given filter criteria, ignoring the
  /// time_range that was specified in the request.
  public var firstSeenTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._firstSeenTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._firstSeenTime = newValue}
  }
  /// Returns true if `firstSeenTime` has been explicitly set.
  public var hasFirstSeenTime: Bool {return _storage._firstSeenTime != nil}
  /// Clears the value of `firstSeenTime`. Subsequent reads from it will return its default value.
  public mutating func clearFirstSeenTime() {_uniqueStorage()._firstSeenTime = nil}

  /// Approximate last occurrence that was ever seen for this group and
  /// which matches the given filter criteria, ignoring the time_range
  /// that was specified in the request.
  public var lastSeenTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastSeenTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastSeenTime = newValue}
  }
  /// Returns true if `lastSeenTime` has been explicitly set.
  public var hasLastSeenTime: Bool {return _storage._lastSeenTime != nil}
  /// Clears the value of `lastSeenTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastSeenTime() {_uniqueStorage()._lastSeenTime = nil}

  /// Service contexts with a non-zero error count for the given filter
  /// criteria. This list can be truncated if multiple services are affected.
  /// Refer to `num_affected_services` for the total count.
  public var affectedServices: [Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext] {
    get {return _storage._affectedServices}
    set {_uniqueStorage()._affectedServices = newValue}
  }

  /// The total number of services with a non-zero error count for the given
  /// filter criteria.
  public var numAffectedServices: Int32 {
    get {return _storage._numAffectedServices}
    set {_uniqueStorage()._numAffectedServices = newValue}
  }

  /// An arbitrary event that is chosen as representative for the whole group.
  /// The representative event is intended to be used as a quick preview for
  /// the whole group. Events in the group are usually sufficiently similar
  /// to each other such that showing an arbitrary representative provides
  /// insight into the characteristics of the group as a whole.
  public var representative: Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent {
    get {return _storage._representative ?? Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent()}
    set {_uniqueStorage()._representative = newValue}
  }
  /// Returns true if `representative` has been explicitly set.
  public var hasRepresentative: Bool {return _storage._representative != nil}
  /// Clears the value of `representative`. Subsequent reads from it will return its default value.
  public mutating func clearRepresentative() {_uniqueStorage()._representative = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The number of errors in a given time period.
/// All numbers are approximate since the error events are sampled
/// before counting them.
public struct Google_Devtools_Clouderrorreporting_V1beta1_TimedCount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Approximate number of occurrences in the given time period.
  public var count: Int64 = 0

  /// Start of the time period to which `count` refers (included).
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// End of the time period to which `count` refers (excluded).
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Specifies a set of error events to return.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ListEventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the Google Cloud Platform project. Written
  /// as `projects/` plus the
  /// [Google Cloud Platform project
  /// ID](https://support.google.com/cloud/answer/6158840).
  /// Example: `projects/my-project-123`.
  public var projectName: String = String()

  /// Required. The group for which events shall be returned.
  public var groupID: String = String()

  /// Optional. List only ErrorGroups which belong to a service context that
  /// matches the filter.
  /// Data for all service contexts is returned if this field is not specified.
  public var serviceFilter: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter {
    get {return _serviceFilter ?? Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter()}
    set {_serviceFilter = newValue}
  }
  /// Returns true if `serviceFilter` has been explicitly set.
  public var hasServiceFilter: Bool {return self._serviceFilter != nil}
  /// Clears the value of `serviceFilter`. Subsequent reads from it will return its default value.
  public mutating func clearServiceFilter() {self._serviceFilter = nil}

  /// Optional. List only data for the given time range.
  /// If not set a default time range is used. The field time_range_begin
  /// in the response will specify the beginning of this time range.
  public var timeRange: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange {
    get {return _timeRange ?? Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  /// Optional. The maximum number of results to return per response.
  public var pageSize: Int32 = 0

  /// Optional. A `next_page_token` provided by a previous response.
  public var pageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _serviceFilter: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter? = nil
  fileprivate var _timeRange: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange? = nil
}

/// Contains a set of requested error events.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ListEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The error events which match the given request.
  public var errorEvents: [Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent] = []

  /// If non-empty, more results are available.
  /// Pass this token, along with the same query parameters as the first
  /// request, to view the next page of results.
  public var nextPageToken: String = String()

  /// The timestamp specifies the start time to which the request was restricted.
  public var timeRangeBegin: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeRangeBegin ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeRangeBegin = newValue}
  }
  /// Returns true if `timeRangeBegin` has been explicitly set.
  public var hasTimeRangeBegin: Bool {return self._timeRangeBegin != nil}
  /// Clears the value of `timeRangeBegin`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRangeBegin() {self._timeRangeBegin = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRangeBegin: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Requests might be rejected or the resulting timed count durations might be
/// adjusted for lower durations.
public struct Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Restricts the query to the specified time range.
  public var period: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange.Period = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The supported time ranges.
  public enum Period: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Do not use.
    case unspecified // = 0

    /// Retrieve data for the last hour.
    /// Recommended minimum timed count duration: 1 min.
    case period1Hour // = 1

    /// Retrieve data for the last 6 hours.
    /// Recommended minimum timed count duration: 10 min.
    case period6Hours // = 2

    /// Retrieve data for the last day.
    /// Recommended minimum timed count duration: 1 hour.
    case period1Day // = 3

    /// Retrieve data for the last week.
    /// Recommended minimum timed count duration: 6 hours.
    case period1Week // = 4

    /// Retrieve data for the last 30 days.
    /// Recommended minimum timed count duration: 1 day.
    case period30Days // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .period1Hour
      case 2: self = .period6Hours
      case 3: self = .period1Day
      case 4: self = .period1Week
      case 5: self = .period30Days
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .period1Hour: return 1
      case .period6Hours: return 2
      case .period1Day: return 3
      case .period1Week: return 4
      case .period30Days: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange.Period: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange.Period] = [
    .unspecified,
    .period1Hour,
    .period6Hours,
    .period1Day,
    .period1Week,
    .period30Days,
  ]
}

#endif  // swift(>=4.2)

/// Specifies criteria for filtering a subset of service contexts.
/// The fields in the filter correspond to the fields in `ServiceContext`.
/// Only exact, case-sensitive matches are supported.
/// If a field is unset or empty, it matches arbitrary values.
public struct Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The exact value to match against
  /// [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).
  public var service: String = String()

  /// Optional. The exact value to match against
  /// [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).
  public var version: String = String()

  /// Optional. The exact value to match against
  /// [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).
  public var resourceType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Deletes all events in the project.
public struct Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the Google Cloud Platform project. Written
  /// as `projects/` plus the
  /// [Google Cloud Platform project
  /// ID](https://support.google.com/cloud/answer/6158840).
  /// Example: `projects/my-project-123`.
  public var projectName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for deleting error events.
public struct Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.clouderrorreporting.v1beta1"

extension Google_Devtools_Clouderrorreporting_V1beta1_TimedCountAlignment: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR_COUNT_ALIGNMENT_UNSPECIFIED"),
    1: .same(proto: "ALIGNMENT_EQUAL_ROUNDED"),
    2: .same(proto: "ALIGNMENT_EQUAL_AT_END"),
  ]
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupOrder: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GROUP_ORDER_UNSPECIFIED"),
    1: .same(proto: "COUNT_DESC"),
    2: .same(proto: "LAST_SEEN_DESC"),
    3: .same(proto: "CREATED_DESC"),
    4: .same(proto: "AFFECTED_USERS_DESC"),
  ]
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGroupStatsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_name"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "service_filter"),
    5: .standard(proto: "time_range"),
    6: .standard(proto: "timed_count_duration"),
    7: .same(proto: "alignment"),
    8: .standard(proto: "alignment_time"),
    9: .same(proto: "order"),
    11: .standard(proto: "page_size"),
    12: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectName) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._serviceFilter) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._timeRange) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timedCountDuration) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.alignment) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._alignmentTime) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.order) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectName.isEmpty {
      try visitor.visitSingularStringField(value: self.projectName, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.groupID, fieldNumber: 2)
    }
    if let v = self._serviceFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._timedCountDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.alignment != .errorCountAlignmentUnspecified {
      try visitor.visitSingularEnumField(value: self.alignment, fieldNumber: 7)
    }
    if let v = self._alignmentTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if self.order != .groupOrderUnspecified {
      try visitor.visitSingularEnumField(value: self.order, fieldNumber: 9)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 11)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsRequest, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsRequest) -> Bool {
    if lhs.projectName != rhs.projectName {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs._serviceFilter != rhs._serviceFilter {return false}
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs._timedCountDuration != rhs._timedCountDuration {return false}
    if lhs.alignment != rhs.alignment {return false}
    if lhs._alignmentTime != rhs._alignmentTime {return false}
    if lhs.order != rhs.order {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGroupStatsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_group_stats"),
    2: .standard(proto: "next_page_token"),
    4: .standard(proto: "time_range_begin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.errorGroupStats) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timeRangeBegin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errorGroupStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errorGroupStats, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if let v = self._timeRangeBegin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsResponse, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ListGroupStatsResponse) -> Bool {
    if lhs.errorGroupStats != rhs.errorGroupStats {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs._timeRangeBegin != rhs._timeRangeBegin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorGroupStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
    2: .same(proto: "count"),
    3: .standard(proto: "affected_users_count"),
    4: .standard(proto: "timed_counts"),
    5: .standard(proto: "first_seen_time"),
    6: .standard(proto: "last_seen_time"),
    7: .standard(proto: "affected_services"),
    8: .standard(proto: "num_affected_services"),
    9: .same(proto: "representative"),
  ]

  fileprivate class _StorageClass {
    var _group: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroup? = nil
    var _count: Int64 = 0
    var _affectedUsersCount: Int64 = 0
    var _timedCounts: [Google_Devtools_Clouderrorreporting_V1beta1_TimedCount] = []
    var _firstSeenTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastSeenTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _affectedServices: [Google_Devtools_Clouderrorreporting_V1beta1_ServiceContext] = []
    var _numAffectedServices: Int32 = 0
    var _representative: Google_Devtools_Clouderrorreporting_V1beta1_ErrorEvent? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _group = source._group
      _count = source._count
      _affectedUsersCount = source._affectedUsersCount
      _timedCounts = source._timedCounts
      _firstSeenTime = source._firstSeenTime
      _lastSeenTime = source._lastSeenTime
      _affectedServices = source._affectedServices
      _numAffectedServices = source._numAffectedServices
      _representative = source._representative
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._group) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._count) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._affectedUsersCount) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._timedCounts) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._firstSeenTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._lastSeenTime) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._affectedServices) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._numAffectedServices) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._representative) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._group {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt64Field(value: _storage._count, fieldNumber: 2)
      }
      if _storage._affectedUsersCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._affectedUsersCount, fieldNumber: 3)
      }
      if !_storage._timedCounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._timedCounts, fieldNumber: 4)
      }
      if let v = _storage._firstSeenTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._lastSeenTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._affectedServices.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._affectedServices, fieldNumber: 7)
      }
      if _storage._numAffectedServices != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numAffectedServices, fieldNumber: 8)
      }
      if let v = _storage._representative {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupStats, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ErrorGroupStats) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._group != rhs_storage._group {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._affectedUsersCount != rhs_storage._affectedUsersCount {return false}
        if _storage._timedCounts != rhs_storage._timedCounts {return false}
        if _storage._firstSeenTime != rhs_storage._firstSeenTime {return false}
        if _storage._lastSeenTime != rhs_storage._lastSeenTime {return false}
        if _storage._affectedServices != rhs_storage._affectedServices {return false}
        if _storage._numAffectedServices != rhs_storage._numAffectedServices {return false}
        if _storage._representative != rhs_storage._representative {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_TimedCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimedCount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_TimedCount, rhs: Google_Devtools_Clouderrorreporting_V1beta1_TimedCount) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ListEventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_name"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "service_filter"),
    4: .standard(proto: "time_range"),
    6: .standard(proto: "page_size"),
    7: .standard(proto: "page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._serviceFilter) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timeRange) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectName.isEmpty {
      try visitor.visitSingularStringField(value: self.projectName, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 2)
    }
    if let v = self._serviceFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 6)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ListEventsRequest, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ListEventsRequest) -> Bool {
    if lhs.projectName != rhs.projectName {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs._serviceFilter != rhs._serviceFilter {return false}
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ListEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEventsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_events"),
    2: .standard(proto: "next_page_token"),
    4: .standard(proto: "time_range_begin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.errorEvents) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timeRangeBegin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errorEvents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errorEvents, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if let v = self._timeRangeBegin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ListEventsResponse, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ListEventsResponse) -> Bool {
    if lhs.errorEvents != rhs.errorEvents {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs._timeRangeBegin != rhs._timeRangeBegin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryTimeRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.period) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.period != .unspecified {
      try visitor.visitSingularEnumField(value: self.period, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange, rhs: Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange) -> Bool {
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_QueryTimeRange.Period: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIOD_UNSPECIFIED"),
    1: .same(proto: "PERIOD_1_HOUR"),
    2: .same(proto: "PERIOD_6_HOURS"),
    3: .same(proto: "PERIOD_1_DAY"),
    4: .same(proto: "PERIOD_1_WEEK"),
    5: .same(proto: "PERIOD_30_DAYS"),
  ]
}

extension Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceContextFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "service"),
    3: .same(proto: "version"),
    4: .standard(proto: "resource_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourceType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 2)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    if !self.resourceType.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter, rhs: Google_Devtools_Clouderrorreporting_V1beta1_ServiceContextFilter) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.version != rhs.version {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteEventsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectName.isEmpty {
      try visitor.visitSingularStringField(value: self.projectName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsRequest, rhs: Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsRequest) -> Bool {
    if lhs.projectName != rhs.projectName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteEventsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsResponse, rhs: Google_Devtools_Clouderrorreporting_V1beta1_DeleteEventsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
