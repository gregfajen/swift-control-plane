//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/clouddebugger/v2/controller.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Devtools_Clouddebugger_V2_Controller2Client, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Clouddebugger_V2_Controller2ClientProtocol: GRPCClient {
  func registerDebuggee(
    _ request: Google_Devtools_Clouddebugger_V2_RegisterDebuggeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_RegisterDebuggeeRequest, Google_Devtools_Clouddebugger_V2_RegisterDebuggeeResponse>

  func listActiveBreakpoints(
    _ request: Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsRequest, Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsResponse>

  func updateActiveBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointRequest, Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointResponse>

}

extension Google_Devtools_Clouddebugger_V2_Controller2ClientProtocol {

  /// Registers the debuggee with the controller service.
  ///
  /// All agents attached to the same application must call this method with
  /// exactly the same request content to get back the same stable `debuggee_id`.
  /// Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
  /// is returned from any controller method.
  ///
  /// This protocol allows the controller service to disable debuggees, recover
  /// from data loss, or change the `debuggee_id` format. Agents must handle
  /// `debuggee_id` value changing upon re-registration.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDebuggee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerDebuggee(
    _ request: Google_Devtools_Clouddebugger_V2_RegisterDebuggeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_RegisterDebuggeeRequest, Google_Devtools_Clouddebugger_V2_RegisterDebuggeeResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Controller2/RegisterDebuggee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the list of all active breakpoints for the debuggee.
  ///
  /// The breakpoint specification (`location`, `condition`, and `expressions`
  /// fields) is semantically immutable, although the field values may
  /// change. For example, an agent may update the location line number
  /// to reflect the actual line where the breakpoint was set, but this
  /// doesn't change the breakpoint semantics.
  ///
  /// This means that an agent does not need to check if a breakpoint has changed
  /// when it encounters the same breakpoint on a successive call.
  /// Moreover, an agent should remember the breakpoints that are completed
  /// until the controller removes them from the active list to avoid
  /// setting those breakpoints again.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListActiveBreakpoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listActiveBreakpoints(
    _ request: Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsRequest, Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Controller2/ListActiveBreakpoints",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the breakpoint state or mutable fields.
  /// The entire Breakpoint message must be sent back to the controller service.
  ///
  /// Updates to active breakpoint fields are only allowed if the new value
  /// does not change the breakpoint specification. Updates to the `location`,
  /// `condition` and `expressions` fields should not alter the breakpoint
  /// semantics. These may only make changes such as canonicalizing a value
  /// or snapping the location to the correct line of code.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateActiveBreakpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateActiveBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointRequest, Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Controller2/UpdateActiveBreakpoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Devtools_Clouddebugger_V2_Controller2Client: Google_Devtools_Clouddebugger_V2_Controller2ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.devtools.clouddebugger.v2.Controller2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Clouddebugger_V2_Controller2Provider: CallHandlerProvider {
  /// Registers the debuggee with the controller service.
  ///
  /// All agents attached to the same application must call this method with
  /// exactly the same request content to get back the same stable `debuggee_id`.
  /// Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
  /// is returned from any controller method.
  ///
  /// This protocol allows the controller service to disable debuggees, recover
  /// from data loss, or change the `debuggee_id` format. Agents must handle
  /// `debuggee_id` value changing upon re-registration.
  func registerDebuggee(request: Google_Devtools_Clouddebugger_V2_RegisterDebuggeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_RegisterDebuggeeResponse>
  /// Returns the list of all active breakpoints for the debuggee.
  ///
  /// The breakpoint specification (`location`, `condition`, and `expressions`
  /// fields) is semantically immutable, although the field values may
  /// change. For example, an agent may update the location line number
  /// to reflect the actual line where the breakpoint was set, but this
  /// doesn't change the breakpoint semantics.
  ///
  /// This means that an agent does not need to check if a breakpoint has changed
  /// when it encounters the same breakpoint on a successive call.
  /// Moreover, an agent should remember the breakpoints that are completed
  /// until the controller removes them from the active list to avoid
  /// setting those breakpoints again.
  func listActiveBreakpoints(request: Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_ListActiveBreakpointsResponse>
  /// Updates the breakpoint state or mutable fields.
  /// The entire Breakpoint message must be sent back to the controller service.
  ///
  /// Updates to active breakpoint fields are only allowed if the new value
  /// does not change the breakpoint specification. Updates to the `location`,
  /// `condition` and `expressions` fields should not alter the breakpoint
  /// semantics. These may only make changes such as canonicalizing a value
  /// or snapping the location to the correct line of code.
  func updateActiveBreakpoint(request: Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_UpdateActiveBreakpointResponse>
}

extension Google_Devtools_Clouddebugger_V2_Controller2Provider {
  public var serviceName: Substring { return "google.devtools.clouddebugger.v2.Controller2" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "RegisterDebuggee":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.registerDebuggee(request: request, context: context)
        }
      }

    case "ListActiveBreakpoints":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listActiveBreakpoints(request: request, context: context)
        }
      }

    case "UpdateActiveBreakpoint":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateActiveBreakpoint(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

