//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/clouddebugger/v2/debugger.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Devtools_Clouddebugger_V2_Debugger2Client, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Clouddebugger_V2_Debugger2ClientProtocol: GRPCClient {
  func setBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_SetBreakpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_SetBreakpointRequest, Google_Devtools_Clouddebugger_V2_SetBreakpointResponse>

  func getBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_GetBreakpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_GetBreakpointRequest, Google_Devtools_Clouddebugger_V2_GetBreakpointResponse>

  func deleteBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_DeleteBreakpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_DeleteBreakpointRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listBreakpoints(
    _ request: Google_Devtools_Clouddebugger_V2_ListBreakpointsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_ListBreakpointsRequest, Google_Devtools_Clouddebugger_V2_ListBreakpointsResponse>

  func listDebuggees(
    _ request: Google_Devtools_Clouddebugger_V2_ListDebuggeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_ListDebuggeesRequest, Google_Devtools_Clouddebugger_V2_ListDebuggeesResponse>

}

extension Google_Devtools_Clouddebugger_V2_Debugger2ClientProtocol {

  /// Sets the breakpoint to the debuggee.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetBreakpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_SetBreakpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_SetBreakpointRequest, Google_Devtools_Clouddebugger_V2_SetBreakpointResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Debugger2/SetBreakpoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets breakpoint information.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBreakpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_GetBreakpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_GetBreakpointRequest, Google_Devtools_Clouddebugger_V2_GetBreakpointResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Debugger2/GetBreakpoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes the breakpoint from the debuggee.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBreakpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteBreakpoint(
    _ request: Google_Devtools_Clouddebugger_V2_DeleteBreakpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_DeleteBreakpointRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Debugger2/DeleteBreakpoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all breakpoints for the debuggee.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBreakpoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listBreakpoints(
    _ request: Google_Devtools_Clouddebugger_V2_ListBreakpointsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_ListBreakpointsRequest, Google_Devtools_Clouddebugger_V2_ListBreakpointsResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Debugger2/ListBreakpoints",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all the debuggees that the user has access to.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDebuggees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDebuggees(
    _ request: Google_Devtools_Clouddebugger_V2_ListDebuggeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Clouddebugger_V2_ListDebuggeesRequest, Google_Devtools_Clouddebugger_V2_ListDebuggeesResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.clouddebugger.v2.Debugger2/ListDebuggees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Devtools_Clouddebugger_V2_Debugger2Client: Google_Devtools_Clouddebugger_V2_Debugger2ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.devtools.clouddebugger.v2.Debugger2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Clouddebugger_V2_Debugger2Provider: CallHandlerProvider {
  /// Sets the breakpoint to the debuggee.
  func setBreakpoint(request: Google_Devtools_Clouddebugger_V2_SetBreakpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_SetBreakpointResponse>
  /// Gets breakpoint information.
  func getBreakpoint(request: Google_Devtools_Clouddebugger_V2_GetBreakpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_GetBreakpointResponse>
  /// Deletes the breakpoint from the debuggee.
  func deleteBreakpoint(request: Google_Devtools_Clouddebugger_V2_DeleteBreakpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Lists all breakpoints for the debuggee.
  func listBreakpoints(request: Google_Devtools_Clouddebugger_V2_ListBreakpointsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_ListBreakpointsResponse>
  /// Lists all the debuggees that the user has access to.
  func listDebuggees(request: Google_Devtools_Clouddebugger_V2_ListDebuggeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Clouddebugger_V2_ListDebuggeesResponse>
}

extension Google_Devtools_Clouddebugger_V2_Debugger2Provider {
  public var serviceName: Substring { return "google.devtools.clouddebugger.v2.Debugger2" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SetBreakpoint":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setBreakpoint(request: request, context: context)
        }
      }

    case "GetBreakpoint":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBreakpoint(request: request, context: context)
        }
      }

    case "DeleteBreakpoint":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteBreakpoint(request: request, context: context)
        }
      }

    case "ListBreakpoints":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listBreakpoints(request: request, context: context)
        }
      }

    case "ListDebuggees":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDebuggees(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

