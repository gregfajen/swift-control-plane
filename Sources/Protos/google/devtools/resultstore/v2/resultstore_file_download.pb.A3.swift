// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/resultstore/v2/resultstore_file_download.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request object for GetFile
public struct Google_Devtools_Resultstore_V2_GetFileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This corresponds to the uri field in the File message.
  public var uri: String = String()

  /// The offset for the first byte to return in the read, relative to the start
  /// of the resource.
  ///
  /// A `read_offset` that is negative or greater than the size of the resource
  /// will cause an `OUT_OF_RANGE` error.
  public var readOffset: Int64 = 0

  /// The maximum number of `data` bytes the server is allowed to return in the
  /// sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
  /// there is no limit, and a negative `read_limit` will cause an error.
  ///
  /// If the stream returns fewer bytes than allowed by the `read_limit` and no
  /// error occurred, the stream includes all data from the `read_offset` to the
  /// end of the resource.
  public var readLimit: Int64 = 0

  /// Only applies if the referenced file is a known archive type (ar, jar, zip)
  /// The above read_offset and read_limit fields are applied to this entry.
  /// If this file is not an archive, INVALID_ARGUMENT is thrown.
  public var archiveEntry: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response object for GetFile
public struct Google_Devtools_Resultstore_V2_GetFileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The file data.
  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request object for GetFileTail
public struct Google_Devtools_Resultstore_V2_GetFileTailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This corresponds to the uri field in the File message.
  public var uri: String = String()

  /// The offset for the first byte to return in the read, relative to the end
  /// of the resource.
  ///
  /// A `read_offset` that is negative or greater than the size of the resource
  /// will cause an `OUT_OF_RANGE` error.
  public var readOffset: Int64 = 0

  /// The maximum number of `data` bytes the server is allowed to return. The
  /// server will return bytes starting from the tail of the file.
  ///
  /// A `read_limit` of zero indicates that there is no limit, and a negative
  /// `read_limit` will cause an error.
  public var readLimit: Int64 = 0

  /// Only applies if the referenced file is a known archive type (ar, jar, zip)
  /// The above read_offset and read_limit fields are applied to this entry.
  /// If this file is not an archive, INVALID_ARGUMENT is thrown.
  public var archiveEntry: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response object for GetFileTail
public struct Google_Devtools_Resultstore_V2_GetFileTailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The file data, encoded with UTF-8.
  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.resultstore.v2"

extension Google_Devtools_Resultstore_V2_GetFileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .standard(proto: "read_offset"),
    3: .standard(proto: "read_limit"),
    4: .standard(proto: "archive_entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.readOffset) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.readLimit) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.archiveEntry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if self.readOffset != 0 {
      try visitor.visitSingularInt64Field(value: self.readOffset, fieldNumber: 2)
    }
    if self.readLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.readLimit, fieldNumber: 3)
    }
    if !self.archiveEntry.isEmpty {
      try visitor.visitSingularStringField(value: self.archiveEntry, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_GetFileRequest, rhs: Google_Devtools_Resultstore_V2_GetFileRequest) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs.readLimit != rhs.readLimit {return false}
    if lhs.archiveEntry != rhs.archiveEntry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_GetFileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFileResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_GetFileResponse, rhs: Google_Devtools_Resultstore_V2_GetFileResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_GetFileTailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFileTailRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .standard(proto: "read_offset"),
    3: .standard(proto: "read_limit"),
    4: .standard(proto: "archive_entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.readOffset) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.readLimit) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.archiveEntry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if self.readOffset != 0 {
      try visitor.visitSingularInt64Field(value: self.readOffset, fieldNumber: 2)
    }
    if self.readLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.readLimit, fieldNumber: 3)
    }
    if !self.archiveEntry.isEmpty {
      try visitor.visitSingularStringField(value: self.archiveEntry, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_GetFileTailRequest, rhs: Google_Devtools_Resultstore_V2_GetFileTailRequest) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs.readLimit != rhs.readLimit {return false}
    if lhs.archiveEntry != rhs.archiveEntry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_GetFileTailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFileTailResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_GetFileTailResponse, rhs: Google_Devtools_Resultstore_V2_GetFileTailResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
