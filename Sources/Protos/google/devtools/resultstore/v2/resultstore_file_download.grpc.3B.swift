//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/resultstore/v2/resultstore_file_download.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Devtools_Resultstore_V2_ResultStoreFileDownloadClient, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Resultstore_V2_ResultStoreFileDownloadClientProtocol: GRPCClient {
  func getFile(
    _ request: Google_Devtools_Resultstore_V2_GetFileRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Devtools_Resultstore_V2_GetFileResponse) -> Void
  ) -> ServerStreamingCall<Google_Devtools_Resultstore_V2_GetFileRequest, Google_Devtools_Resultstore_V2_GetFileResponse>

  func getFileTail(
    _ request: Google_Devtools_Resultstore_V2_GetFileTailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_GetFileTailRequest, Google_Devtools_Resultstore_V2_GetFileTailResponse>

}

extension Google_Devtools_Resultstore_V2_ResultStoreFileDownloadClientProtocol {

  /// Retrieves the File with the given uri.
  /// returns a stream of bytes to be stitched together in order.
  ///
  /// An error will be reported in the following cases:
  /// - If the File is not found.
  /// - If the given File uri is badly formatted.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFile.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getFile(
    _ request: Google_Devtools_Resultstore_V2_GetFileRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Devtools_Resultstore_V2_GetFileResponse) -> Void
  ) -> ServerStreamingCall<Google_Devtools_Resultstore_V2_GetFileRequest, Google_Devtools_Resultstore_V2_GetFileResponse> {
    return self.makeServerStreamingCall(
      path: "/google.devtools.resultstore.v2.ResultStoreFileDownload/GetFile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Retrieves the tail of a File with the given uri.
  ///
  /// An error will be reported in the following cases:
  /// - If the File is not found.
  /// - If the given File uri is badly formatted.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFileTail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFileTail(
    _ request: Google_Devtools_Resultstore_V2_GetFileTailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_GetFileTailRequest, Google_Devtools_Resultstore_V2_GetFileTailResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreFileDownload/GetFileTail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Devtools_Resultstore_V2_ResultStoreFileDownloadClient: Google_Devtools_Resultstore_V2_ResultStoreFileDownloadClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.devtools.resultstore.v2.ResultStoreFileDownload service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Resultstore_V2_ResultStoreFileDownloadProvider: CallHandlerProvider {
  /// Retrieves the File with the given uri.
  /// returns a stream of bytes to be stitched together in order.
  ///
  /// An error will be reported in the following cases:
  /// - If the File is not found.
  /// - If the given File uri is badly formatted.
  func getFile(request: Google_Devtools_Resultstore_V2_GetFileRequest, context: StreamingResponseCallContext<Google_Devtools_Resultstore_V2_GetFileResponse>) -> EventLoopFuture<GRPCStatus>
  /// Retrieves the tail of a File with the given uri.
  ///
  /// An error will be reported in the following cases:
  /// - If the File is not found.
  /// - If the given File uri is badly formatted.
  func getFileTail(request: Google_Devtools_Resultstore_V2_GetFileTailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_GetFileTailResponse>
}

extension Google_Devtools_Resultstore_V2_ResultStoreFileDownloadProvider {
  public var serviceName: Substring { return "google.devtools.resultstore.v2.ResultStoreFileDownload" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetFile":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFile(request: request, context: context)
        }
      }

    case "GetFileTail":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFileTail(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

