//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/resultstore/v2/resultstore_upload.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Devtools_Resultstore_V2_ResultStoreUploadClient, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Resultstore_V2_ResultStoreUploadClientProtocol: GRPCClient {
  func createInvocation(
    _ request: Google_Devtools_Resultstore_V2_CreateInvocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateInvocationRequest, Google_Devtools_Resultstore_V2_Invocation>

  func updateInvocation(
    _ request: Google_Devtools_Resultstore_V2_UpdateInvocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateInvocationRequest, Google_Devtools_Resultstore_V2_Invocation>

  func mergeInvocation(
    _ request: Google_Devtools_Resultstore_V2_MergeInvocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeInvocationRequest, Google_Devtools_Resultstore_V2_Invocation>

  func touchInvocation(
    _ request: Google_Devtools_Resultstore_V2_TouchInvocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_TouchInvocationRequest, Google_Devtools_Resultstore_V2_TouchInvocationResponse>

  func finalizeInvocation(
    _ request: Google_Devtools_Resultstore_V2_FinalizeInvocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_FinalizeInvocationRequest, Google_Devtools_Resultstore_V2_FinalizeInvocationResponse>

  func deleteInvocation(
    _ request: Google_Devtools_Resultstore_V2_DeleteInvocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_DeleteInvocationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createTarget(
    _ request: Google_Devtools_Resultstore_V2_CreateTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateTargetRequest, Google_Devtools_Resultstore_V2_Target>

  func updateTarget(
    _ request: Google_Devtools_Resultstore_V2_UpdateTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateTargetRequest, Google_Devtools_Resultstore_V2_Target>

  func mergeTarget(
    _ request: Google_Devtools_Resultstore_V2_MergeTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeTargetRequest, Google_Devtools_Resultstore_V2_Target>

  func finalizeTarget(
    _ request: Google_Devtools_Resultstore_V2_FinalizeTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_FinalizeTargetRequest, Google_Devtools_Resultstore_V2_FinalizeTargetResponse>

  func createConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_CreateConfiguredTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateConfiguredTargetRequest, Google_Devtools_Resultstore_V2_ConfiguredTarget>

  func updateConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_UpdateConfiguredTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateConfiguredTargetRequest, Google_Devtools_Resultstore_V2_ConfiguredTarget>

  func mergeConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_MergeConfiguredTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeConfiguredTargetRequest, Google_Devtools_Resultstore_V2_ConfiguredTarget>

  func finalizeConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetRequest, Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetResponse>

  func createAction(
    _ request: Google_Devtools_Resultstore_V2_CreateActionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateActionRequest, Google_Devtools_Resultstore_V2_Action>

  func updateAction(
    _ request: Google_Devtools_Resultstore_V2_UpdateActionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateActionRequest, Google_Devtools_Resultstore_V2_Action>

  func mergeAction(
    _ request: Google_Devtools_Resultstore_V2_MergeActionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeActionRequest, Google_Devtools_Resultstore_V2_Action>

  func createConfiguration(
    _ request: Google_Devtools_Resultstore_V2_CreateConfigurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateConfigurationRequest, Google_Devtools_Resultstore_V2_Configuration>

  func updateConfiguration(
    _ request: Google_Devtools_Resultstore_V2_UpdateConfigurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateConfigurationRequest, Google_Devtools_Resultstore_V2_Configuration>

  func createFileSet(
    _ request: Google_Devtools_Resultstore_V2_CreateFileSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateFileSetRequest, Google_Devtools_Resultstore_V2_FileSet>

  func updateFileSet(
    _ request: Google_Devtools_Resultstore_V2_UpdateFileSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateFileSetRequest, Google_Devtools_Resultstore_V2_FileSet>

  func mergeFileSet(
    _ request: Google_Devtools_Resultstore_V2_MergeFileSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeFileSetRequest, Google_Devtools_Resultstore_V2_FileSet>

  func uploadBatch(
    _ request: Google_Devtools_Resultstore_V2_UploadBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UploadBatchRequest, Google_Devtools_Resultstore_V2_UploadBatchResponse>

  func getInvocationUploadMetadata(
    _ request: Google_Devtools_Resultstore_V2_GetInvocationUploadMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_GetInvocationUploadMetadataRequest, Google_Devtools_Resultstore_V2_UploadMetadata>

}

extension Google_Devtools_Resultstore_V2_ResultStoreUploadClientProtocol {

  /// Creates the given invocation.
  ///
  /// This is not an implicitly idempotent API, so a request id is required to
  /// make it idempotent.
  ///
  /// Returns an empty Invocation proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If an invocation with the same ID already exists.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateInvocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createInvocation(
    _ request: Google_Devtools_Resultstore_V2_CreateInvocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateInvocationRequest, Google_Devtools_Resultstore_V2_Invocation> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/CreateInvocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a standard update to the invocation identified by the given proto's
  /// name.  For all types of fields (primitive, message, or repeated), replaces
  /// them with the given proto fields if they are under the given field mask
  /// paths.  Fields that match the mask but aren't populated in the given
  /// invocation are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty Invocation proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateInvocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateInvocation(
    _ request: Google_Devtools_Resultstore_V2_UpdateInvocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateInvocationRequest, Google_Devtools_Resultstore_V2_Invocation> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UpdateInvocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a merge update to the invocation identified by the given proto's
  /// name.  For primitive and message fields, replaces them with the ones in
  /// the given proto if they are covered under the field mask paths.  For
  /// repeated fields, merges to them with the given ones if they are covered
  /// under the field mask paths. This is not an implicitly idempotent API, so a
  /// request id is required to make it idempotent.
  ///
  /// Returns an empty Invocation proto with only the name and ID fields
  /// populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeInvocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeInvocation(
    _ request: Google_Devtools_Resultstore_V2_MergeInvocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeInvocationRequest, Google_Devtools_Resultstore_V2_Invocation> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/MergeInvocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Touches the invocation identified by the given proto's name.
  ///
  /// This is useful when you need to notify ResultStore that you haven't
  /// abandoned the upload, since abandoned uploads will be automatically
  /// finalized after a set period.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is finalized.
  ///
  /// - Parameters:
  ///   - request: Request to send to TouchInvocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func touchInvocation(
    _ request: Google_Devtools_Resultstore_V2_TouchInvocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_TouchInvocationRequest, Google_Devtools_Resultstore_V2_TouchInvocationResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/TouchInvocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Declares the invocation with the given name as finalized and immutable by
  /// the user. It may still be mutated by post-processing. This is an implicitly
  /// idempotent API.
  ///
  /// If an Invocation is not updated for 24 hours, some time after that
  /// this will be called automatically.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizeInvocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalizeInvocation(
    _ request: Google_Devtools_Resultstore_V2_FinalizeInvocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_FinalizeInvocationRequest, Google_Devtools_Resultstore_V2_FinalizeInvocationResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/FinalizeInvocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an immutable invocation (permanently)
  /// Note: this does not delete indirect data, e.g. files stored in other
  /// services.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is not finalized.  This can be retried until it is.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInvocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInvocation(
    _ request: Google_Devtools_Resultstore_V2_DeleteInvocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_DeleteInvocationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/DeleteInvocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates the given target under the given parent invocation. The given
  /// target ID is URL encoded, converted to the full resource name, and assigned
  /// to the target's name field. This is not an implicitly idempotent API, so a
  /// request id is required to make it idempotent.
  ///
  /// Returns an empty Target proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no target ID is provided.
  /// - If the parent invocation does not exist.
  /// - If the parent invocation is finalized.
  /// - If a target with the same name already exists.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTarget(
    _ request: Google_Devtools_Resultstore_V2_CreateTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateTargetRequest, Google_Devtools_Resultstore_V2_Target> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/CreateTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a standard update to the target identified by the given proto's
  /// name. For all types of fields (primitive, message, or repeated), replaces
  /// them with the given proto fields if they are under the given field mask
  /// paths. Fields that match the mask but aren't populated in the given
  /// target are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty Target proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the target does not exist.
  /// - If the target or parent invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTarget(
    _ request: Google_Devtools_Resultstore_V2_UpdateTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateTargetRequest, Google_Devtools_Resultstore_V2_Target> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UpdateTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a merge update to the target identified by the given proto's
  /// name. For primitive and message fields, replaces them with the ones in the
  /// given proto if they are covered under the field mask paths.  For repeated
  /// fields, merges to them with the given ones if they are covered under the
  /// field mask paths. This is not an implicitly idempotent API, so a request
  /// id is required to make it idempotent.
  ///
  /// Returns an empty Target proto with only the name and ID fields populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the target does not exist.
  /// - If the target or parent invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeTarget(
    _ request: Google_Devtools_Resultstore_V2_MergeTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeTargetRequest, Google_Devtools_Resultstore_V2_Target> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/MergeTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Declares the target with the given name as finalized and immutable by the
  /// user. It may still be mutated by post-processing. This is an implicitly
  /// idempotent API.
  ///
  /// An error will be reported in the following cases:
  /// - If the target does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizeTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalizeTarget(
    _ request: Google_Devtools_Resultstore_V2_FinalizeTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_FinalizeTargetRequest, Google_Devtools_Resultstore_V2_FinalizeTargetResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/FinalizeTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates the given configured target under the given parent target.
  /// The given configured target ID is URL encoded, converted to the full
  /// resource name, and assigned to the configured target's name field.
  /// This is not an implicitly idempotent API, so a request id is required
  /// to make it idempotent.
  ///
  /// Returns an empty ConfiguredTarget proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no config ID is provided.
  /// - If a configured target with the same ID already exists.
  /// - If the parent target does not exist.
  /// - If the parent target or invocation is finalized.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateConfiguredTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_CreateConfiguredTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateConfiguredTargetRequest, Google_Devtools_Resultstore_V2_ConfiguredTarget> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/CreateConfiguredTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a standard update to the configured target identified by the given
  /// proto's name. For all types of fields (primitive, message, or repeated),
  /// replaces them with the given proto fields if they are under the given
  /// field mask paths. Fields that match the mask but aren't populated in the
  /// given configured target are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty ConfiguredTarget proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the configured target does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateConfiguredTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_UpdateConfiguredTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateConfiguredTargetRequest, Google_Devtools_Resultstore_V2_ConfiguredTarget> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UpdateConfiguredTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a merge update to the configured target identified by the given
  /// proto's name. For primitive and message fields, replaces them with the
  /// ones in the given proto if they are covered under the field mask paths.
  /// For repeated fields, merges to them with the given ones if they are
  /// covered under the field mask paths. This is not an implicitly idempotent
  /// API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty ConfiguredTarget proto with only the name and ID fields
  /// populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the configured target does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeConfiguredTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_MergeConfiguredTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeConfiguredTargetRequest, Google_Devtools_Resultstore_V2_ConfiguredTarget> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/MergeConfiguredTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Declares the configured target with the given name as finalized and
  /// immutable by the user. It may still be mutated by post-processing. This is
  /// an implicitly idempotent API.
  ///
  /// An error will be reported in the following cases:
  /// - If the configured target does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizeConfiguredTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalizeConfiguredTarget(
    _ request: Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetRequest, Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/FinalizeConfiguredTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates the given action under the given configured target. The given
  /// action ID is URL encoded, converted to the full resource name, and
  /// assigned to the action's name field. This is not an implicitly
  /// idempotent API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty Action proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no action ID provided.
  /// - If the parent configured target does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If an action  with the same name already exists.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAction(
    _ request: Google_Devtools_Resultstore_V2_CreateActionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateActionRequest, Google_Devtools_Resultstore_V2_Action> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/CreateAction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a standard update to the action identified by the given
  /// proto's name.  For all types of fields (primitive, message, or repeated),
  /// replaces them with the given proto fields if they are under the given
  /// field mask paths.  Fields that match the mask but aren't populated in the
  /// given action are cleared.  This is an implicitly idempotent API.
  ///
  /// Returns an empty Action proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the action does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAction(
    _ request: Google_Devtools_Resultstore_V2_UpdateActionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateActionRequest, Google_Devtools_Resultstore_V2_Action> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UpdateAction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a merge update to the action identified by the given
  /// proto's name.  For primitive and message fields, replaces them with the
  /// ones in the given proto if they are covered under the field mask paths.
  /// For repeated fields, merges to them with the given ones if they are
  /// covered under the field mask paths. This is not an implicitly idempotent
  /// API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty Action proto with only the name and ID fields populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the action does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeAction(
    _ request: Google_Devtools_Resultstore_V2_MergeActionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeActionRequest, Google_Devtools_Resultstore_V2_Action> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/MergeAction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates the given configuration under the given parent invocation. The
  /// given configuration ID is URL encoded, converted to the full resource name,
  /// and assigned to the configuration's name field. The configuration ID of
  /// "default" should be preferred for the default configuration in a
  /// single-config invocation. This is not an implicitly idempotent API, so a
  /// request id is required to make it idempotent.
  ///
  /// Returns an empty Configuration proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no configuration ID is provided.
  /// - If the parent invocation does not exist.
  /// - If the parent invocation is finalized.
  /// - If a configuration with the same name already exists.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateConfiguration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createConfiguration(
    _ request: Google_Devtools_Resultstore_V2_CreateConfigurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateConfigurationRequest, Google_Devtools_Resultstore_V2_Configuration> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/CreateConfiguration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a standard update to the configuration identified by the given
  /// proto's name. For all types of fields (primitive, message, or repeated),
  /// replaces them with the given proto fields if they are under the given field
  /// mask paths. Fields that match the mask but aren't populated in the given
  /// configuration are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty Configuration proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the configuration does not exist.
  /// - If the parent invocation is finalized.
  /// - If no field mask was given.
  /// - If a given field mask path is not valid.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateConfiguration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateConfiguration(
    _ request: Google_Devtools_Resultstore_V2_UpdateConfigurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateConfigurationRequest, Google_Devtools_Resultstore_V2_Configuration> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UpdateConfiguration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates the given file set under the given parent invocation. The given
  /// file set ID is URL encoded, converted to the full resource name, and
  /// assigned to the file set's name field. This is not an implicitly idempotent
  /// API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty FileSet proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no file set ID is provided.
  /// - If a file set with the same name already exists.
  /// - If the parent invocation does not exist.
  /// - If the parent invocation is finalized.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFileSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFileSet(
    _ request: Google_Devtools_Resultstore_V2_CreateFileSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_CreateFileSetRequest, Google_Devtools_Resultstore_V2_FileSet> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/CreateFileSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a standard update to the file set identified by the given proto's
  /// name. For all types of fields (primitive, message, or repeated), replaces
  /// them with the given proto fields if they are under the given field mask
  /// paths. Fields that match the mask but aren't populated in the given
  /// configuration are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty FileSet proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the file set does not exist.
  /// - If the parent invocation is finalized.
  /// - If no field mask was given.
  /// - If a given field mask path is not valid.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFileSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFileSet(
    _ request: Google_Devtools_Resultstore_V2_UpdateFileSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UpdateFileSetRequest, Google_Devtools_Resultstore_V2_FileSet> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UpdateFileSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Applies a merge update to the file set identified by the given proto's
  /// name. For primitive and message fields, updates them with the ones in the
  /// given proto if they are covered under the field mask paths. For repeated
  /// fields, merges to them with the given ones if they are covered under the
  /// field mask paths. This is not an implicitly idempotent API, so a request
  /// id is required to make it idempotent.
  ///
  /// Returns an empty FileSet proto with only the name and ID fields populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the file set does not exist.
  /// - If the parent invocation is finalized.
  /// - If a given field mask path is not valid.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeFileSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeFileSet(
    _ request: Google_Devtools_Resultstore_V2_MergeFileSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_MergeFileSetRequest, Google_Devtools_Resultstore_V2_FileSet> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/MergeFileSet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// This is the RPC used for batch upload. It supports uploading multiple
  /// resources for an invocation in a transaction safe manner.
  ///
  /// To use this RPC, the CreateInvocationRequest must have been provided a
  /// resume_token.
  ///
  /// Combining batch upload with normal upload on a single Invocation is not
  /// supported. If an Invocation is created with a resume_token, all further
  /// calls must be through UploadBatch. If an Invocation is created without
  /// resume_token normal upload, all further upload calls must be through normal
  /// upload RPCs.
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func uploadBatch(
    _ request: Google_Devtools_Resultstore_V2_UploadBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_UploadBatchRequest, Google_Devtools_Resultstore_V2_UploadBatchResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/UploadBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Provides a way to read the metadata for an invocation.
  /// The UploadMetadata could still be retrieved by this RPC even the Invocation
  /// has been finalized.
  /// This API requires setting a response FieldMask via 'fields' URL query
  /// parameter or X-Goog-FieldMask HTTP/gRPC header.
  ///
  /// An error will be reported in the following case:
  /// - If the invocation does not exist.
  /// - If no field mask was given.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInvocationUploadMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInvocationUploadMetadata(
    _ request: Google_Devtools_Resultstore_V2_GetInvocationUploadMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Resultstore_V2_GetInvocationUploadMetadataRequest, Google_Devtools_Resultstore_V2_UploadMetadata> {
    return self.makeUnaryCall(
      path: "/google.devtools.resultstore.v2.ResultStoreUpload/GetInvocationUploadMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Devtools_Resultstore_V2_ResultStoreUploadClient: Google_Devtools_Resultstore_V2_ResultStoreUploadClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.devtools.resultstore.v2.ResultStoreUpload service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Resultstore_V2_ResultStoreUploadProvider: CallHandlerProvider {
  /// Creates the given invocation.
  ///
  /// This is not an implicitly idempotent API, so a request id is required to
  /// make it idempotent.
  ///
  /// Returns an empty Invocation proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If an invocation with the same ID already exists.
  func createInvocation(request: Google_Devtools_Resultstore_V2_CreateInvocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Invocation>
  /// Applies a standard update to the invocation identified by the given proto's
  /// name.  For all types of fields (primitive, message, or repeated), replaces
  /// them with the given proto fields if they are under the given field mask
  /// paths.  Fields that match the mask but aren't populated in the given
  /// invocation are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty Invocation proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is finalized.
  /// - If no field mask was given.
  func updateInvocation(request: Google_Devtools_Resultstore_V2_UpdateInvocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Invocation>
  /// Applies a merge update to the invocation identified by the given proto's
  /// name.  For primitive and message fields, replaces them with the ones in
  /// the given proto if they are covered under the field mask paths.  For
  /// repeated fields, merges to them with the given ones if they are covered
  /// under the field mask paths. This is not an implicitly idempotent API, so a
  /// request id is required to make it idempotent.
  ///
  /// Returns an empty Invocation proto with only the name and ID fields
  /// populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is finalized.
  /// - If no field mask was given.
  func mergeInvocation(request: Google_Devtools_Resultstore_V2_MergeInvocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Invocation>
  /// Touches the invocation identified by the given proto's name.
  ///
  /// This is useful when you need to notify ResultStore that you haven't
  /// abandoned the upload, since abandoned uploads will be automatically
  /// finalized after a set period.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is finalized.
  func touchInvocation(request: Google_Devtools_Resultstore_V2_TouchInvocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_TouchInvocationResponse>
  /// Declares the invocation with the given name as finalized and immutable by
  /// the user. It may still be mutated by post-processing. This is an implicitly
  /// idempotent API.
  ///
  /// If an Invocation is not updated for 24 hours, some time after that
  /// this will be called automatically.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  func finalizeInvocation(request: Google_Devtools_Resultstore_V2_FinalizeInvocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_FinalizeInvocationResponse>
  /// Deletes an immutable invocation (permanently)
  /// Note: this does not delete indirect data, e.g. files stored in other
  /// services.
  ///
  /// An error will be reported in the following cases:
  /// - If the invocation does not exist.
  /// - If the invocation is not finalized.  This can be retried until it is.
  func deleteInvocation(request: Google_Devtools_Resultstore_V2_DeleteInvocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Creates the given target under the given parent invocation. The given
  /// target ID is URL encoded, converted to the full resource name, and assigned
  /// to the target's name field. This is not an implicitly idempotent API, so a
  /// request id is required to make it idempotent.
  ///
  /// Returns an empty Target proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no target ID is provided.
  /// - If the parent invocation does not exist.
  /// - If the parent invocation is finalized.
  /// - If a target with the same name already exists.
  func createTarget(request: Google_Devtools_Resultstore_V2_CreateTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Target>
  /// Applies a standard update to the target identified by the given proto's
  /// name. For all types of fields (primitive, message, or repeated), replaces
  /// them with the given proto fields if they are under the given field mask
  /// paths. Fields that match the mask but aren't populated in the given
  /// target are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty Target proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the target does not exist.
  /// - If the target or parent invocation is finalized.
  /// - If no field mask was given.
  func updateTarget(request: Google_Devtools_Resultstore_V2_UpdateTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Target>
  /// Applies a merge update to the target identified by the given proto's
  /// name. For primitive and message fields, replaces them with the ones in the
  /// given proto if they are covered under the field mask paths.  For repeated
  /// fields, merges to them with the given ones if they are covered under the
  /// field mask paths. This is not an implicitly idempotent API, so a request
  /// id is required to make it idempotent.
  ///
  /// Returns an empty Target proto with only the name and ID fields populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the target does not exist.
  /// - If the target or parent invocation is finalized.
  /// - If no field mask was given.
  func mergeTarget(request: Google_Devtools_Resultstore_V2_MergeTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Target>
  /// Declares the target with the given name as finalized and immutable by the
  /// user. It may still be mutated by post-processing. This is an implicitly
  /// idempotent API.
  ///
  /// An error will be reported in the following cases:
  /// - If the target does not exist.
  func finalizeTarget(request: Google_Devtools_Resultstore_V2_FinalizeTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_FinalizeTargetResponse>
  /// Creates the given configured target under the given parent target.
  /// The given configured target ID is URL encoded, converted to the full
  /// resource name, and assigned to the configured target's name field.
  /// This is not an implicitly idempotent API, so a request id is required
  /// to make it idempotent.
  ///
  /// Returns an empty ConfiguredTarget proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no config ID is provided.
  /// - If a configured target with the same ID already exists.
  /// - If the parent target does not exist.
  /// - If the parent target or invocation is finalized.
  func createConfiguredTarget(request: Google_Devtools_Resultstore_V2_CreateConfiguredTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_ConfiguredTarget>
  /// Applies a standard update to the configured target identified by the given
  /// proto's name. For all types of fields (primitive, message, or repeated),
  /// replaces them with the given proto fields if they are under the given
  /// field mask paths. Fields that match the mask but aren't populated in the
  /// given configured target are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty ConfiguredTarget proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the configured target does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  func updateConfiguredTarget(request: Google_Devtools_Resultstore_V2_UpdateConfiguredTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_ConfiguredTarget>
  /// Applies a merge update to the configured target identified by the given
  /// proto's name. For primitive and message fields, replaces them with the
  /// ones in the given proto if they are covered under the field mask paths.
  /// For repeated fields, merges to them with the given ones if they are
  /// covered under the field mask paths. This is not an implicitly idempotent
  /// API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty ConfiguredTarget proto with only the name and ID fields
  /// populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the configured target does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  func mergeConfiguredTarget(request: Google_Devtools_Resultstore_V2_MergeConfiguredTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_ConfiguredTarget>
  /// Declares the configured target with the given name as finalized and
  /// immutable by the user. It may still be mutated by post-processing. This is
  /// an implicitly idempotent API.
  ///
  /// An error will be reported in the following cases:
  /// - If the configured target does not exist.
  func finalizeConfiguredTarget(request: Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_FinalizeConfiguredTargetResponse>
  /// Creates the given action under the given configured target. The given
  /// action ID is URL encoded, converted to the full resource name, and
  /// assigned to the action's name field. This is not an implicitly
  /// idempotent API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty Action proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no action ID provided.
  /// - If the parent configured target does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If an action  with the same name already exists.
  func createAction(request: Google_Devtools_Resultstore_V2_CreateActionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Action>
  /// Applies a standard update to the action identified by the given
  /// proto's name.  For all types of fields (primitive, message, or repeated),
  /// replaces them with the given proto fields if they are under the given
  /// field mask paths.  Fields that match the mask but aren't populated in the
  /// given action are cleared.  This is an implicitly idempotent API.
  ///
  /// Returns an empty Action proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the action does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  func updateAction(request: Google_Devtools_Resultstore_V2_UpdateActionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Action>
  /// Applies a merge update to the action identified by the given
  /// proto's name.  For primitive and message fields, replaces them with the
  /// ones in the given proto if they are covered under the field mask paths.
  /// For repeated fields, merges to them with the given ones if they are
  /// covered under the field mask paths. This is not an implicitly idempotent
  /// API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty Action proto with only the name and ID fields populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the action does not exist.
  /// - If the parent target or invocation is finalized.
  /// - If no field mask was given.
  func mergeAction(request: Google_Devtools_Resultstore_V2_MergeActionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Action>
  /// Creates the given configuration under the given parent invocation. The
  /// given configuration ID is URL encoded, converted to the full resource name,
  /// and assigned to the configuration's name field. The configuration ID of
  /// "default" should be preferred for the default configuration in a
  /// single-config invocation. This is not an implicitly idempotent API, so a
  /// request id is required to make it idempotent.
  ///
  /// Returns an empty Configuration proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no configuration ID is provided.
  /// - If the parent invocation does not exist.
  /// - If the parent invocation is finalized.
  /// - If a configuration with the same name already exists.
  func createConfiguration(request: Google_Devtools_Resultstore_V2_CreateConfigurationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Configuration>
  /// Applies a standard update to the configuration identified by the given
  /// proto's name. For all types of fields (primitive, message, or repeated),
  /// replaces them with the given proto fields if they are under the given field
  /// mask paths. Fields that match the mask but aren't populated in the given
  /// configuration are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty Configuration proto with only the name and ID fields
  /// populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the configuration does not exist.
  /// - If the parent invocation is finalized.
  /// - If no field mask was given.
  /// - If a given field mask path is not valid.
  func updateConfiguration(request: Google_Devtools_Resultstore_V2_UpdateConfigurationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_Configuration>
  /// Creates the given file set under the given parent invocation. The given
  /// file set ID is URL encoded, converted to the full resource name, and
  /// assigned to the file set's name field. This is not an implicitly idempotent
  /// API, so a request id is required to make it idempotent.
  ///
  /// Returns an empty FileSet proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If no file set ID is provided.
  /// - If a file set with the same name already exists.
  /// - If the parent invocation does not exist.
  /// - If the parent invocation is finalized.
  func createFileSet(request: Google_Devtools_Resultstore_V2_CreateFileSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_FileSet>
  /// Applies a standard update to the file set identified by the given proto's
  /// name. For all types of fields (primitive, message, or repeated), replaces
  /// them with the given proto fields if they are under the given field mask
  /// paths. Fields that match the mask but aren't populated in the given
  /// configuration are cleared. This is an implicitly idempotent API.
  ///
  /// Returns an empty FileSet proto with only the name and ID fields populated.
  ///
  /// An error will be reported in the following cases:
  /// - If the file set does not exist.
  /// - If the parent invocation is finalized.
  /// - If no field mask was given.
  /// - If a given field mask path is not valid.
  func updateFileSet(request: Google_Devtools_Resultstore_V2_UpdateFileSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_FileSet>
  /// Applies a merge update to the file set identified by the given proto's
  /// name. For primitive and message fields, updates them with the ones in the
  /// given proto if they are covered under the field mask paths. For repeated
  /// fields, merges to them with the given ones if they are covered under the
  /// field mask paths. This is not an implicitly idempotent API, so a request
  /// id is required to make it idempotent.
  ///
  /// Returns an empty FileSet proto with only the name and ID fields populated.
  ///
  ///
  /// An error will be reported in the following cases:
  /// - If the file set does not exist.
  /// - If the parent invocation is finalized.
  /// - If a given field mask path is not valid.
  /// - If no field mask was given.
  func mergeFileSet(request: Google_Devtools_Resultstore_V2_MergeFileSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_FileSet>
  /// This is the RPC used for batch upload. It supports uploading multiple
  /// resources for an invocation in a transaction safe manner.
  ///
  /// To use this RPC, the CreateInvocationRequest must have been provided a
  /// resume_token.
  ///
  /// Combining batch upload with normal upload on a single Invocation is not
  /// supported. If an Invocation is created with a resume_token, all further
  /// calls must be through UploadBatch. If an Invocation is created without
  /// resume_token normal upload, all further upload calls must be through normal
  /// upload RPCs.
  func uploadBatch(request: Google_Devtools_Resultstore_V2_UploadBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_UploadBatchResponse>
  /// Provides a way to read the metadata for an invocation.
  /// The UploadMetadata could still be retrieved by this RPC even the Invocation
  /// has been finalized.
  /// This API requires setting a response FieldMask via 'fields' URL query
  /// parameter or X-Goog-FieldMask HTTP/gRPC header.
  ///
  /// An error will be reported in the following case:
  /// - If the invocation does not exist.
  /// - If no field mask was given.
  func getInvocationUploadMetadata(request: Google_Devtools_Resultstore_V2_GetInvocationUploadMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Resultstore_V2_UploadMetadata>
}

extension Google_Devtools_Resultstore_V2_ResultStoreUploadProvider {
  public var serviceName: Substring { return "google.devtools.resultstore.v2.ResultStoreUpload" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateInvocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createInvocation(request: request, context: context)
        }
      }

    case "UpdateInvocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateInvocation(request: request, context: context)
        }
      }

    case "MergeInvocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeInvocation(request: request, context: context)
        }
      }

    case "TouchInvocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.touchInvocation(request: request, context: context)
        }
      }

    case "FinalizeInvocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.finalizeInvocation(request: request, context: context)
        }
      }

    case "DeleteInvocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInvocation(request: request, context: context)
        }
      }

    case "CreateTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createTarget(request: request, context: context)
        }
      }

    case "UpdateTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateTarget(request: request, context: context)
        }
      }

    case "MergeTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeTarget(request: request, context: context)
        }
      }

    case "FinalizeTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.finalizeTarget(request: request, context: context)
        }
      }

    case "CreateConfiguredTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createConfiguredTarget(request: request, context: context)
        }
      }

    case "UpdateConfiguredTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateConfiguredTarget(request: request, context: context)
        }
      }

    case "MergeConfiguredTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeConfiguredTarget(request: request, context: context)
        }
      }

    case "FinalizeConfiguredTarget":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.finalizeConfiguredTarget(request: request, context: context)
        }
      }

    case "CreateAction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAction(request: request, context: context)
        }
      }

    case "UpdateAction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAction(request: request, context: context)
        }
      }

    case "MergeAction":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeAction(request: request, context: context)
        }
      }

    case "CreateConfiguration":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createConfiguration(request: request, context: context)
        }
      }

    case "UpdateConfiguration":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateConfiguration(request: request, context: context)
        }
      }

    case "CreateFileSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createFileSet(request: request, context: context)
        }
      }

    case "UpdateFileSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateFileSet(request: request, context: context)
        }
      }

    case "MergeFileSet":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeFileSet(request: request, context: context)
        }
      }

    case "UploadBatch":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.uploadBatch(request: request, context: context)
        }
      }

    case "GetInvocationUploadMetadata":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInvocationUploadMetadata(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

