// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/resultstore/v2/file.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The metadata for a file or an archive file entry.
public struct Google_Devtools_Resultstore_V2_File {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The identifier of the file or archive entry.
  /// User-provided, must be unique for the repeated field it is in. When an
  /// Append RPC is called with a Files field populated, if a File already exists
  /// with this ID, that File will be overwritten with the new File proto.
  public var uid: String = String()

  /// The URI of a file.
  /// This could also be the URI of an entire archive.
  /// Most log data doesn't need to be stored forever, so a ttl is suggested.
  /// Note that if you ever move or delete the file at this URI, the link from
  /// the server will be broken.
  public var uri: String = String()

  /// (Optional) The length of the file in bytes.  Allows the filesize to be
  /// shown in the UI.  Omit if file is still being written or length is
  /// not known.  This could also be the length of an entire archive.
  public var length: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _length ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_length = newValue}
  }
  /// Returns true if `length` has been explicitly set.
  public var hasLength: Bool {return self._length != nil}
  /// Clears the value of `length`. Subsequent reads from it will return its default value.
  public mutating func clearLength() {self._length = nil}

  /// (Optional) The content-type (aka MIME-type) of the file.  This is sent to
  /// the web browser so it knows how to handle the file. (e.g. text/plain,
  /// image/jpeg, text/html, etc). For zip archives, use "application/zip".
  public var contentType: String = String()

  /// (Optional) If the above path, length, and content_type are referring to an
  /// archive, and you wish to refer to a particular entry within that archive,
  /// put the particular archive entry data here.
  public var archiveEntry: Google_Devtools_Resultstore_V2_ArchiveEntry {
    get {return _archiveEntry ?? Google_Devtools_Resultstore_V2_ArchiveEntry()}
    set {_archiveEntry = newValue}
  }
  /// Returns true if `archiveEntry` has been explicitly set.
  public var hasArchiveEntry: Bool {return self._archiveEntry != nil}
  /// Clears the value of `archiveEntry`. Subsequent reads from it will return its default value.
  public mutating func clearArchiveEntry() {self._archiveEntry = nil}

  /// (Optional) A url to a content display app/site for this file or archive
  /// entry.
  public var contentViewer: String = String()

  /// (Optional) Whether to hide this file or archive entry in the UI.  Defaults
  /// to false. A checkbox lets users see hidden files, but they're hidden by
  /// default.
  public var hidden: Bool = false

  /// (Optional) A short description of what this file or archive entry
  /// contains. This description should help someone viewing the list of these
  /// files to understand the purpose of this file and what they would want to
  /// view it for.
  public var description_p: String = String()

  /// (Optional) digest of this file in hexadecimal-like string if known.
  public var digest: String = String()

  /// (Optional) The algorithm corresponding to the digest if known.
  public var hashType: Google_Devtools_Resultstore_V2_File.HashType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// If known, the hash function used to compute this digest.
  public enum HashType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown
    case unspecified // = 0

    /// MD5
    case md5 // = 1

    /// SHA-1
    case sha1 // = 2

    /// SHA-256
    case sha256 // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .md5
      case 2: self = .sha1
      case 3: self = .sha256
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .md5: return 1
      case .sha1: return 2
      case .sha256: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _length: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _archiveEntry: Google_Devtools_Resultstore_V2_ArchiveEntry? = nil
}

#if swift(>=4.2)

extension Google_Devtools_Resultstore_V2_File.HashType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Resultstore_V2_File.HashType] = [
    .unspecified,
    .md5,
    .sha1,
    .sha256,
  ]
}

#endif  // swift(>=4.2)

/// Information specific to an entry in an archive.
public struct Google_Devtools_Resultstore_V2_ArchiveEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The relative path of the entry within the archive.
  public var path: String = String()

  /// (Optional) The uncompressed length of the archive entry in bytes.  Allows
  /// the entry size to be shown in the UI.  Omit if the length is not known.
  public var length: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _length ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_length = newValue}
  }
  /// Returns true if `length` has been explicitly set.
  public var hasLength: Bool {return self._length != nil}
  /// Clears the value of `length`. Subsequent reads from it will return its default value.
  public mutating func clearLength() {self._length = nil}

  /// (Optional) The content-type (aka MIME-type) of the archive entry. (e.g.
  /// text/plain, image/jpeg, text/html, etc). This is sent to the web browser
  /// so it knows how to handle the entry.
  public var contentType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _length: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.resultstore.v2"

extension Google_Devtools_Resultstore_V2_File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".File"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "uri"),
    3: .same(proto: "length"),
    4: .standard(proto: "content_type"),
    5: .standard(proto: "archive_entry"),
    6: .standard(proto: "content_viewer"),
    7: .same(proto: "hidden"),
    8: .same(proto: "description"),
    9: .same(proto: "digest"),
    10: .standard(proto: "hash_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._length) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contentType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._archiveEntry) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.contentViewer) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.hidden) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.digest) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.hashType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if let v = self._length {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 4)
    }
    if let v = self._archiveEntry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.contentViewer.isEmpty {
      try visitor.visitSingularStringField(value: self.contentViewer, fieldNumber: 6)
    }
    if self.hidden != false {
      try visitor.visitSingularBoolField(value: self.hidden, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if !self.digest.isEmpty {
      try visitor.visitSingularStringField(value: self.digest, fieldNumber: 9)
    }
    if self.hashType != .unspecified {
      try visitor.visitSingularEnumField(value: self.hashType, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_File, rhs: Google_Devtools_Resultstore_V2_File) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs._length != rhs._length {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs._archiveEntry != rhs._archiveEntry {return false}
    if lhs.contentViewer != rhs.contentViewer {return false}
    if lhs.hidden != rhs.hidden {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.digest != rhs.digest {return false}
    if lhs.hashType != rhs.hashType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_File.HashType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HASH_TYPE_UNSPECIFIED"),
    1: .same(proto: "MD5"),
    2: .same(proto: "SHA1"),
    3: .same(proto: "SHA256"),
  ]
}

extension Google_Devtools_Resultstore_V2_ArchiveEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArchiveEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "length"),
    3: .standard(proto: "content_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._length) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contentType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if let v = self._length {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_ArchiveEntry, rhs: Google_Devtools_Resultstore_V2_ArchiveEntry) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._length != rhs._length {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
