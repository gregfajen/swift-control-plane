// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/resultstore/v2/configuration.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a configuration within an Invocation associated with one or more
/// ConfiguredTargets. It captures the environment and other settings that
/// were used.
public struct Google_Devtools_Resultstore_V2_Configuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The format of this Configuration resource name must be:
  /// invocations/${INVOCATION_ID}/configs/${url_encode(CONFIG_ID)}
  /// The configuration ID of "default" should be preferred for the default
  /// configuration in a single-config invocation.
  public var name: String = String()

  /// The resource ID components that identify the Configuration. They must match
  /// the resource name after proper encoding.
  public var id: Google_Devtools_Resultstore_V2_Configuration.Id {
    get {return _id ?? Google_Devtools_Resultstore_V2_Configuration.Id()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  /// The aggregate status for this configuration.
  public var statusAttributes: Google_Devtools_Resultstore_V2_StatusAttributes {
    get {return _statusAttributes ?? Google_Devtools_Resultstore_V2_StatusAttributes()}
    set {_statusAttributes = newValue}
  }
  /// Returns true if `statusAttributes` has been explicitly set.
  public var hasStatusAttributes: Bool {return self._statusAttributes != nil}
  /// Clears the value of `statusAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearStatusAttributes() {self._statusAttributes = nil}

  /// Attributes that apply only to this configuration.
  public var configurationAttributes: Google_Devtools_Resultstore_V2_ConfigurationAttributes {
    get {return _configurationAttributes ?? Google_Devtools_Resultstore_V2_ConfigurationAttributes()}
    set {_configurationAttributes = newValue}
  }
  /// Returns true if `configurationAttributes` has been explicitly set.
  public var hasConfigurationAttributes: Bool {return self._configurationAttributes != nil}
  /// Clears the value of `configurationAttributes`. Subsequent reads from it will return its default value.
  public mutating func clearConfigurationAttributes() {self._configurationAttributes = nil}

  /// Arbitrary name-value pairs.
  /// This is implemented as a multi-map. Multiple properties are allowed with
  /// the same key. Properties will be returned in lexicographical order by key.
  public var properties: [Google_Devtools_Resultstore_V2_Property] = []

  /// A human-readable name for Configuration.
  /// It is recommended that this name be unique.
  /// If omitted, the configuration_id should be used as display_name instead.
  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The resource ID components that identify the Configuration.
  public struct Id {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The Invocation ID.
    public var invocationID: String = String()

    /// The Configuration ID.
    public var configurationID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _id: Google_Devtools_Resultstore_V2_Configuration.Id? = nil
  fileprivate var _statusAttributes: Google_Devtools_Resultstore_V2_StatusAttributes? = nil
  fileprivate var _configurationAttributes: Google_Devtools_Resultstore_V2_ConfigurationAttributes? = nil
}

/// Attributes that apply only to the configuration.
public struct Google_Devtools_Resultstore_V2_ConfigurationAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of cpu. (e.g. "x86", "powerpc")
  public var cpu: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.resultstore.v2"

extension Google_Devtools_Resultstore_V2_Configuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Configuration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .standard(proto: "status_attributes"),
    5: .standard(proto: "configuration_attributes"),
    6: .same(proto: "properties"),
    8: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._statusAttributes) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._configurationAttributes) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.properties) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._statusAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._configurationAttributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.properties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.properties, fieldNumber: 6)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_Configuration, rhs: Google_Devtools_Resultstore_V2_Configuration) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._id != rhs._id {return false}
    if lhs._statusAttributes != rhs._statusAttributes {return false}
    if lhs._configurationAttributes != rhs._configurationAttributes {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_Configuration.Id: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Resultstore_V2_Configuration.protoMessageName + ".Id"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "invocation_id"),
    2: .standard(proto: "configuration_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.invocationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.configurationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.invocationID.isEmpty {
      try visitor.visitSingularStringField(value: self.invocationID, fieldNumber: 1)
    }
    if !self.configurationID.isEmpty {
      try visitor.visitSingularStringField(value: self.configurationID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_Configuration.Id, rhs: Google_Devtools_Resultstore_V2_Configuration.Id) -> Bool {
    if lhs.invocationID != rhs.invocationID {return false}
    if lhs.configurationID != rhs.configurationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_ConfigurationAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigurationAttributes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cpu"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cpu) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cpu.isEmpty {
      try visitor.visitSingularStringField(value: self.cpu, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_ConfigurationAttributes, rhs: Google_Devtools_Resultstore_V2_ConfigurationAttributes) -> Bool {
    if lhs.cpu != rhs.cpu {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
