// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/resultstore/v2/file_processing_error.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Errors in file post-processing are categorized using this enum.
public enum Google_Devtools_Resultstore_V2_FileProcessingErrorType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Type unspecified or not listed here.
  case unspecified // = 0

  /// A read error occurred trying to read the file.
  case genericReadError // = 1

  /// There was an error trying to parse the file.
  case genericParseError // = 2

  /// File is exceeds size limit.
  case fileTooLarge // = 3

  /// The result of parsing the file exceeded size limit.
  case outputTooLarge // = 4

  /// Read access to the file was denied by file system.
  case accessDenied // = 5

  /// Deadline exceeded trying to read the file.
  case deadlineExceeded // = 6

  /// File not found.
  case notFound // = 7

  /// File is empty but was expected to have content.
  case fileEmpty // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .genericReadError
    case 2: self = .genericParseError
    case 3: self = .fileTooLarge
    case 4: self = .outputTooLarge
    case 5: self = .accessDenied
    case 6: self = .deadlineExceeded
    case 7: self = .notFound
    case 8: self = .fileEmpty
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .genericReadError: return 1
    case .genericParseError: return 2
    case .fileTooLarge: return 3
    case .outputTooLarge: return 4
    case .accessDenied: return 5
    case .deadlineExceeded: return 6
    case .notFound: return 7
    case .fileEmpty: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Devtools_Resultstore_V2_FileProcessingErrorType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Resultstore_V2_FileProcessingErrorType] = [
    .unspecified,
    .genericReadError,
    .genericParseError,
    .fileTooLarge,
    .outputTooLarge,
    .accessDenied,
    .deadlineExceeded,
    .notFound,
    .fileEmpty,
  ]
}

#endif  // swift(>=4.2)

/// Stores errors reading or parsing a file during post-processing.
public struct Google_Devtools_Resultstore_V2_FileProcessingErrors {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The uid of the File being read or parsed.
  public var fileUid: String = String()

  /// What went wrong.
  public var fileProcessingErrors: [Google_Devtools_Resultstore_V2_FileProcessingError] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Stores an error reading or parsing a file during post-processing.
public struct Google_Devtools_Resultstore_V2_FileProcessingError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of error that occurred.
  public var type: Google_Devtools_Resultstore_V2_FileProcessingErrorType = .unspecified

  /// Error message describing the problem.
  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.resultstore.v2"

extension Google_Devtools_Resultstore_V2_FileProcessingErrorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED"),
    1: .same(proto: "GENERIC_READ_ERROR"),
    2: .same(proto: "GENERIC_PARSE_ERROR"),
    3: .same(proto: "FILE_TOO_LARGE"),
    4: .same(proto: "OUTPUT_TOO_LARGE"),
    5: .same(proto: "ACCESS_DENIED"),
    6: .same(proto: "DEADLINE_EXCEEDED"),
    7: .same(proto: "NOT_FOUND"),
    8: .same(proto: "FILE_EMPTY"),
  ]
}

extension Google_Devtools_Resultstore_V2_FileProcessingErrors: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileProcessingErrors"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_uid"),
    3: .standard(proto: "file_processing_errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fileUid) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.fileProcessingErrors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileUid.isEmpty {
      try visitor.visitSingularStringField(value: self.fileUid, fieldNumber: 1)
    }
    if !self.fileProcessingErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileProcessingErrors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_FileProcessingErrors, rhs: Google_Devtools_Resultstore_V2_FileProcessingErrors) -> Bool {
    if lhs.fileUid != rhs.fileUid {return false}
    if lhs.fileProcessingErrors != rhs.fileProcessingErrors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Resultstore_V2_FileProcessingError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileProcessingError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Resultstore_V2_FileProcessingError, rhs: Google_Devtools_Resultstore_V2_FileProcessingError) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
