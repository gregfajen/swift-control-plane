//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/containeranalysis/v1beta1/containeranalysis.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1Client, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1ClientProtocol: GRPCClient {
  func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

  func getScanConfig(
    _ request: Google_Devtools_Containeranalysis_V1beta1_GetScanConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Containeranalysis_V1beta1_GetScanConfigRequest, Google_Devtools_Containeranalysis_V1beta1_ScanConfig>

  func listScanConfigs(
    _ request: Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsRequest, Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsResponse>

  func updateScanConfig(
    _ request: Google_Devtools_Containeranalysis_V1beta1_UpdateScanConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Containeranalysis_V1beta1_UpdateScanConfigRequest, Google_Devtools_Containeranalysis_V1beta1_ScanConfig>

}

extension Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1ClientProtocol {

  /// Sets the access control policy on the specified note or occurrence.
  /// Requires `containeranalysis.notes.setIamPolicy` or
  /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
  /// a note or an occurrence, respectively.
  ///
  /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
  /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
  /// occurrences.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1/SetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the access control policy for a note or an occurrence resource.
  /// Requires `containeranalysis.notes.setIamPolicy` or
  /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
  /// a note or occurrence, respectively.
  ///
  /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
  /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
  /// occurrences.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1/GetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the permissions that a caller has on the specified note or
  /// occurrence. Requires list permission on the project (for example,
  /// `containeranalysis.notes.list`).
  ///
  /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
  /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
  /// occurrences.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1/TestIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the specified scan configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetScanConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getScanConfig(
    _ request: Google_Devtools_Containeranalysis_V1beta1_GetScanConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Containeranalysis_V1beta1_GetScanConfigRequest, Google_Devtools_Containeranalysis_V1beta1_ScanConfig> {
    return self.makeUnaryCall(
      path: "/google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1/GetScanConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists scan configurations for the specified project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListScanConfigs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listScanConfigs(
    _ request: Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsRequest, Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsResponse> {
    return self.makeUnaryCall(
      path: "/google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1/ListScanConfigs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the specified scan configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateScanConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateScanConfig(
    _ request: Google_Devtools_Containeranalysis_V1beta1_UpdateScanConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Containeranalysis_V1beta1_UpdateScanConfigRequest, Google_Devtools_Containeranalysis_V1beta1_ScanConfig> {
    return self.makeUnaryCall(
      path: "/google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1/UpdateScanConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1Client: Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1Provider: CallHandlerProvider {
  /// Sets the access control policy on the specified note or occurrence.
  /// Requires `containeranalysis.notes.setIamPolicy` or
  /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
  /// a note or an occurrence, respectively.
  ///
  /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
  /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
  /// occurrences.
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Gets the access control policy for a note or an occurrence resource.
  /// Requires `containeranalysis.notes.setIamPolicy` or
  /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
  /// a note or occurrence, respectively.
  ///
  /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
  /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
  /// occurrences.
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Returns the permissions that a caller has on the specified note or
  /// occurrence. Requires list permission on the project (for example,
  /// `containeranalysis.notes.list`).
  ///
  /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
  /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
  /// occurrences.
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
  /// Gets the specified scan configuration.
  func getScanConfig(request: Google_Devtools_Containeranalysis_V1beta1_GetScanConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Containeranalysis_V1beta1_ScanConfig>
  /// Lists scan configurations for the specified project.
  func listScanConfigs(request: Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Containeranalysis_V1beta1_ListScanConfigsResponse>
  /// Updates the specified scan configuration.
  func updateScanConfig(request: Google_Devtools_Containeranalysis_V1beta1_UpdateScanConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Devtools_Containeranalysis_V1beta1_ScanConfig>
}

extension Google_Devtools_Containeranalysis_V1beta1_ContainerAnalysisV1Beta1Provider {
  public var serviceName: Substring { return "google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    case "GetScanConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getScanConfig(request: request, context: context)
        }
      }

    case "ListScanConfigs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listScanConfigs(request: request, context: context)
        }
      }

    case "UpdateScanConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateScanConfig(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

