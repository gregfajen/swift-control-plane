// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/containeranalysis/v1beta1/build/build.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Note holding the version of the provider's builder and the signature of the
/// provenance message in the build details occurrence.
public struct Grafeas_V1beta1_Build_Build {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Immutable. Version of the builder which produced this build.
  public var builderVersion: String = String()

  /// Signature of the build in occurrences pointing to this build note
  /// containing build details.
  public var signature: Grafeas_V1beta1_Build_BuildSignature {
    get {return _signature ?? Grafeas_V1beta1_Build_BuildSignature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signature: Grafeas_V1beta1_Build_BuildSignature? = nil
}

/// Message encapsulating the signature of the verified build.
public struct Grafeas_V1beta1_Build_BuildSignature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Public key of the builder which can be used to verify that the related
  /// findings are valid and unchanged. If `key_type` is empty, this defaults
  /// to PEM encoded public keys.
  ///
  /// This field may be empty if `key_id` references an external key.
  ///
  /// For Cloud Build based signatures, this is a PEM encoded public
  /// key. To verify the Cloud Build signature, place the contents of
  /// this field into a file (public.pem). The signature field is base64-decoded
  /// into its binary representation in signature.bin, and the provenance bytes
  /// from `BuildDetails` are base64-decoded into a binary representation in
  /// signed.bin. OpenSSL can then verify the signature:
  /// `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
  public var publicKey: String = String()

  /// Required. Signature of the related `BuildProvenance`. In JSON, this is
  /// base-64 encoded.
  public var signature: Data = Data()

  /// An ID for the key used to sign. This could be either an ID for the key
  /// stored in `public_key` (such as the ID or fingerprint for a PGP key, or the
  /// CN for a cert), or a reference to an external key (such as a reference to a
  /// key in Cloud Key Management Service).
  public var keyID: String = String()

  /// The type of the key, either stored in `public_key` or referenced in
  /// `key_id`.
  public var keyType: Grafeas_V1beta1_Build_BuildSignature.KeyType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Public key formats.
  public enum KeyType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// `KeyType` is not set.
    case unspecified // = 0

    /// `PGP ASCII Armored` public key.
    case pgpAsciiArmored // = 1

    /// `PKIX PEM` public key.
    case pkixPem // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pgpAsciiArmored
      case 2: self = .pkixPem
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pgpAsciiArmored: return 1
      case .pkixPem: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Grafeas_V1beta1_Build_BuildSignature.KeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Grafeas_V1beta1_Build_BuildSignature.KeyType] = [
    .unspecified,
    .pgpAsciiArmored,
    .pkixPem,
  ]
}

#endif  // swift(>=4.2)

/// Details of a build occurrence.
public struct Grafeas_V1beta1_Build_Details {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The actual provenance for the build.
  public var provenance: Grafeas_V1beta1_Provenance_BuildProvenance {
    get {return _provenance ?? Grafeas_V1beta1_Provenance_BuildProvenance()}
    set {_provenance = newValue}
  }
  /// Returns true if `provenance` has been explicitly set.
  public var hasProvenance: Bool {return self._provenance != nil}
  /// Clears the value of `provenance`. Subsequent reads from it will return its default value.
  public mutating func clearProvenance() {self._provenance = nil}

  /// Serialized JSON representation of the provenance, used in generating the
  /// build signature in the corresponding build note. After verifying the
  /// signature, `provenance_bytes` can be unmarshalled and compared to the
  /// provenance to confirm that it is unchanged. A base64-encoded string
  /// representation of the provenance bytes is used for the signature in order
  /// to interoperate with openssl which expects this format for signature
  /// verification.
  ///
  /// The serialized form is captured both to avoid ambiguity in how the
  /// provenance is marshalled to json as well to prevent incompatibilities with
  /// future changes.
  public var provenanceBytes: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _provenance: Grafeas_V1beta1_Provenance_BuildProvenance? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grafeas.v1beta1.build"

extension Grafeas_V1beta1_Build_Build: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Build"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "builder_version"),
    2: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.builderVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.builderVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.builderVersion, fieldNumber: 1)
    }
    if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Build_Build, rhs: Grafeas_V1beta1_Build_Build) -> Bool {
    if lhs.builderVersion != rhs.builderVersion {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Build_BuildSignature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildSignature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "signature"),
    3: .standard(proto: "key_id"),
    4: .standard(proto: "key_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.keyType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 3)
    }
    if self.keyType != .unspecified {
      try visitor.visitSingularEnumField(value: self.keyType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Build_BuildSignature, rhs: Grafeas_V1beta1_Build_BuildSignature) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.keyType != rhs.keyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Build_BuildSignature.KeyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEY_TYPE_UNSPECIFIED"),
    1: .same(proto: "PGP_ASCII_ARMORED"),
    2: .same(proto: "PKIX_PEM"),
  ]
}

extension Grafeas_V1beta1_Build_Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Details"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provenance"),
    2: .standard(proto: "provenance_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._provenance) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.provenanceBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._provenance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.provenanceBytes.isEmpty {
      try visitor.visitSingularStringField(value: self.provenanceBytes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Build_Details, rhs: Grafeas_V1beta1_Build_Details) -> Bool {
    if lhs._provenance != rhs._provenance {return false}
    if lhs.provenanceBytes != rhs.provenanceBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
