// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/containeranalysis/v1beta1/provenance/provenance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Provenance of a build. Contains all information needed to verify the full
/// details about the build from source to completion.
public struct Grafeas_V1beta1_Provenance_BuildProvenance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Unique identifier of the build.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// ID of the project.
  public var projectID: String {
    get {return _storage._projectID}
    set {_uniqueStorage()._projectID = newValue}
  }

  /// Commands requested by the build.
  public var commands: [Grafeas_V1beta1_Provenance_Command] {
    get {return _storage._commands}
    set {_uniqueStorage()._commands = newValue}
  }

  /// Output of the build.
  public var builtArtifacts: [Grafeas_V1beta1_Provenance_Artifact] {
    get {return _storage._builtArtifacts}
    set {_uniqueStorage()._builtArtifacts = newValue}
  }

  /// Time at which the build was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Time at which execution of the build was started.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// Time at which execution of the build was finished.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  /// E-mail address of the user who initiated this build. Note that this was the
  /// user's e-mail address at the time the build was initiated; this address may
  /// not represent the same end-user for all time.
  public var creator: String {
    get {return _storage._creator}
    set {_uniqueStorage()._creator = newValue}
  }

  /// URI where any logs for this provenance were written.
  public var logsUri: String {
    get {return _storage._logsUri}
    set {_uniqueStorage()._logsUri = newValue}
  }

  /// Details of the Source input to the build.
  public var sourceProvenance: Grafeas_V1beta1_Provenance_Source {
    get {return _storage._sourceProvenance ?? Grafeas_V1beta1_Provenance_Source()}
    set {_uniqueStorage()._sourceProvenance = newValue}
  }
  /// Returns true if `sourceProvenance` has been explicitly set.
  public var hasSourceProvenance: Bool {return _storage._sourceProvenance != nil}
  /// Clears the value of `sourceProvenance`. Subsequent reads from it will return its default value.
  public mutating func clearSourceProvenance() {_uniqueStorage()._sourceProvenance = nil}

  /// Trigger identifier if the build was triggered automatically; empty if not.
  public var triggerID: String {
    get {return _storage._triggerID}
    set {_uniqueStorage()._triggerID = newValue}
  }

  /// Special options applied to this build. This is a catch-all field where
  /// build providers can enter any desired additional details.
  public var buildOptions: Dictionary<String,String> {
    get {return _storage._buildOptions}
    set {_uniqueStorage()._buildOptions = newValue}
  }

  /// Version string of the builder at the time this build was executed.
  public var builderVersion: String {
    get {return _storage._builderVersion}
    set {_uniqueStorage()._builderVersion = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Source describes the location of the source used for the build.
public struct Grafeas_V1beta1_Provenance_Source {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If provided, the input binary artifacts for the build came from this
  /// location.
  public var artifactStorageSourceUri: String = String()

  /// Hash(es) of the build source, which can be used to verify that the original
  /// source integrity was maintained in the build.
  ///
  /// The keys to this map are file paths used as build source and the values
  /// contain the hash values for those files.
  ///
  /// If the build source came in a single package such as a gzipped tarfile
  /// (.tar.gz), the FileHash will be for the single path to that file.
  public var fileHashes: Dictionary<String,Grafeas_V1beta1_Provenance_FileHashes> = [:]

  /// If provided, the source code used for the build came from this location.
  public var context: Grafeas_V1beta1_Source_SourceContext {
    get {return _context ?? Grafeas_V1beta1_Source_SourceContext()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {self._context = nil}

  /// If provided, some of the source code used for the build may be found in
  /// these locations, in the case where the source repository had multiple
  /// remotes or submodules. This list will not include the context specified in
  /// the context field.
  public var additionalContexts: [Grafeas_V1beta1_Source_SourceContext] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _context: Grafeas_V1beta1_Source_SourceContext? = nil
}

/// Container message for hashes of byte content of files, used in source
/// messages to verify integrity of source input to the build.
public struct Grafeas_V1beta1_Provenance_FileHashes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Collection of file hashes.
  public var fileHash: [Grafeas_V1beta1_Provenance_Hash] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Container message for hash values.
public struct Grafeas_V1beta1_Provenance_Hash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The type of hash that was performed.
  public var type: Grafeas_V1beta1_Provenance_Hash.HashType = .unspecified

  /// Required. The hash value.
  public var value: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies the hash algorithm.
  public enum HashType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown.
    case unspecified // = 0

    /// A SHA-256 hash.
    case sha256 // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .sha256
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .sha256: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Grafeas_V1beta1_Provenance_Hash.HashType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Grafeas_V1beta1_Provenance_Hash.HashType] = [
    .unspecified,
    .sha256,
  ]
}

#endif  // swift(>=4.2)

/// Command describes a step performed as part of the build pipeline.
public struct Grafeas_V1beta1_Provenance_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the command, as presented on the command line, or if the
  /// command is packaged as a Docker container, as presented to `docker pull`.
  public var name: String = String()

  /// Environment variables set before running this command.
  public var env: [String] = []

  /// Command-line arguments used when executing this command.
  public var args: [String] = []

  /// Working directory (relative to project source root) used when running this
  /// command.
  public var dir: String = String()

  /// Optional unique identifier for this command, used in wait_for to reference
  /// this command as a dependency.
  public var id: String = String()

  /// The ID(s) of the command(s) that this command depends on.
  public var waitFor: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Artifact describes a build product.
public struct Grafeas_V1beta1_Provenance_Artifact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
  /// container.
  public var checksum: String = String()

  /// Artifact ID, if any; for container images, this will be a URL by digest
  /// like `gcr.io/projectID/imagename@sha256:123456`.
  public var id: String = String()

  /// Related artifact names. This may be the path to a binary or jar file, or in
  /// the case of a container build, the name used to push the container image to
  /// Google Container Registry, as presented to `docker push`. Note that a
  /// single Artifact ID can have multiple names, for example if two tags are
  /// applied to one image.
  public var names: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grafeas.v1beta1.provenance"

extension Grafeas_V1beta1_Provenance_BuildProvenance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildProvenance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "project_id"),
    3: .same(proto: "commands"),
    4: .standard(proto: "built_artifacts"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "start_time"),
    7: .standard(proto: "end_time"),
    8: .same(proto: "creator"),
    9: .standard(proto: "logs_uri"),
    10: .standard(proto: "source_provenance"),
    11: .standard(proto: "trigger_id"),
    12: .standard(proto: "build_options"),
    13: .standard(proto: "builder_version"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _projectID: String = String()
    var _commands: [Grafeas_V1beta1_Provenance_Command] = []
    var _builtArtifacts: [Grafeas_V1beta1_Provenance_Artifact] = []
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _creator: String = String()
    var _logsUri: String = String()
    var _sourceProvenance: Grafeas_V1beta1_Provenance_Source? = nil
    var _triggerID: String = String()
    var _buildOptions: Dictionary<String,String> = [:]
    var _builderVersion: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _projectID = source._projectID
      _commands = source._commands
      _builtArtifacts = source._builtArtifacts
      _createTime = source._createTime
      _startTime = source._startTime
      _endTime = source._endTime
      _creator = source._creator
      _logsUri = source._logsUri
      _sourceProvenance = source._sourceProvenance
      _triggerID = source._triggerID
      _buildOptions = source._buildOptions
      _builderVersion = source._builderVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._projectID) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._commands) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._builtArtifacts) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._endTime) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._creator) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._logsUri) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._sourceProvenance) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._triggerID) }()
        case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._buildOptions) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._builderVersion) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._projectID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectID, fieldNumber: 2)
      }
      if !_storage._commands.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commands, fieldNumber: 3)
      }
      if !_storage._builtArtifacts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._builtArtifacts, fieldNumber: 4)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._creator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creator, fieldNumber: 8)
      }
      if !_storage._logsUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logsUri, fieldNumber: 9)
      }
      if let v = _storage._sourceProvenance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._triggerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._triggerID, fieldNumber: 11)
      }
      if !_storage._buildOptions.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._buildOptions, fieldNumber: 12)
      }
      if !_storage._builderVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._builderVersion, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Provenance_BuildProvenance, rhs: Grafeas_V1beta1_Provenance_BuildProvenance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._projectID != rhs_storage._projectID {return false}
        if _storage._commands != rhs_storage._commands {return false}
        if _storage._builtArtifacts != rhs_storage._builtArtifacts {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._logsUri != rhs_storage._logsUri {return false}
        if _storage._sourceProvenance != rhs_storage._sourceProvenance {return false}
        if _storage._triggerID != rhs_storage._triggerID {return false}
        if _storage._buildOptions != rhs_storage._buildOptions {return false}
        if _storage._builderVersion != rhs_storage._builderVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Provenance_Source: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Source"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "artifact_storage_source_uri"),
    2: .standard(proto: "file_hashes"),
    3: .same(proto: "context"),
    4: .standard(proto: "additional_contexts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.artifactStorageSourceUri) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grafeas_V1beta1_Provenance_FileHashes>.self, value: &self.fileHashes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._context) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.additionalContexts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.artifactStorageSourceUri.isEmpty {
      try visitor.visitSingularStringField(value: self.artifactStorageSourceUri, fieldNumber: 1)
    }
    if !self.fileHashes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grafeas_V1beta1_Provenance_FileHashes>.self, value: self.fileHashes, fieldNumber: 2)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.additionalContexts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalContexts, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Provenance_Source, rhs: Grafeas_V1beta1_Provenance_Source) -> Bool {
    if lhs.artifactStorageSourceUri != rhs.artifactStorageSourceUri {return false}
    if lhs.fileHashes != rhs.fileHashes {return false}
    if lhs._context != rhs._context {return false}
    if lhs.additionalContexts != rhs.additionalContexts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Provenance_FileHashes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileHashes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fileHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileHash.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileHash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Provenance_FileHashes, rhs: Grafeas_V1beta1_Provenance_FileHashes) -> Bool {
    if lhs.fileHash != rhs.fileHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Provenance_Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Hash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Provenance_Hash, rhs: Grafeas_V1beta1_Provenance_Hash) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Provenance_Hash.HashType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HASH_TYPE_UNSPECIFIED"),
    1: .same(proto: "SHA256"),
  ]
}

extension Grafeas_V1beta1_Provenance_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Command"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "env"),
    3: .same(proto: "args"),
    4: .same(proto: "dir"),
    5: .same(proto: "id"),
    6: .standard(proto: "wait_for"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.env) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dir) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.waitFor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.env.isEmpty {
      try visitor.visitRepeatedStringField(value: self.env, fieldNumber: 2)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 3)
    }
    if !self.dir.isEmpty {
      try visitor.visitSingularStringField(value: self.dir, fieldNumber: 4)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 5)
    }
    if !self.waitFor.isEmpty {
      try visitor.visitRepeatedStringField(value: self.waitFor, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Provenance_Command, rhs: Grafeas_V1beta1_Provenance_Command) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.env != rhs.env {return false}
    if lhs.args != rhs.args {return false}
    if lhs.dir != rhs.dir {return false}
    if lhs.id != rhs.id {return false}
    if lhs.waitFor != rhs.waitFor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1beta1_Provenance_Artifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Artifact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checksum"),
    2: .same(proto: "id"),
    3: .same(proto: "names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.checksum) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.names) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checksum.isEmpty {
      try visitor.visitSingularStringField(value: self.checksum, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.names.isEmpty {
      try visitor.visitRepeatedStringField(value: self.names, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1beta1_Provenance_Artifact, rhs: Grafeas_V1beta1_Provenance_Artifact) -> Bool {
    if lhs.checksum != rhs.checksum {return false}
    if lhs.id != rhs.id {return false}
    if lhs.names != rhs.names {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
