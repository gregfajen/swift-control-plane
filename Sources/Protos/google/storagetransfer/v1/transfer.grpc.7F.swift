//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/storagetransfer/v1/transfer.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Storagetransfer_V1_StorageTransferServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Storagetransfer_V1_StorageTransferServiceClientProtocol: GRPCClient {
  func getGoogleServiceAccount(
    _ request: Google_Storagetransfer_V1_GetGoogleServiceAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_GetGoogleServiceAccountRequest, Google_Storagetransfer_V1_GoogleServiceAccount>

  func createTransferJob(
    _ request: Google_Storagetransfer_V1_CreateTransferJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_CreateTransferJobRequest, Google_Storagetransfer_V1_TransferJob>

  func updateTransferJob(
    _ request: Google_Storagetransfer_V1_UpdateTransferJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_UpdateTransferJobRequest, Google_Storagetransfer_V1_TransferJob>

  func getTransferJob(
    _ request: Google_Storagetransfer_V1_GetTransferJobRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_GetTransferJobRequest, Google_Storagetransfer_V1_TransferJob>

  func listTransferJobs(
    _ request: Google_Storagetransfer_V1_ListTransferJobsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_ListTransferJobsRequest, Google_Storagetransfer_V1_ListTransferJobsResponse>

  func pauseTransferOperation(
    _ request: Google_Storagetransfer_V1_PauseTransferOperationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_PauseTransferOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func resumeTransferOperation(
    _ request: Google_Storagetransfer_V1_ResumeTransferOperationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storagetransfer_V1_ResumeTransferOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>

}

extension Google_Storagetransfer_V1_StorageTransferServiceClientProtocol {

  /// Returns the Google service account that is used by Storage Transfer
  /// Service to access buckets in the project where transfers
  /// run or in other projects. Each Google service account is associated
  /// with one Google Cloud Platform Console project. Users
  /// should add this service account to the Google Cloud Storage bucket
  /// ACLs to grant access to Storage Transfer Service. This service
  /// account is created and owned by Storage Transfer Service and can
  /// only be used by Storage Transfer Service.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGoogleServiceAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getGoogleServiceAccount(
    _ request: Google_Storagetransfer_V1_GetGoogleServiceAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_GetGoogleServiceAccountRequest, Google_Storagetransfer_V1_GoogleServiceAccount> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/GetGoogleServiceAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a transfer job that runs periodically.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTransferJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTransferJob(
    _ request: Google_Storagetransfer_V1_CreateTransferJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_CreateTransferJobRequest, Google_Storagetransfer_V1_TransferJob> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/CreateTransferJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a transfer job. Updating a job's transfer spec does not affect
  /// transfer operations that are running already. Updating the scheduling
  /// of a job is not allowed.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTransferJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTransferJob(
    _ request: Google_Storagetransfer_V1_UpdateTransferJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_UpdateTransferJobRequest, Google_Storagetransfer_V1_TransferJob> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/UpdateTransferJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a transfer job.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransferJob.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTransferJob(
    _ request: Google_Storagetransfer_V1_GetTransferJobRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_GetTransferJobRequest, Google_Storagetransfer_V1_TransferJob> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/GetTransferJob",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists transfer jobs.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTransferJobs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTransferJobs(
    _ request: Google_Storagetransfer_V1_ListTransferJobsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_ListTransferJobsRequest, Google_Storagetransfer_V1_ListTransferJobsResponse> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/ListTransferJobs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Pauses a transfer operation.
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseTransferOperation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pauseTransferOperation(
    _ request: Google_Storagetransfer_V1_PauseTransferOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_PauseTransferOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/PauseTransferOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Resumes a transfer operation that is paused.
  ///
  /// - Parameters:
  ///   - request: Request to send to ResumeTransferOperation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resumeTransferOperation(
    _ request: Google_Storagetransfer_V1_ResumeTransferOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storagetransfer_V1_ResumeTransferOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storagetransfer.v1.StorageTransferService/ResumeTransferOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Storagetransfer_V1_StorageTransferServiceClient: Google_Storagetransfer_V1_StorageTransferServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.storagetransfer.v1.StorageTransferService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Storagetransfer_V1_StorageTransferServiceProvider: CallHandlerProvider {
  /// Returns the Google service account that is used by Storage Transfer
  /// Service to access buckets in the project where transfers
  /// run or in other projects. Each Google service account is associated
  /// with one Google Cloud Platform Console project. Users
  /// should add this service account to the Google Cloud Storage bucket
  /// ACLs to grant access to Storage Transfer Service. This service
  /// account is created and owned by Storage Transfer Service and can
  /// only be used by Storage Transfer Service.
  func getGoogleServiceAccount(request: Google_Storagetransfer_V1_GetGoogleServiceAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storagetransfer_V1_GoogleServiceAccount>
  /// Creates a transfer job that runs periodically.
  func createTransferJob(request: Google_Storagetransfer_V1_CreateTransferJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storagetransfer_V1_TransferJob>
  /// Updates a transfer job. Updating a job's transfer spec does not affect
  /// transfer operations that are running already. Updating the scheduling
  /// of a job is not allowed.
  func updateTransferJob(request: Google_Storagetransfer_V1_UpdateTransferJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storagetransfer_V1_TransferJob>
  /// Gets a transfer job.
  func getTransferJob(request: Google_Storagetransfer_V1_GetTransferJobRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storagetransfer_V1_TransferJob>
  /// Lists transfer jobs.
  func listTransferJobs(request: Google_Storagetransfer_V1_ListTransferJobsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storagetransfer_V1_ListTransferJobsResponse>
  /// Pauses a transfer operation.
  func pauseTransferOperation(request: Google_Storagetransfer_V1_PauseTransferOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Resumes a transfer operation that is paused.
  func resumeTransferOperation(request: Google_Storagetransfer_V1_ResumeTransferOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Storagetransfer_V1_StorageTransferServiceProvider {
  public var serviceName: Substring { return "google.storagetransfer.v1.StorageTransferService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetGoogleServiceAccount":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getGoogleServiceAccount(request: request, context: context)
        }
      }

    case "CreateTransferJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createTransferJob(request: request, context: context)
        }
      }

    case "UpdateTransferJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateTransferJob(request: request, context: context)
        }
      }

    case "GetTransferJob":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTransferJob(request: request, context: context)
        }
      }

    case "ListTransferJobs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTransferJobs(request: request, context: context)
        }
      }

    case "PauseTransferOperation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pauseTransferOperation(request: request, context: context)
        }
      }

    case "ResumeTransferOperation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.resumeTransferOperation(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

