// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/storage/v1/storage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for DeleteBucketAccessControl.
public struct Google_Storage_V1_DeleteBucketAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetBucketAccessControl.
public struct Google_Storage_V1_GetBucketAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for InsertBucketAccessControl.
public struct Google_Storage_V1_InsertBucketAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Properties of the new bucket access control being inserted.
  public var bucketAccessControl: Google_Storage_V1_BucketAccessControl {
    get {return _bucketAccessControl ?? Google_Storage_V1_BucketAccessControl()}
    set {_bucketAccessControl = newValue}
  }
  /// Returns true if `bucketAccessControl` has been explicitly set.
  public var hasBucketAccessControl: Bool {return self._bucketAccessControl != nil}
  /// Clears the value of `bucketAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearBucketAccessControl() {self._bucketAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bucketAccessControl: Google_Storage_V1_BucketAccessControl? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for ListBucketAccessControl.
public struct Google_Storage_V1_ListBucketAccessControlsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request for PatchBucketAccessControl.
public struct Google_Storage_V1_PatchBucketAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// The BucketAccessControl for updating.
  public var bucketAccessControl: Google_Storage_V1_BucketAccessControl {
    get {return _bucketAccessControl ?? Google_Storage_V1_BucketAccessControl()}
    set {_bucketAccessControl = newValue}
  }
  /// Returns true if `bucketAccessControl` has been explicitly set.
  public var hasBucketAccessControl: Bool {return self._bucketAccessControl != nil}
  /// Clears the value of `bucketAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearBucketAccessControl() {self._bucketAccessControl = nil}

  /// List of fields to be updated.
  ///
  /// To specify ALL fields, equivalent to the JSON API's "update" function,
  /// specify a single field with the value `*`.
  ///
  ///
  /// Not specifying any fields is an error.
  /// Not specifying a field while setting that field to a non-default value is
  /// an error.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bucketAccessControl: Google_Storage_V1_BucketAccessControl? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request for UpdateBucketAccessControl.
public struct Google_Storage_V1_UpdateBucketAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// The BucketAccessControl for updating.
  public var bucketAccessControl: Google_Storage_V1_BucketAccessControl {
    get {return _bucketAccessControl ?? Google_Storage_V1_BucketAccessControl()}
    set {_bucketAccessControl = newValue}
  }
  /// Returns true if `bucketAccessControl` has been explicitly set.
  public var hasBucketAccessControl: Bool {return self._bucketAccessControl != nil}
  /// Clears the value of `bucketAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearBucketAccessControl() {self._bucketAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bucketAccessControl: Google_Storage_V1_BucketAccessControl? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for DeleteBucket.
public struct Google_Storage_V1_DeleteBucketRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// If set, only deletes the bucket if its metageneration matches this value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// If set, only deletes the bucket if its metageneration does not match this
  /// value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetBucket.
public struct Google_Storage_V1_GetBucketRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Makes the return of the bucket metadata conditional on whether the bucket's
  /// current metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the return of the bucket metadata conditional on whether the bucket's
  /// current metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// Set of properties to return. Defaults to `NO_ACL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for InsertBucket.
public struct Google_Storage_V1_InsertBucketRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Apply a predefined set of access controls to this bucket.
  public var predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedBucketAcl = .unspecified

  /// Apply a predefined set of default object access controls to this bucket.
  public var predefinedDefaultObjectAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified

  /// Required. A valid API project identifier.
  public var project: String = String()

  /// Set of properties to return. Defaults to `NO_ACL`, unless the
  /// bucket resource specifies `acl` or `defaultObjectAcl`
  /// properties, when it defaults to `FULL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// Properties of the new bucket being inserted, including its name.
  public var bucket: Google_Storage_V1_Bucket {
    get {return _bucket ?? Google_Storage_V1_Bucket()}
    set {_bucket = newValue}
  }
  /// Returns true if `bucket` has been explicitly set.
  public var hasBucket: Bool {return self._bucket != nil}
  /// Clears the value of `bucket`. Subsequent reads from it will return its default value.
  public mutating func clearBucket() {self._bucket = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bucket: Google_Storage_V1_Bucket? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for ListChannels.
public struct Google_Storage_V1_ListChannelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for ListBuckets.
public struct Google_Storage_V1_ListBucketsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maximum number of buckets to return in a single response. The service will
  /// use this parameter or 1,000 items, whichever is smaller.
  public var maxResults: Int32 = 0

  /// A previously-returned page token representing part of the larger set of
  /// results to view.
  public var pageToken: String = String()

  /// Filter results to buckets whose names begin with this prefix.
  public var prefix: String = String()

  /// Required. A valid API project identifier.
  public var project: String = String()

  /// Set of properties to return. Defaults to `NO_ACL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for LockRetentionPolicy.
public struct Google_Storage_V1_LockRetentionPolicyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Makes the operation conditional on whether bucket's current metageneration
  /// matches the given value. Must be positive.
  public var ifMetagenerationMatch: Int64 = 0

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request for PatchBucket method.
public struct Google_Storage_V1_PatchBucketRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Makes the return of the bucket metadata conditional on whether the bucket's
  /// current metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the return of the bucket metadata conditional on whether the bucket's
  /// current metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// Apply a predefined set of access controls to this bucket.
  public var predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedBucketAcl = .unspecified

  /// Apply a predefined set of default object access controls to this bucket.
  public var predefinedDefaultObjectAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified

  /// Set of properties to return. Defaults to `FULL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// The Bucket metadata for updating.
  public var metadata: Google_Storage_V1_Bucket {
    get {return _metadata ?? Google_Storage_V1_Bucket()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// List of fields to be updated.
  ///
  /// To specify ALL fields, equivalent to the JSON API's "update" function,
  /// specify a single field with the value `*`. Note: not recommended. If a new
  /// field is introduced at a later time, an older client updating with the `*`
  /// may accidentally reset the new field's value.
  ///
  /// Not specifying any fields is an error.
  /// Not specifying a field while setting that field to a non-default value is
  /// an error.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _metadata: Google_Storage_V1_Bucket? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request for UpdateBucket method.
public struct Google_Storage_V1_UpdateBucketRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Makes the return of the bucket metadata conditional on whether the bucket's
  /// current metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the return of the bucket metadata conditional on whether the bucket's
  /// current metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// Apply a predefined set of access controls to this bucket.
  public var predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedBucketAcl = .unspecified

  /// Apply a predefined set of default object access controls to this bucket.
  public var predefinedDefaultObjectAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified

  /// Set of properties to return. Defaults to `FULL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// The Bucket metadata for updating.
  public var metadata: Google_Storage_V1_Bucket {
    get {return _metadata ?? Google_Storage_V1_Bucket()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _metadata: Google_Storage_V1_Bucket? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for StopChannel.
public struct Google_Storage_V1_StopChannelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The channel to be stopped.
  public var channel: Google_Storage_V1_Channel {
    get {return _channel ?? Google_Storage_V1_Channel()}
    set {_channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  public var hasChannel: Bool {return self._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  public mutating func clearChannel() {self._channel = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _channel: Google_Storage_V1_Channel? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for DeleteDefaultObjectAccessControl.
public struct Google_Storage_V1_DeleteDefaultObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetDefaultObjectAccessControl.
public struct Google_Storage_V1_GetDefaultObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for InsertDefaultObjectAccessControl.
public struct Google_Storage_V1_InsertDefaultObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Properties of the object access control being inserted.
  public var objectAccessControl: Google_Storage_V1_ObjectAccessControl {
    get {return _objectAccessControl ?? Google_Storage_V1_ObjectAccessControl()}
    set {_objectAccessControl = newValue}
  }
  /// Returns true if `objectAccessControl` has been explicitly set.
  public var hasObjectAccessControl: Bool {return self._objectAccessControl != nil}
  /// Clears the value of `objectAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAccessControl() {self._objectAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _objectAccessControl: Google_Storage_V1_ObjectAccessControl? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for ListDefaultObjectAccessControls.
public struct Google_Storage_V1_ListDefaultObjectAccessControlsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// If present, only return default ACL listing if the bucket's current
  /// metageneration matches this value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// If present, only return default ACL listing if the bucket's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for PatchDefaultObjectAccessControl.
public struct Google_Storage_V1_PatchDefaultObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String {
    get {return _storage._entity}
    set {_uniqueStorage()._entity = newValue}
  }

  /// The ObjectAccessControl for updating.
  public var objectAccessControl: Google_Storage_V1_ObjectAccessControl {
    get {return _storage._objectAccessControl ?? Google_Storage_V1_ObjectAccessControl()}
    set {_uniqueStorage()._objectAccessControl = newValue}
  }
  /// Returns true if `objectAccessControl` has been explicitly set.
  public var hasObjectAccessControl: Bool {return _storage._objectAccessControl != nil}
  /// Clears the value of `objectAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAccessControl() {_uniqueStorage()._objectAccessControl = nil}

  /// List of fields to be updated.
  ///
  /// To specify ALL fields, equivalent to the JSON API's "update" function,
  /// specify a single field with the value `*`. Note: not recommended. If a new
  /// field is introduced at a later time, an older client updating with the `*`
  /// may accidentally reset the new field's value.
  ///
  /// Not specifying any fields is an error.
  /// Not specifying a field while setting that field to a non-default value is
  /// an error.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return _storage._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {_uniqueStorage()._updateMask = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for UpdateDefaultObjectAccessControl.
public struct Google_Storage_V1_UpdateDefaultObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String {
    get {return _storage._entity}
    set {_uniqueStorage()._entity = newValue}
  }

  /// The ObjectAccessControl for updating.
  public var objectAccessControl: Google_Storage_V1_ObjectAccessControl {
    get {return _storage._objectAccessControl ?? Google_Storage_V1_ObjectAccessControl()}
    set {_uniqueStorage()._objectAccessControl = newValue}
  }
  /// Returns true if `objectAccessControl` has been explicitly set.
  public var hasObjectAccessControl: Bool {return _storage._objectAccessControl != nil}
  /// Clears the value of `objectAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAccessControl() {_uniqueStorage()._objectAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for DeleteNotification.
public struct Google_Storage_V1_DeleteNotificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent bucket of the notification.
  public var bucket: String = String()

  /// Required. ID of the notification to delete.
  public var notification: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetNotification.
public struct Google_Storage_V1_GetNotificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent bucket of the notification.
  public var bucket: String = String()

  /// Required. Notification ID.
  /// Required.
  public var notification: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for InsertNotification.
public struct Google_Storage_V1_InsertNotificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent bucket of the notification.
  public var bucket: String = String()

  /// Properties of the notification to be inserted.
  public var notification: Google_Storage_V1_Notification {
    get {return _notification ?? Google_Storage_V1_Notification()}
    set {_notification = newValue}
  }
  /// Returns true if `notification` has been explicitly set.
  public var hasNotification: Bool {return self._notification != nil}
  /// Clears the value of `notification`. Subsequent reads from it will return its default value.
  public mutating func clearNotification() {self._notification = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _notification: Google_Storage_V1_Notification? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for ListNotifications.
public struct Google_Storage_V1_ListNotificationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a Google Cloud Storage bucket.
  public var bucket: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for DeleteObjectAccessControl.
public struct Google_Storage_V1_DeleteObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// Required. Name of the object.
  public var object: String = String()

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 = 0

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetObjectAccessControl.
public struct Google_Storage_V1_GetObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String = String()

  /// Required. Name of the object.
  public var object: String = String()

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 = 0

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for InsertObjectAccessControl.
public struct Google_Storage_V1_InsertObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// Required. Name of the object.
  public var object: String {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 {
    get {return _storage._generation}
    set {_uniqueStorage()._generation = newValue}
  }

  /// Properties of the object access control to be inserted.
  public var objectAccessControl: Google_Storage_V1_ObjectAccessControl {
    get {return _storage._objectAccessControl ?? Google_Storage_V1_ObjectAccessControl()}
    set {_uniqueStorage()._objectAccessControl = newValue}
  }
  /// Returns true if `objectAccessControl` has been explicitly set.
  public var hasObjectAccessControl: Bool {return _storage._objectAccessControl != nil}
  /// Clears the value of `objectAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAccessControl() {_uniqueStorage()._objectAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for ListObjectAccessControls.
public struct Google_Storage_V1_ListObjectAccessControlsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String = String()

  /// Required. Name of the object.
  public var object: String = String()

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 = 0

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for PatchObjectAccessControl.
public struct Google_Storage_V1_PatchObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String {
    get {return _storage._entity}
    set {_uniqueStorage()._entity = newValue}
  }

  /// Required. Name of the object.
  /// Required.
  public var object: String {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 {
    get {return _storage._generation}
    set {_uniqueStorage()._generation = newValue}
  }

  /// The ObjectAccessControl for updating.
  public var objectAccessControl: Google_Storage_V1_ObjectAccessControl {
    get {return _storage._objectAccessControl ?? Google_Storage_V1_ObjectAccessControl()}
    set {_uniqueStorage()._objectAccessControl = newValue}
  }
  /// Returns true if `objectAccessControl` has been explicitly set.
  public var hasObjectAccessControl: Bool {return _storage._objectAccessControl != nil}
  /// Clears the value of `objectAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAccessControl() {_uniqueStorage()._objectAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  /// List of fields to be updated.
  ///
  /// To specify ALL fields, equivalent to the JSON API's "update" function,
  /// specify a single field with the value `*`. Note: not recommended. If a new
  /// field is introduced at a later time, an older client updating with the `*`
  /// may accidentally reset the new field's value.
  ///
  /// Not specifying any fields is an error.
  /// Not specifying a field while setting that field to a non-default value is
  /// an error.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return _storage._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {_uniqueStorage()._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for UpdateObjectAccessControl.
public struct Google_Storage_V1_UpdateObjectAccessControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of a bucket.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// Required. The entity holding the permission. Can be one of:
  /// * `user-`*userId*
  /// * `user-`*emailAddress*
  /// * `group-`*groupId*
  /// * `group-`*emailAddress*
  /// * `allUsers`
  /// * `allAuthenticatedUsers`
  public var entity: String {
    get {return _storage._entity}
    set {_uniqueStorage()._entity = newValue}
  }

  /// Required. Name of the object.
  /// Required.
  public var object: String {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 {
    get {return _storage._generation}
    set {_uniqueStorage()._generation = newValue}
  }

  /// The ObjectAccessControl for updating.
  public var objectAccessControl: Google_Storage_V1_ObjectAccessControl {
    get {return _storage._objectAccessControl ?? Google_Storage_V1_ObjectAccessControl()}
    set {_uniqueStorage()._objectAccessControl = newValue}
  }
  /// Returns true if `objectAccessControl` has been explicitly set.
  public var hasObjectAccessControl: Bool {return _storage._objectAccessControl != nil}
  /// Clears the value of `objectAccessControl`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAccessControl() {_uniqueStorage()._objectAccessControl = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  /// List of fields to be updated.
  ///
  /// To specify ALL fields, equivalent to the JSON API's "update" function,
  /// specify a single field with the value `*`. Note: not recommended. If a new
  /// field is introduced at a later time, an older client updating with the `*`
  /// may accidentally reset the new field's value.
  ///
  /// Not specifying any fields is an error.
  /// Not specifying a field while setting that field to a non-default value is
  /// an error.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return _storage._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {_uniqueStorage()._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for ComposeObject.
public struct Google_Storage_V1_ComposeObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket containing the source objects. The destination object is
  /// stored in this bucket.
  public var destinationBucket: String = String()

  /// Required. Name of the new object.
  public var destinationObject: String = String()

  /// Apply a predefined set of access controls to the destination object.
  public var destinationPredefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified

  /// Properties of the resulting object.
  public var destination: Google_Storage_V1_Object {
    get {return _destination ?? Google_Storage_V1_Object()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {self._destination = nil}

  /// The list of source objects that will be concatenated into a single object.
  public var sourceObjects: [Google_Storage_V1_ComposeObjectRequest.SourceObjects] = []

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Resource name of the Cloud KMS key, of the form
  /// `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
  /// that will be used to encrypt the object. Overrides the object
  /// metadata's `kms_key_name` value, if any.
  public var kmsKeyName: String = String()

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Description of a source object for a composition request.
  public struct SourceObjects {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The source object's name. All source objects must reside in the same
    /// bucket.
    public var name: String = String()

    /// The generation of this object to use as the source.
    public var generation: Int64 = 0

    /// Conditions that must be met for this operation to execute.
    public var objectPreconditions: Google_Storage_V1_ComposeObjectRequest.SourceObjects.ObjectPreconditions {
      get {return _objectPreconditions ?? Google_Storage_V1_ComposeObjectRequest.SourceObjects.ObjectPreconditions()}
      set {_objectPreconditions = newValue}
    }
    /// Returns true if `objectPreconditions` has been explicitly set.
    public var hasObjectPreconditions: Bool {return self._objectPreconditions != nil}
    /// Clears the value of `objectPreconditions`. Subsequent reads from it will return its default value.
    public mutating func clearObjectPreconditions() {self._objectPreconditions = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Preconditions for a source object of a composition request.
    public struct ObjectPreconditions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Only perform the composition if the generation of the source object
      /// that would be used matches this value.  If this value and a generation
      /// are both specified, they must be the same value or the call will fail.
      public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
        get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
        set {_ifGenerationMatch = newValue}
      }
      /// Returns true if `ifGenerationMatch` has been explicitly set.
      public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
      /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
      public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    }

    public init() {}

    fileprivate var _objectPreconditions: Google_Storage_V1_ComposeObjectRequest.SourceObjects.ObjectPreconditions? = nil
  }

  public init() {}

  fileprivate var _destination: Google_Storage_V1_Object? = nil
  fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for CopyObject.
public struct Google_Storage_V1_CopyObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which to store the new object. Overrides the provided
  /// object
  /// metadata's `bucket` value, if any.
  public var destinationBucket: String {
    get {return _storage._destinationBucket}
    set {_uniqueStorage()._destinationBucket = newValue}
  }

  /// Required. Name of the new object.
  /// Required when the object metadata is not otherwise provided. Overrides the
  /// object metadata's `name` value, if any.
  public var destinationObject: String {
    get {return _storage._destinationObject}
    set {_uniqueStorage()._destinationObject = newValue}
  }

  /// Apply a predefined set of access controls to the destination object.
  public var destinationPredefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl {
    get {return _storage._destinationPredefinedAcl}
    set {_uniqueStorage()._destinationPredefinedAcl = newValue}
  }

  /// Makes the operation conditional on whether the destination object's current
  /// generation matches the given value. Setting to 0 makes the operation
  /// succeed only if there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return _storage._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {_uniqueStorage()._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the destination object's current
  /// generation does not match the given value. If no live object exists, the
  /// precondition fails. Setting to 0 makes the operation succeed only if there
  /// is a live version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return _storage._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {_uniqueStorage()._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the destination object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return _storage._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {_uniqueStorage()._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the destination object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return _storage._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {_uniqueStorage()._ifMetagenerationNotMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// generation matches the given value.
  public var ifSourceGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceGenerationMatch = newValue}
  }
  /// Returns true if `ifSourceGenerationMatch` has been explicitly set.
  public var hasIfSourceGenerationMatch: Bool {return _storage._ifSourceGenerationMatch != nil}
  /// Clears the value of `ifSourceGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceGenerationMatch() {_uniqueStorage()._ifSourceGenerationMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// generation does not match the given value.
  public var ifSourceGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceGenerationNotMatch = newValue}
  }
  /// Returns true if `ifSourceGenerationNotMatch` has been explicitly set.
  public var hasIfSourceGenerationNotMatch: Bool {return _storage._ifSourceGenerationNotMatch != nil}
  /// Clears the value of `ifSourceGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceGenerationNotMatch() {_uniqueStorage()._ifSourceGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// metageneration matches the given value.
  public var ifSourceMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceMetagenerationMatch = newValue}
  }
  /// Returns true if `ifSourceMetagenerationMatch` has been explicitly set.
  public var hasIfSourceMetagenerationMatch: Bool {return _storage._ifSourceMetagenerationMatch != nil}
  /// Clears the value of `ifSourceMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceMetagenerationMatch() {_uniqueStorage()._ifSourceMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// metageneration does not match the given value.
  public var ifSourceMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifSourceMetagenerationNotMatch` has been explicitly set.
  public var hasIfSourceMetagenerationNotMatch: Bool {return _storage._ifSourceMetagenerationNotMatch != nil}
  /// Clears the value of `ifSourceMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceMetagenerationNotMatch() {_uniqueStorage()._ifSourceMetagenerationNotMatch = nil}

  /// Set of properties to return. Defaults to `NO_ACL`, unless the
  /// object resource specifies the `acl` property, when it defaults
  /// to `full`.
  public var projection: Google_Storage_V1_CommonEnums.Projection {
    get {return _storage._projection}
    set {_uniqueStorage()._projection = newValue}
  }

  /// Required. Name of the bucket in which to find the source object.
  public var sourceBucket: String {
    get {return _storage._sourceBucket}
    set {_uniqueStorage()._sourceBucket = newValue}
  }

  /// Required. Name of the source object.
  public var sourceObject: String {
    get {return _storage._sourceObject}
    set {_uniqueStorage()._sourceObject = newValue}
  }

  /// If present, selects a specific revision of the source object (as opposed to
  /// the latest version, the default).
  public var sourceGeneration: Int64 {
    get {return _storage._sourceGeneration}
    set {_uniqueStorage()._sourceGeneration = newValue}
  }

  /// Properties of the resulting object. If not set, duplicate properties of
  /// source object.
  public var destination: Google_Storage_V1_Object {
    get {return _storage._destination ?? Google_Storage_V1_Object()}
    set {_uniqueStorage()._destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return _storage._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {_uniqueStorage()._destination = nil}

  /// Resource name of the Cloud KMS key, of the form
  /// `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
  /// that will be used to encrypt the object. Overrides the object
  /// metadata's `kms_key_name` value, if any.
  public var destinationKmsKeyName: String {
    get {return _storage._destinationKmsKeyName}
    set {_uniqueStorage()._destinationKmsKeyName = newValue}
  }

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _storage._commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_uniqueStorage()._commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return _storage._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {_uniqueStorage()._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Message for deleting an object.
/// Either `bucket` and `object` *or* `upload_id` **must** be set (but not both).
public struct Google_Storage_V1_DeleteObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which the object resides.
  public var bucket: String = String()

  /// Required. The name of the object to delete (when not using a resumable write).
  public var object: String = String()

  /// The resumable upload_id of the object to delete (when using a
  /// resumable write). This should be copied from the `upload_id` field of
  /// `StartResumableWriteResponse`.
  public var uploadID: String = String()

  /// If present, permanently deletes a specific revision of this object (as
  /// opposed to the latest version, the default).
  public var generation: Int64 = 0

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current generation
  /// does not match the given value. If no live object exists, the precondition
  /// fails. Setting to 0 makes the operation succeed only if there is a live
  /// version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return self._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {self._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetObjectMedia.
public struct Google_Storage_V1_GetObjectMediaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the bucket containing the object to read.
  public var bucket: String = String()

  /// The name of the object to read.
  public var object: String = String()

  /// If present, selects a specific revision of this object (as opposed
  /// to the latest version, the default).
  public var generation: Int64 = 0

  /// The offset for the first byte to return in the read, relative to the start
  /// of the object.
  ///
  /// A negative `read_offset` value will be interpreted as the number of bytes
  /// back from the end of the object to be returned. For example, if an object's
  /// length is 15 bytes, a GetObjectMediaRequest with `read_offset` = -5 and
  /// `read_limit` = 3 would return bytes 10 through 12 of the object.
  public var readOffset: Int64 = 0

  /// The maximum number of `data` bytes the server is allowed to return in the
  /// sum of all `Object` messages. A `read_limit` of zero indicates that there
  /// is no limit, and a negative `read_limit` will cause an error.
  ///
  /// If the stream returns fewer bytes than allowed by the `read_limit` and no
  /// error occurred, the stream includes all data from the `read_offset` to the
  /// end of the resource.
  public var readLimit: Int64 = 0

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current generation
  /// does not match the given value. If no live object exists, the precondition
  /// fails. Setting to 0 makes the operation succeed only if there is a live
  /// version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return self._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {self._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for GetObject.
public struct Google_Storage_V1_GetObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which the object resides.
  public var bucket: String = String()

  /// Required. Name of the object.
  public var object: String = String()

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 = 0

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current generation
  /// does not match the given value. If no live object exists, the precondition
  /// fails. Setting to 0 makes the operation succeed only if there is a live
  /// version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return self._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {self._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// Set of properties to return. Defaults to `NO_ACL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Response message for GetObject.
public struct Google_Storage_V1_GetObjectMediaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A portion of the data for the object. The service **may** leave `data`
  /// empty for any given `ReadResponse`. This enables the service to inform the
  /// client that the request is still live while it is running an operation to
  /// generate more data.
  public var checksummedData: Google_Storage_V1_ChecksummedData {
    get {return _checksummedData ?? Google_Storage_V1_ChecksummedData()}
    set {_checksummedData = newValue}
  }
  /// Returns true if `checksummedData` has been explicitly set.
  public var hasChecksummedData: Bool {return self._checksummedData != nil}
  /// Clears the value of `checksummedData`. Subsequent reads from it will return its default value.
  public mutating func clearChecksummedData() {self._checksummedData = nil}

  /// The checksums of the complete object. The client should compute one of
  /// these checksums over the downloaded object and compare it against the value
  /// provided here.
  public var objectChecksums: Google_Storage_V1_ObjectChecksums {
    get {return _objectChecksums ?? Google_Storage_V1_ObjectChecksums()}
    set {_objectChecksums = newValue}
  }
  /// Returns true if `objectChecksums` has been explicitly set.
  public var hasObjectChecksums: Bool {return self._objectChecksums != nil}
  /// Clears the value of `objectChecksums`. Subsequent reads from it will return its default value.
  public mutating func clearObjectChecksums() {self._objectChecksums = nil}

  /// If read_offset and or read_limit was specified on the
  /// GetObjectMediaRequest, ContentRange will be populated on the first
  /// GetObjectMediaResponse message of the read stream.
  public var contentRange: Google_Storage_V1_ContentRange {
    get {return _contentRange ?? Google_Storage_V1_ContentRange()}
    set {_contentRange = newValue}
  }
  /// Returns true if `contentRange` has been explicitly set.
  public var hasContentRange: Bool {return self._contentRange != nil}
  /// Clears the value of `contentRange`. Subsequent reads from it will return its default value.
  public mutating func clearContentRange() {self._contentRange = nil}

  /// Metadata of the object whose media is being returned.
  /// Only populated in the first response in the stream.
  public var metadata: Google_Storage_V1_Object {
    get {return _metadata ?? Google_Storage_V1_Object()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _checksummedData: Google_Storage_V1_ChecksummedData? = nil
  fileprivate var _objectChecksums: Google_Storage_V1_ObjectChecksums? = nil
  fileprivate var _contentRange: Google_Storage_V1_ContentRange? = nil
  fileprivate var _metadata: Google_Storage_V1_Object? = nil
}

/// Describes an attempt to insert an object, possibly over multiple requests.
public struct Google_Storage_V1_InsertObjectSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Destination object, including its name and its metadata.
  public var resource: Google_Storage_V1_Object {
    get {return _resource ?? Google_Storage_V1_Object()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {self._resource = nil}

  /// Apply a predefined set of access controls to this object.
  public var predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified

  /// Makes the operation conditional on whether the object's current
  /// generation matches the given value. Setting to 0 makes the operation
  /// succeed only if there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// generation does not match the given value. If no live object exists, the
  /// precondition fails. Setting to 0 makes the operation succeed only if
  /// there is a live version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return self._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {self._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// Set of properties to return. Defaults to `NO_ACL`, unless the
  /// object resource specifies the `acl` property, when it defaults
  /// to `full`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _resource: Google_Storage_V1_Object? = nil
  fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
}

/// Message for writing an object.
public struct Google_Storage_V1_InsertObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The first message of each stream should set one of the following.
  public var firstMessage: OneOf_FirstMessage? {
    get {return _storage._firstMessage}
    set {_uniqueStorage()._firstMessage = newValue}
  }

  /// For resumable uploads. This should be the `upload_id` returned from a
  /// call to `StartResumableWriteResponse`.
  public var uploadID: String {
    get {
      if case .uploadID(let v)? = _storage._firstMessage {return v}
      return String()
    }
    set {_uniqueStorage()._firstMessage = .uploadID(newValue)}
  }

  /// For non-resumable uploads. Describes the overall upload, including the
  /// destination bucket and object name, preconditions, etc.
  public var insertObjectSpec: Google_Storage_V1_InsertObjectSpec {
    get {
      if case .insertObjectSpec(let v)? = _storage._firstMessage {return v}
      return Google_Storage_V1_InsertObjectSpec()
    }
    set {_uniqueStorage()._firstMessage = .insertObjectSpec(newValue)}
  }

  /// Required. The offset from the beginning of the object at which the data should be
  /// written.
  ///
  /// In the first `InsertObjectRequest` of a `InsertObject()` action, it
  /// indicates the initial offset for the `Insert()` call. The value **must** be
  /// equal to the `committed_size` that a call to `QueryWriteStatus()` would
  /// return (0 if this is the first write to the object).
  ///
  /// On subsequent calls, this value **must** be no larger than the sum of the
  /// first `write_offset` and the sizes of all `data` chunks sent previously on
  /// this stream.
  ///
  /// An incorrect value will cause an error.
  public var writeOffset: Int64 {
    get {return _storage._writeOffset}
    set {_uniqueStorage()._writeOffset = newValue}
  }

  /// A portion of the data for the object.
  public var data: OneOf_Data? {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  /// The data to insert. If a crc32c checksum is provided that doesn't match
  /// the checksum computed by the service, the request will fail.
  public var checksummedData: Google_Storage_V1_ChecksummedData {
    get {
      if case .checksummedData(let v)? = _storage._data {return v}
      return Google_Storage_V1_ChecksummedData()
    }
    set {_uniqueStorage()._data = .checksummedData(newValue)}
  }

  /// A reference to an existing object. This can be used to support
  /// several use cases:
  ///   - Writing a sequence of data buffers supports the basic use case of
  ///     uploading a complete object, chunk by chunk.
  ///   - Writing a sequence of references to existing objects allows an
  ///     object to be composed from a collection of objects, which can be
  ///     used to support parallel object writes.
  ///   - Writing a single reference with a given offset and size can be used
  ///     to create an object from a slice of an existing object.
  ///   - Writing an object referencing a object slice (created as noted
  ///     above) followed by a data buffer followed by another object
  ///     slice can be used to support delta upload functionality.
  public var reference: Google_Storage_V1_GetObjectMediaRequest {
    get {
      if case .reference(let v)? = _storage._data {return v}
      return Google_Storage_V1_GetObjectMediaRequest()
    }
    set {_uniqueStorage()._data = .reference(newValue)}
  }

  /// Checksums for the complete object. If the checksums computed by the service
  /// don't match the specifified checksums the call will fail. May only be
  /// provided in the first or last request (either with first_message, or
  /// finish_write set).
  public var objectChecksums: Google_Storage_V1_ObjectChecksums {
    get {return _storage._objectChecksums ?? Google_Storage_V1_ObjectChecksums()}
    set {_uniqueStorage()._objectChecksums = newValue}
  }
  /// Returns true if `objectChecksums` has been explicitly set.
  public var hasObjectChecksums: Bool {return _storage._objectChecksums != nil}
  /// Clears the value of `objectChecksums`. Subsequent reads from it will return its default value.
  public mutating func clearObjectChecksums() {_uniqueStorage()._objectChecksums = nil}

  /// If `true`, this indicates that the write is complete. Sending any
  /// `InsertObjectRequest`s subsequent to one in which `finish_write` is `true`
  /// will cause an error.
  /// For a non-resumable write (where the upload_id was not set in the first
  /// message), it is an error not to set this field in the final message of the
  /// stream.
  public var finishWrite: Bool {
    get {return _storage._finishWrite}
    set {_uniqueStorage()._finishWrite = newValue}
  }

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _storage._commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_uniqueStorage()._commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return _storage._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {_uniqueStorage()._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The first message of each stream should set one of the following.
  public enum OneOf_FirstMessage: Equatable {
    /// For resumable uploads. This should be the `upload_id` returned from a
    /// call to `StartResumableWriteResponse`.
    case uploadID(String)
    /// For non-resumable uploads. Describes the overall upload, including the
    /// destination bucket and object name, preconditions, etc.
    case insertObjectSpec(Google_Storage_V1_InsertObjectSpec)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Storage_V1_InsertObjectRequest.OneOf_FirstMessage, rhs: Google_Storage_V1_InsertObjectRequest.OneOf_FirstMessage) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.uploadID, .uploadID): return {
        guard case .uploadID(let l) = lhs, case .uploadID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.insertObjectSpec, .insertObjectSpec): return {
        guard case .insertObjectSpec(let l) = lhs, case .insertObjectSpec(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// A portion of the data for the object.
  public enum OneOf_Data: Equatable {
    /// The data to insert. If a crc32c checksum is provided that doesn't match
    /// the checksum computed by the service, the request will fail.
    case checksummedData(Google_Storage_V1_ChecksummedData)
    /// A reference to an existing object. This can be used to support
    /// several use cases:
    ///   - Writing a sequence of data buffers supports the basic use case of
    ///     uploading a complete object, chunk by chunk.
    ///   - Writing a sequence of references to existing objects allows an
    ///     object to be composed from a collection of objects, which can be
    ///     used to support parallel object writes.
    ///   - Writing a single reference with a given offset and size can be used
    ///     to create an object from a slice of an existing object.
    ///   - Writing an object referencing a object slice (created as noted
    ///     above) followed by a data buffer followed by another object
    ///     slice can be used to support delta upload functionality.
    case reference(Google_Storage_V1_GetObjectMediaRequest)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Storage_V1_InsertObjectRequest.OneOf_Data, rhs: Google_Storage_V1_InsertObjectRequest.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.checksummedData, .checksummedData): return {
        guard case .checksummedData(let l) = lhs, case .checksummedData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.reference, .reference): return {
        guard case .reference(let l) = lhs, case .reference(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for ListObjects.
public struct Google_Storage_V1_ListObjectsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which to look for objects.
  public var bucket: String = String()

  /// Returns results in a directory-like mode. `items` will contain
  /// only objects whose names, aside from the `prefix`, do not
  /// contain `delimiter`. Objects whose names, aside from the
  /// `prefix`, contain `delimiter` will have their name,
  /// truncated after the `delimiter`, returned in
  /// `prefixes`. Duplicate `prefixes` are omitted.
  public var delimiter: String = String()

  /// If true, objects that end in exactly one instance of `delimiter`
  /// will have their metadata included in `items` in addition to
  /// `prefixes`.
  public var includeTrailingDelimiter: Bool = false

  /// Maximum number of `items` plus `prefixes` to return
  /// in a single page of responses. As duplicate `prefixes` are
  /// omitted, fewer total results may be returned than requested. The service
  /// will use this parameter or 1,000 items, whichever is smaller.
  public var maxResults: Int32 = 0

  /// A previously-returned page token representing part of the larger set of
  /// results to view.
  public var pageToken: String = String()

  /// Filter results to objects whose names begin with this prefix.
  public var prefix: String = String()

  /// Set of properties to return. Defaults to `NO_ACL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// If `true`, lists all versions of an object as distinct results.
  /// The default is `false`. For more information, see
  /// [Object
  /// Versioning](https://cloud.google.com/storage/docs/object-versioning).
  public var versions: Bool = false

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request object for `ByteStream.QueryWriteStatus`.
public struct Google_Storage_V1_QueryWriteStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the resume token for the object whose write status is being
  /// requested.
  public var uploadID: String = String()

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Response object for `ByteStream.QueryWriteStatus`.
public struct Google_Storage_V1_QueryWriteStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of bytes that have been processed for the given object.
  public var committedSize: Int64 = 0

  /// `complete` is `true` only if the client has sent a `InsertObjectRequest`
  /// with `finish_write` set to true, and the server has processed that request.
  public var complete: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for RewriteObject.
public struct Google_Storage_V1_RewriteObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which to store the new object. Overrides the provided
  /// object metadata's `bucket` value, if any.
  public var destinationBucket: String {
    get {return _storage._destinationBucket}
    set {_uniqueStorage()._destinationBucket = newValue}
  }

  /// Required. Name of the new object.
  /// Required when the object metadata is not otherwise provided. Overrides the
  /// object metadata's `name` value, if any.
  public var destinationObject: String {
    get {return _storage._destinationObject}
    set {_uniqueStorage()._destinationObject = newValue}
  }

  /// Resource name of the Cloud KMS key, of the form
  /// `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
  /// that will be used to encrypt the object. Overrides the object
  /// metadata's `kms_key_name` value, if any.
  public var destinationKmsKeyName: String {
    get {return _storage._destinationKmsKeyName}
    set {_uniqueStorage()._destinationKmsKeyName = newValue}
  }

  /// Apply a predefined set of access controls to the destination object.
  public var destinationPredefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl {
    get {return _storage._destinationPredefinedAcl}
    set {_uniqueStorage()._destinationPredefinedAcl = newValue}
  }

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return _storage._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {_uniqueStorage()._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current generation
  /// does not match the given value. If no live object exists, the precondition
  /// fails. Setting to 0 makes the operation succeed only if there is a live
  /// version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return _storage._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {_uniqueStorage()._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the destination object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return _storage._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {_uniqueStorage()._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the destination object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return _storage._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {_uniqueStorage()._ifMetagenerationNotMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// generation matches the given value.
  public var ifSourceGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceGenerationMatch = newValue}
  }
  /// Returns true if `ifSourceGenerationMatch` has been explicitly set.
  public var hasIfSourceGenerationMatch: Bool {return _storage._ifSourceGenerationMatch != nil}
  /// Clears the value of `ifSourceGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceGenerationMatch() {_uniqueStorage()._ifSourceGenerationMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// generation does not match the given value.
  public var ifSourceGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceGenerationNotMatch = newValue}
  }
  /// Returns true if `ifSourceGenerationNotMatch` has been explicitly set.
  public var hasIfSourceGenerationNotMatch: Bool {return _storage._ifSourceGenerationNotMatch != nil}
  /// Clears the value of `ifSourceGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceGenerationNotMatch() {_uniqueStorage()._ifSourceGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// metageneration matches the given value.
  public var ifSourceMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceMetagenerationMatch = newValue}
  }
  /// Returns true if `ifSourceMetagenerationMatch` has been explicitly set.
  public var hasIfSourceMetagenerationMatch: Bool {return _storage._ifSourceMetagenerationMatch != nil}
  /// Clears the value of `ifSourceMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceMetagenerationMatch() {_uniqueStorage()._ifSourceMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the source object's current
  /// metageneration does not match the given value.
  public var ifSourceMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifSourceMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifSourceMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifSourceMetagenerationNotMatch` has been explicitly set.
  public var hasIfSourceMetagenerationNotMatch: Bool {return _storage._ifSourceMetagenerationNotMatch != nil}
  /// Clears the value of `ifSourceMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfSourceMetagenerationNotMatch() {_uniqueStorage()._ifSourceMetagenerationNotMatch = nil}

  /// The maximum number of bytes that will be rewritten per rewrite request.
  /// Most callers
  /// shouldn't need to specify this parameter - it is primarily in place to
  /// support testing. If specified the value must be an integral multiple of
  /// 1 MiB (1048576). Also, this only applies to requests where the source and
  /// destination span locations and/or storage classes. Finally, this value must
  /// not change across rewrite calls else you'll get an error that the
  /// `rewriteToken` is invalid.
  public var maxBytesRewrittenPerCall: Int64 {
    get {return _storage._maxBytesRewrittenPerCall}
    set {_uniqueStorage()._maxBytesRewrittenPerCall = newValue}
  }

  /// Set of properties to return. Defaults to `NO_ACL`, unless the
  /// object resource specifies the `acl` property, when it defaults
  /// to `full`.
  public var projection: Google_Storage_V1_CommonEnums.Projection {
    get {return _storage._projection}
    set {_uniqueStorage()._projection = newValue}
  }

  /// Include this field (from the previous rewrite response) on each rewrite
  /// request after the first one, until the rewrite response 'done' flag is
  /// true. Calls that provide a rewriteToken can omit all other request fields,
  /// but if included those fields must match the values provided in the first
  /// rewrite request.
  public var rewriteToken: String {
    get {return _storage._rewriteToken}
    set {_uniqueStorage()._rewriteToken = newValue}
  }

  /// Required. Name of the bucket in which to find the source object.
  public var sourceBucket: String {
    get {return _storage._sourceBucket}
    set {_uniqueStorage()._sourceBucket = newValue}
  }

  /// Required. Name of the source object.
  public var sourceObject: String {
    get {return _storage._sourceObject}
    set {_uniqueStorage()._sourceObject = newValue}
  }

  /// If present, selects a specific revision of the source object (as opposed to
  /// the latest version, the default).
  public var sourceGeneration: Int64 {
    get {return _storage._sourceGeneration}
    set {_uniqueStorage()._sourceGeneration = newValue}
  }

  /// Properties of the destination, post-rewrite object.
  public var object: Google_Storage_V1_Object {
    get {return _storage._object ?? Google_Storage_V1_Object()}
    set {_uniqueStorage()._object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  public var hasObject: Bool {return _storage._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  public mutating func clearObject() {_uniqueStorage()._object = nil}

  /// The algorithm used to encrypt the source object, if any.
  public var copySourceEncryptionAlgorithm: String {
    get {return _storage._copySourceEncryptionAlgorithm}
    set {_uniqueStorage()._copySourceEncryptionAlgorithm = newValue}
  }

  /// The encryption key used to encrypt the source object, if any.
  public var copySourceEncryptionKey: String {
    get {return _storage._copySourceEncryptionKey}
    set {_uniqueStorage()._copySourceEncryptionKey = newValue}
  }

  /// The SHA-256 hash of the key used to encrypt the source object, if any.
  public var copySourceEncryptionKeySha256: String {
    get {return _storage._copySourceEncryptionKeySha256}
    set {_uniqueStorage()._copySourceEncryptionKeySha256 = newValue}
  }

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _storage._commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_uniqueStorage()._commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return _storage._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {_uniqueStorage()._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A rewrite response.
public struct Google_Storage_V1_RewriteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The total bytes written so far, which can be used to provide a waiting user
  /// with a progress indicator. This property is always present in the response.
  public var totalBytesRewritten: Int64 = 0

  /// The total size of the object being copied in bytes. This property is always
  /// present in the response.
  public var objectSize: Int64 = 0

  /// `true` if the copy is finished; otherwise, `false` if
  /// the copy is in progress. This property is always present in the response.
  public var done: Bool = false

  /// A token to use in subsequent requests to continue copying data. This token
  /// is present in the response only when there is more data to copy.
  public var rewriteToken: String = String()

  /// A resource containing the metadata for the copied-to object. This property
  /// is present in the response only when copying completes.
  public var resource: Google_Storage_V1_Object {
    get {return _resource ?? Google_Storage_V1_Object()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {self._resource = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _resource: Google_Storage_V1_Object? = nil
}

/// Request message StartResumableWrite.
public struct Google_Storage_V1_StartResumableWriteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The destination bucket, object, and metadata, as well as any preconditions.
  public var insertObjectSpec: Google_Storage_V1_InsertObjectSpec {
    get {return _insertObjectSpec ?? Google_Storage_V1_InsertObjectSpec()}
    set {_insertObjectSpec = newValue}
  }
  /// Returns true if `insertObjectSpec` has been explicitly set.
  public var hasInsertObjectSpec: Bool {return self._insertObjectSpec != nil}
  /// Clears the value of `insertObjectSpec`. Subsequent reads from it will return its default value.
  public mutating func clearInsertObjectSpec() {self._insertObjectSpec = nil}

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _insertObjectSpec: Google_Storage_V1_InsertObjectSpec? = nil
  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Response object for ByteStream.StartResumableWrite.
public struct Google_Storage_V1_StartResumableWriteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The upload_id of the newly started resumable write operation. This
  /// value should be copied into the `InsertObjectRequest.upload_id` field.
  public var uploadID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for PatchObject.
public struct Google_Storage_V1_PatchObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which the object resides.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// Required. Name of the object.
  public var object: String {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 {
    get {return _storage._generation}
    set {_uniqueStorage()._generation = newValue}
  }

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return _storage._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {_uniqueStorage()._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current generation
  /// does not match the given value. If no live object exists, the precondition
  /// fails. Setting to 0 makes the operation succeed only if there is a live
  /// version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return _storage._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {_uniqueStorage()._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return _storage._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {_uniqueStorage()._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return _storage._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {_uniqueStorage()._ifMetagenerationNotMatch = nil}

  /// Apply a predefined set of access controls to this object.
  public var predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl {
    get {return _storage._predefinedAcl}
    set {_uniqueStorage()._predefinedAcl = newValue}
  }

  /// Set of properties to return. Defaults to `FULL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection {
    get {return _storage._projection}
    set {_uniqueStorage()._projection = newValue}
  }

  /// The Object metadata for updating.
  public var metadata: Google_Storage_V1_Object {
    get {return _storage._metadata ?? Google_Storage_V1_Object()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// List of fields to be updated.
  ///
  /// To specify ALL fields, equivalent to the JSON API's "update" function,
  /// specify a single field with the value `*`. Note: not recommended. If a new
  /// field is introduced at a later time, an older client updating with the `*`
  /// may accidentally reset the new field's value.
  ///
  /// Not specifying any fields is an error.
  /// Not specifying a field while setting that field to a non-default value is
  /// an error.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return _storage._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {_uniqueStorage()._updateMask = nil}

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _storage._commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_uniqueStorage()._commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return _storage._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {_uniqueStorage()._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for UpdateObject.
public struct Google_Storage_V1_UpdateObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the bucket in which the object resides.
  public var bucket: String = String()

  /// Required. Name of the object.
  public var object: String = String()

  /// If present, selects a specific revision of this object (as opposed to the
  /// latest version, the default).
  public var generation: Int64 = 0

  /// Makes the operation conditional on whether the object's current generation
  /// matches the given value. Setting to 0 makes the operation succeed only if
  /// there are no live versions of the object.
  public var ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationMatch = newValue}
  }
  /// Returns true if `ifGenerationMatch` has been explicitly set.
  public var hasIfGenerationMatch: Bool {return self._ifGenerationMatch != nil}
  /// Clears the value of `ifGenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationMatch() {self._ifGenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current generation
  /// does not match the given value. If no live object exists, the precondition
  /// fails. Setting to 0 makes the operation succeed only if there is a live
  /// version of the object.
  public var ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifGenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifGenerationNotMatch = newValue}
  }
  /// Returns true if `ifGenerationNotMatch` has been explicitly set.
  public var hasIfGenerationNotMatch: Bool {return self._ifGenerationNotMatch != nil}
  /// Clears the value of `ifGenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfGenerationNotMatch() {self._ifGenerationNotMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration matches the given value.
  public var ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationMatch = newValue}
  }
  /// Returns true if `ifMetagenerationMatch` has been explicitly set.
  public var hasIfMetagenerationMatch: Bool {return self._ifMetagenerationMatch != nil}
  /// Clears the value of `ifMetagenerationMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationMatch() {self._ifMetagenerationMatch = nil}

  /// Makes the operation conditional on whether the object's current
  /// metageneration does not match the given value.
  public var ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _ifMetagenerationNotMatch ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_ifMetagenerationNotMatch = newValue}
  }
  /// Returns true if `ifMetagenerationNotMatch` has been explicitly set.
  public var hasIfMetagenerationNotMatch: Bool {return self._ifMetagenerationNotMatch != nil}
  /// Clears the value of `ifMetagenerationNotMatch`. Subsequent reads from it will return its default value.
  public mutating func clearIfMetagenerationNotMatch() {self._ifMetagenerationNotMatch = nil}

  /// Apply a predefined set of access controls to this object.
  public var predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified

  /// Set of properties to return. Defaults to `FULL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection = .unspecified

  /// The Object metadata for updating.
  public var metadata: Google_Storage_V1_Object {
    get {return _metadata ?? Google_Storage_V1_Object()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// A set of parameters common to Storage API requests concerning an object.
  public var commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams {
    get {return _commonObjectRequestParams ?? Google_Storage_V1_CommonObjectRequestParams()}
    set {_commonObjectRequestParams = newValue}
  }
  /// Returns true if `commonObjectRequestParams` has been explicitly set.
  public var hasCommonObjectRequestParams: Bool {return self._commonObjectRequestParams != nil}
  /// Clears the value of `commonObjectRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonObjectRequestParams() {self._commonObjectRequestParams = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _metadata: Google_Storage_V1_Object? = nil
  fileprivate var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request message for WatchAllObjects.
public struct Google_Storage_V1_WatchAllObjectsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the bucket in which to look for objects.
  public var bucket: String {
    get {return _storage._bucket}
    set {_uniqueStorage()._bucket = newValue}
  }

  /// If `true`, lists all versions of an object as distinct results.
  /// The default is `false`. For more information, see
  /// [Object
  /// Versioning](https://cloud.google.com/storage/docs/object-versioning).
  public var versions: Bool {
    get {return _storage._versions}
    set {_uniqueStorage()._versions = newValue}
  }

  /// Returns results in a directory-like mode. `items` will contain
  /// only objects whose names, aside from the `prefix`, do not
  /// contain `delimiter`. Objects whose names, aside from the
  /// `prefix`, contain `delimiter` will have their name,
  /// truncated after the `delimiter`, returned in
  /// `prefixes`. Duplicate `prefixes` are omitted.
  public var delimiter: String {
    get {return _storage._delimiter}
    set {_uniqueStorage()._delimiter = newValue}
  }

  /// Maximum number of `items` plus `prefixes` to return
  /// in a single page of responses. As duplicate `prefixes` are
  /// omitted, fewer total results may be returned than requested. The service
  /// will use this parameter or 1,000 items, whichever is smaller.
  public var maxResults: Int32 {
    get {return _storage._maxResults}
    set {_uniqueStorage()._maxResults = newValue}
  }

  /// Filter results to objects whose names begin with this prefix.
  public var prefix: String {
    get {return _storage._prefix}
    set {_uniqueStorage()._prefix = newValue}
  }

  /// If true, objects that end in exactly one instance of `delimiter`
  /// will have their metadata included in `items` in addition to
  /// `prefixes`.
  public var includeTrailingDelimiter: Bool {
    get {return _storage._includeTrailingDelimiter}
    set {_uniqueStorage()._includeTrailingDelimiter = newValue}
  }

  /// A previously-returned page token representing part of the larger set of
  /// results to view.
  public var pageToken: String {
    get {return _storage._pageToken}
    set {_uniqueStorage()._pageToken = newValue}
  }

  /// Set of properties to return. Defaults to `NO_ACL`.
  public var projection: Google_Storage_V1_CommonEnums.Projection {
    get {return _storage._projection}
    set {_uniqueStorage()._projection = newValue}
  }

  /// Properties of the channel to be inserted.
  public var channel: Google_Storage_V1_Channel {
    get {return _storage._channel ?? Google_Storage_V1_Channel()}
    set {_uniqueStorage()._channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  public var hasChannel: Bool {return _storage._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  public mutating func clearChannel() {_uniqueStorage()._channel = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _storage._commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_uniqueStorage()._commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return _storage._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {_uniqueStorage()._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Request message for GetProjectServiceAccount.
public struct Google_Storage_V1_GetProjectServiceAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project ID.
  public var projectID: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

public struct Google_Storage_V1_CreateHmacKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project that the HMAC-owning service account lives in.
  public var projectID: String = String()

  /// Required. The service account to create the HMAC for.
  public var serviceAccountEmail: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Create hmac response.  The only time the secret for an HMAC will be returned.
public struct Google_Storage_V1_CreateHmacKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key metadata.
  public var metadata: Google_Storage_V1_HmacKeyMetadata {
    get {return _metadata ?? Google_Storage_V1_HmacKeyMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// HMAC key secret material.
  public var secret: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Google_Storage_V1_HmacKeyMetadata? = nil
}

/// Request object to delete a given HMAC key.
public struct Google_Storage_V1_DeleteHmacKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The identifying key for the HMAC to delete.
  public var accessID: String = String()

  /// Required. The project id the HMAC key lies in.
  public var projectID: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request object to get metadata on a given HMAC key.
public struct Google_Storage_V1_GetHmacKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The identifying key for the HMAC to delete.
  public var accessID: String = String()

  /// Required. The project id the HMAC key lies in.
  public var projectID: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Request to fetch a list of HMAC keys under a given project.
public struct Google_Storage_V1_ListHmacKeysRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project id to list HMAC keys for.
  public var projectID: String = String()

  /// An optional filter to only return HMAC keys for one service account.
  public var serviceAccountEmail: String = String()

  /// An optional bool to return deleted keys that have not been wiped out yet.
  public var showDeletedKeys: Bool = false

  /// The maximum number of keys to return.
  public var maxResults: Int32 = 0

  /// A previously returned token from ListHmacKeysResponse to get the next page.
  public var pageToken: String = String()

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Hmac key list response with next page information.
public struct Google_Storage_V1_ListHmacKeysResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The continuation token, used to page through large result sets. Provide
  /// this value in a subsequent request to return the next page of results.
  public var nextPageToken: String = String()

  /// The list of items.
  public var items: [Google_Storage_V1_HmacKeyMetadata] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request object to update an HMAC key state.
public struct Google_Storage_V1_UpdateHmacKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The id of the HMAC key.
  public var accessID: String = String()

  /// Required. The project id the HMAC's service account lies in.
  public var projectID: String = String()

  /// Required. The service account owner of the HMAC key.
  public var metadata: Google_Storage_V1_HmacKeyMetadata {
    get {return _metadata ?? Google_Storage_V1_HmacKeyMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Google_Storage_V1_HmacKeyMetadata? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// A wrapper around the IAM get policy request to support our
/// common_request_params.
public struct Google_Storage_V1_GetIamPolicyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request sent to IAM.
  public var iamRequest: Google_Iam_V1_GetIamPolicyRequest {
    get {return _iamRequest ?? Google_Iam_V1_GetIamPolicyRequest()}
    set {_iamRequest = newValue}
  }
  /// Returns true if `iamRequest` has been explicitly set.
  public var hasIamRequest: Bool {return self._iamRequest != nil}
  /// Clears the value of `iamRequest`. Subsequent reads from it will return its default value.
  public mutating func clearIamRequest() {self._iamRequest = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _iamRequest: Google_Iam_V1_GetIamPolicyRequest? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// A wrapper around the IAM set policy request to support our
/// common_request_params.
public struct Google_Storage_V1_SetIamPolicyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request sent to IAM.
  public var iamRequest: Google_Iam_V1_SetIamPolicyRequest {
    get {return _iamRequest ?? Google_Iam_V1_SetIamPolicyRequest()}
    set {_iamRequest = newValue}
  }
  /// Returns true if `iamRequest` has been explicitly set.
  public var hasIamRequest: Bool {return self._iamRequest != nil}
  /// Clears the value of `iamRequest`. Subsequent reads from it will return its default value.
  public mutating func clearIamRequest() {self._iamRequest = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _iamRequest: Google_Iam_V1_SetIamPolicyRequest? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// A wrapper around the IAM test iam permissions request to support our
/// common_request_params.
public struct Google_Storage_V1_TestIamPermissionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The request sent to IAM.
  public var iamRequest: Google_Iam_V1_TestIamPermissionsRequest {
    get {return _iamRequest ?? Google_Iam_V1_TestIamPermissionsRequest()}
    set {_iamRequest = newValue}
  }
  /// Returns true if `iamRequest` has been explicitly set.
  public var hasIamRequest: Bool {return self._iamRequest != nil}
  /// Clears the value of `iamRequest`. Subsequent reads from it will return its default value.
  public mutating func clearIamRequest() {self._iamRequest = nil}

  /// A set of parameters common to all Storage API requests.
  public var commonRequestParams: Google_Storage_V1_CommonRequestParams {
    get {return _commonRequestParams ?? Google_Storage_V1_CommonRequestParams()}
    set {_commonRequestParams = newValue}
  }
  /// Returns true if `commonRequestParams` has been explicitly set.
  public var hasCommonRequestParams: Bool {return self._commonRequestParams != nil}
  /// Clears the value of `commonRequestParams`. Subsequent reads from it will return its default value.
  public mutating func clearCommonRequestParams() {self._commonRequestParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _iamRequest: Google_Iam_V1_TestIamPermissionsRequest? = nil
  fileprivate var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
}

/// Parameters that can be passed to any object request.
public struct Google_Storage_V1_CommonObjectRequestParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encryption algorithm used with Customer-Supplied Encryption Keys feature.
  public var encryptionAlgorithm: String = String()

  /// Encryption key used with Customer-Supplied Encryption Keys feature.
  public var encryptionKey: String = String()

  /// SHA256 hash of encryption key used with Customer-Supplied Encryption Keys
  /// feature.
  public var encryptionKeySha256: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Parameters that can be passed to any request.
public struct Google_Storage_V1_CommonRequestParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Required when using buckets with Requestor Pays feature enabled.
  public var userProject: String = String()

  /// Lets you enforce per-user quotas from a server-side application even in
  /// cases when the user's IP address is unknown. This can occur, for example,
  /// with applications that run cron jobs on App Engine on a user's behalf.
  /// You can choose any arbitrary string that uniquely identifies a user, but it
  /// is limited to 40 characters.
  /// Overrides user_ip if both are provided.
  public var quotaUser: String = String()

  /// Subset of fields to include in the response.
  public var fields: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fields ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fields = newValue}
  }
  /// Returns true if `fields` has been explicitly set.
  public var hasFields: Bool {return self._fields != nil}
  /// Clears the value of `fields`. Subsequent reads from it will return its default value.
  public mutating func clearFields() {self._fields = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fields: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Shared constants.
public struct Google_Storage_V1_ServiceConstants {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A collection of constant values meaningful to the Storage API.
  public enum Values: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unused. Proto3 requires first enum to be 0.
    case unspecified // = 0

    /// The maximum size chunk that can will be returned in a single
    /// ReadRequest.
    /// 2 MiB.
    case maxReadChunkBytes // = 2097152

    /// The maximum size chunk that can be sent in a single InsertObjectRequest.
    /// 2 MiB.
    public static let maxWriteChunkBytes = maxReadChunkBytes

    /// The maximum size of an object in MB - whether written in a single stream
    /// or composed from multiple other objects.
    /// 5 TiB.
    case maxObjectSizeMb // = 5242880

    /// The maximum length field name that can be sent in a single
    /// custom metadata field.
    /// 1 KiB.
    case maxCustomMetadataFieldNameBytes // = 1024

    /// The maximum length field value that can be sent in a single
    /// custom_metadata field.
    /// 4 KiB.
    case maxCustomMetadataFieldValueBytes // = 4096

    /// The maximum total bytes that can be populated into all field names and
    /// values of the custom_metadata for one object.
    /// 8 KiB.
    case maxCustomMetadataTotalSizeBytes // = 8192

    /// The maximum total bytes that can be populated into all bucket metadata
    /// fields.
    /// 20 KiB.
    case maxBucketMetadataTotalSizeBytes // = 20480

    /// The maximum number of NotificationConfigurations that can be registered
    /// for a given bucket.
    case maxNotificationConfigsPerBucket // = 100

    /// The maximum number of LifecycleRules that can be registered for a given
    /// bucket.
    public static let maxLifecycleRulesPerBucket = maxNotificationConfigsPerBucket

    /// The maximum number of custom attributes per NotificationConfig.
    case maxNotificationCustomAttributes // = 5

    /// The maximum length of a custom attribute key included in
    /// NotificationConfig.
    case maxNotificationCustomAttributeKeyLength // = 256

    /// The maximum length of a custom attribute value included in a
    /// NotificationConfig.
    public static let maxNotificationCustomAttributeValueLength = maxCustomMetadataFieldNameBytes

    /// The maximum number of key/value entries per bucket label.
    case maxLabelsEntriesCount // = 64

    /// The maximum character length of the key or value in a bucket
    /// label map.
    case maxLabelsKeyValueLength // = 63

    /// The maximum byte size of the key or value in a bucket label
    /// map.
    case maxLabelsKeyValueBytes // = 128

    /// The maximum number of object IDs that can be included in a
    /// DeleteObjectsRequest.
    case maxObjectIdsPerDeleteObjectsRequest // = 1000

    /// The maximum number of days for which a token returned by the
    /// GetListObjectsSplitPoints RPC is valid.
    case splitTokenMaxValidDays // = 14
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 5: self = .maxNotificationCustomAttributes
      case 14: self = .splitTokenMaxValidDays
      case 63: self = .maxLabelsKeyValueLength
      case 64: self = .maxLabelsEntriesCount
      case 100: self = .maxNotificationConfigsPerBucket
      case 128: self = .maxLabelsKeyValueBytes
      case 256: self = .maxNotificationCustomAttributeKeyLength
      case 1000: self = .maxObjectIdsPerDeleteObjectsRequest
      case 1024: self = .maxCustomMetadataFieldNameBytes
      case 4096: self = .maxCustomMetadataFieldValueBytes
      case 8192: self = .maxCustomMetadataTotalSizeBytes
      case 20480: self = .maxBucketMetadataTotalSizeBytes
      case 2097152: self = .maxReadChunkBytes
      case 5242880: self = .maxObjectSizeMb
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .maxNotificationCustomAttributes: return 5
      case .splitTokenMaxValidDays: return 14
      case .maxLabelsKeyValueLength: return 63
      case .maxLabelsEntriesCount: return 64
      case .maxNotificationConfigsPerBucket: return 100
      case .maxLabelsKeyValueBytes: return 128
      case .maxNotificationCustomAttributeKeyLength: return 256
      case .maxObjectIdsPerDeleteObjectsRequest: return 1000
      case .maxCustomMetadataFieldNameBytes: return 1024
      case .maxCustomMetadataFieldValueBytes: return 4096
      case .maxCustomMetadataTotalSizeBytes: return 8192
      case .maxBucketMetadataTotalSizeBytes: return 20480
      case .maxReadChunkBytes: return 2097152
      case .maxObjectSizeMb: return 5242880
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Storage_V1_ServiceConstants.Values: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Storage_V1_ServiceConstants.Values] = [
    .unspecified,
    .maxReadChunkBytes,
    .maxObjectSizeMb,
    .maxCustomMetadataFieldNameBytes,
    .maxCustomMetadataFieldValueBytes,
    .maxCustomMetadataTotalSizeBytes,
    .maxBucketMetadataTotalSizeBytes,
    .maxNotificationConfigsPerBucket,
    .maxNotificationCustomAttributes,
    .maxNotificationCustomAttributeKeyLength,
    .maxLabelsEntriesCount,
    .maxLabelsKeyValueLength,
    .maxLabelsKeyValueBytes,
    .maxObjectIdsPerDeleteObjectsRequest,
    .splitTokenMaxValidDays,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.storage.v1"

extension Google_Storage_V1_DeleteBucketAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteBucketAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteBucketAccessControlRequest, rhs: Google_Storage_V1_DeleteBucketAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetBucketAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBucketAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetBucketAccessControlRequest, rhs: Google_Storage_V1_GetBucketAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertBucketAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertBucketAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    3: .standard(proto: "bucket_access_control"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._bucketAccessControl) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._bucketAccessControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertBucketAccessControlRequest, rhs: Google_Storage_V1_InsertBucketAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._bucketAccessControl != rhs._bucketAccessControl {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListBucketAccessControlsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListBucketAccessControlsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListBucketAccessControlsRequest, rhs: Google_Storage_V1_ListBucketAccessControlsRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_PatchBucketAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchBucketAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "bucket_access_control"),
    5: .standard(proto: "update_mask"),
    6: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._bucketAccessControl) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if let v = self._bucketAccessControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_PatchBucketAccessControlRequest, rhs: Google_Storage_V1_PatchBucketAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs._bucketAccessControl != rhs._bucketAccessControl {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_UpdateBucketAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateBucketAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "bucket_access_control"),
    5: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._bucketAccessControl) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if let v = self._bucketAccessControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_UpdateBucketAccessControlRequest, rhs: Google_Storage_V1_UpdateBucketAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs._bucketAccessControl != rhs._bucketAccessControl {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_DeleteBucketRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteBucketRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .standard(proto: "if_metageneration_match"),
    3: .standard(proto: "if_metageneration_not_match"),
    5: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteBucketRequest, rhs: Google_Storage_V1_DeleteBucketRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetBucketRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBucketRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .standard(proto: "if_metageneration_match"),
    3: .standard(proto: "if_metageneration_not_match"),
    4: .same(proto: "projection"),
    6: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 4)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetBucketRequest, rhs: Google_Storage_V1_GetBucketRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertBucketRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertBucketRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "predefined_acl"),
    2: .standard(proto: "predefined_default_object_acl"),
    3: .same(proto: "project"),
    4: .same(proto: "projection"),
    6: .same(proto: "bucket"),
    7: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.predefinedAcl) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.predefinedDefaultObjectAcl) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.project) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._bucket) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.predefinedAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedAcl, fieldNumber: 1)
    }
    if self.predefinedDefaultObjectAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedDefaultObjectAcl, fieldNumber: 2)
    }
    if !self.project.isEmpty {
      try visitor.visitSingularStringField(value: self.project, fieldNumber: 3)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 4)
    }
    if let v = self._bucket {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertBucketRequest, rhs: Google_Storage_V1_InsertBucketRequest) -> Bool {
    if lhs.predefinedAcl != rhs.predefinedAcl {return false}
    if lhs.predefinedDefaultObjectAcl != rhs.predefinedDefaultObjectAcl {return false}
    if lhs.project != rhs.project {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._bucket != rhs._bucket {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListChannelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListChannelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListChannelsRequest, rhs: Google_Storage_V1_ListChannelsRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListBucketsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListBucketsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_results"),
    2: .standard(proto: "page_token"),
    3: .same(proto: "prefix"),
    4: .same(proto: "project"),
    5: .same(proto: "projection"),
    7: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.maxResults) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.prefix) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.project) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxResults != 0 {
      try visitor.visitSingularInt32Field(value: self.maxResults, fieldNumber: 1)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 2)
    }
    if !self.prefix.isEmpty {
      try visitor.visitSingularStringField(value: self.prefix, fieldNumber: 3)
    }
    if !self.project.isEmpty {
      try visitor.visitSingularStringField(value: self.project, fieldNumber: 4)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 5)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListBucketsRequest, rhs: Google_Storage_V1_ListBucketsRequest) -> Bool {
    if lhs.maxResults != rhs.maxResults {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.prefix != rhs.prefix {return false}
    if lhs.project != rhs.project {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_LockRetentionPolicyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LockRetentionPolicyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .standard(proto: "if_metageneration_match"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.ifMetagenerationMatch) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if self.ifMetagenerationMatch != 0 {
      try visitor.visitSingularInt64Field(value: self.ifMetagenerationMatch, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_LockRetentionPolicyRequest, rhs: Google_Storage_V1_LockRetentionPolicyRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.ifMetagenerationMatch != rhs.ifMetagenerationMatch {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_PatchBucketRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchBucketRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .standard(proto: "if_metageneration_match"),
    3: .standard(proto: "if_metageneration_not_match"),
    4: .standard(proto: "predefined_acl"),
    5: .standard(proto: "predefined_default_object_acl"),
    6: .same(proto: "projection"),
    8: .same(proto: "metadata"),
    9: .standard(proto: "update_mask"),
    10: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.predefinedAcl) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.predefinedDefaultObjectAcl) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.predefinedAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedAcl, fieldNumber: 4)
    }
    if self.predefinedDefaultObjectAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedDefaultObjectAcl, fieldNumber: 5)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 6)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_PatchBucketRequest, rhs: Google_Storage_V1_PatchBucketRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs.predefinedAcl != rhs.predefinedAcl {return false}
    if lhs.predefinedDefaultObjectAcl != rhs.predefinedDefaultObjectAcl {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_UpdateBucketRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateBucketRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .standard(proto: "if_metageneration_match"),
    3: .standard(proto: "if_metageneration_not_match"),
    4: .standard(proto: "predefined_acl"),
    5: .standard(proto: "predefined_default_object_acl"),
    6: .same(proto: "projection"),
    8: .same(proto: "metadata"),
    9: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.predefinedAcl) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.predefinedDefaultObjectAcl) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.predefinedAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedAcl, fieldNumber: 4)
    }
    if self.predefinedDefaultObjectAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedDefaultObjectAcl, fieldNumber: 5)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 6)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_UpdateBucketRequest, rhs: Google_Storage_V1_UpdateBucketRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs.predefinedAcl != rhs.predefinedAcl {return false}
    if lhs.predefinedDefaultObjectAcl != rhs.predefinedDefaultObjectAcl {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_StopChannelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StopChannelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._channel) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._channel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_StopChannelRequest, rhs: Google_Storage_V1_StopChannelRequest) -> Bool {
    if lhs._channel != rhs._channel {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_DeleteDefaultObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteDefaultObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteDefaultObjectAccessControlRequest, rhs: Google_Storage_V1_DeleteDefaultObjectAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetDefaultObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDefaultObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetDefaultObjectAccessControlRequest, rhs: Google_Storage_V1_GetDefaultObjectAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertDefaultObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertDefaultObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    3: .standard(proto: "object_access_control"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._objectAccessControl) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._objectAccessControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertDefaultObjectAccessControlRequest, rhs: Google_Storage_V1_InsertDefaultObjectAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._objectAccessControl != rhs._objectAccessControl {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListDefaultObjectAccessControlsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListDefaultObjectAccessControlsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .standard(proto: "if_metageneration_match"),
    3: .standard(proto: "if_metageneration_not_match"),
    5: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListDefaultObjectAccessControlsRequest, rhs: Google_Storage_V1_ListDefaultObjectAccessControlsRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_PatchDefaultObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchDefaultObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "object_access_control"),
    5: .standard(proto: "update_mask"),
    6: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _entity: String = String()
    var _objectAccessControl: Google_Storage_V1_ObjectAccessControl? = nil
    var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _entity = source._entity
      _objectAccessControl = source._objectAccessControl
      _updateMask = source._updateMask
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._entity) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._objectAccessControl) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._updateMask) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if !_storage._entity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._entity, fieldNumber: 2)
      }
      if let v = _storage._objectAccessControl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._updateMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_PatchDefaultObjectAccessControlRequest, rhs: Google_Storage_V1_PatchDefaultObjectAccessControlRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._objectAccessControl != rhs_storage._objectAccessControl {return false}
        if _storage._updateMask != rhs_storage._updateMask {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_UpdateDefaultObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateDefaultObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    4: .standard(proto: "object_access_control"),
    5: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _entity: String = String()
    var _objectAccessControl: Google_Storage_V1_ObjectAccessControl? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _entity = source._entity
      _objectAccessControl = source._objectAccessControl
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._entity) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._objectAccessControl) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if !_storage._entity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._entity, fieldNumber: 2)
      }
      if let v = _storage._objectAccessControl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_UpdateDefaultObjectAccessControlRequest, rhs: Google_Storage_V1_UpdateDefaultObjectAccessControlRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._objectAccessControl != rhs_storage._objectAccessControl {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_DeleteNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteNotificationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "notification"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.notification) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.notification.isEmpty {
      try visitor.visitSingularStringField(value: self.notification, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteNotificationRequest, rhs: Google_Storage_V1_DeleteNotificationRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.notification != rhs.notification {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetNotificationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "notification"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.notification) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.notification.isEmpty {
      try visitor.visitSingularStringField(value: self.notification, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetNotificationRequest, rhs: Google_Storage_V1_GetNotificationRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.notification != rhs.notification {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertNotificationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    3: .same(proto: "notification"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertNotificationRequest, rhs: Google_Storage_V1_InsertNotificationRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._notification != rhs._notification {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListNotificationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListNotificationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListNotificationsRequest, rhs: Google_Storage_V1_ListNotificationsRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_DeleteObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    3: .same(proto: "object"),
    4: .same(proto: "generation"),
    6: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 3)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 4)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteObjectAccessControlRequest, rhs: Google_Storage_V1_DeleteObjectAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs.object != rhs.object {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    3: .same(proto: "object"),
    4: .same(proto: "generation"),
    6: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 2)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 3)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 4)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetObjectAccessControlRequest, rhs: Google_Storage_V1_GetObjectAccessControlRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.entity != rhs.entity {return false}
    if lhs.object != rhs.object {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .same(proto: "generation"),
    5: .standard(proto: "object_access_control"),
    6: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _object: String = String()
    var _generation: Int64 = 0
    var _objectAccessControl: Google_Storage_V1_ObjectAccessControl? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _object = source._object
      _generation = source._generation
      _objectAccessControl = source._objectAccessControl
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._object) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._generation) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._objectAccessControl) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if !_storage._object.isEmpty {
        try visitor.visitSingularStringField(value: _storage._object, fieldNumber: 2)
      }
      if _storage._generation != 0 {
        try visitor.visitSingularInt64Field(value: _storage._generation, fieldNumber: 3)
      }
      if let v = _storage._objectAccessControl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertObjectAccessControlRequest, rhs: Google_Storage_V1_InsertObjectAccessControlRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._generation != rhs_storage._generation {return false}
        if _storage._objectAccessControl != rhs_storage._objectAccessControl {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListObjectAccessControlsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListObjectAccessControlsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .same(proto: "generation"),
    5: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 2)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListObjectAccessControlsRequest, rhs: Google_Storage_V1_ListObjectAccessControlsRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.object != rhs.object {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_PatchObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    3: .same(proto: "object"),
    4: .same(proto: "generation"),
    5: .standard(proto: "object_access_control"),
    6: .standard(proto: "common_request_params"),
    7: .standard(proto: "update_mask"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _entity: String = String()
    var _object: String = String()
    var _generation: Int64 = 0
    var _objectAccessControl: Google_Storage_V1_ObjectAccessControl? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
    var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _entity = source._entity
      _object = source._object
      _generation = source._generation
      _objectAccessControl = source._objectAccessControl
      _commonRequestParams = source._commonRequestParams
      _updateMask = source._updateMask
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._entity) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._object) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._generation) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._objectAccessControl) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._updateMask) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if !_storage._entity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._entity, fieldNumber: 2)
      }
      if !_storage._object.isEmpty {
        try visitor.visitSingularStringField(value: _storage._object, fieldNumber: 3)
      }
      if _storage._generation != 0 {
        try visitor.visitSingularInt64Field(value: _storage._generation, fieldNumber: 4)
      }
      if let v = _storage._objectAccessControl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._updateMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_PatchObjectAccessControlRequest, rhs: Google_Storage_V1_PatchObjectAccessControlRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._generation != rhs_storage._generation {return false}
        if _storage._objectAccessControl != rhs_storage._objectAccessControl {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        if _storage._updateMask != rhs_storage._updateMask {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_UpdateObjectAccessControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateObjectAccessControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "entity"),
    3: .same(proto: "object"),
    4: .same(proto: "generation"),
    6: .standard(proto: "object_access_control"),
    7: .standard(proto: "common_request_params"),
    8: .standard(proto: "update_mask"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _entity: String = String()
    var _object: String = String()
    var _generation: Int64 = 0
    var _objectAccessControl: Google_Storage_V1_ObjectAccessControl? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil
    var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _entity = source._entity
      _object = source._object
      _generation = source._generation
      _objectAccessControl = source._objectAccessControl
      _commonRequestParams = source._commonRequestParams
      _updateMask = source._updateMask
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._entity) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._object) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._generation) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._objectAccessControl) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._updateMask) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if !_storage._entity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._entity, fieldNumber: 2)
      }
      if !_storage._object.isEmpty {
        try visitor.visitSingularStringField(value: _storage._object, fieldNumber: 3)
      }
      if _storage._generation != 0 {
        try visitor.visitSingularInt64Field(value: _storage._generation, fieldNumber: 4)
      }
      if let v = _storage._objectAccessControl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._updateMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_UpdateObjectAccessControlRequest, rhs: Google_Storage_V1_UpdateObjectAccessControlRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._generation != rhs_storage._generation {return false}
        if _storage._objectAccessControl != rhs_storage._objectAccessControl {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        if _storage._updateMask != rhs_storage._updateMask {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ComposeObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComposeObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "destination_bucket"),
    2: .standard(proto: "destination_object"),
    3: .standard(proto: "destination_predefined_acl"),
    11: .same(proto: "destination"),
    12: .standard(proto: "source_objects"),
    4: .standard(proto: "if_generation_match"),
    5: .standard(proto: "if_metageneration_match"),
    6: .standard(proto: "kms_key_name"),
    9: .standard(proto: "common_object_request_params"),
    10: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.destinationBucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.destinationObject) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.destinationPredefinedAcl) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.kmsKeyName) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.sourceObjects) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.destinationBucket.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationBucket, fieldNumber: 1)
    }
    if !self.destinationObject.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationObject, fieldNumber: 2)
    }
    if self.destinationPredefinedAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.destinationPredefinedAcl, fieldNumber: 3)
    }
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.kmsKeyName.isEmpty {
      try visitor.visitSingularStringField(value: self.kmsKeyName, fieldNumber: 6)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if !self.sourceObjects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sourceObjects, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ComposeObjectRequest, rhs: Google_Storage_V1_ComposeObjectRequest) -> Bool {
    if lhs.destinationBucket != rhs.destinationBucket {return false}
    if lhs.destinationObject != rhs.destinationObject {return false}
    if lhs.destinationPredefinedAcl != rhs.destinationPredefinedAcl {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.sourceObjects != rhs.sourceObjects {return false}
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs.kmsKeyName != rhs.kmsKeyName {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ComposeObjectRequest.SourceObjects: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Storage_V1_ComposeObjectRequest.protoMessageName + ".SourceObjects"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "generation"),
    3: .standard(proto: "object_preconditions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._objectPreconditions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 2)
    }
    if let v = self._objectPreconditions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ComposeObjectRequest.SourceObjects, rhs: Google_Storage_V1_ComposeObjectRequest.SourceObjects) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._objectPreconditions != rhs._objectPreconditions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ComposeObjectRequest.SourceObjects.ObjectPreconditions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Storage_V1_ComposeObjectRequest.SourceObjects.protoMessageName + ".ObjectPreconditions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "if_generation_match"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ComposeObjectRequest.SourceObjects.ObjectPreconditions, rhs: Google_Storage_V1_ComposeObjectRequest.SourceObjects.ObjectPreconditions) -> Bool {
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_CopyObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CopyObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "destination_bucket"),
    2: .standard(proto: "destination_object"),
    3: .standard(proto: "destination_predefined_acl"),
    4: .standard(proto: "if_generation_match"),
    5: .standard(proto: "if_generation_not_match"),
    6: .standard(proto: "if_metageneration_match"),
    7: .standard(proto: "if_metageneration_not_match"),
    8: .standard(proto: "if_source_generation_match"),
    9: .standard(proto: "if_source_generation_not_match"),
    10: .standard(proto: "if_source_metageneration_match"),
    11: .standard(proto: "if_source_metageneration_not_match"),
    12: .same(proto: "projection"),
    13: .standard(proto: "source_bucket"),
    14: .standard(proto: "source_object"),
    15: .standard(proto: "source_generation"),
    17: .same(proto: "destination"),
    20: .standard(proto: "destination_kms_key_name"),
    18: .standard(proto: "common_object_request_params"),
    19: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _destinationBucket: String = String()
    var _destinationObject: String = String()
    var _destinationPredefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified
    var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _projection: Google_Storage_V1_CommonEnums.Projection = .unspecified
    var _sourceBucket: String = String()
    var _sourceObject: String = String()
    var _sourceGeneration: Int64 = 0
    var _destination: Google_Storage_V1_Object? = nil
    var _destinationKmsKeyName: String = String()
    var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _destinationBucket = source._destinationBucket
      _destinationObject = source._destinationObject
      _destinationPredefinedAcl = source._destinationPredefinedAcl
      _ifGenerationMatch = source._ifGenerationMatch
      _ifGenerationNotMatch = source._ifGenerationNotMatch
      _ifMetagenerationMatch = source._ifMetagenerationMatch
      _ifMetagenerationNotMatch = source._ifMetagenerationNotMatch
      _ifSourceGenerationMatch = source._ifSourceGenerationMatch
      _ifSourceGenerationNotMatch = source._ifSourceGenerationNotMatch
      _ifSourceMetagenerationMatch = source._ifSourceMetagenerationMatch
      _ifSourceMetagenerationNotMatch = source._ifSourceMetagenerationNotMatch
      _projection = source._projection
      _sourceBucket = source._sourceBucket
      _sourceObject = source._sourceObject
      _sourceGeneration = source._sourceGeneration
      _destination = source._destination
      _destinationKmsKeyName = source._destinationKmsKeyName
      _commonObjectRequestParams = source._commonObjectRequestParams
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._destinationBucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._destinationObject) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._destinationPredefinedAcl) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._ifGenerationMatch) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._ifGenerationNotMatch) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._ifMetagenerationMatch) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._ifMetagenerationNotMatch) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceGenerationMatch) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceGenerationNotMatch) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceMetagenerationMatch) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceMetagenerationNotMatch) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._projection) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._sourceBucket) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._sourceObject) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._sourceGeneration) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._destination) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._commonObjectRequestParams) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._destinationKmsKeyName) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._destinationBucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationBucket, fieldNumber: 1)
      }
      if !_storage._destinationObject.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationObject, fieldNumber: 2)
      }
      if _storage._destinationPredefinedAcl != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._destinationPredefinedAcl, fieldNumber: 3)
      }
      if let v = _storage._ifGenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._ifGenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._ifMetagenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._ifMetagenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._ifSourceGenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._ifSourceGenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._ifSourceMetagenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._ifSourceMetagenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._projection != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._projection, fieldNumber: 12)
      }
      if !_storage._sourceBucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceBucket, fieldNumber: 13)
      }
      if !_storage._sourceObject.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceObject, fieldNumber: 14)
      }
      if _storage._sourceGeneration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sourceGeneration, fieldNumber: 15)
      }
      if let v = _storage._destination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._commonObjectRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if !_storage._destinationKmsKeyName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationKmsKeyName, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_CopyObjectRequest, rhs: Google_Storage_V1_CopyObjectRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._destinationBucket != rhs_storage._destinationBucket {return false}
        if _storage._destinationObject != rhs_storage._destinationObject {return false}
        if _storage._destinationPredefinedAcl != rhs_storage._destinationPredefinedAcl {return false}
        if _storage._ifGenerationMatch != rhs_storage._ifGenerationMatch {return false}
        if _storage._ifGenerationNotMatch != rhs_storage._ifGenerationNotMatch {return false}
        if _storage._ifMetagenerationMatch != rhs_storage._ifMetagenerationMatch {return false}
        if _storage._ifMetagenerationNotMatch != rhs_storage._ifMetagenerationNotMatch {return false}
        if _storage._ifSourceGenerationMatch != rhs_storage._ifSourceGenerationMatch {return false}
        if _storage._ifSourceGenerationNotMatch != rhs_storage._ifSourceGenerationNotMatch {return false}
        if _storage._ifSourceMetagenerationMatch != rhs_storage._ifSourceMetagenerationMatch {return false}
        if _storage._ifSourceMetagenerationNotMatch != rhs_storage._ifSourceMetagenerationNotMatch {return false}
        if _storage._projection != rhs_storage._projection {return false}
        if _storage._sourceBucket != rhs_storage._sourceBucket {return false}
        if _storage._sourceObject != rhs_storage._sourceObject {return false}
        if _storage._sourceGeneration != rhs_storage._sourceGeneration {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._destinationKmsKeyName != rhs_storage._destinationKmsKeyName {return false}
        if _storage._commonObjectRequestParams != rhs_storage._commonObjectRequestParams {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_DeleteObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .standard(proto: "upload_id"),
    4: .same(proto: "generation"),
    5: .standard(proto: "if_generation_match"),
    6: .standard(proto: "if_generation_not_match"),
    7: .standard(proto: "if_metageneration_match"),
    8: .standard(proto: "if_metageneration_not_match"),
    10: .standard(proto: "common_object_request_params"),
    11: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uploadID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationNotMatch) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 2)
    }
    if !self.uploadID.isEmpty {
      try visitor.visitSingularStringField(value: self.uploadID, fieldNumber: 3)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 4)
    }
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._ifGenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteObjectRequest, rhs: Google_Storage_V1_DeleteObjectRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.object != rhs.object {return false}
    if lhs.uploadID != rhs.uploadID {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs._ifGenerationNotMatch != rhs._ifGenerationNotMatch {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetObjectMediaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetObjectMediaRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .same(proto: "generation"),
    4: .standard(proto: "read_offset"),
    5: .standard(proto: "read_limit"),
    6: .standard(proto: "if_generation_match"),
    7: .standard(proto: "if_generation_not_match"),
    8: .standard(proto: "if_metageneration_match"),
    9: .standard(proto: "if_metageneration_not_match"),
    11: .standard(proto: "common_object_request_params"),
    12: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.readOffset) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.readLimit) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationNotMatch) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 2)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 3)
    }
    if self.readOffset != 0 {
      try visitor.visitSingularInt64Field(value: self.readOffset, fieldNumber: 4)
    }
    if self.readLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.readLimit, fieldNumber: 5)
    }
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._ifGenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetObjectMediaRequest, rhs: Google_Storage_V1_GetObjectMediaRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.object != rhs.object {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs.readLimit != rhs.readLimit {return false}
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs._ifGenerationNotMatch != rhs._ifGenerationNotMatch {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .same(proto: "generation"),
    4: .standard(proto: "if_generation_match"),
    5: .standard(proto: "if_generation_not_match"),
    6: .standard(proto: "if_metageneration_match"),
    7: .standard(proto: "if_metageneration_not_match"),
    8: .same(proto: "projection"),
    10: .standard(proto: "common_object_request_params"),
    11: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationNotMatch) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 2)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 3)
    }
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._ifGenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 8)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetObjectRequest, rhs: Google_Storage_V1_GetObjectRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.object != rhs.object {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs._ifGenerationNotMatch != rhs._ifGenerationNotMatch {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetObjectMediaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetObjectMediaResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "checksummed_data"),
    2: .standard(proto: "object_checksums"),
    3: .standard(proto: "content_range"),
    4: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checksummedData) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._objectChecksums) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._contentRange) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._checksummedData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._objectChecksums {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._contentRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetObjectMediaResponse, rhs: Google_Storage_V1_GetObjectMediaResponse) -> Bool {
    if lhs._checksummedData != rhs._checksummedData {return false}
    if lhs._objectChecksums != rhs._objectChecksums {return false}
    if lhs._contentRange != rhs._contentRange {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertObjectSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertObjectSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resource"),
    2: .standard(proto: "predefined_acl"),
    3: .standard(proto: "if_generation_match"),
    4: .standard(proto: "if_generation_not_match"),
    5: .standard(proto: "if_metageneration_match"),
    6: .standard(proto: "if_metageneration_not_match"),
    7: .same(proto: "projection"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.predefinedAcl) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationNotMatch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.predefinedAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedAcl, fieldNumber: 2)
    }
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._ifGenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertObjectSpec, rhs: Google_Storage_V1_InsertObjectSpec) -> Bool {
    if lhs._resource != rhs._resource {return false}
    if lhs.predefinedAcl != rhs.predefinedAcl {return false}
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs._ifGenerationNotMatch != rhs._ifGenerationNotMatch {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_InsertObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InsertObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "upload_id"),
    2: .standard(proto: "insert_object_spec"),
    3: .standard(proto: "write_offset"),
    4: .standard(proto: "checksummed_data"),
    5: .same(proto: "reference"),
    6: .standard(proto: "object_checksums"),
    7: .standard(proto: "finish_write"),
    8: .standard(proto: "common_object_request_params"),
    9: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _firstMessage: Google_Storage_V1_InsertObjectRequest.OneOf_FirstMessage?
    var _writeOffset: Int64 = 0
    var _data: Google_Storage_V1_InsertObjectRequest.OneOf_Data?
    var _objectChecksums: Google_Storage_V1_ObjectChecksums? = nil
    var _finishWrite: Bool = false
    var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _firstMessage = source._firstMessage
      _writeOffset = source._writeOffset
      _data = source._data
      _objectChecksums = source._objectChecksums
      _finishWrite = source._finishWrite
      _commonObjectRequestParams = source._commonObjectRequestParams
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          if _storage._firstMessage != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._firstMessage = .uploadID(v)}
        }()
        case 2: try {
          var v: Google_Storage_V1_InsertObjectSpec?
          if let current = _storage._firstMessage {
            try decoder.handleConflictingOneOf()
            if case .insertObjectSpec(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._firstMessage = .insertObjectSpec(v)}
        }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._writeOffset) }()
        case 4: try {
          var v: Google_Storage_V1_ChecksummedData?
          if let current = _storage._data {
            try decoder.handleConflictingOneOf()
            if case .checksummedData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._data = .checksummedData(v)}
        }()
        case 5: try {
          var v: Google_Storage_V1_GetObjectMediaRequest?
          if let current = _storage._data {
            try decoder.handleConflictingOneOf()
            if case .reference(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._data = .reference(v)}
        }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._objectChecksums) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._finishWrite) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._commonObjectRequestParams) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._firstMessage {
      case .uploadID?: try {
        guard case .uploadID(let v)? = _storage._firstMessage else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }()
      case .insertObjectSpec?: try {
        guard case .insertObjectSpec(let v)? = _storage._firstMessage else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case nil: break
      }
      if _storage._writeOffset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._writeOffset, fieldNumber: 3)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._data {
      case .checksummedData?: try {
        guard case .checksummedData(let v)? = _storage._data else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .reference?: try {
        guard case .reference(let v)? = _storage._data else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case nil: break
      }
      if let v = _storage._objectChecksums {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._finishWrite != false {
        try visitor.visitSingularBoolField(value: _storage._finishWrite, fieldNumber: 7)
      }
      if let v = _storage._commonObjectRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_InsertObjectRequest, rhs: Google_Storage_V1_InsertObjectRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._firstMessage != rhs_storage._firstMessage {return false}
        if _storage._writeOffset != rhs_storage._writeOffset {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._objectChecksums != rhs_storage._objectChecksums {return false}
        if _storage._finishWrite != rhs_storage._finishWrite {return false}
        if _storage._commonObjectRequestParams != rhs_storage._commonObjectRequestParams {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListObjectsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListObjectsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "delimiter"),
    3: .standard(proto: "include_trailing_delimiter"),
    4: .standard(proto: "max_results"),
    5: .standard(proto: "page_token"),
    6: .same(proto: "prefix"),
    7: .same(proto: "projection"),
    9: .same(proto: "versions"),
    10: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.delimiter) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.includeTrailingDelimiter) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.maxResults) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.prefix) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.versions) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.delimiter.isEmpty {
      try visitor.visitSingularStringField(value: self.delimiter, fieldNumber: 2)
    }
    if self.includeTrailingDelimiter != false {
      try visitor.visitSingularBoolField(value: self.includeTrailingDelimiter, fieldNumber: 3)
    }
    if self.maxResults != 0 {
      try visitor.visitSingularInt32Field(value: self.maxResults, fieldNumber: 4)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 5)
    }
    if !self.prefix.isEmpty {
      try visitor.visitSingularStringField(value: self.prefix, fieldNumber: 6)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 7)
    }
    if self.versions != false {
      try visitor.visitSingularBoolField(value: self.versions, fieldNumber: 9)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListObjectsRequest, rhs: Google_Storage_V1_ListObjectsRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.delimiter != rhs.delimiter {return false}
    if lhs.includeTrailingDelimiter != rhs.includeTrailingDelimiter {return false}
    if lhs.maxResults != rhs.maxResults {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.prefix != rhs.prefix {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs.versions != rhs.versions {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_QueryWriteStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryWriteStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "upload_id"),
    2: .standard(proto: "common_object_request_params"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uploadID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uploadID.isEmpty {
      try visitor.visitSingularStringField(value: self.uploadID, fieldNumber: 1)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_QueryWriteStatusRequest, rhs: Google_Storage_V1_QueryWriteStatusRequest) -> Bool {
    if lhs.uploadID != rhs.uploadID {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_QueryWriteStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryWriteStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "committed_size"),
    2: .same(proto: "complete"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.committedSize) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.complete) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.committedSize != 0 {
      try visitor.visitSingularInt64Field(value: self.committedSize, fieldNumber: 1)
    }
    if self.complete != false {
      try visitor.visitSingularBoolField(value: self.complete, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_QueryWriteStatusResponse, rhs: Google_Storage_V1_QueryWriteStatusResponse) -> Bool {
    if lhs.committedSize != rhs.committedSize {return false}
    if lhs.complete != rhs.complete {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_RewriteObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RewriteObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "destination_bucket"),
    2: .standard(proto: "destination_object"),
    3: .standard(proto: "destination_kms_key_name"),
    4: .standard(proto: "destination_predefined_acl"),
    5: .standard(proto: "if_generation_match"),
    6: .standard(proto: "if_generation_not_match"),
    7: .standard(proto: "if_metageneration_match"),
    8: .standard(proto: "if_metageneration_not_match"),
    9: .standard(proto: "if_source_generation_match"),
    10: .standard(proto: "if_source_generation_not_match"),
    11: .standard(proto: "if_source_metageneration_match"),
    12: .standard(proto: "if_source_metageneration_not_match"),
    13: .standard(proto: "max_bytes_rewritten_per_call"),
    14: .same(proto: "projection"),
    15: .standard(proto: "rewrite_token"),
    16: .standard(proto: "source_bucket"),
    17: .standard(proto: "source_object"),
    18: .standard(proto: "source_generation"),
    20: .same(proto: "object"),
    21: .standard(proto: "copy_source_encryption_algorithm"),
    22: .standard(proto: "copy_source_encryption_key"),
    23: .standard(proto: "copy_source_encryption_key_sha256"),
    24: .standard(proto: "common_object_request_params"),
    25: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _destinationBucket: String = String()
    var _destinationObject: String = String()
    var _destinationKmsKeyName: String = String()
    var _destinationPredefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified
    var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifSourceMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _maxBytesRewrittenPerCall: Int64 = 0
    var _projection: Google_Storage_V1_CommonEnums.Projection = .unspecified
    var _rewriteToken: String = String()
    var _sourceBucket: String = String()
    var _sourceObject: String = String()
    var _sourceGeneration: Int64 = 0
    var _object: Google_Storage_V1_Object? = nil
    var _copySourceEncryptionAlgorithm: String = String()
    var _copySourceEncryptionKey: String = String()
    var _copySourceEncryptionKeySha256: String = String()
    var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _destinationBucket = source._destinationBucket
      _destinationObject = source._destinationObject
      _destinationKmsKeyName = source._destinationKmsKeyName
      _destinationPredefinedAcl = source._destinationPredefinedAcl
      _ifGenerationMatch = source._ifGenerationMatch
      _ifGenerationNotMatch = source._ifGenerationNotMatch
      _ifMetagenerationMatch = source._ifMetagenerationMatch
      _ifMetagenerationNotMatch = source._ifMetagenerationNotMatch
      _ifSourceGenerationMatch = source._ifSourceGenerationMatch
      _ifSourceGenerationNotMatch = source._ifSourceGenerationNotMatch
      _ifSourceMetagenerationMatch = source._ifSourceMetagenerationMatch
      _ifSourceMetagenerationNotMatch = source._ifSourceMetagenerationNotMatch
      _maxBytesRewrittenPerCall = source._maxBytesRewrittenPerCall
      _projection = source._projection
      _rewriteToken = source._rewriteToken
      _sourceBucket = source._sourceBucket
      _sourceObject = source._sourceObject
      _sourceGeneration = source._sourceGeneration
      _object = source._object
      _copySourceEncryptionAlgorithm = source._copySourceEncryptionAlgorithm
      _copySourceEncryptionKey = source._copySourceEncryptionKey
      _copySourceEncryptionKeySha256 = source._copySourceEncryptionKeySha256
      _commonObjectRequestParams = source._commonObjectRequestParams
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._destinationBucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._destinationObject) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._destinationKmsKeyName) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._destinationPredefinedAcl) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._ifGenerationMatch) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._ifGenerationNotMatch) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._ifMetagenerationMatch) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._ifMetagenerationNotMatch) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceGenerationMatch) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceGenerationNotMatch) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceMetagenerationMatch) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._ifSourceMetagenerationNotMatch) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._maxBytesRewrittenPerCall) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._projection) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._rewriteToken) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._sourceBucket) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._sourceObject) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._sourceGeneration) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._object) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._copySourceEncryptionAlgorithm) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._copySourceEncryptionKey) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._copySourceEncryptionKeySha256) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._commonObjectRequestParams) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._destinationBucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationBucket, fieldNumber: 1)
      }
      if !_storage._destinationObject.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationObject, fieldNumber: 2)
      }
      if !_storage._destinationKmsKeyName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationKmsKeyName, fieldNumber: 3)
      }
      if _storage._destinationPredefinedAcl != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._destinationPredefinedAcl, fieldNumber: 4)
      }
      if let v = _storage._ifGenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._ifGenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._ifMetagenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._ifMetagenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._ifSourceGenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._ifSourceGenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._ifSourceMetagenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._ifSourceMetagenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._maxBytesRewrittenPerCall != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxBytesRewrittenPerCall, fieldNumber: 13)
      }
      if _storage._projection != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._projection, fieldNumber: 14)
      }
      if !_storage._rewriteToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rewriteToken, fieldNumber: 15)
      }
      if !_storage._sourceBucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceBucket, fieldNumber: 16)
      }
      if !_storage._sourceObject.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceObject, fieldNumber: 17)
      }
      if _storage._sourceGeneration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sourceGeneration, fieldNumber: 18)
      }
      if let v = _storage._object {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._copySourceEncryptionAlgorithm.isEmpty {
        try visitor.visitSingularStringField(value: _storage._copySourceEncryptionAlgorithm, fieldNumber: 21)
      }
      if !_storage._copySourceEncryptionKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._copySourceEncryptionKey, fieldNumber: 22)
      }
      if !_storage._copySourceEncryptionKeySha256.isEmpty {
        try visitor.visitSingularStringField(value: _storage._copySourceEncryptionKeySha256, fieldNumber: 23)
      }
      if let v = _storage._commonObjectRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_RewriteObjectRequest, rhs: Google_Storage_V1_RewriteObjectRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._destinationBucket != rhs_storage._destinationBucket {return false}
        if _storage._destinationObject != rhs_storage._destinationObject {return false}
        if _storage._destinationKmsKeyName != rhs_storage._destinationKmsKeyName {return false}
        if _storage._destinationPredefinedAcl != rhs_storage._destinationPredefinedAcl {return false}
        if _storage._ifGenerationMatch != rhs_storage._ifGenerationMatch {return false}
        if _storage._ifGenerationNotMatch != rhs_storage._ifGenerationNotMatch {return false}
        if _storage._ifMetagenerationMatch != rhs_storage._ifMetagenerationMatch {return false}
        if _storage._ifMetagenerationNotMatch != rhs_storage._ifMetagenerationNotMatch {return false}
        if _storage._ifSourceGenerationMatch != rhs_storage._ifSourceGenerationMatch {return false}
        if _storage._ifSourceGenerationNotMatch != rhs_storage._ifSourceGenerationNotMatch {return false}
        if _storage._ifSourceMetagenerationMatch != rhs_storage._ifSourceMetagenerationMatch {return false}
        if _storage._ifSourceMetagenerationNotMatch != rhs_storage._ifSourceMetagenerationNotMatch {return false}
        if _storage._maxBytesRewrittenPerCall != rhs_storage._maxBytesRewrittenPerCall {return false}
        if _storage._projection != rhs_storage._projection {return false}
        if _storage._rewriteToken != rhs_storage._rewriteToken {return false}
        if _storage._sourceBucket != rhs_storage._sourceBucket {return false}
        if _storage._sourceObject != rhs_storage._sourceObject {return false}
        if _storage._sourceGeneration != rhs_storage._sourceGeneration {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._copySourceEncryptionAlgorithm != rhs_storage._copySourceEncryptionAlgorithm {return false}
        if _storage._copySourceEncryptionKey != rhs_storage._copySourceEncryptionKey {return false}
        if _storage._copySourceEncryptionKeySha256 != rhs_storage._copySourceEncryptionKeySha256 {return false}
        if _storage._commonObjectRequestParams != rhs_storage._commonObjectRequestParams {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_RewriteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RewriteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_bytes_rewritten"),
    2: .standard(proto: "object_size"),
    3: .same(proto: "done"),
    4: .standard(proto: "rewrite_token"),
    5: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.totalBytesRewritten) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.objectSize) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.done) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.rewriteToken) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalBytesRewritten != 0 {
      try visitor.visitSingularInt64Field(value: self.totalBytesRewritten, fieldNumber: 1)
    }
    if self.objectSize != 0 {
      try visitor.visitSingularInt64Field(value: self.objectSize, fieldNumber: 2)
    }
    if self.done != false {
      try visitor.visitSingularBoolField(value: self.done, fieldNumber: 3)
    }
    if !self.rewriteToken.isEmpty {
      try visitor.visitSingularStringField(value: self.rewriteToken, fieldNumber: 4)
    }
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_RewriteResponse, rhs: Google_Storage_V1_RewriteResponse) -> Bool {
    if lhs.totalBytesRewritten != rhs.totalBytesRewritten {return false}
    if lhs.objectSize != rhs.objectSize {return false}
    if lhs.done != rhs.done {return false}
    if lhs.rewriteToken != rhs.rewriteToken {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_StartResumableWriteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartResumableWriteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "insert_object_spec"),
    3: .standard(proto: "common_object_request_params"),
    4: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._insertObjectSpec) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._insertObjectSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_StartResumableWriteRequest, rhs: Google_Storage_V1_StartResumableWriteRequest) -> Bool {
    if lhs._insertObjectSpec != rhs._insertObjectSpec {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_StartResumableWriteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartResumableWriteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "upload_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uploadID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uploadID.isEmpty {
      try visitor.visitSingularStringField(value: self.uploadID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_StartResumableWriteResponse, rhs: Google_Storage_V1_StartResumableWriteResponse) -> Bool {
    if lhs.uploadID != rhs.uploadID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_PatchObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .same(proto: "generation"),
    4: .standard(proto: "if_generation_match"),
    5: .standard(proto: "if_generation_not_match"),
    6: .standard(proto: "if_metageneration_match"),
    7: .standard(proto: "if_metageneration_not_match"),
    8: .standard(proto: "predefined_acl"),
    9: .same(proto: "projection"),
    11: .same(proto: "metadata"),
    12: .standard(proto: "update_mask"),
    13: .standard(proto: "common_object_request_params"),
    14: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _object: String = String()
    var _generation: Int64 = 0
    var _ifGenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifGenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifMetagenerationMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifMetagenerationNotMatch: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _predefinedAcl: Google_Storage_V1_CommonEnums.PredefinedObjectAcl = .unspecified
    var _projection: Google_Storage_V1_CommonEnums.Projection = .unspecified
    var _metadata: Google_Storage_V1_Object? = nil
    var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _commonObjectRequestParams: Google_Storage_V1_CommonObjectRequestParams? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _object = source._object
      _generation = source._generation
      _ifGenerationMatch = source._ifGenerationMatch
      _ifGenerationNotMatch = source._ifGenerationNotMatch
      _ifMetagenerationMatch = source._ifMetagenerationMatch
      _ifMetagenerationNotMatch = source._ifMetagenerationNotMatch
      _predefinedAcl = source._predefinedAcl
      _projection = source._projection
      _metadata = source._metadata
      _updateMask = source._updateMask
      _commonObjectRequestParams = source._commonObjectRequestParams
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._object) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._generation) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._ifGenerationMatch) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._ifGenerationNotMatch) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._ifMetagenerationMatch) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._ifMetagenerationNotMatch) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._predefinedAcl) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._projection) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._updateMask) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._commonObjectRequestParams) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if !_storage._object.isEmpty {
        try visitor.visitSingularStringField(value: _storage._object, fieldNumber: 2)
      }
      if _storage._generation != 0 {
        try visitor.visitSingularInt64Field(value: _storage._generation, fieldNumber: 3)
      }
      if let v = _storage._ifGenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._ifGenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._ifMetagenerationMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._ifMetagenerationNotMatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._predefinedAcl != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._predefinedAcl, fieldNumber: 8)
      }
      if _storage._projection != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._projection, fieldNumber: 9)
      }
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._updateMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._commonObjectRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_PatchObjectRequest, rhs: Google_Storage_V1_PatchObjectRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._generation != rhs_storage._generation {return false}
        if _storage._ifGenerationMatch != rhs_storage._ifGenerationMatch {return false}
        if _storage._ifGenerationNotMatch != rhs_storage._ifGenerationNotMatch {return false}
        if _storage._ifMetagenerationMatch != rhs_storage._ifMetagenerationMatch {return false}
        if _storage._ifMetagenerationNotMatch != rhs_storage._ifMetagenerationNotMatch {return false}
        if _storage._predefinedAcl != rhs_storage._predefinedAcl {return false}
        if _storage._projection != rhs_storage._projection {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._updateMask != rhs_storage._updateMask {return false}
        if _storage._commonObjectRequestParams != rhs_storage._commonObjectRequestParams {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_UpdateObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "object"),
    3: .same(proto: "generation"),
    4: .standard(proto: "if_generation_match"),
    5: .standard(proto: "if_generation_not_match"),
    6: .standard(proto: "if_metageneration_match"),
    7: .standard(proto: "if_metageneration_not_match"),
    8: .standard(proto: "predefined_acl"),
    9: .same(proto: "projection"),
    11: .same(proto: "metadata"),
    12: .standard(proto: "common_object_request_params"),
    13: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bucket) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.object) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationMatch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._ifGenerationNotMatch) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationMatch) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._ifMetagenerationNotMatch) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.predefinedAcl) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.projection) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._commonObjectRequestParams) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucket.isEmpty {
      try visitor.visitSingularStringField(value: self.bucket, fieldNumber: 1)
    }
    if !self.object.isEmpty {
      try visitor.visitSingularStringField(value: self.object, fieldNumber: 2)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 3)
    }
    if let v = self._ifGenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._ifGenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._ifMetagenerationMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._ifMetagenerationNotMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.predefinedAcl != .unspecified {
      try visitor.visitSingularEnumField(value: self.predefinedAcl, fieldNumber: 8)
    }
    if self.projection != .unspecified {
      try visitor.visitSingularEnumField(value: self.projection, fieldNumber: 9)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._commonObjectRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_UpdateObjectRequest, rhs: Google_Storage_V1_UpdateObjectRequest) -> Bool {
    if lhs.bucket != rhs.bucket {return false}
    if lhs.object != rhs.object {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._ifGenerationMatch != rhs._ifGenerationMatch {return false}
    if lhs._ifGenerationNotMatch != rhs._ifGenerationNotMatch {return false}
    if lhs._ifMetagenerationMatch != rhs._ifMetagenerationMatch {return false}
    if lhs._ifMetagenerationNotMatch != rhs._ifMetagenerationNotMatch {return false}
    if lhs.predefinedAcl != rhs.predefinedAcl {return false}
    if lhs.projection != rhs.projection {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._commonObjectRequestParams != rhs._commonObjectRequestParams {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_WatchAllObjectsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchAllObjectsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucket"),
    2: .same(proto: "versions"),
    3: .same(proto: "delimiter"),
    4: .standard(proto: "max_results"),
    5: .same(proto: "prefix"),
    6: .standard(proto: "include_trailing_delimiter"),
    7: .standard(proto: "page_token"),
    8: .same(proto: "projection"),
    10: .same(proto: "channel"),
    11: .standard(proto: "common_request_params"),
  ]

  fileprivate class _StorageClass {
    var _bucket: String = String()
    var _versions: Bool = false
    var _delimiter: String = String()
    var _maxResults: Int32 = 0
    var _prefix: String = String()
    var _includeTrailingDelimiter: Bool = false
    var _pageToken: String = String()
    var _projection: Google_Storage_V1_CommonEnums.Projection = .unspecified
    var _channel: Google_Storage_V1_Channel? = nil
    var _commonRequestParams: Google_Storage_V1_CommonRequestParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bucket = source._bucket
      _versions = source._versions
      _delimiter = source._delimiter
      _maxResults = source._maxResults
      _prefix = source._prefix
      _includeTrailingDelimiter = source._includeTrailingDelimiter
      _pageToken = source._pageToken
      _projection = source._projection
      _channel = source._channel
      _commonRequestParams = source._commonRequestParams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bucket) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._versions) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._delimiter) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._maxResults) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._prefix) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._includeTrailingDelimiter) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._pageToken) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._projection) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._channel) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._commonRequestParams) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bucket.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bucket, fieldNumber: 1)
      }
      if _storage._versions != false {
        try visitor.visitSingularBoolField(value: _storage._versions, fieldNumber: 2)
      }
      if !_storage._delimiter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delimiter, fieldNumber: 3)
      }
      if _storage._maxResults != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxResults, fieldNumber: 4)
      }
      if !_storage._prefix.isEmpty {
        try visitor.visitSingularStringField(value: _storage._prefix, fieldNumber: 5)
      }
      if _storage._includeTrailingDelimiter != false {
        try visitor.visitSingularBoolField(value: _storage._includeTrailingDelimiter, fieldNumber: 6)
      }
      if !_storage._pageToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pageToken, fieldNumber: 7)
      }
      if _storage._projection != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._projection, fieldNumber: 8)
      }
      if let v = _storage._channel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._commonRequestParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_WatchAllObjectsRequest, rhs: Google_Storage_V1_WatchAllObjectsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bucket != rhs_storage._bucket {return false}
        if _storage._versions != rhs_storage._versions {return false}
        if _storage._delimiter != rhs_storage._delimiter {return false}
        if _storage._maxResults != rhs_storage._maxResults {return false}
        if _storage._prefix != rhs_storage._prefix {return false}
        if _storage._includeTrailingDelimiter != rhs_storage._includeTrailingDelimiter {return false}
        if _storage._pageToken != rhs_storage._pageToken {return false}
        if _storage._projection != rhs_storage._projection {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._commonRequestParams != rhs_storage._commonRequestParams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetProjectServiceAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProjectServiceAccountRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetProjectServiceAccountRequest, rhs: Google_Storage_V1_GetProjectServiceAccountRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_CreateHmacKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateHmacKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "service_account_email"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serviceAccountEmail) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.serviceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountEmail, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_CreateHmacKeyRequest, rhs: Google_Storage_V1_CreateHmacKeyRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.serviceAccountEmail != rhs.serviceAccountEmail {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_CreateHmacKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateHmacKeyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.secret) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.secret.isEmpty {
      try visitor.visitSingularStringField(value: self.secret, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_CreateHmacKeyResponse, rhs: Google_Storage_V1_CreateHmacKeyResponse) -> Bool {
    if lhs._metadata != rhs._metadata {return false}
    if lhs.secret != rhs.secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_DeleteHmacKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteHmacKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "access_id"),
    2: .standard(proto: "project_id"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accessID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accessID.isEmpty {
      try visitor.visitSingularStringField(value: self.accessID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_DeleteHmacKeyRequest, rhs: Google_Storage_V1_DeleteHmacKeyRequest) -> Bool {
    if lhs.accessID != rhs.accessID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetHmacKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetHmacKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "access_id"),
    2: .standard(proto: "project_id"),
    3: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accessID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accessID.isEmpty {
      try visitor.visitSingularStringField(value: self.accessID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetHmacKeyRequest, rhs: Google_Storage_V1_GetHmacKeyRequest) -> Bool {
    if lhs.accessID != rhs.accessID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListHmacKeysRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListHmacKeysRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "service_account_email"),
    3: .standard(proto: "show_deleted_keys"),
    4: .standard(proto: "max_results"),
    5: .standard(proto: "page_token"),
    6: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serviceAccountEmail) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.showDeletedKeys) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.maxResults) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.serviceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountEmail, fieldNumber: 2)
    }
    if self.showDeletedKeys != false {
      try visitor.visitSingularBoolField(value: self.showDeletedKeys, fieldNumber: 3)
    }
    if self.maxResults != 0 {
      try visitor.visitSingularInt32Field(value: self.maxResults, fieldNumber: 4)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 5)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListHmacKeysRequest, rhs: Google_Storage_V1_ListHmacKeysRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.serviceAccountEmail != rhs.serviceAccountEmail {return false}
    if lhs.showDeletedKeys != rhs.showDeletedKeys {return false}
    if lhs.maxResults != rhs.maxResults {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ListHmacKeysResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListHmacKeysResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "next_page_token"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ListHmacKeysResponse, rhs: Google_Storage_V1_ListHmacKeysResponse) -> Bool {
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_UpdateHmacKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateHmacKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "access_id"),
    2: .standard(proto: "project_id"),
    3: .same(proto: "metadata"),
    5: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accessID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accessID.isEmpty {
      try visitor.visitSingularStringField(value: self.accessID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_UpdateHmacKeyRequest, rhs: Google_Storage_V1_UpdateHmacKeyRequest) -> Bool {
    if lhs.accessID != rhs.accessID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_GetIamPolicyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetIamPolicyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iam_request"),
    2: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._iamRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._iamRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_GetIamPolicyRequest, rhs: Google_Storage_V1_GetIamPolicyRequest) -> Bool {
    if lhs._iamRequest != rhs._iamRequest {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_SetIamPolicyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetIamPolicyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iam_request"),
    2: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._iamRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._iamRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_SetIamPolicyRequest, rhs: Google_Storage_V1_SetIamPolicyRequest) -> Bool {
    if lhs._iamRequest != rhs._iamRequest {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_TestIamPermissionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestIamPermissionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iam_request"),
    2: .standard(proto: "common_request_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._iamRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._commonRequestParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._iamRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commonRequestParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_TestIamPermissionsRequest, rhs: Google_Storage_V1_TestIamPermissionsRequest) -> Bool {
    if lhs._iamRequest != rhs._iamRequest {return false}
    if lhs._commonRequestParams != rhs._commonRequestParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_CommonObjectRequestParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonObjectRequestParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encryption_algorithm"),
    2: .standard(proto: "encryption_key"),
    3: .standard(proto: "encryption_key_sha256"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.encryptionAlgorithm) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.encryptionKey) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.encryptionKeySha256) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encryptionAlgorithm.isEmpty {
      try visitor.visitSingularStringField(value: self.encryptionAlgorithm, fieldNumber: 1)
    }
    if !self.encryptionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.encryptionKey, fieldNumber: 2)
    }
    if !self.encryptionKeySha256.isEmpty {
      try visitor.visitSingularStringField(value: self.encryptionKeySha256, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_CommonObjectRequestParams, rhs: Google_Storage_V1_CommonObjectRequestParams) -> Bool {
    if lhs.encryptionAlgorithm != rhs.encryptionAlgorithm {return false}
    if lhs.encryptionKey != rhs.encryptionKey {return false}
    if lhs.encryptionKeySha256 != rhs.encryptionKeySha256 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_CommonRequestParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonRequestParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_project"),
    2: .standard(proto: "quota_user"),
    4: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userProject) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.quotaUser) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userProject.isEmpty {
      try visitor.visitSingularStringField(value: self.userProject, fieldNumber: 1)
    }
    if !self.quotaUser.isEmpty {
      try visitor.visitSingularStringField(value: self.quotaUser, fieldNumber: 2)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_CommonRequestParams, rhs: Google_Storage_V1_CommonRequestParams) -> Bool {
    if lhs.userProject != rhs.userProject {return false}
    if lhs.quotaUser != rhs.quotaUser {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ServiceConstants: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceConstants"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Storage_V1_ServiceConstants, rhs: Google_Storage_V1_ServiceConstants) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Storage_V1_ServiceConstants.Values: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALUES_UNSPECIFIED"),
    5: .same(proto: "MAX_NOTIFICATION_CUSTOM_ATTRIBUTES"),
    14: .same(proto: "SPLIT_TOKEN_MAX_VALID_DAYS"),
    63: .same(proto: "MAX_LABELS_KEY_VALUE_LENGTH"),
    64: .same(proto: "MAX_LABELS_ENTRIES_COUNT"),
    100: .aliased(proto: "MAX_NOTIFICATION_CONFIGS_PER_BUCKET", aliases: ["MAX_LIFECYCLE_RULES_PER_BUCKET"]),
    128: .same(proto: "MAX_LABELS_KEY_VALUE_BYTES"),
    256: .same(proto: "MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH"),
    1000: .same(proto: "MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST"),
    1024: .aliased(proto: "MAX_CUSTOM_METADATA_FIELD_NAME_BYTES", aliases: ["MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH"]),
    4096: .same(proto: "MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES"),
    8192: .same(proto: "MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES"),
    20480: .same(proto: "MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES"),
    2097152: .aliased(proto: "MAX_READ_CHUNK_BYTES", aliases: ["MAX_WRITE_CHUNK_BYTES"]),
    5242880: .same(proto: "MAX_OBJECT_SIZE_MB"),
  ]
}
