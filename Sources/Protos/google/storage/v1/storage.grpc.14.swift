//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/storage/v1/storage.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Storage_V1_StorageClient, then call methods of this protocol to make API calls.
public protocol Google_Storage_V1_StorageClientProtocol: GRPCClient {
  func deleteBucketAccessControl(
    _ request: Google_Storage_V1_DeleteBucketAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteBucketAccessControlRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getBucketAccessControl(
    _ request: Google_Storage_V1_GetBucketAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl>

  func insertBucketAccessControl(
    _ request: Google_Storage_V1_InsertBucketAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_InsertBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl>

  func listBucketAccessControls(
    _ request: Google_Storage_V1_ListBucketAccessControlsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListBucketAccessControlsRequest, Google_Storage_V1_ListBucketAccessControlsResponse>

  func updateBucketAccessControl(
    _ request: Google_Storage_V1_UpdateBucketAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_UpdateBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl>

  func patchBucketAccessControl(
    _ request: Google_Storage_V1_PatchBucketAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_PatchBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl>

  func deleteBucket(
    _ request: Google_Storage_V1_DeleteBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getBucket(
    _ request: Google_Storage_V1_GetBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetBucketRequest, Google_Storage_V1_Bucket>

  func insertBucket(
    _ request: Google_Storage_V1_InsertBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_InsertBucketRequest, Google_Storage_V1_Bucket>

  func listChannels(
    _ request: Google_Storage_V1_ListChannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListChannelsRequest, Google_Storage_V1_ListChannelsResponse>

  func listBuckets(
    _ request: Google_Storage_V1_ListBucketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListBucketsRequest, Google_Storage_V1_ListBucketsResponse>

  func lockBucketRetentionPolicy(
    _ request: Google_Storage_V1_LockRetentionPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_LockRetentionPolicyRequest, Google_Storage_V1_Bucket>

  func getBucketIamPolicy(
    _ request: Google_Storage_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func setBucketIamPolicy(
    _ request: Google_Storage_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func testBucketIamPermissions(
    _ request: Google_Storage_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

  func patchBucket(
    _ request: Google_Storage_V1_PatchBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_PatchBucketRequest, Google_Storage_V1_Bucket>

  func updateBucket(
    _ request: Google_Storage_V1_UpdateBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_UpdateBucketRequest, Google_Storage_V1_Bucket>

  func stopChannel(
    _ request: Google_Storage_V1_StopChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_StopChannelRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteDefaultObjectAccessControl(
    _ request: Google_Storage_V1_DeleteDefaultObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteDefaultObjectAccessControlRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getDefaultObjectAccessControl(
    _ request: Google_Storage_V1_GetDefaultObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func insertDefaultObjectAccessControl(
    _ request: Google_Storage_V1_InsertDefaultObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_InsertDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func listDefaultObjectAccessControls(
    _ request: Google_Storage_V1_ListDefaultObjectAccessControlsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListDefaultObjectAccessControlsRequest, Google_Storage_V1_ListObjectAccessControlsResponse>

  func patchDefaultObjectAccessControl(
    _ request: Google_Storage_V1_PatchDefaultObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_PatchDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func updateDefaultObjectAccessControl(
    _ request: Google_Storage_V1_UpdateDefaultObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_UpdateDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func deleteNotification(
    _ request: Google_Storage_V1_DeleteNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getNotification(
    _ request: Google_Storage_V1_GetNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetNotificationRequest, Google_Storage_V1_Notification>

  func insertNotification(
    _ request: Google_Storage_V1_InsertNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_InsertNotificationRequest, Google_Storage_V1_Notification>

  func listNotifications(
    _ request: Google_Storage_V1_ListNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListNotificationsRequest, Google_Storage_V1_ListNotificationsResponse>

  func deleteObjectAccessControl(
    _ request: Google_Storage_V1_DeleteObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteObjectAccessControlRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getObjectAccessControl(
    _ request: Google_Storage_V1_GetObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func insertObjectAccessControl(
    _ request: Google_Storage_V1_InsertObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_InsertObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func listObjectAccessControls(
    _ request: Google_Storage_V1_ListObjectAccessControlsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListObjectAccessControlsRequest, Google_Storage_V1_ListObjectAccessControlsResponse>

  func patchObjectAccessControl(
    _ request: Google_Storage_V1_PatchObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_PatchObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func updateObjectAccessControl(
    _ request: Google_Storage_V1_UpdateObjectAccessControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_UpdateObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl>

  func composeObject(
    _ request: Google_Storage_V1_ComposeObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ComposeObjectRequest, Google_Storage_V1_Object>

  func copyObject(
    _ request: Google_Storage_V1_CopyObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_CopyObjectRequest, Google_Storage_V1_Object>

  func deleteObject(
    _ request: Google_Storage_V1_DeleteObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteObjectRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getObject(
    _ request: Google_Storage_V1_GetObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetObjectRequest, Google_Storage_V1_Object>

  func getObjectMedia(
    _ request: Google_Storage_V1_GetObjectMediaRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Storage_V1_GetObjectMediaResponse) -> Void
  ) -> ServerStreamingCall<Google_Storage_V1_GetObjectMediaRequest, Google_Storage_V1_GetObjectMediaResponse>

  func insertObject(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Google_Storage_V1_InsertObjectRequest, Google_Storage_V1_Object>

  func listObjects(
    _ request: Google_Storage_V1_ListObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListObjectsRequest, Google_Storage_V1_ListObjectsResponse>

  func rewriteObject(
    _ request: Google_Storage_V1_RewriteObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_RewriteObjectRequest, Google_Storage_V1_RewriteResponse>

  func startResumableWrite(
    _ request: Google_Storage_V1_StartResumableWriteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_StartResumableWriteRequest, Google_Storage_V1_StartResumableWriteResponse>

  func queryWriteStatus(
    _ request: Google_Storage_V1_QueryWriteStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_QueryWriteStatusRequest, Google_Storage_V1_QueryWriteStatusResponse>

  func patchObject(
    _ request: Google_Storage_V1_PatchObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_PatchObjectRequest, Google_Storage_V1_Object>

  func updateObject(
    _ request: Google_Storage_V1_UpdateObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_UpdateObjectRequest, Google_Storage_V1_Object>

  func getObjectIamPolicy(
    _ request: Google_Storage_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func setObjectIamPolicy(
    _ request: Google_Storage_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func testObjectIamPermissions(
    _ request: Google_Storage_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

  func watchAllObjects(
    _ request: Google_Storage_V1_WatchAllObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_WatchAllObjectsRequest, Google_Storage_V1_Channel>

  func getServiceAccount(
    _ request: Google_Storage_V1_GetProjectServiceAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetProjectServiceAccountRequest, Google_Storage_V1_ServiceAccount>

  func createHmacKey(
    _ request: Google_Storage_V1_CreateHmacKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_CreateHmacKeyRequest, Google_Storage_V1_CreateHmacKeyResponse>

  func deleteHmacKey(
    _ request: Google_Storage_V1_DeleteHmacKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_DeleteHmacKeyRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getHmacKey(
    _ request: Google_Storage_V1_GetHmacKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_GetHmacKeyRequest, Google_Storage_V1_HmacKeyMetadata>

  func listHmacKeys(
    _ request: Google_Storage_V1_ListHmacKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_ListHmacKeysRequest, Google_Storage_V1_ListHmacKeysResponse>

  func updateHmacKey(
    _ request: Google_Storage_V1_UpdateHmacKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Storage_V1_UpdateHmacKeyRequest, Google_Storage_V1_HmacKeyMetadata>

}

extension Google_Storage_V1_StorageClientProtocol {

  /// Permanently deletes the ACL entry for the specified entity on the specified
  /// bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBucketAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteBucketAccessControl(
    _ request: Google_Storage_V1_DeleteBucketAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteBucketAccessControlRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteBucketAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the ACL entry for the specified entity on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBucketAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBucketAccessControl(
    _ request: Google_Storage_V1_GetBucketAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetBucketAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new ACL entry on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to InsertBucketAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func insertBucketAccessControl(
    _ request: Google_Storage_V1_InsertBucketAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_InsertBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/InsertBucketAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves ACL entries on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBucketAccessControls.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listBucketAccessControls(
    _ request: Google_Storage_V1_ListBucketAccessControlsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListBucketAccessControlsRequest, Google_Storage_V1_ListBucketAccessControlsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListBucketAccessControls",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an ACL entry on the specified bucket. Equivalent to
  /// PatchBucketAccessControl, but all unspecified fields will be
  /// reset to their default values.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBucketAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateBucketAccessControl(
    _ request: Google_Storage_V1_UpdateBucketAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_UpdateBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/UpdateBucketAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an ACL entry on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchBucketAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchBucketAccessControl(
    _ request: Google_Storage_V1_PatchBucketAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_PatchBucketAccessControlRequest, Google_Storage_V1_BucketAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/PatchBucketAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes an empty bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteBucket(
    _ request: Google_Storage_V1_DeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns metadata for the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBucket(
    _ request: Google_Storage_V1_GetBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetBucketRequest, Google_Storage_V1_Bucket> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to InsertBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func insertBucket(
    _ request: Google_Storage_V1_InsertBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_InsertBucketRequest, Google_Storage_V1_Bucket> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/InsertBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List active object change notification channels for this bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listChannels(
    _ request: Google_Storage_V1_ListChannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListChannelsRequest, Google_Storage_V1_ListChannelsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListChannels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves a list of buckets for a given project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBuckets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listBuckets(
    _ request: Google_Storage_V1_ListBucketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListBucketsRequest, Google_Storage_V1_ListBucketsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListBuckets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Locks retention policy on a bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to LockBucketRetentionPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func lockBucketRetentionPolicy(
    _ request: Google_Storage_V1_LockRetentionPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_LockRetentionPolicyRequest, Google_Storage_V1_Bucket> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/LockBucketRetentionPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the IAM policy for the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBucketIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBucketIamPolicy(
    _ request: Google_Storage_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetBucketIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an IAM policy for the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetBucketIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setBucketIamPolicy(
    _ request: Google_Storage_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/SetBucketIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Tests a set of permissions on the given bucket to see which, if
  /// any, are held by the caller.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestBucketIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testBucketIamPermissions(
    _ request: Google_Storage_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/TestBucketIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a bucket. Changes to the bucket will be readable immediately after
  /// writing, but configuration changes may take time to propagate.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchBucket(
    _ request: Google_Storage_V1_PatchBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_PatchBucketRequest, Google_Storage_V1_Bucket> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/PatchBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a bucket. Equivalent to PatchBucket, but always replaces all
  /// mutatable fields of the bucket with new values, reverting all
  /// unspecified fields to their default values.
  /// Like PatchBucket, Changes to the bucket will be readable immediately after
  /// writing, but configuration changes may take time to propagate.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateBucket(
    _ request: Google_Storage_V1_UpdateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_UpdateBucketRequest, Google_Storage_V1_Bucket> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/UpdateBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Halts "Object Change Notification" push messagages.
  /// See https://cloud.google.com/storage/docs/object-change-notification
  /// Note: this is not related to the newer "Notifications" resource, which
  /// are stopped using DeleteNotification.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func stopChannel(
    _ request: Google_Storage_V1_StopChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_StopChannelRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/StopChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes the default object ACL entry for the specified entity
  /// on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDefaultObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDefaultObjectAccessControl(
    _ request: Google_Storage_V1_DeleteDefaultObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteDefaultObjectAccessControlRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteDefaultObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the default object ACL entry for the specified entity on the
  /// specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDefaultObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDefaultObjectAccessControl(
    _ request: Google_Storage_V1_GetDefaultObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetDefaultObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new default object ACL entry on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to InsertDefaultObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func insertDefaultObjectAccessControl(
    _ request: Google_Storage_V1_InsertDefaultObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_InsertDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/InsertDefaultObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves default object ACL entries on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDefaultObjectAccessControls.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDefaultObjectAccessControls(
    _ request: Google_Storage_V1_ListDefaultObjectAccessControlsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListDefaultObjectAccessControlsRequest, Google_Storage_V1_ListObjectAccessControlsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListDefaultObjectAccessControls",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a default object ACL entry on the specified bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchDefaultObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchDefaultObjectAccessControl(
    _ request: Google_Storage_V1_PatchDefaultObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_PatchDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/PatchDefaultObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a default object ACL entry on the specified bucket. Equivalent to
  /// PatchDefaultObjectAccessControl, but modifies all unspecified fields to
  /// their default values.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDefaultObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDefaultObjectAccessControl(
    _ request: Google_Storage_V1_UpdateDefaultObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_UpdateDefaultObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/UpdateDefaultObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes a notification subscription.
  /// Note: Older, "Object Change Notification" push subscriptions should be
  /// deleted using StopChannel instead.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteNotification(
    _ request: Google_Storage_V1_DeleteNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteNotification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// View a notification configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNotification(
    _ request: Google_Storage_V1_GetNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetNotificationRequest, Google_Storage_V1_Notification> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetNotification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a notification subscription for a given bucket.
  /// These notifications, when triggered, publish messages to the specified
  /// Cloud Pub/Sub topics.
  /// See https://cloud.google.com/storage/docs/pubsub-notifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to InsertNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func insertNotification(
    _ request: Google_Storage_V1_InsertNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_InsertNotificationRequest, Google_Storage_V1_Notification> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/InsertNotification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves a list of notification subscriptions for a given bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listNotifications(
    _ request: Google_Storage_V1_ListNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListNotificationsRequest, Google_Storage_V1_ListNotificationsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListNotifications",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Permanently deletes the ACL entry for the specified entity on the specified
  /// object.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteObjectAccessControl(
    _ request: Google_Storage_V1_DeleteObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteObjectAccessControlRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns the ACL entry for the specified entity on the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getObjectAccessControl(
    _ request: Google_Storage_V1_GetObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new ACL entry on the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to InsertObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func insertObjectAccessControl(
    _ request: Google_Storage_V1_InsertObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_InsertObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/InsertObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves ACL entries on the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListObjectAccessControls.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listObjectAccessControls(
    _ request: Google_Storage_V1_ListObjectAccessControlsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListObjectAccessControlsRequest, Google_Storage_V1_ListObjectAccessControlsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListObjectAccessControls",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patches an ACL entry on the specified object.  Patch is similar to update,
  /// but only applies or appends the specified fields in the
  /// object_access_control object.  Other fields are unaffected.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchObjectAccessControl(
    _ request: Google_Storage_V1_PatchObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_PatchObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/PatchObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an ACL entry on the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateObjectAccessControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateObjectAccessControl(
    _ request: Google_Storage_V1_UpdateObjectAccessControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_UpdateObjectAccessControlRequest, Google_Storage_V1_ObjectAccessControl> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/UpdateObjectAccessControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Concatenates a list of existing objects into a new object in the same
  /// bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to ComposeObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func composeObject(
    _ request: Google_Storage_V1_ComposeObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ComposeObjectRequest, Google_Storage_V1_Object> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ComposeObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Copies a source object to a destination object. Optionally overrides
  /// metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CopyObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func copyObject(
    _ request: Google_Storage_V1_CopyObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_CopyObjectRequest, Google_Storage_V1_Object> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/CopyObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an object and its metadata. Deletions are permanent if versioning
  /// is not enabled for the bucket, or if the `generation` parameter
  /// is used.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteObject(
    _ request: Google_Storage_V1_DeleteObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteObjectRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves an object's metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getObject(
    _ request: Google_Storage_V1_GetObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetObjectRequest, Google_Storage_V1_Object> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Reads an object's data.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetObjectMedia.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getObjectMedia(
    _ request: Google_Storage_V1_GetObjectMediaRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Storage_V1_GetObjectMediaResponse) -> Void
  ) -> ServerStreamingCall<Google_Storage_V1_GetObjectMediaRequest, Google_Storage_V1_GetObjectMediaResponse> {
    return self.makeServerStreamingCall(
      path: "/google.storage.v1.Storage/GetObjectMedia",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Stores a new object and metadata.
  ///
  /// An object can be written either in a single message stream or in a
  /// resumable sequence of message streams. To write using a single stream,
  /// the client should include in the first message of the stream an
  /// `InsertObjectSpec` describing the destination bucket, object, and any
  /// preconditions. Additionally, the final message must set 'finish_write' to
  /// true, or else it is an error.
  ///
  /// For a resumable write, the client should instead call
  /// `StartResumableWrite()` and provide that method an `InsertObjectSpec.`
  /// They should then attach the returned `upload_id` to the first message of
  /// each following call to `Insert`. If there is an error or the connection is
  /// broken during the resumable `Insert()`, the client should check the status
  /// of the `Insert()` by calling `QueryWriteStatus()` and continue writing from
  /// the returned `committed_size`. This may be less than the amount of data the
  /// client previously sent.
  ///
  /// The service will not view the object as complete until the client has
  /// sent an `Insert` with `finish_write` set to `true`. Sending any
  /// requests on a stream after sending a request with `finish_write` set to
  /// `true` will cause an error. The client **should** check the
  /// `Object` it receives to determine how much data the service was
  /// able to commit and whether the service views the object as complete.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func insertObject(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Google_Storage_V1_InsertObjectRequest, Google_Storage_V1_Object> {
    return self.makeClientStreamingCall(
      path: "/google.storage.v1.Storage/InsertObject",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves a list of objects matching the criteria.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listObjects(
    _ request: Google_Storage_V1_ListObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListObjectsRequest, Google_Storage_V1_ListObjectsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListObjects",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Rewrites a source object to a destination object. Optionally overrides
  /// metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewriteObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rewriteObject(
    _ request: Google_Storage_V1_RewriteObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_RewriteObjectRequest, Google_Storage_V1_RewriteResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/RewriteObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Starts a resumable write. How long the write operation remains valid, and
  /// what happens when the write operation becomes invalid, are
  /// service-dependent.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartResumableWrite.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startResumableWrite(
    _ request: Google_Storage_V1_StartResumableWriteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_StartResumableWriteRequest, Google_Storage_V1_StartResumableWriteResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/StartResumableWrite",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Determines the `committed_size` for an object that is being written, which
  /// can then be used as the `write_offset` for the next `Write()` call.
  ///
  /// If the object does not exist (i.e., the object has been deleted, or the
  /// first `Write()` has not yet reached the service), this method returns the
  /// error `NOT_FOUND`.
  ///
  /// The client **may** call `QueryWriteStatus()` at any time to determine how
  /// much data has been processed for this object. This is useful if the
  /// client is buffering data and needs to know which data can be safely
  /// evicted. For any sequence of `QueryWriteStatus()` calls for a given
  /// object name, the sequence of returned `committed_size` values will be
  /// non-decreasing.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryWriteStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryWriteStatus(
    _ request: Google_Storage_V1_QueryWriteStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_QueryWriteStatusRequest, Google_Storage_V1_QueryWriteStatusResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/QueryWriteStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an object's metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchObject(
    _ request: Google_Storage_V1_PatchObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_PatchObjectRequest, Google_Storage_V1_Object> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/PatchObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an object's metadata. Equivalent to PatchObject, but always
  /// replaces all mutatable fields of the bucket with new values, reverting all
  /// unspecified fields to their default values.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateObject(
    _ request: Google_Storage_V1_UpdateObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_UpdateObjectRequest, Google_Storage_V1_Object> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/UpdateObject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the IAM policy for the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetObjectIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getObjectIamPolicy(
    _ request: Google_Storage_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetObjectIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an IAM policy for the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetObjectIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setObjectIamPolicy(
    _ request: Google_Storage_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/SetObjectIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Tests a set of permissions on the given object to see which, if
  /// any, are held by the caller.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestObjectIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testObjectIamPermissions(
    _ request: Google_Storage_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/TestObjectIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Watch for changes on all objects in a bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to WatchAllObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func watchAllObjects(
    _ request: Google_Storage_V1_WatchAllObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_WatchAllObjectsRequest, Google_Storage_V1_Channel> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/WatchAllObjects",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Retrieves the name of a project's Google Cloud Storage service account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getServiceAccount(
    _ request: Google_Storage_V1_GetProjectServiceAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetProjectServiceAccountRequest, Google_Storage_V1_ServiceAccount> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetServiceAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new HMAC key for the given service account.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateHmacKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createHmacKey(
    _ request: Google_Storage_V1_CreateHmacKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_CreateHmacKeyRequest, Google_Storage_V1_CreateHmacKeyResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/CreateHmacKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a given HMAC key.  Key must be in an INACTIVE state.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteHmacKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteHmacKey(
    _ request: Google_Storage_V1_DeleteHmacKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_DeleteHmacKeyRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/DeleteHmacKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets an existing HMAC key metadata for the given id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetHmacKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getHmacKey(
    _ request: Google_Storage_V1_GetHmacKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_GetHmacKeyRequest, Google_Storage_V1_HmacKeyMetadata> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/GetHmacKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists HMAC keys under a given project with the additional filters provided.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListHmacKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listHmacKeys(
    _ request: Google_Storage_V1_ListHmacKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_ListHmacKeysRequest, Google_Storage_V1_ListHmacKeysResponse> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/ListHmacKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a given HMAC key state between ACTIVE and INACTIVE.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateHmacKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateHmacKey(
    _ request: Google_Storage_V1_UpdateHmacKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Storage_V1_UpdateHmacKeyRequest, Google_Storage_V1_HmacKeyMetadata> {
    return self.makeUnaryCall(
      path: "/google.storage.v1.Storage/UpdateHmacKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Storage_V1_StorageClient: Google_Storage_V1_StorageClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.storage.v1.Storage service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Storage_V1_StorageProvider: CallHandlerProvider {
  /// Permanently deletes the ACL entry for the specified entity on the specified
  /// bucket.
  func deleteBucketAccessControl(request: Google_Storage_V1_DeleteBucketAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Returns the ACL entry for the specified entity on the specified bucket.
  func getBucketAccessControl(request: Google_Storage_V1_GetBucketAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_BucketAccessControl>
  /// Creates a new ACL entry on the specified bucket.
  func insertBucketAccessControl(request: Google_Storage_V1_InsertBucketAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_BucketAccessControl>
  /// Retrieves ACL entries on the specified bucket.
  func listBucketAccessControls(request: Google_Storage_V1_ListBucketAccessControlsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListBucketAccessControlsResponse>
  /// Updates an ACL entry on the specified bucket. Equivalent to
  /// PatchBucketAccessControl, but all unspecified fields will be
  /// reset to their default values.
  func updateBucketAccessControl(request: Google_Storage_V1_UpdateBucketAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_BucketAccessControl>
  /// Updates an ACL entry on the specified bucket.
  func patchBucketAccessControl(request: Google_Storage_V1_PatchBucketAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_BucketAccessControl>
  /// Permanently deletes an empty bucket.
  func deleteBucket(request: Google_Storage_V1_DeleteBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Returns metadata for the specified bucket.
  func getBucket(request: Google_Storage_V1_GetBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Bucket>
  /// Creates a new bucket.
  func insertBucket(request: Google_Storage_V1_InsertBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Bucket>
  /// List active object change notification channels for this bucket.
  func listChannels(request: Google_Storage_V1_ListChannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListChannelsResponse>
  /// Retrieves a list of buckets for a given project.
  func listBuckets(request: Google_Storage_V1_ListBucketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListBucketsResponse>
  /// Locks retention policy on a bucket.
  func lockBucketRetentionPolicy(request: Google_Storage_V1_LockRetentionPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Bucket>
  /// Gets the IAM policy for the specified bucket.
  func getBucketIamPolicy(request: Google_Storage_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Updates an IAM policy for the specified bucket.
  func setBucketIamPolicy(request: Google_Storage_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Tests a set of permissions on the given bucket to see which, if
  /// any, are held by the caller.
  func testBucketIamPermissions(request: Google_Storage_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
  /// Updates a bucket. Changes to the bucket will be readable immediately after
  /// writing, but configuration changes may take time to propagate.
  func patchBucket(request: Google_Storage_V1_PatchBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Bucket>
  /// Updates a bucket. Equivalent to PatchBucket, but always replaces all
  /// mutatable fields of the bucket with new values, reverting all
  /// unspecified fields to their default values.
  /// Like PatchBucket, Changes to the bucket will be readable immediately after
  /// writing, but configuration changes may take time to propagate.
  func updateBucket(request: Google_Storage_V1_UpdateBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Bucket>
  /// Halts "Object Change Notification" push messagages.
  /// See https://cloud.google.com/storage/docs/object-change-notification
  /// Note: this is not related to the newer "Notifications" resource, which
  /// are stopped using DeleteNotification.
  func stopChannel(request: Google_Storage_V1_StopChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Permanently deletes the default object ACL entry for the specified entity
  /// on the specified bucket.
  func deleteDefaultObjectAccessControl(request: Google_Storage_V1_DeleteDefaultObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Returns the default object ACL entry for the specified entity on the
  /// specified bucket.
  func getDefaultObjectAccessControl(request: Google_Storage_V1_GetDefaultObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Creates a new default object ACL entry on the specified bucket.
  func insertDefaultObjectAccessControl(request: Google_Storage_V1_InsertDefaultObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Retrieves default object ACL entries on the specified bucket.
  func listDefaultObjectAccessControls(request: Google_Storage_V1_ListDefaultObjectAccessControlsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListObjectAccessControlsResponse>
  /// Updates a default object ACL entry on the specified bucket.
  func patchDefaultObjectAccessControl(request: Google_Storage_V1_PatchDefaultObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Updates a default object ACL entry on the specified bucket. Equivalent to
  /// PatchDefaultObjectAccessControl, but modifies all unspecified fields to
  /// their default values.
  func updateDefaultObjectAccessControl(request: Google_Storage_V1_UpdateDefaultObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Permanently deletes a notification subscription.
  /// Note: Older, "Object Change Notification" push subscriptions should be
  /// deleted using StopChannel instead.
  func deleteNotification(request: Google_Storage_V1_DeleteNotificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// View a notification configuration.
  func getNotification(request: Google_Storage_V1_GetNotificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Notification>
  /// Creates a notification subscription for a given bucket.
  /// These notifications, when triggered, publish messages to the specified
  /// Cloud Pub/Sub topics.
  /// See https://cloud.google.com/storage/docs/pubsub-notifications.
  func insertNotification(request: Google_Storage_V1_InsertNotificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Notification>
  /// Retrieves a list of notification subscriptions for a given bucket.
  func listNotifications(request: Google_Storage_V1_ListNotificationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListNotificationsResponse>
  /// Permanently deletes the ACL entry for the specified entity on the specified
  /// object.
  func deleteObjectAccessControl(request: Google_Storage_V1_DeleteObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Returns the ACL entry for the specified entity on the specified object.
  func getObjectAccessControl(request: Google_Storage_V1_GetObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Creates a new ACL entry on the specified object.
  func insertObjectAccessControl(request: Google_Storage_V1_InsertObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Retrieves ACL entries on the specified object.
  func listObjectAccessControls(request: Google_Storage_V1_ListObjectAccessControlsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListObjectAccessControlsResponse>
  /// Patches an ACL entry on the specified object.  Patch is similar to update,
  /// but only applies or appends the specified fields in the
  /// object_access_control object.  Other fields are unaffected.
  func patchObjectAccessControl(request: Google_Storage_V1_PatchObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Updates an ACL entry on the specified object.
  func updateObjectAccessControl(request: Google_Storage_V1_UpdateObjectAccessControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ObjectAccessControl>
  /// Concatenates a list of existing objects into a new object in the same
  /// bucket.
  func composeObject(request: Google_Storage_V1_ComposeObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Object>
  /// Copies a source object to a destination object. Optionally overrides
  /// metadata.
  func copyObject(request: Google_Storage_V1_CopyObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Object>
  /// Deletes an object and its metadata. Deletions are permanent if versioning
  /// is not enabled for the bucket, or if the `generation` parameter
  /// is used.
  func deleteObject(request: Google_Storage_V1_DeleteObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Retrieves an object's metadata.
  func getObject(request: Google_Storage_V1_GetObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Object>
  /// Reads an object's data.
  func getObjectMedia(request: Google_Storage_V1_GetObjectMediaRequest, context: StreamingResponseCallContext<Google_Storage_V1_GetObjectMediaResponse>) -> EventLoopFuture<GRPCStatus>
  /// Stores a new object and metadata.
  ///
  /// An object can be written either in a single message stream or in a
  /// resumable sequence of message streams. To write using a single stream,
  /// the client should include in the first message of the stream an
  /// `InsertObjectSpec` describing the destination bucket, object, and any
  /// preconditions. Additionally, the final message must set 'finish_write' to
  /// true, or else it is an error.
  ///
  /// For a resumable write, the client should instead call
  /// `StartResumableWrite()` and provide that method an `InsertObjectSpec.`
  /// They should then attach the returned `upload_id` to the first message of
  /// each following call to `Insert`. If there is an error or the connection is
  /// broken during the resumable `Insert()`, the client should check the status
  /// of the `Insert()` by calling `QueryWriteStatus()` and continue writing from
  /// the returned `committed_size`. This may be less than the amount of data the
  /// client previously sent.
  ///
  /// The service will not view the object as complete until the client has
  /// sent an `Insert` with `finish_write` set to `true`. Sending any
  /// requests on a stream after sending a request with `finish_write` set to
  /// `true` will cause an error. The client **should** check the
  /// `Object` it receives to determine how much data the service was
  /// able to commit and whether the service views the object as complete.
  func insertObject(context: UnaryResponseCallContext<Google_Storage_V1_Object>) -> EventLoopFuture<(StreamEvent<Google_Storage_V1_InsertObjectRequest>) -> Void>
  /// Retrieves a list of objects matching the criteria.
  func listObjects(request: Google_Storage_V1_ListObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListObjectsResponse>
  /// Rewrites a source object to a destination object. Optionally overrides
  /// metadata.
  func rewriteObject(request: Google_Storage_V1_RewriteObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_RewriteResponse>
  /// Starts a resumable write. How long the write operation remains valid, and
  /// what happens when the write operation becomes invalid, are
  /// service-dependent.
  func startResumableWrite(request: Google_Storage_V1_StartResumableWriteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_StartResumableWriteResponse>
  /// Determines the `committed_size` for an object that is being written, which
  /// can then be used as the `write_offset` for the next `Write()` call.
  ///
  /// If the object does not exist (i.e., the object has been deleted, or the
  /// first `Write()` has not yet reached the service), this method returns the
  /// error `NOT_FOUND`.
  ///
  /// The client **may** call `QueryWriteStatus()` at any time to determine how
  /// much data has been processed for this object. This is useful if the
  /// client is buffering data and needs to know which data can be safely
  /// evicted. For any sequence of `QueryWriteStatus()` calls for a given
  /// object name, the sequence of returned `committed_size` values will be
  /// non-decreasing.
  func queryWriteStatus(request: Google_Storage_V1_QueryWriteStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_QueryWriteStatusResponse>
  /// Updates an object's metadata.
  func patchObject(request: Google_Storage_V1_PatchObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Object>
  /// Updates an object's metadata. Equivalent to PatchObject, but always
  /// replaces all mutatable fields of the bucket with new values, reverting all
  /// unspecified fields to their default values.
  func updateObject(request: Google_Storage_V1_UpdateObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Object>
  /// Gets the IAM policy for the specified object.
  func getObjectIamPolicy(request: Google_Storage_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Updates an IAM policy for the specified object.
  func setObjectIamPolicy(request: Google_Storage_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Tests a set of permissions on the given object to see which, if
  /// any, are held by the caller.
  func testObjectIamPermissions(request: Google_Storage_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
  /// Watch for changes on all objects in a bucket.
  func watchAllObjects(request: Google_Storage_V1_WatchAllObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_Channel>
  /// Retrieves the name of a project's Google Cloud Storage service account.
  func getServiceAccount(request: Google_Storage_V1_GetProjectServiceAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ServiceAccount>
  /// Creates a new HMAC key for the given service account.
  func createHmacKey(request: Google_Storage_V1_CreateHmacKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_CreateHmacKeyResponse>
  /// Deletes a given HMAC key.  Key must be in an INACTIVE state.
  func deleteHmacKey(request: Google_Storage_V1_DeleteHmacKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets an existing HMAC key metadata for the given id.
  func getHmacKey(request: Google_Storage_V1_GetHmacKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_HmacKeyMetadata>
  /// Lists HMAC keys under a given project with the additional filters provided.
  func listHmacKeys(request: Google_Storage_V1_ListHmacKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_ListHmacKeysResponse>
  /// Updates a given HMAC key state between ACTIVE and INACTIVE.
  func updateHmacKey(request: Google_Storage_V1_UpdateHmacKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Storage_V1_HmacKeyMetadata>
}

extension Google_Storage_V1_StorageProvider {
  public var serviceName: Substring { return "google.storage.v1.Storage" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "DeleteBucketAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteBucketAccessControl(request: request, context: context)
        }
      }

    case "GetBucketAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBucketAccessControl(request: request, context: context)
        }
      }

    case "InsertBucketAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.insertBucketAccessControl(request: request, context: context)
        }
      }

    case "ListBucketAccessControls":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listBucketAccessControls(request: request, context: context)
        }
      }

    case "UpdateBucketAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateBucketAccessControl(request: request, context: context)
        }
      }

    case "PatchBucketAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchBucketAccessControl(request: request, context: context)
        }
      }

    case "DeleteBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteBucket(request: request, context: context)
        }
      }

    case "GetBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBucket(request: request, context: context)
        }
      }

    case "InsertBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.insertBucket(request: request, context: context)
        }
      }

    case "ListChannels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listChannels(request: request, context: context)
        }
      }

    case "ListBuckets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listBuckets(request: request, context: context)
        }
      }

    case "LockBucketRetentionPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.lockBucketRetentionPolicy(request: request, context: context)
        }
      }

    case "GetBucketIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBucketIamPolicy(request: request, context: context)
        }
      }

    case "SetBucketIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setBucketIamPolicy(request: request, context: context)
        }
      }

    case "TestBucketIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testBucketIamPermissions(request: request, context: context)
        }
      }

    case "PatchBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchBucket(request: request, context: context)
        }
      }

    case "UpdateBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateBucket(request: request, context: context)
        }
      }

    case "StopChannel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.stopChannel(request: request, context: context)
        }
      }

    case "DeleteDefaultObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteDefaultObjectAccessControl(request: request, context: context)
        }
      }

    case "GetDefaultObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getDefaultObjectAccessControl(request: request, context: context)
        }
      }

    case "InsertDefaultObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.insertDefaultObjectAccessControl(request: request, context: context)
        }
      }

    case "ListDefaultObjectAccessControls":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDefaultObjectAccessControls(request: request, context: context)
        }
      }

    case "PatchDefaultObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchDefaultObjectAccessControl(request: request, context: context)
        }
      }

    case "UpdateDefaultObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateDefaultObjectAccessControl(request: request, context: context)
        }
      }

    case "DeleteNotification":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteNotification(request: request, context: context)
        }
      }

    case "GetNotification":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNotification(request: request, context: context)
        }
      }

    case "InsertNotification":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.insertNotification(request: request, context: context)
        }
      }

    case "ListNotifications":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listNotifications(request: request, context: context)
        }
      }

    case "DeleteObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteObjectAccessControl(request: request, context: context)
        }
      }

    case "GetObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getObjectAccessControl(request: request, context: context)
        }
      }

    case "InsertObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.insertObjectAccessControl(request: request, context: context)
        }
      }

    case "ListObjectAccessControls":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listObjectAccessControls(request: request, context: context)
        }
      }

    case "PatchObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchObjectAccessControl(request: request, context: context)
        }
      }

    case "UpdateObjectAccessControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateObjectAccessControl(request: request, context: context)
        }
      }

    case "ComposeObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.composeObject(request: request, context: context)
        }
      }

    case "CopyObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.copyObject(request: request, context: context)
        }
      }

    case "DeleteObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteObject(request: request, context: context)
        }
      }

    case "GetObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getObject(request: request, context: context)
        }
      }

    case "GetObjectMedia":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getObjectMedia(request: request, context: context)
        }
      }

    case "InsertObject":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.insertObject(context: context)
      }

    case "ListObjects":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listObjects(request: request, context: context)
        }
      }

    case "RewriteObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.rewriteObject(request: request, context: context)
        }
      }

    case "StartResumableWrite":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.startResumableWrite(request: request, context: context)
        }
      }

    case "QueryWriteStatus":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.queryWriteStatus(request: request, context: context)
        }
      }

    case "PatchObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchObject(request: request, context: context)
        }
      }

    case "UpdateObject":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateObject(request: request, context: context)
        }
      }

    case "GetObjectIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getObjectIamPolicy(request: request, context: context)
        }
      }

    case "SetObjectIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setObjectIamPolicy(request: request, context: context)
        }
      }

    case "TestObjectIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testObjectIamPermissions(request: request, context: context)
        }
      }

    case "WatchAllObjects":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.watchAllObjects(request: request, context: context)
        }
      }

    case "GetServiceAccount":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getServiceAccount(request: request, context: context)
        }
      }

    case "CreateHmacKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createHmacKey(request: request, context: context)
        }
      }

    case "DeleteHmacKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteHmacKey(request: request, context: context)
        }
      }

    case "GetHmacKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getHmacKey(request: request, context: context)
        }
      }

    case "ListHmacKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listHmacKeys(request: request, context: context)
        }
      }

    case "UpdateHmacKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateHmacKey(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

