//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/example/library/v1/library.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Example_Library_V1_LibraryServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Example_Library_V1_LibraryServiceClientProtocol: GRPCClient {
  func createShelf(
    _ request: Google_Example_Library_V1_CreateShelfRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_CreateShelfRequest, Google_Example_Library_V1_Shelf>

  func getShelf(
    _ request: Google_Example_Library_V1_GetShelfRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_GetShelfRequest, Google_Example_Library_V1_Shelf>

  func listShelves(
    _ request: Google_Example_Library_V1_ListShelvesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_ListShelvesRequest, Google_Example_Library_V1_ListShelvesResponse>

  func deleteShelf(
    _ request: Google_Example_Library_V1_DeleteShelfRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_DeleteShelfRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func mergeShelves(
    _ request: Google_Example_Library_V1_MergeShelvesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_MergeShelvesRequest, Google_Example_Library_V1_Shelf>

  func createBook(
    _ request: Google_Example_Library_V1_CreateBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_CreateBookRequest, Google_Example_Library_V1_Book>

  func getBook(
    _ request: Google_Example_Library_V1_GetBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_GetBookRequest, Google_Example_Library_V1_Book>

  func listBooks(
    _ request: Google_Example_Library_V1_ListBooksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_ListBooksRequest, Google_Example_Library_V1_ListBooksResponse>

  func deleteBook(
    _ request: Google_Example_Library_V1_DeleteBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_DeleteBookRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateBook(
    _ request: Google_Example_Library_V1_UpdateBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_UpdateBookRequest, Google_Example_Library_V1_Book>

  func moveBook(
    _ request: Google_Example_Library_V1_MoveBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Example_Library_V1_MoveBookRequest, Google_Example_Library_V1_Book>

}

extension Google_Example_Library_V1_LibraryServiceClientProtocol {

  /// Creates a shelf, and returns the new Shelf.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateShelf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createShelf(
    _ request: Google_Example_Library_V1_CreateShelfRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_CreateShelfRequest, Google_Example_Library_V1_Shelf> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/CreateShelf",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetShelf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getShelf(
    _ request: Google_Example_Library_V1_GetShelfRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_GetShelfRequest, Google_Example_Library_V1_Shelf> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/GetShelf",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists shelves. The order is unspecified but deterministic. Newly created
  /// shelves will not necessarily be added to the end of this list.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListShelves.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listShelves(
    _ request: Google_Example_Library_V1_ListShelvesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_ListShelvesRequest, Google_Example_Library_V1_ListShelvesResponse> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/ListShelves",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteShelf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteShelf(
    _ request: Google_Example_Library_V1_DeleteShelfRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_DeleteShelfRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/DeleteShelf",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Merges two shelves by adding all books from the shelf named
  /// `other_shelf_name` to shelf `name`, and deletes
  /// `other_shelf_name`. Returns the updated shelf.
  /// The book ids of the moved books may not be the same as the original books.
  ///
  /// Returns NOT_FOUND if either shelf does not exist.
  /// This call is a no-op if the specified shelves are the same.
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeShelves.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeShelves(
    _ request: Google_Example_Library_V1_MergeShelvesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_MergeShelvesRequest, Google_Example_Library_V1_Shelf> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/MergeShelves",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a book, and returns the new Book.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createBook(
    _ request: Google_Example_Library_V1_CreateBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_CreateBookRequest, Google_Example_Library_V1_Book> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/CreateBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a book. Returns NOT_FOUND if the book does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBook(
    _ request: Google_Example_Library_V1_GetBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_GetBookRequest, Google_Example_Library_V1_Book> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/GetBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists books in a shelf. The order is unspecified but deterministic. Newly
  /// created books will not necessarily be added to the end of this list.
  /// Returns NOT_FOUND if the shelf does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBooks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listBooks(
    _ request: Google_Example_Library_V1_ListBooksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_ListBooksRequest, Google_Example_Library_V1_ListBooksResponse> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/ListBooks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a book. Returns NOT_FOUND if the book does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteBook(
    _ request: Google_Example_Library_V1_DeleteBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_DeleteBookRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/DeleteBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a book. Returns INVALID_ARGUMENT if the name of the book
  /// is non-empty and does not equal the existing name.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateBook(
    _ request: Google_Example_Library_V1_UpdateBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_UpdateBookRequest, Google_Example_Library_V1_Book> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/UpdateBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Moves a book to another shelf, and returns the new book. The book
  /// id of the new book may not be the same as the original book.
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moveBook(
    _ request: Google_Example_Library_V1_MoveBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Example_Library_V1_MoveBookRequest, Google_Example_Library_V1_Book> {
    return self.makeUnaryCall(
      path: "/google.example.library.v1.LibraryService/MoveBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Example_Library_V1_LibraryServiceClient: Google_Example_Library_V1_LibraryServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.example.library.v1.LibraryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Example_Library_V1_LibraryServiceProvider: CallHandlerProvider {
  /// Creates a shelf, and returns the new Shelf.
  func createShelf(request: Google_Example_Library_V1_CreateShelfRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Shelf>
  /// Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
  func getShelf(request: Google_Example_Library_V1_GetShelfRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Shelf>
  /// Lists shelves. The order is unspecified but deterministic. Newly created
  /// shelves will not necessarily be added to the end of this list.
  func listShelves(request: Google_Example_Library_V1_ListShelvesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_ListShelvesResponse>
  /// Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
  func deleteShelf(request: Google_Example_Library_V1_DeleteShelfRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Merges two shelves by adding all books from the shelf named
  /// `other_shelf_name` to shelf `name`, and deletes
  /// `other_shelf_name`. Returns the updated shelf.
  /// The book ids of the moved books may not be the same as the original books.
  ///
  /// Returns NOT_FOUND if either shelf does not exist.
  /// This call is a no-op if the specified shelves are the same.
  func mergeShelves(request: Google_Example_Library_V1_MergeShelvesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Shelf>
  /// Creates a book, and returns the new Book.
  func createBook(request: Google_Example_Library_V1_CreateBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Book>
  /// Gets a book. Returns NOT_FOUND if the book does not exist.
  func getBook(request: Google_Example_Library_V1_GetBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Book>
  /// Lists books in a shelf. The order is unspecified but deterministic. Newly
  /// created books will not necessarily be added to the end of this list.
  /// Returns NOT_FOUND if the shelf does not exist.
  func listBooks(request: Google_Example_Library_V1_ListBooksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_ListBooksResponse>
  /// Deletes a book. Returns NOT_FOUND if the book does not exist.
  func deleteBook(request: Google_Example_Library_V1_DeleteBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Updates a book. Returns INVALID_ARGUMENT if the name of the book
  /// is non-empty and does not equal the existing name.
  func updateBook(request: Google_Example_Library_V1_UpdateBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Book>
  /// Moves a book to another shelf, and returns the new book. The book
  /// id of the new book may not be the same as the original book.
  func moveBook(request: Google_Example_Library_V1_MoveBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Example_Library_V1_Book>
}

extension Google_Example_Library_V1_LibraryServiceProvider {
  public var serviceName: Substring { return "google.example.library.v1.LibraryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateShelf":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createShelf(request: request, context: context)
        }
      }

    case "GetShelf":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getShelf(request: request, context: context)
        }
      }

    case "ListShelves":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listShelves(request: request, context: context)
        }
      }

    case "DeleteShelf":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteShelf(request: request, context: context)
        }
      }

    case "MergeShelves":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mergeShelves(request: request, context: context)
        }
      }

    case "CreateBook":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createBook(request: request, context: context)
        }
      }

    case "GetBook":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBook(request: request, context: context)
        }
      }

    case "ListBooks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listBooks(request: request, context: context)
        }
      }

    case "DeleteBook":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteBook(request: request, context: context)
        }
      }

    case "UpdateBook":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateBook(request: request, context: context)
        }
      }

    case "MoveBook":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.moveBook(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

