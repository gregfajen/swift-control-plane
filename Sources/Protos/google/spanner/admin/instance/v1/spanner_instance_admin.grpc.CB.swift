//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/spanner/admin/instance/v1/spanner_instance_admin.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Spanner_Admin_Instance_V1_InstanceAdminClient, then call methods of this protocol to make API calls.
public protocol Google_Spanner_Admin_Instance_V1_InstanceAdminClientProtocol: GRPCClient {
  func listInstanceConfigs(
    _ request: Google_Spanner_Admin_Instance_V1_ListInstanceConfigsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_ListInstanceConfigsRequest, Google_Spanner_Admin_Instance_V1_ListInstanceConfigsResponse>

  func getInstanceConfig(
    _ request: Google_Spanner_Admin_Instance_V1_GetInstanceConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_GetInstanceConfigRequest, Google_Spanner_Admin_Instance_V1_InstanceConfig>

  func listInstances(
    _ request: Google_Spanner_Admin_Instance_V1_ListInstancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_ListInstancesRequest, Google_Spanner_Admin_Instance_V1_ListInstancesResponse>

  func getInstance(
    _ request: Google_Spanner_Admin_Instance_V1_GetInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_GetInstanceRequest, Google_Spanner_Admin_Instance_V1_Instance>

  func createInstance(
    _ request: Google_Spanner_Admin_Instance_V1_CreateInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_CreateInstanceRequest, Google_Longrunning_Operation>

  func updateInstance(
    _ request: Google_Spanner_Admin_Instance_V1_UpdateInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_UpdateInstanceRequest, Google_Longrunning_Operation>

  func deleteInstance(
    _ request: Google_Spanner_Admin_Instance_V1_DeleteInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_DeleteInstanceRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>

  func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>

  func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>

}

extension Google_Spanner_Admin_Instance_V1_InstanceAdminClientProtocol {

  /// Lists the supported instance configurations for a given project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInstanceConfigs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInstanceConfigs(
    _ request: Google_Spanner_Admin_Instance_V1_ListInstanceConfigsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_ListInstanceConfigsRequest, Google_Spanner_Admin_Instance_V1_ListInstanceConfigsResponse> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/ListInstanceConfigs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets information about a particular instance configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstanceConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInstanceConfig(
    _ request: Google_Spanner_Admin_Instance_V1_GetInstanceConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_GetInstanceConfigRequest, Google_Spanner_Admin_Instance_V1_InstanceConfig> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/GetInstanceConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all instances in the given project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInstances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInstances(
    _ request: Google_Spanner_Admin_Instance_V1_ListInstancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_ListInstancesRequest, Google_Spanner_Admin_Instance_V1_ListInstancesResponse> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/ListInstances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets information about a particular instance.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInstance(
    _ request: Google_Spanner_Admin_Instance_V1_GetInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_GetInstanceRequest, Google_Spanner_Admin_Instance_V1_Instance> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/GetInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates an instance and begins preparing it to begin serving. The
  /// returned [long-running operation][google.longrunning.Operation]
  /// can be used to track the progress of preparing the new
  /// instance. The instance name is assigned by the caller. If the
  /// named instance already exists, `CreateInstance` returns
  /// `ALREADY_EXISTS`.
  ///
  /// Immediately upon completion of this request:
  ///
  ///   * The instance is readable via the API, with all requested attributes
  ///     but no allocated resources. Its state is `CREATING`.
  ///
  /// Until completion of the returned operation:
  ///
  ///   * Cancelling the operation renders the instance immediately unreadable
  ///     via the API.
  ///   * The instance can be deleted.
  ///   * All other attempts to modify the instance are rejected.
  ///
  /// Upon completion of the returned operation:
  ///
  ///   * Billing for all successfully-allocated resources begins (some types
  ///     may have lower than the requested levels).
  ///   * Databases can be created in the instance.
  ///   * The instance's allocated resource levels are readable via the API.
  ///   * The instance's state becomes `READY`.
  ///
  /// The returned [long-running operation][google.longrunning.Operation] will
  /// have a name of the format `<instance_name>/operations/<operation_id>` and
  /// can be used to track creation of the instance.  The
  /// [metadata][google.longrunning.Operation.metadata] field type is
  /// [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
  /// The [response][google.longrunning.Operation.response] field type is
  /// [Instance][google.spanner.admin.instance.v1.Instance], if successful.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createInstance(
    _ request: Google_Spanner_Admin_Instance_V1_CreateInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_CreateInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/CreateInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates an instance, and begins allocating or releasing resources
  /// as requested. The returned [long-running
  /// operation][google.longrunning.Operation] can be used to track the
  /// progress of updating the instance. If the named instance does not
  /// exist, returns `NOT_FOUND`.
  ///
  /// Immediately upon completion of this request:
  ///
  ///   * For resource types for which a decrease in the instance's allocation
  ///     has been requested, billing is based on the newly-requested level.
  ///
  /// Until completion of the returned operation:
  ///
  ///   * Cancelling the operation sets its metadata's
  ///     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
  ///     restoring resources to their pre-request values. The operation
  ///     is guaranteed to succeed at undoing all resource changes,
  ///     after which point it terminates with a `CANCELLED` status.
  ///   * All other attempts to modify the instance are rejected.
  ///   * Reading the instance via the API continues to give the pre-request
  ///     resource levels.
  ///
  /// Upon completion of the returned operation:
  ///
  ///   * Billing begins for all successfully-allocated resources (some types
  ///     may have lower than the requested levels).
  ///   * All newly-reserved resources are available for serving the instance's
  ///     tables.
  ///   * The instance's new resource levels are readable via the API.
  ///
  /// The returned [long-running operation][google.longrunning.Operation] will
  /// have a name of the format `<instance_name>/operations/<operation_id>` and
  /// can be used to track the instance modification.  The
  /// [metadata][google.longrunning.Operation.metadata] field type is
  /// [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
  /// The [response][google.longrunning.Operation.response] field type is
  /// [Instance][google.spanner.admin.instance.v1.Instance], if successful.
  ///
  /// Authorization requires `spanner.instances.update` permission on
  /// resource [name][google.spanner.admin.instance.v1.Instance.name].
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateInstance(
    _ request: Google_Spanner_Admin_Instance_V1_UpdateInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_UpdateInstanceRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/UpdateInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an instance.
  ///
  /// Immediately upon completion of the request:
  ///
  ///   * Billing ceases for all of the instance's reserved resources.
  ///
  /// Soon afterward:
  ///
  ///   * The instance and *all of its databases* immediately and
  ///     irrevocably disappear from the API. All data in the databases
  ///     is permanently deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInstance(
    _ request: Google_Spanner_Admin_Instance_V1_DeleteInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Spanner_Admin_Instance_V1_DeleteInstanceRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/DeleteInstance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Sets the access control policy on an instance resource. Replaces any
  /// existing policy.
  ///
  /// Authorization requires `spanner.instances.setIamPolicy` on
  /// [resource][google.iam.v1.SetIamPolicyRequest.resource].
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(
    _ request: Google_Iam_V1_SetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/SetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the access control policy for an instance resource. Returns an empty
  /// policy if an instance exists but does not have a policy set.
  ///
  /// Authorization requires `spanner.instances.getIamPolicy` on
  /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(
    _ request: Google_Iam_V1_GetIamPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/GetIamPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Returns permissions that the caller has on the specified instance resource.
  ///
  /// Attempting this RPC on a non-existent Cloud Spanner instance resource will
  /// result in a NOT_FOUND error if the user has `spanner.instances.list`
  /// permission on the containing Google Cloud Project. Otherwise returns an
  /// empty set of permissions.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(
    _ request: Google_Iam_V1_TestIamPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(
      path: "/google.spanner.admin.instance.v1.InstanceAdmin/TestIamPermissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Spanner_Admin_Instance_V1_InstanceAdminClient: Google_Spanner_Admin_Instance_V1_InstanceAdminClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.spanner.admin.instance.v1.InstanceAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Spanner_Admin_Instance_V1_InstanceAdminProvider: CallHandlerProvider {
  /// Lists the supported instance configurations for a given project.
  func listInstanceConfigs(request: Google_Spanner_Admin_Instance_V1_ListInstanceConfigsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Spanner_Admin_Instance_V1_ListInstanceConfigsResponse>
  /// Gets information about a particular instance configuration.
  func getInstanceConfig(request: Google_Spanner_Admin_Instance_V1_GetInstanceConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Spanner_Admin_Instance_V1_InstanceConfig>
  /// Lists all instances in the given project.
  func listInstances(request: Google_Spanner_Admin_Instance_V1_ListInstancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Spanner_Admin_Instance_V1_ListInstancesResponse>
  /// Gets information about a particular instance.
  func getInstance(request: Google_Spanner_Admin_Instance_V1_GetInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Spanner_Admin_Instance_V1_Instance>
  /// Creates an instance and begins preparing it to begin serving. The
  /// returned [long-running operation][google.longrunning.Operation]
  /// can be used to track the progress of preparing the new
  /// instance. The instance name is assigned by the caller. If the
  /// named instance already exists, `CreateInstance` returns
  /// `ALREADY_EXISTS`.
  ///
  /// Immediately upon completion of this request:
  ///
  ///   * The instance is readable via the API, with all requested attributes
  ///     but no allocated resources. Its state is `CREATING`.
  ///
  /// Until completion of the returned operation:
  ///
  ///   * Cancelling the operation renders the instance immediately unreadable
  ///     via the API.
  ///   * The instance can be deleted.
  ///   * All other attempts to modify the instance are rejected.
  ///
  /// Upon completion of the returned operation:
  ///
  ///   * Billing for all successfully-allocated resources begins (some types
  ///     may have lower than the requested levels).
  ///   * Databases can be created in the instance.
  ///   * The instance's allocated resource levels are readable via the API.
  ///   * The instance's state becomes `READY`.
  ///
  /// The returned [long-running operation][google.longrunning.Operation] will
  /// have a name of the format `<instance_name>/operations/<operation_id>` and
  /// can be used to track creation of the instance.  The
  /// [metadata][google.longrunning.Operation.metadata] field type is
  /// [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
  /// The [response][google.longrunning.Operation.response] field type is
  /// [Instance][google.spanner.admin.instance.v1.Instance], if successful.
  func createInstance(request: Google_Spanner_Admin_Instance_V1_CreateInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Updates an instance, and begins allocating or releasing resources
  /// as requested. The returned [long-running
  /// operation][google.longrunning.Operation] can be used to track the
  /// progress of updating the instance. If the named instance does not
  /// exist, returns `NOT_FOUND`.
  ///
  /// Immediately upon completion of this request:
  ///
  ///   * For resource types for which a decrease in the instance's allocation
  ///     has been requested, billing is based on the newly-requested level.
  ///
  /// Until completion of the returned operation:
  ///
  ///   * Cancelling the operation sets its metadata's
  ///     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
  ///     restoring resources to their pre-request values. The operation
  ///     is guaranteed to succeed at undoing all resource changes,
  ///     after which point it terminates with a `CANCELLED` status.
  ///   * All other attempts to modify the instance are rejected.
  ///   * Reading the instance via the API continues to give the pre-request
  ///     resource levels.
  ///
  /// Upon completion of the returned operation:
  ///
  ///   * Billing begins for all successfully-allocated resources (some types
  ///     may have lower than the requested levels).
  ///   * All newly-reserved resources are available for serving the instance's
  ///     tables.
  ///   * The instance's new resource levels are readable via the API.
  ///
  /// The returned [long-running operation][google.longrunning.Operation] will
  /// have a name of the format `<instance_name>/operations/<operation_id>` and
  /// can be used to track the instance modification.  The
  /// [metadata][google.longrunning.Operation.metadata] field type is
  /// [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
  /// The [response][google.longrunning.Operation.response] field type is
  /// [Instance][google.spanner.admin.instance.v1.Instance], if successful.
  ///
  /// Authorization requires `spanner.instances.update` permission on
  /// resource [name][google.spanner.admin.instance.v1.Instance.name].
  func updateInstance(request: Google_Spanner_Admin_Instance_V1_UpdateInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes an instance.
  ///
  /// Immediately upon completion of the request:
  ///
  ///   * Billing ceases for all of the instance's reserved resources.
  ///
  /// Soon afterward:
  ///
  ///   * The instance and *all of its databases* immediately and
  ///     irrevocably disappear from the API. All data in the databases
  ///     is permanently deleted.
  func deleteInstance(request: Google_Spanner_Admin_Instance_V1_DeleteInstanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Sets the access control policy on an instance resource. Replaces any
  /// existing policy.
  ///
  /// Authorization requires `spanner.instances.setIamPolicy` on
  /// [resource][google.iam.v1.SetIamPolicyRequest.resource].
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Gets the access control policy for an instance resource. Returns an empty
  /// policy if an instance exists but does not have a policy set.
  ///
  /// Authorization requires `spanner.instances.getIamPolicy` on
  /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  /// Returns permissions that the caller has on the specified instance resource.
  ///
  /// Attempting this RPC on a non-existent Cloud Spanner instance resource will
  /// result in a NOT_FOUND error if the user has `spanner.instances.list`
  /// permission on the containing Google Cloud Project. Otherwise returns an
  /// empty set of permissions.
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
}

extension Google_Spanner_Admin_Instance_V1_InstanceAdminProvider {
  public var serviceName: Substring { return "google.spanner.admin.instance.v1.InstanceAdmin" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListInstanceConfigs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInstanceConfigs(request: request, context: context)
        }
      }

    case "GetInstanceConfig":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInstanceConfig(request: request, context: context)
        }
      }

    case "ListInstances":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInstances(request: request, context: context)
        }
      }

    case "GetInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInstance(request: request, context: context)
        }
      }

    case "CreateInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createInstance(request: request, context: context)
        }
      }

    case "UpdateInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateInstance(request: request, context: context)
        }
      }

    case "DeleteInstance":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInstance(request: request, context: context)
        }
      }

    case "SetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

