// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/spanner/v1/query_plan.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Node information for nodes appearing in a [QueryPlan.plan_nodes][google.spanner.v1.QueryPlan.plan_nodes].
public struct Google_Spanner_V1_PlanNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The `PlanNode`'s index in [node list][google.spanner.v1.QueryPlan.plan_nodes].
  public var index: Int32 = 0

  /// Used to determine the type of node. May be needed for visualizing
  /// different kinds of nodes differently. For example, If the node is a
  /// [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] node, it will have a condensed representation
  /// which can be used to directly embed a description of the node in its
  /// parent.
  public var kind: Google_Spanner_V1_PlanNode.Kind = .unspecified

  /// The display name for the node.
  public var displayName: String = String()

  /// List of child node `index`es and their relationship to this parent.
  public var childLinks: [Google_Spanner_V1_PlanNode.ChildLink] = []

  /// Condensed representation for [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] nodes.
  public var shortRepresentation: Google_Spanner_V1_PlanNode.ShortRepresentation {
    get {return _shortRepresentation ?? Google_Spanner_V1_PlanNode.ShortRepresentation()}
    set {_shortRepresentation = newValue}
  }
  /// Returns true if `shortRepresentation` has been explicitly set.
  public var hasShortRepresentation: Bool {return self._shortRepresentation != nil}
  /// Clears the value of `shortRepresentation`. Subsequent reads from it will return its default value.
  public mutating func clearShortRepresentation() {self._shortRepresentation = nil}

  /// Attributes relevant to the node contained in a group of key-value pairs.
  /// For example, a Parameter Reference node could have the following
  /// information in its metadata:
  ///
  ///     {
  ///       "parameter_reference": "param1",
  ///       "parameter_type": "array"
  ///     }
  public var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// The execution statistics associated with the node, contained in a group of
  /// key-value pairs. Only present if the plan was returned as a result of a
  /// profile query. For example, number of executions, number of rows/time per
  /// execution etc.
  public var executionStats: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _executionStats ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_executionStats = newValue}
  }
  /// Returns true if `executionStats` has been explicitly set.
  public var hasExecutionStats: Bool {return self._executionStats != nil}
  /// Clears the value of `executionStats`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionStats() {self._executionStats = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The kind of [PlanNode][google.spanner.v1.PlanNode]. Distinguishes between the two different kinds of
  /// nodes that can appear in a query plan.
  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not specified.
    case unspecified // = 0

    /// Denotes a Relational operator node in the expression tree. Relational
    /// operators represent iterative processing of rows during query execution.
    /// For example, a `TableScan` operation that reads rows from a table.
    case relational // = 1

    /// Denotes a Scalar node in the expression tree. Scalar nodes represent
    /// non-iterable entities in the query plan. For example, constants or
    /// arithmetic operators appearing inside predicate expressions or references
    /// to column names.
    case scalar // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .relational
      case 2: self = .scalar
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .relational: return 1
      case .scalar: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Metadata associated with a parent-child relationship appearing in a
  /// [PlanNode][google.spanner.v1.PlanNode].
  public struct ChildLink {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The node to which the link points.
    public var childIndex: Int32 = 0

    /// The type of the link. For example, in Hash Joins this could be used to
    /// distinguish between the build child and the probe child, or in the case
    /// of the child being an output variable, to represent the tag associated
    /// with the output variable.
    public var type: String = String()

    /// Only present if the child node is [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] and corresponds
    /// to an output variable of the parent node. The field carries the name of
    /// the output variable.
    /// For example, a `TableScan` operator that reads rows from a table will
    /// have child links to the `SCALAR` nodes representing the output variables
    /// created for each column that is read by the operator. The corresponding
    /// `variable` fields will be set to the variable names assigned to the
    /// columns.
    public var variable: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Condensed representation of a node and its subtree. Only present for
  /// `SCALAR` [PlanNode(s)][google.spanner.v1.PlanNode].
  public struct ShortRepresentation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A string representation of the expression subtree rooted at this node.
    public var description_p: String = String()

    /// A mapping of (subquery variable name) -> (subquery node id) for cases
    /// where the `description` string of this node references a `SCALAR`
    /// subquery contained in the expression subtree rooted at this node. The
    /// referenced `SCALAR` subquery may not necessarily be a direct child of
    /// this node.
    public var subqueries: Dictionary<String,Int32> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _shortRepresentation: Google_Spanner_V1_PlanNode.ShortRepresentation? = nil
  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _executionStats: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

#if swift(>=4.2)

extension Google_Spanner_V1_PlanNode.Kind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Spanner_V1_PlanNode.Kind] = [
    .unspecified,
    .relational,
    .scalar,
  ]
}

#endif  // swift(>=4.2)

/// Contains an ordered list of nodes appearing in the query plan.
public struct Google_Spanner_V1_QueryPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The nodes in the query plan. Plan nodes are returned in pre-order starting
  /// with the plan root. Each [PlanNode][google.spanner.v1.PlanNode]'s `id` corresponds to its index in
  /// `plan_nodes`.
  public var planNodes: [Google_Spanner_V1_PlanNode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.spanner.v1"

extension Google_Spanner_V1_PlanNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlanNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "kind"),
    3: .standard(proto: "display_name"),
    4: .standard(proto: "child_links"),
    5: .standard(proto: "short_representation"),
    6: .same(proto: "metadata"),
    7: .standard(proto: "execution_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.childLinks) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._shortRepresentation) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._executionStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if self.kind != .unspecified {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    if !self.childLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.childLinks, fieldNumber: 4)
    }
    if let v = self._shortRepresentation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._executionStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_PlanNode, rhs: Google_Spanner_V1_PlanNode) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.childLinks != rhs.childLinks {return false}
    if lhs._shortRepresentation != rhs._shortRepresentation {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._executionStats != rhs._executionStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Spanner_V1_PlanNode.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KIND_UNSPECIFIED"),
    1: .same(proto: "RELATIONAL"),
    2: .same(proto: "SCALAR"),
  ]
}

extension Google_Spanner_V1_PlanNode.ChildLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Spanner_V1_PlanNode.protoMessageName + ".ChildLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_index"),
    2: .same(proto: "type"),
    3: .same(proto: "variable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.childIndex) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.variable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.childIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.childIndex, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.variable.isEmpty {
      try visitor.visitSingularStringField(value: self.variable, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_PlanNode.ChildLink, rhs: Google_Spanner_V1_PlanNode.ChildLink) -> Bool {
    if lhs.childIndex != rhs.childIndex {return false}
    if lhs.type != rhs.type {return false}
    if lhs.variable != rhs.variable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Spanner_V1_PlanNode.ShortRepresentation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Spanner_V1_PlanNode.protoMessageName + ".ShortRepresentation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "subqueries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.subqueries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.subqueries.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.subqueries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_PlanNode.ShortRepresentation, rhs: Google_Spanner_V1_PlanNode.ShortRepresentation) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.subqueries != rhs.subqueries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Spanner_V1_QueryPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plan_nodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.planNodes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.planNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.planNodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_QueryPlan, rhs: Google_Spanner_V1_QueryPlan) -> Bool {
    if lhs.planNodes != rhs.planNodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
