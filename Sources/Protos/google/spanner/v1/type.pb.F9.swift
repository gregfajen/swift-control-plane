// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/spanner/v1/type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// `TypeCode` is used as part of [Type][google.spanner.v1.Type] to
/// indicate the type of a Cloud Spanner value.
///
/// Each legal value of a type can be encoded to or decoded from a JSON
/// value, using the encodings described below. All Cloud Spanner values can
/// be `null`, regardless of type; `null`s are always encoded as a JSON
/// `null`.
public enum Google_Spanner_V1_TypeCode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Not specified.
  case unspecified // = 0

  /// Encoded as JSON `true` or `false`.
  case bool // = 1

  /// Encoded as `string`, in decimal format.
  case int64 // = 2

  /// Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
  /// `"-Infinity"`.
  case float64 // = 3

  /// Encoded as `string` in RFC 3339 timestamp format. The time zone
  /// must be present, and must be `"Z"`.
  ///
  /// If the schema has the column option
  /// `allow_commit_timestamp=true`, the placeholder string
  /// `"spanner.commit_timestamp()"` can be used to instruct the system
  /// to insert the commit timestamp associated with the transaction
  /// commit.
  case timestamp // = 4

  /// Encoded as `string` in RFC 3339 date format.
  case date // = 5

  /// Encoded as `string`.
  case string // = 6

  /// Encoded as a base64-encoded `string`, as described in RFC 4648,
  /// section 4.
  case bytes // = 7

  /// Encoded as `list`, where the list elements are represented
  /// according to
  /// [array_element_type][google.spanner.v1.Type.array_element_type].
  case array // = 8

  /// Encoded as `list`, where list element `i` is represented according
  /// to [struct_type.fields[i]][google.spanner.v1.StructType.fields].
  case `struct` // = 9

  /// Encoded as `string`, in decimal format or scientific notation format.
  /// <br>Decimal format:
  /// <br>`[+-]Digits[.[Digits]]` or
  /// <br>`[+-][Digits].Digits`
  ///
  /// Scientific notation:
  /// <br>`[+-]Digits[.[Digits]][ExponentIndicator[+-]Digits]` or
  /// <br>`[+-][Digits].Digits[ExponentIndicator[+-]Digits]`
  /// <br>(ExponentIndicator is `"e"` or `"E"`)
  case numeric // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .bool
    case 2: self = .int64
    case 3: self = .float64
    case 4: self = .timestamp
    case 5: self = .date
    case 6: self = .string
    case 7: self = .bytes
    case 8: self = .array
    case 9: self = .struct
    case 10: self = .numeric
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .bool: return 1
    case .int64: return 2
    case .float64: return 3
    case .timestamp: return 4
    case .date: return 5
    case .string: return 6
    case .bytes: return 7
    case .array: return 8
    case .struct: return 9
    case .numeric: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Spanner_V1_TypeCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Spanner_V1_TypeCode] = [
    .unspecified,
    .bool,
    .int64,
    .float64,
    .timestamp,
    .date,
    .string,
    .bytes,
    .array,
    .struct,
    .numeric,
  ]
}

#endif  // swift(>=4.2)

/// `Type` indicates the type of a Cloud Spanner value, as might be stored in a
/// table cell or returned from an SQL query.
public struct Google_Spanner_V1_Type {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
  public var code: Google_Spanner_V1_TypeCode {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  /// If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
  /// is the type of the array elements.
  public var arrayElementType: Google_Spanner_V1_Type {
    get {return _storage._arrayElementType ?? Google_Spanner_V1_Type()}
    set {_uniqueStorage()._arrayElementType = newValue}
  }
  /// Returns true if `arrayElementType` has been explicitly set.
  public var hasArrayElementType: Bool {return _storage._arrayElementType != nil}
  /// Clears the value of `arrayElementType`. Subsequent reads from it will return its default value.
  public mutating func clearArrayElementType() {_uniqueStorage()._arrayElementType = nil}

  /// If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
  /// provides type information for the struct's fields.
  public var structType: Google_Spanner_V1_StructType {
    get {return _storage._structType ?? Google_Spanner_V1_StructType()}
    set {_uniqueStorage()._structType = newValue}
  }
  /// Returns true if `structType` has been explicitly set.
  public var hasStructType: Bool {return _storage._structType != nil}
  /// Clears the value of `structType`. Subsequent reads from it will return its default value.
  public mutating func clearStructType() {_uniqueStorage()._structType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// `StructType` defines the fields of a [STRUCT][google.spanner.v1.TypeCode.STRUCT] type.
public struct Google_Spanner_V1_StructType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of fields that make up this struct. Order is
  /// significant, because values of this struct type are represented as
  /// lists, where the order of field values matches the order of
  /// fields in the [StructType][google.spanner.v1.StructType]. In turn, the order of fields
  /// matches the order of columns in a read request, or the order of
  /// fields in the `SELECT` clause of a query.
  public var fields: [Google_Spanner_V1_StructType.Field] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Message representing a single field of a struct.
  public struct Field {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name of the field. For reads, this is the column name. For
    /// SQL queries, it is the column alias (e.g., `"Word"` in the
    /// query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
    /// `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
    /// columns might have an empty name (e.g., !"SELECT
    /// UPPER(ColName)"`). Note that a query result can contain
    /// multiple fields with the same name.
    public var name: String = String()

    /// The type of the field.
    public var type: Google_Spanner_V1_Type {
      get {return _type ?? Google_Spanner_V1_Type()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    public mutating func clearType() {self._type = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _type: Google_Spanner_V1_Type? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.spanner.v1"

extension Google_Spanner_V1_TypeCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_CODE_UNSPECIFIED"),
    1: .same(proto: "BOOL"),
    2: .same(proto: "INT64"),
    3: .same(proto: "FLOAT64"),
    4: .same(proto: "TIMESTAMP"),
    5: .same(proto: "DATE"),
    6: .same(proto: "STRING"),
    7: .same(proto: "BYTES"),
    8: .same(proto: "ARRAY"),
    9: .same(proto: "STRUCT"),
    10: .same(proto: "NUMERIC"),
  ]
}

extension Google_Spanner_V1_Type: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .standard(proto: "array_element_type"),
    3: .standard(proto: "struct_type"),
  ]

  fileprivate class _StorageClass {
    var _code: Google_Spanner_V1_TypeCode = .unspecified
    var _arrayElementType: Google_Spanner_V1_Type? = nil
    var _structType: Google_Spanner_V1_StructType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _arrayElementType = source._arrayElementType
      _structType = source._structType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._code) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._arrayElementType) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._structType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._code != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._code, fieldNumber: 1)
      }
      if let v = _storage._arrayElementType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._structType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_Type, rhs: Google_Spanner_V1_Type) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._arrayElementType != rhs_storage._arrayElementType {return false}
        if _storage._structType != rhs_storage._structType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Spanner_V1_StructType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StructType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_StructType, rhs: Google_Spanner_V1_StructType) -> Bool {
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Spanner_V1_StructType.Field: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Spanner_V1_StructType.protoMessageName + ".Field"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Spanner_V1_StructType.Field, rhs: Google_Spanner_V1_StructType.Field) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
