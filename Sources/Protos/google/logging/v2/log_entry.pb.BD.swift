// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/logging/v2/log_entry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An individual entry in a log.
public struct Google_Logging_V2_LogEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the log to which this log entry belongs:
  ///
  ///     "projects/[PROJECT_ID]/logs/[LOG_ID]"
  ///     "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
  ///     "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
  ///     "folders/[FOLDER_ID]/logs/[LOG_ID]"
  ///
  /// A project number may be used in place of PROJECT_ID. The project number is
  /// translated to its corresponding PROJECT_ID internally and the `log_name`
  /// field will contain PROJECT_ID in queries and exports.
  ///
  /// `[LOG_ID]` must be URL-encoded within `log_name`. Example:
  /// `"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity"`.
  /// `[LOG_ID]` must be less than 512 characters long and can only include the
  /// following characters: upper and lower case alphanumeric characters,
  /// forward-slash, underscore, hyphen, and period.
  ///
  /// For backward compatibility, if `log_name` begins with a forward-slash, such
  /// as `/projects/...`, then the log entry is ingested as usual but the
  /// forward-slash is removed. Listing the log entry will not show the leading
  /// slash and filtering for a log name with a leading slash will never return
  /// any results.
  public var logName: String = String()

  /// Required. The monitored resource that produced this log entry.
  ///
  /// Example: a log entry that reports a database error would be associated with
  /// the monitored resource designating the particular database that reported
  /// the error.
  public var resource: Google_Api_MonitoredResource {
    get {return _resource ?? Google_Api_MonitoredResource()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {self._resource = nil}

  /// The log entry payload, which can be one of multiple types.
  public var payload: Google_Logging_V2_LogEntry.OneOf_Payload? = nil

  /// The log entry payload, represented as a protocol buffer. Some Google
  /// Cloud Platform services use this field for their log entry payloads.
  ///
  /// The following protocol buffer types are supported; user-defined types
  /// are not supported:
  ///
  ///   "type.googleapis.com/google.cloud.audit.AuditLog"
  ///   "type.googleapis.com/google.appengine.logging.v1.RequestLog"
  public var protoPayload: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .protoPayload(let v)? = payload {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {payload = .protoPayload(newValue)}
  }

  /// The log entry payload, represented as a Unicode string (UTF-8).
  public var textPayload: String {
    get {
      if case .textPayload(let v)? = payload {return v}
      return String()
    }
    set {payload = .textPayload(newValue)}
  }

  /// The log entry payload, represented as a structure that is
  /// expressed as a JSON object.
  public var jsonPayload: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .jsonPayload(let v)? = payload {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {payload = .jsonPayload(newValue)}
  }

  /// Optional. The time the event described by the log entry occurred. This time is used
  /// to compute the log entry's age and to enforce the logs retention period.
  /// If this field is omitted in a new log entry, then Logging assigns it the
  /// current time. Timestamps have nanosecond accuracy, but trailing zeros in
  /// the fractional seconds might be omitted when the timestamp is displayed.
  ///
  /// Incoming log entries should have timestamps that are no more than the [logs
  /// retention period](https://cloud.google.com/logging/quotas) in the past, and no more than 24 hours
  /// in the future. Log entries outside those time boundaries will not be
  /// available when calling `entries.list`, but those log entries can still be
  /// [exported with LogSinks](https://cloud.google.com/logging/docs/api/tasks/exporting-logs).
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// Output only. The time the log entry was received by Logging.
  public var receiveTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _receiveTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_receiveTimestamp = newValue}
  }
  /// Returns true if `receiveTimestamp` has been explicitly set.
  public var hasReceiveTimestamp: Bool {return self._receiveTimestamp != nil}
  /// Clears the value of `receiveTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearReceiveTimestamp() {self._receiveTimestamp = nil}

  /// Optional. The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
  public var severity: Google_Logging_Type_LogSeverity = .default

  /// Optional. A unique identifier for the log entry. If you provide a value, then
  /// Logging considers other log entries in the same project, with the same
  /// `timestamp`, and with the same `insert_id` to be duplicates which are
  /// removed in a single query result. However, there are no guarantees of
  /// de-duplication in the export of logs.
  ///
  /// If the `insert_id` is omitted when writing a log entry, the Logging API
  ///  assigns its own unique identifier in this field.
  ///
  /// In queries, the `insert_id` is also used to order log entries that have
  /// the same `log_name` and `timestamp` values.
  public var insertID: String = String()

  /// Optional. Information about the HTTP request associated with this log entry, if
  /// applicable.
  public var httpRequest: Google_Logging_Type_HttpRequest {
    get {return _httpRequest ?? Google_Logging_Type_HttpRequest()}
    set {_httpRequest = newValue}
  }
  /// Returns true if `httpRequest` has been explicitly set.
  public var hasHTTPRequest: Bool {return self._httpRequest != nil}
  /// Clears the value of `httpRequest`. Subsequent reads from it will return its default value.
  public mutating func clearHTTPRequest() {self._httpRequest = nil}

  /// Optional. A set of user-defined (key, value) data that provides additional
  /// information about the log entry.
  public var labels: Dictionary<String,String> = [:]

  /// Optional. Information about an operation associated with the log entry, if
  /// applicable.
  public var operation: Google_Logging_V2_LogEntryOperation {
    get {return _operation ?? Google_Logging_V2_LogEntryOperation()}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  public var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  public mutating func clearOperation() {self._operation = nil}

  /// Optional. Resource name of the trace associated with the log entry, if any. If it
  /// contains a relative resource name, the name is assumed to be relative to
  /// `//tracing.googleapis.com`. Example:
  /// `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
  public var trace: String = String()

  /// Optional. The span ID within the trace associated with the log entry.
  ///
  /// For Trace spans, this is the same format that the Trace API v2 uses: a
  /// 16-character hexadecimal encoding of an 8-byte array, such as
  /// `000000000000004a`.
  public var spanID: String = String()

  /// Optional. The sampling decision of the trace associated with the log entry.
  ///
  /// True means that the trace resource name in the `trace` field was sampled
  /// for storage in a trace backend. False means that the trace was not sampled
  /// for storage when this log entry was written, or the sampling decision was
  /// unknown at the time. A non-sampled `trace` value is still useful as a
  /// request correlation identifier. The default is False.
  public var traceSampled: Bool = false

  /// Optional. Source code location information associated with the log entry, if any.
  public var sourceLocation: Google_Logging_V2_LogEntrySourceLocation {
    get {return _sourceLocation ?? Google_Logging_V2_LogEntrySourceLocation()}
    set {_sourceLocation = newValue}
  }
  /// Returns true if `sourceLocation` has been explicitly set.
  public var hasSourceLocation: Bool {return self._sourceLocation != nil}
  /// Clears the value of `sourceLocation`. Subsequent reads from it will return its default value.
  public mutating func clearSourceLocation() {self._sourceLocation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The log entry payload, which can be one of multiple types.
  public enum OneOf_Payload: Equatable {
    /// The log entry payload, represented as a protocol buffer. Some Google
    /// Cloud Platform services use this field for their log entry payloads.
    ///
    /// The following protocol buffer types are supported; user-defined types
    /// are not supported:
    ///
    ///   "type.googleapis.com/google.cloud.audit.AuditLog"
    ///   "type.googleapis.com/google.appengine.logging.v1.RequestLog"
    case protoPayload(SwiftProtobuf.Google_Protobuf_Any)
    /// The log entry payload, represented as a Unicode string (UTF-8).
    case textPayload(String)
    /// The log entry payload, represented as a structure that is
    /// expressed as a JSON object.
    case jsonPayload(SwiftProtobuf.Google_Protobuf_Struct)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Logging_V2_LogEntry.OneOf_Payload, rhs: Google_Logging_V2_LogEntry.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.protoPayload(let l), .protoPayload(let r)): return l == r
      case (.textPayload(let l), .textPayload(let r)): return l == r
      case (.jsonPayload(let l), .jsonPayload(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _resource: Google_Api_MonitoredResource? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _receiveTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _httpRequest: Google_Logging_Type_HttpRequest? = nil
  fileprivate var _operation: Google_Logging_V2_LogEntryOperation? = nil
  fileprivate var _sourceLocation: Google_Logging_V2_LogEntrySourceLocation? = nil
}

/// Additional information about a potentially long-running operation with which
/// a log entry is associated.
public struct Google_Logging_V2_LogEntryOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. An arbitrary operation identifier. Log entries with the same
  /// identifier are assumed to be part of the same operation.
  public var id: String = String()

  /// Optional. An arbitrary producer identifier. The combination of `id` and
  /// `producer` must be globally unique. Examples for `producer`:
  /// `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
  public var producer: String = String()

  /// Optional. Set this to True if this is the first log entry in the operation.
  public var first: Bool = false

  /// Optional. Set this to True if this is the last log entry in the operation.
  public var last: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Additional information about the source code location that produced the log
/// entry.
public struct Google_Logging_V2_LogEntrySourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Source file name. Depending on the runtime environment, this
  /// might be a simple name or a fully-qualified name.
  public var file: String = String()

  /// Optional. Line within the source file. 1-based; 0 indicates no line number
  /// available.
  public var line: Int64 = 0

  /// Optional. Human-readable name of the function or method being invoked, with
  /// optional context such as the class or package name. This information may be
  /// used in contexts such as the logs viewer, where a file and line number are
  /// less meaningful. The format can vary by language. For example:
  /// `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
  /// (Python).
  public var function: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.logging.v2"

extension Google_Logging_V2_LogEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    12: .standard(proto: "log_name"),
    8: .same(proto: "resource"),
    2: .standard(proto: "proto_payload"),
    3: .standard(proto: "text_payload"),
    6: .standard(proto: "json_payload"),
    9: .same(proto: "timestamp"),
    24: .standard(proto: "receive_timestamp"),
    10: .same(proto: "severity"),
    4: .standard(proto: "insert_id"),
    7: .standard(proto: "http_request"),
    11: .same(proto: "labels"),
    15: .same(proto: "operation"),
    22: .same(proto: "trace"),
    27: .standard(proto: "span_id"),
    30: .standard(proto: "trace_sampled"),
    23: .standard(proto: "source_location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2:
        var v: SwiftProtobuf.Google_Protobuf_Any?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .protoPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .protoPayload(v)}
      case 3:
        if self.payload != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.payload = .textPayload(v)}
      case 4: try decoder.decodeSingularStringField(value: &self.insertID)
      case 6:
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .jsonPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .jsonPayload(v)}
      case 7: try decoder.decodeSingularMessageField(value: &self._httpRequest)
      case 8: try decoder.decodeSingularMessageField(value: &self._resource)
      case 9: try decoder.decodeSingularMessageField(value: &self._timestamp)
      case 10: try decoder.decodeSingularEnumField(value: &self.severity)
      case 11: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels)
      case 12: try decoder.decodeSingularStringField(value: &self.logName)
      case 15: try decoder.decodeSingularMessageField(value: &self._operation)
      case 22: try decoder.decodeSingularStringField(value: &self.trace)
      case 23: try decoder.decodeSingularMessageField(value: &self._sourceLocation)
      case 24: try decoder.decodeSingularMessageField(value: &self._receiveTimestamp)
      case 27: try decoder.decodeSingularStringField(value: &self.spanID)
      case 30: try decoder.decodeSingularBoolField(value: &self.traceSampled)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.payload {
    case .protoPayload(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .textPayload(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case nil: break
    default: break
    }
    if !self.insertID.isEmpty {
      try visitor.visitSingularStringField(value: self.insertID, fieldNumber: 4)
    }
    if case .jsonPayload(let v)? = self.payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._httpRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if self.severity != .default {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 10)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 11)
    }
    if !self.logName.isEmpty {
      try visitor.visitSingularStringField(value: self.logName, fieldNumber: 12)
    }
    if let v = self._operation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    if !self.trace.isEmpty {
      try visitor.visitSingularStringField(value: self.trace, fieldNumber: 22)
    }
    if let v = self._sourceLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }
    if let v = self._receiveTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }
    if !self.spanID.isEmpty {
      try visitor.visitSingularStringField(value: self.spanID, fieldNumber: 27)
    }
    if self.traceSampled != false {
      try visitor.visitSingularBoolField(value: self.traceSampled, fieldNumber: 30)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Logging_V2_LogEntry, rhs: Google_Logging_V2_LogEntry) -> Bool {
    if lhs.logName != rhs.logName {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._receiveTimestamp != rhs._receiveTimestamp {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.insertID != rhs.insertID {return false}
    if lhs._httpRequest != rhs._httpRequest {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._operation != rhs._operation {return false}
    if lhs.trace != rhs.trace {return false}
    if lhs.spanID != rhs.spanID {return false}
    if lhs.traceSampled != rhs.traceSampled {return false}
    if lhs._sourceLocation != rhs._sourceLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Logging_V2_LogEntryOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntryOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "producer"),
    3: .same(proto: "first"),
    4: .same(proto: "last"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.producer)
      case 3: try decoder.decodeSingularBoolField(value: &self.first)
      case 4: try decoder.decodeSingularBoolField(value: &self.last)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.producer.isEmpty {
      try visitor.visitSingularStringField(value: self.producer, fieldNumber: 2)
    }
    if self.first != false {
      try visitor.visitSingularBoolField(value: self.first, fieldNumber: 3)
    }
    if self.last != false {
      try visitor.visitSingularBoolField(value: self.last, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Logging_V2_LogEntryOperation, rhs: Google_Logging_V2_LogEntryOperation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.producer != rhs.producer {return false}
    if lhs.first != rhs.first {return false}
    if lhs.last != rhs.last {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Logging_V2_LogEntrySourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntrySourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "file"),
    2: .same(proto: "line"),
    3: .same(proto: "function"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.file)
      case 2: try decoder.decodeSingularInt64Field(value: &self.line)
      case 3: try decoder.decodeSingularStringField(value: &self.function)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 1)
    }
    if self.line != 0 {
      try visitor.visitSingularInt64Field(value: self.line, fieldNumber: 2)
    }
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Logging_V2_LogEntrySourceLocation, rhs: Google_Logging_V2_LogEntrySourceLocation) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.line != rhs.line {return false}
    if lhs.function != rhs.function {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
