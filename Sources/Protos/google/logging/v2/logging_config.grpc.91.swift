//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/logging/v2/logging_config.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Logging_V2_ConfigServiceV2Client, then call methods of this protocol to make API calls.
public protocol Google_Logging_V2_ConfigServiceV2ClientProtocol: GRPCClient {
  func listBuckets(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse>

  func getBucket(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket>

  func updateBucket(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket>

  func listSinks(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse>

  func getSink(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink>

  func createSink(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink>

  func updateSink(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink>

  func deleteSink(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listExclusions(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse>

  func getExclusion(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion>

  func createExclusion(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion>

  func updateExclusion(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion>

  func deleteExclusion(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getCmekSettings(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings>

  func updateCmekSettings(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings>

}

extension Google_Logging_V2_ConfigServiceV2ClientProtocol {

  /// Lists buckets (Beta).
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBuckets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listBuckets(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/ListBuckets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a bucket (Beta).
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBucket(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/GetBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a bucket. This method replaces the following fields in the
  /// existing bucket with values from the new bucket: `retention_period`
  ///
  /// If the retention period is decreased and the bucket is locked,
  /// FAILED_PRECONDITION will be returned.
  ///
  /// If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION
  /// will be returned.
  ///
  /// A buckets region may not be modified after it is created.
  /// This method is in Beta.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateBucket(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/UpdateBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists sinks.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSinks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSinks(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/ListSinks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets a sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSink(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/GetSink",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a sink that exports specified log entries to a destination. The
  /// export of newly-ingested log entries begins immediately, unless the sink's
  /// `writer_identity` is not permitted to write to the destination. A sink can
  /// export log entries only from the resource owning the sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSink(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/CreateSink",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates a sink. This method replaces the following fields in the existing
  /// sink with values from the new sink: `destination`, and `filter`.
  ///
  /// The updated sink might also have a new `writer_identity`; see the
  /// `unique_writer_identity` field.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateSink(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/UpdateSink",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a sink. If the sink has a unique `writer_identity`, then that
  /// service account is also deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSink(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/DeleteSink",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all the exclusions in a parent resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExclusions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listExclusions(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/ListExclusions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the description of an exclusion.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getExclusion(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/GetExclusion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Creates a new exclusion in a specified parent resource.
  /// Only log entries belonging to that resource can be excluded.
  /// You can have up to 10 exclusions in a resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createExclusion(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/CreateExclusion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Changes one or more properties of an existing exclusion.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateExclusion(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/UpdateExclusion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes an exclusion.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteExclusion(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/DeleteExclusion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the Logs Router CMEK settings for the given resource.
  ///
  /// Note: CMEK for the Logs Router can currently only be configured for GCP
  /// organizations. Once configured, it applies to all projects and folders in
  /// the GCP organization.
  ///
  /// See [Enabling CMEK for Logs
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCmekSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCmekSettings(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/GetCmekSettings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the Logs Router CMEK settings for the given resource.
  ///
  /// Note: CMEK for the Logs Router can currently only be configured for GCP
  /// organizations. Once configured, it applies to all projects and folders in
  /// the GCP organization.
  ///
  /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
  /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
  /// account does not have the required
  /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
  /// 3) access to the key is disabled.
  ///
  /// See [Enabling CMEK for Logs
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCmekSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCmekSettings(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings> {
    return self.makeUnaryCall(
      path: "/google.logging.v2.ConfigServiceV2/UpdateCmekSettings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Logging_V2_ConfigServiceV2Client: Google_Logging_V2_ConfigServiceV2ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.logging.v2.ConfigServiceV2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Logging_V2_ConfigServiceV2Provider: CallHandlerProvider {
  /// Lists buckets (Beta).
  func listBuckets(request: Google_Logging_V2_ListBucketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_ListBucketsResponse>
  /// Gets a bucket (Beta).
  func getBucket(request: Google_Logging_V2_GetBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogBucket>
  /// Updates a bucket. This method replaces the following fields in the
  /// existing bucket with values from the new bucket: `retention_period`
  ///
  /// If the retention period is decreased and the bucket is locked,
  /// FAILED_PRECONDITION will be returned.
  ///
  /// If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION
  /// will be returned.
  ///
  /// A buckets region may not be modified after it is created.
  /// This method is in Beta.
  func updateBucket(request: Google_Logging_V2_UpdateBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogBucket>
  /// Lists sinks.
  func listSinks(request: Google_Logging_V2_ListSinksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_ListSinksResponse>
  /// Gets a sink.
  func getSink(request: Google_Logging_V2_GetSinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogSink>
  /// Creates a sink that exports specified log entries to a destination. The
  /// export of newly-ingested log entries begins immediately, unless the sink's
  /// `writer_identity` is not permitted to write to the destination. A sink can
  /// export log entries only from the resource owning the sink.
  func createSink(request: Google_Logging_V2_CreateSinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogSink>
  /// Updates a sink. This method replaces the following fields in the existing
  /// sink with values from the new sink: `destination`, and `filter`.
  ///
  /// The updated sink might also have a new `writer_identity`; see the
  /// `unique_writer_identity` field.
  func updateSink(request: Google_Logging_V2_UpdateSinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogSink>
  /// Deletes a sink. If the sink has a unique `writer_identity`, then that
  /// service account is also deleted.
  func deleteSink(request: Google_Logging_V2_DeleteSinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Lists all the exclusions in a parent resource.
  func listExclusions(request: Google_Logging_V2_ListExclusionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_ListExclusionsResponse>
  /// Gets the description of an exclusion.
  func getExclusion(request: Google_Logging_V2_GetExclusionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogExclusion>
  /// Creates a new exclusion in a specified parent resource.
  /// Only log entries belonging to that resource can be excluded.
  /// You can have up to 10 exclusions in a resource.
  func createExclusion(request: Google_Logging_V2_CreateExclusionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogExclusion>
  /// Changes one or more properties of an existing exclusion.
  func updateExclusion(request: Google_Logging_V2_UpdateExclusionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_LogExclusion>
  /// Deletes an exclusion.
  func deleteExclusion(request: Google_Logging_V2_DeleteExclusionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Gets the Logs Router CMEK settings for the given resource.
  ///
  /// Note: CMEK for the Logs Router can currently only be configured for GCP
  /// organizations. Once configured, it applies to all projects and folders in
  /// the GCP organization.
  ///
  /// See [Enabling CMEK for Logs
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  func getCmekSettings(request: Google_Logging_V2_GetCmekSettingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_CmekSettings>
  /// Updates the Logs Router CMEK settings for the given resource.
  ///
  /// Note: CMEK for the Logs Router can currently only be configured for GCP
  /// organizations. Once configured, it applies to all projects and folders in
  /// the GCP organization.
  ///
  /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
  /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
  /// account does not have the required
  /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
  /// 3) access to the key is disabled.
  ///
  /// See [Enabling CMEK for Logs
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  func updateCmekSettings(request: Google_Logging_V2_UpdateCmekSettingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Logging_V2_CmekSettings>
}

extension Google_Logging_V2_ConfigServiceV2Provider {
  public var serviceName: Substring { return "google.logging.v2.ConfigServiceV2" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListBuckets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listBuckets(request: request, context: context)
        }
      }

    case "GetBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBucket(request: request, context: context)
        }
      }

    case "UpdateBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateBucket(request: request, context: context)
        }
      }

    case "ListSinks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSinks(request: request, context: context)
        }
      }

    case "GetSink":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSink(request: request, context: context)
        }
      }

    case "CreateSink":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createSink(request: request, context: context)
        }
      }

    case "UpdateSink":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateSink(request: request, context: context)
        }
      }

    case "DeleteSink":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSink(request: request, context: context)
        }
      }

    case "ListExclusions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listExclusions(request: request, context: context)
        }
      }

    case "GetExclusion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getExclusion(request: request, context: context)
        }
      }

    case "CreateExclusion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createExclusion(request: request, context: context)
        }
      }

    case "UpdateExclusion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateExclusion(request: request, context: context)
        }
      }

    case "DeleteExclusion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteExclusion(request: request, context: context)
        }
      }

    case "GetCmekSettings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCmekSettings(request: request, context: context)
        }
      }

    case "UpdateCmekSettings":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateCmekSettings(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

