//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/streetview/publish/v1/streetview_publish.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Google_Streetview_Publish_V1_StreetViewPublishServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Streetview_Publish_V1_StreetViewPublishServiceClientProtocol: GRPCClient {
  func startUpload(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Google_Streetview_Publish_V1_UploadRef>

  func createPhoto(
    _ request: Google_Streetview_Publish_V1_CreatePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_CreatePhotoRequest, Google_Streetview_Publish_V1_Photo>

  func getPhoto(
    _ request: Google_Streetview_Publish_V1_GetPhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_GetPhotoRequest, Google_Streetview_Publish_V1_Photo>

  func batchGetPhotos(
    _ request: Google_Streetview_Publish_V1_BatchGetPhotosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_BatchGetPhotosRequest, Google_Streetview_Publish_V1_BatchGetPhotosResponse>

  func listPhotos(
    _ request: Google_Streetview_Publish_V1_ListPhotosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_ListPhotosRequest, Google_Streetview_Publish_V1_ListPhotosResponse>

  func updatePhoto(
    _ request: Google_Streetview_Publish_V1_UpdatePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_UpdatePhotoRequest, Google_Streetview_Publish_V1_Photo>

  func batchUpdatePhotos(
    _ request: Google_Streetview_Publish_V1_BatchUpdatePhotosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_BatchUpdatePhotosRequest, Google_Streetview_Publish_V1_BatchUpdatePhotosResponse>

  func deletePhoto(
    _ request: Google_Streetview_Publish_V1_DeletePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_DeletePhotoRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func batchDeletePhotos(
    _ request: Google_Streetview_Publish_V1_BatchDeletePhotosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Streetview_Publish_V1_BatchDeletePhotosRequest, Google_Streetview_Publish_V1_BatchDeletePhotosResponse>

}

extension Google_Streetview_Publish_V1_StreetViewPublishServiceClientProtocol {

  /// Creates an upload session to start uploading photo bytes. The method uses
  /// the upload URL of the returned
  /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
  /// the [Photo][google.streetview.publish.v1.Photo].
  ///
  /// In addition to the photo requirements shown in
  /// https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
  /// the photo must meet the following requirements:
  ///
  /// * Photo Sphere XMP metadata must be included in the photo medadata. See
  /// https://developers.google.com/streetview/spherical-metadata for the
  /// required fields.
  /// * The pixel size of the photo must meet the size requirements listed in
  /// https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
  /// the photo must be a full 360 horizontally.
  ///
  /// After the upload completes, the method uses
  /// [UploadRef][google.streetview.publish.v1.UploadRef] with
  /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
  /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartUpload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startUpload(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Google_Streetview_Publish_V1_UploadRef> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/StartUpload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// After the client finishes uploading the photo with the returned
  /// [UploadRef][google.streetview.publish.v1.UploadRef],
  /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
  /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
  /// Street View on Google Maps.
  ///
  /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
  /// through the [Photo Sphere XMP
  /// metadata](https://developers.google.com/streetview/spherical-metadata) in
  /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
  /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
  /// the request is malformed or if the uploaded photo is not a 360 photo.
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
  /// reference does not exist.
  /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
  /// if the account has reached the storage limit.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createPhoto(
    _ request: Google_Streetview_Publish_V1_CreatePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_CreatePhotoRequest, Google_Streetview_Publish_V1_Photo> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/CreatePhoto",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the metadata of the specified
  /// [Photo][google.streetview.publish.v1.Photo].
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
  /// the requesting user did not create the requested
  /// [Photo][google.streetview.publish.v1.Photo].
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
  /// [Photo][google.streetview.publish.v1.Photo] does not exist.
  /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
  /// requested [Photo][google.streetview.publish.v1.Photo] is still being
  /// indexed.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPhoto(
    _ request: Google_Streetview_Publish_V1_GetPhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_GetPhotoRequest, Google_Streetview_Publish_V1_Photo> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/GetPhoto",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the metadata of the specified
  /// [Photo][google.streetview.publish.v1.Photo] batch.
  ///
  /// Note that if
  /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
  /// fails, either critical fields are missing or there is an authentication
  /// error. Even if
  /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
  /// succeeds, individual photos in the batch may have failures.
  /// These failures are specified in each
  /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
  /// in
  /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
  /// See
  /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
  /// for specific failures that can occur per photo.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchGetPhotos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchGetPhotos(
    _ request: Google_Streetview_Publish_V1_BatchGetPhotosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_BatchGetPhotosRequest, Google_Streetview_Publish_V1_BatchGetPhotosResponse> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/BatchGetPhotos",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
  /// the user.
  ///
  /// <aside class="note"><b>Note:</b> Recently created photos that are still
  /// being indexed are not returned in the response.</aside>
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPhotos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPhotos(
    _ request: Google_Streetview_Publish_V1_ListPhotosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_ListPhotosRequest, Google_Streetview_Publish_V1_ListPhotosResponse> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/ListPhotos",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
  /// as pose, place association, connections, etc. Changing the pixels of a
  /// photo is not supported.
  ///
  /// Only the fields specified in the
  /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
  /// field are used. If `updateMask` is not present, the update applies to all
  /// fields.
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
  /// the requesting user did not create the requested photo.
  /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
  /// the request is malformed.
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
  /// photo does not exist.
  /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
  /// requested [Photo][google.streetview.publish.v1.Photo] is still being
  /// indexed.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updatePhoto(
    _ request: Google_Streetview_Publish_V1_UpdatePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_UpdatePhotoRequest, Google_Streetview_Publish_V1_Photo> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/UpdatePhoto",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
  /// as pose, place association, connections, etc. Changing the pixels of photos
  /// is not supported.
  ///
  /// Note that if
  /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
  /// fails, either critical fields are missing or there is an authentication
  /// error. Even if
  /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
  /// succeeds, individual photos in the batch may have failures.
  /// These failures are specified in each
  /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
  /// in
  /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
  /// See
  /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
  /// for specific failures that can occur per photo.
  ///
  /// Only the fields specified in
  /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
  /// field are used. If `updateMask` is not present, the update applies to all
  /// fields.
  ///
  /// The number of
  /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
  /// messages in a
  /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
  /// must not exceed 20.
  ///
  /// <aside class="note"><b>Note:</b> To update
  /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
  /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
  /// filled as well. Otherwise, the request will fail.</aside>
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchUpdatePhotos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchUpdatePhotos(
    _ request: Google_Streetview_Publish_V1_BatchUpdatePhotosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_BatchUpdatePhotosRequest, Google_Streetview_Publish_V1_BatchUpdatePhotosResponse> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/BatchUpdatePhotos",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
  /// the requesting user did not create the requested photo.
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
  /// does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeletePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deletePhoto(
    _ request: Google_Streetview_Publish_V1_DeletePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_DeletePhotoRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/DeletePhoto",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
  /// metadata.
  ///
  /// Note that if
  /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
  /// fails, either critical fields are missing or there was an authentication
  /// error. Even if
  /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
  /// succeeds, individual photos in the batch may have failures.
  /// These failures are specified in each
  /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
  /// in
  /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
  /// See
  /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
  /// for specific failures that can occur per photo.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchDeletePhotos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchDeletePhotos(
    _ request: Google_Streetview_Publish_V1_BatchDeletePhotosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Streetview_Publish_V1_BatchDeletePhotosRequest, Google_Streetview_Publish_V1_BatchDeletePhotosResponse> {
    return self.makeUnaryCall(
      path: "/google.streetview.publish.v1.StreetViewPublishService/BatchDeletePhotos",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Google_Streetview_Publish_V1_StreetViewPublishServiceClient: Google_Streetview_Publish_V1_StreetViewPublishServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.streetview.publish.v1.StreetViewPublishService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Streetview_Publish_V1_StreetViewPublishServiceProvider: CallHandlerProvider {
  /// Creates an upload session to start uploading photo bytes. The method uses
  /// the upload URL of the returned
  /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
  /// the [Photo][google.streetview.publish.v1.Photo].
  ///
  /// In addition to the photo requirements shown in
  /// https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
  /// the photo must meet the following requirements:
  ///
  /// * Photo Sphere XMP metadata must be included in the photo medadata. See
  /// https://developers.google.com/streetview/spherical-metadata for the
  /// required fields.
  /// * The pixel size of the photo must meet the size requirements listed in
  /// https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
  /// the photo must be a full 360 horizontally.
  ///
  /// After the upload completes, the method uses
  /// [UploadRef][google.streetview.publish.v1.UploadRef] with
  /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
  /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
  func startUpload(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_UploadRef>
  /// After the client finishes uploading the photo with the returned
  /// [UploadRef][google.streetview.publish.v1.UploadRef],
  /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
  /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
  /// Street View on Google Maps.
  ///
  /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
  /// through the [Photo Sphere XMP
  /// metadata](https://developers.google.com/streetview/spherical-metadata) in
  /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
  /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
  /// the request is malformed or if the uploaded photo is not a 360 photo.
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
  /// reference does not exist.
  /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
  /// if the account has reached the storage limit.
  func createPhoto(request: Google_Streetview_Publish_V1_CreatePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_Photo>
  /// Gets the metadata of the specified
  /// [Photo][google.streetview.publish.v1.Photo].
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
  /// the requesting user did not create the requested
  /// [Photo][google.streetview.publish.v1.Photo].
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
  /// [Photo][google.streetview.publish.v1.Photo] does not exist.
  /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
  /// requested [Photo][google.streetview.publish.v1.Photo] is still being
  /// indexed.
  func getPhoto(request: Google_Streetview_Publish_V1_GetPhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_Photo>
  /// Gets the metadata of the specified
  /// [Photo][google.streetview.publish.v1.Photo] batch.
  ///
  /// Note that if
  /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
  /// fails, either critical fields are missing or there is an authentication
  /// error. Even if
  /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
  /// succeeds, individual photos in the batch may have failures.
  /// These failures are specified in each
  /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
  /// in
  /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
  /// See
  /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
  /// for specific failures that can occur per photo.
  func batchGetPhotos(request: Google_Streetview_Publish_V1_BatchGetPhotosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_BatchGetPhotosResponse>
  /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
  /// the user.
  ///
  /// <aside class="note"><b>Note:</b> Recently created photos that are still
  /// being indexed are not returned in the response.</aside>
  func listPhotos(request: Google_Streetview_Publish_V1_ListPhotosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_ListPhotosResponse>
  /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
  /// as pose, place association, connections, etc. Changing the pixels of a
  /// photo is not supported.
  ///
  /// Only the fields specified in the
  /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
  /// field are used. If `updateMask` is not present, the update applies to all
  /// fields.
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
  /// the requesting user did not create the requested photo.
  /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
  /// the request is malformed.
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
  /// photo does not exist.
  /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
  /// requested [Photo][google.streetview.publish.v1.Photo] is still being
  /// indexed.
  func updatePhoto(request: Google_Streetview_Publish_V1_UpdatePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_Photo>
  /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
  /// as pose, place association, connections, etc. Changing the pixels of photos
  /// is not supported.
  ///
  /// Note that if
  /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
  /// fails, either critical fields are missing or there is an authentication
  /// error. Even if
  /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
  /// succeeds, individual photos in the batch may have failures.
  /// These failures are specified in each
  /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
  /// in
  /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
  /// See
  /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
  /// for specific failures that can occur per photo.
  ///
  /// Only the fields specified in
  /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
  /// field are used. If `updateMask` is not present, the update applies to all
  /// fields.
  ///
  /// The number of
  /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
  /// messages in a
  /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
  /// must not exceed 20.
  ///
  /// <aside class="note"><b>Note:</b> To update
  /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
  /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
  /// filled as well. Otherwise, the request will fail.</aside>
  func batchUpdatePhotos(request: Google_Streetview_Publish_V1_BatchUpdatePhotosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_BatchUpdatePhotosResponse>
  /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
  ///
  /// This method returns the following error codes:
  ///
  /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
  /// the requesting user did not create the requested photo.
  /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
  /// does not exist.
  func deletePhoto(request: Google_Streetview_Publish_V1_DeletePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
  /// metadata.
  ///
  /// Note that if
  /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
  /// fails, either critical fields are missing or there was an authentication
  /// error. Even if
  /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
  /// succeeds, individual photos in the batch may have failures.
  /// These failures are specified in each
  /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
  /// in
  /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
  /// See
  /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
  /// for specific failures that can occur per photo.
  func batchDeletePhotos(request: Google_Streetview_Publish_V1_BatchDeletePhotosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Streetview_Publish_V1_BatchDeletePhotosResponse>
}

extension Google_Streetview_Publish_V1_StreetViewPublishServiceProvider {
  public var serviceName: Substring { return "google.streetview.publish.v1.StreetViewPublishService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "StartUpload":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.startUpload(request: request, context: context)
        }
      }

    case "CreatePhoto":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createPhoto(request: request, context: context)
        }
      }

    case "GetPhoto":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getPhoto(request: request, context: context)
        }
      }

    case "BatchGetPhotos":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchGetPhotos(request: request, context: context)
        }
      }

    case "ListPhotos":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listPhotos(request: request, context: context)
        }
      }

    case "UpdatePhoto":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updatePhoto(request: request, context: context)
        }
      }

    case "BatchUpdatePhotos":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchUpdatePhotos(request: request, context: context)
        }
      }

    case "DeletePhoto":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deletePhoto(request: request, context: context)
        }
      }

    case "BatchDeletePhotos":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.batchDeletePhotos(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

