// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: udpa/core/v1/resource_name.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UDPA resource name. This has a canonical udpa:// URI representation:
///
///   udpa://{authority}/{type_url}/{id/*}?{context_params}
///
/// where context_params take the form of URI query parameters.
///
/// A UDPA resource name fully identifies a network resource for transport
/// purposes. UDPA resource names in this form appear only in discovery
/// request/response messages used with the xDS transport.
public struct Udpa_Core_V1_ResourceName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Opaque identifiers for the resource. These are effectively concatenated
  /// with ‘/’ to form the non-query param path as resource ID.
  public var id: [String] = []

  /// Logical authority for resource (not necessarily transport network address).
  /// Authorities are opaque in the UDPA API, data-plane load balancers will map
  /// them to concrete network transports such as an xDS management server.
  public var authority: String = String()

  /// Fully qualified resource type (as in type URL without types.googleapis.com/
  /// prefix).
  public var resourceType: String = String()

  /// Additional parameters that can be used to select resource variants.
  public var context: Udpa_Core_V1_ContextParams {
    get {return _context ?? Udpa_Core_V1_ContextParams()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {self._context = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _context: Udpa_Core_V1_ContextParams? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "udpa.core.v1"

extension Udpa_Core_V1_ResourceName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "authority"),
    3: .standard(proto: "resource_type"),
    4: .same(proto: "context"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.resourceType) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._context) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitRepeatedStringField(value: self.id, fieldNumber: 1)
    }
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 2)
    }
    if !self.resourceType.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceType, fieldNumber: 3)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Udpa_Core_V1_ResourceName, rhs: Udpa_Core_V1_ResourceName) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.authority != rhs.authority {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs._context != rhs._context {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
