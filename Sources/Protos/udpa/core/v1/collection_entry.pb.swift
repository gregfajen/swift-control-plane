// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: udpa/core/v1/collection_entry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UDPA collection resource wrapper. This encapsulates a UDPA resource when
/// appearing inside a list collection resource. List collection resources are
/// regular Resource messages of type:
///
/// message <T>Collection {
///   repeated CollectionEntry resources = 1;
/// }
public struct Udpa_Core_V1_CollectionEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var resourceSpecifier: Udpa_Core_V1_CollectionEntry.OneOf_ResourceSpecifier? = nil

  /// A resource locator describing how the member resource is to be located.
  public var locator: Udpa_Core_V1_ResourceLocator {
    get {
      if case .locator(let v)? = resourceSpecifier {return v}
      return Udpa_Core_V1_ResourceLocator()
    }
    set {resourceSpecifier = .locator(newValue)}
  }

  /// The resource is inlined in the list collection.
  public var inlineEntry: Udpa_Core_V1_CollectionEntry.InlineEntry {
    get {
      if case .inlineEntry(let v)? = resourceSpecifier {return v}
      return Udpa_Core_V1_CollectionEntry.InlineEntry()
    }
    set {resourceSpecifier = .inlineEntry(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ResourceSpecifier: Equatable {
    /// A resource locator describing how the member resource is to be located.
    case locator(Udpa_Core_V1_ResourceLocator)
    /// The resource is inlined in the list collection.
    case inlineEntry(Udpa_Core_V1_CollectionEntry.InlineEntry)

  #if !swift(>=4.1)
    public static func ==(lhs: Udpa_Core_V1_CollectionEntry.OneOf_ResourceSpecifier, rhs: Udpa_Core_V1_CollectionEntry.OneOf_ResourceSpecifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.locator, .locator): return {
        guard case .locator(let l) = lhs, case .locator(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.inlineEntry, .inlineEntry): return {
        guard case .inlineEntry(let l) = lhs, case .inlineEntry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Inlined resource entry.
  public struct InlineEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional name to describe the inlined resource. Resource names must
    /// [a-zA-Z0-9_-\./]+ (TODO(htuch): turn this into a PGV constraint once
    /// finalized, probably should be a RFC3986 pchar). This name allows
    /// reference via the #entry directive in ResourceLocator.
    public var name: String = String()

    /// The resource's logical version. It is illegal to have the same named UDPA
    /// resource name at a given version with different resource payloads.
    public var version: String = String()

    /// The resource payload, including type URL.
    public var resource: SwiftProtobuf.Google_Protobuf_Any {
      get {return _resource ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_resource = newValue}
    }
    /// Returns true if `resource` has been explicitly set.
    public var hasResource: Bool {return self._resource != nil}
    /// Clears the value of `resource`. Subsequent reads from it will return its default value.
    public mutating func clearResource() {self._resource = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _resource: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "udpa.core.v1"

extension Udpa_Core_V1_CollectionEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectionEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locator"),
    2: .standard(proto: "inline_entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Udpa_Core_V1_ResourceLocator?
        if let current = self.resourceSpecifier {
          try decoder.handleConflictingOneOf()
          if case .locator(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.resourceSpecifier = .locator(v)}
      }()
      case 2: try {
        var v: Udpa_Core_V1_CollectionEntry.InlineEntry?
        if let current = self.resourceSpecifier {
          try decoder.handleConflictingOneOf()
          if case .inlineEntry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.resourceSpecifier = .inlineEntry(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.resourceSpecifier {
    case .locator?: try {
      guard case .locator(let v)? = self.resourceSpecifier else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .inlineEntry?: try {
      guard case .inlineEntry(let v)? = self.resourceSpecifier else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Udpa_Core_V1_CollectionEntry, rhs: Udpa_Core_V1_CollectionEntry) -> Bool {
    if lhs.resourceSpecifier != rhs.resourceSpecifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Udpa_Core_V1_CollectionEntry.InlineEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Udpa_Core_V1_CollectionEntry.protoMessageName + ".InlineEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
    3: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Udpa_Core_V1_CollectionEntry.InlineEntry, rhs: Udpa_Core_V1_CollectionEntry.InlineEntry) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
