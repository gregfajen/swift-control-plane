// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: udpa/annotations/versioning.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Udpa_Annotations_VersioningAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Track the previous message type. E.g. this message might be
  /// udpa.foo.v3alpha.Foo and it was previously udpa.bar.v2.Bar. This
  /// information is consumed by UDPA via proto descriptors.
  public var previousMessageType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Extension support defined in versioning.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  /// Magic number derived from 0x78 ('x') 0x44 ('D') 0x53 ('S')
  public var Udpa_Annotations_versioning: Udpa_Annotations_VersioningAnnotation {
    get {return getExtensionValue(ext: Udpa_Annotations_Extensions_versioning) ?? Udpa_Annotations_VersioningAnnotation()}
    set {setExtensionValue(ext: Udpa_Annotations_Extensions_versioning, value: newValue)}
  }
  /// Returns true if extension `Udpa_Annotations_Extensions_versioning`
  /// has been explicitly set.
  public var hasUdpa_Annotations_versioning: Bool {
    return hasExtensionValue(ext: Udpa_Annotations_Extensions_versioning)
  }
  /// Clears the value of extension `Udpa_Annotations_Extensions_versioning`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearUdpa_Annotations_versioning() {
    clearExtensionValue(ext: Udpa_Annotations_Extensions_versioning)
  }

}

// MARK: - File's ExtensionMap: Udpa_Annotations_Versioning_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Udpa_Annotations_Versioning_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Udpa_Annotations_Extensions_versioning
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Magic number derived from 0x78 ('x') 0x44 ('D') 0x53 ('S')
public let Udpa_Annotations_Extensions_versioning = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Udpa_Annotations_VersioningAnnotation>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 7881811,
  fieldName: "udpa.annotations.versioning"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "udpa.annotations"

extension Udpa_Annotations_VersioningAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VersioningAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "previous_message_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.previousMessageType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.previousMessageType.isEmpty {
      try visitor.visitSingularStringField(value: self.previousMessageType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Udpa_Annotations_VersioningAnnotation, rhs: Udpa_Annotations_VersioningAnnotation) -> Bool {
    if lhs.previousMessageType != rhs.previousMessageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
