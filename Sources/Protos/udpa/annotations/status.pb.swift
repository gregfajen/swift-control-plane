// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: udpa/annotations/status.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Udpa_Annotations_PackageVersionStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown package version status.
  case unknown // = 0

  /// This version of the package is frozen.
  case frozen // = 1

  /// This version of the package is the active development version.
  case active // = 2

  /// This version of the package is the candidate for the next major version. It
  /// is typically machine generated from the active development version.
  case nextMajorVersionCandidate // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .frozen
    case 2: self = .active
    case 3: self = .nextMajorVersionCandidate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .frozen: return 1
    case .active: return 2
    case .nextMajorVersionCandidate: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Udpa_Annotations_PackageVersionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Udpa_Annotations_PackageVersionStatus] = [
    .unknown,
    .frozen,
    .active,
    .nextMajorVersionCandidate,
  ]
}

#endif  // swift(>=4.2)

public struct Udpa_Annotations_StatusAnnotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The entity is work-in-progress and subject to breaking changes.
  public var workInProgress: Bool = false

  /// The entity belongs to a package with the given version status.
  public var packageVersionStatus: Udpa_Annotations_PackageVersionStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Extension support defined in status.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FileOptions {

  public var Udpa_Annotations_fileStatus: Udpa_Annotations_StatusAnnotation {
    get {return getExtensionValue(ext: Udpa_Annotations_Extensions_file_status) ?? Udpa_Annotations_StatusAnnotation()}
    set {setExtensionValue(ext: Udpa_Annotations_Extensions_file_status, value: newValue)}
  }
  /// Returns true if extension `Udpa_Annotations_Extensions_file_status`
  /// has been explicitly set.
  public var hasUdpa_Annotations_fileStatus: Bool {
    return hasExtensionValue(ext: Udpa_Annotations_Extensions_file_status)
  }
  /// Clears the value of extension `Udpa_Annotations_Extensions_file_status`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearUdpa_Annotations_fileStatus() {
    clearExtensionValue(ext: Udpa_Annotations_Extensions_file_status)
  }

}

// MARK: - File's ExtensionMap: Udpa_Annotations_Status_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Udpa_Annotations_Status_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Udpa_Annotations_Extensions_file_status
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Udpa_Annotations_Extensions_file_status = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Udpa_Annotations_StatusAnnotation>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 222707719,
  fieldName: "udpa.annotations.file_status"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "udpa.annotations"

extension Udpa_Annotations_PackageVersionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "FROZEN"),
    2: .same(proto: "ACTIVE"),
    3: .same(proto: "NEXT_MAJOR_VERSION_CANDIDATE"),
  ]
}

extension Udpa_Annotations_StatusAnnotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StatusAnnotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "work_in_progress"),
    2: .standard(proto: "package_version_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.workInProgress) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.packageVersionStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workInProgress != false {
      try visitor.visitSingularBoolField(value: self.workInProgress, fieldNumber: 1)
    }
    if self.packageVersionStatus != .unknown {
      try visitor.visitSingularEnumField(value: self.packageVersionStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Udpa_Annotations_StatusAnnotation, rhs: Udpa_Annotations_StatusAnnotation) -> Bool {
    if lhs.workInProgress != rhs.workInProgress {return false}
    if lhs.packageVersionStatus != rhs.packageVersionStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
