// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: udpa/data/orca/v1/orca_load_report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Udpa_Data_Orca_V1_OrcaLoadReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// CPU utilization expressed as a fraction of available CPU resources. This
  /// should be derived from the latest sample or measurement.
  public var cpuUtilization: Double = 0

  /// Memory utilization expressed as a fraction of available memory
  /// resources. This should be derived from the latest sample or measurement.
  public var memUtilization: Double = 0

  /// Total RPS being served by an endpoint. This should cover all services that an endpoint is
  /// responsible for.
  public var rps: UInt64 = 0

  /// Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
  /// storage) associated with the request.
  public var requestCost: Dictionary<String,Double> = [:]

  /// Resource utilization values. Each value is expressed as a fraction of total resources
  /// available, derived from the latest sample or measurement.
  public var utilization: Dictionary<String,Double> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "udpa.data.orca.v1"

extension Udpa_Data_Orca_V1_OrcaLoadReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrcaLoadReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cpu_utilization"),
    2: .standard(proto: "mem_utilization"),
    3: .same(proto: "rps"),
    4: .standard(proto: "request_cost"),
    5: .same(proto: "utilization"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.cpuUtilization) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.memUtilization) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.rps) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &self.requestCost) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &self.utilization) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cpuUtilization != 0 {
      try visitor.visitSingularDoubleField(value: self.cpuUtilization, fieldNumber: 1)
    }
    if self.memUtilization != 0 {
      try visitor.visitSingularDoubleField(value: self.memUtilization, fieldNumber: 2)
    }
    if self.rps != 0 {
      try visitor.visitSingularUInt64Field(value: self.rps, fieldNumber: 3)
    }
    if !self.requestCost.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: self.requestCost, fieldNumber: 4)
    }
    if !self.utilization.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: self.utilization, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Udpa_Data_Orca_V1_OrcaLoadReport, rhs: Udpa_Data_Orca_V1_OrcaLoadReport) -> Bool {
    if lhs.cpuUtilization != rhs.cpuUtilization {return false}
    if lhs.memUtilization != rhs.memUtilization {return false}
    if lhs.rps != rhs.rps {return false}
    if lhs.requestCost != rhs.requestCost {return false}
    if lhs.utilization != rhs.utilization {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
