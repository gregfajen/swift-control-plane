// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: grafeas/v1/upgrade.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An Upgrade Note represents a potential upgrade of a package to a given
/// version. For each package version combination (i.e. bash 4.0, bash 4.1,
/// bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field
/// represents the information related to the update.
public struct Grafeas_V1_UpgradeNote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required for non-Windows OS. The package this Upgrade is for.
  public var package: String = String()

  /// Required for non-Windows OS. The version of the package in machine + human
  /// readable form.
  public var version: Grafeas_V1_Version {
    get {return _version ?? Grafeas_V1_Version()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  /// Metadata about the upgrade for each specific operating system.
  public var distributions: [Grafeas_V1_UpgradeDistribution] = []

  /// Required for Windows OS. Represents the metadata about the Windows update.
  public var windowsUpdate: Grafeas_V1_WindowsUpdate {
    get {return _windowsUpdate ?? Grafeas_V1_WindowsUpdate()}
    set {_windowsUpdate = newValue}
  }
  /// Returns true if `windowsUpdate` has been explicitly set.
  public var hasWindowsUpdate: Bool {return self._windowsUpdate != nil}
  /// Clears the value of `windowsUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearWindowsUpdate() {self._windowsUpdate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: Grafeas_V1_Version? = nil
  fileprivate var _windowsUpdate: Grafeas_V1_WindowsUpdate? = nil
}

/// The Upgrade Distribution represents metadata about the Upgrade for each
/// operating system (CPE). Some distributions have additional metadata around
/// updates, classifying them into various categories and severities.
public struct Grafeas_V1_UpgradeDistribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required - The specific operating system this metadata applies to. See
  /// https://cpe.mitre.org/specification/.
  public var cpeUri: String = String()

  /// The operating system classification of this Upgrade, as specified by the
  /// upstream operating system upgrade feed. For Windows the classification is
  /// one of the category_ids listed at
  /// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
  public var classification: String = String()

  /// The severity as specified by the upstream operating system.
  public var severity: String = String()

  /// The cve tied to this Upgrade.
  public var cve: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Windows Update represents the metadata about the update for the Windows
/// operating system. The fields in this message come from the Windows Update API
/// documented at
/// https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
public struct Grafeas_V1_WindowsUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required - The unique identifier for the update.
  public var identity: Grafeas_V1_WindowsUpdate.Identity {
    get {return _identity ?? Grafeas_V1_WindowsUpdate.Identity()}
    set {_identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return self._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {self._identity = nil}

  /// The localized title of the update.
  public var title: String = String()

  /// The localized description of the update.
  public var description_p: String = String()

  /// The list of categories to which the update belongs.
  public var categories: [Grafeas_V1_WindowsUpdate.Category] = []

  /// The Microsoft Knowledge Base article IDs that are associated with the
  /// update.
  public var kbArticleIds: [String] = []

  /// The hyperlink to the support information for the update.
  public var supportURL: String = String()

  /// The last published timestamp of the update.
  public var lastPublishedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastPublishedTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastPublishedTimestamp = newValue}
  }
  /// Returns true if `lastPublishedTimestamp` has been explicitly set.
  public var hasLastPublishedTimestamp: Bool {return self._lastPublishedTimestamp != nil}
  /// Clears the value of `lastPublishedTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearLastPublishedTimestamp() {self._lastPublishedTimestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The unique identifier of the update.
  public struct Identity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The revision independent identifier of the update.
    public var updateID: String = String()

    /// The revision number of the update.
    public var revision: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// The category to which the update belongs.
  public struct Category {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The identifier of the category.
    public var categoryID: String = String()

    /// The localized name of the category.
    public var name: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _identity: Grafeas_V1_WindowsUpdate.Identity? = nil
  fileprivate var _lastPublishedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// An Upgrade Occurrence represents that a specific resource_url could install a
/// specific upgrade. This presence is supplied via local sources (i.e. it is
/// present in the mirror and the running system has noticed its availability).
/// For Windows, both distribution and windows_update contain information for the
/// Windows update.
public struct Grafeas_V1_UpgradeOccurrence {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required for non-Windows OS. The package this Upgrade is for.
  public var package: String {
    get {return _storage._package}
    set {_uniqueStorage()._package = newValue}
  }

  /// Required for non-Windows OS. The version of the package in a machine +
  /// human readable form.
  public var parsedVersion: Grafeas_V1_Version {
    get {return _storage._parsedVersion ?? Grafeas_V1_Version()}
    set {_uniqueStorage()._parsedVersion = newValue}
  }
  /// Returns true if `parsedVersion` has been explicitly set.
  public var hasParsedVersion: Bool {return _storage._parsedVersion != nil}
  /// Clears the value of `parsedVersion`. Subsequent reads from it will return its default value.
  public mutating func clearParsedVersion() {_uniqueStorage()._parsedVersion = nil}

  /// Metadata about the upgrade for available for the specific operating system
  /// for the resource_url. This allows efficient filtering, as well as
  /// making it easier to use the occurrence.
  public var distribution: Grafeas_V1_UpgradeDistribution {
    get {return _storage._distribution ?? Grafeas_V1_UpgradeDistribution()}
    set {_uniqueStorage()._distribution = newValue}
  }
  /// Returns true if `distribution` has been explicitly set.
  public var hasDistribution: Bool {return _storage._distribution != nil}
  /// Clears the value of `distribution`. Subsequent reads from it will return its default value.
  public mutating func clearDistribution() {_uniqueStorage()._distribution = nil}

  /// Required for Windows OS. Represents the metadata about the Windows update.
  public var windowsUpdate: Grafeas_V1_WindowsUpdate {
    get {return _storage._windowsUpdate ?? Grafeas_V1_WindowsUpdate()}
    set {_uniqueStorage()._windowsUpdate = newValue}
  }
  /// Returns true if `windowsUpdate` has been explicitly set.
  public var hasWindowsUpdate: Bool {return _storage._windowsUpdate != nil}
  /// Clears the value of `windowsUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearWindowsUpdate() {_uniqueStorage()._windowsUpdate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grafeas.v1"

extension Grafeas_V1_UpgradeNote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradeNote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "package"),
    2: .same(proto: "version"),
    3: .same(proto: "distributions"),
    4: .standard(proto: "windows_update"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.package) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._version) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.distributions) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._windowsUpdate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.package.isEmpty {
      try visitor.visitSingularStringField(value: self.package, fieldNumber: 1)
    }
    if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.distributions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.distributions, fieldNumber: 3)
    }
    if let v = self._windowsUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_UpgradeNote, rhs: Grafeas_V1_UpgradeNote) -> Bool {
    if lhs.package != rhs.package {return false}
    if lhs._version != rhs._version {return false}
    if lhs.distributions != rhs.distributions {return false}
    if lhs._windowsUpdate != rhs._windowsUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_UpgradeDistribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradeDistribution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cpe_uri"),
    2: .same(proto: "classification"),
    3: .same(proto: "severity"),
    4: .same(proto: "cve"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cpeUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.classification) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.severity) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.cve) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cpeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.cpeUri, fieldNumber: 1)
    }
    if !self.classification.isEmpty {
      try visitor.visitSingularStringField(value: self.classification, fieldNumber: 2)
    }
    if !self.severity.isEmpty {
      try visitor.visitSingularStringField(value: self.severity, fieldNumber: 3)
    }
    if !self.cve.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cve, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_UpgradeDistribution, rhs: Grafeas_V1_UpgradeDistribution) -> Bool {
    if lhs.cpeUri != rhs.cpeUri {return false}
    if lhs.classification != rhs.classification {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.cve != rhs.cve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_WindowsUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WindowsUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "categories"),
    5: .standard(proto: "kb_article_ids"),
    6: .standard(proto: "support_url"),
    7: .standard(proto: "last_published_timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identity) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.categories) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.kbArticleIds) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.supportURL) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._lastPublishedTimestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categories, fieldNumber: 4)
    }
    if !self.kbArticleIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.kbArticleIds, fieldNumber: 5)
    }
    if !self.supportURL.isEmpty {
      try visitor.visitSingularStringField(value: self.supportURL, fieldNumber: 6)
    }
    if let v = self._lastPublishedTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_WindowsUpdate, rhs: Grafeas_V1_WindowsUpdate) -> Bool {
    if lhs._identity != rhs._identity {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.categories != rhs.categories {return false}
    if lhs.kbArticleIds != rhs.kbArticleIds {return false}
    if lhs.supportURL != rhs.supportURL {return false}
    if lhs._lastPublishedTimestamp != rhs._lastPublishedTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_WindowsUpdate.Identity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Grafeas_V1_WindowsUpdate.protoMessageName + ".Identity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_id"),
    2: .same(proto: "revision"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.updateID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.revision) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updateID.isEmpty {
      try visitor.visitSingularStringField(value: self.updateID, fieldNumber: 1)
    }
    if self.revision != 0 {
      try visitor.visitSingularInt32Field(value: self.revision, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_WindowsUpdate.Identity, rhs: Grafeas_V1_WindowsUpdate.Identity) -> Bool {
    if lhs.updateID != rhs.updateID {return false}
    if lhs.revision != rhs.revision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_WindowsUpdate.Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Grafeas_V1_WindowsUpdate.protoMessageName + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "category_id"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.categoryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.categoryID.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_WindowsUpdate.Category, rhs: Grafeas_V1_WindowsUpdate.Category) -> Bool {
    if lhs.categoryID != rhs.categoryID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_UpgradeOccurrence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradeOccurrence"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "package"),
    3: .standard(proto: "parsed_version"),
    4: .same(proto: "distribution"),
    5: .standard(proto: "windows_update"),
  ]

  fileprivate class _StorageClass {
    var _package: String = String()
    var _parsedVersion: Grafeas_V1_Version? = nil
    var _distribution: Grafeas_V1_UpgradeDistribution? = nil
    var _windowsUpdate: Grafeas_V1_WindowsUpdate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _package = source._package
      _parsedVersion = source._parsedVersion
      _distribution = source._distribution
      _windowsUpdate = source._windowsUpdate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._package) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._parsedVersion) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._distribution) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._windowsUpdate) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._package.isEmpty {
        try visitor.visitSingularStringField(value: _storage._package, fieldNumber: 1)
      }
      if let v = _storage._parsedVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._distribution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._windowsUpdate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_UpgradeOccurrence, rhs: Grafeas_V1_UpgradeOccurrence) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._package != rhs_storage._package {return false}
        if _storage._parsedVersion != rhs_storage._parsedVersion {return false}
        if _storage._distribution != rhs_storage._distribution {return false}
        if _storage._windowsUpdate != rhs_storage._windowsUpdate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
