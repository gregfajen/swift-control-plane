// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: grafeas/v1/provenance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Provenance of a build. Contains all information needed to verify the full
/// details about the build from source to completion.
public struct Grafeas_V1_BuildProvenance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Unique identifier of the build.
  public var id: String = String()

  /// ID of the project.
  public var projectID: String = String()

  /// Commands requested by the build.
  public var commands: [Grafeas_V1_Command] = []

  /// Output of the build.
  public var builtArtifacts: [Grafeas_V1_Artifact] = []

  /// Time at which the build was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Time at which execution of the build was started.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Time at which execution of the build was finished.
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// E-mail address of the user who initiated this build. Note that this was the
  /// user's e-mail address at the time the build was initiated; this address may
  /// not represent the same end-user for all time.
  public var creator: String = String()

  /// URI where any logs for this provenance were written.
  public var logsUri: String = String()

  /// Details of the Source input to the build.
  public var sourceProvenance: Grafeas_V1_Source {
    get {return _sourceProvenance ?? Grafeas_V1_Source()}
    set {_sourceProvenance = newValue}
  }
  /// Returns true if `sourceProvenance` has been explicitly set.
  public var hasSourceProvenance: Bool {return self._sourceProvenance != nil}
  /// Clears the value of `sourceProvenance`. Subsequent reads from it will return its default value.
  public mutating func clearSourceProvenance() {self._sourceProvenance = nil}

  /// Trigger identifier if the build was triggered automatically; empty if not.
  public var triggerID: String = String()

  /// Special options applied to this build. This is a catch-all field where
  /// build providers can enter any desired additional details.
  public var buildOptions: Dictionary<String,String> = [:]

  /// Version string of the builder at the time this build was executed.
  public var builderVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _sourceProvenance: Grafeas_V1_Source? = nil
}

/// Source describes the location of the source used for the build.
public struct Grafeas_V1_Source {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If provided, the input binary artifacts for the build came from this
  /// location.
  public var artifactStorageSourceUri: String = String()

  /// Hash(es) of the build source, which can be used to verify that the original
  /// source integrity was maintained in the build.
  ///
  /// The keys to this map are file paths used as build source and the values
  /// contain the hash values for those files.
  ///
  /// If the build source came in a single package such as a gzipped tarfile
  /// (.tar.gz), the FileHash will be for the single path to that file.
  public var fileHashes: Dictionary<String,Grafeas_V1_FileHashes> = [:]

  /// If provided, the source code used for the build came from this location.
  public var context: Grafeas_V1_SourceContext {
    get {return _context ?? Grafeas_V1_SourceContext()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {self._context = nil}

  /// If provided, some of the source code used for the build may be found in
  /// these locations, in the case where the source repository had multiple
  /// remotes or submodules. This list will not include the context specified in
  /// the context field.
  public var additionalContexts: [Grafeas_V1_SourceContext] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _context: Grafeas_V1_SourceContext? = nil
}

/// Container message for hashes of byte content of files, used in source
/// messages to verify integrity of source input to the build.
public struct Grafeas_V1_FileHashes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Collection of file hashes.
  public var fileHash: [Grafeas_V1_Hash] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Container message for hash values.
public struct Grafeas_V1_Hash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The type of hash that was performed, e.g. "SHA-256".
  public var type: String = String()

  /// Required. The hash value.
  public var value: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Command describes a step performed as part of the build pipeline.
public struct Grafeas_V1_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the command, as presented on the command line, or if the
  /// command is packaged as a Docker container, as presented to `docker pull`.
  public var name: String = String()

  /// Environment variables set before running this command.
  public var env: [String] = []

  /// Command-line arguments used when executing this command.
  public var args: [String] = []

  /// Working directory (relative to project source root) used when running this
  /// command.
  public var dir: String = String()

  /// Optional unique identifier for this command, used in wait_for to reference
  /// this command as a dependency.
  public var id: String = String()

  /// The ID(s) of the command(s) that this command depends on.
  public var waitFor: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Artifact describes a build product.
public struct Grafeas_V1_Artifact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
  /// container.
  public var checksum: String = String()

  /// Artifact ID, if any; for container images, this will be a URL by digest
  /// like `gcr.io/projectID/imagename@sha256:123456`.
  public var id: String = String()

  /// Related artifact names. This may be the path to a binary or jar file, or in
  /// the case of a container build, the name used to push the container image to
  /// Google Container Registry, as presented to `docker push`. Note that a
  /// single Artifact ID can have multiple names, for example if two tags are
  /// applied to one image.
  public var names: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A SourceContext is a reference to a tree of files. A SourceContext together
/// with a path point to a unique revision of a single file or directory.
public struct Grafeas_V1_SourceContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A SourceContext can refer any one of the following types of repositories.
  public var context: Grafeas_V1_SourceContext.OneOf_Context? = nil

  /// A SourceContext referring to a revision in a Google Cloud Source Repo.
  public var cloudRepo: Grafeas_V1_CloudRepoSourceContext {
    get {
      if case .cloudRepo(let v)? = context {return v}
      return Grafeas_V1_CloudRepoSourceContext()
    }
    set {context = .cloudRepo(newValue)}
  }

  /// A SourceContext referring to a Gerrit project.
  public var gerrit: Grafeas_V1_GerritSourceContext {
    get {
      if case .gerrit(let v)? = context {return v}
      return Grafeas_V1_GerritSourceContext()
    }
    set {context = .gerrit(newValue)}
  }

  /// A SourceContext referring to any third party Git repo (e.g., GitHub).
  public var git: Grafeas_V1_GitSourceContext {
    get {
      if case .git(let v)? = context {return v}
      return Grafeas_V1_GitSourceContext()
    }
    set {context = .git(newValue)}
  }

  /// Labels with user defined metadata.
  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A SourceContext can refer any one of the following types of repositories.
  public enum OneOf_Context: Equatable {
    /// A SourceContext referring to a revision in a Google Cloud Source Repo.
    case cloudRepo(Grafeas_V1_CloudRepoSourceContext)
    /// A SourceContext referring to a Gerrit project.
    case gerrit(Grafeas_V1_GerritSourceContext)
    /// A SourceContext referring to any third party Git repo (e.g., GitHub).
    case git(Grafeas_V1_GitSourceContext)

  #if !swift(>=4.1)
    public static func ==(lhs: Grafeas_V1_SourceContext.OneOf_Context, rhs: Grafeas_V1_SourceContext.OneOf_Context) -> Bool {
      switch (lhs, rhs) {
      case (.cloudRepo(let l), .cloudRepo(let r)): return l == r
      case (.gerrit(let l), .gerrit(let r)): return l == r
      case (.git(let l), .git(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// An alias to a repo revision.
public struct Grafeas_V1_AliasContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The alias kind.
  public var kind: Grafeas_V1_AliasContext.Kind = .unspecified

  /// The alias name.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of an alias.
  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown.
    case unspecified // = 0

    /// Git tag.
    case fixed // = 1

    /// Git branch.
    case movable // = 2

    /// Used to specify non-standard aliases. For example, if a Git repo has a
    /// ref named "refs/foo/bar".
    case other // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .fixed
      case 2: self = .movable
      case 4: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .fixed: return 1
      case .movable: return 2
      case .other: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Grafeas_V1_AliasContext.Kind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Grafeas_V1_AliasContext.Kind] = [
    .unspecified,
    .fixed,
    .movable,
    .other,
  ]
}

#endif  // swift(>=4.2)

/// A CloudRepoSourceContext denotes a particular revision in a Google Cloud
/// Source Repo.
public struct Grafeas_V1_CloudRepoSourceContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the repo.
  public var repoID: Grafeas_V1_RepoId {
    get {return _repoID ?? Grafeas_V1_RepoId()}
    set {_repoID = newValue}
  }
  /// Returns true if `repoID` has been explicitly set.
  public var hasRepoID: Bool {return self._repoID != nil}
  /// Clears the value of `repoID`. Subsequent reads from it will return its default value.
  public mutating func clearRepoID() {self._repoID = nil}

  /// A revision in a Cloud Repo can be identified by either its revision ID or
  /// its alias.
  public var revision: Grafeas_V1_CloudRepoSourceContext.OneOf_Revision? = nil

  /// A revision ID.
  public var revisionID: String {
    get {
      if case .revisionID(let v)? = revision {return v}
      return String()
    }
    set {revision = .revisionID(newValue)}
  }

  /// An alias, which may be a branch or tag.
  public var aliasContext: Grafeas_V1_AliasContext {
    get {
      if case .aliasContext(let v)? = revision {return v}
      return Grafeas_V1_AliasContext()
    }
    set {revision = .aliasContext(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A revision in a Cloud Repo can be identified by either its revision ID or
  /// its alias.
  public enum OneOf_Revision: Equatable {
    /// A revision ID.
    case revisionID(String)
    /// An alias, which may be a branch or tag.
    case aliasContext(Grafeas_V1_AliasContext)

  #if !swift(>=4.1)
    public static func ==(lhs: Grafeas_V1_CloudRepoSourceContext.OneOf_Revision, rhs: Grafeas_V1_CloudRepoSourceContext.OneOf_Revision) -> Bool {
      switch (lhs, rhs) {
      case (.revisionID(let l), .revisionID(let r)): return l == r
      case (.aliasContext(let l), .aliasContext(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _repoID: Grafeas_V1_RepoId? = nil
}

/// A SourceContext referring to a Gerrit project.
public struct Grafeas_V1_GerritSourceContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The URI of a running Gerrit instance.
  public var hostUri: String = String()

  /// The full project name within the host. Projects may be nested, so
  /// "project/subproject" is a valid project name. The "repo name" is the
  /// hostURI/project.
  public var gerritProject: String = String()

  /// A revision in a Gerrit project can be identified by either its revision ID
  /// or its alias.
  public var revision: Grafeas_V1_GerritSourceContext.OneOf_Revision? = nil

  /// A revision (commit) ID.
  public var revisionID: String {
    get {
      if case .revisionID(let v)? = revision {return v}
      return String()
    }
    set {revision = .revisionID(newValue)}
  }

  /// An alias, which may be a branch or tag.
  public var aliasContext: Grafeas_V1_AliasContext {
    get {
      if case .aliasContext(let v)? = revision {return v}
      return Grafeas_V1_AliasContext()
    }
    set {revision = .aliasContext(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A revision in a Gerrit project can be identified by either its revision ID
  /// or its alias.
  public enum OneOf_Revision: Equatable {
    /// A revision (commit) ID.
    case revisionID(String)
    /// An alias, which may be a branch or tag.
    case aliasContext(Grafeas_V1_AliasContext)

  #if !swift(>=4.1)
    public static func ==(lhs: Grafeas_V1_GerritSourceContext.OneOf_Revision, rhs: Grafeas_V1_GerritSourceContext.OneOf_Revision) -> Bool {
      switch (lhs, rhs) {
      case (.revisionID(let l), .revisionID(let r)): return l == r
      case (.aliasContext(let l), .aliasContext(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// A GitSourceContext denotes a particular revision in a third party Git
/// repository (e.g., GitHub).
public struct Grafeas_V1_GitSourceContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Git repository URL.
  public var url: String = String()

  /// Git commit hash.
  public var revisionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A unique identifier for a Cloud Repo.
public struct Grafeas_V1_RepoId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A cloud repo can be identified by either its project ID and repository name
  /// combination, or its globally unique identifier.
  public var id: Grafeas_V1_RepoId.OneOf_ID? = nil

  /// A combination of a project ID and a repo name.
  public var projectRepoID: Grafeas_V1_ProjectRepoId {
    get {
      if case .projectRepoID(let v)? = id {return v}
      return Grafeas_V1_ProjectRepoId()
    }
    set {id = .projectRepoID(newValue)}
  }

  /// A server-assigned, globally unique identifier.
  public var uid: String {
    get {
      if case .uid(let v)? = id {return v}
      return String()
    }
    set {id = .uid(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A cloud repo can be identified by either its project ID and repository name
  /// combination, or its globally unique identifier.
  public enum OneOf_ID: Equatable {
    /// A combination of a project ID and a repo name.
    case projectRepoID(Grafeas_V1_ProjectRepoId)
    /// A server-assigned, globally unique identifier.
    case uid(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Grafeas_V1_RepoId.OneOf_ID, rhs: Grafeas_V1_RepoId.OneOf_ID) -> Bool {
      switch (lhs, rhs) {
      case (.projectRepoID(let l), .projectRepoID(let r)): return l == r
      case (.uid(let l), .uid(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Selects a repo using a Google Cloud Platform project ID (e.g.,
/// winged-cargo-31) and a repo name within that project.
public struct Grafeas_V1_ProjectRepoId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the project.
  public var projectID: String = String()

  /// The name of the repo. Leave empty for the default repo.
  public var repoName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grafeas.v1"

extension Grafeas_V1_BuildProvenance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildProvenance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "project_id"),
    3: .same(proto: "commands"),
    4: .standard(proto: "built_artifacts"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "start_time"),
    7: .standard(proto: "end_time"),
    8: .same(proto: "creator"),
    9: .standard(proto: "logs_uri"),
    10: .standard(proto: "source_provenance"),
    11: .standard(proto: "trigger_id"),
    12: .standard(proto: "build_options"),
    13: .standard(proto: "builder_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.projectID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.commands)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.builtArtifacts)
      case 5: try decoder.decodeSingularMessageField(value: &self._createTime)
      case 6: try decoder.decodeSingularMessageField(value: &self._startTime)
      case 7: try decoder.decodeSingularMessageField(value: &self._endTime)
      case 8: try decoder.decodeSingularStringField(value: &self.creator)
      case 9: try decoder.decodeSingularStringField(value: &self.logsUri)
      case 10: try decoder.decodeSingularMessageField(value: &self._sourceProvenance)
      case 11: try decoder.decodeSingularStringField(value: &self.triggerID)
      case 12: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.buildOptions)
      case 13: try decoder.decodeSingularStringField(value: &self.builderVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if !self.commands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commands, fieldNumber: 3)
    }
    if !self.builtArtifacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.builtArtifacts, fieldNumber: 4)
    }
    if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 8)
    }
    if !self.logsUri.isEmpty {
      try visitor.visitSingularStringField(value: self.logsUri, fieldNumber: 9)
    }
    if let v = self._sourceProvenance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if !self.triggerID.isEmpty {
      try visitor.visitSingularStringField(value: self.triggerID, fieldNumber: 11)
    }
    if !self.buildOptions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.buildOptions, fieldNumber: 12)
    }
    if !self.builderVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.builderVersion, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_BuildProvenance, rhs: Grafeas_V1_BuildProvenance) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.commands != rhs.commands {return false}
    if lhs.builtArtifacts != rhs.builtArtifacts {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.logsUri != rhs.logsUri {return false}
    if lhs._sourceProvenance != rhs._sourceProvenance {return false}
    if lhs.triggerID != rhs.triggerID {return false}
    if lhs.buildOptions != rhs.buildOptions {return false}
    if lhs.builderVersion != rhs.builderVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_Source: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Source"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "artifact_storage_source_uri"),
    2: .standard(proto: "file_hashes"),
    3: .same(proto: "context"),
    4: .standard(proto: "additional_contexts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.artifactStorageSourceUri)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grafeas_V1_FileHashes>.self, value: &self.fileHashes)
      case 3: try decoder.decodeSingularMessageField(value: &self._context)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.additionalContexts)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.artifactStorageSourceUri.isEmpty {
      try visitor.visitSingularStringField(value: self.artifactStorageSourceUri, fieldNumber: 1)
    }
    if !self.fileHashes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grafeas_V1_FileHashes>.self, value: self.fileHashes, fieldNumber: 2)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.additionalContexts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalContexts, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_Source, rhs: Grafeas_V1_Source) -> Bool {
    if lhs.artifactStorageSourceUri != rhs.artifactStorageSourceUri {return false}
    if lhs.fileHashes != rhs.fileHashes {return false}
    if lhs._context != rhs._context {return false}
    if lhs.additionalContexts != rhs.additionalContexts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_FileHashes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileHashes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.fileHash)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileHash.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileHash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_FileHashes, rhs: Grafeas_V1_FileHashes) -> Bool {
    if lhs.fileHash != rhs.fileHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Hash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_Hash, rhs: Grafeas_V1_Hash) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Command"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "env"),
    3: .same(proto: "args"),
    4: .same(proto: "dir"),
    5: .same(proto: "id"),
    6: .standard(proto: "wait_for"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedStringField(value: &self.env)
      case 3: try decoder.decodeRepeatedStringField(value: &self.args)
      case 4: try decoder.decodeSingularStringField(value: &self.dir)
      case 5: try decoder.decodeSingularStringField(value: &self.id)
      case 6: try decoder.decodeRepeatedStringField(value: &self.waitFor)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.env.isEmpty {
      try visitor.visitRepeatedStringField(value: self.env, fieldNumber: 2)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 3)
    }
    if !self.dir.isEmpty {
      try visitor.visitSingularStringField(value: self.dir, fieldNumber: 4)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 5)
    }
    if !self.waitFor.isEmpty {
      try visitor.visitRepeatedStringField(value: self.waitFor, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_Command, rhs: Grafeas_V1_Command) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.env != rhs.env {return false}
    if lhs.args != rhs.args {return false}
    if lhs.dir != rhs.dir {return false}
    if lhs.id != rhs.id {return false}
    if lhs.waitFor != rhs.waitFor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_Artifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Artifact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checksum"),
    2: .same(proto: "id"),
    3: .same(proto: "names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.checksum)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeRepeatedStringField(value: &self.names)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checksum.isEmpty {
      try visitor.visitSingularStringField(value: self.checksum, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.names.isEmpty {
      try visitor.visitRepeatedStringField(value: self.names, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_Artifact, rhs: Grafeas_V1_Artifact) -> Bool {
    if lhs.checksum != rhs.checksum {return false}
    if lhs.id != rhs.id {return false}
    if lhs.names != rhs.names {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_SourceContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cloud_repo"),
    2: .same(proto: "gerrit"),
    3: .same(proto: "git"),
    4: .same(proto: "labels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Grafeas_V1_CloudRepoSourceContext?
        if let current = self.context {
          try decoder.handleConflictingOneOf()
          if case .cloudRepo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.context = .cloudRepo(v)}
      case 2:
        var v: Grafeas_V1_GerritSourceContext?
        if let current = self.context {
          try decoder.handleConflictingOneOf()
          if case .gerrit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.context = .gerrit(v)}
      case 3:
        var v: Grafeas_V1_GitSourceContext?
        if let current = self.context {
          try decoder.handleConflictingOneOf()
          if case .git(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.context = .git(v)}
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.context {
    case .cloudRepo(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .gerrit(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .git(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_SourceContext, rhs: Grafeas_V1_SourceContext) -> Bool {
    if lhs.context != rhs.context {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_AliasContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AliasContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .unspecified {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_AliasContext, rhs: Grafeas_V1_AliasContext) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_AliasContext.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KIND_UNSPECIFIED"),
    1: .same(proto: "FIXED"),
    2: .same(proto: "MOVABLE"),
    4: .same(proto: "OTHER"),
  ]
}

extension Grafeas_V1_CloudRepoSourceContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudRepoSourceContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repo_id"),
    2: .standard(proto: "revision_id"),
    3: .standard(proto: "alias_context"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._repoID)
      case 2:
        if self.revision != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.revision = .revisionID(v)}
      case 3:
        var v: Grafeas_V1_AliasContext?
        if let current = self.revision {
          try decoder.handleConflictingOneOf()
          if case .aliasContext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.revision = .aliasContext(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._repoID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    switch self.revision {
    case .revisionID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case .aliasContext(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_CloudRepoSourceContext, rhs: Grafeas_V1_CloudRepoSourceContext) -> Bool {
    if lhs._repoID != rhs._repoID {return false}
    if lhs.revision != rhs.revision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_GerritSourceContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GerritSourceContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_uri"),
    2: .standard(proto: "gerrit_project"),
    3: .standard(proto: "revision_id"),
    4: .standard(proto: "alias_context"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hostUri)
      case 2: try decoder.decodeSingularStringField(value: &self.gerritProject)
      case 3:
        if self.revision != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.revision = .revisionID(v)}
      case 4:
        var v: Grafeas_V1_AliasContext?
        if let current = self.revision {
          try decoder.handleConflictingOneOf()
          if case .aliasContext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.revision = .aliasContext(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostUri.isEmpty {
      try visitor.visitSingularStringField(value: self.hostUri, fieldNumber: 1)
    }
    if !self.gerritProject.isEmpty {
      try visitor.visitSingularStringField(value: self.gerritProject, fieldNumber: 2)
    }
    switch self.revision {
    case .revisionID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case .aliasContext(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_GerritSourceContext, rhs: Grafeas_V1_GerritSourceContext) -> Bool {
    if lhs.hostUri != rhs.hostUri {return false}
    if lhs.gerritProject != rhs.gerritProject {return false}
    if lhs.revision != rhs.revision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_GitSourceContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GitSourceContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "revision_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.revisionID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.revisionID.isEmpty {
      try visitor.visitSingularStringField(value: self.revisionID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_GitSourceContext, rhs: Grafeas_V1_GitSourceContext) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.revisionID != rhs.revisionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_RepoId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RepoId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_repo_id"),
    2: .same(proto: "uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Grafeas_V1_ProjectRepoId?
        if let current = self.id {
          try decoder.handleConflictingOneOf()
          if case .projectRepoID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.id = .projectRepoID(v)}
      case 2:
        if self.id != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.id = .uid(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.id {
    case .projectRepoID(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .uid(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_RepoId, rhs: Grafeas_V1_RepoId) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_ProjectRepoId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProjectRepoId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "repo_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.projectID)
      case 2: try decoder.decodeSingularStringField(value: &self.repoName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.repoName.isEmpty {
      try visitor.visitSingularStringField(value: self.repoName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_ProjectRepoId, rhs: Grafeas_V1_ProjectRepoId) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.repoName != rhs.repoName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
