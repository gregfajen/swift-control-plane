// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: grafeas/v1/image.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Layer holds metadata specific to a layer of a Docker image.
public struct Grafeas_V1_Layer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The recovered Dockerfile directive used to construct this layer.
  /// See https://docs.docker.com/engine/reference/builder/ for more information.
  public var directive: String = String()

  /// The recovered arguments to the Dockerfile directive.
  public var arguments: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A set of properties that uniquely identify a given Docker image.
public struct Grafeas_V1_Fingerprint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The layer ID of the final layer in the Docker image's v1
  /// representation.
  public var v1Name: String = String()

  /// Required. The ordered list of v2 blobs that represent a given image.
  public var v2Blob: [String] = []

  /// Output only. The name of the image's v2 blobs computed via:
  ///   [bottom] := v2_blob[bottom]
  ///   [N] := sha256(v2_blob[N] + " " + v2_name[N+1])
  /// Only the name of the final blob is kept.
  public var v2Name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Basis describes the base image portion (Note) of the DockerImage
/// relationship. Linked occurrences are derived from this or an equivalent image
/// via:
///   FROM <Basis.resource_url>
/// Or an equivalent reference, e.g., a tag of the resource_url.
public struct Grafeas_V1_ImageNote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Immutable. The resource_url for the resource representing the
  /// basis of associated occurrence images.
  public var resourceURL: String = String()

  /// Required. Immutable. The fingerprint of the base image.
  public var fingerprint: Grafeas_V1_Fingerprint {
    get {return _fingerprint ?? Grafeas_V1_Fingerprint()}
    set {_fingerprint = newValue}
  }
  /// Returns true if `fingerprint` has been explicitly set.
  public var hasFingerprint: Bool {return self._fingerprint != nil}
  /// Clears the value of `fingerprint`. Subsequent reads from it will return its default value.
  public mutating func clearFingerprint() {self._fingerprint = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fingerprint: Grafeas_V1_Fingerprint? = nil
}

/// Details of the derived image portion of the DockerImage relationship. This
/// image would be produced from a Dockerfile with FROM <DockerImage.Basis in
/// attached Note>.
public struct Grafeas_V1_ImageOccurrence {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The fingerprint of the derived image.
  public var fingerprint: Grafeas_V1_Fingerprint {
    get {return _fingerprint ?? Grafeas_V1_Fingerprint()}
    set {_fingerprint = newValue}
  }
  /// Returns true if `fingerprint` has been explicitly set.
  public var hasFingerprint: Bool {return self._fingerprint != nil}
  /// Clears the value of `fingerprint`. Subsequent reads from it will return its default value.
  public mutating func clearFingerprint() {self._fingerprint = nil}

  /// Output only. The number of layers by which this image differs from the
  /// associated image basis.
  public var distance: Int32 = 0

  /// This contains layer-specific metadata, if populated it has length
  /// "distance" and is ordered with [distance] being the layer immediately
  /// following the base image and [1] being the final layer.
  public var layerInfo: [Grafeas_V1_Layer] = []

  /// Output only. This contains the base image URL for the derived image
  /// occurrence.
  public var baseResourceURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fingerprint: Grafeas_V1_Fingerprint? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grafeas.v1"

extension Grafeas_V1_Layer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Layer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "directive"),
    2: .same(proto: "arguments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.directive)
      case 2: try decoder.decodeSingularStringField(value: &self.arguments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.directive.isEmpty {
      try visitor.visitSingularStringField(value: self.directive, fieldNumber: 1)
    }
    if !self.arguments.isEmpty {
      try visitor.visitSingularStringField(value: self.arguments, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_Layer, rhs: Grafeas_V1_Layer) -> Bool {
    if lhs.directive != rhs.directive {return false}
    if lhs.arguments != rhs.arguments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_Fingerprint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fingerprint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "v1_name"),
    2: .standard(proto: "v2_blob"),
    3: .standard(proto: "v2_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.v1Name)
      case 2: try decoder.decodeRepeatedStringField(value: &self.v2Blob)
      case 3: try decoder.decodeSingularStringField(value: &self.v2Name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.v1Name.isEmpty {
      try visitor.visitSingularStringField(value: self.v1Name, fieldNumber: 1)
    }
    if !self.v2Blob.isEmpty {
      try visitor.visitRepeatedStringField(value: self.v2Blob, fieldNumber: 2)
    }
    if !self.v2Name.isEmpty {
      try visitor.visitSingularStringField(value: self.v2Name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_Fingerprint, rhs: Grafeas_V1_Fingerprint) -> Bool {
    if lhs.v1Name != rhs.v1Name {return false}
    if lhs.v2Blob != rhs.v2Blob {return false}
    if lhs.v2Name != rhs.v2Name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_ImageNote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageNote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_url"),
    2: .same(proto: "fingerprint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.resourceURL)
      case 2: try decoder.decodeSingularMessageField(value: &self._fingerprint)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceURL, fieldNumber: 1)
    }
    if let v = self._fingerprint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_ImageNote, rhs: Grafeas_V1_ImageNote) -> Bool {
    if lhs.resourceURL != rhs.resourceURL {return false}
    if lhs._fingerprint != rhs._fingerprint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grafeas_V1_ImageOccurrence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageOccurrence"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fingerprint"),
    2: .same(proto: "distance"),
    3: .standard(proto: "layer_info"),
    4: .standard(proto: "base_resource_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._fingerprint)
      case 2: try decoder.decodeSingularInt32Field(value: &self.distance)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.layerInfo)
      case 4: try decoder.decodeSingularStringField(value: &self.baseResourceURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fingerprint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.distance != 0 {
      try visitor.visitSingularInt32Field(value: self.distance, fieldNumber: 2)
    }
    if !self.layerInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.layerInfo, fieldNumber: 3)
    }
    if !self.baseResourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.baseResourceURL, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Grafeas_V1_ImageOccurrence, rhs: Grafeas_V1_ImageOccurrence) -> Bool {
    if lhs._fingerprint != rhs._fingerprint {return false}
    if lhs.distance != rhs.distance {return false}
    if lhs.layerInfo != rhs.layerInfo {return false}
    if lhs.baseResourceURL != rhs.baseResourceURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
