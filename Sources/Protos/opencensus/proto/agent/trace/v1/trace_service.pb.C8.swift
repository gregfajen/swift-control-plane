// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opencensus/proto/agent/trace/v1/trace_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Opencensus_Proto_Agent_Trace_V1_CurrentLibraryConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is required only in the first message on the stream or if the
  /// previous sent CurrentLibraryConfig message has a different Node (e.g.
  /// when the same RPC is used to configure multiple Applications).
  public var node: Opencensus_Proto_Agent_Common_V1_Node {
    get {return _node ?? Opencensus_Proto_Agent_Common_V1_Node()}
    set {_node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  public var hasNode: Bool {return self._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  public mutating func clearNode() {self._node = nil}

  /// Current configuration.
  public var config: Opencensus_Proto_Trace_V1_TraceConfig {
    get {return _config ?? Opencensus_Proto_Trace_V1_TraceConfig()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _node: Opencensus_Proto_Agent_Common_V1_Node? = nil
  fileprivate var _config: Opencensus_Proto_Trace_V1_TraceConfig? = nil
}

public struct Opencensus_Proto_Agent_Trace_V1_UpdatedLibraryConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field is ignored when the RPC is used to configure only one Application.
  /// This is required only in the first message on the stream or if the
  /// previous sent UpdatedLibraryConfig message has a different Node.
  public var node: Opencensus_Proto_Agent_Common_V1_Node {
    get {return _node ?? Opencensus_Proto_Agent_Common_V1_Node()}
    set {_node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  public var hasNode: Bool {return self._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  public mutating func clearNode() {self._node = nil}

  /// Requested updated configuration.
  public var config: Opencensus_Proto_Trace_V1_TraceConfig {
    get {return _config ?? Opencensus_Proto_Trace_V1_TraceConfig()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _node: Opencensus_Proto_Agent_Common_V1_Node? = nil
  fileprivate var _config: Opencensus_Proto_Trace_V1_TraceConfig? = nil
}

public struct Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is required only in the first message on the stream or if the
  /// previous sent ExportTraceServiceRequest message has a different Node (e.g.
  /// when the same RPC is used to send Spans from multiple Applications).
  public var node: Opencensus_Proto_Agent_Common_V1_Node {
    get {return _node ?? Opencensus_Proto_Agent_Common_V1_Node()}
    set {_node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  public var hasNode: Bool {return self._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  public mutating func clearNode() {self._node = nil}

  /// A list of Spans that belong to the last received Node.
  public var spans: [Opencensus_Proto_Trace_V1_Span] = []

  /// The resource for the spans in this message that do not have an explicit
  /// resource set.
  /// If unset, the most recently set resource in the RPC stream applies. It is
  /// valid to never be set within a stream, e.g. when no resource info is known.
  public var resource: Opencensus_Proto_Resource_V1_Resource {
    get {return _resource ?? Opencensus_Proto_Resource_V1_Resource()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {self._resource = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _node: Opencensus_Proto_Agent_Common_V1_Node? = nil
  fileprivate var _resource: Opencensus_Proto_Resource_V1_Resource? = nil
}

public struct Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencensus.proto.agent.trace.v1"

extension Opencensus_Proto_Agent_Trace_V1_CurrentLibraryConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CurrentLibraryConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .same(proto: "config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._node)
      case 2: try decoder.decodeSingularMessageField(value: &self._config)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Trace_V1_CurrentLibraryConfig, rhs: Opencensus_Proto_Agent_Trace_V1_CurrentLibraryConfig) -> Bool {
    if lhs._node != rhs._node {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Agent_Trace_V1_UpdatedLibraryConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdatedLibraryConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .same(proto: "config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._node)
      case 2: try decoder.decodeSingularMessageField(value: &self._config)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Trace_V1_UpdatedLibraryConfig, rhs: Opencensus_Proto_Agent_Trace_V1_UpdatedLibraryConfig) -> Bool {
    if lhs._node != rhs._node {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportTraceServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .same(proto: "spans"),
    3: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._node)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.spans)
      case 3: try decoder.decodeSingularMessageField(value: &self._resource)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.spans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spans, fieldNumber: 2)
    }
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceRequest, rhs: Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceRequest) -> Bool {
    if lhs._node != rhs._node {return false}
    if lhs.spans != rhs.spans {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportTraceServiceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceResponse, rhs: Opencensus_Proto_Agent_Trace_V1_ExportTraceServiceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
