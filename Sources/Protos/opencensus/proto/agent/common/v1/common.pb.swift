// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opencensus/proto/agent/common/v1/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Identifier metadata of the Node that produces the span or tracing data.
/// Note, this is not the metadata about the Node or service that is described by associated spans.
/// In the future we plan to extend the identifier proto definition to support
/// additional information (e.g cloud id, etc.)
public struct Opencensus_Proto_Agent_Common_V1_Node {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier that uniquely identifies a process within a VM/container.
  public var identifier: Opencensus_Proto_Agent_Common_V1_ProcessIdentifier {
    get {return _identifier ?? Opencensus_Proto_Agent_Common_V1_ProcessIdentifier()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  public var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  public mutating func clearIdentifier() {self._identifier = nil}

  /// Information on the OpenCensus Library that initiates the stream.
  public var libraryInfo: Opencensus_Proto_Agent_Common_V1_LibraryInfo {
    get {return _libraryInfo ?? Opencensus_Proto_Agent_Common_V1_LibraryInfo()}
    set {_libraryInfo = newValue}
  }
  /// Returns true if `libraryInfo` has been explicitly set.
  public var hasLibraryInfo: Bool {return self._libraryInfo != nil}
  /// Clears the value of `libraryInfo`. Subsequent reads from it will return its default value.
  public mutating func clearLibraryInfo() {self._libraryInfo = nil}

  /// Additional information on service.
  public var serviceInfo: Opencensus_Proto_Agent_Common_V1_ServiceInfo {
    get {return _serviceInfo ?? Opencensus_Proto_Agent_Common_V1_ServiceInfo()}
    set {_serviceInfo = newValue}
  }
  /// Returns true if `serviceInfo` has been explicitly set.
  public var hasServiceInfo: Bool {return self._serviceInfo != nil}
  /// Clears the value of `serviceInfo`. Subsequent reads from it will return its default value.
  public mutating func clearServiceInfo() {self._serviceInfo = nil}

  /// Additional attributes.
  public var attributes: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _identifier: Opencensus_Proto_Agent_Common_V1_ProcessIdentifier? = nil
  fileprivate var _libraryInfo: Opencensus_Proto_Agent_Common_V1_LibraryInfo? = nil
  fileprivate var _serviceInfo: Opencensus_Proto_Agent_Common_V1_ServiceInfo? = nil
}

/// Identifier that uniquely identifies a process within a VM/container.
public struct Opencensus_Proto_Agent_Common_V1_ProcessIdentifier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The host name. Usually refers to the machine/container name.
  /// For example: os.Hostname() in Go, socket.gethostname() in Python.
  public var hostName: String = String()

  /// Process id.
  public var pid: UInt32 = 0

  /// Start time of this ProcessIdentifier. Represented in epoch time.
  public var startTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTimestamp = newValue}
  }
  /// Returns true if `startTimestamp` has been explicitly set.
  public var hasStartTimestamp: Bool {return self._startTimestamp != nil}
  /// Clears the value of `startTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearStartTimestamp() {self._startTimestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Information on OpenCensus Library.
public struct Opencensus_Proto_Agent_Common_V1_LibraryInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Language of OpenCensus Library.
  public var language: Opencensus_Proto_Agent_Common_V1_LibraryInfo.Language = .unspecified

  /// Version of Agent exporter of Library.
  public var exporterVersion: String = String()

  /// Version of OpenCensus Library.
  public var coreLibraryVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Language: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case cpp // = 1
    case cSharp // = 2
    case erlang // = 3
    case goLang // = 4
    case java // = 5
    case nodeJs // = 6
    case php // = 7
    case python // = 8
    case ruby // = 9
    case webJs // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .cpp
      case 2: self = .cSharp
      case 3: self = .erlang
      case 4: self = .goLang
      case 5: self = .java
      case 6: self = .nodeJs
      case 7: self = .php
      case 8: self = .python
      case 9: self = .ruby
      case 10: self = .webJs
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .cpp: return 1
      case .cSharp: return 2
      case .erlang: return 3
      case .goLang: return 4
      case .java: return 5
      case .nodeJs: return 6
      case .php: return 7
      case .python: return 8
      case .ruby: return 9
      case .webJs: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Opencensus_Proto_Agent_Common_V1_LibraryInfo.Language: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencensus_Proto_Agent_Common_V1_LibraryInfo.Language] = [
    .unspecified,
    .cpp,
    .cSharp,
    .erlang,
    .goLang,
    .java,
    .nodeJs,
    .php,
    .python,
    .ruby,
    .webJs,
  ]
}

#endif  // swift(>=4.2)

/// Additional service information.
public struct Opencensus_Proto_Agent_Common_V1_ServiceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencensus.proto.agent.common.v1"

extension Opencensus_Proto_Agent_Common_V1_Node: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Node"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "library_info"),
    3: .standard(proto: "service_info"),
    4: .same(proto: "attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._libraryInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._serviceInfo) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.attributes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._libraryInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._serviceInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.attributes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.attributes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Common_V1_Node, rhs: Opencensus_Proto_Agent_Common_V1_Node) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._libraryInfo != rhs._libraryInfo {return false}
    if lhs._serviceInfo != rhs._serviceInfo {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Agent_Common_V1_ProcessIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessIdentifier"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_name"),
    2: .same(proto: "pid"),
    3: .standard(proto: "start_timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hostName) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startTimestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostName.isEmpty {
      try visitor.visitSingularStringField(value: self.hostName, fieldNumber: 1)
    }
    if self.pid != 0 {
      try visitor.visitSingularUInt32Field(value: self.pid, fieldNumber: 2)
    }
    if let v = self._startTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Common_V1_ProcessIdentifier, rhs: Opencensus_Proto_Agent_Common_V1_ProcessIdentifier) -> Bool {
    if lhs.hostName != rhs.hostName {return false}
    if lhs.pid != rhs.pid {return false}
    if lhs._startTimestamp != rhs._startTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Agent_Common_V1_LibraryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LibraryInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .standard(proto: "exporter_version"),
    3: .standard(proto: "core_library_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.language) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.exporterVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.coreLibraryVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.language != .unspecified {
      try visitor.visitSingularEnumField(value: self.language, fieldNumber: 1)
    }
    if !self.exporterVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.exporterVersion, fieldNumber: 2)
    }
    if !self.coreLibraryVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.coreLibraryVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Common_V1_LibraryInfo, rhs: Opencensus_Proto_Agent_Common_V1_LibraryInfo) -> Bool {
    if lhs.language != rhs.language {return false}
    if lhs.exporterVersion != rhs.exporterVersion {return false}
    if lhs.coreLibraryVersion != rhs.coreLibraryVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Agent_Common_V1_LibraryInfo.Language: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LANGUAGE_UNSPECIFIED"),
    1: .same(proto: "CPP"),
    2: .same(proto: "C_SHARP"),
    3: .same(proto: "ERLANG"),
    4: .same(proto: "GO_LANG"),
    5: .same(proto: "JAVA"),
    6: .same(proto: "NODE_JS"),
    7: .same(proto: "PHP"),
    8: .same(proto: "PYTHON"),
    9: .same(proto: "RUBY"),
    10: .same(proto: "WEB_JS"),
  ]
}

extension Opencensus_Proto_Agent_Common_V1_ServiceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Agent_Common_V1_ServiceInfo, rhs: Opencensus_Proto_Agent_Common_V1_ServiceInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
