// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opencensus/proto/stats/v1/stats.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2016-18, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TODO(bdrutu): Consider if this should be moved to a "tags" directory to match the API structure.
public struct Opencensus_Proto_Stats_V1_Tag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String = String()

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Measure .
public struct Opencensus_Proto_Stats_V1_Measure {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A string by which the measure will be referred to, e.g. "rpc_server_latency". Names MUST be
  /// unique within the library.
  public var name: String = String()

  /// Describes the measure, e.g. "RPC latency in seconds".
  public var description_p: String = String()

  /// Describes the unit used for the Measure. Follows the format described by
  /// http://unitsofmeasure.org/ucum.html.
  public var unit: String = String()

  /// The type used for this Measure.
  public var type: Opencensus_Proto_Stats_V1_Measure.TypeEnum = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown type.
    case unspecified // = 0

    /// Indicates an int64 Measure.
    case int64 // = 1

    /// Indicates a double Measure.
    case double // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .int64
      case 2: self = .double
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .int64: return 1
      case .double: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Opencensus_Proto_Stats_V1_Measure.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencensus_Proto_Stats_V1_Measure.TypeEnum] = [
    .unspecified,
    .int64,
    .double,
  ]
}

#endif  // swift(>=4.2)

public struct Opencensus_Proto_Stats_V1_View {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
  /// within the library.
  public var name: String = String()

  /// Describes the view, e.g. "RPC latency distribution"
  public var description_p: String = String()

  /// The Measure to which this view is applied.
  public var measure: Opencensus_Proto_Stats_V1_Measure {
    get {return _measure ?? Opencensus_Proto_Stats_V1_Measure()}
    set {_measure = newValue}
  }
  /// Returns true if `measure` has been explicitly set.
  public var hasMeasure: Bool {return self._measure != nil}
  /// Clears the value of `measure`. Subsequent reads from it will return its default value.
  public mutating func clearMeasure() {self._measure = nil}

  /// An array of tag keys. These values associated with tags of this name form the basis by which
  /// individual stats will be aggregated (one aggregation per unique tag value). If none are
  /// provided, then all data is recorded in a single aggregation.
  public var columns: [String] = []

  /// The description of the aggregation used for this view which describes how data collected are
  /// aggregated.
  public var aggregation: Opencensus_Proto_Stats_V1_View.OneOf_Aggregation? = nil

  /// Counts the number of measurements recorded.
  public var countAggregation: Opencensus_Proto_Stats_V1_CountAggregation {
    get {
      if case .countAggregation(let v)? = aggregation {return v}
      return Opencensus_Proto_Stats_V1_CountAggregation()
    }
    set {aggregation = .countAggregation(newValue)}
  }

  /// Indicates that data collected and aggregated with this Aggregation will be summed up.
  public var sumAggregation: Opencensus_Proto_Stats_V1_SumAggregation {
    get {
      if case .sumAggregation(let v)? = aggregation {return v}
      return Opencensus_Proto_Stats_V1_SumAggregation()
    }
    set {aggregation = .sumAggregation(newValue)}
  }

  /// Indicates that data collected and aggregated with this Aggregation will represent the last
  /// recorded value. This is useful to support Gauges.
  public var lastValueAggregation: Opencensus_Proto_Stats_V1_LastValueAggregation {
    get {
      if case .lastValueAggregation(let v)? = aggregation {return v}
      return Opencensus_Proto_Stats_V1_LastValueAggregation()
    }
    set {aggregation = .lastValueAggregation(newValue)}
  }

  /// Indicates that the desired Aggregation is a histogram distribution. A distribution
  /// Aggregation may contain a histogram of the values in the population. User should define the
  /// bucket boundaries for that histogram (see DistributionAggregation).
  public var distributionAggregation: Opencensus_Proto_Stats_V1_DistributionAggregation {
    get {
      if case .distributionAggregation(let v)? = aggregation {return v}
      return Opencensus_Proto_Stats_V1_DistributionAggregation()
    }
    set {aggregation = .distributionAggregation(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The description of the aggregation used for this view which describes how data collected are
  /// aggregated.
  public enum OneOf_Aggregation: Equatable {
    /// Counts the number of measurements recorded.
    case countAggregation(Opencensus_Proto_Stats_V1_CountAggregation)
    /// Indicates that data collected and aggregated with this Aggregation will be summed up.
    case sumAggregation(Opencensus_Proto_Stats_V1_SumAggregation)
    /// Indicates that data collected and aggregated with this Aggregation will represent the last
    /// recorded value. This is useful to support Gauges.
    case lastValueAggregation(Opencensus_Proto_Stats_V1_LastValueAggregation)
    /// Indicates that the desired Aggregation is a histogram distribution. A distribution
    /// Aggregation may contain a histogram of the values in the population. User should define the
    /// bucket boundaries for that histogram (see DistributionAggregation).
    case distributionAggregation(Opencensus_Proto_Stats_V1_DistributionAggregation)

  #if !swift(>=4.1)
    public static func ==(lhs: Opencensus_Proto_Stats_V1_View.OneOf_Aggregation, rhs: Opencensus_Proto_Stats_V1_View.OneOf_Aggregation) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.countAggregation, .countAggregation): return {
        guard case .countAggregation(let l) = lhs, case .countAggregation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sumAggregation, .sumAggregation): return {
        guard case .sumAggregation(let l) = lhs, case .sumAggregation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.lastValueAggregation, .lastValueAggregation): return {
        guard case .lastValueAggregation(let l) = lhs, case .lastValueAggregation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.distributionAggregation, .distributionAggregation): return {
        guard case .distributionAggregation(let l) = lhs, case .distributionAggregation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _measure: Opencensus_Proto_Stats_V1_Measure? = nil
}

public struct Opencensus_Proto_Stats_V1_CountAggregation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Opencensus_Proto_Stats_V1_SumAggregation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Opencensus_Proto_Stats_V1_LastValueAggregation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Opencensus_Proto_Stats_V1_DistributionAggregation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A Distribution may optionally contain a histogram of the values in the
  /// population. The bucket boundaries for that histogram are described by
  /// `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
  /// buckets. The boundaries for bucket index i are:
  ///
  /// (-infinity, bucket_bounds[i]) for i == 0
  /// [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-2
  /// [bucket_bounds[i-1], +infinity) for i == N-1
  ///
  /// i.e. an underflow bucket (number 0), zero or more finite buckets (1
  /// through N - 2, and an overflow bucket (N - 1), with inclusive lower
  /// bounds and exclusive upper bounds.
  ///
  /// If `bucket_bounds` has no elements (zero size), then there is no
  /// histogram associated with the Distribution. If `bucket_bounds` has only
  /// one element, there are no finite buckets, and that single element is the
  /// common boundary of the overflow and underflow buckets. The values must
  /// be monotonically increasing.
  public var bucketBounds: [Double] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Describes a data point to be collected for a Measure.
public struct Opencensus_Proto_Stats_V1_Measurement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tags: [Opencensus_Proto_Stats_V1_Tag] = []

  /// The name of the measure to which the value is applied.
  public var measureName: String = String()

  /// The recorded value, MUST have the appropriate type to match the Measure.
  public var value: Opencensus_Proto_Stats_V1_Measurement.OneOf_Value? = nil

  public var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = value {return v}
      return 0
    }
    set {value = .doubleValue(newValue)}
  }

  public var intValue: Int64 {
    get {
      if case .intValue(let v)? = value {return v}
      return 0
    }
    set {value = .intValue(newValue)}
  }

  /// The time when this measurement was recorded. If the implementation uses a async buffer to
  /// record measurements this may be the time when the measurement was read from the buffer.
  public var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {self._time = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The recorded value, MUST have the appropriate type to match the Measure.
  public enum OneOf_Value: Equatable {
    case doubleValue(Double)
    case intValue(Int64)

  #if !swift(>=4.1)
    public static func ==(lhs: Opencensus_Proto_Stats_V1_Measurement.OneOf_Value, rhs: Opencensus_Proto_Stats_V1_Measurement.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.doubleValue, .doubleValue): return {
        guard case .doubleValue(let l) = lhs, case .doubleValue(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.intValue, .intValue): return {
        guard case .intValue(let l) = lhs, case .intValue(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencensus.proto.stats.v1"

extension Opencensus_Proto_Stats_V1_Tag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_Tag, rhs: Opencensus_Proto_Stats_V1_Tag) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_Measure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Measure"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .same(proto: "unit"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.unit) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 3)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_Measure, rhs: Opencensus_Proto_Stats_V1_Measure) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_Measure.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "INT64"),
    2: .same(proto: "DOUBLE"),
  ]
}

extension Opencensus_Proto_Stats_V1_View: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".View"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .same(proto: "measure"),
    4: .same(proto: "columns"),
    5: .standard(proto: "count_aggregation"),
    6: .standard(proto: "sum_aggregation"),
    7: .standard(proto: "last_value_aggregation"),
    8: .standard(proto: "distribution_aggregation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._measure) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.columns) }()
      case 5: try {
        var v: Opencensus_Proto_Stats_V1_CountAggregation?
        if let current = self.aggregation {
          try decoder.handleConflictingOneOf()
          if case .countAggregation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.aggregation = .countAggregation(v)}
      }()
      case 6: try {
        var v: Opencensus_Proto_Stats_V1_SumAggregation?
        if let current = self.aggregation {
          try decoder.handleConflictingOneOf()
          if case .sumAggregation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.aggregation = .sumAggregation(v)}
      }()
      case 7: try {
        var v: Opencensus_Proto_Stats_V1_LastValueAggregation?
        if let current = self.aggregation {
          try decoder.handleConflictingOneOf()
          if case .lastValueAggregation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.aggregation = .lastValueAggregation(v)}
      }()
      case 8: try {
        var v: Opencensus_Proto_Stats_V1_DistributionAggregation?
        if let current = self.aggregation {
          try decoder.handleConflictingOneOf()
          if case .distributionAggregation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.aggregation = .distributionAggregation(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if let v = self._measure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.columns.isEmpty {
      try visitor.visitRepeatedStringField(value: self.columns, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.aggregation {
    case .countAggregation?: try {
      guard case .countAggregation(let v)? = self.aggregation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .sumAggregation?: try {
      guard case .sumAggregation(let v)? = self.aggregation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .lastValueAggregation?: try {
      guard case .lastValueAggregation(let v)? = self.aggregation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .distributionAggregation?: try {
      guard case .distributionAggregation(let v)? = self.aggregation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_View, rhs: Opencensus_Proto_Stats_V1_View) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._measure != rhs._measure {return false}
    if lhs.columns != rhs.columns {return false}
    if lhs.aggregation != rhs.aggregation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_CountAggregation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CountAggregation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_CountAggregation, rhs: Opencensus_Proto_Stats_V1_CountAggregation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_SumAggregation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SumAggregation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_SumAggregation, rhs: Opencensus_Proto_Stats_V1_SumAggregation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_LastValueAggregation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LastValueAggregation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_LastValueAggregation, rhs: Opencensus_Proto_Stats_V1_LastValueAggregation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_DistributionAggregation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DistributionAggregation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bucket_bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.bucketBounds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bucketBounds.isEmpty {
      try visitor.visitPackedDoubleField(value: self.bucketBounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_DistributionAggregation, rhs: Opencensus_Proto_Stats_V1_DistributionAggregation) -> Bool {
    if lhs.bucketBounds != rhs.bucketBounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencensus_Proto_Stats_V1_Measurement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Measurement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tags"),
    2: .standard(proto: "measure_name"),
    3: .standard(proto: "double_value"),
    4: .standard(proto: "int_value"),
    5: .same(proto: "time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.tags) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.measureName) }()
      case 3: try {
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.value = .doubleValue(v)}
      }()
      case 4: try {
        if self.value != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.value = .intValue(v)}
      }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 1)
    }
    if !self.measureName.isEmpty {
      try visitor.visitSingularStringField(value: self.measureName, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.value {
    case .doubleValue?: try {
      guard case .doubleValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }()
    case .intValue?: try {
      guard case .intValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencensus_Proto_Stats_V1_Measurement, rhs: Opencensus_Proto_Stats_V1_Measurement) -> Bool {
    if lhs.tags != rhs.tags {return false}
    if lhs.measureName != rhs.measureName {return false}
    if lhs.value != rhs.value {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
