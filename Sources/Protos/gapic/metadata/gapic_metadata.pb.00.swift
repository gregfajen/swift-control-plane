// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gapic/metadata/gapic_metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata about a GAPIC library for a specific combination of API, version, and
/// computer language.
public struct Google_Gapic_Metadata_GapicMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Schema version of this proto. Current value: 1.0
  public var schema: String = String()

  /// Any human-readable comments to be included in this file.
  public var comment: String = String()

  /// Computer language of this generated language. This must be
  /// spelled out as it spoken in English, with no capitalization or
  /// separators (e.g. "csharp", "nodejs").
  public var language: String = String()

  /// The proto package containing the API definition for which this
  /// GAPIC library was generated.
  public var protoPackage: String = String()

  /// The language-specific library package for this GAPIC library.
  public var libraryPackage: String = String()

  /// A map from each proto-defined service to ServiceForTransports,
  /// which allows listing information about transport-specific
  /// implementations of the service.
  ///
  /// The key is the name of the service as it appears in the .proto
  /// file.
  public var services: Dictionary<String,Google_Gapic_Metadata_GapicMetadata.ServiceForTransport> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A map from a transport name to ServiceAsClient, which allows
  /// listing information about the client objects that implement the
  /// parent RPC service for the specified transport.
  ///
  /// The key name is the transport, lower-cased with no separators
  /// (e.g. "grpc", "rest").
  public struct ServiceForTransport {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var clients: Dictionary<String,Google_Gapic_Metadata_GapicMetadata.ServiceAsClient> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Information about a specific client implementing a proto-defined service.
  public struct ServiceAsClient {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name of the library client formatted as it appears in the source code
    public var libraryClient: String = String()

    /// A mapping from each proto-defined RPC name to the the list of
    /// methods in library_client that implement it. There can be more
    /// than one library_client method for each RPC. RPCs with no
    /// library_client methods need not be included.
    ///
    /// The key name is the name of the RPC as defined and formated in
    /// the proto file.
    public var rpcs: Dictionary<String,Google_Gapic_Metadata_GapicMetadata.MethodList> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// List of GAPIC client methods implementing the proto-defined RPC
  /// for the transport and service specified in the containing
  /// structures.
  public struct MethodList {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// List of methods for a specific proto-service client in the
    /// GAPIC. These names should be formatted as they appear in the
    /// source code.
    public var methods: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.gapic.metadata"

extension Google_Gapic_Metadata_GapicMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GapicMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "schema"),
    2: .same(proto: "comment"),
    3: .same(proto: "language"),
    4: .standard(proto: "proto_package"),
    5: .standard(proto: "library_package"),
    6: .same(proto: "services"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.schema) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.comment) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.language) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.protoPackage) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.libraryPackage) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Gapic_Metadata_GapicMetadata.ServiceForTransport>.self, value: &self.services) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.schema.isEmpty {
      try visitor.visitSingularStringField(value: self.schema, fieldNumber: 1)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 2)
    }
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 3)
    }
    if !self.protoPackage.isEmpty {
      try visitor.visitSingularStringField(value: self.protoPackage, fieldNumber: 4)
    }
    if !self.libraryPackage.isEmpty {
      try visitor.visitSingularStringField(value: self.libraryPackage, fieldNumber: 5)
    }
    if !self.services.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Gapic_Metadata_GapicMetadata.ServiceForTransport>.self, value: self.services, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Gapic_Metadata_GapicMetadata, rhs: Google_Gapic_Metadata_GapicMetadata) -> Bool {
    if lhs.schema != rhs.schema {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.language != rhs.language {return false}
    if lhs.protoPackage != rhs.protoPackage {return false}
    if lhs.libraryPackage != rhs.libraryPackage {return false}
    if lhs.services != rhs.services {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Gapic_Metadata_GapicMetadata.ServiceForTransport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Gapic_Metadata_GapicMetadata.protoMessageName + ".ServiceForTransport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clients"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Gapic_Metadata_GapicMetadata.ServiceAsClient>.self, value: &self.clients) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clients.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Gapic_Metadata_GapicMetadata.ServiceAsClient>.self, value: self.clients, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Gapic_Metadata_GapicMetadata.ServiceForTransport, rhs: Google_Gapic_Metadata_GapicMetadata.ServiceForTransport) -> Bool {
    if lhs.clients != rhs.clients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Gapic_Metadata_GapicMetadata.ServiceAsClient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Gapic_Metadata_GapicMetadata.protoMessageName + ".ServiceAsClient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "library_client"),
    2: .same(proto: "rpcs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.libraryClient) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Gapic_Metadata_GapicMetadata.MethodList>.self, value: &self.rpcs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.libraryClient.isEmpty {
      try visitor.visitSingularStringField(value: self.libraryClient, fieldNumber: 1)
    }
    if !self.rpcs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Gapic_Metadata_GapicMetadata.MethodList>.self, value: self.rpcs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Gapic_Metadata_GapicMetadata.ServiceAsClient, rhs: Google_Gapic_Metadata_GapicMetadata.ServiceAsClient) -> Bool {
    if lhs.libraryClient != rhs.libraryClient {return false}
    if lhs.rpcs != rhs.rpcs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Gapic_Metadata_GapicMetadata.MethodList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Gapic_Metadata_GapicMetadata.protoMessageName + ".MethodList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "methods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.methods) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.methods.isEmpty {
      try visitor.visitRepeatedStringField(value: self.methods, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Gapic_Metadata_GapicMetadata.MethodList, rhs: Google_Gapic_Metadata_GapicMetadata.MethodList) -> Bool {
    if lhs.methods != rhs.methods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
