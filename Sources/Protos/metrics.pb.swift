// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metrics.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2013 Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Io_Prometheus_Client_MetricType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case counter // = 0
  case gauge // = 1
  case summary // = 2
  case untyped // = 3
  case histogram // = 4

  public init() {
    self = .counter
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .counter
    case 1: self = .gauge
    case 2: self = .summary
    case 3: self = .untyped
    case 4: self = .histogram
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .counter: return 0
    case .gauge: return 1
    case .summary: return 2
    case .untyped: return 3
    case .histogram: return 4
    }
  }

}

#if swift(>=4.2)

extension Io_Prometheus_Client_MetricType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Io_Prometheus_Client_LabelPair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _name: String? = nil
  fileprivate var _value: String? = nil
}

public struct Io_Prometheus_Client_Gauge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Double? = nil
}

public struct Io_Prometheus_Client_Counter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var exemplar: Io_Prometheus_Client_Exemplar {
    get {return _exemplar ?? Io_Prometheus_Client_Exemplar()}
    set {_exemplar = newValue}
  }
  /// Returns true if `exemplar` has been explicitly set.
  public var hasExemplar: Bool {return self._exemplar != nil}
  /// Clears the value of `exemplar`. Subsequent reads from it will return its default value.
  public mutating func clearExemplar() {self._exemplar = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Double? = nil
  fileprivate var _exemplar: Io_Prometheus_Client_Exemplar? = nil
}

public struct Io_Prometheus_Client_Quantile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var quantile: Double {
    get {return _quantile ?? 0}
    set {_quantile = newValue}
  }
  /// Returns true if `quantile` has been explicitly set.
  public var hasQuantile: Bool {return self._quantile != nil}
  /// Clears the value of `quantile`. Subsequent reads from it will return its default value.
  public mutating func clearQuantile() {self._quantile = nil}

  public var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _quantile: Double? = nil
  fileprivate var _value: Double? = nil
}

public struct Io_Prometheus_Client_Summary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sampleCount: UInt64 {
    get {return _sampleCount ?? 0}
    set {_sampleCount = newValue}
  }
  /// Returns true if `sampleCount` has been explicitly set.
  public var hasSampleCount: Bool {return self._sampleCount != nil}
  /// Clears the value of `sampleCount`. Subsequent reads from it will return its default value.
  public mutating func clearSampleCount() {self._sampleCount = nil}

  public var sampleSum: Double {
    get {return _sampleSum ?? 0}
    set {_sampleSum = newValue}
  }
  /// Returns true if `sampleSum` has been explicitly set.
  public var hasSampleSum: Bool {return self._sampleSum != nil}
  /// Clears the value of `sampleSum`. Subsequent reads from it will return its default value.
  public mutating func clearSampleSum() {self._sampleSum = nil}

  public var quantile: [Io_Prometheus_Client_Quantile] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sampleCount: UInt64? = nil
  fileprivate var _sampleSum: Double? = nil
}

public struct Io_Prometheus_Client_Untyped {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Double? = nil
}

public struct Io_Prometheus_Client_Histogram {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sampleCount: UInt64 {
    get {return _sampleCount ?? 0}
    set {_sampleCount = newValue}
  }
  /// Returns true if `sampleCount` has been explicitly set.
  public var hasSampleCount: Bool {return self._sampleCount != nil}
  /// Clears the value of `sampleCount`. Subsequent reads from it will return its default value.
  public mutating func clearSampleCount() {self._sampleCount = nil}

  public var sampleSum: Double {
    get {return _sampleSum ?? 0}
    set {_sampleSum = newValue}
  }
  /// Returns true if `sampleSum` has been explicitly set.
  public var hasSampleSum: Bool {return self._sampleSum != nil}
  /// Clears the value of `sampleSum`. Subsequent reads from it will return its default value.
  public mutating func clearSampleSum() {self._sampleSum = nil}

  /// Ordered in increasing order of upper_bound, +Inf bucket is optional.
  public var bucket: [Io_Prometheus_Client_Bucket] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sampleCount: UInt64? = nil
  fileprivate var _sampleSum: Double? = nil
}

public struct Io_Prometheus_Client_Bucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Cumulative in increasing order.
  public var cumulativeCount: UInt64 {
    get {return _cumulativeCount ?? 0}
    set {_cumulativeCount = newValue}
  }
  /// Returns true if `cumulativeCount` has been explicitly set.
  public var hasCumulativeCount: Bool {return self._cumulativeCount != nil}
  /// Clears the value of `cumulativeCount`. Subsequent reads from it will return its default value.
  public mutating func clearCumulativeCount() {self._cumulativeCount = nil}

  /// Inclusive.
  public var upperBound: Double {
    get {return _upperBound ?? 0}
    set {_upperBound = newValue}
  }
  /// Returns true if `upperBound` has been explicitly set.
  public var hasUpperBound: Bool {return self._upperBound != nil}
  /// Clears the value of `upperBound`. Subsequent reads from it will return its default value.
  public mutating func clearUpperBound() {self._upperBound = nil}

  public var exemplar: Io_Prometheus_Client_Exemplar {
    get {return _exemplar ?? Io_Prometheus_Client_Exemplar()}
    set {_exemplar = newValue}
  }
  /// Returns true if `exemplar` has been explicitly set.
  public var hasExemplar: Bool {return self._exemplar != nil}
  /// Clears the value of `exemplar`. Subsequent reads from it will return its default value.
  public mutating func clearExemplar() {self._exemplar = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cumulativeCount: UInt64? = nil
  fileprivate var _upperBound: Double? = nil
  fileprivate var _exemplar: Io_Prometheus_Client_Exemplar? = nil
}

public struct Io_Prometheus_Client_Exemplar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var label: [Io_Prometheus_Client_LabelPair] = []

  public var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// OpenMetrics-style.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Double? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Io_Prometheus_Client_Metric {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var label: [Io_Prometheus_Client_LabelPair] = []

  public var gauge: Io_Prometheus_Client_Gauge {
    get {return _gauge ?? Io_Prometheus_Client_Gauge()}
    set {_gauge = newValue}
  }
  /// Returns true if `gauge` has been explicitly set.
  public var hasGauge: Bool {return self._gauge != nil}
  /// Clears the value of `gauge`. Subsequent reads from it will return its default value.
  public mutating func clearGauge() {self._gauge = nil}

  public var counter: Io_Prometheus_Client_Counter {
    get {return _counter ?? Io_Prometheus_Client_Counter()}
    set {_counter = newValue}
  }
  /// Returns true if `counter` has been explicitly set.
  public var hasCounter: Bool {return self._counter != nil}
  /// Clears the value of `counter`. Subsequent reads from it will return its default value.
  public mutating func clearCounter() {self._counter = nil}

  public var summary: Io_Prometheus_Client_Summary {
    get {return _summary ?? Io_Prometheus_Client_Summary()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  public var untyped: Io_Prometheus_Client_Untyped {
    get {return _untyped ?? Io_Prometheus_Client_Untyped()}
    set {_untyped = newValue}
  }
  /// Returns true if `untyped` has been explicitly set.
  public var hasUntyped: Bool {return self._untyped != nil}
  /// Clears the value of `untyped`. Subsequent reads from it will return its default value.
  public mutating func clearUntyped() {self._untyped = nil}

  public var histogram: Io_Prometheus_Client_Histogram {
    get {return _histogram ?? Io_Prometheus_Client_Histogram()}
    set {_histogram = newValue}
  }
  /// Returns true if `histogram` has been explicitly set.
  public var hasHistogram: Bool {return self._histogram != nil}
  /// Clears the value of `histogram`. Subsequent reads from it will return its default value.
  public mutating func clearHistogram() {self._histogram = nil}

  public var timestampMs: Int64 {
    get {return _timestampMs ?? 0}
    set {_timestampMs = newValue}
  }
  /// Returns true if `timestampMs` has been explicitly set.
  public var hasTimestampMs: Bool {return self._timestampMs != nil}
  /// Clears the value of `timestampMs`. Subsequent reads from it will return its default value.
  public mutating func clearTimestampMs() {self._timestampMs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gauge: Io_Prometheus_Client_Gauge? = nil
  fileprivate var _counter: Io_Prometheus_Client_Counter? = nil
  fileprivate var _summary: Io_Prometheus_Client_Summary? = nil
  fileprivate var _untyped: Io_Prometheus_Client_Untyped? = nil
  fileprivate var _histogram: Io_Prometheus_Client_Histogram? = nil
  fileprivate var _timestampMs: Int64? = nil
}

public struct Io_Prometheus_Client_MetricFamily {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var help: String {
    get {return _help ?? String()}
    set {_help = newValue}
  }
  /// Returns true if `help` has been explicitly set.
  public var hasHelp: Bool {return self._help != nil}
  /// Clears the value of `help`. Subsequent reads from it will return its default value.
  public mutating func clearHelp() {self._help = nil}

  public var type: Io_Prometheus_Client_MetricType {
    get {return _type ?? .counter}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  public var metric: [Io_Prometheus_Client_Metric] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _name: String? = nil
  fileprivate var _help: String? = nil
  fileprivate var _type: Io_Prometheus_Client_MetricType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "io.prometheus.client"

extension Io_Prometheus_Client_MetricType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COUNTER"),
    1: .same(proto: "GAUGE"),
    2: .same(proto: "SUMMARY"),
    3: .same(proto: "UNTYPED"),
    4: .same(proto: "HISTOGRAM"),
  ]
}

extension Io_Prometheus_Client_LabelPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelPair"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_LabelPair, rhs: Io_Prometheus_Client_LabelPair) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Gauge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Gauge"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Gauge, rhs: Io_Prometheus_Client_Gauge) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Counter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Counter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "exemplar"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._exemplar) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._exemplar {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Counter, rhs: Io_Prometheus_Client_Counter) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._exemplar != rhs._exemplar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Quantile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Quantile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quantile"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._quantile) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._quantile {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Quantile, rhs: Io_Prometheus_Client_Quantile) -> Bool {
    if lhs._quantile != rhs._quantile {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Summary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Summary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_count"),
    2: .standard(proto: "sample_sum"),
    3: .same(proto: "quantile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._sampleCount) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._sampleSum) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.quantile) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sampleCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._sampleSum {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if !self.quantile.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.quantile, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Summary, rhs: Io_Prometheus_Client_Summary) -> Bool {
    if lhs._sampleCount != rhs._sampleCount {return false}
    if lhs._sampleSum != rhs._sampleSum {return false}
    if lhs.quantile != rhs.quantile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Untyped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Untyped"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Untyped, rhs: Io_Prometheus_Client_Untyped) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Histogram: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Histogram"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_count"),
    2: .standard(proto: "sample_sum"),
    3: .same(proto: "bucket"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._sampleCount) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._sampleSum) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.bucket) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sampleCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._sampleSum {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if !self.bucket.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bucket, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Histogram, rhs: Io_Prometheus_Client_Histogram) -> Bool {
    if lhs._sampleCount != rhs._sampleCount {return false}
    if lhs._sampleSum != rhs._sampleSum {return false}
    if lhs.bucket != rhs.bucket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Bucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Bucket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cumulative_count"),
    2: .standard(proto: "upper_bound"),
    3: .same(proto: "exemplar"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._cumulativeCount) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._upperBound) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._exemplar) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._cumulativeCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._upperBound {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._exemplar {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Bucket, rhs: Io_Prometheus_Client_Bucket) -> Bool {
    if lhs._cumulativeCount != rhs._cumulativeCount {return false}
    if lhs._upperBound != rhs._upperBound {return false}
    if lhs._exemplar != rhs._exemplar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Exemplar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Exemplar"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "value"),
    3: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.label) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.label, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Exemplar, rhs: Io_Prometheus_Client_Exemplar) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs._value != rhs._value {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_Metric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Metric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "gauge"),
    3: .same(proto: "counter"),
    4: .same(proto: "summary"),
    5: .same(proto: "untyped"),
    7: .same(proto: "histogram"),
    6: .standard(proto: "timestamp_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.label) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._gauge) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._counter) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._summary) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._untyped) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self._timestampMs) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._histogram) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.label, fieldNumber: 1)
    }
    if let v = self._gauge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._counter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._summary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._untyped {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._timestampMs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    }
    if let v = self._histogram {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_Metric, rhs: Io_Prometheus_Client_Metric) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs._gauge != rhs._gauge {return false}
    if lhs._counter != rhs._counter {return false}
    if lhs._summary != rhs._summary {return false}
    if lhs._untyped != rhs._untyped {return false}
    if lhs._histogram != rhs._histogram {return false}
    if lhs._timestampMs != rhs._timestampMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Io_Prometheus_Client_MetricFamily: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MetricFamily"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "help"),
    3: .same(proto: "type"),
    4: .same(proto: "metric"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._help) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.metric) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._help {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if !self.metric.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metric, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Prometheus_Client_MetricFamily, rhs: Io_Prometheus_Client_MetricFamily) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._help != rhs._help {return false}
    if lhs._type != rhs._type {return false}
    if lhs.metric != rhs.metric {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
